{
    "ikokostya": "Maybe rename to disallow_keys_quotes?\n. ok\n. \u0422\u043e\u043b\u044c\u043a\u043e \u0432 \u0442\u0435\u0441\u0442\u0435 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\nrules/disallow-spaces-inside-object-brackets -> rules/disallow-spaces-inside-array-brackets\n. \u0438 describe.only -> describe :)\n. \u041e\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e\u0442 describe \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\n. \u0415\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u043e\u043f\u0446\u0438\u044e require_alignment_object_keys \u043f\u043e \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0438 \u0441 require_space_after_object_keys.\n. \u0425\u043e\u0442\u044f \u043d\u0435\u0442, \u043b\u0443\u0447\u0448\u0435 \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0432 ignore.\n. disallowMultipleVarDecl option allows declare multiple variables in for statement:\njavascript\nvar arr = [];\nfor (var i = 0, len = arr.length; i < len; i++) {\n}\nI suggest add some option for disable this behavior.\n. The ECMAScript 5 specification allows property names to be reserved words http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5\n. > What you purposes we do here?\n1. requireDotNotation by default should work in es5 enviroment and should not report about reserved words in keys of objects. We also need detect strict mode, because in strict mode JavaScript has more reserved words http://www.ecma-international.org/ecma-262/5.1/#sec-7.6.1.2.\n2. We can add new value for this option that enables es3 enviroment and reports about reserved words in keys of objects. But I think more proper decision is to add new option that specifies ECMAScript enviroment and changes work of another options (like es3 option in jshint).\n\nAre you satisfied with changes from #167?\n\nIt is preparation work.\n. - If I set requireDotNotation: true in es3 enviroment (ie8, ie9)\n  obj['while'] = 1 should not report error.\n- If I set requireDotNotation: true in es5 enviroment\n  obj['while'] = 1 should report error, because I can write obj.while = 1.\nNow requireDotNotation option has only first behavior.\n. @zxqfox Any javascript engine.\n. Maybe move all presets in another npm modules with dependency from jscs (e.g. jscs-preset-jquery) and add mechanism for easy use external presets from config?\nIn this case people can add own presets without contributing in jscs and you can change rules in jscs without fear of breaking any preset.\n. Why you remove deprecated rule from presets? This breaks backwards compatibility. We use jscs@^1.0.8 in package.json and after upgrade to 1.11.0 yandex preset doesn't check jsdoc.\n. Why you remove deprecated rule from presets? This breaks backwards compatibility. We use jscs@^1.0.8 in package.json and after upgrade to 1.11.0 yandex preset doesn't check jsdoc.\n. @mikesherov \n\nMinor release:\nAny preset changes.\n\nI think that preset is public interface.\n\nWe recommend installing JSCS via NPM using ^, or ~ if you want more stable releases.\n\nWe use ^ and now we have broken preset.\n. @markelog I expected get stable releases with ^. Thanks for explanation.\n. @mikesherov I mean semver https://docs.npmjs.com/getting-started/semantic-versioning#semver-for-publishers\n. I think it's :ok: . Actually we don't follow our codestyle in this place. We can override this rule or rethink style for modules.\n. As i can see in http://jscs.info/rules.html we can't disable this rule. @markelog is it right?\n. /cc @tarmolov \n. See https://github.com/jscs-dev/node-jscs/pull/1957\n. @markelog https://github.com/jscs-dev/node-jscs/issues/1958\n. Explanation: now yandex codestyle isn't official, i.e. some teams in yandex doesn't use this preset or use it with overrides. Therefore my suggestion on creating repository for jscs-preset-yandex npm package in yandex organization was rejected. \nIn this situation we decided rename codestyle and move npm package for preset to another repo jscs-preset-awesome. Version 1.x of jscs-preset-awesome is backward compatible with yandex preset. \nMigration guide for moving from yandex preset:\n1. npm install --save-dev jscs-preset-awesome\n2. Replace \njson\n{\n    \"preset\": \"yandex\"\n}\nto\njson\n{\n    \"preset\": \"awesome\"\n}\nin .jscsrc file.\n. Actual link to package with preset https://github.com/ymaps/codestyle/tree/master/packages/jscs-preset-loris\n. I created test using good examples from yandex code style https://gist.github.com/ikokostya/6993949bd667ae480235.\n. ",
    "mdevils": "Or disallow_quoted_keys_in_objects?\n. \u041a\u0440\u0443\u0442\u043e :)\n. \u041f\u043e\u043f\u0440\u0430\u0432\u043b\u044e\n. \u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e? \u041e_\u041e\n. \u041d\u0435 \u0437\u043d\u0430\u043b \u043e \u0442\u0430\u043a\u043e\u043c :) \u041f\u043e\u043f\u0440\u0430\u0432\u0438\u043b\n. Hi!\n1. I will think about it.\n2. I think It's possible :)\n3. I didn't get your point. Options dont have default values at all. Option can be defined in config (and then the value must be validated) or not defined. Options, which are not in config, are not used.\n. Thank you for your feedback! :+1: \n. Oh, I see, It is probably Usability or Understanding problem.\nFor every option there is rule validator. If you need to \"check line feed at file end\", you are adding this option. There is no behavior for \"false\" value. If you want to ensure that there is no line feed at the end - there must be another option (like \"disallow_line_feed_at_file_end\").\nThat is why for \"require_line_feed_at_file_end\" there is only one valid value for now - true.\nIn other words, there is no default configuration of JSCS behavior. You can require something using some options or disallow something using another set of options, and there is nothing like \"ignore rule\" because there are no default rules :) Adding option to config = adding rule.\nThis is how it works. Probably it's not simple or trivial.\n. Thank you!\n. Camel-case option names will be available in next release.\n\nRename the config file to .jscsrc\n\nThis suggestion was declined as we have valid json unlike jshint. Many tools use correct extensions (like .travis.yml).\nThank you for your feedback.\n. @deepsweet, in YAML C-style naming is preferable. I switched to camelCase to make configuration valid in case of further API usage. So we can have JSON/API compatible naming for the same options.\n. Hello, Slava.\ndisallow_right_sticked_operators is a common rule with no exceptions. For specific operators and specific cases there should be a specific rule.\nFor example, you can disallow colon (:) using this rule, but if it doesn't match your requirements, you should check out disallow_space_after_object_keys and so on. If some specific cases are missing, you can create a new rule and submit pull request.\nThank you for your feedback.\n. Thank you!\n. \u0425\u043c, \u043f\u043e\u044f\u0441\u043d\u0438 skip_with_line_break\n. \u0421\u043a\u043e\u0440\u0435\u0435 \u0442\u043e\u0433\u0434\u0430 \u0443\u0436 require_aligned_object_values.\n. Hi. I can put the link on jscs main page. I'm not using Grunt, so nothing else I can say :)\n. Checked out your package sources. Looks good. I will recommend it for grunt users. :+1: \n. Yes, you've got it right. Thank you for you submission.\n. Sorry, was a bit busy.\n. Thank you!\n. Fixed in 1.0.1\n. Reasonable. But due to Syntax Tree Structure, I have no good ideas how to implement. But you can try :)\n. Yeah, I see. It is possible. The thing is that I can't find good, easy solution for implementing this in the current rule behavior.\n. Got an easy implementation idea.\nI suggest these regions: /* jscs: off */ -- /* jscs: on */.\n. Yep.\n. Thank you!\n. Available in version 1.0.2.\n. Thanks)\n. It would be an useful feature. The problem is syntax tree generated with esprima. No good solutions yet on modifying syntax tree both consistently and easily.\n. \u0422\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u041d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0435 \u043d\u0430\u0434\u043e \u0434\u0443\u043c\u0430\u0442\u044c, \u043a\u0430\u043a \u0441\u0434\u0435\u043b\u0430\u0442\u044c. \u041d\u0443\u0436\u0435\u043d \u043a\u0430\u043a\u043e\u0439-\u0442\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u0442\u0447\u0435\u0439 \u2014 \u043f\u0435\u0440\u0432\u043e\u0435, \u0447\u0442\u043e \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0432 \u0433\u043e\u043b\u043e\u0432\u0443.\n\u041e\u0431\u044b\u0447\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u043f\u043e\u0434\u043e\u0439\u0434\u0443\u0442 \u0438\u0437-\u0437\u0430 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432.\n. I agree.\nWhat about syntax true | \"allButForLoops\" ?\n// true for backwards compatibility\n. Reasonable. I'm agree with new default behaviour.\n. Today :)\n. Fixed in version 1.0.3.\n. Hello.\nThank you for issue submission. This issue will be fixed in near future. For now you can run jscs multiple times using different subdirectories.\n. Hello. Please try the latest version of jscs. This issue should be fixed using newer version of vow-fs.\n. Thank you for your submission!\n. I don't use XML format in my workflow. But I can accept a proper pull-request on that.\n. Fixed in version 1.0.10.\n. \u042f \u0434\u0443\u043c\u0430\u044e, \u044d\u0442\u0443 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u043d\u0430\u0434\u043e \u0440\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0430\u0447\u0435 \u2014 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0443\u043d\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432 + \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u0432. \u041e\u0434\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043a\u043e\u0433\u0434\u0430 \u0442\u0435 \u0438\u043b\u0438 \u0438\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0438\u0433\u0440\u0430\u044e\u0442 \u0440\u043e\u043b\u044c \u0443\u043d\u0430\u0440\u043d\u044b\u0445, \u0432\u0442\u043e\u0440\u043e\u0435 \u2014 \u043a\u043e\u0433\u0434\u0430 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0438\u0433\u0440\u0430\u044e\u0442 \u0440\u043e\u043b\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445.\n. \u0414\u0430, \u044d\u0442\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u043d\u0430\u0434\u043e \u043f\u043e \u0434\u0435\u0440\u0435\u0432\u0443. \u0422\u0430\u043c \u0438 \u0443\u0433\u0430\u0434\u044b\u0432\u0430\u0442\u044c \u043d\u0435 \u043d\u0430\u0434\u043e \u2014 \u0432 \u0434\u0435\u0440\u0435\u0432\u043e \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0443\u043d\u0430\u0440\u043d\u043e\u0435 \u0438\u043b\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435.\n. Thanks!\n. I suggest creating other rules:\nrequireSpacesInFunctionExpression: {beforeOpeningRoundBrace: true, beforeOpeningCurlyBrace: true}\ndisallowSpacesInFunctionExpression: {beforeOpeningRoundBrace: true, beforeOpeningCurlyBrace: true}\n. I suggest creating other rules:\nrequireSpacesInFunctionExpression: {beforeOpeningRoundBrace: true, beforeOpeningCurlyBrace: true}\ndisallowSpacesInFunctionExpression: {beforeOpeningRoundBrace: true, beforeOpeningCurlyBrace: true}\n. Alex, I am very sorry for my slow reaction to the issue that made you spend your time on fixing.\ndisallowSpaceAfterKeywords rule is just as simple as disallowRightStickedOperators etc.\nI suggest creating other rules: \nrequireSpacesInFunctionExpression: {beforeOpeningRoundBrace: true, beforeOpeningCurlyBrace: true}\ndisallowSpacesInFunctionExpression: {beforeOpeningRoundBrace: true, beforeOpeningCurlyBrace: true}\n. Thanks)\n. Thank you for your submission.\n. I can accept a proper pull-request on that.\n. Thank you for you submission!\n. Thanks :)\n. Thanks!\n. Thanks!\n. Fixed in version 1.0.5\n. I can accept a string option implementation pull-request for disallowQuotedKeysInObjects. (true keeps the current behavior and string value like allButReservedWords).\n. Will be released in 1.0.13.\n. Published with version 1.0.6.\n. Published with version 1.0.6.\n. Published with version 1.0.6.\n. Released in 1.0.7.\n. Check out requireSpaceBeforeBinaryOperators, requireSpaceAfterBinaryOperators, disallowSpaceAfterPrefixUnaryOperators rules.\n. Not sure I've got you right. Feel free to make a pull-request to the documentation to explain the things better.\n. Published with version 1.0.6.\n. Looks like jscs dependency in grunt-jscs-checker is outdated. You should report this issue to grunt-jscs-checker package maintainer.\n. Fixed in version 1.0.8.\n. Never worked with Rhino. jscs can be used just as stand-alone application to validate project files, so you can use it with any project \u2014 based on Rhino or anything else.\nBrowser-version is a planned feature and I'm working on it.\n. Nope, but feel free to add.\n. Browser version is available since 1.0.9. Thank you for your submission.\n. I can accept pull-request for this behavior.\n. If you've got a good idea on implementing this, I would be glad to accept a pull-request ;-)\n. Not sure about storing in Function* nodes, but I'm totally agree that we need better JSDoc parsing approach.\nCode at https://github.com/mdevils/node-jscs/pull/75 looks messy, makes me unhappy to accept pull-request)). We need a good jsdoc parser with a good object-representation. With or without external libraries.\n. I'm not sure about type parsing. Do we need it?\n. Can you please explain me what hard tabs and smart tabs mean?\n. https://github.com/mdevils/node-jscs/blob/master/CHANGELOG.md ?\n. Thanks)\n. Thank you for your submission!\n. Released in 1.0.11.\n. StringChecker should not relay on fs to allow building browser-version.\n. I would accept a proper pull-request on this.\n. I would accept a proper pull-request on this.\n. Published in 1.0.13\n. Can you please explain, what exactly problem is?\n. This fix is incorrect as it will also match @param {String} template Template. Default value is \"{xxx}\".\n. I mean, this problem cannot be solved using RegularExpressions. In @param tag there can be any amount of opening and closing curly braces, but only the first curly brace expression should be used as type (with equal amount of opening and closing braces.\n. Agreed.\n. Released in version 1.0.12.\n. disallowCommaBeforeLineBreak ?\n. Closing pull request for no response.\n. Please, explain this issue.\n. Have you seen excludeFiles option?\n. Can't get why excludeFiles is not enough.\n. I feel OK deprecating exludeFiles and implementing jshintignore/gitignore-compatible .jscsignore file.\n. Will be accepted with a good object-model discussed earlier.\n. Thanks!\n. Duplicated https://github.com/mdevils/node-jscs/issues/60\n. Thanks!\n. Released.\n. Thanks!\n. Thanks!\n. I can accept allButReserved value with automatic reserved keyword list.\n. Thank you for your submission!\n. Will be released in 1.0.13.\n. Thanks)\n. Looks way better. But not finished. I would put example configurations in code blocks.\n. Oh, nevermind. In the first part of the README you are doing it right.\nAnother thing:\n\nrequireSpaceAfterKeywords\nType: Array\nValues: Array of quoted keywords\nRequires space after keyword.\n\nI would put it in reverse order :)\nrequireSpaceAfterKeywords\nRequires space after keyword.\nValues: Array of quoted keywords\nType: Array\n. Do you plan to continue your work on it?\n. It is not urgent, so I have time to wait for it :)\n. I guess we can merge now. Thank you!\n. When using requireSpaceBeforeBinaryOperators you don't need disallowLeftStickedOperators rule for the same operators.\n. Yep!\n. I don't understand what this pull-request does. Can you explain me please?\n. There is enough information in Node Tree. The error occurred because of using Token List.\n. Fixed in 295de4ea6cd87fe6dd71f80cd5d7b879b8c76425\n. Closing the issue. Put a new PR if you are still interested.\n. Looks like a complex behavior. Try to split in a row of simple rules. (See current rules for examples)\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. Interesting.\n. Used on 1.1.0.\n. Thanks)\n. Hello.\nI will be glad to receive a good pull-request on this.\n. I will accept a correct pull-request on this.\n. Thank you for your submission!\n. :+1: \n. > BTW, @mdevils, I promise to support and maintain all of these checks, besides for just contributing the initial features.\nI am very glad to hear. I working on a document for maintainers and would be glad if you join as a maintainer. You pull-requests are clear and straight.\n. Reviewed pull requests. Accepted some, put comments to other.\n. We are almost there :+1: \n. I guess we can close this issue and release a new version?\n. Done :wink: \n. Version 1.2.0 is released. Thanks to Mike Sherov!\n. I suggest using another option name: presetPath. So preset option can be used in StringChecker and presetPath in Checker.\n. Can you rebase please?\n. Thank you for your submission!\n. Travis failed.\n. Thank you for your submission!\n. Thank you for your submission!\n. Thank you for your submission!\n. Thank you for your submission!\n. I agree (assuming it is similar to iterateNodesByType)\n. Yes.\n. Thank you for your submission!\n. Thank you for your submission!\n. Thank you for your submission!\n. Why catch is an exception?\n. Thank you for your submission!\n. Thank you for your submission!\n. Okay, I will implement warning mechanism for this.\n. disallowLeftStickedOperators still covers some cases which are not covered with other rules.\n. 1 \u2014 Sure\n2 \u2014 Not Sure, looks too specific.\n. Thanks!\n. Thank you!\n. Thanks!\n. Thank you!\n. Thanks!\n. Thanks!\n. Can you rebase please?\n. Thank you!\n. Can you rebase? New README format is here)\n. Thanks!!\n. Yep. Feel free to send a pull-request.\n. @markelog what if we add .jscs.js as a fallback?\n. @markelog take a look again please. Merge or decline.\n. OK, Thanks!\n. Thanks)\n. Thanks!\n. Published with v1.2.1\n. Thanks)\n. Thanks)\n. This tool is not about fixing. This tool is about keeping up with style.\n. Fixed in 1.2.3\n. Thanks!\n. Well, currently we have no way to share settings with rules except for their own option values.\n. @mikesherov, getConfiguration() is currently at StringChecker. We can pass some configuration to JsFile I think.\n. @mikesherov, at least JS dialect information is suitable for JsFile, I believe.\n. cc @mikesherov \n. JSCS failed for your pull-request) See build log.\n. Thanks!\n. I guess esprima cannot parse your file. Which ECMA Script version you are using?\n. @gustavohenke ))))\n. cc @mikesherov \n. Hello, Roman Dvornov, Ostrovok :hand: \nThis is a duplicate of #158 I guess.\n. Fixed in 1.2.3\n. Thanks)\n. cc @mikesherov\n. cc @mikesherov \n. Thanks)\n. cc @markelog\n. For now we don't duplicate jshint options. We will notify you in case if it will be changed. Thank you for you interest. I'm looking forward for new pull-requests from you covering other cases.\n. Good point. We will discuss it. Keep in touch.\n. \"disallowRightStickedOperators\": [\",\"] will do the job. Reopen the issue if not.\n. I suggest another approach: mapping.\nWhat we get: \n\u2014 rules are left as is, small and separate.\n\u2014 mapping is just a layer on top.\n\u2014 we have backwards compatibility.\nFlawbacks:\n\u2014 we should keep mapping up to date.\n(I'm about implementation)\n. > Another drawback is that lots of the sniffs are basically duplicated code of each other, creating more maintenance work. \nDepends. In most of cases we can share some code into separate modules. But having little modules for rules, one for each little behavior, makes development way easier.\n. Sure\n. Reviewed PR, looks nice!\n. Reviewed PR, looks nice!\n. Message me when you need a release (BTW have you received email to you and Oleg from me?).\n. Great!\n. Well. This rule we can accept. Feel free to make a pull-request on this.\n. Thanks!\n. We discussed it and the current idea is to use .jscs.js (nodejs-module) as a default and recommended format.\nIf you agree I will be glad to receive PR for it.\n. @mikesherov I've got your point. It sounds reasonable.\nLet's make .jscsrc as a default. \n@markelog agreed?\n. Which version are you using?\n. Specify your config, please.\n. I'm agree. We need a warning first. For all operators except ? and : (ternary operator is not yet covered with the other rules).\n. Please specify your question.\n. Thank you for your contribution.\n. :+1: \n. @markelog Can you please finish on this? :+1: \n. What about the error message...?\n. What if we save backwards compatibility?\n. Leave the original as is, and make a new (with more specific name) instead. Your naming style looks OK for me.\nWith backwards incompatibility we can't just merge your PR until we decide to publish a new major version.\n. Thank you for your contribution!\n. Looks fine.\n@markelog feel free to merge when ready.\n. Thank you for your contribution!\n. Looks fine.\n. Looks fine for me.\n. Did we finish with indentation fixes, Mike? Can I make a release?\n. Thank you for your contribution!\n. First of all, the travis build is failed for your PR.\n. @markelog Oleg, can you look at this?\n. Not yet. I'm waiting for indentation fixes to finish.\n. Those rules did not release yet.\n. JSCS is not about any of style guides (unlike many other style checkers). JSCS is completely style independent and I believe it should be like that in the future. I am aiming on having a lot of little rules to match any codestyle you wish, but no default codestyles, no default presets. I would not like to promote any codestyle. Start from scratch or use a preset explicitly.\n. Sorry, but I have no idea about Google code styles. Feel free to provide a starting point for Google preset as a pull-request.\n. https://github.com/visionmedia/commander.js/pull/184 :-/\n. Thank you for you submission!\n. Errr... requireMultipleVarDecl was never meant to be the same as onevar. This is unacceptable. The only way is to have this behavior as a separate value for requireMultipleVarDecl.\n. Yep, agreed\n. Which comments exactly are you expecting?\n. Will be available soon.\n. This is already fixed in 1.3.0 :-)\n. You specified preset option with jquery value. So your config inherits options from this preset: https://github.com/mdevils/node-jscs/blob/master/lib/presets/jquery.json\n. Mistype was fixed. Check it out again, please.\n. Mistype was fixed. Check it out again, please))\n. Sure!\n. Merged.\n. Also we need to find out, which plugin-interface would be comfortable for both plugin developers and jscs users.\n. If you have good ideas about it, lets make a try. I don't have good ideas on implementing yet.\n. I must say, this is not a trivial behaviour.\n. I would split those rules if it is possible.\n. Sorry for a long answer.\nAt some point we decided to keep JSCS to be a Code Style tool. So the rules based on the code logic/structure should not be accepted anymore. Sorry for inconvenience.\nIf you want to have this rule for you project, you can make an npm package with this rule and specify it in JSCS config. Or try to push it to ESLint project which is more about code structure/logic.\n. You are welcome! Updated browser-version.\n. Thank you for your contribution. Please exclude jscs-browser.js from the commit.\n. I understand. But I will generate this file before the release. This is the only way this file comes from :)\n. Thank you!!\n. /cc @mikesherov @markelog \nShould we drop 0.8 support?\n. Great! Waiting for Mike's opinion.\n. Thank you!\n. Fixed here: #731 \n. Yep. Let's cut a release this week and create dev.\n. Okay, making a release.\n. jscs@1.4.0 was released.\n. Looks good to me.\n. Great! I think this is a very good direction for us.\n. We should include this in 2.x.\n. Going to finish this work. Do you agree?\n. Nothing. Would you mind if I finish it myself?\n. Good point @Rantanen \n. I believe this is not a good approach: you think you are using declared rules, but some of them might be unsupported yet.\n. @mikesherov I agree\n. You can have a simple pre-commit hook to run JSCS against changed files. This would solve your problem if I got you right.\n. var html =\n    '<div class=\"test\">' +\n    '   <span>multline strings</span>' +\n    '   <span>with nested nodes</span>' +\n    '</div>';\nDoes the same, why would you add unneeded expression?\n. Thank you for your feedback.\n. What if we just duplicate app (lib) structure in tests?\n. Why do we need modules directory?\n. > But we could put them in the lib folder just like we could put tests for them in the root of the tests folder\nI believe this is a good approach\n. Thanks, done)\n. Fixed in 1.4.2.\n. Fixed in 1.4.3.\n. Fixed in 1.4.3.\n. I believe we should include deprecation notice in the output once for each deprecated rule if it exists in the user config.\n. I believe we should throw a warning in StringChecker once for the whole run.\n. I'm agree with @mikesherov.\nLet's not break compatibility with reporters and output an error for every file.\n. > Can we call this option fileExtensions instead? The ToProcess seems overly verbose.\nI agree\n. > Is this better off as a CLI option? It seems a bit strange for this to be in the rule config.\nAssuming we already have exclude-paths, I believe extensions looks OK for config. \n. I'm fine with it\n. Was thinking about it. Not sure we need it. I'm fine with our current commit messages.\n. Not planned yet.\nAnd yes, a proper PR with tests will be accepted.\n. Wow, nice one.\n. > Also, @mdevils, what do you think? Doesn't seem like a bad idea to allow JSCS to consume an AST directly.\nI think we can try this. For some cases esprima-invalid code can't be parsed. JSX code for example. I'm not sure how it goes, but worth a try.\n. So you still need this method? If not \u2014 we'll better close PR.\n. Thanks!\n. Suggested plugin interface:\nplugin:\njavascript\nmodule.exports = function(jscs) {\n    jscs.usePlugin(require('jscs-plugin')); // if one plugin uses another\n    jscs.registerRule(new Rule());\n    jscs.registerPreset('presetName', {...});\n    jscs.registerReporter('reporterName', function(errorCollection) {});\n};\n. @zxqfox did not understand you.\n. Updated the example.\n. Yes, I'm working on it already.\n. I will return to it this week. Going to finish by wednesday. \n. Fixed here: #731 \n. I think displaying esprima errors as nice as we do with style errors can help users a lot. And not so difficult to implement.\n. @mikesherov I believe esprima adds line/column info into the error (using separate fields)\n. I can check this out at monday.\n. Thank you for your PR. We are trying to make a smooth transition to autoformat feature, which I suggested in  https://github.com/mdevils/node-jscs/commit/40ebf3856506a85e8b120815af9af6f921eb3165\n. Thank you for your interest. We will go a bit another way. Every rule will get Errors-object associated with the rule. So the rules won't need modification.\n. I have proof-of-concept generator code from tokens. It works. I doubt we need AST tree to generate the code: it is far more complex.\n. Right after I finish with plugins I'm going to show an autofixing example. It is easy and requires minimal rule rewrite.\n. I'm against separated module. It would incredibly increase complexity. I have implementation ideas and I have already show you some. This week I am going to work on better assertions (assert.spaceBefore(...)), which will allow as to implement auto-fixing for free.\n. Started to work on the issue: #751 \n. Here wo go: #1058\n. > 1. Saving file in case of not stdin.\nWhat do you mean? Current implementation saves changes into files.\n. > 1. Strategy for non whitespace fixes.\nI think we can leave this as is and focus on whitespaces first.\n. It is.\n. I believe tabs should not be used for alignment.\n. I'm working on 2.x concept. I will keep in mind that you are ready to help. There will be some tasks soon.\n. Does rule registration take much time?\n. > Given this proposal however, it seems to make more sense to ignore the error at the time of being added.\nYep, that's how I thought it would be.\n. #! is for #!/usr/bin/env node\nYou can't place any line before this line.\n. /cc @mikesherov @markelog \n. @mikesherov Can you take a look please, so I can continue to work on 2.0?\n. - Integrated coverage: #557\n- Renamed methods: findTokenBackward, findTokenForward -> findPrevToken, findNextToken.\n- Wrote tests for all new methods.\n. Well, we can.\n. /* jscs:disable disallowMultipleLineStrings */ works until /* jscs:enable disallowMultipleLineStrings */.\n. Great idea. I will look if we can use Travis for it.\n. Great. I will implement LCOV format support for separated-coverage and integrate it with coveralls.\n. https://github.com/mdevils/separated-coverage/issues/4\nhttps://github.com/mdevils/separated-coverage/issues/5\n. Yes.\n. Finished coveralls integration: https://coveralls.io/r/mdevils/node-jscs\nI am ready to merge this. Please take a look.\n. @mikesherov this seems very hard to implement correctly... I have some ideas on how to do it (improving Configuration). I can take this issue.\n. Harmony flag looks OK.\n. Does esprima team have any estimation for harmony-supported release?\n. @mikesherov In this case how can we guarantee stability? I mean sometimes fixing bugs for one esprima version can break another.\n. I believe this method should require token type as first argument.\n. Sorry for a delay.\nThis is a very dangerous default behaviour as it completely breaks compatibility with all CI tools and integrations.\nCI reports should include all errors. Sublime (and other editor plugins) expect the same: all errors reported.\nI suggest reconsidering this feature. I believe we need a discussion.\n. > We should have a default of Infinity. But having the ability to specify a max is expected functionality of all linters.\nI totally agree. I'm not against this feature. I'm only against the proposed default.\n\n@mdevils also, @markelog wanted to know your thoughts on the \"static\" property of maxErrors. Can you comment on that so we can resolve this?\n\nI checked out the code. I'm agree with @markelog. This property is run-specific and should not be static. I propose to put it in the constructor.\n. It would take me too long to explain what to change, so I made another Pull Request based on this: #673\n. Integrated into StringChecker/Checker, going to publish tomorrow, some fixes are still required. No compatibility broken yet.\n. Published version with StringChecker / Checker integration. Check it out please. If you find it OK, I will remake CLI configuration (going to simplify it using the same classes).\n. Added excludeFiles processing.\n. Next steps:\n- [x] example plugin\n- [x] tests for Configuration/NodeConfiguration.\n. This is how jscs-jsdoc-plugin would look (changes from current version): https://github.com/jscs-dev/jscs-jsdoc/pull/14\n. Added some tests. Going to continue work on tests.\n. Not a design review anymore. This implementation does really work.\nWhat I have done:\n- Wrote some more tests for Configuration.\n- Switched CLI to use Configuration (instead of options-files).\n- Included config tests to npm test.\nNext steps:\n- [x] Cover Configuration and NodeConfiguration with tests.\n- [x] Continue work on CLI to simplify configuration logic.\n- [x] Rebase to master and accept esnext, esprima options.\nP.S. I'm into this approach, the code really simplifies.\n. What I have done:\n- Almost finished Configuration tests.\n- Implemented overrides for Configuration\n- Switched CLI to use Configuration methods.\nNext steps:\n- [x] Finish with Configuration tests.\n- [x] Write NodeConfiguration tests.\n- [x] Rebase and implement esnext and esprima options.\n. What I have done:\n- Finished Configuration tests.\nNext steps:\n- [x] Write NodeConfiguration tests.\n- [x] Rebase and implement esnext and esprima options.\n- [x] Port the error about non-camelcase options.\n. What I have done:\n- Finished Configuration tests.\nNext steps:\n- [x] Write NodeConfiguration tests.\n- [x] Rebase and implement esnext and esprima options.\n- [x] Port the error about non-camelcase options.\n. What I have done:\n- Finished NodeConfiguration tests.\nNext steps:\n- [x] Rebase and implement esnext and esprima options.\n- [x] Port the error about non-camelcase options.\nI'm almost there! :smile: \n. What I have done:\n- Finished NodeConfiguration tests.\nNext steps:\n- [x] Rebase and implement esnext and esprima options.\n- [x] Port the error about non-camelcase options.\nI'm almost there! :smile: \n. What I have done:\n- Ported the error about non-camelcase options.\nNext step:\n- [x] Rebase and implement esnext and esprima options.\n. Finished my work. Check it out: #731\n. > The math and reaching into prototypes of parent simply to avoid a shared value between error instances seems like unnecessary contortion.\nMoved the logic into StringChecker. Its looks simpler, thank you!\n\nFurthermore, this unnecessarily checks each file even after the limit is already hit.\n\nFixed this.\n. Added message display call to STDIN-handling code.\nIs it correct?\nIf so, I'm ready to merge.\n. OK) Merging.\n. @markelog how would it stop us from breaking backwards compatibility?\n. I agree with @mikesherov about reporting style about this error.\nBut right now I'm talking about current CI-integrations and Instruments (like Sublime integration) which expect all errors to be reported. For them changing this option value from Infinity to something else will be a compatibility breaking change. \n. @mikesherov I answered it yesterday or you did not receive it? \n. Looks good! Thanks :+1: \n. > We have plugin API in development and it would be great if @mdevils says something about his thoughts about it.\nWe discussed this approach with Oleg earlier and I like it.\n@mikesherov,\nrequire: true || { except|only: [] }, \u2014 I like this!\n. Good job on keeping work on it!\n\nbeforeOpeningRoundBrace\n\nRound brace or parentheses? I've seen an issue about this...\n@markelog, @mikesherov, @mrjoelkemp what if we use these names: http://en.wikipedia.org/wiki/Bracket#Terminology_and_names_for_various_symbols\n. > just like right know or module name with a mandatory prefix jscs-\nBad idea. It's better to go nodejs-way: interpret preset name as a path if it starts with ./, .. or /.\nPresets and additional rules (I believe) perfectly works when provided by plugins. I would not like to allow specifying preset as an NPM-module name. That's plugins are made for.\n. Merged.\n. Yes, no changes are made to the source config object in the that configurations.\n. @mikesherov, does custom esprima fix this?\n. @zxqfox We use more than just ParserAPI tree from esprima (tokens, comments). So we actually require esprima, not just ParserAPI-compatible tools.\n. Amazing work, Joel!\n. Hello! Thank you for your submission.\nStringChecker cannot include non-precalculated requires as it is used to build browser-version.\nYou only can do this in Checker.\nAlso, the base path for the require should be process.cwd().\n. Not planned yet. In future you will be able to use a custom preset to share settings between directories in your application.\n. Not planned yet. In future you will be able to use a custom preset to share settings between directories in your application.\n. Nice work! CLI option would be nice.\nBTW Let's not merge before #731 please.\n. Thank you for your opinion and comments, Joel!\n. Fixed all the issues. Check it out again, please.\n. @zxqfox, the problem you are talking about does not exist yet. Implementing any solution for this problem now will result in much higher complexity, which I would not like to have. In future it will not be a breaking change to introduce namespacing. But I believe, we should do this ONLY if we realize the problem exists and it is serious enough.\n. @zxqfox, hard to get the idea. Can you put examples to describe it? Configuration examples?\n. @zxqfox please create an issue so we can keep our discussion going.\n. Merged this.\n. I'm not sure about this rule... Can you realy write a program with no semicolons? What is your use-cases or style guides?\n. Hi, Joel.\nInteresting point to discuss.\nI must say that this approach restricts users to have specific file structure: one rule per file. And I'm not sure if it will work in browserified version.\n. Nice one :+1: \n. > Allow modifying prototypes (or append helpers) to file and node objects;\nI believe this is does not comply with OOP and I am against these kind of features.\n. > JS itself doesn't comply with OOP :-)\nTrue. But our usage of JS does :ok_hand:  \nI'm realy trying to see the problem you are trying to solve, but can't get.\n. What I don't get: \"Allow modifying file/node on check by hooks\". Why would you need it?\nWhat I think you want:\n1. You want to share helper-methods (like a method of JSFile)?\n2. You want to group your rules?\nRight?\n. OK, I will check out your proxy code and get back to this issue, having more information.\nhttps://github.com/jscs-dev/jscs-jsdoc/blob/master/lib/rules/validate-jsdoc.js#L19-L26\n. Great job. The last thing, can you use assert module there please.\nExample: https://github.com/jscs-dev/node-jscs/blob/master/lib/config/configuration.js#L200\n. Looks good to me.\n@mrjoelkemp, @markelog, OK to merge?\n. Yep :)\n. Merged, thanks!\n. This looks hard to implement.\n@lencioni, if you have time to implement this, I can describe you how to make it.\n. > Also, I feel like the errors object should have an assertion object for clean separation of responsibility: errors.assert.spaceBetween(token, token, 0, message)\nGreat idea! Going to implement this.\n. Introduced TokenAssert class and used it in Errors class.\nDid not change the signature of methods yet. And got questions about them.\nI think spaceBetween with space amount specified is too limited to space symbol.\nFor now I still left these methods intact, but changed names to whitespaceBetween and noWhitespaceBetween respectively. Method whitespaceBetween will lack information needed for auto-fixing purposes, so this needs to be thought over. I will return to this in future. Currently I am going to try and implement assertions directly as they would be used in the current rules. And later going to think about missing information.\nHow do you think, @mikesherov?\n. @zxqfox, thank you for your question. This code is very far from final, and you can only see whitespace-methods because I started with a single whitespace rule. Did I answer your question?\n. @gero3,\n\nIt doesn't show which assertion failed for a certain error.\n\nNot yet.\n- The first step is to add assertions to the current code (matching current behavior).\n- The second step is to make assertions add additional information to the errors, which will allow fixing.\n- The third step is to make autofixing.\n- The fourth step is to make better assertions based on results of previous steps.\n. @markelog,\n\nNot sure if i understand where this is going, like why errors.assert.* is better then errors.add \n\nLater I am going to add additional information needed for autofixing to errors from these asserts. Currently this is just an implementation of more useful approach to error handling: reduce the code needed for checking the sources, make the code more readable.\n\nwhy we need to use EventEmitter.\n\nIt is just an implementation of non-circular references between Errors and TokenAssert. If you have better ideas on clear and simple linking, tell me about it, that's what reviews are for :smile:\n\ndo we really need to modify the way we obtain error information or information that we already have is sufficient enough (after some thinking, i think it is)?\n\nI don't know what have you came up with in the process of thinking, but this implementation encourages developers to have explicit error reporting and further explicit autoformatting requirements.\n\ni think we could/should tackle this from different angles, there is number of approaches we could take, we could exploit most of them.\nSo i would encourage people to try their on thing. There is 100 bucks on the line for the cry sake! :-)\n\nI am trying to be open for discussions on many points of implementation. If you feel I'm on the wrong way, tell me about it here. If you do not like my approach, feel free to propose and develop alternative implementation based on your own vision.\n. Advanced to newline comparisons.\n. > No-no, i'm saying there could be a number approaches here, we could try couple of them, then take the best ideas from them.\nWell, I'm trying the approach which I believe works. I have not seen another approach with personally I believe it will work. If you realise this approach will not work, let me know.\n. @zxqfox, yes, I've seen it. I've lived with this idea for several weeks before and later declined it because conflicts and impossible conflict resolution (even in simple cases like spacing + wrapping) is a deal breaker.\n. Simplified binary operator-rules. Had to introduce new methods to JsFile and I start to dislike the JsFile-interface which becomes a huge mess.\nWhat if we split JsFile into sub-objects with their own areas of responsibility?\nfile.getNextToken -> file.tokens.getNext\nfile.iterateTokensByType -> file.tokens.iterateByType\n...\nfile.iterate -> file.tree.iterate\nfile.iterateNodesByType -> file.tree.iterateByType\n...\nSo we get file.tokens for token-routines and file.tree for node-tree functions.\n@markelog, @mikesherov, @mrjoelkemp (just notices we all have nicknames starting with m :smile: ), what do you think?\n. @zxqfox Currently I think I know how to make 80% rules work with each other consistently.\n. > Is this jsfile api exposed outside of jscs? Just wondering if this is a breaking change.\nIt could be used by user-defined rules. I'm not going to break anything. The old methods will proxy calls to the new destinations, so we can just deprecate those methods without any compatibility break.\n. > I think we should defer the fixing of JsFile to later, and continue focusing on landing the assertion library.\nOK, @mikesherov, this seems reasonable, otherwize this pull-request can become a mess.\n. Implemented required/redundant token assertions, simplified require/disallowTrailingComma.\n. @markelog, take a look at the last commits. Seems like token-helper should be eliminated. Generic traversing and assertions do a better job.\n. - Remade assertions to receive arguments as hash-tables as flexibility is already required.\n- Simplified  (remade) validateParameterSeparator rule .\n. I agree with you. Can you please make a final review before I write the tests and merge?\n. Rebased from master, fixed the issues you have reported, wrote tests for whitespaceBetween and noWhitespaceBetween.\n. @markelog, here you are :cake:, meanwhile I'm going to fill the coverage :)\n. Thank you for your approval, @mrjoelkemp.\nWaiting for @markelog and @mikesherov.\n. Oops, I forgot to test new JsFile methods. Going to fix it.\n. @mikesherov, I believe it is. Merging.\n. Done.\n. Thank you ;)\nNow I think we should use the assertions in the old/new rules and introduce new assertions.\n. Take a look: https://github.com/jscs-dev/jscs-jsdoc/pull/55\n. It's OK for testing your plugin. Users will not have problems with your plugin, they will be fine with just plugin name.\n. LGTM\n. Yes, it is separate)\n. > However, I'd like to see assertions land first.\nSure, I've done the assertions already and waiting for @markelog to review it.\n. Got better structure and full coverage for JsFile. I think JsFile test looks more friendly now.\nPlease, take a look.\n. OK, merging)\n. @mrjoelkemp well, this case can be completely handled using whitespaceBetween/noWhitespaceBetween as there can't be a case with no separator and whitespace is not a token. The problem here is (which I also noticed while refactoring this rule) that the rule is unreasonably strict.\n. Hi, Alex.\nJsFile has method iterate(cb, node). I trink it fits your requirements.\n. Thank you for your contribution.\nIt can be solved easier by introducing an option allowNewLine to whitespaceBetween\n. > Or make whitespaceBetween to allow newlines all the time?\nOK for me.\n. > I think we should land this soon and release 1.8.1 in case of regressions. Thoughts?\n+1\n. Made a huge step towards harmony support.\n@mikesherov, @mikesherov, @mrjoelkemp, take a look, please.\n. Well, I realised it is very hard to support this iteration in JSCS. I suggest using estraverse.\n. Continuing in #817\n. :+1: \n. @mikesherov, @markelog, @mrjoelkemp, take a look, please!\n. @mrjoelkemp For us it's currently not useful. Usually leave is required for Visitor-pattern implementation, which is good for compilers, translators and so on. \n. Hello, Jordan. Thank you for your contribution!\nAre undefined and arguments really keywords in ES3? Can you please provide a link about it?\n. Yes, I did check it out before. There was just a comment about undefined and arguments:\n\njscs complains about 'undefined' and 'arguments', both of which are reserved words in ES3.\n\nI can't remember them being keywords, so I ask for a link with that information.\nOK, now I go for a ES3 spec and find it here: http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\nThere I can find keywords list: \n\nAnd no undefined and arguments there. And not even in ES5.1: http://www.ecma-international.org/ecma-262/5.1/#sec-7.6.1.1 Even more, both specs tell me, that undefined is just a property of global object and not a keyword.\nSo please guide me, where can I see undefined and arguments being keywords and how this pull-request helps you?\n. OK, let's assume undefined and arguments are not reserved words, but we want them to be reserved for us (as I can read In your comment in the thread). How does it help us? As I can see, all browsers support undefined and arguments be used as Object literal keys and member access properties.\nOr not?\n. This fix is way better!\nJordan, does IE6-8 really fail on x.undefined = 1; or x.arguments = 1; ?\n. I have just launched IE8 in a virtual machine environment and tested:\njs\nvar x = {};\nx.undefined = 1;\nx.arguments = 2;\nalert('undefined: ' + x.undefined + '; arguments: ' + x.arguments)\nBoth worked fine in IE8:\n\nLink for reproduction: http://jsbin.com/tinepasuka/1/\n. Thank you for cooperation!\n. CLI looks less complex now! Good job, Mike!\n. LGTM\n. :+1: \n. Hello, Mike.\nGood job on this PR. In this implementation I can see es3: true, es6: true values. What if we introduce es: 3, es: 6? This may be simpler?\n. > Are there any cases where multiple discrete values matter?\nI don't think so.\n. @mikesherov, thank you :wink: \n. Mike, I have one more idea.\nWhat if we introduce new class Language (or better Dialect) and implement methods getKeywords(), isKeyword(...), isReservedWord(...)  in that class (having child classes Es3Dialect, Es5Dialect, for instance).\nAnd then rules would just use it: if (file.getDialect().isKeyword(keyword)) { ... }.\nSo we completely encapsulate this in a class and in the future we can even introduce dialects like JSX and others without touching the rules.\n. CLI options are OK for me currently, Mike. It's only about JsFile :wink:.\n. @mikesherov are you sure while is not a keyword in ES5?\nI've seen it here: http://www.ecma-international.org/ecma-262/5.1/#sec-12.10\n. > it's more like isValidPropertyName where the answer is pretty much true for everything in ES5 and above.\nI like isValidPropertyName. So we can also have isValidObjectLiteralKey :smile:\n. @mikesherov, oh, OK.\n. I agree with @mikesherov. Currently most websites respect ES3 due to IE8 JS implementation.\n. > I'm afraid that introducing a dialect class/concept is overkill for this.\nI believe this is best for the future. Later we can introduce many JS-dialects support like ES7,..., JSX. Especially JSX as React.js becoming more and more popular, we can, later, add possibility to put dialects in plugins.\n. OK, Mike, lets postpone this abstraction layer until we face considerable amount of rules with dialect-specific behaviour.\n. Made a final review. Everything looks cool. Good job!\n. Going to work on this soon, thank you.\n. > We could rewrite it in another way to make it explicit and visible.\nYes, but later. This is a hotfix-like approach. I need to think further to come up with better solution later.\n. :open_mouth: \n. Well... Actually I would not allow installing jscs globally... Global installation is the well-known bad practice.\n. Seems like there are some path problems. Will take a look.\n. Wow, I didn't know we recommend that O_O\n. Would you please try and use our assertion methods?\n- Assertions: https://github.com/jscs-dev/node-jscs/blob/master/lib/token-assert.js\n- Example: https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-before-binary-operators.js\n. Feel free to fix that check.\n. In this case \u2014 no idea.\nIf you want to test tokenBefore with no prevToken, you can pass the first document token.\n. That check is needed in tokenBefore, not outside of it. So its easy to add and write a test.\n. Which problem did you face?\n. LGTM.\n@markelog, please take a look.\n. Thank you! Added the link!\n. > Do you think about regrouping rules according to @markelog's work (https://gist.github.com/markelog/752e53faf9f27de4024d)?\nI would leave this for later work.\n. > Looks awesome! Small thing but the JSCS icon links to https://jscs-dev.github.io/ which is a 404 now.\nThanks, will check this out!\n. Thank you, guys!!\n- @mrjoelkemp, @hzoo, added all the companies/products. Tell me if you have more.\n- @mrjoelkemp, fixed README.md references.\n. Fixed style issues, tried and published website to http://jscs.info/\n. I am ready to merge this. How do you think?\n. @just-boris,\n\nWhy are you are parse rules through Regexp instead of JSDoc? It may cause some issues in future when rules will become more complicated.\n\nI believe this can be fixed later if we get issues.\n\nYou still have a very long page with whole rules list. What about short rules index for faster navigation?\n\nI would postpone this too. First I want this to be merged to avoid complicated rebases later.\n. @zxqfox I see you point, but it will be really difficult to keep them in sync otherwise. \n. Merged. Thank you a lot, guys!\n. @markelog moved repo to https://github.com/jscs-dev/jscs-dev.github.io\n\nTwitter feed, if we need one, should also show \"#jscs\" tweets\n\nI believe we need it, it indicates that the project is alive and in active development. About #jscs, try that hashtag, there is a lot of garbage, so it is useless.\n\n\"who uses\" reference should be more focused, now everything is in the pile without evident structure\n\nI would like to have logos of the key projects on the page. That is way more friendly. \n. > Rules should be dived and clusterized with their own pages and description for them should be taken from JSDoc as it was in @just-boris pull\nShould be because...?\n\njscs.io also could be used, as redirect\n\nHow?\n\n\"Extensions\", \"Friendly packages\", \"CLI options\", \"options\", \"presets\" should be moved to their own pages\n\nWorth discussing.\n. Made an attempt on JSCS online demo: http://jscs.info/demo.html\n. @zxqfox Which plugins? Fell free to send PRs)\n. Thank you ;)\n. Errr... why did you merge? For me nextToken is way clearer than subjectToken.\n. As I can remember, @mikesherov wanted to do something about it.\n. Awesome!!\n. @markelog I think we can put it to the main repo and reuse it at website.\n. I have a prototype in v3 where it was implemented, so feel free to close.\n. LGTM.\nWhat does strict mean?\n. Great job, Joel!\n. LGTM\n. Sure, I till take a look tomorrow.\n. OK, No problem.\n. +1 from me.\nWe had issues with windows and several times we broke windows.\n. In this example tests were not run, just linting and style checking were included. Can you please enable tests?\n. Great job, @lahmatiy!\nFeel free to remove those tests, it is fine without them.\nPlease use getLastNodeToken as I noted above.\n. Agree with @mikesherov \n. I like the current behaviour.\n. I have added JsFile::render() method and several tests for it. Seems like it works. \n. I think this is almost ready to merge. I plan adding some tests.\n. I have rebased this PR.\n. I'd add a new assertion method blankLinesBetween. What do you think about it?\n. This preset is good to have :+1: \n. > Perhaps a different way forward is to simply ask the user which dialect?: es(3), es(5), es(6)?\nI think it is a good idea.\n. I believe right now we shouldn't put esnext by default. esprima's harmony branch is far from stability right now.\n. Amazing job!\n. LGTM! Good job!\n. @markelog Yes, sure :)\n. Merged into 2.0. Thank you!\n. @lahmatiy I will take a look soon.\n. We discussed this with @lahmatiy, this implementation looks like a hack right now. We need better abstraction for this case (which will also support autofixing).\nI'm going to work on this later, but it might require to make a 2.0 as API rebuild might be necessary.\nWhat do you think?\n. I think this can be merged now :)\n. Thank you guys! I will make fixes you have suggested and will merge this soon.\n. Hello, guys! Sorry for a delay.\nI think having this getNodesByFirstToken is fine. But what I'm not sure is adding these exceptions. I'd split while to two possible operator names while and do-while or something like that. This is more clear and strict. How do you think?\n. Don't listen to me :smile:\nIn this case I think this exception seems reasonable to me. Who would ever disallow while which is not part of do..while to be on a new line...\n. @markelog, @mikesherov, how do you think?\n. Nice idea @mrjoelkemp!\n+1 to @mikesherov\n. +1 to this preset\n. @markelog take a look, please\n. Renamed it :wink: \n. - @markelog \n. :+1: \n. BTW it could be used in jsdoc plugin. Not sure though.\n/cc @zxqfox \n. @mikesherov Yes, looks like getTokens should return combined token list (with comments).\n. Great job, Mike!\nI would add one more assertion method assert.indentation({token, whitespace, message}) or so. I don't like whitespaceBefore being changed in rules.\n. Great job again, Mike!\n. Great job!\n. @mikesherov  +1 \n. Wow)\n. Great job!\n. I guess we must support both.\n. :+1: \n. I think the best way is to have icons/logos of the most popular users on the main page and have the full list of users on a separate page. How do you think?\n. @markelog, why are you doing refactoring, adding documentation and so on here? I can't get the idea of this Pull-request. It's lost in tons of code changes.\n. @markelog, \"additionalRules\":  \"./foo/bar\" is a breaking change. Even in Yandex we have lots of projects which will be broken after this PR. And at the same time I don't see the purpose of this change.\n. @zxqfox +1\n. I think we can have the logo at README as well\n. I will take a look soon\n. @jacksonrayhamilton Sorry for a delay.\nI fixed the issue with code coverage: https://github.com/jscs-dev/jscs-spellcheck/commit/b7dc400c864b4fd794669e16bf1725a70c0a0750\nI will try to fix this in unit-coverage also later.\n. @markelog @mikesherov OK\n. @markelog my parser failed to process your message)\n. Why do you need that much information? We already point to the place where the error occurred.\n. I believe we should not introduce callback here. It would be better to start adding options about how to fix this error. What do you think?\n. @zxqfox, in #1296 you just need to add a rule which requires single space after :. Should be enough?\n. I think having an option {boolean} [options.stickToPreviousToken] is fine. Or isn't it?\n. > @mdevils As I feel it should be resolved by moving tokens thru whitespaces (without adding extra spaces if possible).\nRight now we don't have a good way to move tokens :neutral_face: \n. @zxqfox, The problem is not about missing method, but about missing concept. I believe this should be discussed separately.\n. Looks good to me :+1: \n. I don't exactly understand what is the problem you are facing? Those two examples are just two different structures.\n. @panaggio Do you mean that in case of one property you don't want to have trailing comma?\n. Oh, now I see the difference.\nLooks like a very strange exception to me. Sounds weird to me.\n. +1 for label esnext\n. I don't think live chat will work for us as we have different time zones. Maybe let's consider Gitter or something like that?\n. Hello @astorije!\nThank you for your submission!\nWhy not just create disallowLineFeedAtFileEnd and disallowLineFeedAtFileStart?\n. OK, I understand your explanation as a human, but how machine will understand this? I mean, you won't be able to combine disallowPaddingNewlinesInFiles and requireLineFeedAtFileEnd.\n. I believe this needs more discussion.\n/cc @markelog @mikesherov @mrjoelkemp \n. > requirePaddingNewlinesInFiles and requireLineFeedAtFileEnd: at least 2 blank lines at the end of files, 1 of them being for the line feed (and the other one(s) for style preferences, clarity, ... whatever your team has decided)\n\nrequirePaddingNewlinesInFiles only or requireLineFeedAtFileEnd only: at least 1 blank line at the end of files\n\nRight now we don't have mechanism which would allow rule to access other rule's settings. And it doesn't to me right to have this mechanism.\nI would propose just to go for your requirements and disallow padding newlines in files.\n. @mrjoelkemp I'm not sure how it may help us. Can you elaborate on this?\n. If I understood you correctly, you are proposing to have ambiguous EOF token which includes or does not include last LF?\n. Because right now EOF token is literally the end of file, outside of all ranges, after the last CF, so currently EOF token never has whitespace data.\n. Great job!\n. As for me, there is a strange situation around esprima right now.\n- esprima supports ES6, but it does not support ES5 without ES6 (it does not support enabling/disabling features). It also does not support JSX and doesn't have plugin interface to write a JSX plugin. esprima-fb is not planned to be supported.\n- estraverse supports both ES5 and ES6. And it can be configured to support JSX.\n- escodegen only supports ES5 (no ES6 and JSX support).\n- escope supports both ES5 and ES6, but does not support JSX.\n. I hope someone can share his picture on acorn/babel.\n. Hello!\nI think this commit can be reverted, I copied part of github header id generation algorithm and used it in jscs.info\n. LGTM, but test failed, take a look please.\n. Hello @andreastt. Thank you for contribution.\nI'm afraid inline and inlinesingle was created in compliance with jshint default reporter and changing their output would break backwards compatibility. But the idea of having a new reporter is discussable.\n. Good job @andreastt!\nLooks good to me.\n/cc @markelog \n. Looks like it's not coveralls. I will investigate with issue.\n. Actually is looks like coveralls cannot find some commit (1ca4d61c6fb0c328c02818855405ef99daa83076).\n. Looks like it could not track rebase or so. Can you try to recreate PR?\n. I believe we should not introduce second way of fixing. And allowing to modify AST directly is too dangerous for the compatibility.\n. Thank you for your explanation. I will try to explain the main problem I see with this approach:\nRight now almost all the fixes are made in assertion module. And those fixes are hidden, they are just part of assertion module implementation. Today we are operating on token list and assertion module modifies token list. But token list does not allow us to do a lot of other required changes. For instance, you cannot replace var x = 1, y = 2; with var x = 1; var y = 2;. To apply these changes you need tree. At some point I believe we will start operating on the tree and assertion module will just smoothly switch from token list to tree (because we have good connection between tokens and tree nodes). And during that switch we will not have to touch rules. Both our rules and custom rules will keep working. But if we go and introduce modifying token list directly from the rules, we will tie ourselves into token list and we will not be able to use tree for source modification.\nI would suggest:\n- Remove fixing logic from check method in validateQuoteMarks and move it to assertion module.\n- Add more methods to assertion module. We may even split it to several modules.\n- Start actively thinking about new tree, which would allow us to apply modifications. Or start our own tree if https://github.com/estree/estree project is not going to finish in the next several months (For me it looks like they are stuck).\nThank you.\n/cc @mikesherov\n. > I'd say this PR should point to different target, i think lintining js in html code should be a 2.0 issue.\nDid not understand you. What do you mean by different target? What extracting from HTML has to do with 2.0?\n. @markelog Undestood. OK, I will merge this to 2.0 after review.\n. @mrjoelkemp Thank you for your review!\n. OK, I will port it to master.\n. It is hard to disagree with the idea. I did propose dialects earlier. Looks like it is still a wanted feature. I think I will be able to make a prototype implementation for this.\n. @markelog Just check out the code. I could not understand anything in the previous version \u2014 it was not properly abstracted \u2014 process routines messed up with control flow. With all respect, I was totally confused when I was trying to fix my build.\nWith this code you have structure and abstraction.\n. > Those are fixed in 2.0 branch :)\nWhy not port this to 1.0 and fix PRs? Where can I read about 2.0 branch?\n. > is subjective and not productive, i can say the same thing about these changes, and mine phrase would mean nothing to you, just like yours statement means nothing to me. If you say something like that - prove it, or better yet, just lay the evidences, not the conclusion.\nHow is it subjective?\nLook at this code:\n``` js\n        // Execute jscs -x on jscs source code for the given presets\n        var child = spawn('node', args, { timeout: Infinity });\n    process.stdout.write(messages.start + '\\n\\n');\n    process.stdout.write(chalk.magenta(' - ') + messages.fixStart + '\\n');\n\n    // For some reason this makes subprocess to be more effective\n    child.stdout.on('data', function() {});\n\n    // Wait until autofix process is done\n    child.on('close', function executeTests(code) {\n\n```\nYou have low-level routines (controlling child processes) messed up with control routines and user interface (console).\nAnd look at this:\njs\n        console.log('\\nPreset \"' + chalk.green(presetName) + '\"');\n        logStep('Autofix execution');\n        return applyPreset(presetName).then(\n            function() {\n                logStep('Unit tests');\n                console.log('');\n                return runTests().then(\n                    function() {\n                        console.log('');\n                        logStep('Unit test on \"' + chalk.green(presetName) + '\" preset are finished');\n                    },\n                    logErrorHandler('Unit tests failure'),\n                    passthroughProgress\n                );\n            },\n            logErrorHandler('Autofix failure')\n        );\nAs you can see, this is pure high-level part: only control flow and user interface. All low-level code is encapsulated into functions with names which are abstracted over implementation.\nSo I conclude that this is not the matter of tastes.\n. I don't understand what are we discussing here. In the initial version you cannot understand what is going on reading the code. We had several process instances, console writes all over around. In the new version you can easily understand the flow just reading the code from top to bottom.\nAgain, it took me 1 hour to debug this file. Mainly because I could not understand the flow and what's going on. That's the only reason I rewrote this file.\n\nThere is only one admonition from me - i would prefer if you don't use promises.\n\nI don't care about \"promises vs callbacks\". We already use promises in JSCS, so consistency is more important than preferences.\n. We finished out discussion in IM.\n. +1\n. CST is already in ES6 and the code is clearer. I would like to continue developing in ES6.\n. I wish I could split changes somehow :)\n. @mikesherov added a comment in CST thread of estree\n. Wrong branch, sorry.\n. @markelog OK, I will make it green soon.\n. Looks like a bug in unit-coverage, will fix it\n. Merged to master.\n. Checkout the project, then\ncd node-jscs\nnpm install\nnpm test\n. Got increased coverage :)\n. I finished fixing according to the comments.\n. @hzoo thank you!\n@markelog which git tags? I have probably missed something.\n. Hello @lukeapage. I will soon look into this issue and respond.\n. According to the idea of unit-coverage, to increase the coverage of token-assert, you need to improve tests of token-assert instead of testing it indirectly.\n. From my point of view, future of autofixing should be just an option autofix on the check method of a rule. Having CST, we can apply changes during checking (if necessary) and nothing will break. So I would avoid adding more complexity to the system and I'd like to keep it simple till we integrate CST.\n. Hello @Francisc. I will soon look into this issue and respond.\n. TODO: Remove object pattern properties while fixing.\n. Thanks, will fix it soon.\n. Fixed in 3.0.1. Please check it out.\n. Can you please test it on 3.0.1?\n. Thanks, will fix it soon.\n. Fixed in 3.0.1. Please check it out.\n. @hzoo I though so\nWill take a look soon\n. You think it's a bug?\n. I think it's actually for Babel\n. Since this is a parse error from Babel\n. \ud83d\udc4d \n. I can accept an option for tab width in a pull-request.\n. isConfigExist does not look like a good name. Try doesConfigExist or configExists.\n. Let's not make public fields. I suggest this._config and this.getConfig() as a getter.\n. Which text do you wish to get?\n. Never met this before. Is it useful?\n. disallowLeftStickedOperators can be replaced with disallowSpaceBeforeBinaryOperators, disallowSpaceAfterPrefixUnaryOperators, disallowSpaceBeforePostfixUnaryOperators.\n. I am not sure about this. I'm agree with google preset in jscs, but I'm not going to follow google codestyle (assuming this preset will change in future).\n. Can you provide a link with google codestyle described?\n. Empty options looks invalid. What if we add more lines to description using \\n?\n. {Object|Null} let's not mix types.\n. {Object|Boolean} -> {Object|Null} let's not mix types.\ncheckIfPunctuator: bad function name, no hint of return value (looks like Boolean-only). Let's rename to getTokenByRangeStartIfPunctuator if you realy need this method.\n. illegal spaces: [','] \n. We should add this validation))\n. \u0427\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u0438\u043c\u044f?\n. Very strange condition. Explain this please.\n. It is a short executable from separated-coverage package.\n. https://github.com/mdevils/separated-coverage/blob/master/package.json#L11\n. For now I'm not sure there can be situation with no token (if you pass real node range).\n. This method is very dangerous.\n. Yep, was thinking about it, thank you!\n. > So this would not come up if user doesn't use TTY?\nYou mean browser version? If so, we don't even include reporters there. Users are free to implement their own reactions.\n. Let's just pass harmony-version esprima for this?\nIt will be hard to keep this API in future (boolean-case).\n. I was thinking about letting users to make their own JSCS build using browserify, but... hard to implement right now.\n--esnext is more preferable (for me). jshint selected esnext, plus no mess with --harmony flag from node executable.\nWell, what if we remake Checker/StringChecker constructor?\nWas:\njs\n// Overload #1\nconstructor(Boolean verbose, Boolean esnext)\n// Overload #2\nconstructor(Boolean verbose, Esprima esprima)\nMy thoughts:\njs\n// Overload #1: backwards compatibility\nconstructor(Boolean verbose)\n// Overload #2: HASH params \u2014 better API\nconstructor({verbose: Boolean, esnext: Boolean, esprima: Esprima})\n// if both `esnext` and `esprima` options are specified, we can throw an error\nExample:\njs\nvar checker = new Checker({esnext: true});\nThis lets us:\n- Include esprima-harmony in browser-version\n- Deprecate esnext flag in the future (and introduce new flags later).\n- Have no ambiguous arguments.\n. I agree.\n. Please wait for #731 here, there is another way to configure these cases (for both StringChecker and Checker separately).\n. Good question!\nI believe it won't be difficult. For example, we can have getInvalidOptionNames() method in future.\n. Forgot it, thanks! Will fix today!\n. Yep, missed it, thanks) Going to fix it today.\n. Yes, in future we can remote these methods from StringChecker. For now I kept them for compatibility reasons.\n. True) Thanks, will remove it.\n. @mikesherov, nice one! I don't see any downsides at supporting function-types for rules. Going to implement this.\n. Fixed.\n. Is 0 a valid line number? I doubt it.\nAnd I guess you should specify a column as well?\n. > Oh, because it's declared as optional in jsdoc. Probably it isn't right.\nIf it is optional, write column === undefined, don't go with implicit boolean conversion.\n. > Invalid error location data: <' + message + '> at <' + line + '>, <' + column + '>\nI think this is a bad error message.\nI would go for more specific errors like \"Unable to add an error,columnshould be a number\", \"Unable to add an error,lineshould be a number\".\n. > Is 0 a valid line number? I doubt it.\n\n\nWell, I thought some functionality throws errors without valid line numbers. We can left undefined values allowed for that.\n\n\nI mean 1 is the first line number. 0 looks invalid.\n. > > And I guess you should specify a column as well?\n\n\nColumn is optional atm so I would like to know why. I should fix that if it does only because of duck typing.\n\n\nColumn is not optional. You must pass line and column as two separate arguments or {line: Number, column: Number} as a single argument.\n. > > I mean 1 is the first line number. 0 looks invalid.\n\n\nYup. But what to use by default? Can it be used without line number?\n\n\nWe are talking about the test, right? For the test use can use 1.\n. We don't need column undefined I believe, we should throw an error for undefined value.\n. Ambiguous method name. I would suggest getUnsupportedRuleNames().\n. I agree that it is good to use notExist: true, noSuchRule: true to emphasise that these rule names does not exist.\n. This code can exceed maxErrors limits. \n. In which cases would we need value 1?\n. Oh, I see, OK!\n. I object. Dot is not a binary operator (, is not either, but this problem we will revise later I hope)\n. @gero3, did not understand you.\n. @mrjoelkemp, good idea! I will play with it later, when I get more different assertion methods.\n. +1 to config options\n. Don't know exactly why, but I think we should filter in StringChecker and leave Errors as simple as possible.\n. @mrjoelkemp, yes! If you don't mind, let's do that way?\n. +1\n. This will fail for browser-version. You should declare a method like _loadPlugin and override it in NodeConfiguration.\n. Yeah, we should!\n. > if we only have lib/config/configuration and use try/catch to determine if we're in the node or browser environment?\nI think this will make the code more complext and lead to the future breaks, because you will have to include some external modules with hacks (to disallow browserify include it), put many catches. So currently I think we have simpler solution.\n. I agree with @mrjoelkemp.\n. I vote for \"leave this pull-request as is and rename in future (Operator to Punctuator, for example)\"\n. Oops, my bad, will remove this.\n. I agree, this is not an obvious method.\n\nlike Punctuator is always the operator token\n\nNope.\n\nCould add test for it?\n\nI will, later.\nDo you have ideas on renaming/reworking?\n. Thank you)\n. OK, I don't mind. Thank you)\n. Unnecessary line.\n. OK :)\n. I personally have no preference. For my code I choose hasOwnProperty().\n. switch (x) { default: /* here */ }\n. Noticed this problem. I am looking forward for better JsFile in future. Encapsulating esprima-logic in JsFile can solve this problem in future.\nI will look into this later, deal?\n. We do not currently do iteration over fixed properties: key's, id's, parameters and so on.\n. Yes\n. I don't have answer))) This delete this.\n. Rename to what?\n. Oh, OK.\n. I mean I will delete this :)\n. Option -t looks strange. What if we just remove short variant: .option('--es3', 'validates code as es3')?\nI believe --es3 is short enough.\n. Thanks, will add this!\n. Thanks, will fix this!\n. Fixed\n. Fixed\n. I think we can reconsider this later\n. License section?\n. tokenIterator is a strange name for this. Let's go for tokenIndex.\n. I think a simple class would be nicer and more obvious here.\n. Please, use JsFile::getLastNodeToken() method (https://github.com/jscs-dev/node-jscs/blob/master/lib/js-file.js#L230).\n. There are two types: Block and Line\n. Found it #901 :)\n. Oh, sure!\n. The problem is that StringChecker catches parse errors. If we would parse in JsFile constructor, we won't be able to create new JsFile instance. Currently JsFile is created with empty esprima node tree information.\n. OK, thank you!\n. Agreed.\n. I've added +1 for tokenEndPosition indexes... But I can just ignore EOF there...\n. Yeah, though so.\n. I'm not sure if it is weird.\n. Yep, strings perform good these times :)\n. Correct structures are easy to read.\n. I believe rules should not access whitespaceBefore property.\n. > Keep looping as long as fixes > 0 and violations < violationsOfPreviousRun.\nThis might not work. For instance one rule does 1 fix and then there are 2 or more fixes needs to be done also.\n. Fixing token without reparse is way harder.\n. Yeah, I vote for deferring this discussion till later. I believe good assertion layer must cover 100% of cases.\n. OK, I will fix this.\n. I can't say I like 5 runs approach, but I think we can leave this for now and watch for user feedback.\n. Here we go: #1062\n. This is a valid JsDoc: http://usejsdoc.org/tags-type.html\n. This case is partially covered in JsDoc, so different projects use different notations: {Promise ~ Type}, others \u2014 {Promise * Type}. Following jsdoc documentation, the only close notation is {Promise<Type>}.\n. This looks easier, thanks\n. Assertions.\n. This is StringChecker test and for some reason StringChecker was not actually tested here. Checker was. I have changed new Checker(...) to new StringChecker(...) and it required to change some tests for StringChecker compatibility.\n\nDoes this require a change in the way users use this feature?\n\nNope.\n. I agree.\n. I agree.\n. I agree.\n. Yeah, I thought so too... LineComment and BlockComment has clearer meaning.\n. I would vote for renaming to something like getLineBreakStyle or getLineBreakType\n. should not?\n. Can you explain the purpose of this option?\n. It will probably fail on this:\nvar string = \"123'456\"; // -> '123'456' \u2014 syntax error\nAnd also. Let's not change token values inside rules. Let's add another assertion to Assert module.\n. +1\n. Why private instead of protected? You're overriding, so it is protected.\n. Same question about private.\n. +1\n. Same question about private\n. This should be a @protected function _loadExternal.\n. Why?\n. I'm not sure about this. As to me they are all Yoda-style. And still I can't see enough reasons to break backwards compatibility.\n. I'm not talking about the builds. I'm about the unexpected behaviour change. For instance, I know several projects which rely on the current behaviour.\n. Nope, it's neither part of public API not part of plugins API.\n. It's a static method of JsFile, plugins cannot access it (without hacks).\n. Most of the params are not optional. I introduced object because signature became to complicated. Probably the problem is the name: options. I can rename it to params.\n. In fixing we do not support max errors.\n. Yeah, thank you for noticing. I will figure this out.\n. Good point, thanks!\n. Fixed this: reused _createJsFileInstance.\n. This is a very frequently called function so I decided to have a fast for.\n. Yep, probably yes.\n. Yes, whitespace are tokens now, so no whitespaceBefore anymore.\n. +1\n. I have to rewrite it somehow, since comments don't have fixed positions anymore.\n. Sure, no problem.\n. What do you mean? Create a new npm package for our internal assertions?\n. Can you try and spell it better?\n. Yep, assert(true) didn't do anything at all.\n. Automatic.\n. Yep, there was an exception thrown here.\n. I used startsWith. Couldn't use match with automatic test rewriting (i.e. converting to regexp is tricky).\n. I think we can do it as a next step, not necessary before merging this.\n. I don't think so\n. I will remove this before merging. I have it for the test rewriting tool.\n. It was converted automatically (there are around 100 cases like this) and to have property does not match for most. Quite often you have that property, but with negative value.\n. Yes, sure.\n. string I use in case if just \"contain\". But we have like 20 cases where we check if string starts with another string.\n. Oh, yes, sure.\n. Fixed.\n. Yes, sure. Now token list contains both Code, Comment and Whitespace tokens.\n. What do you question?\n. Actually not always according to the code :)\n. I needed getFirstToken to ignore Whitespace, but just silently having this as a default behaviour seemed not so good to me. So I changed getFirstToken and getLastToken signatures to match getPrev/NextToken signatures.\n. Nope, for iterating the list which changes during the iteration. I had problems with it. Because if you just use forEach, then index becomes invalid once you push items (like adding some whitespace before the token).\n. How would you propose to decompose?\n. Actually we can have just 1 private helper and pass the direction: 1 or -1.\n. Lol, I wrote this just by the habit, will fix this :)\n. Tried to decompose, but it looked ugly. I've simplified a bit and added comments instead.\n. This will be fixed with CST which has different properties for these cases.\n. Yes, I will add jsdoc.\n. I thinks it's fine for internal method including the fact that it will be removed soon.\n. In this case CST will completely replace it.\n. Had to fix because of CST version update\n. Nah, it's very specific to this concrete rule.\n. TBD: Use add.\n. Correct, once I implement removing object pattern properties.\n. This concrete case is tested with reportAndFix.\n. ",
    "gustavohenke": "The 3rd point is related to this:\nMy config file:\njavascript\n{\n    ...,\n    \"require_line_feed_at_file_end\": false\n}\nWhich gives me:\nAssertionError: require_line_feed_at_file_end option requires true value or should be removed\n    at Object.module.exports.configure (C:\\Users\\gustavo\\AppData\\Roaming\\npm\\node_modules\\jscs\\lib\\rules\\require-line-feed-at-file-end.js:12:9)\nAlso some other options give me the same exception.\n. OK, thanks for the explanation.\nI hope to give some pull requests soon :)\n. OK, thanks ;)\n. Well, anyway, thank you :)\n. Use Wiki maybe?\n. Duplicate of #160 \n. @mdevils Seems to be 6, looking by the issue title (and the syntax!) ;)\n. What exactly do you want, a Google preset or what? It's unclear.\n. There is a preset option implemented; of course, you can submit a PR to add Google's style guide to the core.\n. Also, YAML is a very clean format.\nHowever, to \"just comment out\", I believe that something like CJSON could be helpful. But I don't think that this is going to be implemented in JSCS.\n. Which specific file you're talking about? .jscs.json or .jscsrc?\nAlso, \n\njust tells me that .jscs.json was not found\n\nisn't a good issue description. You must show some code if you want help.\n. Dupe of #165 maybe?\n. .jscsrc is not officialy released yet.\n. Well, that's probably more a informative issue, right?\nAnyway, that's a must for Idea IDEs, already voted for it.\n. I think dropping 0.8 is a good choice :+1: \n. It's probably the time do this. The list is rapidly increasing.\n. @mikesherov I think it's a definitely a good approach, :+1: for it\n. But that wouldn't make it harder for humans (aka the contributors) parse that file? :D\n. Nice.\nI always had problems with these rules; the new conditional expression spacing seems way better.\n. Hey @MikeKlemarewski, a new version of grunt-jscs-checker has just been published skipping the buggy 1.4.4.\n. Linting can be done independently of your Node support.\nAlso, you probably can check the current Node version in your build and disable linting for older versions, so your code is tested on all supported Node versions.\n. +1 for the Angular/Karma commit message style.\nIt's pretty neat and eases navigating thru the log.\n. +1 for the Angular/Karma commit message style.\nIt's pretty neat and eases navigating thru the log.\n. Maybe it's useful: http://gitcop.com\n. Always check the NPM page.\nThe GitHub readme is the development documentation, so you may see incompatibilities with what is currently published in NPM.\n. @markelog I think @hzoo is already working on it in #749 \n. Seems like the test for the function you changed is timing out.\n. > Improved, grunt task works okay\n@markelog you mean with the changes of this PR? Because Travis is failing right now\n. Seems like a good interface :+1:\n. Yeah, the first example you give is a syntax error.\nI think it's acceptable that JSCS tell you there's an error with your code.\n. Doing premature optimizations are generally the root cause for code that is hard to test or debug.\nIf it's not biting you, don't waste time trying to optimize it.\n. I use Coveralls.\nThey can email you and post comments on each PR when the coverage changes by, say, 3% (or whatever number you configure it).\nAlso, Coveralls works out-of-the-box with Travis.\n. Using another AST parser is an option?\nLook at marijnh/acorn#110, seems to have a great ES6 support.\n. Setting the value of the property to null, as pointed in the docs, doesn't work?\n. Could this be related to #451?\n. > we can't make travis run on Windows\nTravis surely not, but Appveyor yes. It's of great help for projects that need to deal with Windows.\nCheckout Grunt appveyor.yml file, for example.\n. +1 for this enhancement\n. @koistya is not the case it's trying to validate. You are using a custom language, and that causes errors in Esprima when parsing the file contents.\n. I can only imaginate IE7 spiting errors with a trailing comma. Is there anything else?\n. Yup, but for those browsers it's easy as disallowing the rule; some people would argue that it's easier to add more properties to a object, for example.\n. @uglow read the following diffs:\ndiff\nvar obj = {\n   a: true,\n   b: \"foo\",\n+  c: \"bar\"\n};\ndiff\nvar obj = {\n   a: true,\n-  b: \"foo\"\n+  b: \"foo,\n+  c: \"bar\"\n};\nWhich one do you think is the easiest to read?\nI don't follow this rule, but it's a fact that the diffs look cleaner.\n. It has not made into a release yet, it's only in the repository for now\n. Default value is null for every option, what means no lint will occur :)\n. In my opinion this isn't code style anymore; JSHint has an option exactly for such purpose.\n. I believe you're refering to the docs. If so, the GitHub README is the documentation for the development version of JSCS.\nPlease refer to the NPM page for the production documentation!\n. :+1: for this.\nIt's a must, since the readme is getting huge.\n. I think that if someone needs a feature so much, then no problem if such person wants to pay for it.\n. I think that if someone needs a feature so much, then no problem if such person wants to pay for it.\n. Although this is undocumented, you can write your config in plain .js/.json or in a special .jscsrc, which is JSON with comments.\n. :+1: \n. @trevorparscal I think you should probably open a new issue\n. Related: #687 \n. @mikesherov Any prevision about a new patch release?\n. What you want is maximumLineLength\n. Maybe it's related to #634.\nWhat version of JSCS are you using?\n. @markelog I have seen some packages that do test against Node 0.11.\nAnyway, I think that it should be somehow supported now that ES6 support finally landed - Node 0.10 doesn't have a strong support for ES6, but 0.11 does.\n. @mikesherov Although I'm not a core member, I think it should not be merged it into the core, but maybe support it as an official module under jscs-dev org.\n. These rules are not in 1.7.3.\nSee commits 344636ee27e9ec5e4328fe070ef6646536eff161 and 79dc5d3b237c5619cfeda7527dfeabac1739fc90\n. Same issue: #451\n. Fine, I wasn't sure if this should be reported here or in the esprima-harmony repository :confused: \n. @markelog I think @mrjoelkemp is afraid of the backwards incompatible change that this PR introduces, so is this fine for a minor version, or should be treated just like breaking API changes and released in a major version?\n. > ```\n\nio.js\n\nnodejs_version: \"1.0\"\n```\n\n\nThis option will blow Travis if Node.js reaches 1.0...\n. I would vote for lowercase.\n. ",
    "deepsweet": "+1 for the 1 & 2 :)\n. so maybe convert config to YAML? there is a good parser js-yaml.\n. ",
    "twoRoger": "\u041e\u0431\u044a\u0435\u043a\u0442\u044b, \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n``` javascript\nvar x = {\n    a: 123,\n    bc: '123',\ndef: 4\n\n};\n```\n\u0412\u0434\u0440\u0443\u0433 \u043a\u043e\u043c\u0443-\u0442\u043e \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f.\n. @mikesherov Seems like the proposed update is related to \"disallowMultipleVarDecl\" rule only, not to the \"require\" one. Btw, \"disallowMultipleVarDecl\" rule is already implemented exactly as you described)\n. The current implementation is exactly what I need. In our team we allow multiple var statements per function, but consecutive var statements should be joined.\nThe following example is valid regarding to our codestyle:\njs\nfunction main() {\n  var a = 1;\n  a += a;\n  var b = 2;\n  return a + b;\n}\nInvalid example:\njs\nfunction main() {\n  var a = 1;\n  var b = 2;  \n  a += a;\n  return a + b;\n}\nThe only thing I wanted to add is a relaxing option (\"skipWithEmptyLine\"), which would allow the following:\n``` js\nfunction main() {\n  var a = 1;\nvar b = 2;\n  a += a;\n  return a + b;\n}\n```\nProbably, here should be one more rule which would be an exact replacement for onevar from JSHint.\n. Sorry, I'm not going to implement suggested behavior.\nFeel free to close this PR :)\n. ",
    "miripiruni": "I'm fucking idiot :(\n\n. up\n. ",
    "kaero": "May be useful: https://code.google.com/p/esprima/issues/detail?id=197\n. @mdevils I has reviewed this issue and has found that comments' array contains locations of the comments, so we can found all comments for BlockStatements, parse these comments and set temporary options for checks.\n. Am i right that you propose to turn on/off jscs at all for region?\n. ",
    "Krinkle": "See also #223 (requests inline configuration in general, as opposed to just disabling everything).\nThis seems especially needed in case one is dealing with an upstream interface. For example, enforcing camel case identifiers and properties but encountering something like unicodeSpec.Regional_Indicator.\nI'm referencing #102 as this is somewhat of a regression when coming from JSHint as migrating from camelcase: true to requireCamelCaseOrUpperCaseIdentifiers: true is problematic if /*jshint camelcase:false */ doesn't have an equivelent.\n. A similar conflict exists with the + operator. The following sample triggers a warning even though it shouldn't.\njs\nfunction foo(str) {\n    return +str === 1;\n}\nfoo( String( 1 + 1 - 1 ) );\nOperator + should not stick to following expression at example.js :\n     1 |function isOne(str) {\n     2 | return +str === 1;\n----------------^\n     3 |}\n     4 |isOne( String( 1 + 1 - 1 ) );\nConfiguration (reduced example):\n```\n{\n// Valid: x = y ? 1 : 2;\n// Invalid: x = y? 1 : 2;\n    \"disallowLeftStickedOperators\": [\"?\", \"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n// Valid: x = y + 1;\n// Invalid: x = y +1;\n    \"disallowRightStickedOperators\": [\"?\", \"+\", \"/\", \"*\", \":\", \"=\", \"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n// Valid: x = ++y;\n// Invalid: x = ++ z;\n    \"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\"],\n// Valid: x = y++;\n// Invalid: x = y ++;\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n// Valid: x !== y;\n// Invalid: x!== y;\n    \"requireSpaceBeforeBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n// Valid: x + y;\n// Invalid: x +y;\n    \"requireSpaceAfterBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"]\n}\n``\n. Found a way by using a combination ofrequireSpaceAfterKeywords(adding \"function\" to the list of keywords listed in the documentation) andrequireSpacesInFunctionExpression.beforeOpeningCurlyBrace`:\njson\n{\n    \"requireSpaceAfterKeywords\": [\"if\", \"else\", \"for\", \"while\", \"do\", \"switch\", \"return\", \"function\"],\n    \"requireSpacesInFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    }\n}\nThat works for me.\n. It may not be very intuitive, but be sure to also git push origin --tags so that they're actually pushed to GitHub (as opposed to just in your local copy).\nBy default git push only pushes commits and branch pointers, not tags (learn\u00a0more).\nThanks!\n. @markelog This would be a rule to enable in the Wikimedia preset. We currently enforce this rule by convention only. I'd love for JSCS to enforce it.\n. I'm using grunt-jscs-checker@v0.4.0 which is the latest release (from 2 days ago), and uses jscs@~1.3.0 which is also the latest version (released 2 days ago).\n. Perhaps this could be combined with comma's in general.\nE.g. also for comma's in arrays: [a, b], function calls foo(a, b), variable lists var a, b, c; and comma expression a = b, c; return b, c;. \n. I'd be fine with having separate rules for different types of comma's (e.g. having them be part of other rules that among other things can apply to comma's) as long as they're all covered by one rule or another. Whatever makes the most sense (I'm glad we phased out some of the rules that we're too generic and as such made it hard to specify a coding style that was based on specific aspects, e.g. not a blank \"spaces on all the commas\" but something more detailed).\nI've not been able to find a configuration that covers all the cases I mentioned earlier. Disallowing a space before the comma is sometimes detected (though indeed not all). Requiring the space after was not detected in any of the cases I tried.\n. Might be part of #92 and/or #136.\n. How's the release coming? I'm getting into a bit a of chain of blockers which currently boils down to this. One of the intertwined chains is blocking upgrade of grunt-contrib-jshint because it upgraded jshint to a version that removed \"onevar\", and grunt-jscs-checker hasn't made a release because jscs hasn't made a release that adds support for it.\n. @gavacho @mikesherov I can't find anything about requireSpacesInBinaryExpressions. I assume you meant requireSpaceBeforeBinaryOperators and requireSpaceAfterBinaryOperators. So the recommendation is people remove disallowRightStickedOperators in favour of those. I actually had both (not sure why) and it was causing issues for things like return +str or return +!!foo.\n. @mikesherov What about >, >=, <, and <=? It seems those don't work as expected when put in requireSpaceBeforeBinaryOperators and requireSpaceAfterBinaryOperators.\nFiled #378.\n. https://github.com/airbnb/javascript\n. Thanks! I see you went with checkFile instead of checker.checkString(fs.readFileSync. I knew about that method but it consistently threw fatal errors locally. It appears to be passing fine on Travis CI though.\nLater I'll try to reproduce the bug again and file an issue if so.\n. This new rule isn't very good.\nProblem 1: Doesn't detect the example the issue was opened for.\nThe main example this issue was opened for at https://github.com/jscs-dev/node-jscs/issues/540#issue-38657874 is:\nvar bad = {\n  key : value;\n}; var heckWhyNot = 5;\nThat case still passes. The commit tried to add a test for it, but failed. The test has a SyntaxError (hence asserted error count matches):\nUnexpected token ; at tmp.js :\n     1 |var bad = {\n     2 | key : value;\n--------------------^\n     3 |}; var heckWhyNot = 5;\n     4 |\nProblem 2: Asserts the wrong thing.\nIt's not about there being a line break after an assignment, that's a side effect. It's about assignments being on their own dedicated line. The semantic difference is that the current rule doesn't take into account other code that is before or after the assignment on the same line, such as:\n1. Other variables, before:\nvar a, b, c = 1, // Not caught\n   d = 1;\n2. Continuation of previous assignment.\n   Such as the multi-line object literal. This one is not caught because the assignment of the first and second variable are on different lines, but they're still touching at the ends without a line break in between:\nvar a = {\n   b: 1\n   }, c = 1; // Not caught\n3. Incorrectly reports uninitialised variable as assignment.\n$ jscs\n   Variable assignments should be followed by new line at tmp.js :\n    1 |var a, b,\n    2 |    c = 1, d;\n   -------------------^\n    3 |\n. A coding style should look consistent. That means avoid random spaces being allowed to be put and sometimes not being put in the same place. It should thus include whether to require or disallow spaces in array literals.\nThis style guide is known for minimal spacing. Looking at loads of programs written using this style guide, I think it's safe to assume it should be disallowed. The code conventions document where spaces must be put. That means they shouldn't be put anywhere else.\nAlso, I think it makes sense for code conventions not to include every possible mistake (that'd make any style guide tedious to write, or read). A style checker on the other hand should try to catch mistakes.\n. I don't mind whether we include disallowYodaConditions in this preset or not. I know he never mentioned it explicitly in his book or conventions, but it's the kind of thing most people just never do (not on purpose anyway). It's the kind of thing he'd refuse to explicitly document because it's just random (document what to do, not every thing you can possibly imagine one shouldn't do). It's considered common sense.\n. Rules disallowKeywordsOnNewLine and requireKeywordsOnNewLine may be relevant here as well.\n. @markelog\n\n\nHow does a user nullify rules?\ncurlyBraces: false or [..]\n\n\nHm.. Maybe keep using null for that. In my opinion it's not clear whether false means that the rule is disabled or that the rule is in \"disallow\" mode.\nWe could also support boolean values for the common/simple use case of only requiring and disallowing rules.\nE.g. true as short cut for { require: true } and (maybe) false as shortcut for { disallow: true }. \njson\n{\n  \"blocks\": {\n    \"curlyBraces\": true,\n    \"newlineBefore\": false,\n    \"paddingNewlines\": null\n  }\n}\nThough it may not be obvious whether false means it doesn't care (disabled rule), or that it is enabled and actively disallows use of the pattern. Another way would be to use strings instead of booleans. It'd be more verbose but re-uses the same words for clarity:\njson\n{\n  \"blocks\": {\n    \"curlyBraces\": \"require\",\n    \"newlineBefore\": \"disallow\",\n    \"paddingNewlines\": null\n  }\n}\n. Same thing just happened again.\n19:50:10 npm ERR! error rolling back Error: Refusing to delete:\n   .../jscs/node_modules/.bin/esparse not in .../jscs/node_modules/esprima-harmony-jscs\n19:50:10 npm ERR! error rolling back     at clobberFail (/usr/share/npm/lib/utils/gently-rm.js:41:12)\n19:50:10 npm ERR! error rolling back     at next (/usr/share/npm/lib/utils/gently-rm.js:27:14)\n19:50:10 npm ERR! error rolling back     at /usr/share/npm/lib/utils/gently-rm.js:36:12\n19:50:10 npm ERR! error rolling back     at Object.oncomplete (fs.js:107:15)\n19:50:10 npm ERR! error rolling back  esprima-harmony-jscs@1.1.0-dev-harmony { [Error: Refusing to delete: .../jscs/node_modules/.bin/esparse not in .../jscs/node_modules/esprima-harmony-jscs]\n19:50:10 npm ERR! error rolling back   code: 'EEXIST',\n19:50:10 npm ERR! error rolling back   path: '.../jscs/node_modules/.bin/esparse' }\n. I agree with most of these changes but would like to note that I think Crockford would, for code conventions to remain maintainable and easily understood, \"not explicitly forbid every possible stupid thing a user might do\". Instead it mostly states what one should do, leaving implied what one shouldn't do.\nYoda conditionals is one of those things.\n. Afaik yoda conditionals originate from confusion with languages where = is in fact an equality operator. And even then it was a sacrifice in readability to prevent an error, not an actual stylistic improvement. Nowadays this is trivially caught by JSHint.\n. See also https://github.com/airbnb/javascript/pull/220.\n. Whether or not there is a bug in npm, the immediate cause is that node-jscs depends on esprima and esprima-harmony-jscs. They conflict because both packages export a esparse and esvalidate bin. \nFrom what I can see, jscs doesn't use these bins (if it did, it would be uncertain which one it gets). Can we remove it from esprima-harmony-jscs? Or give the bin a different name?\n. @markelog It's hard to be sure since it is a race condition. Initial testing shows the problem is solved. I can't be sure until it is released because we have many different projects each with their own package.json that specifies the version.\n. Would love to see per-file (or per directory rather) discovery of the jscs config file, like JSHint does.\nFor the moment I rely on Grunt to exclude a subdirectory from one subtask, and register another with a different jscsrc file. E.g.:\n``` js\nscripts.test: 'jshint . && grunt jscs'\n\n    jscs: {\n        main: [ '*.js', 'src/' ],\n        test: {\n            options: {\n                config: 'test/.jscsrc.js',\n            },\n            files: {\n                src: 'test/'\n            }\n        }\n    },\n\n```\nWhere .jscsrc.js parses the parent one and overwrites a few properties.\n. Perhaps it's more suitable for JSHint?\n. Done!\n. Ah, found it.\nChangelog -> \"es3\" -> \"Docs: add es3 option to OVERVIEW.md\"\n/cc @jdforrester \n. :+1: At this time, our default run-time environment requires ES3-compatibility. Individual products may feature-test out of this (e.g. VisualEditor is ES5-only), but that requires an explicit action.\n. Thanks, done.\n. Last I checked it also contained ,, hence disallowSpaceBeforeBinaryOperators.\n. He doesn't. I've removed the rule. The few cases I found where he uses object literals on a single line, there were actually no spaces. But neither is enforced.\n. OK. Simplified requireSpaceBeforeBinaryOperators value to true.\n. Space after ### to match all other headings in this file.\n. The rule name calls it 'line break\", but this says \"new line\". Pick one :)\n. Not needed afaik. It's already covered by requireSpacesInsideParentheses. Without that rule, we'd need a rule for if, while, switch, etc. as well. Not just for.\n. @markelog Ah, I see. Nice! I still feel like this should maybe be generalised in some way, but sure, feel free to add this to the wikimedia preset.\n. ",
    "kangax": "Ran into this well when referencing third-party \"G_vmlCanvasManager\" (from excanvas.js), which doesn't satisfy camelcase, otherwise enforced in our project.\n+1\n. Another way to allow for 3rd-party exceptions like G_vmlCanvasManager is by having a whitelist in config; similar to JSHint's \"globals\":\njs\n{\n  requireCamelCaseOrUpperCaseIdentifiers: true,\n  identifierCaseExceptions: [ 'G_vmlCanvasManager', '...' ]\n}\nor even:\njs\n{\n  requireCamelCaseOrUpperCaseIdentifiers: [ 'G_vmlCanvasManager', '...' ]\n}\n..although this might be too confusing.\n. @mikesherov thanks! any idea when you'll be tagging 1.6.0?\n. > foo();? Or foo() && bar();?\nDepends on what this additional option will allow for.\nAs far as newlines \u2014 I don't have a preference. None of the bracketless statements have newlines in my code.\nJust checked Fabric. Out of ~11,6K LOC, we have:\n- 63 x if (...) return;\n- 10 x if (...) continue;\n- 2 x if (...) break;\n- 13 x if (...) return ...\n  - 3 x if (...) return false;\n  - 2 x if (...) return this;\n  - 4 x if (...) return ''\n  - 1 x if (...) return null\n  - 1 x if (...) return fabric\n  - 1 x if (...) return oStyle\nI'm ok with only allowing plain return, break, continue.\n. Yes, having some kind of whitelist of statements/expressions would work for me. Not sure how exactly you'd want to do it but, for example, I could use something like this in Fabric (see previous comment):\njs\nallowStatementsWithoutCurly: [ 'ReturnStatement', 'BreakStatement', 'ContinueStatement' ]\nbut then... what about some more granularity, allowing only specific expressions as part of return statement?\njs\nallowExpressionsWithoutCurly: [ 'BooleanLiteral', 'StringLiteral', 'ReservedWord' ]\nI'm not sure. This could quickly become hairy. Any ideas?\n. I would really prefer blacklist rather than whitelist. It would be tedious to list all statements except 1 or 2.\nSent from my iPhone\n\nOn May 15, 2014, at 8:27, Donald Pipowitch notifications@github.com wrote:\nMaybe something like \"requireCurlyBraces\": [ \"for\", \"while\" ] to always require curly braces or \"requireCurlyBracesInMultiLineBlocks\": [ \"if\", \"else\" ] for just multi line blocks? (See here)\n\u2014\nReply to this email directly or view it on GitHub.\n. I guess whatever I brought up in https://github.com/jscs-dev/node-jscs/issues/244#issuecomment-42580070 would be good for me. Although I ended up just adding {, } around \"empty\" return statements. I don't like it but whatever works, so I'm using that for the past few months.\n. That would work for me.\n\nSent from my iPhone\n\nOn 02 Oct 2015, at 21:29, Henry Zhu notifications@github.com wrote:\nAnyone want to summarize what is wanted here? Sounds like we can make an option allExcept: ['ReturnStatement', 'BreakStatement', 'ContinueStatement']`\n\u2014\nReply to this email directly or view it on GitHub.\n. Fantastic, thank you!\n. I can't think of anything else except ignoring entire block. Does JSCS have something like /* jshint ignore:start */ and /* jshint ignore:end */?\n. @mikesherov thanks!\n. @lahmatiy you're absolutely right and I noticed my tests failing as well :) I was quick to replace new require('xmldom').DOMParser with new require('xmldom').DOMParser() to satisfy JSCS, forgetting about precedence yet again...\n. \n",
    "nschonni": "@kangax I like the approach, but maybe\njs\nrequireCamelCaseOrUpperCaseIdentifiers: {\n    ignore: [ 'G_vmlCanvasManager', '...' ]\n}\nThe first way would require a second rule, and the second is a little confusing since it seems like you are trying to enforce the camel casing on the exceptions.\n. OK, I borrowed the list from ESLint https://github.com/nzakas/eslint/blob/bba4150cd9114d5ead736cbe5f194c01c0dcd325/lib/rules/dot-notation.js#L11 and changed it to accept true or \"allButReserved\"\n. No problem, thanks for the great tool :+1: \n. > I would put example configurations in code blocks.\nCan you give me an example of the format here so I can try applying it?\n. Yeah, I just haven't had time to get back to it yet. Feel free to implement yourself if you think it is urgent.\n. Sorry, finally applied the changes to the rest of the file. Need to see about integrating @mikesherov's changes and rebasing :frowning: \n. This should be good to merge now\n. I disagree with unquoting the values\n. Remaining strings should be quoted now, and re-indented the sample arrays that went beyond 80 chars\n. @mdevils anything else blocking this?\n. Not sure if plusplus is on the chopping block, but it might be a good fit here.\n. :+1: Although I'd keep the camel casing, and use the nested properties as boolean\njavascript\n\"spacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true, // same as require\n    \"beforeOpeningCurlyBrace\": false // same as disallow\n}\n. There have been a bunch of rules added by @mikesherov recently, so they are in the README, but not in the NPM release yet\n. I think https://github.com/mdevils/node-jscs/blob/master/.jscs.json should be safe if you're looking for a starter file\n. This is talking about https://github.com/mdevils/node-jscs#preset which uses https://github.com/mdevils/node-jscs/blob/master/lib/presets/jquery.json not the JSHint jquery rule.\n. Bump. It's also using the old *StickOperators methods, so an update would be a good idea\n. So can we now PR stuff to get the preset in line with the style guide?\n. OK, if you're going to do it soon that's fine. I just want to get rid of all the overrides I currently have to add after the preset :wink: \n. I get that you're not interested in it for jQuery main now, but that's not the only project that used the jQuery style guide and is looking for this.\n. :100: on documentation, but jQuery isn't even using the preset so this has no impact on it for duplicating rules\n. Yes, this will duplicate https://github.com/jquery/jquery-ui/blob/master/.jshintrc#L10 not break anything\n. No problem, just happy the preset is getting updated :+1: \n. I actually prefer the format in #182, but both of them are half-baked examples to discuss how the old rules can be mapped back.\n. I've updated this and #182 with a map back to the old rules but using require.\n\n\nI assume true is require, false is disallow, and no value (or null) is no preference?\n\n:100: \n. This is throw away proof of concept code, so feel free to close it if you want.\n. Mapped back the old rules to the new by requiring the new rule and using an apply. Some additional configuration re-writing might be required for other rules.\n. Dupe of #173\n. There is an exception for for loops https://github.com/mdevils/node-jscs#disallowmultiplevardecl\n. I believe disallowLeftStickedOperators is only depreciated for the - symbol. I've added a new log statement and have it skip the check when encountered. I originally used an assert but removed that since that would break existing implementations. \n. @markelog do you want to reconsider this one since the negative issue keeps poping up (#246)\n. I can take a look, but it probably won't be right away. Feel free to tackle it first.\n. Possible dupe of #136\n. Yes, the only valid rule for that rule is https://github.com/mdevils/node-jscs#requirelinefeedatfileend although it should throw that false isn't a valid value like the other rules.\n. @mikesherov the double star is only for JSDoc, the single is still a commonly used standard multi-line comment block\n. I would have thought the multi-line would be applicable too. Maybe it's just me and @kkemple :wink: \n. The paths are relative and shouldn't start withC:/ on Windows either.\njs\n\"excludeFiles\": [ \"Scripts/**\" ]\nYou can see https://github.com/isaacs/minimatch for how to build other globbing patterns.\n. Minimatch is the library that both JSCS and JSHint use for the globbing (matching) patterns for the ignore files. This is the same format as your regular .gitignore files.\n. If you care about the trailing comma breaking old browsers, then you need to pay attention to all those lints too\n. My opinion only though :wink: maybe the package author will be interested\n. I ran into this too. Interestingly, moving the closing brace to the requested indentation fixes the error.\njs\nobject\n    .method('a',\n        'b'\n    );\n. Rework option format as discussed in #181 and #182\n. Is this fixed in the new Espirma 1.2 release?\n. OK, just checking :wink: \nTook a look through the google code discussion :tongue: \n. I like the folder = namespace convention. If you'd consider it a separate namespace, then it gets its own folder.\n. https://github.com/mdevils/node-jscs#disallowspaceafterobjectkeys\n. Add a .jscsrc file to your project. The library is to enforce a project's style, so there are rules enabled by default.\n. Thanks @markelog!\n. Sorry for the late reply.\nThis appears to be the format from #181, but as pointed out there it doesn't prevent conflicting rules like the format in #182 does.\n. Sorry for the late reply.\nThis appears to be the format from #181, but as pointed out there it doesn't prevent conflicting rules like the format in #182 does.\n. Sorry if this is coming off as non-constructive, but I was just trying to flag that the nature of the format has some issues as raised in https://github.com/jscs-dev/node-jscs/issues/698#issuecomment-59659661\nI do like the idea of supporting a filter function for the rules that currently have array values.\n. :+1: Shouldn't need the ./ in front of bin since you're calling a node script and not a bash script.\n. Fixed\n. Fixed\n. \"an error, typo, or any other flaw\"\n. Any reason to add the / to all these links?\n. \\n shouldn't be required\n. The - will still cause problems for negative values\n. This doesn't seem to match the description\n. ",
    "NickHeiner": "\nThis seems especially needed in case one is dealing with an upstream interface. For example, enforcing camel case identifiers and properties but encountering something like unicodeSpec.Regional_Indicator.\n\nI have this issue as well. I think it would be nicer to just be able to turn off specific rules (or jscs checking entirely) for certain regions - having to put this stuff in the config requires the developer to be aware of more places in the code at once.\n. :+1: \nSomewhat related, I would like the ability to specify the following:\nValid:\njs\n// Foo bar.\nInvalid:\njs\n//Foo bar.\n. Awesome, thanks!\n. :+1: \n. I would like this ability. For instance, I want to set requireCamelCaseOrUpperCaseIdentifiers: true, but sometimes I'm interacting with third party libraries that don't follow this convention, so I need to do it. For instance,\njs\nFoundation.set_namespace = _.noop;\njshint has the ability to temporarily turn rules off as well.\n. :+1: I would be excited to use this.\n. Cool! Can you cut a new release so people can pick that change up?\n. :+1: for being able to set a cut-off for how many items in a list are required before breaking it onto multiple lines. \nWould it make sense to say \"how many characters are in the variable names in the list\", or would that be too complicated?  You could do something like:\n``` js\nvar f = [a, b, c, d, e];\nvar g = [\n    fooBarBaz,\n    quuxAsdfOdp\n];\n``\n. :+1: thanks for the quick fix!\n. :+1: for usingnpm prepublish` for something like this.\n. ",
    "donaldpipowitch": "+1\nI need this for calls to a different library.\n. +1 stumbled upon this error. Very annoying.\n. Maybe something like \"requireCurlyBraces\": [ \"for\", \"while\" ] to always require curly braces or \"requireCurlyBracesInMultiLineBlocks\": [ \"if\", \"else\" ] for just multi line blocks? (See here)\n. A new release would be great.\n. Can confirm that.\n. Hi, thank you. But I don't think I have time for that soon, I'm sorry :(\n. Happened locally at my Mac with the official npm. Using our internal mirror everything worked.\n. Yeah, I used esnext.\n. Could be related to https://github.com/jscs-dev/node-jscs/issues/1637, because auto-fixing results in beforeEach(asyncfunction() {. I'll try it.\nYeah, this is fixed on master. Could you please publish this as version 2.1.2?\n. Thank you!\n. ",
    "dentuzhik": "Why not to comply with jshint in such case?\nFrom jshint docs\n```\n// Code here will be linted with JSHint.\n/ jshint ignore:start /\n// Code here will be linted with ignored by JSHint.\n/ jshint ignore:end /\nignoreThis(); // jshint ignore:line\n```\nWould be much better to have a common api between similar tools.\n/* jscs ignore:start */\n/* jscs ignore:end */\n// jscs ignore:line\n. ",
    "Kienz": "https://github.com/mdevils/node-jscs/issues/20#issuecomment-35428804 +1\n. +1\n. Any news? Relative path still not working!\n. ",
    "MattiSG": "+1 for interaction with external library\n. Great, thanks!  :)\nLe 3 ao\u00fbt 2014 \u00e0 02:02, Mike Sherov notifications@github.com a \u00e9crit :\n\nThis is fixed in fa5527a and will be release with version 1.6.0!\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "laurelnaiad": "+1 -- would like to have some way to ignore ala /* jshint ignore:start/end */\n. ",
    "dsuckau": "I need this too, for the use of an external library.... I prefer the inline comments like in JSHint and ESLint too.\n. +1 I like!\n. ",
    "mikesherov": "This is fixed in fa5527a5c60a378b4282141b3732b251e447c806 and will be release with version 1.6.0!\n. Could you supply more information here?\n. yes, we should deprecate in 1.7, remove in 2.0\nOn Thu, Sep 18, 2014 at 11:37 PM, Alex Yaroshevich <notifications@github.com\n\nwrote:\n@mrjoelkemp https://github.com/mrjoelkemp probably yes. I've fixed this\nin plugin and I'm looking for issues.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/59#issuecomment-56131857.\n\n\nMike Sherov\n. This rule is essentially http://www.jshint.com/docs/options/#indent, and also http://www.jshint.com/docs/options/#smarttabs, which is good to have because they're being dropped in JSHint 3.0\n. @mourner, how is it different from http://www.jshint.com/docs/options/#indent ?\n. So the difference is that JSHint doesn't detect hard vs. soft tabs? I was certain that wasn't true. \nOh well, then, yeah, we need that too. \n. https://github.com/mdevils/node-jscs/pull/134 addresses the smart tabs functionality. Indentation checks to come next.\n. https://github.com/mdevils/node-jscs/pull/137 should resolve this.\n. If you use \"validateIndentation\", it will automatically not enforce indentation on subsequent lines of multiline statements:\nif (a) {\n    var a = \"this line alignment matters\" + \n        \"it doesn't matter\" +\n      \"how this is indented\";\n    var b = \"this matters too\";\n}\nYou don't need disallowMixedSpacesAndTabs. If you choose to use it however, then you do need to use the \"smart\" option if you're going to mix spaces and tabs for alignment on those lines.\n. @mourner, unfortunately no. The primary goal is compatibility with JSHint's rules and this isn't a violation there. \nPerhaps in the future I can add a \"strict\" option. \n. It'd actually be easy to add this check, maybe I'll do so...\n. @timmywil you mean all blockStatements and not objectExpressions, right?\nThis would be similar to *SpaceBeforeBlockStatements and be called *NewlineBeforeBlockStatements. Sound good?\n. This has been fixed since the removal of these rules. Thanks again for reporting!\n. @zxqfox, the original poster, closed it after seeing that excludeFiles matched his use case. \n. OK, I'm reopening this considering sufficient user demand and use case. /cc @mdevils @indexzero if you want to take a crack at it... by all means!\n. I'm not really sure. In an ideal world, we'd deprecate excludeFiles in the config and remove in 2.0. Thoughts, @mdevils?\n. @zxqfox would you like to tackle this for 1.12?\n. Yes, I'm against it for now. A symlink can be created at the os level to achieve the same goal without have to add another option to jscs. \n. I still very much want this. \n. @shawn-simon there is. It's called the excludeFiles option. This ticket is to move to a separate ignore file from the current mechanism. \n. Closing this as it should be handled by the JSDoc plugin now. \n. @nschonni looking good!\n. Thanks for making those changes so quickly. Can you do one last sweep to make sure all code is in . There were a few stray naked {} and ()\n. @nschonni instead of removing the quotes, make sure the string values are quoted AND wrapped in ``.\n. @mdevils can we close this now that we have #125?\n. I believe this could be done inspecting the tokens rather than the whole source. The problem previously was the assumption that the next token after theoperatoris always theargument. We could fix that by testing whatever the next token is after theoperator`, rather than checking for whitespace from the source.\nThoughts?\n. @mishaberezin are you still interested in pursuing this? The tests and the README are great. All you need to do is switch to using token positions for the checks instead of indexOf and regex. If you're not interested in pursuing this further, I can pick it up from you.\nJust let me know. Thanks!\n. I was waiting for OP to respond. @markelog feel free to take this though. I'm tied up till next week. \n. @markelog are you prepared to take this one on? If not, I can jump in on it later this week unless you'd like to continue on it. Just let me know. Thanks!\n. @markelog take your time! I was just trying to triage everything that remains open. Glad to have you take it on and I'll wait patiently :-)\n. Only allows no spaces if you use \"allButNested\".\u00a0\nMy 2 cents is that the jQuery nested spacing rules belongs as a custom rule in the jQuery preset because it has enough caveats to cause a \"generic\" rule to have too many options.\u00a0\nThis would require us to use my proposal for presets, which not only allows preset configuration, but also custom rules for that \"standard\".\njQuery would be able to distribute their own JSCS standard, or we could have JSCS-standard-jQuery and go the grunt route of npm based plugins.\u00a0\nMike\nOn Sun, Jan 12, 2014 at 2:21 PM, J\u00f6rn Zaefferer notifications@github.com\nwrote:\n\nThe jQuery style guide used to have exceptions for nested parens, those were removed. So in your two for examples, the first one is invalid, the second one valid.\nDo requireSpacesInsideObjectBrackets etc. accept [] and {} as valid?\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/issues/92#issuecomment-32130983\n. @markelog does this issue get solved by https://github.com/mdevils/node-jscs/pull/333 If not, I'll take a stab at implementing this rule soon.\n. @markelog I think this is a perfect example of a rule that needs to come with JSCS but exists in the jQuery preset only (perhaps even living in that subdir so the preset loads its own special rules). This would help lay groundwork for jQuery specific rules like chaining style as well.\n\nThoughts? \n. OK, so then for right now, I think we only need to add rules to cover call expression argument spacing to match the written jQuery style guide. @markelog are you going to tackle this or should I?\n. But I mean, the jQuery rule is for call expressions seems simple: always space after open parens and before close parens unless the argument is a function expression, array literal, or object literal, right? Or am I missing something?\n. The saga of this issue has now been resolved by simplifying the jQuery style guide. I'm going to close this issue and file another one just for adding existing rules to the jQuery style guide.\n. @druotic, are you still interested in implementing this? If not, I can do it. Please let me know. I'll wait a few days for your answer, and assume you're not if I get no response. \n. @druotic, still interested?\n. So far, the only one that looks like it'll be difficult to implement is indent if we're trying to be smart about it, and trying to enforce some kind of ruleset about when to indent. Much easier would be simply to check that if something is indented or outdented that the right character is being used and the right number of spaces / tabs are used.\n. BTW, @mdevils, I promise to support and maintain all of these checks, besides for just contributing the initial features.\n. 8 pull requests in... just 4 more to go!\n. @mdevils, I'd love to be a maintainer. Just let me know what you'd like me to do and I look forward to the maintainer's document.\n. Found one more hiding: maxlen\n. @mdevils, still working on indent, which is a bit more complex than the rest, but making good progress. Hope to have it done in the next few days! We should plan a release for when these final options land :-)\n. indent posted. That's all of them!\n. Woohoo! All Merged!\n. Found one more, @mdevils. This is the last of them.\n. We can. I'd ideally like to make a jshint preset and a migration guide, as in https://github.com/mdevils/node-jscs/issues/138 . \nPerhaps we should cut the new version now as a release candidate, so people can start using it and giving us feedback, and then do a real release with documentation and any bug fixes we find in rc. @mdevils Thoughts?\n. @mdevils, also, before we cut a new version, can you merge this please: #148 \n. https://github.com/jshint/jshint/blob/37757f0195e9ee4eb4bd8aeb5162c2a3c1565832/src/options.js#L45 plusplus is surviving to 3.0 Our design goals have always been to compliment JSHint, rather than duplicate it, so we're not going to implement this one. @antonkovalyov, you guys are keeping plusplus, right?\n@nschonni also, if it turns out it is being cut, please open a new issue instead of appending onto this one. Thanks!\n. I'm not sure why this is still open? Should be closed now, no?\n. Weird. Github was being weird for me a minute ago. Nevermind O_o\n. Docs in general need to be dramatically improved. @sindresorhus can you open a separate issue for documentation issues you'd like to see resolved?\n. @sindresorhus, I moved the document how to use the API in Node to a generic documentation ticket.\n. I suggest we look at the way PHPCS handles this with standards. Basically, a standard is a reference to a subdirectory of the standards directory. The subdir contains two things:\n1. It's own config file.\n2. A set of custom rules unique to standard.\nYou can reference rules in your own config by use namespaces:\n{\n 'jQuery.requireMultiLineChain' : true\n}\nYou can also include multiple full presets. Including presets also runs the config of the preset. Multiple presets are defined in an array with conflicting rules being resolved by having the last declaration win. You can override those values on your own of course. \n{\n  'preset': [\n    'jQuery',\n    'node' \n  ],\n  'node.customRule' : false,\n  'someBasicRuleSetInThePresets': false\n}\nAll standards are defined \n. And to echo what @sindresorhus said, we can also have NPM module lookups. The point I was making is simply about what a preset is, and how to include one (or many!) in your config. \n. Can we get this done in 1.12? /cc @mdevils @zxqfox seems we just need to do the original suggestion and can defer the question of loading multiple presets together to a different issue at a different time.\nI'll assign @zxqfox for now just so someone owns this.\n. Yeah, sounds good to me too. Just trying to get old issues addressed.\n. Ability to load a preset by use of require so that presets can be distributed via npm.\n. My opinion is the same as before, making a preset should be as simple as creating json file and publishing it to NPM. \n. I would think the publisher would name her package jscs-my-wonderful-preset and in .jscsrc put:\n{\n  preset: \"jscs-my-wonderful-preset\"\n}\nThis way, there is no magic. \nBut I'm also fine if we want JSCS to assume jscs-preset- prepended to the name so that the publisher of package jscs-preset-behance could just put the following in .jscsrc:\n{\n  preset: \"behance\"\n}\n. @mrjoelkemp yes, that's what I meant in my first example. \n. rebased!\n. @markelog is this issue now handled?\n. All comments addressed!\n. Very similar, the only difference is that the callback is two params: token and index which specifies the position of the token in the index.\n. this is why disallowLeftStickedOperators is deprecated. Remove - from that list and add it to requireSpaceAfterBinaryOperators.\n. @mdevils can we close this one now?\n. @mzgol good point. I'll add\n. Rebased and updated with the new passing test.\n. rebased, comments addressed and updated.\n. @mdevils exactly what @mzgol said. \n. see #117 for reference.\n. Closing this as it's a duplicate of several tickets dealing with this deprecation. \n. A couple of questions:\n1. would this disallow curly braces for single line conditionals, or just require the consequent and alternate to be on new lines in the case that a single line conditional is present and doesn't use curly braces?\n2. \n// invalid (would account for this with \"disallowKeywordsOnNewLine\")\nif(true) {\n  doSomething()\n  doSomeMoreThings()\n}\nelse {\n  doSomethingElse()\n  doSomeMoreElseThings()\n}\nis already accounted for as you mention, but I think this is already accounted for as well:\n// valid\nif(true) {\n  doSomething()\n  doSomeMoreThings()\n} else {\n  doSomethingElse()\n  doSomeMoreElseThings()\n}\nIt seems the only thing that isn't accounted for is disallowing single line conditionals without curly braces. Am I correct?\n. So, to summarize, two rules here:\n1. disallowCurlyBracesForSingleLineBlock\n2. requireSingleLineBlockAfterLineBreak\n@mdevils, should we implement this?\n. @mdevils, what do you think? Are you willing to accept a pull request on this?\n. Closed this in favor of #796 \n. @mdevils, updated!\n. @Famlam sure! Can you file a new issue for this please?\n. - [ ] Document how to use the API in Node.\n- [x] Move documentation to github pages.\n- [x] #86 links and headings for each rule.\n- [ ] more verbose descriptions for each rule with more valid / invalid examples.\n- [x] Tutorial for how to write a new rule.\n- [ ] Alphabetize rules documentation.\n- [ ] #138 A \"JSHint rule FAQ\" - how to emulate former JSHint features in JSCS\n- [x] Contribution guide.\n. Yup! Thanks again everyone who participated!\n. @mdevils, updated!\n. @mdevils I think this one is ready to merge as well.\n. @Famlam https://github.com/mdevils/node-jscs/issues/20 will cover what you're talking about.\n. :+1: I totally agree.\n. @mdevils this is a pretty big one, but it copies JSHint's functionality, and this is what we should land. If we want to improve or change the rule later, I'm open to that, but I'd like to see the rule land as is without modifying its intent. This is the last PR before we've completed #102 !\n. @mdevils, I'll be home in around 4 hours. I can do it then.\n. Rebased! @mdevils, this should be ready now!\n. @jzaefferer file an issue please :-)\n. No, this should be reopened. Not sure why it was closed. \n. Yeah, Agreed.\n. @famlam ping.\n. @Famlam seems like the names should be (require|disallow)Spaces(Before|After)InlineComment\n. @famlam, JSCS is intended to be consumed via npm, and in the near future, via bower.\nWe don't intend on adding back in the built file. You can file an issue if you'd like to discuss it. \n. Rebased, added test. Ready to merge.\n. I believe this is now taken care of. @markelog please close if true.\n. @shannonmoeller, what version are you using? This was fixed about a month ago. Please make sure you're using the latest version. If it's still a problem, file a new bug please. \n. No worries. We had been iterating very fast, so a lot of people are behind. Glad it works now for you!\n. No worries! Thanks at least for checking for existing issues first :star:!\n. > It is preparation work.\n@ikokostya now that #167 is done, and you mention it's preparation work, what is left to do to satisfy this bug? Right now, the only bug seems to be that in non-strict mode, a few false negatives get through. Is that correct?\n. @ikokostya @ljharb to summarize:\n1. we need an es3 mode, which checks for es3 reserved and future reserved words, ~~and includes arguments and undefined, which aren't technically reserved words but sure act like them for the purpose of property names.~~\n2. we need to make the default true assume es5 and then don't check the reserved list at all considering es5 allows anything to be a property name.\nDoes that sound good? \n. Well, we now have esnext as an option. I suppose we could add es3 as an option, and default is assumed es5. @mdevils, thoughts?\n. @mdevils, rules have access to JsFile which has getConfiguration. I suppose certain rules can access a function isES3Enabled, which doesn't currently exist, but would be useful for several rules. \n. @mdevils seems like we'd want to know es3/es5/es6 and possible also tabSize as configuration options that jsfile should know about.\n. @ZDroid Thanks for contributing! Please paste the entire source for this issue... not just the error.\n. The test prove it's working :-) let me know if you hit some other edge cases, please open a new ticket rather than commenting here! Thanks again!\n. @markelog is this still valid since we kill *sticked?\n. @knownasilya thanks for reporting. This issues is tracked in ESPrima: https://code.google.com/p/esprima/issues/detail?id=189\n. @andywillis are you testing against master and using es6 mode?\n. I can not replicate. Can anyone provide a reduced failing test case and config?\n. Thanks @famlam. This helps. \n. I'll be addressing this and others this evening.\n. My opinion: we should accept this pull request now. The jQuery preset should reflect all the rules that jscs have available to help enforce the standard regardless of whether or not it duplicates a rule in jQuery's grunt config.\n. Whether or not ASI is style or not is debatable, however, JSCS has no current plans to implement gotcha checks (like accidental globals, unused vars, typos...). \nIf you're looking for one tool, JSCS isn't it currently.\nOur focus is an unopinionated, composable, configurable style guide enforcer. JSHint does a great job finding REAL bugs. JSCS is currently here to make your code pretty. We believe a focus or style will enable us to do it well. \n. @edwardsmit @pickhardt if JSHint removes the ASI checks, we'll gladly implement it. I'm sure they havent' yet, and don't believe they are as per https://github.com/jshint/jshint/blob/2.x/dist/jshint.js#L52823\n. @adius, what makes you think JSHint is dropping semicolon detection?\n. Please refer to JSHint's docs, and the source code: https://github.com/jshint/jshint/blob/4ec82974b08808a976b4a263a52bb1bcc86debff/src/options.js#L5\nI assure you JSHint is still doing semicolons, unless I missed an announcement somewhere.\n. Neither tool ever supported it. This is true. I think it's safe for us to tackle this one unless Anton would consider a \"don't use semicolons unless necessary rule\". He has more of the machinery in place. If not, I think it's safe for us to handle it. @valueof could you weigh in on this:\n1. JSHint has a \"require semicolons\" rule, a \"allow no semicolons\" rule, but lacks a \"require no semicolons unless necessary\" rule. Do you plan on ever implementing that rule?\n2. If this answer to 1. is no, we'll likely provide that rule, but we'll also likely duplicate the existing rules from JSHint, for symmetry's sake. \nThoughts?\n. @valueof, that makes sense, but still leaves the following question unanswered: is JSHint planning a \"disallow semicolons except when required\" option?\n. Until this is fixed, bluebird provides .caught and .lastly as pseudonyms. \n. Just to weigh in here... I'm not sure the tokenizer should (nor can) know how to interpret the string for as anything other than a keyword. That's the parser's job: to make an AST out of tokens. This doesn't seem like a bug in ESPrima.\nIt's us. We shouldn't be using the token list without inspecting the context of each token. \nAs for our temporary fix, where we change the type of each token, that seems dangerous. \nWhat I think we should do instead is make a token helper function that can traverse keywords, inspect that they aren't actually identifiers, and then perform a check, rather than directly modifying the token list.\n@markelog, thoughts?\n. We'll see. Hopefully, they accept it.\u00a0\nHowever, if you look at parseObjectPropertyKey(), Esprima explicitly allows tokens other than identifiers to be keys. This is obvious, because otherwise the parser would blow up. \u00a0However, I think it indicates that keyword is an expected key, and shouldn't be transformed to an identifier.\u00a0\nThe transformation of the token also isn't necessary, as Javascript's syntax allows for keywords as object keys. That is, it can expect a keyword token. It doesn't require the transformation.\u00a0\nI'll reiterate my concern simply by saying that our rules should be using the tree instead of the token list in cases where tokens are ambiguous, like this.\u00a0\nI believe it's inherently dangerous to modify the token list because it's output from Esprima. It can have unintended consequences.\u00a0\nEverything we want to do can be done with the current output. I'm not sure why we want to mess with it.\u00a0\nMike\nOn Wed, Jan 22, 2014 at 7:39 AM, Oleg notifications@github.com wrote:\n\nnor can\nYeah, it can, tokenization could easily depend on the context, in many language implementation it's precisely like that, but it's implementation question, it could go either way.\nAs for our temporary fix, where we change the type of each token, that seems dangerous.\nHow so?\nIt's us. We shouldn't be using the token list without inspecting the context of each token.\nWhat I think we should do instead is make a token helper function that can traverse keywords, inspect that they aren't actually identifiers, and then perform a check, rather than directly modifying the token list.\nOr we could do that, sure, but as i downside it would be really alike with this, it just would be another construction for it, and it will complicate interface of js-file modules and logic of rules, since it would too specific.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/issues/180#issuecomment-33017968\n. As an example, what if I wanted to make a rule: disallowKeywordsAsObjectKeys. I can't rely on the token's type anymore. I have to inspect the content.\u00a0\n\nMike\nOn Wed, Jan 22, 2014 at 9:40 AM, Mike Sherov mike.sherov@gmail.com\nwrote:\n\nWe'll see. Hopefully, they accept it.\u00a0\nHowever, if you look at parseObjectPropertyKey(), Esprima explicitly allows tokens other than identifiers to be keys. This is obvious, because otherwise the parser would blow up. \u00a0However, I think it indicates that keyword is an expected key, and shouldn't be transformed to an identifier.\u00a0\nThe transformation of the token also isn't necessary, as Javascript's syntax allows for keywords as object keys. That is, it can expect a keyword token. It doesn't require the transformation.\u00a0\nI'll reiterate my concern simply by saying that our rules should be using the tree instead of the token list in cases where tokens are ambiguous, like this.\u00a0\nI believe it's inherently dangerous to modify the token list because it's output from Esprima. It can have unintended consequences.\u00a0\nEverything we want to do can be done with the current output. I'm not sure why we want to mess with it.\u00a0\nMike\nOn Wed, Jan 22, 2014 at 7:39 AM, Oleg notifications@github.com wrote:\n\nnor can\nYeah, it can, tokenization could easily depend on the context, in many language implementation it's precisely like that, but it's implementation question, it could go either way.\nAs for our temporary fix, where we change the type of each token, that seems dangerous.\nHow so?\nIt's us. We shouldn't be using the token list without inspecting the context of each token.\nWhat I think we should do instead is make a token helper function that can traverse keywords, inspect that they aren't actually identifiers, and then perform a check, rather than directly modifying the token list.\nOr we could do that, sure, but as i downside it would be really alike with this, it just would be another construction for it, and it will complicate interface of js-file modules and logic of rules, since it would too specific.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/issues/180#issuecomment-33017968\n. Fair enough.\n. Thanks as always for contributing! Yeah, definitely move to a branch, but also, a PR that would be acceptable here has to be the base implementation of the translation layer. Meaning:\n1. It need to delete the rules it's a duplicate of.\n2. It needs to be backwards compatible.\n3. It need to be a generic solution.\n4. @mdevils and I and @markelog need to agree it's the right format.\n. Another drawback is that lots of the sniffs are basically duplicated code of each other, creating more maintenance work.\u00a0\n\n\nMike\nOn Fri, Jan 17, 2014 at 4:35 PM, \u041c\u0430\u0440\u0430\u0442 \u0414\u0443\u043b\u0438\u043d notifications@github.com\nwrote:\n\nI suggest another approach: mapping.\nWhat we get: \n\u2014 rules are left as is, small and separate.\n\u2014 mapping is just a layer on top.\n\u2014 we have backwards compatibility.\nFlawbacks:\n\u2014 we should keep mapping up to date.\n(I'm about implementation)\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/pull/181#issuecomment-32650796\n. I like 182 as well. I assume true is require, false is disallow, and no value (or null) is no preference?\n\nSpeaking of which, we need ability to turn off a rule. Imagine user wants to use jQuery preset except one rule. Null value for a rule should disable it. \u00a0Thoughts?\nMike\nOn Fri, Jan 17, 2014 at 8:47 PM, Nick Schonning notifications@github.com\nwrote:\n\nI actually prefer the format in #182, but both of them are half-baked examples to discuss how the old rules can be mapped back.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/pull/181#issuecomment-32671399\n. @nschonni thanks again for doing this work way back when. We're going to take config in a new direction, so closing this for now. Once a new issue is published for it, we'll ping you so you can help us bikeshed :-)\n. @nschonni thanks again for doing this work way back when. We're going to take config in a new direction, so closing this for now. Once a new issue is published for it, we'll ping you so you can help us bikeshed :-)\n. No problem!\n\nOn Fri, Jan 17, 2014 at 10:33 AM, Kevin Gao notifications@github.comwrote:\n\nWhoops. Thanks for letting me know - I had searched through open tickets,\nbut not closed ones.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/183#issuecomment-32615329\n.\n\n\nMike Sherov\n. @mdevils can you review, then merge, then release a bug fix release?\n. Actually, @mdevils I'm merging this, so that https://github.com/mdevils/node-jscs/pull/187 can rebase and fix his PR. We should prob wait for that one before the next release.... Thoughts?\n. https://github.com/mdevils/node-jscs/issues/88 is the current way to do this, but perhaps we need to add an option to requireSpacesInFunctionExpression.\n. This exists as of 1.3.0. Thanks again for the report!\n. Thanks so much for contributing! I'm not sure we want to be enforcing indentation of multiline callExpressions. Instead, we should be ignoring, like we do for multiline statements. For example, some people think this looks better:\nfunctionCall(\n             alignedAtOpeningOfLast({\n               butThisShouldBeIndentedProperly: OffOfThePreviousLine,\n                 soThis: isAnError,\n               AndThis: isCorrect\n             ) // and this is checked too!\n);\nSee what I did in https://github.com/mdevils/node-jscs/pull/184 for inspiration!\n. File a new issue for that. But ideally, your pull should address this. Thanks for staying with this!\n. @shobhitg yeah, I can replicate that. And I think I can modify my code to address the bug you have reported here. Incoming fix in the next day or two. \n. @benoitzugmeyer, this looks good. There's probably a simpler way to combine what I did with variables and what you did with arguments, but I'll save that for a later refactor. Can you just modify the test data to use single letter variables so it keeps the focus on the spacing, not the content (except for functionCall, which shows the over indenting done on the next line)? After that, this looks good to merge. \n. And thanks again for sticking with this!\n. Thanks again!\n. Your last example is inconsistent with itself. It assumes you want 1 parameter per line except certain cases? File a new bug please. \n. So, is this requireSpaceBeforeBeforeBlockStatement and disallowSpaceBeforeBlockStatement? Do you have any interest in trying to submit a pull request for this before I do it myself?\n. This is in JSCS 1.4.0. Thanks again for the suggestion!\n. @am11 @NickHeiner @shobhitg would you like to try implementing this rule?\n. Closing this due to inactivity. I'll reopen if the OP responds or someone else finds value in this.\n. Thanks as always!\n. My personal pref is a .jscsrc file that is requireable. Strict JSON is too strict for my tastes. .jscs.js might be confused for a code file. Grunt went through this same issue. The config started off as grunt.js and peoplewere confused until it changed to Gruntfile. \nHowever, if @mdevils likes .jscs.js, I can live with that. @mdevils, your call.\n. @cesarandreu, that would be really helpful if you could add it! Thanks for contributing!\n. Call expressions are no longer validated, so this should now be fixed.\nPlease let me know if you're still having a problem and I'll reopen. \n. We've now moved to .jscsrc. The benefit of commenting out rules is now available with the current format. Thanks for the suggestion... it definitely helped, but we're not going to switch to YAML. Thanks again!\n. > the benefit of commenting out rules is now available with the current format.\nyes.\n. @markelog, would be great if you could write a rule for ternaries. We already have unary and binary. That would allow us to fully deprecate the others. \n. @blowsie the requireSpacesInConditionalExpressions rule now exists, and there is a pull request out there for deprecating *StickOperators completely. No need to +1 any further.\n. But this language is javascript, where null is an extremely normal value meaning do nothing.\nIn the near future, our rulesets will be reflexive, where true means enforce one way, and false means enforce the other way. Null is a natural choice for no enforcement. \n. I'll be permafixing remaining indentation issues today. I have a strategy to solve this.\n. Have you tried latest master? This should be fixed... If not, I'll tackle it today. @xhmikosR, let me know.\nIf latest master fixes it, I'll cut a release. \n. Fix incoming. Thanks for the report and your patience. \n. @XhmikosR can you test against master again please? Just want to verify this fix is complete.\n. It's not chained methods and callbacks that's the problem. It's the semicolon-less, brace-less conditionals. Fix ready!\n. @mdevils, we really need to officially deprecate disallowLeftstickedOperators. Everyone gets bit by unary -. \n. Remove disallowLeftStickedOperators -. We're deprecating that. Use the same settings for binaryExpressions.\n. Closing this, as this should now be implemented in the JSDoc JSCS plugin. \n. @twoRoger, thanks for contributing!\n@markelog, I didn't write this sniff, but here's my opinion:\nThere's no need for an option here. This sniff was just initially written to be to brittle. Rather than check for other variable declarations and positioning, this just needs to check that each variableDeclaration has at most one variableDeclarator.\nThe test is good, but we should remove the option and rewrite the sniff as I described.\nThoughts?\n@twoRoger, can you make that update?\n. Yeah, you're right. Sorry! For this rule, we should check all elements of the parent collection for other variableDeclarations, not just the siblings.\nStill no need for a new option.\u00a0\nRight?\nMike\nOn Wed, Jan 29, 2014 at 5:40 AM, Igor Agarlev notifications@github.com\nwrote:\n\n@mikesherov Seems like the proposed update is related to \"disallowMultipleVarDecl\" rule only, not to the \"require\" one. Btw, \"disallowMultipleVarDecl\" rule is already implemented exactly as you described)\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/pull/215#issuecomment-33572515\n. Not just the immediate siblings, I meant.\u00a0\n\nMike\nOn Wed, Jan 29, 2014 at 6:49 AM, Mike Sherov mike.sherov@gmail.com\nwrote:\n\nYeah, you're right. Sorry! For this rule, we should check all elements of the parent collection for other variableDeclarations, not just the siblings.\nStill no need for a new option.\u00a0\nRight?\nMike\nOn Wed, Jan 29, 2014 at 5:40 AM, Igor Agarlev notifications@github.com\nwrote:\n\n@mikesherov Seems like the proposed update is related to \"disallowMultipleVarDecl\" rule only, not to the \"require\" one. Btw, \"disallowMultipleVarDecl\" rule is already implemented exactly as you described)\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/pull/215#issuecomment-33572515\n. The opposite should be true. There should be an additional enforcing rule\nthat requires var statements to all be at the top (regardless of\nwhitespace). Note that the opposite rule doesn't have the \"at the top\" nor\n\"consecutive\" rules, so those should be additional enforcing rules rather\nthan the default. JSCS has a principal of least assumptions rather than\nmost, and a principle of enforce the least per rule possible, so style\nguides are easily composable.\n\n\nThoughts?\nOn Wed, Jan 29, 2014 at 8:26 AM, Igor Agarlev notifications@github.comwrote:\n\nThe current implementation is exactly what I need. In our team we allow\nmultiple var statements per function, but consecutive var statements\nshould be joined.\nThe following example is valid regarding to our codestyle:\nfunction main() {\n  var a = 1;\n  a += a;\n  var b = 2;\n  return a + b;}\nInvalid example:\nfunction main() {\n  var a = 1;\n  var b = 2;\n  a += a;\n  return a + b;}\nThe only thing I wanted to add is a relaxing option (\"skipWithEmptyLine\"),\nwhich would allow the following:\nfunction main() {\n  var a = 1;\nvar b = 2;\n  a += a;\n  return a + b;}\nProbably, here should be one more rule which would be an exact replacement\nfor onevar from JSHint.\n\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/pull/215#issuecomment-33583897\n.\n\n\nMike Sherov\n. Actually, onevar does not require the single var declaration to appear on\ntop...\nrequireMultipleVarDecl:\ntrue: checks that the var declaration is the ONLY variableDeclaration in\nit's parentCollection (so, neither skipWithEmptyLine nor the current\nbehavior).\n\"consecutive\": ensure all variable declarations are in a row without\nchecking whitespace\n\"strict\": consecutive plus no empty lines allowed\nrequireVarDeclOnTop:\ntrue: checks that the first statement of a function is a var declaration\n(which you can then combine with requireMultipleVarDecl to ensure one var\nat the top, or many var at the top). A caveat for this rule should be to\nallow for redefinition of parameters before var declaration.\nOn Wed, Jan 29, 2014 at 2:28 PM, Famlam notifications@github.com wrote:\n\n[if I understand you correctly]\nIn that case I would split it up like this:\nrequireMultipleVarDecl:\n- true: behaves like 'skipWithEmptyLine'\n- \"strict\": behaves like the current behavior\nrequireVarDeclOnTop:\n- true: requires all var declarations on top (of the current function,\n  in case of nested functions) (And the combinations of true for the\n  latter and \"strict\" for requireMultipleVarDecl would equal onevar)\n\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/pull/215#issuecomment-33620468\n.\n\n\nMike Sherov\n. yes, consecutive should allow empty lines... strict should disallow. I\nagree about the name confusion!\nOn Wed, Jan 29, 2014 at 3:07 PM, Famlam notifications@github.com wrote:\n\nAh, right about onevar.\n(as a sidenote: honestly, the name requireMultipleVarDecl is confusing; I\nhad to read your 'true...behavior' line at least three times, with the name\nof the option in my head...)\nWith consecutive you mean the proposed skipWithEmptyLine option I think?\nI like your suggestion :)\n\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/pull/215#issuecomment-33624932\n.\n\n\nMike Sherov\n. @famlam, any update on this?\n. Apologies. I meant @twoRoger \n. Closing this PR for now, I'll pick up on the decided behavior later. @twoRoger, thanks again for contributing!\n. Seems like true and \"all\" cover most cases, but would still be nice to specify:\n\"disallowBlaBla\": { \"allExcept\": [\",\"] }\nWhich is the same as true except for the tokens specified.\n. Thanks fior the discussion, folks. What we're going to do is three-fold:\n1. Ability to disable and re-enable all rules on a per line basis: e.g. // jscs ignore:start and // jscs ignore:end\n2. Ability to disable and re-enable any rules on a per line basis: e.g. // jscs requireSpaces: false and // jscs requireSpaces: true\n3. Ability to define override rules at the beginning of the file: /* jscs maximumLineLength: 200 */\nTherefore, this request falls outside the scope here, so closing it. Thanks!\n. @jimthedev http://jscs.info/overview.html#error-suppression :-)\n. @markelog :+1:\n. Thanks for contributing! All of our rules are named, and therefore this should be satisfied with outputting the rule name if verbose is supplied. I'm going to file a new issue with that as the request. Thanks again!\n. This LGTM, can you just improve those warning message, and I can merge?\n. You need 2 stars to indicate docblock: /**. That case is accounted for. \n. Right, but the doc block is the comment that you'd expect to align your stars with.\n. I can do that. @mdevils wanted it stricter. I'll go with less strict.\n. Default 50, supplied by either config or command line. \n. Implementing 1 & 2 seems good for now. Let someone complain about 3 before we fix it.\u00a0Mike Sherov\nOn Tue, Sep 30, 2014 at 11:17 PM, Joel Kemp notifications@github.com\nwrote:\n\nSome thoughts after digging into this:\n1. An Errors object could have a clause in add that prevents a new rule from being added if the maxErrors limit is hit. This would help the RAM issue by reducing the number of error objects kept in memory within _errorlist; though, I'm not entirely convinced that's the cause of the memory bloat. \n2. Checker should avoid checking the file against the next rule if the error limit has been hit. This will avoid further, unnecessary processing of the current file.\n3. checkString should (abruptly) return an empty list if the error limit has been hit. This should avoid esprima-parsing files unnecessarily once the limit is hit.\nThe only problem is that once we're in the execution context of rule.check(file, errors), it's not possible to halt processing without modifying rules. With (1), we can avoid additional errors from being added past the maxErrors limit, but we can't stop rule checking abruptly. Not being able to halt processing is only an issue for a processor-heavy rule checking a large file before hitting the maxErrors limit.\nAny objections/thoughts on these points?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/238#issuecomment-57414036\n. Actually, much simpler: keep a static running tally of errors, and when the max is reached, throw inside errors.add and catch the error outside. This takes care of 1,2,3.\u00a0Mike Sherov\n\nOn Wed, Oct 1, 2014 at 7:12 AM, Mike Sherov mike.sherov@gmail.com wrote:\n\nImplementing 1 & 2 seems good for now. Let someone complain about 3 before we fix it.\u00a0Mike Sherov\nOn Tue, Sep 30, 2014 at 11:17 PM, Joel Kemp notifications@github.com\nwrote:\n\nSome thoughts after digging into this:\n1. An Errors object could have a clause in add that prevents a new rule from being added if the maxErrors limit is hit. This would help the RAM issue by reducing the number of error objects kept in memory within _errorlist; though, I'm not entirely convinced that's the cause of the memory bloat. \n2. Checker should avoid checking the file against the next rule if the error limit has been hit. This will avoid further, unnecessary processing of the current file.\n3. checkString should (abruptly) return an empty list if the error limit has been hit. This should avoid esprima-parsing files unnecessarily once the limit is hit.\nThe only problem is that once we're in the execution context of rule.check(file, errors), it's not possible to halt processing without modifying rules. With (1), we can avoid additional errors from being added past the maxErrors limit, but we can't stop rule checking abruptly. Not being able to halt processing is only an issue for a processor-heavy rule checking a large file before hitting the maxErrors limit.\nAny objections/thoughts on these points?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/238#issuecomment-57414036\n. @mdevils can you review please, and merge when done?\n. @mdevils can you review please and merge when done? \n. @tkellen yes, definitely. liftoff is nice.\n. @tkellen, ping?\n. Thanks for the update!\n. JS as a language only allows single statements to not have curly braces. Asking for the option to allow single statements to not have curlies is the same as not using this rule at all.\n\n\nNow, if the conversation is to only allow certain statements to not have curlies, I can support that.\nI'd prefer to let the user specify exact statements to allow, so that we're not back here in a month asking for more exceptions.\nSound fair?\n. @bajtos that sounds like a bug. Can you please file a new issue for that? Thanks for contributing!\n. On Thursday, November 27, 2014, Miroslav Bajto\u0161 notifications@github.com\nwrote:\n\n@mikesherov https://github.com/mikesherov IMO that is not a bug, as it\nwas printed when my config included \"requireCurlyBraces\": [ \"else\"].\nRemoving else from the list fixed the warning.\nI find the behaviour perfectly correct in the context of the current\nimplementation: else keyword requires curly braces, therefore the correct\nversion is this:\nif (...) {\n} else {\n  if (...) {\n  } else {\n  }\n}\nThe problem will go away once we allow keywords to bypass the CurlyBraces\nand include \"if\" in the list of white-listed keywords. That is exactly the\npoint of this GH issue if I understand the discussion here correctly.\nHowever, if you think that else if should be treated differently and\nalways bypass requireCurlyBraces, then I can fill a new issue for that,\nperhaps even submit a pull request.\n\nYes, I do think it should be treated differently. A pull request would be\ngreat.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/244#issuecomment-64814559.\n\n\nMike Sherov\n. @bajtos please file and new bug for that issue you reported.\n. @kangax just pinging you here as I know this is an old issue at this point but I really can't figure out a good way to specify exceptions here. Have you any thoughts about it since the last time this topic was discussed?\n. Closing this issue as this should now be tackled by the JSDoc plugin. \n. @mdevils, when are we going to deprecate or remove minus for leftStickOperators? It's been reported as a bug multiple times.\n. Sorry, this is not something we intend on fixing, as it's literally indistinguishable from an error, unless you can suggest something @kangax ? Closing this for now until further discussion.\n. @kangax it's on the roadmap. I'll try and prioritize that one because more than a few are asking for this, and it's pretty standard functionality.\n. @feross while it may be valid to do inside a node module, it's still a syntax error for Esprima, which has no concept of node currently. If you'd like this behavior, please file an esprima bug here: https://code.google.com/p/esprima/issues/list\n. I need to do one more fix, #204 is still not resolved. I'll have this fixed today (which will be tomorrow for you).\n. Thanks for contributing! You're \"allowed\" to quote default, but not \"required\" to quote it. Closing as not a bug.\n. That's not a feature we currently have. I'd gladly accept a pull request though that adds this. Or you can open a new issue to add this feature and hopefully someone will tackle it soon.\n. @zdroid, I believe this is covered by the various function spacing rules. Please let me know if this is still an issue and I'll reopen.\nFor now I'm going to close it as I believe it's resolved. If I'm wrong, please let me know what config you're using and a sample file to repro this with. \n. @markelog can you merge this if it's ready?\n. well, it's one line statements PLUS no semicolons that makes it think it's multiline, because technically that else statement ends on the curly on the next live... Give me a minute to check this. I ran the code against the branch you sent and it passed with latest master. There might be a new edge case again here. \n. https://github.com/mdevils/node-jscs/pull/271 incoming.\n. @XhmikosR check one last time please?\n. Yes, those are actual errors.\nvar tooltip = div.appendTo('#qunit-fixture')\n                     .tooltip({ \n                       selector: 'a[rel=tooltip]',\n                       trigger: 'click'\n                     })\nis correct. \n. Great! :-)\n. Yeah, we should be releasing shortly. I'll let you know when it's done.\n. Yeah, we should be releasing shortly. I'll let you know when it's done.\n. @XhmikosR released. also, there's a pending PR to update https://github.com/gustavohenke/grunt-jscs-checker/pull/35\n. How does this work when I want to pipe the output to something like grep while still using a color supported terminal? Will it know to not use colors?\n. @jbnicolai, I'd be interested if there was a pull request re-using it. What we have now works, but would love to be able to offload that to chalk, it's just that the core team at the moment has other priorities... So yeah, if there's a PR to reuse chalk, we'd love to use it :-)\n. @mdevils, I agree with @jzaefferer. If we ever decide that the style of the JSCS source code violates the google preset, we can just override it. But extracting the google style guide and using it as a base for JSCS is a good thing.\nCan we merge this?\n. Yes, please!\n. I think it's fine to have this as a check in JSCS, as it isn't a straight copy of es3. @rxin, can you also make the opposite of this rule as well though: requireTrailingComma?\n. @rxin, thanks. Just submit a valid patch first and we can bikeshed the name later. But an immediate suggestion is (require|disallow)SpaceBeforeBlockStatements ?\n. Also, this rule should include space between closing parens of function args as well, not just control structures. \n. I think it's fine to have this as a check in JSCS, as it isn't a straight copy of es3. @rxin, can you also make the opposite of this rule as well though: requireTrailingComma?\n. @rxin ping.\n. OK, I'll leave this PR open till you get around it. Thanks again so much for contributing!\n. Thanks again!\n. @chapel, thanks for contributing! Can you provide your config and a sample file showing this issue? I'm not able to immediately reproduce and this would help me debug. \n. I continue to not be able to repro this. If you have two \\n at the end of your file, that is an error. 1 is ok though.\nClosing this for now until OP responds with a repeatable test case. \n. @cvrebert can you use null? We reserved false and true for future configuration changes. Does null work?\n. @cvrebert yeah, we need to do a better job documenting and making options easier to configure. It's the next big thing we're working on. Thanks for bearing with us!\n. @thelinuxlich please see https://www.npmjs.org/package/jscs-jsdoc as I believe this gives you want you want.\nPlease let me know if you were looking for something else.\n. Can you rebase and squash this pull request so it no longer has a merge commit in it? Thanks again for everything!\n. @rxin, thanks again! I'm ready to land this, I just would like one more test for before require and disallow. Can you just make sure allman style bracing (http://en.wikipedia.org/wiki/Indent_style#Allman_style) is not an error under the require conditions and is an error on the disallow conditions?\nAfter that, I can land this. Thanks again for contributing!\n. I see. Merging! Thanks again!\n. I agree with @mzgol (the current version of him, not the one who originally opened this ticket ;-) ).\nThere are infinite preferences here. The point of this rule is not allow quotes except when otherwise syntactically invalid. \nYou can always create a custom rule to enforce the 'except numeric' option.\n. Are you using the latest? Also, send the full file, and your full config so I can debug.\n. @mzgol, are you sure that minimal example causes an error, or is that just\nwhere the error was located. I ask because the indentation lint can produce\nerrors far from where the actual bug is in the source file. Does your\nsnippet reproduce the problem?\nI tried adding the code you posted to the test data file and the unit test\nstill passes. Like I said, I need a reduced example of the issue happening,\nnot just the output of the run.\nOn Tue, Mar 11, 2014 at 3:22 PM, Micha\u0142 Go\u0142\u0119biowski \nnotifications@github.com wrote:\n\nAnyway, the actual part of the code I mention was:\n$httpBackend\n                        .expect('GET', cbnBackendConfig.apiUrl + 'tiles/?batch_size=' +\n                            cbnResponsiveBatchSize(cbnFrontTileDistributor.calculateBaseColumnCount(assumedWidth)))\n                        .respond(testUnitMocksInlinedFrontTiles);\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/296#issuecomment-37338430\n.\n\n\nMike Sherov\n. fix incoming tomorrow. Basically, all callExpression indentation validation is being removed and added to a separate rule. It was tacked on to this rule and shouldn't have been. \n. Thanks for submitting a bug report! That option is not in a released version yet. That code was committed yesterday. We'll probably do a release in the next few days.\n. I will be addressing several issue tomorrow. We'll be releasing soon thereafter.\n. Thanks for contributing! This specific usage seems like an edge case, and not that common of a way to annotate parameters (most use JSDoc, for example).\nHowever, comments in parameters are a common way to list parameters that are only referenced by the arguments keyword when combined with JSHint and the unused option.\nTherefore, this is a slightly lower priority for us, but I'd gladly accept a working pull request (with tests) for this. \n. @mzgol, still interested? Otherwise I'll take it.\n. This was actually already fixed and is present in the latest version. \n. @matmuchrapna please post your config.\n. Notice that in https://github.com/mdevils/node-jscs/blob/master/lib/presets/jquery.json it has requireMultipleVarDecl set to true, which is the preset you're using. Please set: requireMultipleVarDecl: null in your config to override this behavior.\n. \"For your\" instead of \"for you\". \n. LGTM!. Can you squash before merging?\n. @mdevils please port these over to individual issues in the 2.0 milestone. Thanks!\n. Not yet, but we'd gladly accept a valid PR on this!\n. Commas in general is addressed by *spaces*BinaryOperators: [\",\"]. \n. Actually, timo, you're right. Nothing yet covers all. \n. @markelog BinaryOperators doesn't cover function parameters.\n. I stand corrected as usual. I suppose I should've known better than to disagree with you.\n. In either case, that at least answers the question. There is a generic comma rule. However, to address the other points mentioned above, function argument spacing is a nice rule to have, but I must agree with @mdevils that this is more suited for our require|Disallow|before|after style.\nIt should be noted that for 2.0, we'll likely be providing sugar for configuration anyway.\n. @seanjohnson08 please attach example code and your jscs configuration that produces the unexpected failures. Thanks for contributing!\n. @seanjohnson08 ping!\n. Closing due to lack of response. If you have a sample config and proof of this issue, I'll gladly reopen!\n. @pigulla Thanks for the report. Reopening!\n. @zxqfox yes.\n. @ZDroid please test these changes locally, and when you get it working, please resubmit. Thanks!\n. Thanks again for contributing. it's a pretty standard practice to close pull requests that can't possibly be merged. I'm sorry if you felt it was premature, but I assure you I meant nothing by it.\nSecondly, look at the Travis results which show the failures. \nLastly, me closing this pull request has no impact on your ability to open a new one. However, I'll reopen this one while I'm here.\nThanks again.\n. Thanks for the report! This is a duplicate of: https://github.com/mdevils/node-jscs/issues/246\n. Good catch. I'll get to this soon.\n. Thanks for contributing! This is a real file you have? Or were you just trying to find a specific edge case? If you have a real file that errors out, please let me know and I'll fix shortly. Otherwise, this is a lower priority.\n. @zxqfox if you have a valid fix, I'll gladly review the PR. Thanks for the help!\n. disallowLeftSickOperators is deprecated. We need one rule for spacing in conditional expressions to cover this case, but all other characters are covered by other rules.\n. This will be fixed when https://github.com/mdevils/node-jscs/issues/356 is fixed. Closing this issue in favor of that.\n. I think number of items makes the most sense. \n. Is anyone else interested in implementing this rule, as described with an option to set the minimum number of elements before requiring each element on a new line?\n. @zxqfox, number of elements only please. maxlen already handles line length. Thanks again for all your hard work!\n. @zxqfox ping! Still interested in implementing this?\n. @zxqfox can you please add the tests to the fixture file instead so the tests are more readable? Thanks again for the contribution!\n. @zxqfox sorry I didn't merge this earlier... can you rebase?\n. @globexdesigns please open a pull request adding the brackets plugin and I'll gladly merge it.\n. Yeah, let's drop 0.8, but let's make sure we add an engines entry to our package.json file:\n{ \"engines\" : { \"node\" : \">=0.10\" } }\n. We've been discussing how best to do this. This is definitely on our radar for 2.0. @mdevils care to summarize our current thoughts on the subject?\n. Merging for now. @gustavohenke @zxqfox if either of you want to format the README to introduce a separate section, I'd gladly accept it.\n. There's one rule I want to add require/disallowSpacingInConditionalExpressions, which is the last bit before we can fully deprecated the *stickOperators. I'll make sure to submit the PR by Wednesday. Can we hold off till then?\n. @mdevils, let's cut a release. I'll get my features and fixes into the next version...\n. Wow! Thanks so much! There are a couple of commented out console.log's in there to fix, but before you do... @mdevils @markelog thoughts? Is this the direction we want to go in with the docs? I think so. \n. Right, this PR is the starting point for better docs. This pull request at least allows us to move away from the readme and have automatically generated documentation. We can iterate on improvements from there, no?\n. Sorry for the long delay here... Great work! Would you be interested in providing the opposite rule as well? \n. @tim-smart thanks for contributing. I'm going to close this pull request because we're going to implement this using the AST instead of the token list. Thanks again though!\n. @tim-smart thanks so much for contributing! \nUnfortunately, we're actively getting away from token-based operator rules. Perhaps you could redo this rule for conditionalExpressions, binary expressions, and unary expressions?\nIn the meantime, I'm going to close this pull request.\n. This rule is deprecated. Please see https://github.com/mdevils/node-jscs/issues/124 Thanks for the report!\n. Thanks for the report. I'll investigate!\n. Nice @mdevils!\n. @markelog, @rantanen... what are the next steps here to continue making progress?\n. @mdevils I like JSHint's approach as well.\n. You can disable a rule with null, and you can comment out with /**/ in the latest versions. Please let me know if this works for you.\n. @mdevils id like to implement the JSHint approach here. Once per file complain about unsupported rules on line 1, column 1 like we did for deprecated rules. This also allows us to remove the deprecated rules as they'll now just complain about being unsupported.\nWe can revisit in 2.0 if we want a better mechanism for reporting non code style errors, but right now the behavior of \"just not working\" if you're using an editor plugin is pretty bad. \nThoughts?\n. @mrjoelkemp it's even simpler. For each unsupported rule found, when it's found, add a single error, once for each rule.\n. this._foundUnsupportedRules = true loses information. It should be one error per unsupported rule.\n. Why is this 2.0 and not 1.8? I'm moving it to 1.8, because it doesn't break backwards compatibility.\n. @lawnsea thanks for contributing. IMO, when an engineer cleans up a file, they should clean up the whole thing. This resolves the problem much quicker and gets to a nicely styled codebase quickly.\nHowever, I understand your situation.  I will be adding a hook to filter errors shortly, and you'll be able to guarantee that it will happen right before errors are passed to reporters and you'll be able to hook into it.\n. @mrjoelkemp yes, exactly. The idea is to split filtering out from reporting. \nThe only built in filter we'd have is the maxError option, which is also slated for 1.7. \n. @mrjoelkemp, we need to have maxError as a separate filter from any user supplied filter. Perhaps an array of filters seems the best. \n. 1. We should accept a file path to a filter for right now. In the future, we could extend this to accept a directory too with no API change needed.\u00a0\n2. I was envisioning a filter as 2 parted: 1. a function for filename filtering, ran before any checking at all, that reduces the list of files to check. 2. A post processor function, right before reporting, that filters by location in file and message. That seems the most straightforward way, IMO.\u00a0\n3. No need to do this if my second suggestion is used.\u00a0\nHowever, I think either method is fine.\u00a0\nMike Sherov\nOn Tue, Sep 30, 2014 at 11:37 PM, Joel Kemp notifications@github.com\nwrote:\n\n\nShould we support a user providing a path to a directory containing various filters? Or solely accept a path to a single filter (they could just wire up multiple filters to be used within a single filter module)? \nIf we don't support a directory of filters, then I don't really see the need for an array of filters (I'm not entirely sure that a maxErrors belongs in the filter list given its far reach outside of the errors object)\nA \"filter\" should be a function (whose context is a lib/errors object) that accepts the following error literal and returns a boolean indicating whether or not the error should be subsequently added to the error object's _errorList.\nUpon calling errors.add within rule checking, we run the generated error literal through all of the filters. If the error passes through (all filters return true indicating that a rule should be added), then proceed with adding the error to the _errorList.\n   Are we in agreement of what a filter should do, has access to, and when it's invoked?\n\n\nReply to this email directly or view it on GitHub:\n   https://github.com/jscs-dev/node-jscs/issues/335#issuecomment-57415075\n. > It would be strange to see 2 errors reported post-filtering when there are\nmore errors that weren't part of the first unfiltered batch of 50 errors.\nBy filtering before adding an error,  we give the user a relevant set of 50\nerrors.\n\nMakes sense.\n. Still, a 2 part filter makes sense:\n1. before even parsing files, ability to filter out files to parse.\n2. a second set of filters that are applied inside errors.add, as you suggested.\n. I agree with @lawnsea. \nThere only needs to be one \"filter\", which should be a path to a filter module, which receives the errors, and can manually inspect them and discard them however it sees fit.\nThis would allow precommit hooks,  CI tools, etc. inspect certain files in a way that 'excludeFiles' can not. Even with autoformat, and with custom reporters, it seems like a good idea to have filtering as a separate, user definable step.\n. @lawnsea, what does your solution look like? I'll love to have that help inform the direction we go in with this.\n. @angryzor this looks good. Can you rebase this please?\n. @angryzor ping!\n. No worries, no rush. Thanks again for contributing!\n. @wayneseymour thanks for your patience! If you'd like to see JSCS get released sooner, feel free to tackle any of the open issues in the 1.5 milestone!\n. Two things:\n1. It'll make more sense once true = require, false = disallow\n2. We should add the null option to the error messages.\nHowever, we're not going to have false disable a rule.\u00a0\n\u2014\nSent from Mailbox\nOn Sat, Jun 7, 2014 at 6:17 AM, Junle Li notifications@github.com wrote:\n\nFor example, jquery preset defines\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n}\nIt is intuitive to disable by\n// THIS DOES NOT WORK\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": false\n}\nActually, I need to set the whole disallowSpacesInFunctionExpression setting to null:\n\"disallowSpacesInFunctionExpression\": null\nIn my opinion, this makes the rule hard to understand.\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/issues/338#issuecomment-45406555\n. @ianjmacintosh we're going to be added the 'null' advice to the error output in 2.0 as per my last comment. Thanks again!\n. Thanks everyone for their input. I'm going to open a new issue here and close this one as it has gotten quite noisy here.\n. Rather than provide the ability to suppress errors from other rules, it seems we should just be using a base module and then use inheritance to overwrite edge case behavior.\n\nThoughts?\n. This is a stale discussion and we aren't likely to implement this behavior. Closing for now due to lack of interest.\n. This should be fixed in 1.4.0. Please let me know if that doesn't work for you!\n. @samjohnb please continue this discussion on https://github.com/zxqfox/jscs-jsdoc/issues/4 . Thanks again for contributing!\n. This will be landing tomorrow morning. \n. This is now available in 1.5.1!\n. Good catch.\n. Right. I think this is fine to add to the main jscs codebase because it facilitates tooling without additional configuration. A couple of changes are required:\n1. please squash the 3 commits into 1.\n2. Please add some comments to the new reporter about why it exists.\n3. address the comments from my code review.\nOf course, I would love for this to be fixed in ST3. Can you file a bug with them as well?\n. I know you mostly copied and pasted this from inline, but can I suggest this code for the reporter:\nvar util = require('util');\n/**\n * @param {Errors[]} errorsCollection\n */\nmodule.exports = function(errorsCollection) {\n    errorsCollection.forEach(function(errors) {\n        if (!errors.isEmpty()) {\n            var file = errors.getFilename();\n            var out = errors.getErrorList().map(function(error) {\n                return util.format('%s: line %d, col %d, %s', file, error.line, error.column, error.message);\n            });\n            console.log(out.join('\\n'));\n        }\n    });\n};\nI haven't tested this, but I believe it's much clearer.\n. Thanks for your help!\n. Thanks for contributing! I can not reproduce this issue. Can you please post your exact config and sample file where this occurs? I'll close this issue for now until you respond and then I can reopen it.\n. @am11 would you like to submit a pull request for this?\n. @mdevils @markelog what are your thoughts on maintaining a schema file, as shown here: https://github.com/madskristensen/SchemaStore/blob/master/SchemaStore/schemas/json/jscsrc.json ?\n. Hmm, perhaps we need to think of a way to automate this. If we were able to declaratively specify rule values, we can programmatically generate this. @markelog @mdevils thoughts?\n. Generating the example whenever we release a new build. This will need to be constantly updated as new rules get added.\n. @madskristensen we'd generate both from the actual code.\n. On it. Thanks for the test case.\n. https://github.com/mdevils/node-jscs/pull/354\n. @shobhitg, what if you want no space before the object key colon, but a space before the colon in a conditional expression? What current JSCS configuration options cover this?\n. @hnrch02 thanks for reporting! We'll get to it shortly.\n. Thanks for contributing! Do you mean requireQuotedKeysInObjects? Because \"allow\" is the same as no rule at all.\nIf so, good catch. We like to have the opposite of each rule. \n. Thanks for contributing!\n. Landed in https://github.com/mdevils/node-jscs/commit/61b614b6f454f3fd6ae45cf7138f417d18d9c547\n. @mdevils, @markelog now that I've added conditional expression spacing, there is literally no reason people should be using the stickedOperators utilities. Here's the order of things that will happen.\n1. immediately remove the documentation (hence this PR).\n2. remove usage of the stickedOperators in presets (PR coming soon).\n3. add an error (line 1, column 1) for each file being linted with these rules telling them to use the other rules right before releasing 1.5.0\n4. drop these rules completely right before releasing 2.0.0\n. @gavacho, requireSpacesInBinaryExpressions. \n. @Krinkle yes.\n. @Krinkle yes, those are obviously bugs which should be filed as such.\n. @markelog, you think at this point we're good to proceed with this?\n. Ok, so it seems like:\n1. Output deprecation notice once for each deprecated rule pointing to the correct rules to replace them with.\n2. No longer perform the actual validations from those rules. \n3. Mark current rules as removed (rather than deprecated) in the docs, considering as of 1.5, their functionality is removed and they always throw errors.\n4. With the release of next non-patch version after 1.5, remove the rules completely from the codebase and docs.\n. OK, I'm going to proceed as per my comment on Thursday.\n. @markelog can you just take a quick look here and see if it makes sense. Please ignore the duplication. I didn't want to sink time into DRYing code that will be removed shortly.\n. @mdevils we are then left with the same issue as https://github.com/mdevils/node-jscs/issues/334\nThe problem here is that throwing an error makes sense for CLI tools like grunt and gulp, but for plugins, not as much. For example, the Sublime Text Plugin via SublimeLinter will silently fail if an error is thrown. Same goes for a lot of the other IDE's.\nUnfortunately, while this should be the plugins responsibility to fix, it's just as easy for us have this be a normal linting error and be gauranteed to not break the world.\n. Ok. Will do. Tomorrow is Father's Day in the US, so I may not have time. If not, I'll release Monday morning. Thanks everyone for coming to a resolution on this!\n. Thanks for contributing! This is expected behavior. The rule expects your example to be formatted as:\n```\nfunction foo(){}\nfoo(123, {\n        hello : [\n            'world'\n        ]\n});\n```\nor \nfoo(123, \n    {\n        hello : [\n            'world'\n        ]\n    }\n);\nThat is, the } should always be indented to the first character of the line where the { appears. This is a won't fix.\n. Landed in d01e0c904e28f6b27dadb4795660cf37e61f700d Thanks!\n. Comma is not a binary operator. I do not think it should be stuffed into that rule. \nThe two operators that aren't covered are = and ,. Perhaps (require|disallow)Space(Before|After)Operator should exist, but it only should allow tokens that are that are not in already expressions.\nEither that, or we create rules for argument spacing in function call and variable declarations (which covers most cases of ,), and a rule for assignment expressions (which covers =);\n. @markelog the other changes however, are spot on, and I like the additions to tokenHelper.\n. @markelog oh, yes, I got confused between Binary Expression and Binary operator. In that case, does this rule cover = as well?\n. OK, lgtm. Feel free to land.\n. Yup... Massive break.\n. Just discovering it in my CI now. @markelog urgent.\n. Also, if you specify = and not , it still validates ,!\n. if (operators[','] || operators['=']) {\n            file.iterateTokensByType('Punctuator', function(token, i, tokens) {\n                var operator = token.value;\n                if (operator !== ',' && operator !== '=') {\nmakes it validate , for = and vice versa. Just a drop too clever. We'll need a 1.4.5 tonight.\n. if (operators[','] || operators['=']) {\n            file.iterateTokensByType('Punctuator', function(token, i, tokens) {\n                var operator = token.value;\n                if (operator !== ',' && operator !== '=') {\nmakes it validate , for = and vice versa. Just a drop too clever. We'll need a 1.4.5 tonight.\n. :100:\n. There's actually a fairly good use for require. If the left hand side is a literal, it makes accidental assignment impossible:\n1 == x can't be mistyped as 1 = x. \n. @alkawryk you can set a rule from the preset to null to remove it.\n. Having a huge diff doesn't seem like an acceptable reason to add this functionality. ValidateIndentation expects the function body to align with 1 indent from the line the function is declared on. ?w=1 seems like an acceptable workaround for that one commit.\nIf you want to add this functionality though, I'd accept a working PR.\n. It's on my radar. I'll eventually get to this. In the meantime, another smaller diff solution:\ndoSth('a long description.....' +\n' and the rest', function() {\n    // code\n. @ljharb that makes sense. If you can convince our dependencies to support node 0.6, then I'd help try to follow suit. Until then though, our hands are tied.\n. Yes, good call. In the meantime, you can do this as a workaround until we release a version allowing error supression or improvements to this rule:\nvar RTCPeerConnection = mozRTCPeerConnection;\n. Just as an FYI, error suppression has been in since 1.6.0, so marking this as not a major priority.\n. Thanks for contributing. To clarify, the desired behavior is: \"Ensure that the line after the block's opening curly is either a comment or contains code\". The improved check would not yell at you if you did this:\n```\nfunction blah() {\n  //a comment\na++;\n}\n```\nBecause that is about comment whitespace and not block whitespace. Agreed?\n. Don't use leftStickedOperators, they're deprecated for this reason. Use the BinaryOperators rules instead. \n. There is already a pull request that removes them from the docs. We're just waiting till 1.5.0 to make it official, which should be released soon. \n. Don't use that rule, it's deprecated. Use the binaryOperator and unaryOperator rules instead.\n. FWIW, I agree completely. It would be nice to get a stable base and consistency in these rules so we can then lay the jQuery specific rules on top.\n. Thanks for contributing! We're definitely interested in this rule. Can you also add the opposite rule \"disallowSpaceAfterLineComment\"? We typically like to accept rules that also come with their inverses.\n. Excellent. I'll be landing this shortly.\n. Thanks again! Landed in f11e42f6aee843af2c713428be2659bb5c5d9637 and 3e5d3bd0e6e36b9c944f02795dba9b99748f3070\n. Can we call this option fileExtensions instead? The ToProcess seems overly verbose. \n. @markelog, @mdevils... Thoughts? Is this better off as a CLI option? It seems a bit strange for this to be in the rule config.\n. OK then. @joelrbrandt can you please update this PR so we can then land it? Thanks again for contributing!\n. @joelrbrandt nothing to do. Just haven't found a few moment yet to land this. I will do it shortly. Thanks again!\n. Thanks! Landed in 60f8c351542b4e2c2cd2b3d0c3e0c3570fdfcb7d\n. Can't we simplify this greatly by checking the line before the close and after the open using jsFile.getLines and see if it's \\n?\n. RIght, good call. Please update this PR then so we can land this. Thanks again for all your contributions!\n. @zz85 ping!\n. @zz85 I'm going to finish this off myself, and use your tests. You'll get attribution, but I want to land this now. :-)\n. Thanks! Modified commit landed in b05ee58f6ad40e132ddb3d54684dc373a8539ff2\n. A think a good caveat to this rule would be that by default, back to back unary operators wouldn't require a space, such as !~, !!, etc...\n. @markelog I'm fine with using commitplease. Whatever you want the style to be, I'm cool with. /cc @mdevils @mrjoelkemp \n. Sure, close this. But we need to document our commit guidelines better. \n. Looks good to me. \n. Great. Landing!\n. Thanks! Landed in f46829b7c6804bc5dd5961d25fa28506cc049db4\n. Thanks! Landed in 5471ffca140fc920b5aac77ac11bf20309b7a0d8\n. Thanks me! landed in 33133d9e01db2c78e8847f09433a627e849faf5d\n. @markelog considering this discussion: https://github.com/jquery/contribute.jquery.org/issues/79 .... looks good?\n. landed in 8a8884e13036ecfb4aa57c66580f0328b21e9b42\n. @markelog good. I'll discuss with Scott to prepare for UI.\n. The docs reference this file which has moved from lib/presets to presets. It'll be fixed automatically when 1.5 comes out. Thanks for the report!\n. This is an interesting one. Thanks for finding. It's an error in indentation, not requireCurlyBraces, btw.\n. Thanks for contributing! JSCS expects you to have formatted your array as follows:\n```\n[1, 2, 3];\n[\n  1,\n  2,\n  3\n];\n[1, 2,\n  3\n];\n```\nThat is to say if an array is multiline, it expects the closer on a new by itself indented to the opener, with each element that happens to be on a new line indented once from the opener.\nThe indentation check is similar to JSHint but slightly more strict.\nThis can be a feature request, but it's not a bug in the sense that it won't be prioritized for a patch release.\nI may look into providing a set of relaxing options for indentation to address this. \n. It's not required for them to be flush right. you can do:\n```\nfn([\n  a,\n  b,\n  c\n]);\nfn([\n  a, b, c, d\n]);\n```\nAlso, as I mentioned, I will be looking into further relaxing options, but this is not a bug at the moment.\nThere are many valid styles. This just happens to be how the indentation check works. \n. The options will allow you to ignore array alignment and object alignment completely.\nHowever, it will likely never validate this:\ntest(\n  [1, 2,\n    3]);\nand rather just ignore it. \n. Cool. Then I'll consider this one closed. Thanks again for the reports!\n. @wayneseymour we'll consider adding this, similar to the passfail option from jshint.\n. @mosbeth, in 2.0 JSCS will obey the rule of silence.\n. 1.5.0 will be coming shortly!\n. @mrjoelkemp good luck! This is a tough one. \n. Hmm, perhaps we need to think of a way to automate this. If we were able to declaratively specify rule values, we can programmatically generate this. @markelog @mdevils thoughts?\n. @am11 Thanks again for contributing! I'm going to close this for now. In order to move this forward, we really need declarative option settings so this can be automatically generated. That'll land in 2.0.\nIf you'd like to tackle that issue, please comment and discuss that here: https://github.com/mdevils/node-jscs/issues/480\n. @nwhite89 thanks for contributing! I'm not sure how you wouldn't possibly also run into this situation for ifs? Seems like a keyword option here doesn't solve the issue for anyone but you in this specific case.\nMarking this as low priority for now.\n. @nwhite what about multiple spaces in regex literals? Also, what about multiple spaces when the expression spans multiple lines. \nCan you please add tests for that?\n. jQuery needs this as well. Marking as valid for the 1.9 milestone.\n. @bjornstar thanks for contributing! We are not currently implementing non-stylistic rules, and specifically, we are not currently implementing rules covered by jshint. http://jshint.com/docs/options/#maxdepth already covers this. \n. This will be fixed when 1.5.0 is released, which will be in a few moments.\n. @goloroden thanks for contributing! We are not currently implementing non-stylistic rules, and specifically, we are not currently implementing rules covered by jshint. http://jshint.com/docs/options/#nonbsp already covers this.\n. thanks! Landed in 76a061670985ad2c83f5f7039a72735f546279bc\n. Any file (as opposed to a directory) passed directly will now run. If a directory is passed, by default, only *.js is ran. Is this sufficient for your needs or do you still want a runtime flag?\n. Damn. I had a bad feeling about this one. Sorry I didn't catch it. I won't be able to tackle this one until much much later today, @markelog. Do you think you can handle this one for me?\nSorry again. \n. Fix seems simple enough. Move the extension check back out of shouldProcess into its own function, and then call it in both places where the check for just .js was before.\nDamn, I should've caught that.\n. fixing this now.\nOn Tue, Jun 17, 2014 at 5:31 AM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nTo clarify: this is pretty big regression, we need to either revert this\nor fix it today and release a new version\n\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/445#issuecomment-46285796.\n\n\nMike Sherov\n. Ok. I have a working fix as well. Let me know if you want me to share. \n. @mathieumg ping! Still interested in providing a PR?\n. @mrjoelkemp, all yours. \n. @mrjoelkemp no, we're talking about something like cat fileName.js | jscs.\n. @markelog, for something like #238 it's easy to adapt the current error output simply number truncating the error array. \nHowever, the overall problem stems from the fact that most tools simply read the output of one of the error formats, all of which assume line and column. I'm not sure we can get away from reporting dropped rules in the normal error output without breaking the world.\nThoughts?\n. > It's an easy way yes, but i was thinking that we need a correct message for it, if we would output say 100 errors when there could be a thousand,\nBut the default would be show all errors. Only by specifying a max would the user be seeing a possibly truncated list. But I get what you're saying.\n. ValidateIndentation allows any styling for var indentation as long as it's\nconsistent.\nOn Wed, Jun 18, 2014 at 11:39 AM, Nick White notifications@github.com\nwrote:\n\nSo I'm not 100% sure if it is a bug or a red herring, I understand why the\none fails and I expect it to, although technically I would expect the\nsecond one which passes to fail also...?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/454#issuecomment-46452821.\n\n\nMike Sherov\n. This should be a separate rule that has nothing to do with validateIndentation. Thanks!\n. This is needed for the jQuery preset. Caveat is when the var declarator only has one declaration which happens to be multiline. See here for reference: http://contribute.jquery.org/style-guide/js/#assignments\n. @ichernev, thanks for contributing! Can you do two things for me:\n1. Please add unit tests showing the bug. \n2. Can you investigate whether the opposite rule has this problem also?\nThanks again!\n. @ichernev ping!\n. Thanks! Landed in 1f67e00f3f46297996aa615ec2fa882cbd7fea4c\n. Anything we can do to automate the build process, the better. \n. @markelog is this done already? We already create jscs-browser.js when we publish to npm. Or are you saying we should just also publish to bower at the same time?\n. @markelog explain? What's wrong with what we are already doing?\n. The *stickedOperators rules were essentially bugs. \nBut yeah, I think you're right in saying that this might have been a candidate for a major bump. We did discuss this briefly. Hopefully, the changes were well documented enough to be fixed with a line or two.\n. @KidsKilla thanks for contributing! In order for us to land this pull request, we'll need you to add some unit tests so that we don't break this piece of code in the future.\nAlso, @mdevils, what do you think? Doesn't seem like a bad idea to allow JSCS to consume an AST directly.\n. @KidsKilla I'm going to close this PR for now. If at some point in the future you feel like pursuing this again, we'll need tests and probably a discussion about the merits of doing this. Thanks again for contributing!\n. Would be great if this could also remove the \"dev only\" note in the README.md file.\n. You can set fileExtensions in .jscsrc for now to *, but perhaps we should discuss our default behavior, so leaving this open. \n. Would love to add this, and we'll of course accept a valid PR here. It should come with an integration test just like you did for Wikimedia.\n. Thanks! Landed in c7a0916a12ff1c235afb30b2c5146567dcecbcfa\n. Thanks! Landed in 4bff97b0247e71de8f7b83902d7955c3b0dc7eb7\n. @markelog Seems like we have it wrong here.\nThe excluded files check should apply on directories and direct files.\nThe extension check should only apply on dirs.\nAgreed?\n. @markelog, seems like we need a bit smarter behavior. If excludeFiles or extensions are provided in the .jscsrc file, we should honor them.\nThe problem your last commit intended to address was a user not knowing the default extension is .js, and a file not being checked when passed directly but without .js extension. \nSeems desired behavior is:\nIf user specifies nothing, use .js as the extension if a directory is passed, or * if a file is passed.\nFor excludeFiles, always honor it even if a user explicitly passes a matching file to the cli. The assumption being that they specified excludeFiles, so we should honor that no matter what.\n. @LaurentGoderre thanks again for contributing. We're going to resolve this in #477 which handles the issue a bit more robustly. But I wanted to thank you again for sticking with this issue and helping us work through this logic!\n. So this now checks extensions and exclude on dirs and checks exclude on files.\nA few things:\n1. Let's verify that the grunt task passes a dir and not just all the files in the dir.\n2. Let's verify that if the grunt-task uses checkPath and a dir is passed, it does the right thing, and if a file is passed, does the right thing.\nThe only situation, if the two statements above are true, that would be weird, is if a user specifies an extension, but passes a files that isn't that extension, and expects it not to run.\nThe way to solve that would be, \"only check extensions for files if the user specifies one\".\nI think that would solve all use cases.\nThoughts?\n. BTW, thanks for tackling this issue!\n. LGTM to land.\n. Closing this now that it's been merged.\n. Closing this one as we now have a path forward in other tickets.\n. @am11 no need for meta programming, just a set of properties on each rule that defined its accepted / coerced values.\n. To clarify, multiple spaces must be allowed in strings, including strings that contain escaped quotes, and also must be allowed in regex literals.\nI don't think regular expressions is the way to go here. If you look at any of the other examples, they all use the token stream to successfully accomplish this goal. I think using tokens will lead to a more stable solution with less edge cases.\n. @nwhite89 just closing this for now to keep the list of pull requests clean. When you have something to show for multiple spaces, I'd gladly reopen. Thanks again!\n. I've decided to not include a quiet flag, as the only time the rule name is included is with explainError which is only in the default reporters. We'll leave in the error names for now, and if people want to remove them, they can use a different reporter, or we can always add this option later.\n. On second though, I'll add the flag. It's better for consistency.\n. @zxqfox sorry, I'm not sure I understand what you're asking. This will allow the user to disable or enable reporting of errors for a specific rule. It will not allow re-configuration of a rule inline. However, #487 will allow you to specify the config for an individual file at the top of that file.\n. The rules go like this: \nConfigure using .jscsrc or config at top of file, enable or disable configured rule inline.\nThere is no situation where you can do maximumLineLength: 80 inline. \n. I'm almost done. It'll be done today. Thanks for the offer though @mrjoelkemp\n. The use case is parity with every other linter in the ecosystem and portability of code into other codebases. Not everyone uses build tools like Grunt that bake in per file config. \n. Closing this. Please read the last comment on https://github.com/mdevils/node-jscs/pull/513 . Once inline disable / re-enable is live for a bit, we'll see if this is still necessary.\n. @mrjoelkemp, thanks for contributing! A couple of notes:\n1. It would be good if each of the sample files were code written for that style. The wikimedia integration test is sample code from an actual wikimedia JS file. Perhaps use some code straight out of the jQuery source, etc.\n2. The preset test file was already pretty duplicative. Perhaps you can DRY it out so that adding tests for further presets is a simple as calling one function and adding the integration file?\nThanks again, and great to see you contributing!\n. @mrjoelkemp thanks again for the hard work! Just a few minor edits more, please. I'm going to reach out to the owners of the sample code to see if I need a license header.\nOther than that, can you also update CONTRIBUTING.md to include a section for how to contribute a new preset that covers:\n1. the necessity of an integration file.\n2. the necessity of a link to the published style guide.\nThanks again!\n. Looks good. I'll be landing shortly! Thanks again @mrjoelkemp \n. @markelog sure. Just let me know when you're done reviewing.\n. @markelog I'd like to land this by tomorrow so I can also land the MDCS preset. Let me know.\n. @markelog, is this safe to land now?\n. Ok, so it sound like we need to:\n1. Reduce the code in the integration file to be small and representative. Similar to what @mrjoelkemp originally implemented.\nHowever, I do think that having at least a small representative integration test that produces no errors is helpful.\nCan we meet in the middle on this, @markelog, and call them required but make them representative and small?\n. @markelog, I'm going to land this in a few hours unless you object further now that @mrjoelkemp has made the agreed upon changes.\n. Thanks! Landed in 38fc35a3f8f7232dcc683dadc96b14a3d454e75b\n. @gero3 now you can adapt the mdcs pr.\n. @am11, can you please provide the complete file (or the minimum required to produce this error) along with your config so I can investigate? Thanks!\n. Right. JSCS is a style checker of already valid code. It will give you back esprima's error msg in a stack trace if your code isn't valid.\nAlthough, I suppose we can nicely format Esprima's errors into our error format.\n@mdevils, @markelog thoughts?\n. @am11 we'd likely pop off the first message from the stack and format it correctly so it showed up as a JSCS error complete with a line number and column number.\n. Nice work! \nPlease inlcude a more descriptive commit message:\n```\nrulename: bug that was fixed\nFixes #368\n```\nAlso, looks like you have a style violation. In case you're not already doing it, npm test runs both the style linter and the mocha suite.\n. @mrjoelkemp seems like some of my later comments were obliterated. Make sure they're all addressed. Thanks again for staying on top of this so quickly.\n. @mrjoelkemp will be in front of a computer shortly. It'll happen then. :)\n. Thanks! Landed in 4d494974c0a08b4f8af45cbc9fbce72698aa61ec\n. Thanks for contributing! You have a few style violations to fix. Please run npm test before submitting a PR to ensure it works as expected.\nAlso, please add some unit tests covering the changes you made here.\n. @gero3, no worries, that's what review is for! Thank YOU for contributing. We can always use the help!\n. Thanks! Landed in c414ec88654fd195fbb48a128a2a4a63efd1ea57\n. It's because we're using prepublish, which ridiculously runs on npm install. Going to fix now.\n. Yeah. Super counterintuitive and a source of lots of bugs. Unfortunately npm team seems set on this behavior. \n. This is now done.\n. This is now done.\n. @gero3 can you please pare down the integration file so that it is smaller and ensures that every defined rule is hit? Also, if three.js has any license, can you please copy the relevant portion of it into the top of that file?\n. Sorry for the delay! Will be landing shortly. Thanks again for your hard work @gero3!\u2014\nSent from Mailbox\nOn Thu, Jul 24, 2014 at 3:15 AM, gero3 notifications@github.com wrote:\n\nCan this be merged??\nReply to this email directly or view it on GitHub:\nhttps://github.com/mdevils/node-jscs/pull/496#issuecomment-49974866\n. Thanks, landed in f6c11ef5c913de931713ea59e9bd62aeaab0b8a8 !\n. Thanks for contributing, and yes, it does. This is by design. What is the use case for this not being true?\n. @cowwoc, maybe I'm misunderstanding. You're saying any block comment, not just ones that contain multiple line breaks?\n\nBecause otherwise, the idea would be that commented out code is only temporary and doesn't end up in committed files. However, block comments are legit for... commenting, but there's no reason to ignore the rule inside of them. \n. Sorry, but comments are also code. There are many JSCS rules that must consider comments. This rule is one that does consider comments. \nThe fact that you've commented out code does not preclude those comments from following the style rules.\nThe assumption that comments exist as a way to disable non-conforming code assumes too much. There are many reasons to comment, and the use case you've chosen, \"commenting out old code\" is a use case that ideally shouldn't be the state of code once committed. \nHowever, if you absolutely must have the ability to ignore comments, you'll be able to use // jscs: ignore in version 1.6 to disable JSCS for the commented out sections of code.\nThanks again for understanding!\n. No worries. I enjoy the discussion. To address your points:\n1. Yes. And this is primarily what comments are for. The \"disable code with comments\" use case is a minority and honestly shouldn't be present in committed code.\n2. It applies to rules where it doesn't make sense to add additional logic to specifically exclude comments. For example, I'd have to add code to ignore comments in this rule. Your point about ? spacing doesn't apply because that would require additional code to enforce it, and it also doesn't make semantic sense because the rules that consider ? specifically mention what they're checking (e.g. requireSpaceInConditionalExpression).\nReally, this comes down to time, effort, and necessity. The use case for ignoring comments is \"I have already non-compliant code that I want ignore\". You have 3 options that are better than adding caveats and config to every rule:\n1. Delete the code instead of commenting it out. You have source control in case you ever need it again. Your code will be clearer without the dead stuff lying around\n2. Remove the line breaks in the commented out code. Probably takes about 5 seconds and does the work in case you ever decide to comment the code back in.\n3. Use the // JSCS:ignore option. That's what it's there for. \nLastly, even if I did add an option to ignore comments, it wouldn't be the default because someone would say \"hey, why isn't it disallowing multiple line breaks in my prose?\". Not having it on by default means that all 3 options above are faster than looking at JSCS docs to discover there's an option to ignore comments.\nBy all means, please feel free to continue this discussion. I only closed the ticket because I have no means of implementing this and want to keep the issues list clean, but I don't want to shut down discussion.\n. @markelog, @cowwoc would be better spending his time implementing the // JSCS:ignore functionality ;)\nI honestly don't think its worth the time and effort to address the \"I have commented out code to ignore\" use case on a per rule level. \n. Thanks again, @mrjoelkemp!\n. Thanks! Landed in 627c6a6b34ed33190ea8025f65e443e4fdc16fd4\n. Thanks for contributing and reporting this bug! Yes, this is a bug and a duplicate of #423 . I'll be fixing this shortly.\n. Also, validateIndentation should take a numeric value, or the character \\t. You have \\n, which is incorrect.\n. @gustavohenke sure, you can add us there. Use the tag help-wanted. Report back when you've added us and we'll close this. Thanks again man!\n. @gustavohenke this looks done. Thanks!\n. Although the private member variable is set to 0, the default tab size is actually 1, because of this line:\nline = this._tabSize ? lines[i].replace(/\\t/g, this._tabSize) : lines[i];\nThat is to say, when tabSize is zero, it leaves tabs untouched, and thus counts them as the single character they are.\nI'll land this with that change myself. Thanks again @mrjoelkemp!\n. Thanks. Landed in 41a91ddce9a3974c955b55a513a9a21303f4ce29\n. @markelog, can you review this one? The CLI stuff is out of my area of expertise. \n. @markelog any chance you can review this soon?\n. @mdevils did you get a chance to review this? I'd like to put out 1.5.10 at the end of the week and would love for this to get in.\n. Actually, is checking for lack of arguments the only time we want stdin? What about the situation where someone does, for example: cat myfile.js | jscs --color ?\nJSCS should check stdin whenever a set of files aren't specified. \n. @mrjoelkemp LGTM to land. @markelog I'll wait for you or @mdevils to land it tomorrow.\n. Not currently, but we'll mark this as a feature request.\n. Thanks! Landed in 41d322f9f2ad4488df44caf855d45b864d1e986f\n. @rachelnicole thanks so much for contributing! A couple of notes here:\n1. please add tests proving it doesn't yell for function declarations.\n2. please add the opposite rule requireAnonymousFunctions that disallows named function expressions. All of our rules strive to come in pairs.\n. Lastly, please change the commit message to include 2 new lines between before Fixes #508\n. @rachelnicole almost there. A few small fixes. Thanks again!\n. @markelog safe to land now!\n. Thanks, landed in 639590ef54a94c7fafc4b16bea0aa83decf7ce0a!\n. Chaining style hasn't been tackled at all yet, but is a must for the jQuery style guide. \nThis would be a new rule and seems fine to me. \n. @rachelnicole if you'd like to take a stab at this, I'd go with what @markelog mentioned. Add it as a possible value for requireOperatorBeforeLineBreak and disallowOperatorBeforeLineBreak. Should be for any usage of ., be it method chaining method().method() or property chaining prop.prop.\n. @rachelnicole isn't currently working on this. @jdlrobson, put the rule in the README anywhere for now. Thanks again for contributing!\n. I thought we discussed this.... I asked for feedback for things I had slated for 1.6, which included this?\n. > i said \"initially\" :-)\nI just don't want you to be sad, is all! @mrjoelkemp is gobbling up the fun stuff before we get a chance!\n. The difference between JSCS and JSHint is that JSHint has an initial configuration, with options to relax or enforce more. \nJSCS does not. This makes partial rule application at the top of a file almost nonsensical, and strongly weakens the argument of specifying the config at the top of the file.\nThe more I think about this, the more it seems that this isn't a feature for JSCS. Yes, you should be able to disable rules inline, but that's a different issue.\nLike @markelog asked \"what's the use case?\". I replied \"feature parity and some people don't like using the task runners.\" These seem like weak arguments now.\n@mrjoelkemp, thanks for the hard work you put in here, but I'd like to keep this PR open a bit longer and discuss whether this is a necessary feature or not.\n. So, the problem here is still that I'm not sure what the expected behavior should be because no one has asked for this specific feature except for me, and I only asked for it for some weird notion of parity with JSHint.\nThen there's the problem of having to re-architect how rules get applied to a file to overcome the idempotency issues with calling configure twice.\nI'm going to close this for now. If people ask for this feature in the future once rule disabling is live, we can resurrect this and see what the community thinks.\nUntil then, thanks again @mrjoelkemp for your hard work on this and shedding some light on the challenges we'll need to overcome if we want this in the future.\n. @gero3, thanks again for contributing! We're planning on auto formatting for 2.0. I think its best to start a discussion on how we want to accomplish this before reviewing any pull requests. There are lots of challenges with auto formatting to overcome and I want to make sure with think this through together. \nI'll make an issue for 2.0 for autoformat ting and reference this PR as a discussion point, but I'm going to close it for now as it's a WIP anyway and can be reopened when ready.\nThanks again!\n. @gero3 let's move this discussion to #516 for now. Thanks again for all your hard work. It looks super interesting, but we want to make sure it jives with what @mdevils has been working on, so it'll require a bit of discussion.\n. @mdevils, thoughts. I like this because it'll help custom reporters ignore certain portions of rules. PHPCS does the same thing here. \n@gero3, thanks again for contributing! I'll weight for @mdevils to weigh in before reviewing. \n. @markelog this would be helpful if we wanted to eventually disable specific portions of a rule in error reporting.\n. From @gero3: \nI've updated the formatter to make it useable.\nTo test it, I used a minified build of three.js and used the MDCS configuration.\nThis is the result: I have file that complies with that standard. \nhttps://gist.github.com/gero3/a787fe2023a17ffd6ea8\nHow does it work:\nGet the errors by checking the file.\nFor each error, check with the source what needs to be changed and create a change request with what need to be removed or what needs to be added as strings.\napply the change requests\nuntil there are no errors (or retry 10 times) repeat this cycle.\nIt is a fairly easy scheme which is fast enough for small changes and normal files.\n. @gero3, thanks for the explanation. Glad to see you contributing again after a short break. \nI'll have a more thorough response later, but essentially, I want to make sure that corrections are made progressively. \nMost of your answer, at first glance, sounds like a brute force approach. It may be the one we end up going with, but I want to entertain more ideas as well.\n@mdevils, did you have thoughts on how we would accomplish this? If so, please post your thoughts. I'll write up mine tomorrow. \n. I think that autoformatting MUST be part of the core. To move this\nfunctionality to a plugin for fear that it discourages contributions seems\nbackwards to me. Our primary concern is our users first and our\ncontributors second.\nThis is something the users want in core and have asked for quite\nforcefully.\nEsformatter is a great tool, but its configuration model and strategy is\nquite different from us. I'd love if we could combine efforts, but using it\ninside of JSCS means double parsing everything and duplicated logic for\neverything.\n\nMike Sherov\n. Yes, we should be using the tokens. However, there is work being done on\nesprima itself to make this even easier.\nI'm excited for a proof of concept that I can go to Ariya with in case\nthere's any pain points.\nOn Thursday, October 9, 2014, Marat Dulin notifications@github.com wrote:\n\nRight after I finish with plugins I'm going to show an autofixing example.\nIt is easy and requires minimal rule rewrite.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/516#issuecomment-58582663.\n\n\nMike Sherov\n. I don't think it should be a separate module. There are ways to achieve this that you're not thinking of. Give us a chance to show you. Both @mdevils and I have solutions we'd like to try for a large swath of the rules. \n. > Base parts of it could be\nSure, I misunderstood. I thought you meant not to be part of JSCS core. But you're saying that it's a module that JSCS core uses.\nPerhaps, but I think we should focus on modularization a bit later. Features first.\n\nyou mean without range resource?\n\nIt depends. The way I had though about doing this in my mind actually involves augmenting the token list so that it contains comment tokens, has an additional token at the end to represent EOF, and that every token gets a \"whitespaceBefore\" property that is the literal whitespace that comes before the token.\nThis would become a part of the new standard for CST \"concrete syntax tree\", and eventually this work would be done by esprima. Furthermore, the actual tree would link to the token list with startToken and EndToken so that seamless switching between the tree and tokens would happen.\nWe'd start by doing this in JSCS and promoting it to esprima and other parsers, hopefully making it a community standard.\nNow, given that we have a token list that contains comments and whitespace, most autoformatting operations and just changing the \"whitespaceBefore\" property of a token.\nAt the end of all modifications, you generate source by doing:\ntokens.reduce(function(accum,next) {\n  accum += next.whitespaceBefore + next.value;\n}, '');\n. /cc @mdevils. I'd like to know what your approach here is going to be because I'd also like to take a crack at mine. \n. > But in order to fix things we need at least range data to identify the place in tokens array for further actions on it.\nOr at least a list of tokens to modify (if they contained whitespace info). But yes, something more than line and column are needed. \n. Yes, it's the next thing im working on. Bounty makes no difference here.\n. @jdlrobson and @indexzero, the most helpful thing you can do is review all existing rules and make sure spacing and line break rules are all using the file.assert methods. Those will be the first to get fixed.\n. Just updated the description with full outline of the approach:\n1. Change all rules to use the JsFile traversal methods instead of directly referencing the token by index directly. This allows us to change the underlying token data structure at will while only having to change the traversal methods.\n2. Make all whitespace only rules use the token-assert framework.\n3. Modify the token list so that it includes comment tokens, and a new terminal token called \"EOF\". \n   3a. Modify traversal methods to ignore comment tokens as necessary.\n4. Modify comment tokens to include a property called \"prefix\", which contains the preceding whitespace.\n5. Add a function called errors.fixToken (or some other name), which takes in a token, and the updated prefix whitespace, which modifies the prefix of that token.\n6. Make token-assert call errors.fixToken appropriately.\n7. Modify StringChecker so that it can output the modifed source and save it to disk. It's simply a loop over the token list, printing the prefix followed by the value of the token.\n8. Modify CLI to respect a --fix parameter, which triggers the autoformat option.\n@jdlrobson @indexzero help with 1. and 2. would be greatly appreciated.\n. @TheSavior, operatorIndex is unrelated. Good question though.\n. @mdevils, let's track what's left:\n1. Saving file in case of not stdin.\n2. Autofixing for validateIndentation.\n3. Strategy for non whitespace fixes.\n4. Converting remaining rules.\nAnything else?\n. @TheSavior the multipleVarDecl rules. We don't need to solve it now, but we have the come up with something like @gero3's strategy of direct source manipulation followed by AST rebuild or figure out how to manipulate an existing AST.\n. I must've missed that! \n. @millermedeiros, you're welcome to help help us solve the problem here in JSCS just as much as we're able to help you in esformatter. I appreciate the concern about the dead end, but I think it's most unfounded if you haven't taken the time to read all we've said about it on our mailing list and in our various issues. If you're truly interested in having someone else solve the problem, and think that esformatters current impl is suboptimal, we should work together here in JSCS to get this done. In regard to specific critiques:\nLinked list for token insertion is a must. We just aren't there yet. Our abstraction makes it pretty trivial to add when we finally tackle that problem. Note that we're also working with Esprima and the estree project to attempt to move forward the CST at some point soon so that something like rocambole or what we do now (basically the same work) is available directly from an esprima parse. \nAs far as indentation goes, I think I have a pretty good grasp on the edge cases, and I'd invite you to read what my existing pull request for autofixing indentation tries to accomplish. It has matured over a long period of time and is fairly lenient in what it enforces. Would love specific feedback there. \n. @millermedeiros, I'd also like to mention that the negative indentation problem for chained method calls is one of concern but is literally no different then any something like switch/case indentation. \nAgain, I'd invite you to check out our validateIndentation rule and see how it works before you dismiss it.\nWith regards to having to do indentation last, that's also a bridge that we may have to come to, but I doubt it. As long as the rules that modify number of lines preserve indentation, it shouldn't matter. But again, we'll see when we get there, and I think JSCS's infra is robust enough to handle that chabge should it be needed to do it last (which is something I suspected, but am not convinced). \n. @millermedeiros, lastly, I want to just say that personally, we could use your help on JSCS. Is love for us to consider merging the two projects.\nNo one is telling you to give up on esformatter, and you should continue working on it to your heart's content, but I've seen you express doubt to as to its design and lament its pace of development.\nWe've tried to build an inclusive, contributor friendly codebase here, and I think JSCS's momentum and contributor base make it the project we should all be working on instead of in esformatter.\nAgain, you're welcome to do whatever you like, and we appreciate the input and feedback you've given us, so even if you decide to continue developing esformatter into the foreseeable future, no big deal. But I think we could solve more problems together rather than apart and I think JSCS is in a better place at the moment to handle the task. Of course, I could just be biased.\nLet me know what you think. \n. @millermedeiros thanks for the thoughtful reply. At the very least, perhaps you can help contribute to the CST discussion in the estree repo once that gets underway... as the atuhor of Rocambole, your input is invaluable there.\n. Congrats. Good luck with the continued development of your project. \n. @TheSavior, awesome work! Would you mind waiting until 1.12 is released before submitting that package? I wouldn't want users to get confused. \n. @indexzero disallowMultipleLineBreaks still needs conversion. \nAlso, the (no)whiteSpaceBetween rule need to be fixed so that if a comment token exists between the two provided tokens, don't attempt to autofix. See the linesBetween rules for prior art there.\nIf you can get PR's going for that, I think we're in a fairly good place, and can discuss releasing 1.13, which has the goal of fixing whitespace only.\n. @indexzero also discovered requireAlignedObjectValues needs conversion as well. \n. Thanks! Landed in 087661b1e789bad970d6f8bae03f67347202b3d4\n. Updated description and generalized the rule. Marking as valid for 1.10\n. Close away!\n. What's interesting about CI tools is that download counts for them are overinflated because they get downloaded on every version of node on every PR that a project tests against. \nThanks for the PR @mrjoelkemp, but I agree with @markelog that we don't need to advertise those metrics at the moment. \n. @markelog , @mdevils is there any good way to test this or otherwise be assured of its validity? @am11?\n. > Don't need to do that, we need to look in every possible paths, i.e. not only in the first paht that we found.\nFigured as much.\n. @markelog is that good to land? If so, I'd like to cut 1.5.9 right after.\n. Yeah, can wait till tomorrow. I forgot about stdin. Good call. Let's wait.\n. @mrjoelkemp a couple of things to think about for this one:\n1. A user using a plugin that has \"validate on save\" would be really annoyed if they comment something out to test a change and see they now have lint fails. Especially if their plugin, like SublimeLinter jumps them directly to the first error on save. \n2. What exactly consistutes commented out code? Seems like we'd need to run the body of every comment through esprima and if it validates, cause a lint error? That's the slowest, but probably most accurate way.\n3. There are caveats: // return modules might be a comment someone makes that is also valid JS. \n. 1. Multiple single line comments occasionally create code, e.g.:\n// This only happens when other functions\n// return modules\n. @zxqfox, fair enough. \n. Thanks for contributing! We'll likely only add the open/close option because as you mentioned the else rule seems like an edge case. \nYou can look at the rules that already exist to guide you in creating your own rule for else. Sorry I can't be more helpful there. \n. Thanks for contributing! What specific errors? What does the file look like? Thanks!\n. Indentation is not configurable at the moment. The problem is that currently indentation does some basic validation of arrays that isn't smart enough.\nBasically, it's expecting:\ngrunt.registerTask('build:dev', ['clean', 'bower', 'jshint:all', 'handlebars',\n    'csslint:lax', 'copy', 'concat', 'cssmin']);\nto instead be something like:\ngrunt.registerTask('build:dev', ['clean', 'bower', 'jshint:all', 'handlebars',\n    'csslint:lax', 'copy', 'concat', 'cssmin'\n]);\nor\ngrunt.registerTask('build:dev', [\n    'clean', 'bower', 'jshint:all', 'handlebars',\n    'csslint:lax', 'copy', 'concat', 'cssmin'\n]);\nor\ngrunt.registerTask('build:dev', [\n    'clean', \n    'bower',\n    'jshint:all', \n    'handlebars',\n    'csslint:lax', \n    'copy', \n    'concat', \n    'cssmin'\n]);\nI'll likely be separating out array and object indentation to separate rules.\n. Thanks for contributing! I'm not sure how tabs can make sense here. Depending on the settings of the users editor (namely tab width), the keys will appear not aligned. I can add a tabWidth parameter to remedy this, but it seems like it's solving a problem that is best solved by using spaces for alignment.\nThoughts?\n. Tabs for left line alignment makes sense, but again, people's editors can display a tab as whatever length they like. Using a tab to align object keys will cause non alignment depending on editor. For example, Github's diff tool uses 8 spaces!\nAs far as people liking hitting tab because it's less keystrokes: most editors have a \"use spaces when hitting tabs\" feature.\nIf you guys want to submit a PR for this, I'll review but i still personally don't think its a good idea. \n. either way still illustrates my point :)\n. @SgtPooki no, it means that tabs can be configurable per editor or environment. They make sense from indentation, but not alignment. Because I can align things with tabs assuming they are 4 spaces, and someone elses editor (including github) will look different.\n. I'm not making an argument about spaces vs tabs. And I already said if review the PR. I'm simply saying my personal view is that tabs for alignment is nonsensical and I don't PERSONALLY support a rule that creates a broken looking style, because no matter how you enforce it, some viewer will render it wrong with tabs for alignment.\nAgain, as well, I not arguing about indentation. I'm arguing about alignment only.\u00a0\n\u2014\nSent from Mailbox\nOn Thu, Aug 28, 2014 at 5:43 PM, Russell Dempsey notifications@github.com\nwrote:\n\nBut if their tab config is different, jscs will tell them (hey, your stuff isn't lined up) and they would be able to figure out their tab settings were not up to snuff as far as the coding standards for the project goes..\nIf neither jshint nor jscs can help a project lead define their coding standards as far as whitespace goes, what is the solution then? Maybe I'm missing the goal of this project, but isn't Jscs supposed to help people standardize \"javascript code style\" for a project? You don't force people to use google/jquery/yandex code standards, so why force them to use yours?\nI completely see what you're saying, and yes, if people use tabs for alignment its going to look weird in some places. That's why I have my default config set to replace tabs with spaces.. it just makes things more simple.. but not everyone does that (my current client does not). If someone does not follow that standard, is this something where you want to put your foot down to the community and say that jscs does not support using tabs for alignment? \nThis is a huge holy war that has been around for a very long time and imho it is much easier to allow both (i've already submitted a PR that resolves this..) and maybe just warn people who are using tabs for alignment that there is another potentially better option.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/533#issuecomment-53805350\n. @BryanDonovan thanks for contributing! I'll be landing this shortly!\n. Hi @cipiripper , thanks for contributing! In order for us to land this pull request, please do the following:\n1. Run the tests before submitting a PR: npm test so there are no travis failures.\n2. Add new unit tests for the rule you're providing.\n3. Add an entry to the README.md file describing your rule.\n4. Provide the opposite rule as well: disallowNewlineBeforeBlockStatements (and tests and docs for it).\n\nThanks again for your help!\n. No worries. Thanks again!\n. @cowwoc can you please comment on the actual PR instead of the commit so they appear inline?\n. @cipiripper one last change to make and then I think this is good to land!\n. 1. The closing brace is a separate set of rules in practice and spirit. That can be saved for another PR. \n2. Yes, agreed. In that we always ignore it.\n3. I'd like to see someone complain that they want \nfunction whatever()\n{}\nbefore implementing the parameter.\n. @cowwoc can we move these discussions to new issues. I'd really only like to focus on the opening curly brace of a block statement (not objects) for this rule as they are fundamentally different.\nAs far as what these rules should do:\n1. only operate on blocks, not objects.\n2. don't error out with for same line empty blocks when paired requireNewLineBeforeBlockStatements.\n3. not provide the ability to override the empty block behavior of requireNewLineBeforeBlockStatements until someone complains.\n. Thanks! Landed in 6dc228a5e9e43ec1fcc139d14ef9d2ba43b57f56\n. @Krinkle missed one spot, add crockford to the list of values in the preset rule description in the README. After that, I think this is safe to land.\n. OK. So I'm going to land this and add the missing doc stuff and remove that one rule myself.\n. Thanks! Landed in a44a2e8b2d7b1479977912e00fe3fa8b4136d7ee and a436d2ab81efb643f96ad9e1f2b13b65ddd9506c\n. @cowwoc still interested in implementing this?\n. > Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.\n- Donald Knuth\nThat said, if you can provide some proof that this is taking an overwhelming amount of time, we can reopen this issue. But for now, I'll close it. Thanks again for contributing!\n. I am planning on landing error suppression for 1.6 today or tomorrow and this was going to be something I did as a post process after all errors were collected.\nGiven this proposal however, it seems to make more sense to ignore  the error at the time of being added. \nThoughts?\n. Sure. For 1.7, or 2.0, I'll pull out array and object indentation into separate rules. I also plan on relaxing the rules for indentation of statements where the opening curly comes after a multiline statement (and therefore makes expected indentation ambiguous. \n. @gero3 did you try latest master? I fixed that bug after 1.5.9, and is currently unreleased.\n. @gero3, I'd like to break it apart myself if you don't mind.\n. The validateIndentation rule is now as lax as it can be while still matching JSHint behavior. \nI will continue to refactor that rule, while adding separate rules for array, object, call expression, and variable declaration indentation. \nTherefore, I now consider this issue closed and will file issues for the other more specific rules so that they may extend the indentation engine. \n. That's because an extra brace makes your program invalid, and becomes a parse error thrown by esprima. We have plans to nicely format esprima, but there is no way for esprima to know that you just forgot a closing brace.\nAnyway, if to could, the best place to report this would be the esprima bug tracker. Thanks again!\n. @markelog once this lands, it's effectively 1.6 if we can agree on @mrjoelkemp 's file wide config PR.\n. Otherwise, we can cut 1.5.9, and land these two at a later date. Thoughts?\n. @dbwhddn10 you need to wait till it gets merged or you can reference my repo and SHA in your package.json file. Look it up in npm's docs for package.json\n. I'm going to land this now that it's simmered for a few days. If there's any changes, we can always make them before releasing 1.6.0.\n. landed in fa5527a5c60a378b4282141b3732b251e447c806\n. @dbwhddn10 care to elaborate?\n. Looks like Esprima won't recover from that error. We should raise an issue with ESprima for this, specifically to be able to recover from #import and #!.\n. Well, in that case, I'll close this for now and remove the comments about this from the source.\n. Thanks for contributing! This style is already allowed by validateIndentation. If you're getting different results, post your config and a failing snippet of code and we'll fix it up!\n. Oh, that's right, I only have lax options currently for case relative to switch, not break relative to case`. \n. I plan on land a bunch of stuff tomorrow, if @markelog doesn't get to it first.\n. Agreed with @markelog, if we're going to land these new methods, tests and an actual implementation in at least one rule would be nice. Other than that I have a few comments I'll leave.\n. > @mdevils already find use of them \u2013 6733799\nYes, but perhaps land them them with this PR?\n. :+1: from me. This looks good to land for 2.0\n. @dbwhddn10, thanks for the report! \nit's not that JSHint is right and JSCS wrong, it's just that they are different.\nFor now, there are not currently plans to re-enable rules at the end of the current scope.\nI'm going to close this for now and we can revisit this if more people report the same issue. \n. Thanks for contributing! \nThere's several reasons we won't likely ever land a patch to address this specific use case:\n1. In the next version of JSCS, you'll be able to ignore sections of code.\n2. You'll also be able to ignore array indentation separate from block indentation.\n3. This use case opens up a can of worms for all sorts of caveats, which is better dealt with by writing your own custom rule. \nClosing this for now, but thanks again for the report!\n. :+1:\n. My one comment is that we may also want to consider something like coveralls or Travis integration so that we can see if coverage goes up or down with each PR. \n. Cool, then should we wait on those to issues to land before accepting this PR?\n. /cc @markelog @mdevils I'm tempted to put this into 1.9. What are your guys thoughts?\n. FWIW, I think we should definitely land this. It'll also help uncover bugs with the harmony implementation in esprima, not to mention it'd be nice to have a large codebase like Ember validate with JSCS. /cc @mdevils \n. Good point. Let's introduce harmony flag and release it with 1.6.0 then?\n. @mdevils, what about ability to provide path to esprima module? As @rwjblue points out, there's problems with attempting to use two different versions of the same dependency. \n. @mdevils, even if it was right around the corner, would be great to be able to use whatever version of esprima you want.\n. Another AST processor isn't an easy switch because it doesn't have the same extras like the token and comment list that esprima provides.\n. > @mikesherov In this case how can we guarantee stability?\nWe don't. We mark harmony support as experimental, and tell people that any bugs filed against ES6 will have a lower priority for the time being.\n. @markelog, can you move that package to the jscs-dev org?\n@rwjblue, still interested in making these changes?\n. @rwjblue, great, can you then amend this PR to take into account @markelogs comments from https://github.com/jscs-dev/node-jscs/pull/560#issuecomment-52315422 ?\nI'd love to land harmony support in JSCS 1.7.0!\nThanks again for helping push us forward!\n. @rwjblue ping! Just let me know if you're going to make the changes. If not, I'll implement them myself and then land 1.7\n. @rwjblue, I'm going to take over this PR and move forward with it. Thanks again for contributing what you have so far. If you're still interested, just ping me, and I'll tell you continue forward.\n. @rwjblue no worries! We do what we can when we have time, right? \nSo does this mean you're picking it back up, or would you like me to move forward with it?\n. Updated PR here: https://github.com/jscs-dev/node-jscs/pull/680\n. @malandrew, for now, Esprima 2.0 has only bits of es6 support, so not yet suitable for the --esnext option.\nVery quickly though, the es6 stuff will continue to land and when is fully implemented, will make the --esnext flag only modify certain rules rather than switch parsers.\nThere's nothing to do here except fix bugs in ESPrima harmony so it can be merged into master. \n. @markelog, won't this fail because of the exception: \"// Function with a callback, object, or array as the sole argument:\n// No space on either side of the argument\"?\nFor example:\nFunc(func2() {\n  a();\n});\nis valid jQuery. \n. I think I'm going to attempt the jQuery version of this this morning unless you've got a WIP @markelog. That cool?\n. @tybenz no worries. This is still a solid contribution. We just also had on our plate to implement the jQuery specific version of this for 1.6.\n. @tybenz correct!\n. Thanks @mrjoelkemp!\n. Thanks for contributing! Good catch. Not yet, but I'll add it soon!\n. Thanks for contributing! One of the design approaches for validateIndentation is that it should require almost no configuration. The current validateIndentation, for example, allows both indented case vs. switch or not, depending on the style of the first case statement.\nYou should be able to do a similar technique with case vs. break. Can you please explore that before introducing new options?\n. > For \"break\", do I need to consider the same things and have the same style for all \"break\" in the same switch statement ?\nYes. Thanks for tackling this!\n. @kefniark thanks for contributing. Occasionally, I have other priorities that get in the way of developing and maintaining free software.\nAs soon as I find some time, this will be reviewed and merged, just like the dozens of releases that came before it. \n. @kefniark reviewing now. Thanks again for the patience.\n. @kefniark ping!\n. No worries. Whenever you can... we all get busy ;-)\n. @kefniark, can you please rebase this pull request? Also, have you run npm test? I'm fairly certain there's still a few lint errors left.\n. @kefniark I don't know what you did, but whatever it is isn't right.\n. @kefniark thanks again! Once these minor style nits are addressed, this should be good to go!\n. @kefniark I ended up rewriting this patch quite a bit after removing the popAfter property. You still get credit for having done the work, but please take a look on what I settled on in bd62246 . Thanks again!\n. @sylouuu, JSCS looks at the first break statement it encounters in your code, and uses that as the standard for the rest of your code. Do you have an indented break anywhere in your code?\n. @sylouuu, thanks again for contributing. Can you please file an issue rather than comment on a PR so if there is a bug, others will see it?\n. The rule would be requireFunctionDeclaration and would disallow assigned function expressions, would ignore IIFEs, and would ignore function expressions that are passed as arguments to a call expression. \n. A function call is a call expression. \n. @benesch are you still interested in pursuing this? In order for it to land, we'd need the opposite rule as I described: \n\nThe rule would be requireFunctionDeclaration and would disallow assigned function expressions, would ignore IIFEs, and would ignore function expressions that are passed as arguments to a call expression.\n. Sounds great! Can you fix your Travis failures and then I'll re-review\n. @benesch this is a great contribution! Perfect right out the gate! Please feel free to tackle more issues, we could use the help!\n. Thanks again!\n. JSCS currently doesn't implement a hoisting check because of JSHint, which is awesome at it. JSCS is currently intended to deal with style and not programming gotchas, and this allows us to be lazer focused at style guide enforcement. \n\nIf in the future we revisit this decision, we can reopen this issue then. \n. Yes. They have both \"undef\" and \"latedef\" rules which address hoisting. \n. @markelog can you review this one?\n. @markelog can you please review this one?\n. @markelog can you please review this one?\n. @markelog ping!\n. @pvolok, thanks for contributing. In a later version of JSCS, the indentation rules will become a little more relaxed. However, there are several ways to write this code differently, not zero:\ngoog.ui.style.app.MenuButtonRenderer.prototype.createContentWithDropdown = function(content, dom) {\n  // code\n};\nor\ngoog.ui.style.app.MenuButtonRenderer.prototype.createContentWithDropdown = \nfunction(content, dom) {\n  // code\n};\nor\ngoog.ui.style.app.MenuButtonRenderer.prototype.createContentWithDropdown = \n    function(content, dom) {\n      // code\n    };\nAll of which pass JSCS and, IMO, are a tad clearer. Either way, this will be fixed in a later version.\n. Right, those were just examples. Leave it open so I can reference this later. Thanks again!\n. I'd like to see separate rules for this. We as a rule attempt to avoid monothilic options configuration when we can.\n. @sgtpooki, I agree wholeheartedly about the need for DRY code, however keep in mind that those are implementation details vs. public API. You could create a block of code that does all that you ask using an monolithic config objects and NOT expose it to the public API and have a public API that just delegates to your code. \n. Closing due to inactivity. If we want to move forward with this, I suggest different rules for each of these requirements.\n. Seems as if this rule needs a lax option that just requires anything but /\\w/ (that is to say, any word character) after the //. This would solve all of the use cases so far.\nAnother way would be to provide an except option that would allow you to enumerate an array of strings that an exceptions.\nThe second way sounds more like what we typically do :). @mrjoelkemp, thoughts?\n. I don't need to agree :-). You gusy have the right answer already \n. Other than the one comment I mentioned, this looks good. @zxqfox can you make the changes and rebase so I can land this?\n. I'll fix this last piece myself, and land this now.\n. Thanks!\n. Thanks!\n. Moved.\n. Yup, will be autofixed. \n. Thanks for contributing! \nWhile I like the idea of these rules, I'm not so sure we have the capacity to support all of the options and edge cases guard clauses introduce.\nIf you'd like to publish these rules outside of the official JSCS repo, we would gladly link to your rules, but for now, I'm not sure if these belong in the main JSCS repo. Closing for now, but I'm open to discussing further.\n. I assume you're on a windows box? Make sure you check out the code with the right line endings.\u00a0\u2014\nSent from Mailbox\nOn Thu, Aug 28, 2014 at 7:02 PM, Joel Kemp notifications@github.com\nwrote:\n\nWhat's the output if you just run mocha?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/600#issuecomment-53818486\n. rm -rf your node_modules for and npm install again. You'll need new tests that test the output here. Thanks again!\n. Now that this PR is passing, please add tests to cover the code you added. Thanks again!\n. Also, please change the ^ to ~ in package.json\n. Well, we can ADD the duplicate rule, and deprecate (but not remove), now. We just can't remove the old ones until 2.0.\n. This feature hasn't been released in a stable version yet. We'll be releasing soon!\n. @koistya, yes, there is, but not from CLI currently. \n. To be clear, things like JSXCS do this already, but you can provide any parser you like to the Checker constructor as the esprima option, and it will use that parser to check the code. \n. options.esprima is the first part of the conditional, which means if you pass an object as the esprima option it will use it.\n\nBut, like I mentioned, that isn't available from cli yet, just from the actual Checker constructor.\nThe question isn't \"how\" to add jsx support, but rather \"whether\" to add it, or if it's more suitable for a plugin or other package that uses JSCS, like jsxcs. \n. Thanks for contributing, but you have some unit test failures and you need new tests to support the new functionality. I'll review when those are updated. Thanks again. \n. Even though I made a lot of comments, please stick with this so we can land it. You still need to add unit tests supporting your changes, and a test for the code you added to token-helper. I know we don't currently have a test that tests token helper directly, so please add one.\n. @SgtPooki still interested in fixing this?\n. @SgtPooki ping!\n. Closing this for now due to inactivity.  @SgtPooki I'll gladly reopen when you respond if you're still interested.\n. @markelog reopened it so that when I abstract tabSize out of a specific ruleset and into config like dialect, I know which rules to modify, including this.\n. @markelog you can reclose.\n. Awesome work here @markelog, just a few edge cases to discuss. \nI think its fine that we miss with({}) and object declarations in for loops. Perhaps we can just file that as a future bug. But we need to cover \\n}) vs ( function() {} ), in that single line objects or fns still require a space. That's if we want 100% jQuery compliance. \nHowever, I think its a bigger deal to specify the tokens rather than the node types. Users need to be able to disambiguate member from array.\nThat is to say }) is only allowed as part of a multiline expression.\n. > Can you give me more verbose example?\naccording to http://contribute.jquery.org/style-guide/js/#objects and http://contribute.jquery.org/style-guide/js/#arrays-and-function-calls, following are both valid:\n```\nfunc( { inline: 'object' } );\nfunc({\n  inline: 'object'\n});\n```\nboth the following are invalid:\n```\nfunc({ inline: 'object' });\nfunc( {\n  inline: 'object'\n} );\n```\n. > That would complicate rule couple steps up, since then user would be required to know esprima AST. There is couple of ways to avoid that, but i'd like to await if someone will stumble on it.\nThat's fine, as long as it covers the correct exceptions in jQuery, similar to may previous comment:\nvalid:\nfunc( arr[ 0 ] );\nfunc( [ 1, 2, 3 ] );\nfunc([\n  1,\n  2,\n  3\n]);\ninvalid:\nfunc(arr[ 0 ]);\nfunc([ 1, 2, 3 ]);\nfunc( [\n  1,\n  2,\n  3\n] );\n. var html = \"<p>The sum of \" + a + \" and \" + b + \" plus \" + c +\n    \" is \" + (a + b + c);\nis now wrong. There is no longer an exception for that.\n. If any of this isn't in the bug tracker or the official style guide, @scottgonzalez we need to file them as bugs.\n. > this is sole object argument, so no spaces\nbut even still, then:\nvalid: \n```\nfunc( a, { obj: 'whatever' } );\nfunc( a, { \n  obj: 'whatever' \n});\n```\ninvalid:\n```\nfunc( a , { obj: 'whatever' });\nfunc( a, { \n  obj: 'whatever' \n}  );\n```\n. > I can update the style guide to cover every possible case if that would make you happy\nYes please from me too. The goal here really @scottgonzalez is to fully document our style guide so that contributors can follow it, a machine can validate it, and so you and I as maintainers can stop thinking about it.\n. @scottgonzalez , all that needs to change is:\n// Function with a callback, object, or array as the sole argument:\nbecomes\n// Function with a callback, multiline object, or multiline array as the sole argument:\nin the 3 examples.\n. > @mikesherov let's hold on on this change and release 1.6 until we clear how we should pursue this further\n:+1: Yeah, I also agree that we bit off a bit more than we can chew with 1.6. Let's get it out the door, and I'll work with @scottgonzalez to get the style guide completely fleshed out so you have a canonical reference for 1.6.1.\n@markelog is the current master ready for a 1.6 release?\n. @markelog OK, I'll release then.\n. https://github.com/jquery/contribute.jquery.org/pull/88 /cc @markelog @scottgonzalez \n. @markelog ping! This really needs to get into 1.7, which I want to release soon. When will you have time to finish this up?\n. As long as this rule can be combined with the call expression rule to exactly specify the jQuery style guide.\nIf so, land it :)\n. LOL @mrjoelkemp !\n. Thanks! Landed in 79ff1098e9e964a524dc28a473705beec9ba686d\n. Hey @necolas, thanks for contributing! Our current stance is that we aren't implementing rules that are duplicative of JSHint, which corrects for ASI by default.\nWhile it may be suboptimal to have to use both JSHint and JSCS together instead of one linter, it allows both us and JSHint to focus on our specialties: JSHint for program correctness, JSCS for pure style.\nI'll keep this one open for a bit in case you'd like to make a case for its inclusion in JSCS, but it's likely to end up closed, at least until we revisit the \"style only\" decision \n. @necolas, exactly. That, and the fact the JSHint already covers it.\nFTR, we also currently shy away from complexity metrics because of JSHint as well. \n. The rule exists because some people write JS in ES5 only environments. Simply don't use this option if you need ES3 rules.\nAs Gustavo mentioned already, there are both stylistic and utilitarian reasons to require a trailing comma, so we include it. \nThanks for posing the question though!\n. @golyshevd, exactly, it's your opinion. I'll say again that there are valid stylistic and functional reasons for trailing comma.\n. @uglow, it's not an omission in the design of the language nor a VM quirk. It's a legitimate change made in ES5 specifically for the diff/minimal future change scenario.\nIt may seem weird, but reducing the noise in diffs is an important consideration for some code reviewers.\n. Thanks for contributing! \nThis is similar to safeContextKeyword rule and seems well fitted for JSCS.\nRather than having the rule infer bad variable names, perhaps it can have two options: minLength, and an array of banned names.\nThoughts?\n. In jQuery, we initialize loop vars in the onevar decl at the top. This is a byte saving technique as well as a stylistic choice. However, this compounds the problem further, as we don't even use the initialization clause of a for loop at all because we initialize in onevar.\nThis use case must be considered. \nThe easiest, least false positive way of doing this is ensuring that single letter vars are only referenced in any part of a for or do while loop. \n. Yup, we can do it!\n. @rxaviers to be clear, what specifically should be an error?\n. @avaly, thanks for contributing! Please rebase this branch, and also, rename the rule to (require|disallow)PaddingNewLinesInObjects\n. @avaly ping!\n. @avaly, thanks again... Landing now!\n. Thanks again!\n. Use null as the value. Thanks again for contributing!\n. @zxqfox, ES5 allows trailing commas in objects. \n@keithamus, good suggestion, and thanks for contributing. I'll mark this as open and help wanted so the community can help implement this.\n. Not replace, be in addition to.\u00a0Mike Sherov\nOn Wed, Sep 24, 2014 at 1:09 AM, Samuel Hodge notifications@github.com\nwrote:\n\nThis would replace the option added in #369\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/626#issuecomment-56625485\n. @Knotix likely but not gauranteed.\n. @corykrug, this issue is fixed in JSCS 1.7.3.\n\nHowever, I suspect this wasn't breaking for a lot of people considering Crockford's style is very different from the npm style.\n. Seems fine to land.\n. @mrjoelkemp yes, normal because the SHA technically changed. Just close the issue, and say \"Thanks. Landed in \".\n. Thanks again. Seems fine to land. \n. @necolas I was fairly certain we manually stripped that line: https://github.com/jscs-dev/node-jscs/blob/master/lib/string-checker.js#L229\nCan you tell me what version you're using?\n. Oh, I see, it fails with multiple line breaks disallowed.... weird. We should fix this. Thanks for reporting.\n. @necolas, can you try latest to see if its fixed there for you?\n. This looks good to me! Landing now.\n. Landed in 3505d482a86bf9e68c6d321823c8867d2c70e3a9 Releasing now.\n. https://github.com/jscs-dev/node-jscs/releases/tag/v1.6.2 Thanks again @necolas \n. When version 2.0 comes out, we will be able to generate this because we'll\nbe moving to declarative option configuration. Right now, everything is\nimperative, so it's hard to generate a default config.\nOn Thu, Sep 18, 2014 at 5:34 PM, Andrei Neculau notifications@github.com\nwrote:\n\nThat's fine, it's secondary, but can you list all options?\nIt's much easier to 1) see added options with each new release 2) get\nstarted with your own style (and then remove the noisy nulls).\nOn Thu, Sep 18, 2014 at 6:13 PM, Gustavo Henke notifications@github.com\nwrote:\n\nDefault value is null for every option, what means no lint will occur :)\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/636#issuecomment-56062897.\n\n\nandreineculau.com http://www.andreineculau.com\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/636#issuecomment-56106601.\n\n\nMike Sherov\n. @mrjoelkemp that's if you believe a config full of nulls is useful.\n. Lgtm to land after addressing comment.\u00a0Mike Sherov\nOn Sat, Sep 20, 2014 at 8:45 PM, Joel Kemp notifications@github.com\nwrote:\n\n@mikesherov Fine with this addition?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/pull/637#issuecomment-56284951\n. yes, we should deprecate in 1.7, remove in 2.0. However, we should discuss\nwhat needs to be in 2.0 at this point as progress seems slow.\n\nOn Fri, Sep 19, 2014 at 4:27 AM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nWhat you proposing is not deprecation, its removal. With semver, i guess,\nthat could be considered as major change, which should happen in 2.0. In\nany case, i would consider that only for 2.0.\nI would remove a bunch of rules for 2.0 and move them to plugin(s) under\njscs org. But i would remove only rules that are not used in presets. I\nthink presets should be stable no matter what.\nI will email to jscs-dev@ with details about this.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/638#issuecomment-56150160.\n\n\nMike Sherov\n. @mrjoelkemp, we've never \"properly\" deprecated a rule, and in fact it's one\nof our pain points that we don't have a mechanism by which to warn the user\nthat isn't also a style error.\nIn this case, we would just in 1.7, strike the rule out in the\ndocumentation, and link to jscs-jsdoc\nOn Fri, Sep 19, 2014 at 8:18 AM, Joel Kemp notifications@github.com wrote:\n\n@markelog https://github.com/markelog I couldn't find examples of truly\ndeprecated rules. The other \"deprecated\" rules\nhttps://github.com/jscs-dev/node-jscs/pull/638/files#diff-c4ec64ef009f51578bddc596b5b6ddc2R42\nare also removals (perhaps removed in the major bump to 1.0, I'm assuming).\nIs there an example of how we properly deprecate a rule? Thanks in advance.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/638#issuecomment-56169654.\n\n\nMike Sherov\n. LGTM to land. \n. @andreineculau we're going to close this for now, please reply if you still think there's an error, and include the config your using, and the actual code causing the issue.\n. I don't think we need this test. There are sufficient tests covering the exact situation described.\n. LGTMMike Sherov\nOn Sat, Sep 20, 2014 at 8:15 PM, Coveralls notifications@github.com\nwrote:\n\n\nCoverage remained the same when pulling 8263b4581b77767080db57914ec8a54da18d1d46 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/pull/643#issuecomment-56284457\n. One slight tweak. Our rules try to use standardized node names to describe the rule. In this case, it would be called (require|disallow)SpacesInCallExpressions.\u00a0Mike Sherov\n\nOn Sat, Sep 20, 2014 at 3:21 PM, Joel Kemp notifications@github.com\nwrote:\n\nHey @Skywalker13. Thanks for contributing!\nThis rule sounds totally feasible. A more appropriate name (similar to other rules) might be (require|disallow)SpacesInFunctionInvocation.\nWould you like to implement this? To get started, you can iterate over all CallExpressions and assert that there is a (or many) spaces.\nLook at the following rules (within lib/rules) for tips on how to structure your implementation:\n- https://github.com/jscs-dev/node-jscs#requirespacesinfunctionexpression\n- https://github.com/jscs-dev/node-jscs#disallowspacesinfunctionexpression\n- https://github.com/jscs-dev/node-jscs#requirespacesinnamedfunctionexpression\n- https://github.com/jscs-dev/node-jscs#disallowspacesinnamedfunctionexpression\n  Feel free to ask questions if you need help or get stuck. We're more than happy to help.\n  If you would like more information on getting started, we're currently working on making our Contributing.md documentation more helpful. Here's an early peek at the work in progress: https://github.com/mrjoelkemp/node-jscs/blob/contributing/CONTRIBUTING.md.\n\nReply to this email directly or view it on GitHub:\n  https://github.com/jscs-dev/node-jscs/issues/644#issuecomment-56277587\n. I don't think it matters whether we think about TODO's being good or bad.\nAs maintainers of JSCS, we only need to consider cost of maintaining said\nrule, whether or not the rule is a style rule or not, and whether or not\nthe rule will be popular enough to belong in core.\n\nWith that said, I think the maintenance costs for this rule are low if we\nspecifically confine in a set of case-insensitive string prefixes, I think\nthis is a fair style guide rule, and think it has a shot of being popular.\nI think it's fine to include.\nOn Tue, Sep 23, 2014 at 5:01 AM, Joel Kemp notifications@github.com wrote:\n\nHey @pomeh https://github.com/pomeh, thanks for the awesome suggestion!\nI have mixed feelings about this rule as I personally think TODO-like\nannotations in codebases are a good thing.\nI also think that this rule has the potential for a lot of false\npositives. This could be remedied with regexes, but 1) you're offloading\nthe work to the end user and 2) the regexes would have to bank on\npositioning, casing, prefixed and/or postfixed characters to better\nguess what's an actual violation.\nI think this would be best served as an external plugin, but I welcome the\nopinion of @mikesherov https://github.com/mikesherov on whether or not\nthis should be in the core.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/646#issuecomment-56492344.\n\n\nMike Sherov\n. ping @joesepi . If you're interested, I'll mark this rule for 1.9, otherwise it goes to the 1.later bin.\n. @joesepi no cutoff date at the moment. But would be great in the next couple of weeks.\n. LGTM.\n. This should be closed in favor of https://github.com/jscs-dev/node-jscs/pull/649\n. Thanks!\n. Well, not zero, but see if the comment is the firstTokenOnLine or not. \n. What if two sets of grouping parens are used? Does the fix address that?Mike Sherov\nOn Wed, Oct 1, 2014 at 5:38 AM, Denis Rechkunov notifications@github.com\nwrote:\n\n@drublic @jbesta Are you sure we need to make our code ugly because of bug in tool that should help us to make code better? As I see this bug has been fixed in referenced pull request.\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/652#issuecomment-57440381\n. sure, add this test:\n\nassert(checker.checkString('var x = { a:((1 > 2) && 3)};').isEmpty());\n. rename to requireCapitalizedComments and also provide disallowCapitalizedComments, please.\n. @Nijikokun thanks for contributing! What rule is this specifically about? Can you clarify what you would like to allow vs. not allow?\n. @lhjarb, we currently aren't duplicating rules that are in JSHint. This is an issue of program correctness. Our policy is to remain about style, and let JSHint deal with program correctness / best practices.\nClosing for now, but willing to hear arguments against this decision. \n. Oops, meant @ljharb! P.S. thanks for contributing!\n. @markelog next release must be 1.7 because I purposely relaxed the validateIndentation rule.\n. LGTM to land\n. Not currently. We would resolve this by making an option for\ndiasllowSpaceAfterObjectKeys to ignore either single line objects or multi\nline objects.\nOn Wed, Oct 1, 2014 at 7:58 AM, Thijs Busser notifications@github.com\nwrote:\n\nI have the rules requireAlignedObjectValues and\ndisallowSpaceAfterObjectKeys both switched on but this resulted in a\nconflict. I want to make sure that when an object with properties is\ndeclared that the object values are aligned like this:\nvar obj = {\n   propShort    : 'short',\n   propLongName : 'long'}\nBut when declaring an object with params on a single line I don't want to\nallow spaces after the key.\nGood:\nvar obj = {propShort: 'short', propLongName: 'long'};\nBad:\nvar obj = {propShort : 'short', propLongName : 'long'};\nIs there anyway I can establish this with the current rule set?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/663.\n\n\nMike Sherov\n. But the maximum error is a property shared by each instance. Storing it as a property on the constructor seems completely fine to me.\n. > Would like @mdevils opinion on this, especially considering static properties\nCan you provide a solution that doesn't involve a large rewrite? The only other alternative I see is creating an errorCollections object which contains the errors objects for individual files.\n. > No, but maybe we should try a rewrite? Or maybe not, i just fear that is far from what we tried to preserve.\nSo I suppose we should wait for @mdevils to weigh in here? I'd like to get this landed soon, and doing a rewrite for this now seems less than ideal.\n. > This is a very dangerous default behaviour as it completely breaks compatibility with all CI tools and integrations.\n\nCI reports should include all errors. Sublime (and other editor plugins) expect the same: all errors reported.\n\nWe should have a default of Infinity. But having the ability to specify a max is expected functionality of all linters.\n\nI suggest reconsidering this feature. I believe we need a discussion.\n\nI asked several time for feedback on this feature in particular. The only thing that's changed is the default of 50, which should be reconsidered.\n@mdevils also, @markelog wanted to know your thoughts on the \"static\" property of maxErrors. Can you comment on that so we can resolve this?\n. On Wednesday, October 8, 2014, Marat Dulin notifications@github.com wrote:\n\nWe should have a default of Infinity. But having the ability to specify a\nmax is expected functionality of all linters.\nI totally agree. I'm not against this feature. I'm only against the\nproposed default.\n@mdevils https://github.com/mdevils also, @markelog\nhttps://github.com/markelog wanted to know your thoughts on the\n\"static\" property of maxErrors. Can you comment on that so we can resolve\nthis?\nI checked out the code. I'm agree with @markelog\nhttps://github.com/markelog. This property is run-specific and should\nnot be static. I propose to put it in the constructor.\nThe constructor of which object?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/664#issuecomment-58341060.\n\n\nMike Sherov\n. this LGTM to land after small nit about return type of add\n. Not my cup of tea, personally.\n. OK, my objection is not a big one. Add it if you'd like.\nOn Mon, Oct 6, 2014 at 10:05 AM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nI think that if someone needs a feature so much, then no problem if such\nperson wants to pay for it.\nagree\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/667#issuecomment-58021278.\n\n\nMike Sherov\n. > I'm sure @mikesherov cries a little when he sees validateIndentation\n\nenhancements :)\n\nQuite the opposite! @birkestroem thanks for contributing. My only concern, and it's a minor one, is that a user can do the following and it's still broken (although I don't know who would do that):\nif(\n  something()) {\n  ...\n}\nAny thoughts on whether we need to address that?\n. I think this is a fair assumption to make, so I'm going to land this as is. If someone submits a bug report when:\nif (\n  ImACrazyPerson) {\nis broken, we'll deal with it then.\n. Thanks again!\n. Would love to see how this gets used in Checker and StringChecker. Seeing an implementation would help me review. Looks great so far.\n. This seems far more confusing to me than the other pull request. The math and reaching into prototypes of parent simply to avoid a shared value between error instances seems like unnecessary contortion.\nFurthermore, this unnecessarily checks each file even after the limit is already hit.\n. Still, I think this implementation IS cleaner than the @mrjoelkemp version.\n. Seems like we just need to resolve how to display the maxError message. Release tomorrow?\n. Any error we could report as a style violation is better than any error we report only in some reporters or as exceptions.\nBy reporting the 51st error as a line violation would allow us to stop early without having the user possibly not see the reason why.\nIn this way, we can be confident in lower the default max error without leaving our users in the dark. We could change the default, and be confident users would know how to fix it should they want to disable maxErrors. \n. According to our release semantics that we agreed upon:\nMinor Release:\n- Modifying rules so they report less errors, and don't cause build\n  failures.\nTherefore, it is perfectly acceptable to reduce maxErrors to whatever\nnumber we feel is appropriate in 1.7. We do not need to wait for 2.0 for\nthis\nOn Tue, Oct 14, 2014 at 8:44 AM, Marat Dulin notifications@github.com\nwrote:\n\nI agree with @mikesherov https://github.com/mikesherov about reporting\nstyle about this error.\nBut right now I'm talking about current CI-integrations and Instruments\n(like Sublime integration) which expect all errors to be reported. For them\nchanging this option value from Infinity to something else will be a\ncompatibility breaking change.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/673#issuecomment-59036518.\n\n\nMike Sherov\n. > Modifying rules not options.\nThis is a difference without a distinction. The effect is the same.\n\nLet's agree on change the default for 2.0 and discuss whole run vs individual files?\n\nFair enough.\n. https://github.com/jscs-dev/node-jscs/issues/681\n. This is duplicative of JSHint. \n. For reference: http://www.jshint.com/docs/options/#bitwise\n. What's the \"grouping case\" that you're having trouble with?\n. Grouping parens SHOULD have spaces. Another case of the documented style guide being wrong. :-/\n. Will do. \n. @markelog, I'm not sure I'm following. The exception on call expression isn't spread to grouping parentheses. Can you show an example of something that isn't catchable so I can understand exactly what you mean?\n. @markelog can you please provide some sample code for \"exceptions on call expressions are spread to grouping parentheses\" so I can sure we're talking about the same thing?\n. > Though I wonder about things like ({}).toString\nIf we had to do that, I'm sure no one would object to having to do: ( {} ).toString().\n. > @mikesherov if that possible, it would be awesome to talk with @ariya about this, i.e. finding some way to catch those grouping parentheses.\nYes, I definitely will, but I don't understand the problem fully, which is why I've been asking what the problem was specifically, so that I can explain it to @ariya well.\n. > something && ( { a: \"alpha\", b: \"beta\" } )\nthis will never be written, so there's no problem :-)\n. > It's possible with the semantics of the language whereas Murphy's law says it's gonna happen if it didn't already.\nWhen someone reports a bug against it, we'll fix it then\n. @markelog landing this: https://github.com/jquery/contribute.jquery.org/pull/93 so you should be all set to land this PR.\n. Looks like this rule can be drastically simplified now that https://github.com/jquery/contribute.jquery.org/pull/104 has landed. ping @markelog \n. Well, sorry for making you do this work... Let's close this then. Reopen if you disagree!\n. Lastly, is --harmony a good flag name? Originally, I was going to call it --es6 but I want the option to be future proof once we start landing experimental ES7 support ;-)\n. Ah, how about --esnext?\n. > We could publish it.\nI'll publish this soon. esprima-harmony-jscs\n@mdevils, have you seen my comment? Was curious if your ok with keeping it the way I have it given my reasoning. Also, was curious about the flag name. \n. Sorry. Missed the notifications. Looking now. \n. @lukaszfiszer , I'll definitely fix this, but do you feel like \nvar el = linkFn(scope, function() {\n            });\nis clearer than\nvar el = linkFn(scope, function() {});\nSeems to me to be a big edge case. Either way, thanks for reporting.... will be fixed soon!\n. Yup, thanks for the context. Fix should be landing very shortly!\n. This is fixed in the 1.7.1 which I just published. Thanks again for finding it @lukaszfiszer !\n. Thanks for contributing, @aaronmars! We'll have a fix out for this in the AM. \n. It'll be out shortly\n. Ring the bell! We have our first esnext bug report! @ffesseler I'll look into this tomorrow AM and thanks for reporting!\n. @ffesseler this is caused by https://code.google.com/p/esprima/issues/detail?id=440 . We'll work with the ESPrima team to help resolve this soon.\n. @ffesseler you can always disable jsut that specific rule as well\n. @ariya, just pinging you in case you haven't yet seen the bug I've reported for this issue: https://code.google.com/p/esprima/issues/detail?id=440 \n. @ariya, any chance the fix for this can be ported to the harmony branch?\n. Separate issue. Please file a new one, thanks!\n. @danez fixing this now. Should be done shortly.\n. We'll be releasing 1.10 shortly. Thanks for the patience!\n. @MoOx are you sure you're using 1.10 and the --esnext option?\n. Thanks for contributing! This PR is not quite right. You should not have to modify the test expectations. Rather you should be adding a new test case for when there are no break statements, and the code should not set the breakIndents property in that case.\n. @yangsu thanks again for contributing. I went ahead and landed a different patch, but thank you for showing me where the error was sort of located.\n. @gustavohenke I'll add your unit with @ffesseler's fix. Thanks to both of you!\n. @ffesseler thanks again!\n. Wil release when I get home.\nOn Thursday, October 16, 2014, Gustavo Henke notifications@github.com\nwrote:\n\n@mikesherov https://github.com/mikesherov Any prevision about a new\npatch release?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/688#issuecomment-59384800.\n\n\nMike Sherov\n. 1.7.2 released! https://github.com/jscs-dev/node-jscs/releases/tag/v1.7.2\nOn Thu, Oct 16, 2014 at 6:30 PM, Mike Sherov mike.sherov@gmail.com wrote:\n\nWil release when I get home.\nOn Thursday, October 16, 2014, Gustavo Henke notifications@github.com\nwrote:\n\n@mikesherov https://github.com/mikesherov Any prevision about a new\npatch release?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/688#issuecomment-59384800.\n\n\nMike Sherov\n\n\nMike Sherov\n. @sylouuu, JSCS looks at the first break statement it encounters in your code, and uses that as the standard for the rest of your code. Do you have an indented break anywhere in your code?\n. Yes. maximumLineLength.\n. Thanks again! Just a few minor nits and this looks good to land. \n. @zxqfox, @markelog, no need to change it (we'll change it when we merge), but it seems odd to require \"value: true\" just for some subjective notion of consistency. Can we have it the way it was with just the except?\n. How about allExcept considering the rule name already says \"require\"?\nAnd then we could use this for the new format as well: always have allExcept and only as option types when needed. \n. > We would need add only to disallowSpaceAfterLineComment so they would complement each other, \nNot true. Both \"require\" and \"disallow\" can have both \"only\" and \"except\", it all depends on the rule. In this case, \"except\" requires space after all comments except the provided strings , only would require spaces after the tokens listed. \n. @zxqfox, use allExcept and get rid of value for now. \n. A couple of questions we must answer:\n1. How does a user nullify rules?\n2. How can we make sure this config lends itself to automatic configuration?\n. Yes, #341. \n. More questions:\n1. How does the new format handle \"require spaces around only + but disallow spaces around all except - ?\"\n2. How does the new format handle \"jQuery preset but disallow spaces inside parens instead of require\"?\n3. How does the new format handle validateIndentation?\n4. How does the new format specify validateParameterSeparator, or any rule where \"around\" isn't adequate for spacing?\n. Just a thought... Instead of\n{\nrequire: true\ndisallow: true\nonly: []\nexcept: []\n}\nWhich doesn't seem to allow for \"require spaces around only + but disallow spaces around all except - \", we do:\n{\nrequire: true || { except|only: [] },\ndisallow: true || { except|only: [] }\n}\nWhich would cover \"require spaces around only + but disallow spaces around all except - \" as follows:\n{\nrequire: { only: ['+'] },\ndisallow: { except: ['-'] }\n}\n. > but as pointed out there it doesn't prevent conflicting rules like the format in #182 does.\nKeep in mind conflicting rules aren't always conflicting. I could require space between + and disallow -. \nAlthough, if there is a rule that should be only require XOR disallow, we could enforce that at engine level, as @markelog described. \n. Also, we should standardize on singular instead of plural for everything.\n. @markelog, you know I agree, because I brought this up a long time ago. I even suggested it should be an array so that you can load a preset and some other additional rules. \n. Just wanted to drop a note that the \"2-level\" approach to configuration here means:\n1. the way plugins and getOptionName work needs to change.\n2. the way enable/disable comments works needs to change.\nI'm not sure again as to the benefit of having 2 levels for rules. It introduces the question of what belongs in the top level vs. the bottom level.\nIf the options are all normalized, simplified (meaning combining beforeAndAfter and require/disallow) and some names shortened, 1 level looks fine too IMO:\n\"binarySpacing\": \"require\",\n\"unarySpacing\": { require: { allExcept: \"++\" } },\n\"curlyBraceBlocks\": \"require\",\n\"curlyBraceNewlines\": \"require\"\nJust something to consider.\n. @UltCombo, thanks for contributing. If you could look into this issue, it would be very helpful. I don't have a windows box to test on :-\\\n. > JSCS shouldn't interfere with the supplied object.\nNeither should the gulp plugin ;-)\nBut all kidding aside, deleting of that option is no longer needed because esnext is now a proper cli option.\nThere is also a PR open that will make our configuration sane, and not rely on our current craziness.\n. @mdevils, can you make sure this is addressed with your configuration rewrite?\n. Thanks for reporting, @qmmr. I'll look into this soon. \n. @qmmr, please also post the config you're using. \n. Nothing yet @yamalight \n. @yamalight @lencioni @qmmr I can no longer reproduce this. It appears to have been fixed by: 0c4628203a503575db2e6f4a2f6cc13e87a97a37 after doing a git bisect. Closing this, but please let me know if you're not seeing the same results in master.\n. Thanks for contributing and cleaning up the test files! One small nit while you're in there cleaning up... Can you add a newline before each it? Thanks!\n. @eltacodeldiablo looks good. Will be landing some PRs today and this will likely get in.\n. Seems like you want this for now: https://github.com/orktes/node-jsxcs\n@mdevils, @markelog, @mrjoelkemp thoughts on if we'd like to support this?\n. The correct solution IMO, is to add a config option (I hinted at this when I landed passing custom esprima to the constructor) that allows you to specify a path to the parser module:\nat the cli:\njscs --esprima=\"./node_module/esprima-fb\"\nin .jscsrc:\n{\n  esprima: \"./node_module/esprima-fb\"\n}\n. @zxqfox, what mdevils said. Perhaps in the future, the Parser API will be extended to include tokens. When that day comes, perhaps we'll change the name ;-)\n. @zxqfox correct, but a majority of the use cases now are for static analysis, which occasionally requires more.\n. Thanks for contributing!\nThis is not an issue with JSCS, but rather the react transform tool stripping comments. Should we decide to support using your own parser from CLI, it'll be the users responsibility to ensure the transformer doesn't strip comments.\nTherefore, Im closing this for now\n. Also, there needs to be tests for this, and as well, you need to actually add the esprima option to the bin/jscs\n. Thanks again @koistya. I appreciate the effort you've put forth here.\nInstead of looking for a string type in constructor, you should follow the conventions we have for new options: it needs to work from both .jscsrc and the cli, it needs a module to consume the option and remove it off of the config option, and then you need a set of unit tests to make sure your change works.\n. It's definitely something we'll be merging. However, there are still a few nits to work out. \nEither way, you should write tests anyway because we know what the external API already is, and it will help us review what work you've done. \n. @koistya, thanks again for contributing! Please write the following tests before I review again:\n1. --esprima option to the cli.\n2. esprima as an option in .jscsrc.\n. @koistya, thanks. Now you just need to add a test for the cli option (which will fail) and jscsrc option. \n. > I'm wondering, why does this unit test fail with Error: timeout of 2000ms exceeded\nMaybe has something to do with setting isTTY unnecessarily?\n. @koistya thanks for sticking with this.\n. @koistya perhaps it's because you haven't added any rules?\n. @koistya, no worries. I'll take it the rest of way. Thanks again for contributing!\n. Was waiting for config to land. Will pick this up tomorrow. \n. @koistya Thanks again for contributing! I landed a modified patch here: bdc5ff08020072b4b0f77e1877af2eaf64cfd6fa Still giving you the credit though as you did a majority of the work. Thanks again!\n. Thanks for contributing! What version of JSCS are you using?\n. Hooray!\n. @devdoc, thanks for the research. @markelog, I think we should remove validateQouteMark in light of this. \n. Thanks for contributing! \nAny editor that has support for JSCS should also have \"trim trailing whitespace on save\" support. If your editor doesn't have that option, consider getting a new editor ;)\nFor that reason, we won't be adding this exception.\nIf you still feel strongly about this, please respond with some valid use cases other than the one you've stated. \n. > Would the maintainers be open to the idea of a PR that added this option?\nSure. Send a PR and we can bikeshed from there!\n. @mrjoelkemp, nice work! Need a CLI option too, right?\n. :+1: LGTM to land.\n. Great work Joel!\nOn Saturday, November 15, 2014, Joel Kemp notifications@github.com wrote:\n\nYay! Thanks for reviewing, all.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/728#issuecomment-63192574.\n\n\nMike Sherov\n. Thanks for contributing? Are you using the esnext option?\n. Thanks again. This is a know dupe and a bug in esprima that we're patiently waiting to be fixed. Please let us know if you have other issues with the esnext option.\n. We've tried to tackle this so many times :-. There's really not any great way to handle this unless we remove the line because Esprima currently explodes when it encounters: #!/usr/bin/env node. I think the best way to handle this is upstream in esprima. Thoughts, @ariya?\n. @ariya, we could. But then, what if someone is using the \"require new line before comments\" rule? Then they will get a violation there... Not sure the best way to handle it.\n. Yeah, i see your point now, @ariya. Probably best to do as you say and convert it on our end to a comment, and make that one rule smart enough to handle it.\n. My concern is augmenting the token list in any way, but I suppose that's less bad than removing the line. Thanks again for the insight!\n. requireSemicolon is currently a JSHint rule, which we're currently not duplicating. Also, if we were to do it, I believe that's just a setting in the parse command of esprima. \n. @christophercliff thanks again for contributing! Please let me know if you can rebase this and make the requested changes. If so, we can land this today and it will go out with 1.8!\n. @jacksonrayhamilton care to comment why?\n. @jacksonrayhamilton thanks for contributing. JSCS is an unopinionated style validator. Regardless of your or my personal opinion, it is possible to write valid javascript without most semicolons.\nTherefore, we intend to serve the community and provide this functionality which is present in several major style guides.\n. Just FYI for anyone else who stumbles across this issue and wonder why it was locked.\nASI is often considered a controversial JS topic. We take the position that any style rule that appears in a major style guide is fair game for JSCS.\nThis issue is locked otherwise we risk people resorting to name calling and vitriol. That is not productive. \n. @christophercliff thanks again!\n. Good catch! Would you like to try supplying a fix for this? If not, I can take it, but we like giving bug reporters a chance to fix it themselves too. \n. Yes. This is a dupe. Will provide the link there. \n. https://code.google.com/p/esprima/issues/detail?id=440\n. @jimmyhmiller when a new version is released. Which should be in the next few days.\n. Thanks for contributing! What version of JSCS are you using?\n. @wzrdtales, thanks for contributing! I need more context than that please. \n. @cowwoc have you tried master? Let me know if this is still an issue on master\n. Confirmed this is still happening in master. I suppose that braceless, non single line control structures should make a fake indent... sigh :-\\\n. Actually, it's just not going to check the indentation of the braceless else, same way it ignores indentation for all control structures with 1 child. Fix incoming.\n. What I would prefer over this is a new standard for AST that links to the token list and adds whitespace to it so that all tools have a lossless standard. Attempts at a \"CST\" have been done before but failed.\nAlso, ESFormatter already uses rocambole, which currently is the gold standard of augmented ASTs IMO. \nI'd prefer we'd all work together on that instead instead of giving people more unnecessary choice and fragmentation at every layer of decision making.\nJust my 2 cents here.\n. Yes, I agree in spirit. All I'm saying is that I'd like a more unified community effort here.\nJsFile is cool in that it does both data transformation and provides utility methods.\nThe data structure mods is something we should try to work with producers and consumers of AST on. Esprima and acorn would benefits if they can pass a data structure to escodegen and other consumers of an AST that also contained info on what resulting code should look like. In fact, our autoformat API's last step should be sending a lossless data structure to escodegen for printing. Everyone would also benefit from a format that makes style rules easy to write.\nOn the utility method side, it would be nice to collaborate with rocambole to achieve best in class utility methods. Not saying we need to right now, but I'm also for less fragmentation and getting everyone on the same page. \n. @mrjoelkemp \"formally standardized\" in the sense that the current AST is, which is to say a \"community standard\".\n@ariya and I and several other interested parties in this space have already begun talking on next steps, and should have something more concrete (excuse the pun) soon to discuss. At that point, we bikeshed and make sure it fits everyone's use cases. The goal is minimal change to the current data structures while providing a lossless data format that is suitable for codegen, static analysis, and style detection all at once. It may be as simple as making the token list include whitespace and comments, link it to the current AST, and that's it. We'll see!\n. Template strings are not yet supported. Leaving this open until then.\n. Looks like harmony now supports this. Investigating soon.\n. Is due to this bug after investigating: https://code.google.com/p/esprima/issues/detail?id=632\n. @kristerkari, I've fixed this in Esprima. Just waiting to get it merged. This should be resolved in JSCS 1.12\n. Also, I feel like the errors object should have an assertion object for clean separation of responsibility: errors.assert.spaceBetween(token, token, 0, message)\n. I like the plan, especially abstracting away logic into assertions so that the underlying token list, etc. can change without disrupting the rest of the codebase.\n. :+1: to this approach\n. When you get to number 5 of the plan, I'd like to collaborate with you and @ariya about this to see if there are changes in Esprima and the AST / token format to make things easier\n. I think we should defer the fixing of JsFile to later, and continue focusing on landing the assertion library. \nThat way we can finally get to autoformatting which is clearly becoming the most desired feature.\n. I agree with @mrjoelkemp 100% and I think everyone agrees also.\nI have no opinion on when the bounty is awarded personally.\n. LGTM\n. @rvanes we're going to stick with keeping in core JSCS for now.\n. @mdevils @markelog is this safe to land?\n. Awesome work!\n. Definitely an issue. I'll look into it.\n. @lahmatiy, thanks for contributing! Your test file is named incorrectly. It should be test/extract-js.js. Our coverage tool only counts coverage on a file for the tests written for a file and does the matching by filename. \n. @Lucas-C thanks for contributing!\n. Good work! I don't think we need a new option value here. @mrjoelkemp already stated that he considers this a bug. \n. It does parse @mrjoelkemp . The demo you linked to had an illegal return statement. Here's the updated link: http://esprima.googlecode.com/git-history/harmony/demo/parse.html?code=function%20hi()%20%7B%0A%09return%20%7B%20foo%20%7D%3B%0A%7D\n. https://github.com/jscs-dev/node-jscs/pull/992 ;-)\n. LGTM\n. @zxqfox can you remove the rule from all presets, and mark it as deprecated in it's docs? We can move the multi preset discussion back to #109 where it belongs. Thanks!\n. The correct solution here is to not use the token list for the function keyword and instead iterate all functionDeclaration nodes instead.\n. jQuery has the opposite convention. So both rules are needed. Filing a ticket now.\n. https://github.com/jscs-dev/node-jscs/issues/807\n. Locked this one so new discussion can happen on the new ticket.\n. Locked this one so new discussion can happen on the new ticket.\n. @mrjoelkemp I readded the preset integration tests.\n. @mrjoelkemp I'll land this PR too.\n. @mrjoelkemp I can't reproduce this error. Although the use of the rule is deprecated, I'd like to see a failing test case first. Do you have one lying around?\n. @markelog true, that's a good point\n. Well, actually, depends if this is truly a bug or not.\n. Thanks!\n. Thanks!\n. No objections to this. However, I'd like to see assertions land first. Then we can cut 1.8 and perhaps I can take a first stab at auto fixing?\n. @Krinkle I'm going to close this for now. If anything, this is either a bug in esprima or npm. We just made a copy of the existing esprima harmony parser for sanity's sake. \n. Not much we can do here. I suggest filing an issue with esparse or npm.\nWe've never been able to get a reliable repro, which would help a lot. \n. Thanks for contributing! The validateIndentation rule doesn't validate function call argument indentation. \n. However, I plan on introducing indentation rules for function calls, arrays and objects in 1.9. \n. :+1:\n. Set the value to null in your config. \n. Thanks!\n. LGTM. The assertion should be lenient once new lines are involved. \n. I think we should land this soon and release 1.8.1 in case of regressions. Thoughts?\n. Thanks again @hzoo ! 1.8.1 released as well\n. Yes, I believe there's even already an issue for this option. Basically, you wanted to be able to ignore the rule when the literal is a single line, right? I'd gladly accept a PR for this. Thanks @mzgol !\n. @mzgol that's a good rule, although I think it would be a bit more robust to say that collapsed is last element on same line as closing brace AND more than one element per line. Thoughts?\n. Not essential. We could always bikeshed that later, too.\n. @zxqfox I think so. The goal here is that this way, we don't need to wait for rule simplification / Config format changes / declarative option specification to move forward.\nWe get the ability to allow users to configure JSCS with never even looking at the config file.\nEventually, JSCS will have consolidated rules and we can take auto configure further by running through every rule and running require / disallow from each rule. The code written here to get us started down that path will not be in vain.\n. Great work here so far @zxqfox. I have a few comments:\n1. The options here seem like they are anticipating people using them, but of all of the style guides we've implemented, none have rules about max per line. All say \"1 per line if the array is multiline\" if they say anything at all. Please correct me if I'm wrong, but that means we don't need a lineLimit option, at least not yet. The value should be hard coded to one. We'll create an option later if needed.\n2. With regards to the default for \"number of items before requiring 1 per line\", the answer seems to be infinity. That is, if the array is single line, no error. If the array is multiline, error whenever there isn't one per line.\n3. With regards to \"new line after opening brace and closing brace, call that option \"ignoreBrackets\" which would allow the bracket to be on the same line as the first element and the closer on the same line as the last element. This should be a relaxing option, meaning it only suppresses errors and doesn't enforce one way or the other. \n. My other comment is the that these are \"elements\", not \"items\". Please update all terminology accordingly. \n. @zxqfox yes, exactly.\n. @indexzero sure, but that's really what /* jscs disable */. I'd prefer to keep options to a minimum until there is sufficient user demand to add it.\n. @ljharb, thanks for contributing as always. No IIFE ever needs to be wrapped in parens. It's never a syntax error and solely a style thing.\nAs such, you're using conflicting rules between JSCS and ESLint. I'd suggest you drop one of your rules.\n. TL;DR: We can make this optional, it was feature parity with JSHint. Send a PR or wait for a contributor to pick it up.\n\nI've never seen \"IIFE\" apply to anything but \"function () {}()\" - why would the jscs rule apply to immediate \".call\" and \".apply\" calls?\n\nLegacy compat with JSHint. We could make this configurable, but that's where this check comes from.\n\nI could also do Function.prototype.iife = Function.prototype.call and then jscs wouldn't catch it.\n\nAh yes, the perils of static analysis :-)\n\nIt seems like jscs is overreaching here by detecting .call and .apply. Is that not special-case logic in jscs?\n\nIt is, but again, it came from feature parity.\n\nfunction () {}.call()\n\nJSCS will not compain if you do either: (function () {}).call() or (function () {}.call()). Crockford recommended the second one as a stylistic choice to make clear that you're returning the results of that call. I believe if you use (function () {}.call()), both ESLint and JSCS will be happy.\nWith that said, I'll gladly accept a pull request that makes .call and .apply style IIFE checking optional.\n. Thanks for contributing! Array and Object indentation checking was purposefully removed in 1.7, and will be reintroduced as separate rules in 1.9: https://github.com/jscs-dev/node-jscs/issues/806\n. @jdlrobson \nhttp://contribute.jquery.org/style-guide/js/#assignments\n. @jdlrobson if you'd like to take it, just coordinate with @indexzero first.\n. Yes.\n. Yes.\n. Hi @leigeber, thanks for contributing! Can you please post your Config and what you expected to happen that didn't? I'm not sure what the big is from your explanation.\n. case and default are not technically blocks. Man, do I hate switch statements! \nI suppose we should cover this case too...\n. LGTM minus the minor nits\n. Yes. I'll be landing a bunch of PRs the next few weeks and this will go with it. We can't release before 1.9 anyway. \n. @markelog, OK\n. There is already a PR open for this I believe. /cc @markelog?\n. @mdevils, please see the discussion in #161\n. @ljharb seems then the best way to handle this is to not add arguments and undefined to the reserved words list, but rather look for them specifically in this rule.\n. /cc @markelog @Krinkle \n. Could you check this please @mdevils? Just wanted to clear away some duplicated code.\n. @markelog I think we need to then amend our policy to make this clear, because this is literally the opposite rule of what everyone currently using the airbnb preset expects. I would expect this to not happen until JSCS 2.0 considering it's a change that would suddenly fail your build when you upgrade to 1.9\n. > I would say we need to adjust it, like if preset code-styles changes significantly we would release the changes only in major version.\nSeems like the same rules as before apply: if it makes less errors, minor. If it makes more errors, major?\n. You're missing the relevant parts:\n\nA bug fix in a rule that causes JSCS to report more errors.\n\nBug fix being the key word for minor.\n\nMajor release:\nPurposefully modifying existing rules so that they report more errors or change the meaning of a rule.\n\nThis preset change, IMO, falls into the idea of \"Puporsefully modifying existing rules so that they change the meaning of a rule\"\n. Agreed!\n. Yeah, coverage is down because I need to make some more explicit tests for this.\n. I thought that we still have some places where we assume es3, like allowing quoted object keys if the key is a reserved word. Is that not true?\n. /cc @mdevils, @markelog, @mrjoelkemp  review please? \n. @mdevils I toyed around with a single variable for which versions we need to target, and started off with your suggestion (I even had a getLanguageVersion function.\nAre there any cases where multiple discrete values matter? If not, I can go back to a single value.\n. @mdevils consider the following code:\n```\nfunction() {\n   'use strict';\n// with should fail ONLY in ES5 enviroments\n   with (window) {\n     getComputedStyle();\n   }\n// should fail ONLY in es3 environments\n  a.while = 2;\n}\n```\nShould both a.while and with (window) produce errors simultaneously? Meaning,  should you be able to specify that you're only targetting ES3? Or does ES3 also assume ES5?\nIf it's the latter, and we forgo the ability to target only es3, then yes, I can get away with es: 3. Otherwise, I'm stuck with boolean flags for each language version.\n. Nevermind, it's nonsensical to say my code ONLY supports IE6. I'll switch it to a number.\n. Just for the record, the only API I'm changing here is the one in JsFile, right @mdevils ?\n. @zxqfox in this case, version is more appropriate than dialect, no?\n. OK, So I'll introduce the dialect class then here.\n. Thanks for the input folks!\n. @mdevils although, it isn't that while is not a keyword in es5, it's more like isValidPropertyName where the answer is pretty much true for everything in ES5 and above. Doesn't change the Dialect stuff much. \nBut basically it means that the default Dialect class is es5 and isValidPropertyName has the base logic. \nWhat's cool though is now all the utils keyword stuff moves out in the Dialect files instead of the utils file.\n. > @mikesherov are you sure while is not a keyword in ES5?\n\nI've seen it here: http://www.ecma-international.org/ecma-262/5.1/#sec-12.10\n\nIt's not that it's not a keyword, it's that keywords are allowed as property names in ES5\n. > -1 from me, es3 environment is dying but this stuff complicates our cli interface and rules configuration.\nIt does not complicate rule configuration, as it's not a rule configuration option, but rather a file option. We will need the idea of file configuration for tabSize as well.\nI think honestly that for the case of correctness, until ie8 is really dead, we need to consider es3.\n. :-/ I'll try to keep the impact on the design of the code to a minimum. At least in 2.0 we'll make es3 off by default. \n. Not yet. However, I'm now thinking we should not implement what @mdevils suggested. I'm afraid that introducing a dialect class/concept is overkill for this.\n@mdevils, how would you feel if I just updated this back to getLanguageVersiom and forgo the dialect concept?\n. Yes, I agree we need to support different variants, however, it's going to be hard to predict which pieces of functionality are important to abstract here.\nI believe using conditional logic for specific rules by querying what dialect you're using is going to be less overhead in the long run than introducing a class per dialect with explicit methods.\nTo use this as a concrete example, isValidPropertyName would need to be implemented in all dialects despite the need for it in only one rule.\nI would consider it better to say if (file->dialect ===es3) than have to introduce that function for all future dialects.\nIn this case, I prefer conditional over inheritance and don't see ample proof that the long term will see benefits from introducing another set of classes.\nThoughts?\n. > OK, Mike, lets postpone this abstraction layer until we face considerable amount of rules with dialect-specific behaviour.\nThanks for compromising! I'm sure I'll regret my suggestion in the future! I'll update this PR now.\n. @mdevils can you re-review?\n. Thanks for reporting! We'll look at this very soon! /cc @mdevils \n. Thanks for contributing! Please add a unit test supporting this change and we can definitely land it. \n. Those won't land until 1.9. You're looking at the docs for the dev version. Don't worry, it's a common mistake!\n. I agree with @markelog here.\n. @sylouuu can you please post the complete file where you're seeing the issue? I can't repro this\n. @sylouuu I still can't reproduce this. Can you try the latest JSCS and make sure you're only validating that snippet you pasted?\nIt's possible you have indented breaks as the first break JSCS encounters. JSCS records the number of indents on the first break encountered and uses that for the rest of the run.\nPlease let me know.\n. @sylouuu, if instead of returning a value, it was just return;, would you have aligned it to the case like you do with break?\nRight now I count return statements as break as far as noting the indentation to use for the rest of the run. I know I need to not count it now when return has a value, but I'm wondering about naked returns.\n. @sylouuu no worries. I'll have a fix out for this soon.\n. Thanks for reporting! We'll look into this soon!\n. This was fixed by 3bd9e7cccfd71e2dfcc64664e056386ed5421448\n. :+1: LGTM\n. requireMatchingFunctionName would be more English readable IMO. Let's rename before we land. \nI'm also concerned that this rule is bloat, which isn't to say it's not a good rule, but now that we have a sane plugin infra we should be more discriminating. \n. Also, what if the property name is a reserved word. Named function expressions can't have those as function names while properties can, right?\n. @xaka, thanks again for contributing. Please remove the $ prefix suggestion language from the rule, as I think it's best to let the user decide for best to mitigate the problem. \n. @xaka just a couple of more comments and a rebase should bring this one across the finish line. Thanks again for contributing!\n. :+1:\n. This makes me sad. I'll add it to the list. \n. Just an update here. This bug highlights a flaw in the indentation engine that I've been just working around for a while that I'm now tackling in the proper way. So thanks for the nudge with submitting this issue.\n. LGTM\n. Yeah, this is a good idea. I still need to fix the main algorithm for indentation detection before I move onto other indentation rules.\n. :clap:\n. I do think that global install of JSCS is a good thing, in line with the other linters and CLI tools.\nPerhaps we should include \"relative to package.json\" in our list of ways to find where plugins exist? Or consult with how JSHint or ESLint accomplish this?\n. > specify potential unkown node types to estraverse in lib/tree-iterator.js \nThis we can do. \n\nbe aware of some esprima alternative and handle their custom node types and their options, but it limits JSCS to a whitelist of known alternatives\n\nThis is less likely to happen. The Esprima option is named specifically so, because it needs to take in ESPrima or an exact API compatible fork, like Esprima-FB. I suggest you submit a bug to the espree folks to allow you to build a custom espree with features enabled, or to provide you're own module that hardcodes the espree features you want. \nWe'll wait to see how much traction espree gets before deciding to special case options for it in. I hope it does well and puts pressure on Esprima proper to update more regularly, but for now, it's a bit too new to special case.\n. @yannickcr see #903 for controlling options\n. Keeping this open though for ability to pass custom node types to tree iterators\n. @necolas, does the ignoreProperties setting for requireCamelCaseOrUppercaseIdentifiers satisfy your use case?\n. ping @UltCombo and @sindresorhus . Does this PR address your needs?\n. Coverage decreased because you added code to utils but didn't add a test to utils.js. Please add a separate specific test for those functions in utils.\n. Great work @mdevils and @justboris !\nOn Friday, January 2, 2015, Joel Kemp notifications@github.com wrote:\n\nAlso FineUploader: https://github.com/FineUploader/fine-uploader\nand you can fix this quickly @mdevils https://github.com/mdevils #872\nhttps://github.com/jscs-dev/node-jscs/issues/872\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/873#issuecomment-68569761.\n\n\nMike Sherov\n. I agree on separate repo, but glad to see we finally have something!\n. @hzoo, I don't see how this rule allows:\nif (x) {\n  a();\n  b();\n}\nwhich it needs to allow. Can you also please add some tests for that?\n. @hzoo, to be clear: \nif (a) {\n  b = [\n    c\n  ];\n}\ncan be rewritten to be either:\nif (a) b = [c];\nor\nif (a) b = [\n  c\n];\n. Both are valid javascript. \n. OK, I have one minor last change, but I'll make it when landing the PR. Thanks again @hzoo \n. Thanks again @hzoo landed with a small change:\nfile.findPrevToken(\n+                        file.getTokenByRangeStart(node.alternate.range[0]),\n+                        'Keyword',\n+                        'else'\n+                    ));\nto\nfile.getPrevToken(file.getFirstNodeToken(node.alternate))\nfor future reference.\n. @hzoo if you'd like to clean up requireCurlyBraces, now is a good time to do that. Thanks again!\n. Our form of esprima-harmony supports more of es6, namely generators, for of, and a few others. Once ESPrima has full es6 support, we'll ditch our fork. \n. Thanks for contributing! As noted, this is a dupe.\n. @gagle thanks for contributing! We'll be looking into this shortly!\n. @mdevils\n\nWill merge this for now, since i need this for further work on other things, will revert this, if these changes would not be acceptable\n\nI think Oleg just wanted some solid ground to work off of. \nI do think though that \"next\" and \"previous\" imply position in text. @markelog's desire to rename them is good. I am not sure \"subjectToken\" is a good name either. \n@markelog, you can't start painting a red shed blue and then complain how not fun it is to paint!\n. @twolfson, thanks again for contributing! Looks like you have a slight regression in code coverage here. Please check the code coverage report by running: npm run-script coverage-html && open coverage.html to make sure you have tests for all cases. Thanks!\n. @twolfson I know it's been a bit on this PR. Can you please rebase one last time here?\n. Yes, we're going to land this soon. We need to start planning 1.13, 2.0, and make determinations on what the goals are. Can't land this until a potential 1.12.1 goes out also.\n. I think I still have an open issue about this somewhere...\nMy thoughts were to make rule values declarative rather than having functions. This would also make documentation auto generate able. \n. @mrjoelkemp, might make sense to add newExpressions to this rule, despite it not being technically correct because I can't imagine someone wanting spaces in one and not the other.\nOnly caveat is to not throw an error when new is used without parens, e.g. var a = new IHateParentheses;\n. Sure, but different rule. If newExpression has no parens, this particular rule is silent. We can always add require|disallowParenthesesAfterNewExpression.\n. :+1:\n. @JonathanGawrych please rebase so I can continue reviewing this further. Thanks again for contributing!\n. Landed! Thanks again so much for contributing @JonathanGawrych !\n. @markelog or @mdevils or @mrjoelkemp please review and if LGTM'ed, please merge before we release 1.10\n. By strict I mean strict mode. Because modules, as per spec, are always in strict mode. \nBut if a user want to use es6, and not modules, they could theoretically want non strict mode. and then we'd need to provide the option of whether to say module or not as an esprima option, which is annoying and we can save for later until someone complains.\n. @markelog yes, will do. Can't believe I forgot that!\n. Changed the title because people have asked to control other options as well.\n. @markelog, yes, https://github.com/jscs-dev/node-jscs/issues/865 wants the ability to pass options when using Espree which has tons of options, each one enabling certain parts of es6 grammar.\n. :+1:\n. Looks good what you have so far. \nOne thought is that when no config is found, if you're TTY, go straight to auto configure mode. If you're not TTY, mention the configure option in the error output. \n. Second thought is that if you run configure mode without a path, prompt the user for the path. Combined with my previous suggestion, the user can just literally do: npm install jscs && jscs from their root and be walked through the setup.\n. Wooo! Looks like testing's done?\n. Just wanted to give a quick brain dump of follow up tickets: 1. run configure if JSCS ran without a Config and in tty. 2. detect esnext. \n. Fuck it, we'll do it live!\n@mrjoelkemp, please file a new issue with remaining items, and let's land this thing!\n. LGTM\n. @schlueter thanks a bunch for debugging this issue! Would you like to take a crack at fixing it?\n. @janbaer thanks for contributing. @alawatthe is exactly correct, as JSCS is only concerned with style, and this is better suited for either JSHint or ESLint. Thanks again!\n. @creynders thanks for contributing! Yes, that's the verbose option, which will be the default in 2.0.\nThanks again!\n. @am11, if I'm not mistaken, the error object already contains the rule name, which is passed to the custom reporter.\n. /cc @mrjoelkemp \n. @akshayp thanks for contributing! We'll look into this soon.\n. > I'm gonna yank fix for #847 and wait for more intelligent approach.\nThis seems like the best approach. We'll add back in 1.10.1 :-)\n. You're right, @markelog in terms of it being intentional.\nBut did the rule only deal with arrays before? If so, we likely need to revert it and introduce requireSpacesInBrackets. \n. @markelog, that makes sense. Perhaps we should then add a duplicated rule that drops the array part of the name, and remove/mark-as-deprecated the docs for the one with array in the name?\n. Just to be clear here. You want to separate array definition spacing from array or object access spacing, right?\nBecause we can possibly do that, but we can't distinguish array access from object access. \n. @markelog, let's revert for 1.10.1 and then reintroduce the brackets rule under the new \"array-less\" name in 1.11.0?\n. @markelog, just so we're clear. In 1.11 you're going to do what exactly?\nBy revert, you mean return this rule to what it was doing (1.9) and introduce a new rule that does the current (1.10) behavior?\n. > Although if we will not re-implemented newly added options that might be considered as feature regression, so i'd need to check how hard it is.\nDo whatever is easiest here :-).\n. Locking this issue to prevent more \"me toos!\" As @markelog mentioned, the best way to see this work done is to submit a PR at this point!\n. @micnic, thanks for contributing! It's pretty easy to add this rule if it's a simple disallow, but then we'll start get requests to only disallow nested, etc.\nIt'd be fairly easy to write your own custom rule for this until we see more demand for this feature, btw.\n. This is the maxParams rule is JSHint and is not a \"style\" thing but rather a program correctness and best practice thing, which we decided a long time ago not to pursue. Closing for now,but thanks again for the suggestion!\n. Thanks for contributing! This behavior is intended. It allows a single space, or many spaces if the curly is on a different line.\nAre you just reporting that the behavior changed, or did you actually want to have the 2 spaces there? If so, I don't think we'll be adding an option for that any time soon if ever.\n. @zxqfox, can you whip up a patch for the error message?\n. @hawkrives file a new bug for that please! /cc @mdevils we need to think about assertion framework allowing 0, 1, >0.\n. @joesepi, thanks for contributing, friend!\nGood work. Found a few nits to address, but also:\n- commit message should say which issue it closes: \n```\ndisallowKeywordsInComments: new rule \nFixes #646\n``\n- the rule should take intrueor a string that represents a regex to use instead of the default\"/Joel/\"`.\nThanks again!\n. @joesepi you have a few style violations in your code, which is why travis is failing. Running npm test locally will reveal the erros so you don't have to wait for travis.\n. ping @joesepi \n. Landed with the fixes mentioned! Thanks again for the hard work here @joesepi !\n. @cvrebert, what version of JSCS are you using? Specifying in jscsrc should work...\nWhat happens when you have esnext in your .jscsrc and run jscs from the command line and not via the grunt plugin?\n. @mdevils can you take a look here? I know it's a lot to review, but perhaps you can look at each commit individually.\nThis PR fixes a long standing issue in indentation that I've been working around for a while. \n. @mdevils, I'm going to have @mrjoelkemp review it, as he's in my office and I can better explain to him everything that is going on in person. OK?\n. Where does this come from? I don't doubt the validity, just curios.\n. @markelog LGTM\n. Landing.\n. @hzoo this has really nothing to do with comments between and more to do with alignment, like:\nfunction asdf() { something(); }\nfunction as()   { something(); }\n. Correct.\n. FWIW, I don't think it can really hurt.\n. ping @mdevils \n. I think @dougwilson gave the correct answer: modify the tests so that the tests themselves detect color support and adjust expectations based on that.\nSure @sindresohrus can add more checks to the package, but still our tests aren't accounting for environment properly.\n. Yes please \n. Yes please \n. @am11 can you please rebase this. @markelog seems like we're good now with landing this?\n. I assume coverage went down because you removed lines from covered code.\nLGTM. Love that assertion module!\n. ping @markelog can you open a PR for this?\n. @mrjoelkemp can I get a :+1: here?\n. Closed by 0253717989b475999e2deea19f124ff1cbb502fd\n. @samlecuyer left a few more comments, please address! Thanks again for contributing!\n. @alawatthe sounds good.\n. @alawatthe can you all rebase while you're at it? Thanks!\n. @cvrebert I'll update Esprima-harmony. Thanks for contributing!\nPlease add documentation for this feature, which I assume is config only and not available via CLI.\nI leave the rest of my feedback as line comments.\n. New version is ready: 1.1.0-tolerate-import\n. @cvrebert you'll need to rebase, as I extracted parsing into it's own function.\n. @cvrebert thanks again. Let me know when you've made the necessary changes. Also, as far as tests go, it would be good to not really on the fact that esprima:tolerant now tolerates non-top level imports.\nA better test would use a custom esprima who's parse function is a spy, and ensure the correct combined options are passed in.\nThanks again for contributing!\n. @cvrebert please rebase once more, and address remaining feedback. Thanks again for sticking with this!\n. @cvrebert thanks again! You're almost there. Coverage went down because you need to explicity write a test in test/config/configuration for getEsprimaOptions. \nOnce that's in, this looks good to land. Thanks again for the work you put in here.\n. @cvrebert thanks again! I just landed this with a few tweaks:\n1. pulled out the tolerate-import update to be addressed in a different PR.\n2. removed some redundancy in the tests.\nOtherwise, landed as is. Thanks again a bunch for the effort here!\n. I have a patch https://github.com/jscs-dev/node-jscs/pull/990 but also files bug with esprima: https://code.google.com/p/esprima/issues/detail?id=631\n. @samlecuyer, thanks for contributing! \nWe currently have a policy of only focusing on style issues, and not ones of program correctness, which are better suited for JSHint or ESLint. Also, you can write custom additionalRules for jscs and open source them as well. Not everything needs to get into core :-)\nAlso, it's best to open an issue first before implementing so we can discuss a feature's merits before you go and do all that work.\nWith that said I'm going to close this pull request, but please don't let it discourage you from taking a crack at some of our other open issues.\n. @zxqfox @hzoo removed it from _no_WhiteSpaceBetween, because the number is always 0. This LGTM. Landing.\n. @lahmatiy rather than commenting out the tests, use it.skip and put a comment above them as to why they are skipped. Also, please search https://code.google.com/p/esprima/issues to see if there is an issue already logged in esprima for this.\n. Yes, just give it a bit because we just released 1.11 and need a few days to plan out 1.12\n. Assertion API is whitespace only for 1.12. I don't want to have to tie the two together.\n. :+1:\n. Thanks again!\n. cc @mdevils @mrjoelkemp \n. Also note that we'll eventually have excludeFiles available via .jscsignore so that you'll be able to specify excludes separately. At that point, there's no need for an import directive.\nI don't see us implementing this in the future so I'm going to close this for now. Feel free to respond and disagree. \n. @necolas, thanks for the feedback as always. \nWe do mention what our criteria for release is here: https://github.com/jscs-dev/node-jscs/blob/master/OVERVIEW.md#versioning--semver and felt that the changes to requireSpacesInsideArrayBrackets was a bug fix, and therefore warranted a minor release.\nWith that said, yes, we'll work on reverting the behavior first.\n. @markelog I'm on this right now FYI. Should have PR shortly.\n. @necolas just to be clear, we put bug fixes that cause less errors to be detected in patch, bug fixes that more errors to be detected in minor, and rule meaning changes into major.\nOne man's rule meaning change is another man's bug fix. In this case, we considered it a bug fix when clearly people were using it a different way. Hopefully it won't happen again, but we can't guarantee that. \nTLDR: ~ will always get bug fixes unless they report more errors. ^ will get all bug fixes, even if they break your build.\n. @markelog ping for review and advice on how to address in presets.\n. /cc @mdevils @markelog @mrjoelkemp Everything in token-helper is superceded by the simpler methods in js-file. It has never been part of a documented public API, and only plugin developers who were specifically scrounging around and looking for it would be effected.\nCan we remove this for 1.11 or must we wait for 2.0?\n. Whatever we decide, we should document it in our versioning guide, and we should also document the api of JsFile, etc.\n. Ok. I'm going to land this then and agree we should start thinking how to solve. #747\n. ping @markelog ... should I also switch all of the presets to use the new rules? None of them have caveats for expression vs. accessor AFAIK.\n. /cc @necolas\n. @markelog should we be switching any presets over to the new rule? Or should I make a ticket for 2.0 to switch them over?\n. @markelog OK, so I'm going to merge as is, and then file issue to add new rules later.\n. @zxqfox we can address that in another PR. This was about restoring old functionality.\n. @zxqfox sorry, I pushed right before your comment! Block comments inside brackets is extremely rare... but you should file bugs against the existing rules.\n. ping @markelog @mrjoelkemp just like token-helper, this is getting of comment-helper in favor of consolidating it back to JsFile where it belongs.\n. Ok, let me know when you've finished testing.\n. @cvrebert, as soon as we land autoconfiguration, which is almost completed.\n. I'm not sure we could land this till 2.0, as there maybe programs that are (albeit incorrectly) checking for the \"no errors\" message rather than the success error code.\n. Can you try this on master? I'm having trouble reproing and I landed a bunch of fixes last week. Thanks!\n. And if you use semicolons? Still busted?\n. Thanks! This fix needs to get merged into the master Esprima: https://github.com/jquery/esprima/pull/272/files#diff-7c9336e4324ea31118ce749be055b6a3R2221\n. This has been merged to master, so the next release of Esprima, which should be soon, will have it, and JSCS will have it right after that.\n. Thanks for contributing! This is one of our oldest rules and there are now better APIs to handle the edge case.\nI'll take the tests from your PR, but I'll clean up the file when I land it.\nThanks again! \n. Thanks @xaka! I'll land this tomorrow.\n. Thanks again!\n. Thanks for contributing! This is a duplicate of #822 which we can't land until we release version 2.0 as it's a breaking backwards incompatible change.\n. @pjako thanks for contributing! async and await aren't even in ES6! JSCS uses Esprima for parsing, so if you can find a fork of esprima or perhaps espree that parses async and await, JSCS will work with it. For now though, I'm going to close this as there's nothing inside of JSCS to do to fix this.\n. Thanks!\n. Yes, add it to error suppression as well.\n. @cowwoc can you reduce that at all? I can't repro this using master.\n. @cowwoc ping\n. This doesn't exist yet, but would be called requirePaddingNewLinesAfterVariableDeclarations\n. Thanks for contributing the suggestion @bjrmatos \n. Thanks as always for contributing! Just a few minor updates on this one.\n. Thanks again!\n. @cvrebert I assume you tried rerunning the generate script and than ran the test suite?\n. Thanks again for updating this stuff!\n. Thanks again @cvrebert \n. Thanks again!\n. Thanks for contributing! This is a dupe of #822\n. Yes, hit by a bus factor is still high. \nI recently spent a lot of time cleaning up this rule to reduce the complexity of the algorithm. \nI also spent a bit of time with @mrjoelkemp reviewing the rule and how it works.\nNext, I'm going to write up how this rule works, because the plan is to have other indentation rules extend from it and use its interface (which I have not exposed yet).\nThe hope is to have someone else write one of the other indentation rules using the interface. That way, when I buy a private island, all knowledge of indentation will not be lost :-)\n. Thanks for the review. Landed with the proposed modifications!\n. OK, this is fine. Anyone opposed here for 1.11? @mdevils @markelog changes that report less errors can go into minor releases.\n. @zxqfox I'm going to land this, as our release guide saying this can go into 1.11\n. @zxqfox no need to rebase. It's fine as is.\n. @ikokostya please read http://jscs.info/overview.html#versioning-semver we release changes to rules that cause less errors to be reported in minor versions, as this does not break builds. If the change caused more errors, we'd have to wait for a major version bump.\n. @ikokostya please read http://jscs.info/overview.html#versioning-semver we release changes to rules that cause less errors to be reported in minor versions, as this does not break builds. If the change caused more errors, we'd have to wait for a major version bump.\n. @ikokostya file an issue for us to amend this policy. The definition of broken is open to interpretation. The path forward is adding the NOT broken JSDoc plugin back into core and adding it to the Yandex preset but we wanted to remove the broken rule from presets, as per our documented policy. \nI might add that we didn't remove the rule completely, you can add it back in and it won't break until 2.0.0, and also, none of your build failed as a result of our change. \nI understand the issue, and am willing to discuss it further, however simply saying \"now we have a broken preset\" when I've pointed you to a document that lays out our current processes is not as productive as opening an issue.\n. @ikokostya , again, it depends upon your definition of stable.\nOn Thu, Feb 12, 2015 at 5:55 PM, ikokostya notifications@github.com wrote:\n\n@markelog https://github.com/markelog I expected get stable releases\nwith ^.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/982#issuecomment-74171503.\n\n\nMike Sherov\n. @ikokostya semver is clear about non-backcompat changes being major. And again, that leaves room for what back-compat is. If you read our policy, you'll note our direct quote of this very issue:\n\nSemver (http://semver.org/) dictates that breaking changes be major version bumps. In the context of a linting tool, a bug fix that causes _more errors_ to be reported can be interpreted as a breaking change. However, that would require major version bumps to occur more often than can be desirable. Therefore, as a compromise, we will only release bug fixes that cause more errors to be reported in minor versions.\n. Thanks again @hzoo for all your hard work here.\n. @hzoo, please rebase. I've already changed the callExpressions rules as part of a code coverage sweep. \n. Thanks again!\n. I think this problem is solved by adding an --init option, which is simply --auto-configure . followed by --fix . and perhaps even automatically electing (f)ix for every violation.\n\nBecause we exclude node_modules by default (although auto-configure should probably also read your gitignore for excluded files), the result is a fixed up codebase with a simple jscsrc that contains only the preset chosen by the user.\nOur docs should have a big hero banner at the top:\nnpm install -g jscs && jscs --init\nI don't think we need to promote a default preset, for the reasons outlined already. It creates unneeded holy wars for very little value for the user.\n. Some users might not need it but those users typically need docs less. The easier it is to get started using it, the better. I still vote for an init option as the easiest path towards using JSCS.\nThe auto fix and auto configure options are what seem to blow people's minds and are the quickest easier path to a fixed up codebase. Yes, people could base their decisions on many things, but giving them an init that makes them not have to think about it is the most user friendly.\nAgain, we could have a default preset in auto configure with zero controversy. Once we choose a default, it will make users mad no matter what we do to it afterwards. \n\nSo i think for this couple of months we might try this, if it wouldn't go well, we will revert in 3.0.\n\nHave users been asking for a default preset? I see zero evidence this is a thing people want. \n. I say let feross/standard take on that maintenance burden then. Most linters that start becoming opinionated later revert.\nSimply because a popular library exists doesn't mean we need to copy their functionality. Why aren't we content being a module consumed by standard and allow them to plug along as a standard bearer while we continue to focus on what made us popular to begin with?\nConsider the sublime text plugin... suddenly it's going to start throwing errors when you clone a repo that doesn't have a .jscsrc? And those errors are for a style guide you didn't choose or ask for? Blecch.\u00a0\n\u2014\nSent from Mailbox\nOn Sun, Jul 12, 2015 at 12:27 PM, Joel Kemp notifications@github.com\nwrote:\n\nUsers aren't explicitly asking for it, but as Oleg said, the success of\nfeross/standard shows an implicit desire.\nOn Jul 12, 2015 6:23 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nSome users might not need it but those users typically need docs less. The\neasier it is to get started using it, the better. I still vote for an init\noption as the easiest path towards using JSCS.\nThe auto fix and auto configure options are what seem to blow people's\nminds and are the quickest easier path to a fixed up codebase. Yes, people\ncould base their decisions on many things, but giving them an init that\nmakes them not have to think about it is the most user friendly.\nAgain, we could have a default preset in auto configure with zero\ncontroversy. Once we choose a default, it will make users mad no matter\nwhat we do to it afterwards.\nSo i think for this couple of months we might try this, if it wouldn't go\nwell, we will revert in 3.0.\nHave users been asking for a default preset? I see zero evidence this is a\nthing people want.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/986#issuecomment-120706141.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/986#issuecomment-120738804\n. The rule itself can't be dropped until 2.0, but the usage of the rule in presets can be dropped in 1.11\n. Thanks for contributing! There is currently no plans for this rule, which is a feature request.\n\n\nThe reason this isn't validated in the validateIndentation rule is because there isn't a common accepted best practice for how the test should be indented.\n. LGTM\n. Yes, it's still good. LGTM. \n. @Shuhrat, thanks for contributing! The validateJSDoc rule is no longer supported. We suggest you check out the ecellrnt jscs-jsdoc plugin, and file bugs there if it's still an issue. Thanks again!\n. @davejhilton thanks for contributing! I made a lot of comments, but they're minor, so... good work.\nIs there an existing issue for this behavior? If so, please reference it in your commit message.\nAlso, it looks like you aren't catching all cases of the code you wrote. Try running npm run-script coverage-html && open coverage.html from the command line to look at the code coverage report and see what you missed.\nThanks again and let me know if you have any questions!\n. Thanks again! Looks good now.\n. It'll get merged soon. 1.11 was just released so I want to give it a day or two to see if anything needs to go into a 1.11.1 first. \n. No, thank you!\n. @TheSavior can't be OpeningCurly because it doesn't deal with object literals nor destructuring assignments.\n. @feross, you need to wait until a release happens that contains the fix. 1.11 will be out tomorrow.\n. @aju have you tried \"excludeFiles\": [\"./public/js/views/subviews/**\"], also did you install jscs globally, or locally to your project?\n. @mightyiam thanks for contributing. Opening an issue on jscs for what at the moment looks like a bug in another project isn't really the best way to ask for help. Just ping me on that issue. \n. @alawatthe yeah, there's more than a few cases in which keywords are insufficient to describe the rule you're trying to achieve. We're working on it.\n/cc @markelog @mdevils another case of keyword confusion :-\\\n. @mdevils this is probably good to go after you move the last bits out of _parse and into JsFile.parse. I'd like for you to land it, so we can move onto the next step. :-)\n. @mdevils please rebase. I just finished up the JSHint unused ticket, which causes conflicts.\n. Thanks for contributing! Can you please:\n1. Provide the offending source file.\n2. Try not providing a custom esprima?\n3. Try passing tolerant: false as the esprimaOptions in your config?\n. @zxqfox, can you file an ESPrima bug? http://github.com/jquery/esprima \n. @TheSavior thanks a bunch for contributing! The rule names should be named (require|disallow)PaddingNewLinesAfterBlocks. Technically, it's a block statement, and never a block declaration.\n. @savior, nothing. Just wait until I come through and land a bunch of these.\nAlthough, I wonder if we need requirePaddingNewLinesBeforeBlocks too?\n. @mdevils or @markelog I'm a fan of the additions to the assertions, but just wanted to get a +1 from either of you before I land this.\n. BlankLinesBetween should be able to simultaneously take lessThan and greaterThan, but should be mutually exclusive of exactly. \n@TheSavior sounds like you got what you need. Once you finish up here I can land this, and we can move on to #1023 :-)\n. @TheSavior thanks again for sticking with this!\n. Go ahead!\n. @TheSavior I'm going to land this with the slight modifications I suggested so we can move forward on the rest of the great work you did.\n. @TheSavior landed thanks!\n. Reopening because I reverted this change for 1.11.1\n. Thanks for contributing!\n. What other rules use tokenBefore? If the answer is none, then should use the expectedTokenBefore loc rather than providing an option to specify a location. \n. The idea is that the rules shouldnt have to think about where the error is.\n. Much better :-)\n. I see 6 rules changed with only three tests updated. Please add a test to all 6 to prevent coverage regression. If you add the utils method, you'll need to test it in test/utils.js as well.\n. LGTM otherwise.\n. @zxqfox it's a dangerous path modifying nodes. Let's just stick with what you have for now then, and we can revisit this in the future.\n. LGTM\n. @zxqfox, can you please make sure future commit messages match our documented format from contributing.md:\n<rulename>: short message\n<emptyline>\nLong description (if useful)\n<emptyline>\nCloses gh-<pullRequestNumber>\nFixes #<issueNumber>\n. It might be more difficult, but perhaps you can run the code without esnext true, than run it with esnext true if it encounters a parse error, and if it then doesn't encounter a parse error, you add esnext: true to the .jscsrc?\n. At some point, esnext will be the default for JSCS. That'll happen when it happens for Esprima. Until then, es5 is our default because the es6 stuff is still somewhat buggy.\n@mdevils, thoughts?\n. @mrjoelkemp it's about what gets put into your .jscsrc. I'd like to avoid adding esnext: true to everyone's projects just because it doesn't break anything.\nI'm willing to concede the point, but I'd like to hear from rest of team.\n. @mrjoelkemp what's important to note here though is that esnext comes with a few caveats. \nFor example, we always assume modules instead of scripts for esnext, which means our users don't have to specify that they're using modules. This automatically opts them into strict mode, which changes the behavior of esprima. Also, lots of things that are illegal grammar in es5 are permitted in es6. \nIt's our duty to respect the fact that most JS runtime environments are not es6 by default yet, and that means, IMO, that we should follow suit and default to es5. That situation changes once master esprima changes and browsers change.\nPerhaps a different way forward is to simply ask the user which dialect?: es(3), es(5), es(6)?\n. @TheSavior, will get to this shortly. Just want to make sure we address 1.11 bugs before landing this. Thanks again!\n. @TheSavior can you rebase this please? and note the I changed linesBetween to be 1 less than before.\n. Thanks again @TheSavior!\n. Woooh!\n. @hzoo can you take the remaining ones that you identified from the list?\n. @hzoo Thanks!\n. @TheSavior thanks again!\n. @wvankuipers, thanks for contributing! Looks like you just want to use true instead of {all: true}. \nDid this used to work?\n. @TheSavior since comments are now part of the token list, you should be able to iterate over all comments and get the prevToken to use assertions here. If you run into troubles with that, let me know. Thanks again as always for contributing!\n. If getTokens is not iterating over comments at this point, it's a mistake. @mdevils did some work to merge the two, perhaps this missed it?\n. @TheSavior, yeah, the intent is for getTokens to iterate over comments now too. This is, in fact, how we render()\n. Thanks for contributing! This is a dupe of a bug that was already fixed. Patch release coming soon.\n. /cc @markelog @zxqfox same discussion as we had for plugins. Any reason not to allow us to try to require the reporter so people can easily distribute reporters?\n. @mattgrande what configuration option are you using?\n. I don't believe that this is a false positive. We had a false negative in 1.10. disallowMultipleVarDecls is designed to behave this way.\nPlease let me know if I'm wrong, and we can reopen.\n. @mattgrande yeah, airbnb changed their mind about multiple var declarations. We updated the preset accordingly. If you want to allow multiple declarators per declaration, add this to your config:\n``\ndisallowMultipleVarDecl: null\n```\nThanks!\n```\n. This is a dupe of #1025 and will be patched shortly! Thanks again.\n. @ashclarke thanks for contributing! We'll look into this shortly.\n/cc @markelog @mdevils rules that are keyword driven seem to continually suffer this fate. I've argued against token based rules for a while, but here are the edge cases: while can also be do while, default can now also be export default, function can be a function expression or a function declaration, if can also be an else if, which typically has caveats.\nWhat should we do here?\n. @yannickcr good catch! Can you please add a unit test for this behavior?\n. Thanks for contributing! This'll be fixed shortly!\n. > @zxqfox It's not a working solution. We need text of correct <script> tags only. And we should know where fragment starts and ends. It requires for normalization, as rules check indentation, empty lines, trailing whitespaces, trailing new line, var position and count etc.\n@lahmatiy the correct way to handle this then seems to make the rules that check this stuff aware of that fact. For example, the indentation problem is easily fixed by making the rule not assume that 0 indents mean column 1. It can easily check the indentation of the first token it encounters and set that as the offset of the code. \nFor the rest of the issues, it seems like a possible solution is remove all non script tags, replace it all with whitespace, and add /*jscs:disable*/ to the top of the document, replace <script> with /*jscs:enable*/, and </script> with /*jscs:disable*/.\nFor example:\n<html>\n....\n<body>\nyada\n  <script>\n  var a=1;\n  </script>\n  dada\n  <script>\n  var b=2;\n  </script>\nbecomes:\n```\n/jscs:disable/\n/jscs:enable/\n  var a=1;\n  /jscs:disable/\n/jscs:enable/\n  var b=2;\n  /jscs:disable/\n```\nthis will automatically ignore errors anywhere that isn't actual scripts tags, and automatically retain position information. All that needs to be adjusted is again, the offset for indentation. \n. @lahmatiy those are good points. Still would like to see this code somehow simplified. Adds a lot of complexity at the moment.\n. @alawatthe what's the actual repro case please?\n. OH, duh. reverse is in place. Fix coming in a minute.\n. @hzoo thanks again as always. Can you please follow the commit message format more closely for future PRs? I almost missed that this fixed #911 \n. See #1043 ... a bit more fleshed out\n. @zxqfox, perhaps the way forward is to install the previous minor version of jscs and compare the current codebase against the latest release. This is then relative and immune to the \"different hardware\" problem.\n. This can be implemented as a reporter called the summary reporter. Until then, @morenoh149, you can do:\njscs -r inline <path> | grep \".js\" | cut -d':' -f1 | sort | uniq -c which should get you the info you want ;)\n. @mrjoelkemp @morenoh149 \"With enough pipes, everything is possible.\"\n. I'll echo @mrjoelkemp here and say great work, however, I think this rule should be using nodes rather than tokens.\nI can comment more fully in the morning but just wanted to jot down that note. \n. @Deathspike thanks for contributing! There is docs for each of these rules at http://jscs.info and a google group where you can ask further questions like this: https://groups.google.com/forum/#!forum/jscs-dev \nWith that said:\ndisallowSpacesInsideObjectBrackets is incorrectly named and should be disallowSpacesInsideCurlyBraces.\ndisallowSpacesInsideArrayBrackets only warns on array expressions: var a = [ 1, 2, 3 ]; and not member expressions: a[0] or a['b'].\ndisallowSpacesInsideBracketscatches both array expressions and member expressions!\nThanks again!\n. @ashclarke good work! Thanks again for the patch. Your commit message should adhere to: http://jscs.info/contributing.html#commit-message-format\nLet me know when you've made the adjustments and I'll rereview\n. @ashclarke squash please, and amend commit message to save me the work later :-)\n. Right, if we exited with code 127 for example when no config was found,\nthen that's a common way all consumers of JSCS can choose to ignore that\nerror. This is a fairly standard unix principle.\nOn Fri, Feb 20, 2015 at 2:26 PM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nI'm not sure if understand you, differentiation with exit codes would\nsolve you problem?\n\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1053#issuecomment-75303012.\n\n\nMike Sherov\n. > I don't think exit codes would make things any better. I'd still need to add support to Flycheck to check for particular exit codes. All it does now is check for non-zero exit codes.\nFlycheck would need to be updated to correctly support JSCS in either situation. In any case, either you or your users would have to know to implement the config option you propose. So, you're doing work one way or the other!\n\nI don't think 127 is a correct or good code to emit. \"command not found\" is different from \"config not found\". \"Command not found\" implies that you forgot to do npm install -g jscs.\n\nI was using 127 as a \"for instance\". 78 is better.\n\nBut that is still ambiguous: Is it a \"configuration not found\" error, or a \"malformed JSON\" error? You are still going to need error messages when the standard set of error codes runs out.\n\nNo one is suggesting to ditch the error messages. We're saying add and document them so that tools can choose to ignore certain errors at their leisure. This is the purpose of exit codes.\n. > So it is not true that \"Flycheck would need to be updated to correctly support JSCS in either situation.\" Although it certainly might be convenient if the author of Flycheck added the above snippet so that JSCS support was built-in, any user can set up JSCS without any additional hacks with the above code.\nThat's true, and a good point. I think we've sufficiently beaten this horse dead. I'm fine with adding the new option to make it easier on our integrations.\n@mdevils, @zxqfox thoughts?\n. @jacksonrayhamilton thanks for sticking with this as we talked it through, by the way. \n. @markelog, I also know my coworkers have been asking for this as an option as well, and we had other tickets about this.\nI literally just told @jacksonrayhamilton that I wanted to here from @zxqfox and @mdevils here and you close it? What gives?\n. @markelog, because you also closed the other one from my coworker without a chance for discussion!\nAnyway, I'll reclose this, but we need to an issue that doesn't presuppose that exit codes is the right way.\nThere are 4 options:\n1. Make JSCS not complain by default (bad).\n2. Make JSCS configurable to not complain about configuration. (ironic)\n3. Use fine grained exit codes (most of Unix behaves this way)\n4. Separate out warnings from errors and consider no config as a warning and introduce an option to suppress warnings.\n5. Do nothing and have packages do the heavy lifting.\nI still think we need @mdevils and @zxqfox opinion here, but going to reclose this PR for now.\n. I'm not really a fan of this rule because I think it's solved by adding atLeast, atMost, and exactly to the spacing assertions and passing those down through the rule config themselves. This is a fairly decent stop gap measure but I predict will be rife with requests for people asking for leniency to this rule in certain cases, which highlights the problem of it being too overarching.\n. I'm fine merging it in, I was just saying that the customizable route will be not to address it by making this rule have tons of options, but rather by enabling more fine grained control of the other options.\n. Yes, do it. However, we should be working on the declarative options feature anyway so this becomes an unnecessary discussion.\n. Yup. Thanks!\n. Hi @sdepold and @oredi, sorry for taking a while to get back to you guys. I was heads down in \"autofixing\" code. This looks pretty good, but using getNodeByRange is a bit unsafe, and we should probably deprecate it. What would be better is if you could create a getNodesByFirstToken which returned all nodes that start at that index, considering there could be many. It would take in a token, and not just a range. You would then array search instead of strict compare the result.\nLet me know if you can tackle that, and we can discuss fixes this in the generic sense for the different rules that exist.\n. cc @mdevils in regards to proposed implementation above?\n. @oredi, seems like what I had in mind. Good work! I just want confirm from mdevils too though.\n. ping @mdevils \n. @markelog as discussed previously, getNodeByRange assumes that there is only one node that matches, which is incorrect.\n. I like this PR as is now. Up to @markelog to agree :)\n. Would be cool when someone uses autoconfigure to ask them to send the final config to us.\n. Does this happen without esprima-FB? (If you replace the JSX portion with a string?\n. Looks good except can we name it getFirstTokenOnLine? Makes the purpose clearer in English.\n. :+1:\n. I think the node style guide would be a great preset to add.\n. And then, at that point, it's just running jscs --autoconfigure on the codebase ;-)\n. I assume your configuration is set up improperly. Did you read the docs and double check you have everything set up properly? What does your code look like?\n. @dman777, please ask future support questions on our Google group. \nJSCS needs either a provided config, or usage of a .jscsrc file. See http://jscs.info for more information. Thanks!\n. Thanks as always!\n. @jfelchner, thanks for contributing! This is also a dupe, although I can't find it at the moment. This will be solved at some point soon. Thanks again. \n. @iamdanfox great idea. Any interest in implementing this feature? The only caveat is that the rule itself needs to check if it's in ES6 mode using file.getDialect.\n. @iamdanfox I'd imagine you'd want this to apply to all objectExpressions, no? so file.iterateNodesByType would work. Also, you don't need to implement this if you'd rather wait for us to get around to it. We just like asking issue contributors if they'd like to become code contributors to. Thanks again for contributing!\n. we should now be using this._tokens everywhere, right @mdevils? That was my intent at least... and yeah, getComments should be deprecated.\n. Also, can you rebase this please?\n. @TheSavior, yes, just this._tokens\n. Thanks!\n. Yes! Would love to see this done. \n. Yup. On it for 1.12.\n. @gero3, good catch. I'll whip up a test case to catch that.\n@mdevils, the routine of splitting whiteSpaceBefore by linebreak, etc. needs to be used for multiple assertions anyway, so glad to move it there. Just wanted some feedback.\n. @gero3 actually, it's due to the inconsistent use of } else if... with }\\nelse if. I'll need to patch that, good catch. Leaving this here as my reference: https://github.com/gero3/three.js/blob/20267dcac018384f35937ae54e0d120d4024058e/examples/js/loaders/gltf/glTFLoader.js\n. @gero3 can you test this against three.js again? That was incredibly useful.\n. @gero3, wow, the three.js codebase is all over the place with regards to style. Good to use it as a fuzzing tooling ;-)\n. @gero3 give it a shot now. Looks like I caught all the edge cases you've reported.\n. @mdevils can you rereview? @markelog @zxqfox ?\n. the new line rules need indentation. The other indentation rules need indentation. The fact that they aren't there yet is a symptom of our iterative approach, not a design flaw, IMO.\nall if the assertions will be used in multiple places. \nWith that said, yes, we'll likely need a \"fix\" property for non trivial changes, as I've mentioned before.\nBut there doesn't seem to be many other needs for additional assertions, and I think the fear of an overblown is just that, fear.\n. @TheSavior, feel like porting it over?\n. @TheSavior I added an input-output test with this very PR :-) \nThanks for looking into it!\n. @gero3 tests please!\n. The problem is that this rule should not be using an assertion, and the assertion it's using is a hack. \nThe assertions should themselves throw if the token and nextToken are equivalent, and this rule should be updated to not use an assertion.\nThat way, all assertions remain trivial to fix. Wanna take this one @TheSavior ?\n. @TheSavior Thanks as always for contributing. \nEach pull request you send is getting more and more instances of merging master into your branch. Can you please rebase your PRs so that they don't contain merge commits?\n. I actually do think that individual rules have a test for fixing, even if it overlaps with fixString. That way, if we ever change out the implementation underneath, or modify how a rule behaves, we still have proof that it is autofixed.\n. @TheSavior typically I keep my local master up to date with upstream master, and then rebase against my local master.\n. @oredi yes please! Although I think we should include new names for do while and export default to disambiguate them from while and switch default. @markelog @mdevils @mrjoelkemp thoughts?\n. @PerseusTheGreat thanks for contributing! We'll need exact reproduction steps to determine if this is a bug. The best place to ask for support is on our mailing list: https://groups.google.com/forum/#!forum/jscs-dev\nMy guess is that you are using this outside of a place where it is valid to do so, but I can't tell without a full repro case, including which version number of jscs you are running. Please ask for help on our mailing list, and if a bug is discovered, come back here to file a new one.\nClosing this for now. Thanks again!\n. @gero3 what was the test case that was broken using the autofixer? Did it eat the comment token? If so, then we need to follow the \"detect error, but don't fix\" strategy from linesBetween when a rule itself doesn't account for comments.\n. @mrjoelkemp yeah, but really we also need to solve this at the autofixer level, like I did for linesBetween.\n. @gero3, good work! Just needs more tests, one for each of the conditions.\n. Thanks again @gero3!\n. I ended up rewriting the tests because there were a few errors in them. Thanks again @gero3 \n. Looks goods, just needs more tests: 2 tests in JsFile, 1 for each function you added. \nThanks again @gero3!\n. :+1: good catch! Have you checked other rules to see if they're affecyed?\n. How about !.*token regex search?\n. :+1:\n. Thanks again!\n. @TheSavior, thanks again for contributing!\n. @TheSavior no reason to bump. This will land before we release 1.12 regardless of when it actually makes it in\n. Thanks again!\n. Please add this to jQuery also, but without the option to allow exceptions for fiestInBlock. \n. @TheSavior this is now safe to rebase, adding the exception firstAfterCurly to the airbnb preset, and the true value to the jquery preset.\n. Thanks again!\n. PR please! Thanks as always @cvrebert for contributing!\n. It belongs in jquery, yes.\n. These are solved problems in other linters, we don't need to reinvent the wheel. \"Extends\", finding up from the file rather than cwd, .jscsignore file, Config per file rather than per run, requireable plugins... are all standard behavior for a linter.\nWe should just roll up our sleeves and do the work rather than discuss merits and workarounds, IMO.\n. BTW, @markelog, I wasn't suggesting you were doing that. I was directing to the team in general. \n. Yeah, we need this rule. Thanks for contributing!\n. This is requirePaddingNewlinesAfterBlocks, which is an existing rule. If I've misunderstood the request, feel free to respond, but closing this for now. \n. Thanks, we already have safeContextKeyword. Although, no option for number of uses, but we're not likely going to add that option, so I'm going to close this for now. Thanks again!\n. @yaycmyk, the advantage for minification typical goes away after gzipping though, considering how much gzip loves repetition. \nThe use case for aliasing this is not for minification but rather for usage in other contexts without the use of bind. \n. The validateIndentation rule already tracks which style you use and then enforces future usages to be consistent with the first one, so I'm going to close this for now. Thanks again, and please explore the docs at http://JSCS.info\n. @yaycmyk then you'll get a ton of errors in your codebase. I suppose we can always make this an explicit option too. Care to work on it? \n. @markelog want to talk about it after 1.12 is out. Sorry for delaying discussion, just have lots going on.\n. @zxqfox @markelog @mdevils can I get 1 review so I can land this?\n. @zxqfox one of these rules was using assertions incorrectly by passing same token as token and nextToken, which I've now made throw. The other was assertions incorrectly because it's really just a hacky version of disallow semicolons.\n. @gsklee JSCS is beholden to the parser, which provides the AST to JSCS. In the case that the parser can't recover from an unexpected token, there is nothing JSCS can do here.\nHowever, JSCS allows you to provide any esprima derative you want, like esprima-fb, the esprima harmony branch, espree, etc....\nFind a parser that parses your code and JSCS can support it.\nThanks again!\n. @jbnicolai, except wait patiently? ;-)\nJust haven't had time to do a merge / test run. Will get to it shortly. \n. @jbnicolai , thanks again!\n. @hzoo have you gone through all rules to make this update? I'd like that if possible please.\n. @olegpesok thanks for contributing! Rather than adding a relaxed parameter, we should get rid of the spaces parameter, and instead add an exactly, atLeast, and atMost field like linesBetween has to achieve parity. Once we have that, I can review this PR further.\n/cc @markelog or @mdevils  or @zxqfox for opinions\n. Can you please rebase this PR and make use of the new options for spacesBetween rather than including a relaxed option?\n. @royerboat this will be fixed in the next release. Thanks for contributing!\n. This no longer triggers an error once 1.12 goes out, but we're still doing unsafe manipulations to the code when a # appears inside a multiline token like:\n```\n/*\n\n*/\n```\nor \n```\nvar a = \"\\\n\\\n\";\n```\ncc @markelog or @zxqfox  or @mdevils \n. Thanks for contributing! This is a known issue and a duplicate. The problem is that this rule isn't really appropriate for the function keyword, considering you probably also don't want a newline before methods:\n{\n  prop: function() {\n...\n/cc @markelog and @mdevils as this will also be the same problem for the while in doWhile and default in export default\n. Yeah, if you'd like, file a new issue for requirePaddingNewlinesBeforeFunctionDeclarations. Thanks again!\n. LGTM\n. @TheSavior great work! Thanks again, as always, for contributing! Perhaps we should make a set of test utility functions, so tests can just say something like:\nassert.fixesString(input, output);\n?\n. We can solve that with a 3rd param that is the expected number of errors, defaulted to one. \n. Yeah, need to support both. @hzoo, can you whip up a PR?\n. Thanks!\n. @gero3 thanks for contributing. Reduced test case please?\n. This should be renamed to requirePaddingNewLineAfterVariableDeclaration.\n. Also, needs opposite rule for disallowing. Thanks again @yaycmyk\n. I like this as is :+1:\n. @yaymck, thanks for contributing! This is better handled as an option to the validateIndentation rule. Care to give it a shot there instead?\nThat rule already allows both styles... should be easy enough to enforce based on a Config value. Otherwise, I can handle it myself. Let me know... Either way I'm going to close this for now. \n. @yaycmyk ^\n. Yes, it should not live as its own rule. \n. Arrays are separate because people are all over the map with how they get indented. Even the JSCS codebase fails if we enforced array indentation.\nIn regards to the first failure, it's a tough call because this should pass:\nvar longName =\n                       fn('foo', function() {\n  a();\n});\nI ere on the side of caution while trying to not introduce too much complexity (it's already complex enough!).\nAnyway, I'll see if I can fix this soon, but it likely won't make it into 1.12.\n. @TheSavior actually, you're correct about first example.\n. @TheSavior sorry that this is causing you so many problems. I'll be picking back up on this soon. I've got important work deadlines that are eating up all my FOSS time at the moment.\n. Looked into it. A bit more difficult than I thought, due to lots of edge cases, but I'm actively investigating.\n. what do you consider breaking here? Looks good to me otherwise!\n. Is there any way to preserve the old behavior without introducing too much complexity? Would be a shame to have to hold off till 2.0 for this. \n. We've already said that autoformatting needs to be in the 1.x line.\n. No, no promises made, but we already discussed this. No reason to release 2.0 over such a minor bug. If you'd like to revisit that decision, we should discuss that on the ML, no?\n. :+1: land at will. \n. @tarmolov not true. validateIndentation has special logic to check for the presence of modules, and doesn't require an indent inside the module. ;-)\nIf that's not working, LMK.\n. Ah, I see you're using modules.define. It only looks for define or require. I suppose I can update the detection.\n. @zxqfox file a new issue please.\n. Only an insane person wants a newline inside a for loop. Make it automatic, like we do in lots of other cases (e.g. we don't warn about missing curly in an else if).\u00a0\nMike Sherov\nOn Wed, Mar 11, 2015 at 7:23 AM, Joel Kemp notifications@github.com\nwrote:\n\nI'm having a hard time discerning whether we're fixing a bug in the rule or creating an exception.\nI only hesitate to avoid imposing our sense of style on users. \n@mikesherov or @markelog can you make the call?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/1157#issuecomment-78245745\n. @chadhietala what version of JSCS are you using? 1.11 correctly only does Objects, where as 1.10.* did all curlies.\n. @chadhietala what version of JSCS are you using? 1.11 correctly only does Objects, where as 1.10.* did all curlies.\n. Also, this is dependent on a bug in esprima which will be fixed in the next release.\n. Yes @hzoo thanks!\n. right, seperate rule for generator * because they can show up in a few unexpected places.\n. Agreed. @mzgol, let me know if you're experiencing otherwise and I'll reopen. \n. @mzgol, let and const aren't completely baked in Esprima 1.*, which is what we use when esnext is not true.\n. Thanks for contributing! Yes. Every rule is independent. You can't say you want spaces before blocks and then not before blocks (which is what the curly is).\n\nWhat are you trying to achieve with requireSpacesBeforeBlocks?\n. @gunnx then you can use inline disabling to account for that situation:\n/*jscs:disable*/\nvar x = (function(){\n // do stuff\n})();\n/*jscs:enable*/\nIf you'd like to attempt a patch that introduces allExcept: ['FunctionExpression'] as an option to requireSpaceBeforeBlockStatements I'll gladly review it, otherwise, this isn't a high enough priority for us to add this functionality any time soon. Thanks for contributing!\n. It's complexity is only high because of BC and having tons of varying error messages.\nIt will get better in 2.0 and I wouldn't worry about it. \n. I think we can just say that if the line comment isn't the first token on the line, no error. No need for a new option here. Thanks for reporting @TheSavior !\n. @TheSavior can you send a PR for this? Thanks!\n. @indexzero, its in the right direction. The addition to errors.add is fine. \nThe patch itself is good but not without bugs. This would break on var a = \"an \\\"escaped\\\" string\"; no? Please add some tests for single, double, single with escape string, double with escape string, and a test for errors.add.\nThanks again @indexzero !\n. @millermedeiros sure. That makes sense. Thanks for pointing out the package.\n. hasOwnProperty is the correct solution here.\n. @ljharb yeah, I can land some PR's and release a patch version tonight.\n. @ljharb got delayed in doing this last night. Sorry about that, will hopefully get to this tonight!\n. @SimenB, thanks for contributing!\nfunction (opts) {\n  this.a = opts.a;\n  this.b = opts.b;\n}\nIs not valid javascript, which is why the test is failing. \nAlso, assigning to a property of an object is not a variable declaration, it's an assignment statement. There is a difference, and this rule respects that difference.\nClosing this as \"not a bug\"\n. Assertions need to be able to specify which of the tokens is in error. I'll work on this soon.\n. We have disallow/require rules without opposites. No need to force it to be named \"validate\". \n. Not interested in readding the removed functions. We have never documented them. Yes, it's unfortunate that people had relied on them but we'd need to document their existence before considering them part of the API.\n. @rwjblue if you want help using the new API instead, let me know.\n. OK, closing as resolved then for now.\n. I agree @mrjoelkemp. This is definitely a plugin. @smeijer thanks for the feedback. I'm going to close this now. Let me know if you disagree.\n. I too would love this as a plugin that is maintained under the JSCS organization. @jacksonrayhamilton, thoughts?\n. @jacksonrayhamilton that would be awesome, and then I can add you back as a maintainer to the repo @mdevils can you point @jacksonrayhamilton in the right direction with getting unit coverage working?\n. Wooo! Thanks again @jacksonrayhamilton \n. Thanks for contributing. The problem is as @hzoo described. Please repsond if you feel like this is an error. Thanks again!\n. @globexdesigns using esprima-fb for the time being is your best option. Going to close this for now, as it can only be fixed by Esprima.\n. Thanks for contributing! Please use token-assert to match the code that is available in requireAlignedObjectValues.\n. Yeah, this is definitely JSHint territory. We don't work with the file itself. @Krinkle report this to them instead. Closing for now!\n. @mzgol please use file.getFirstNodeToken() instead!\n. Wrong repository?\n. LGTM. Thanks for contributing! @mrjoelkemp merge when ready.\n. :+1:\n. I'm pretty sure the issue is us and not Esprima. I'll be looking into this shortly. \n. @markelog we should land support for arrays too.\n. Agreed.\n. Yes, this is a documentation issue. This rule is behaving exactly as intended. If you are using alignment, this rule is not for you.\n. @SteveALee that's the --verbose option, which will become the default in 2.0. Thanks for contributing!\n. :+1:\n. What about function calls that aren't the last parameter?\n. :+1:\n. @TheSavior 's comment still applies.\n. Thanks for reporting! I'll look into this shortly!\n. Might not be exact duplicate unless you already investigated, @thesavior?\n. OK, cool. Thanks @TheSavior !\n. > Why did the coverage report not pick up use of the new util functions by rules requiring them, though?\nThat's a feature, not a bug. The unit coverage runner, written by @mdevils, explains the philosophy here:  https://github.com/unit-coverage/unit-coverage#the-idea\n. :+1:\n. @zxqfox if you encounter a reviewed-once and you also agree, merge away!\n. Can you move the one file to test/lib/assertHelpers?\n. This LGTM with that one suggested change. Thanks again as usual @TheSavior !\n. @mdevils, there's no reusability for that assertion. I'd vote to keep it out of assertion library until we find reuse for it to keep assertion library from growing out of control. \n. @TheSavior we should introduce an ignoreProperties option the same as requireCamelCaseorUppercaseIdentifiers. Thanks for contributing @viveleroi \n. @avdv thanks for contributing! @hzoo's comment is correct, so closing this as WONTFIX.\n. @zxqfox we have ignoreProperties for this exact reason though.\n. I'm not sure I've heard a single reason to move away from Esprima here?\n. We rely on the token output of Esprima. There really needs to be more standardization work done around the concrete aspects of the AST, which we are actively discussing in the ESTree repo.\nOnce we standardize on that, the discussion about acorn/babel/esprima/Espree becomes irrelevant because they'll all produce equivalent output that JSCS expects.\nIn the meantime, I'd like to avoid modifying JSCS to accomodate the different formats. If someone wants to make an adapter that converts acorn/babel output to match Esprima, and then provide that as a custom parser, great.\nAlso, we should be working to have JSCS take in a serialized AST or an AST in memory as input so that JSCS doesn't even have to do parsing if another tool has already done it.\nAgain, the problem lies in the fact that we rely on the non-standardized portion of the AST.\nEsprima is also under active development, and had support behind it as well, (full disclosure: I'm on the Esprima team), and is in active discussions with Acorn and Babel around standardization. Esprima also is almost at full ES6 support and has plans soon thereafter to provide plugin support for JSX. \n. :+1:\n. These are es5 getters.\n. :+1: feel free to land.\n. :+1:\n. I'd like to focus on Esprima 2.3, and getting feature complete there rather than fixing this issue.\n. Thanks again for contributing! @zxqfox I'm not a huge fan of having to pass a callback. That puts the responsibility on individual rules to have to reimplement the same mechanics which should be abstracted away by the assertion API.\n. @rwjblue I'll be working to get spread into Esprima this week hopefully.\n. There is no need to switch away from Esprima. Full ES6 coming very soon and JSX plugin ability right after that. Espree folks are participating in Esprima meetings about possibilities of unforking and @nzakas has said several times the goal is to make Esprima unnecessary.\nIf you want to help make JSX in Esprima a reality, come to the Esprima team meeting at 2PM EST today in #esprima-meeting on freenode. \n. Sorry, I meant to say the goal is to make Espree unnecessary. \n. There is currently no canonical indentation style, which is why it's absent from the validateIndentation rule. There are open feature requests for this already, and I'll be tackling it soon! Thanks for contributing!\n. I think the \n\"disallowIdentifierNames\": {\n  es6: [],\n  es5: []\n}\napproach is likely best here.\n. Thanks for reporting as always! I'll look into this soon.\n. I think we should put out a patch release addressing autofixing issues, then get to work on 2.0.\n. I think it's a good idea to have a team meeting in irc for this. \n. it.only was commited accidentally.\n. We can always make sure that the first parameter is the same as the object of the member expression.\n// bad \ng.apply(g, arguments);\n// good, we can't be certain that apply is Function.prototype.apply\ng.apply(arguments);\n// good\ng(...args);\n. There are bare block checks in the indentation rule that you could extract. \n. Leave esprima for now.\n. Also, don't bump major versions for now.\n. disallowNodeTypes\n. FWIW, I'm against adding this option. The current options for this rule are for unavoidable situations.\nThe point of this rule is to force contributors to introduce line breaks in these situations.\nAnyway, that's my two cents. We'll see what happens if there's a pull request.\n. I'd prefer another minor release before we jump to 2.0. I'll discuss more over gitter, but I wanted to mention it here since it was mentioned in the dexdription. \n. Why do we check for anything other than binary expression? Seems like unnecessary complication of this rule. If we're concerned about false positive on string + string, then we should at most make it be string + !string rather than a list of node types being added. \n. Hmm... I think we can take @brzpegasus 's suggestion without having to introduce a new option. \n. Thanks for contributing! We'd be glad to accept a patch for this!\n. The validateIndentation code doesn't consider arrow functions yet. I'll fix this.\n. @zxqfox, yes it can be done but I don't think it's necessary for this issue. Something like adding validation for call expressions or arrays are more appropriate for that though.\n. Thanks for contributing! Yes, it's possible for these two rules to exist together by having the requireAligned rule to only verify alignment and not location of the colon.\n. Can we just check for string literal + non string literal? Why have a list of types?\n. We'd also need the ability to specify the name of a file if it's received as stdin or as a temp file (which some linters do... most notably sublimeLinter.\n. :+1: bravo. Will review more attentively later today, but just wanted to hop on and say job well done here.\n. esnext was a term used to describe es6 back in the \"harmony\" days. It is no longer a useful description of any language feature. If anything, we should either switch to a version flag (considering new version every year), or have a stage flag which allows the user to opt into features at different stages of acceptance (this is what babel does). \n. Why are we moving to ES6? What are the benefits at the moment? All I'm seeing is what the challenges would be?\n. > We gain the ability to dogfood our es6 rules and get more hands-on experience of what our es6-centric parsers currently support\nThis is a decent reason.\n\nPersonally (and other community members might share the sentiment), I want to write more es6 on a day to day basis to learn more about it\n\nNot a reason for a project to adopt a technology.\n\nAs a module author, I'm also very curious about the process of babel-ifying a tool that's distributed on npm.\n\nNot a reason either.\n. What are the potential downsides for es6?\n. :+1:\n. @hzoo thanks for the ping! How can I help?\n. I'm curious as to why we check the first parameter at all. This should still be caught by the rule:\nfunction foo() {\n  a.apply(d, arguments);\n}\nbecause it can always be changed into\nfunction foo(...args) {\n  a.call(d, ..args);\n}\n. I see... former me was only partially right :-)\n. because my former comment: \n\n// good, we can't be certain that apply is Function.prototype.apply\ng.apply(arguments);\n\nis an OK heuristic, but we can be fairly certain that:\n\ng.apply(b, arguments);\n\nis Function.prototype.apply\n. Thanks for contributing! This rule exists and is called disallowMultipleLineBreaks http://jscs.info/rule/disallowMultipleLineBreaks.html :-)\n. We could also use escope if we're interested in scope analysis.\n. On it. \n. @khaledkbadr can you point us to a public repo that this fails on? If we had a repro case, we could debug this much faster.\n@mrjoelkemp we may what to try the v8 profiler to see if we can detect a memory leak. tutorial here: https://github.com/felixge/node-memory-leak-tutorial\n. @mdevils would be great if you could join the CST discussion happening in estree/estree#41 because a lot of this work will be moving directly into the Esprima and Acorn parsers themselves. Looks good to have a reference implementation to point to though!\n. I don't think this should be merged into master without at least having a discussion with the estree folks.\n. We should probably change our in checks to != null checks. \n. Yes, I thought we should do verbose by default because new users when configuring need this info.\n. The parser must still produce Esprima output as of the moment. This seems more suitable of a change once parsers output a common CST. \n. Thanks for contributing, @destroyerofbuilds . Seems we should publish a airbnb-es5 preset. Thoughts /cc @markelog @hzoo @mrjoelkemp \n. This is still a :-1: from me, and :-1: I believe from @mdevils . @mdevils care to weigh in?\n. Yes, we should leave shell copies of the old rules that throw one error: this rule has been renamed to ... so that users can migrate easily, with full removal in 3.0\n. But there was also a whole lot more renaming we were going to do for 2.0, but now that we haven't released in so long, I fear its counterproductive to do this now as it'll delay a 2.0 for longer than it's already been delayed. This is at least one reason I wanted a 1.14\n. :+1: to @markelog 's last comment. jscs --upgrade-config ?\n. @jacksonrayhamilton thanks for contributing this patch. I'd like to defer this work to 3.0 while we refine our deprecation strategy.\n. @jacksonrayhamilton no worries. We keep it pretty loose, there's a lot of opportunities for the occasional misunderstanding. No harm, no foul by submitting this PR. Thanks again for contributing.\n. Thanks for contributing! I'm curious as to what the failing tests are... Otherwise, seems reasonable. Good work here. \n. @markelog lets try 900 files.\n. :+1:\n. Esprima 2.5.0 brings with it all remaining ES6 funtionality. Technically, this is for a minor version considering it has new features, and some may consider allowing es6 grammar when they haven't asked for it to be a bug.\n. :+1: \n. :+1:\n. @arschmitz you should add es3: true to the config on top of the preset.\n. Expected an identifier and instead saw 'float' (a reserved word). is from JSHint I believe.\n. :+1: from me\n. @ottumm thanks for contributing! what about tabs within strings or comments?\n. :+1:\n. If we're adding this, also remove unused from jshintrc please\n. I'll review. I had a certain vision for how this should work, so I'll add more thoughts here about it as well. \n. Another casualty of rules that use iterateTokens*\n. done, see https://github.com/mdevils/node-jscs/pull/118/files#diff-5534590ed977560001e0429459f5b777R25\n. good catch!\n. fixed!\n. Needs type and values\n. Values: Array of quoted keywords\n. \"all\" -> \"all\", \"allButNested\" -> \"allButNested\"\n. \"all\"\n. \"allButNested\"\n. \"all\" \"allButNested\"\n. \"all\"\n. \"allButNested\"\n. allButReserved\n. \"allButReserved\"\n. Turn this into an unordered list.\n* `_` (underscore.js)\n * `__filename` (node.js global)\n * `__dirname` (node.js global)\n. Missing type and values.\n. *\"all\"for strict mode,\n. *\"skipWithFunction\"ignores objects if one of the property values is a function expression,\n. *\"skipWithLineBreak\"ignores objects if there are line breaks between properties\n. remove */\n. remove */\n. provide valid example.\n. provide valid example.\n. \"CR\"`, `\"LF\"`, `\"CRLF\"\n. Provide valid example.\n. \"\\\"\"\n. \"'\"\n. \"\\t\"\n. \"\\t\"\n. \"smart\"\n. \"smart\"\n. \"smart\"\n. this\n. var that = this\n. Convert the options here to be like the other rules that have multiple options. Perhaps instead of headings, it can be a list.\n. \"jquery\"\n. can you improve this text while you're here touching this?\n. can you improve this text while you're here touching this?\n. safe \"this\" -> save a reference to \"this\"\nMike\nOn Tue, Feb 11, 2014 at 5:25 AM, Marat Dulin notifications@github.com\nwrote:\n\n\n) {\n                 errors.add(\n-                        'You should use \"' + keyword + '\" to safe \"this\"',\n-                        'You should use \"' + keywords.join('\" or \"') + '\" to safe \"this\"',\n  Which text do you wish to get?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/mdevils/node-jscs/pull/225/files#r9623212\n. I really like this approach.\n. Surely there's a way to do this using commander that doesn't require empty options, right?\n. in detail, not in details.\n. Can you add // -> to this line?\n. unused variable. Remove.\n. unnecessarily incremented. Remove.\n. Correct me if mistaken, but I think you can now use true if this is a complete list of the available operators for this rule. \n. There are numerous examples of yoda conditionals in the jQuery code base. Whatever results in a smaller byte size.\n. you want the default keyword to be followed by a curly brace?\n\n\njs\nswitch( a ) {\n  case: a=b;\n  default: return; // oops! this is an error!\n}\n. Please use a nested describe to group tests together rather than this comment. \n. Nested describe here too. \n. \"The matching is case insensitive\". \n. Do we have defaults listed this way elsewhere?\n. Now that you have a nested describe, you can put this duplicated configure call into a nested beforeEach. :-) here...\n. here...\n. and here. See maximumLineLength rule if you're unfamiliar with nested beforeEach.\n. Rather than remove all of these assertions, perhaps add one or two negative assertions showing that directly checking a file ignores extensions.\n. Interesting idea, but please remove this. The committed code shouldn't include code you wrote while debugging.\n. Please remove this, as it's unnecessarily defensive.\n. Please remove.\n. no need for only parameter.\n. no need to save off describe now that only won't be a param.\n. Not in our JSCS config just yet, but we don't do onevar. Single variable per line please :-)\n. var entities = isObject ? node.properties : node.elements;\n. entities is guaranteed to be an object with a length property, change to if (entities.length) {\n. it('should not report block scopes (#368)', function() { \nalso, notice the no space between function and (. Ironic that for some reason we don't have this in our own .jscsrc.\n. isn't this assertion covered by other tests?\n. if so, please wrap this in an if { or something so it continues to prove that block scopes aren't wrongly reporting.\n. this title is still a bit too generic. Perhaps split into two separate its:\nshould not report block scopes (#368)\nshould not report array access (#368) \n. this._currentRule = '';\n. rule: this._currentRule,\n. setCurrentRule: function(rule) {\n. this._currentRule = rule;\n. Sets the current rule.\n. @param {String} rule\n. errors.setCurrentRule(rule.getOptionName());\n. Last change. We don't use onevar but don't yet enforce this ourselves. Please use two var statements here please. Thanks!\n. @mrjoelkemp https://github.com/mdevils/node-jscs/issues/500\n. @mrjoelkemp please rebase now that I did #500.\n. Remove done\n. Remove done. \n. @mrjoelkemp, should this be skip or ignore? I don't know what most of the other rules do, but let's see what's most consistent and use that.\n. I know this was just moved, but drop this assert. Only need to assert === true, which happens next line. \n. Move this below the assert please, and simplify to: this._skipSingleValue = true. \n. Not a blocker, but you may want to separate this out into its own describe and add another it proving it still errors when there are two elements, and when there are zero elements. \n. Lowercase please.\n. Is there anywhere \"more official\" than a gist that lists this style guide? \n. No space for unary operators. \n. disallow, not disable. Please amend.\n. no need for typeof. Just the assert.\n. fix name here.\n. node.loc.start please.\n. .isEmpty() instead please.\n. .isEmpty() instead please.\n. .isEmpty() instead please.\n. Include both rule and error as assertions please. \n. > I don't need to test that the config only affects a single file because a new JsFile object is created per call of checkString.\nBut that's an implementation detail. I still think you should test that the config only affects one file. You know it'll pass, but it'll prevent possible future regressions. \n\nI don't need to test that files without the config work, because the entire suite passes.\n\nAgreed. \n. Let's make the config actually JSON. That way you can just trim the comment and send the data that appears after jscs: to JSON.parse. \n. Look at JSFile.getComments. No need to grab it from the AST here. \n. comment.trim().indexOf('jscs: ') === 0\nI plan on having jscs:enable, jscs:disable, jscs:enable:ruleName.\nChecking for the : will disambiguate. \n. I think this changes the config for the rest of the run, no?\nNeeds a way to revert the config after the file is done being processed. \n. I may be mistaken. Let me know. \n. List the actual rules you're overriding rather than the preset here. It's clearer and not prone to becoming invalid if the google preset changes. \n. remove the unneeded tokenHelper here.\n. remove the unneeded tokenHelper here.\n. this is a named function expression. move this to the next it.\n. this is a named function expression. move this to the next it.\n. round bracket -> curly brace\n. round bracket -> curly brace\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. newline between each it please. I apologize for the inconsistency of the existing code, but please address.\n. The check for return here is not needed. Please remove.\n. If we were to move this inside of cli, it would read args.length === 0. However, it mostly like makes sense here as the bin file is about collecting input and passing it to the cli. \n@mrjoelkemp perhaps you can add a comment explaining why you're looking exactly for 2. \n. We may also instead want to check process.stdin.isTTY which seems to be the canonical solution for detecting piped content. \n. So, this works for //<ARBITRARY WHITESPACE>jscs:disable and /*<ARBITRARY WHITESPACE>jscs:disable*/ and //<ARBITRARY WHITESPACE>jscs:disable<ARBITRARY WHITESPACE>rulename<ARBITRARY WHITESPACE>,<ARBITRARY WHITESPACE>rulename.\nThe only thing disallowed is //jscs:<ARBITRARY WHITESPACE>disable. \nIs this acceptable?\n. no plans to currently allow inline reconfig, only enable disable. You can also configure the entire file at the top, a.k.a. what @mrjoelkemp did, but changing the value of a rule mid script doesn't really have a use case that I can see. \nAlso, it produces non trivial weird errors when code in one spot can effect violations elsewhere, like with indentation.\n. Even if we want inline re-config (which we should wait till someone even asks for it), it'd be fine to defer that to 1.7 or 2.0, but it's not something I want to encourage.\n. I think I covered that above. Not currently allowed.\n. if you really think it should be there, I can add it.\n. I found this to be the easier way. Also, this function is being called in the constructor. Not good enough?\n. all would be disabled. I'll add a test.\n. meh, I'll add it now.\n. I think our only option here is to save a hashmap of rule names  to rule constructors inside of StringChecker.registerRule, so that way when we detect a file specific config, we can construct new instances of those rules with the config specified, and replace them in this._activeRules.\nThen afterwards, swap back in the original rule instances to this._activeRules.\nThis allows us to not have to worry about managing lifecycle events when we're in a specific rule.\n@markelog thoughts?\n. Lastly, this doesn't belong in string checker. Rules are disabled for specific regions of specific files. Modifying activeRules is not correct because that disables for the whole file.\n. Oh, cool, I missed the significance of\n\nYes, we do :-)\n. findPrevToken\n. findNextToken\n. this is great. Just what I imagined.\n. What if an argument other than filename was specified?\n. Oh. Good.\n. Consider switching this to a guard clause to reduce nesting level. Gets a bit hard to read. \n. Why is this line needed? You're saying this is only for non-declarations?\n. Can't multiple nodes have the same start range?\n. I don't understand the special case. You're early returning whenever there isn't a member expression?\n. This says \"if it's not ] or it's not a member expression to return early?\n. I see what this is doing. Unfortunately, I think this decision is opinionated and limits user choice. Perhaps instead of listing the tokens we want to allow, we list the node types we want to allow, the change would be : FunctionExpression, ArrayExpression, ObjectExpression, and MemberExpression instead of token list. \n. Hmm. Program and whatever the first node is?\n. Would be better if it was getNodesByRange, which would then provide ample control.\n. new line above.\n. new line above.\n. new line above.\n. please use !isEmpty\n. This isn't true. You should enumerate the values for true\n. These aren't necessary, nor is the file heading with author and version information. You'll notice that none of the other files have it. \n. Typo. \n. Too much whitespace. Please look at other test files to see how much whitespace we use. \n. No need got done if this is synchronous. \n. No need for done.\n. You don't need to compute the values two ways. While that is a way to do it, it creates too much cruft in this test suite. Simply make sure the values are what you expect them to be. \n. No need for done. \n. Why is this necessary?\n. Unnecessary. \n. Unnecessary. \n. is this necessary?\n. Not needed. \n. Not needed. \n. Not needed. \n. Please don't expose these on the prototype. \n. Please don't expose these on the prototype. \n. Don't add random whitespace. \n. Don't add random whitespace please. \n. Remove from prototype. \n. This function is simple enough to inline. \n. considers*\n. as the number\n. All the JSHint annotations aren't needed. Also remove use strict. \n. This var shouldn't mention colon. \n. Neither should this one.\n. Avoid Yoda conditions: -1 < tabPos should be tabPos > -1\n. This algorithm can be much simpler. Take the substring of the line up to the colon. Then count tabs using regex: var tabCount = lineSubstr.match(\\\\t\\g).length  Then add tabCount * (this._tabSize - 1) to the original pos. \n. One man's abstraction is another man's overabstraction.\n. Your editor is not configured correctly to pick up the \"node\", \"mocha\", and \"forin\" settings we have in our .jshintrc.\n. Our jshint config specifies \"forin\" true, we allows use of for in without own property check. Please fix your editor. \n. Yes, I am sure. I am also fine with that test failing and the developer having to update it over the lack of clarity computing it introduces.\n. lets call this (require|disallow)SpaceBeforeObjectValues\n. Please update the assertion message to reflect the new value.\n. please revert this and the changes made to require-curly-brace.\n. save linesToCheck[loc.end.line - 2] off into a variable please.\n. use an early return here instead: \n\nif (indents !== 0) {\n  return;\n}\n. Why is there a second iteration through all switch statements?\n. meaning, there is an iteration happening above already. A second pass shouldn't be necessary.\n. early return please to avoid nesting too deeply:\nif (childNode.type !=== 'SwitchCase') {\n  return;\n}\n. if this value is so that only the first BreakStatement is marked, you can use array.prototype.some instead of forEach. Returning true out of a some stops future iterations.\n. early return here again please.\n. no space between function and (\n. no space between function and (\n. no space between function and (\n. indents = (childNode.loc.start.column === caseChild.loc.start.column) ? 0 : 1;\n. Rather than binding this, save off a strictMode var. it's not our formal guide, but there's no other binds in the codebase. \n. this and the next line are repeated in each it. You should extract them out to a describe with a beforeEach to avoid duplicating the setup each time.\n. Yes. @mrjoelkemp is right. Those old rules were unnecessarily validating Boolean separately.\u00a0\nThe first message about Boolean isn't helpful, because false isn't accepted.\u00a0\nMike Sherov\nOn Thu, Sep 25, 2014 at 1:29 AM, Mathieu SCHROETER\nnotifications@github.com wrote:\n\n\n@@ -0,0 +1,42 @@\n+var assert = require('assert');\n+\n+module.exports = function() {};\n+\n+module.exports.prototype = {\n-    configure: function(requireSpacesInCallExpression) {\n-        assert(\n-            typeof requireSpacesInCallExpression === 'boolean',\n  Yes, but the message is not the same and you have already several rules with the same assert like:\n- (require|disallow)MultipleLineBreaks\n- (require|disallow)CommaBeforeLineBreak\n- (require|disallow)DotNotation\n  etc, ...\n  Then, are you sure?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/jscs-dev/node-jscs/pull/650/files#r18015455\n. rather than switching to a for loop with break, we could just switch to Array.prototype.some, and return true inside the function, when max is hit. You can assign the result to maxErrorsHit, and use that to append the \"max errors hit message\".\n. I'd add an error here, so that all reporters get the error saying the max was hit. Then I'd add another conditional for Errors._errorCount > Errors.maxErrors to return false, so that the \"max error\" error only gets added once ever.\n. If you take my suggestion about max errors adding an additional error, no changes to this file are needed.\n. arbitrary whitespace.\n. Too many errors... Set the `maxErrors` configuration option to see more.\n. stylistically, we require new lines at the end of every file.\n. Can you comment above this saying something like // Assume that if the test starts on the line following the parens,  that the closing parens is on the line after the end of the test. \n. how about endLine++; I think it's a bit clearer as to what's happening.\n. move this line up.\n. meaning, move the entire if above the var declaration.\n. newline before this line please\n. newline after this line please\n. newline before this line\n. new line before this line\n. new line before this line\n. can you leave a comment here explaining why we need to explicitly enumerate each rule. I know it's for browserify, but would be good to have that noted in the code.\n. return true instead of undefined, and change description to say \"false if the add limit was hit, otherwise true\"\n. oh, yeah, agreed.\n. is there any reason not to move this behavior up into StringChecker?\n. I still think the max errors exceeded itself should be an error, like in JSHint.\n\n\nIn fact, I still contend that all info from JSCS should be reported as style violations, like we did when deprecated rules or converted the errors from esprima. \n. \"opening parenthesis\" instead of \"round brace\"\n. Thought about that.\nPassing harmony in here means users of StringChecker directly can't get es6 support without bringing their own version of esprima.\nI agree the maintenance costs are slightly higher to have a boolean option, but this makes it easiest for our users.\nIf we're concerned that our built in harmony will get out of date, we can always tell users to bring their own version, but I don't want to lose this convenience.\nThoughts?\n. I believe this should exist inside the configuration module\n. Please use allowed.forEach as it's a bit clearer. \n. Remove String from docs so people use except in the future and abandon allowSlash. \n. Remove allowSlash from docs and examples. \n. Please also file an issue to remove allowSlash in 2.0. \n. that works too.\n. This should be done inside the options configuration module. \n. Please remove this. Release notes are generated right before a release. \n. This should be a path, not a module name.\n. Should be a path, not a module name. \n. Revert this change here. This should be done in the options/esprima module. \n. This is why I need to see some tests :-) Currently, passing a string here will explode, no?\n. why is this necessary?\n. remove it then. :-)\n. this can just be if (typeof program.esprima === 'string') {\n. this can just be } else if (typeof config.esprima === 'string') {\n. Seems like the actual require should be done inside lib/options/esprima.js so you can also add code there to gracefully fail should the require fail.\n. same note as above.\n. esprima is called inside inside Checker, which is fine. Note that a few lines up from it's call site, you see process.cwd().\n. This belongs in your personal global .gitignore, not in our repo's. \n. Combine the two conditionals into one. \n. I'd really prefer path only here, lest we start accepting functions for everything that is path based. \n. Just want to make sure it will be \"easy\" to turn this into a style error in the near future.\n. lots of delegation... perhaps at some point, remove the middle man?\n. comment no longer valid.\n. right before this, we can do:\nif (typeof rule === 'function') {\n  rule = new rule();\n}\nThis would avoid having to do:\nconfiguration.registerRule(new (require('file'))());\nand allow us to do:\nconfiguration.registerRule(require('file'));\n. to be as generic as possible, rather than disallow or require, I was envisioning the API to allow you to specify 0,1,\">1\" as possible values, and call the function spaceBetween\n. if you used my idea, this would be errors.assertSpaceBetween(file.getPrevToken(token), token, 0, 'Operator , should stick to previous expression\n. None of our rules currently need it, but have been requests for this functionality. Also, I would use it at my own company.\nFor example, some style guides say to align object values:\n{\na:  value,\nab: value\n}\nwhile others would say \"exactly one space\":\n{\na: value,\nab: value\n}\n. Just to clarify, I meant the 3rd value is \">0\"\n. Please turn the options into a list now that there are 3 options each with a sentence explaining them \n. Move this above var x = 1; and rename the vars to a, b. \n. This comment is now incorrect / incomplete. \n. I don't think its a dupe because it's for a different option, no?\n. Not \"function\". .jscsrc should remain a config file, not an implantation file, IMO\n. This is fine and a good description, but perhaps \"writing a filter and writing a reporter\" belong elsewhere in the docs. \n. [] -> <> please. \n. Hmm. Why is this passed in as a constructor arg and not loaded in with other config options? Or am I missing something?\n. Seems like this function should simply be called filter. errors.filterErrorList is redundant. \n. Nothing seems to be using this. Get rid of it?\n. Seems like this should be passed to Error constructor, rather than passed to Error.filterErrorList. \n. No conditional logic needed outside if the filter function is internal property of Error object. \n. OK.\n. I believe there is already a helper function for this.\n. please change this message to: semicolons are disallowed at the end of a line.\n. remove this comment. It's superfluous\n. remove this newline please\n. is !els ever hit? If not, remove it.\n. also seems !els.length is the same as els.length <= maximum considering maximum is always >0\n. remove this variable.\n. seems like these 2 loops can be done as one. Also, please use forEach to avoid unnecessary variables.\n. var lastLine = 0;\nels.forEach(function(element) {\n  var curLine = element.loc.start.line;\n  if (curLine === lastLine) {\n    errors.add('Multiple elements at a single line in multiline array', {\n      line: curLine,\n      column: element.loc.start.column\n    });\n  }\n  lastLine = curLine;\n});\n. fair enough\n. is this supported for estraverse?\n. This comment seems incorrect\n. seems like a stray space here?\n. Not all options are overridable. I'm maintaining backCompat here. \n. To maintain backCompat. There was an explicit test in StringChecker allowing NaN to not cause a crash. Is that archaic now?\n. Believe it or not, backCompat. \n. Re: two commits. I couldn't simplify overrides without also fixing maxErrors. If you notice, there is a cast to Number in the removed code from cli.js\n. I made this an options hash because I plan on also making tabSize a file level option and didn't want to go adding more and more formal parameters.\n. fair enough, I'll do that then.\n. es3 will be off by default in 2.0. I purposefully excluded it from the default behavior test so I don't have to change it in the future.\n. At a later date, we may consider revising this? I suppose I should just leave an issue, and not put the todo in code. Amending.\n. Examples are backwards. \n. Use a forEach instead of for loop please. \n. Don't do this here. Do this at the point of detection. \n. Use for notation here and all the places you currently aren't. \n. I don't think we should check for case and default. Arbitrarily long lists of statements, including multiple blocks can be children of case or default. They are in no way tied to the control structure, despite people occasionally thinking so. \n. Remove this comment. \n. Remove comment. \n. Remove\n. Remove. \n. Inline this object directly into the error.add call. No need to define as empty object first, nor even assign to a var. \n. This error message should say what the required value is. See other rules for suggestions. \n. What if the word TODO appears twice in the same line? You'll only report one error...\nWhich I think is fine, but it highlights the fact that getting the exact location of the offending word is probably not important. You could simplify this rule greatly if you just reported the start of the comment as the error location.\n. because then you're creating multiple line breaks which throws off disallowMultipleLineBreaks\n. yes. that's right.\n. agree with @zxqfox\n. why var not a function declaration?\n. why not function declaration?\n. why not function declaration?\n. this should a member property, not a global variable.\n. this is the wrong thing here... need to bind up.\n. }, this);\n. }, this);\n. especially considering leveraging the fall through:\nwitch (true) {\n  case Array.isArray(disallowKeywordsInComments):\n    keywords = disallowKeywordsInComments;\n    /*falls through*/\n  case disallowKeywordsInComments === true:\n    this._message = buildMessage();\n    keywordRegEx = buildKeywordRegEx();\n    break;\n  ...\n  default:\n    assert(false, ...\n}\n. You should do this check inside of the getCommentErrors function so your not searching and then matching. Just match and there are zero matches, return empty array.\n. Do one describe per option value. Right now you are only testing true. Likely why coverage is listed as going down.\n. function declaration instead of assigning to var here please.\n. Why create this variable? Just name index lineIndex in the function params. \n. If you initialize lastIndex to -1 instead of 0, this whole line is just lastIndex++. \n. No need for foundAtIndex, just assign directly to lastIndex and use it everywhere you used foundAtIndex below.\n. <= -> ===\n. Make sure to test the string option, because I think it'll never get hit.\n. ... extend({}, this._configuration.getEsprimaOptions(), {... so that user can't overwrite the required options and that the passed in options aren't modified.\n. Also, _extend isn't documented Node API. Might be better just to use a forin here.\n. remove\n. combine with previous line.\n. combine with :218\n. combine with :220\n. we should consider making this part of the default.\n. this._esprimaOptions = {};\n. before this, Add var sinon = require('sinon'); to the top of this module, then: sinon.spy(customEsprima, 'parse');. Also, don't pass esprima into the construction, pass it in via checker.configure, which is the preferred way.\n. Just checker.checkString('import { foo } from \"bar\";');\n. remove retrieving and checking the error.\n. Instead assert(costumEsprima.parse.calledWith(expectedOptions)) which checks literally that the right options were called.\nOnce you have that set up, write a few more tests: \n1. one where you provide no options and see tolerant is used.\n2. one where you provide options that aren't overwriteable.\n3. one where you provide tolerant and see it's overriden.\n4. one where you provide arbitrary options see that they're used.\nP.S. see http://sinonjs.org/docs/#spies if you need more info on spies.\n. Thanks!\n. @alawatthe I agree variable should be case sensitive match. With regards to hash lookup instead of indexOf I agree with @mrjoelkemp that our idiomatic way is using hashes instead of array lookups. Please change.\n. move this and the next line back into a top level beforeEach, and only have the configure call in each inner beforeEach.\n. This belongs in your personal global .gitignore, not in our project specific one. Please remove.\n. Read my notes below. It tests that the correct options are passed into the parse function by spying on the parse function.\n. Perhaps this update should move into a separate PR to address #952 ?\n. file.getLines.forEach(function(line) {\n  if (line.match(/^\\s*$/)) {\n    linesToCheck[i].check = true;\n  } \n});\na bit more concise to just forEach.\n. figure out how to avoid the duplicate assertion here... perhaps:\nthis._includeEmptyLines = (validateIndentation.includeEmptyLines === true);\nvalidateIndentation = validateIndentation.value;\ndropping the else, and then just asserting after?\n. Ah, good point! Comment withdrawn.\n. will do.\n. This should be extracted to utils too. This same \"if relative, then resolve\" code is in 4 spots. \n. Do you put a final .catch here for unexpected errors? Or this handled by the code this promise is returned to?\n. Combine this and the next two thens. If you want to use functions for clarity, go ahead, but no need for multiple thens, it's just noisy.\n. You avoided _this everywhere, why not here? Just pass this as second arg to forEach. \n. Yes.\n. Needs a test. \n. Needs a test.\n. Needs a test.\n. Actually, this and next 3 thens.\n. This is still wrong, as it'll miss:\nif (a) {\n  a = [\n    'b'\n  ];\n}\nInstead, count the number of statements inside the block statement, and error if it's 1.\n. Move this check into isBlockStatement rather than calling it after every time.\n. It SHOULD report this!\n. This is correct.\n. This is wrong. \n. Remove. \n. This line will always be true if isSingleBlockStatement is true, and can therefore be removed.... right?\n. just call checkForMember(node.parentNode, errors); here;\n. just call checkForProperty(node.parentNode, errors); here.\n. ditch this variable.\n. ditch the variable.\n. are these todos done?\n. Update this.\n. Just doublecheck that this is replaced everywhere it can be.\n. Remove spaces: 1 to maintain backCompat.\n. A code style linter for programmatically enforcing your style guide.\n. Yes, it needs to be kept only for the require case, because otherwise else if... would need to be else { if... because technically that else doesn't have curly braces.\n. But that also means we should add a test for else if to this PR in the require-curly-braces suite so we don't lose coverage should we ever remove the preset tests.\n. This test should actually check that it returns registered presets. The fact that it's a middleman is implementation detail. \n. Same middleman comment. \n. Then either undelegate the method or copy the test from configuration. \n. Why is this line changed? Seems no different to me? @am11, are you using correct line endings?\n. Right, only certain rules where it's common to have comment blocks in between (such as function arguments) should we consider them. But again, I think it's beyond scope of this pull request. @zxqfox, file a new issue for that please.\n. why is this removed?\n. why isn't this line just: var punctuatorToken = file.getFirstNodeToken(param); previously it was var punctuatorToken = file.getTokenByRangeStart(param.range[1]);?\n. never mind, I get it.\n. please change this to: assert(checker.checkString('if (x) { x++; } else if (x) { x++; }').isEmpty()); it is misleading otherwise.\n. remove this test, it's not needed.\n. Good point. I'll change that.\n. I think copy/paste is worse in this case. I'm going to leave it unless you have strong objection.\n. @zxqfox, if that's valid JSDoc, I'll use it.\n. Yeah, tokens can't overlap. Nodes can. It's safe. Will make your other suggestions. \n. Agreed. Simple enough to promisify it yourself manually.\n. as @markelog pointed out, this seems wrong. You still need to call autoconfigure on a set of files.\n. Indent is off here. \n. just return here.\n. just return here.\n. this whole block is: return node.parentNode.finalizer === node ? 'finally' : 'try'\n. just return here.\n. just return here.\n. just return here.\n. just return here.\n. This whole block is: return node.parentNode.alternate === node ? 'else' : 'if';\n. remove this var.\n. remove.\n. no need for this function, you can consolidate this into the checkSpecificTypes function.\n. again, no reason for separate functions. Consolidate them down to one check\n. All the comments I made on the other file apply to this one as well.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. do this in a beforeEach for this describe.\n. remove newline please.\n. do this in a beforeEach for this describe.\n. all comments from previous file apply to this file as well.\n. still can consolidate this into one iteration over BlockStatement, no reason to split the two.\n. if (setting === true || setting.indexOf(type) !== -1) { and then the outer if/else goes away.\n. Possibly unnecessary if comment tokens already have a \"type\".\n. Hooray! There's an open ticket for this btw.\n. Also, can clean up the JsFile tests now that JsFile has a parse function.\n. I see. OK, then. Perhaps do this step inside buildTokenList so that an additional loop can be saved?\n. obvious, but remove this.\n. hmmm, perhaps instead of a static call to JsFile.parse, we simple move the parse call into the constructor of JsFile, along with passing this._esprima and this._esprima as options to JsFile?\n. } while (--index >= 0);\n. remove line.\n. perhaps gaurd clause instead to avoid 4 levels of indent below?\n. no need for else if the line before is early returning.\n. same comments here as function above.\n. perhaps make this a guard clause at top instead?\n. OK, we can talk about this another time because it's actually not relevant to the rest of the work you've done here, and I don't want to take attention away from it.\n. padding newline before each it. I know this is inconsistent elsewhere, but that's what we've decided on.\n. Yeah, @ariya would frown on our use of the boolean trap. However, this is more for pragmatism than anything else at the moment.\n. I suppose technically, the range of this should be: range: [this._source.length, this._source.length], zero length.\n. I suppose this, and the best of the function body here, should move into in JsFile.parse too. You're doing one too many copies of the options.\n. It's probably fine either way.\n. might be a good util: isKeylessProperty(node)\n. Move this out to jscsrc\n. Move this out to jscsrc\n. @zxqfox, if we want to actually go the performance route, we should add some perf tests and establish a perf budget. Otherwise, we're just guessing that this is slow or an actual bottleneck.\n. http://jsperf.com/string-concat-vs-array-join-10000/15 suggests that this doesn't matter.\n. how many times did you run this?\n. I just ran the same thing you did and got:\nmaster\nreal    0m9.353s\nuser    0m8.401s\nsys 0m0.313s\njscs-dev-mdevils.autofixing-token-data\nreal    0m10.031s\nuser    0m8.752s\nsys 0m0.415s\nWhich is a negligible difference. But then again, BOTH of our results are invalid because they are not rigorous done by a perf testing framework, which exist and we should integrate if we care about this sort of thing.\n. Furthermore, we have no idea where the bottleneck is in this case. I seriously doubt it has anything to do with this line.\n. BTW, no need to apologize! We should integrate perf testing.\n. Let's move this discussion to a new issue.\n. remove this variable...\n. just use options === true here.\n. remove add whitespace\n. place this assertion inside the if (isObject) { block so you don't have to say !isObject ||\n. this would be wrong if a user inputs an empty array.\n. please revert the moving of these declarations. There is no reason I can see to not initialize them here.\n. early return here instead of executing everything else: \nif (exceptions[splitComment[0]]) {\n  return;\n}\n. that means no need for isException variable\n. undo these unnecessary modifications.\n. remove added new line\n. remove this line\n. remove this line\n. @ashclarke, you're right! actually\n. you can leave as is\n. sure\n. yeah, revert the message. Exceptions are assumed :-)\n. exceptions.every\n. just declare this at the top of configure so you don't have to do || {} later.\n. see my note about || {} above.\n. much better :-) now, right !?\n. That the fix for one rule causes a violation of another.\n. Doing 5 attempts is suboptimal. We can likely do the following instead:\n1. Instead of counting the number of attempts we made, count the number of violations remaining.\n2. Keep looping as long as fixes > 0 and violations < violationsOfPreviousRun. \nThis ensures that we keep fixing until it's no longer helping, which will break a cycle after 1 iteration, not 5, and in the rare case where you'd have to do more than 5 iterations, it'll keep going until it's not helping.\n. Yes, but this modification should likely only happen if fixing is turned on.\nEventually, rules might actually be checking the whitespaceBefore property, and if we unconditionally change this whitespace, than overlapping rules will fail to report an error at the same location if we're not in fix mode.\n. You mean 1 fix increases violations for next run? I see.\nWhat about the case where more than 5 runs are needed? I doubt such a case exists, so this is fine for now I suppose.\n. Not conflicting rules, complimentary rules. For example, our spacing rules typically ignore tokens that are on the next line.\nIf a \"disallowNewLine\" fix moves the token onto the same line as the previous token, it may now be in violation of a \"disallowSpace\" rule.\n. Well, think of it this way. If we both modify whitespaceBefore and use it for checking, then we avoid a lot of cases where two full runs would be needed.\nImagine a \"requireNewline\" rule and a \"requireSpace\" rule that both report on a { at the end of a line...\nIf we had rules check the whitespaceBefore property, then a fix for requireNewline would make requireSpace ignore.\nIf we don't, then 2 passes must happen, one fixing the spacing, while the second pass finally moved it to the right spot on the next line.\n. Anyway, we can defer this discussion till later, especially consider this is all consolidated to one spot considering we have this nice assertion layer.\n. @mdevils can you file an issue that we should revisit this later? I don't want it holding up the PR, but I don't want to lose track of the action item.\n. there is now iterateTokensByTypeAndValue... please use it.\n. perhaps make this an early return now that it's an if enclosing almost the entire body of the function?\n. I would encapsulate this as a method in error object: hasFixes. The break inside the code here is confusing because it breaks out of the for but not the do.\n. @mrjoelkemp checking the file automatically fixes the whitespace, which then is realized by rendering the file.\n. @mrjoelkemp here is where the fixes are reapplied back to the source, as a result of a parse on the next line.\n. @gero3, thanks for the insight. And thanks for the initial nudge. Even though we didn't end up going the \"format function\" route, your initial PR was invaluable. Thanks again!\n. Ah, @mdevils, here is where it writes files. Sorry I missed it!\n. This should be an object instead of an array. \n. If excludes is an object, this becomes:\nif (excludes[parentNode] === nextToken.value) {\n. !onError.called here and everywhere you're using once to test that it wasn't called. \n. Yes. \n. why isn't this exactly: 0?\n. how is this fixed?\n. this should be atLeast: 1\n. you shouldn't have to subtract 1 here, and then the other comments I made will make sense.\n. It would still be linesBetween. It's impossible for there to be -1 lines between.\n. I would say two, because my editor would say:\n1) var x = 2;\n2)\n3) var y = 3;\nIf the -1 case is weird, the 0 case is just as weird.\n. This should now be linesBetween\n. This should now be linesBetween\n. This should now be linesBetween\n. This should now be linesBetween\n. This should now be assert(!onError.called);\n. this is sameLine :-) ! It's using linesBetween under the hood.\n. yes, atMost: 1 there can be either 1 or 0 newline characters between the two tokens.\n. this should remain a ' ' in the case where the two tokens joining would result in nonsense, e.g.:\ntypeof\na === 'function'; // perfectly valid\n->\ntypeofa === 'function'; // syntax error\n. no, the better thing here is this._tokens.\n. Not sure why you nested this and the following two tests under space rules?\n. This and the next 4 lines are over indented. \n. Is the spy needed in each of these tests? If not, please remove. Thanks!\n. Remove this unnecessary whitespace change. Thanks!\n. One last nit. This should be called getFirstToken instead, because the File is redundant. Same goes for getLastToken. \n. I should have been more clear. Are the event listeners needed either? Remove this line in each test if not.\n. Ok. Thanks!\n. I called it getLineBreak because there should be consistent line breaks in a file.\n. This should be optional. allExcept: 'firstInBlock. \n. Also, this isn't really correct as it allows inside Objects, which aren't blocks, but I suppose it's fine for now. \n. Yeah, that's why I mentioned it :)\n. Default should be the version without exceptions. Principle of least surprise. \n. We prefer tilde, can you please change that?\n. Unless it's the Program node, every single one does.\n. typo.\n. Just about BC, this code will go away in 2.0\n. This is the same as how linesBetween is implemented. It allows you to reverse the tokens if needed.\n. existing language. Don't want to change it just yet.\n. I suppose I could beef these up.\n. line 268-270.\n. Matter of personal preference.\n. This is a hold over from the fact that you can pass in nulls, and it shouldn't cause an error. This is copied from linesBetween and I'll consolidate them further in a future followup but won't change behavior for BC.\n. much better. Finally, using the ast as expected. ;-)\n. @TheSavior 's solution is correct in that it won't barf on top level blocks. However, I don't think we need to add any options.\n. Should we explicitly check for get and set as the values of the identifiers?\n. Yes, it's fair to the user. Better they see the error reported rather than it being possibly swallowed by their IDE.\n. I think this should happen regardless of verbose flag. Reporting issues is not something that should be dictated by a verbose flag or not.\n. when is this case hit?\n. I don't think we need this check. The parser will throw up before we ever get here, no?\n. Perhaps use something like what is found here: fef808ea42809fb7ea8d9244913bfcb478c55313\n. That approach will also catch other cases like: return void(0);\n. right.\n. By the way, perhaps we should disallow this identifier name... If only we knew of a linter that provided this functionality.... ;-)\n. Weird that you didn't need to update tests because handlers was an array where as handler isn't. \nCan you please double check? Also, wondering if we should backCompat this until 2.0?\n. This should be an error not a warm considering this is2.0\n. perhaps coverage-report?\n. On purpose?\n. Explain why or remove comment. \n. missed one.\n. ",
    "markelog": "\nany idea when you'll be tagging 1.6.0?\n\nShould happen on this week\n. Do you oppose to the feature in general sense? Or it could be implemented for node environment?\n. If anyone would help us with this ticket, it would be great\n. At this point only major and CST related bugs will be fixed\n. That works for me. Great.\n. +1\n. @mikesherov still looking at this?\n. @jzaefferer yes, it's on my list, although there is couple more issues with jscs and grunt plugin that has to be fixed before i can work on this ticket. \n. @mikesherov hey! i want to do cool things too you know :-).\nI also wanted to work on this in this week, how about if i fail to get time on it, you would pick it up?\n. js\narray = [ a, b ];\nobject = { a: b };\nAlready supported by requireSpacesInsideObjectBrackets and requireSpacesInsideArrayBrackets rules.\nBut there should be abilities to check for cases like these:\nif(...), for(...), while(...), catch(...), switch(...), case(...), with(...), FE, FD and etc; plus function calls.\nWhich would be easy enough to implement as antonim of disallowSpacesInsideParentheses, like requireSpacesInsideParentheses. \nBut problem with it, is that parentheses could also be used for grouping, for that case it's preferable to check for absence of extra spaces, i.e. this case \u2013\njs\nfor ( ; (elem = elems[ i ]) != null; i++ ) {\nshould be valid, but this one shouldn't \u2013\njs\nfor ( ; ( elem = elems[ i ] ) != null; i++ ) {\nIn style guide mentioned above, this case is not explicitly included, but it will be, if it could be automatically checked.\nSo all that could be done with rules like these \u2013 \njs\n\"requireSpacesInsideParenthesesForKeywords\": [\"for\", \"function\"],\n\"requireSpacesInsideParenthesesForFunctionsCalls\": true\n// or with possible object value like this \u2013\n\"requireSpacesInsideParenthesesForFunctionsCalls\": {\n    \"exceptForClosestPunctuators\": [\"{\", \"}\"], \n},\n\"disallowSpacesInsideGroupingParethenses\": true\nOr something less verbose or contrariwise? \nBut such tactic (especially with disallowSpacesInsideParentheses rule at hand and possible future opposite rules for those above) would contribute to bloatedness of current options.\n@mikesherov, @mdevils thoughts?\n. Oh, yes, empty parentheses should be treated tolerably, similar to requireSpacesInsideObjectBrackets and requireSpacesInsideArrayBrackets.\n. @jzaefferer \nThe jQuery style guide used to have exceptions for nested parens, those were removed\nit's not about nested parentheses, it's about parentheses that used for grouping and grouping only, nested parentheses still require spaces. \n@mikesherov custom rules and custom presets are nice, but i think it would be cooler if jscs would at least support \ngoogle, ours and idiomatic code styles right from the start, as they are most used code styles as far as i know.\nAnd they could be a good examples for what you can do with jscs. \n. Only allows no spaces if you use \"allButNested\". \nNo actually :-)\n. @jzaefferer \nDo requireSpacesInsideObjectBrackets etc. accept [] and {} as valid?\nYep.\n. No, we need something that can separate grouping parentheses from all other ones also we need an exception mechanism so we could do: \njs\n// Function with a callback, object, or array as the first argument:\n// No space before the first argument\nfoo(function() {\n    // Do stuff\n}, options );\n. > I think this is a perfect example\nThis exceptions are exist in idiomatic and jQuery code styles, mediawiki probably could use that to in some way, so i wouldn't say so.\nWhat rules are redundant? What rules are needed? What rules should be added to jscs and what rules should be used only as plugins? \nThose are difficult questions, right now, we're subjective about it - we might think some rules are needles or otherwise, but we don't know for sure, we don't know how much people using them or how much people would be using some perspective new rule.\nI guess the best way to differentiate them and be objective, is to judge if some popular preset needed it, if it does, then it should be added. No? Use a plugin then.\nPretty simple and easy to understand for rule writers. I would employ this strategy for any new possible rule that could be proposed to jscs core.\n@mdevils thoughts?\n. > Not saying it belongs in a jQuery plugin. I was saying it belongs in the jQuery preset as an additionalRule.\n\nperhaps even living in that subdir so the preset loads its own special rules\n\nBasically, what i'm proposing that if you can't include rule in some of the presets then it shouldn't be in jscs, but if some preset is incomplete without some rule then it should be available in jscs, because it's definitely needed, whereas we can't use phrase \"definitely needed\" for rule that is not used by one of presets.\n. So you see, presets could be a measure of importance/popularity of the rule\n. @mikesherov I guess this should not be a different rule but extension of *SpacesInsideParentheses\n. Will definitely cover https://github.com/mdevils/node-jscs/issues/406 and https://github.com/mdevils/node-jscs/issues/402\nThat is pretty bad-ass problem (grouping parentheses i mean), try it do before, but didn't get anywhere, if you like, you can take a swing at this.\n. No, it was a mistake, that commit addressed that issue only partially\n. @mdevils done\n. This issue has been open more than a month without supported PR for it. \nUnfortunately, we don't have the resources to implement rules that could not be included in any of the supported presets (if it could be, please point that out).\nHowever, if you or anybody else submit PR for it, we will gladly consider it.\n. Check this out - https://github.com/jscs-dev/node-jscs/issues/807\n. This is awesome\n. First one is done, second is #129\n. How would one differentiate between real node module and built-in preset config? How about check for the built-in first?\nAlso not sure about the first step, we could easily check it presence through require method itself.\nBrowser version should still be able to work with built-in presets, so it might require to disperse preset logic between string-checker and checker modules.\n. Can take this one if @zxqfox don't mind\n. @zxqfox preset option might be simple alternative to the plugin interface, so it would be easy to share such configs without digging into the API.\nBut i agree, it looks like creating plugin is easy too.\n@mikesherov thoughts? \n@sindresorhus would love to hear your opinion about that too.\n. > I'm not against some sugar for presets. Feels like it would be very helpful for preset makers.\nIt might be, or it might be duplicative. Not sure\n. @zxqfox i'd like to take over this one with https://github.com/jscs-dev/node-jscs/issues/1083.\n. Nope, proposed pull for it, considered as not back-compat, so only in 2.0 :-(\n. Relates to #92\n. @mikesherov no :-(\n. Sorry, i was operating under the assumption that hooker dependency already there.\nFixed.\n. We need to add either new option for binary rules that deals with ternary operator, or add new rule that deals with ternary operator. \nAnd deprecate disallowLeftStickedOperators and disallowRightStickedOperators altogether and warn if user uses them.\n. See #124\n. It seems we can close this?\n. Because:\n1. jshint is pretty slow of removing style related options, \n2. no ones likes to document things and because \n3. this open for a year now,\nI think it safe to say this will never be documented. Plus footnotes at the rules page http://jscs.info/rules.html is more or less enough\n. > I'm not sure if I can fork jscs\nYeah, you can, just don't do it from master. It's better to always use another brunch for PRs since master could be updated earlier then your PR became merged and then it would be hard for you to update it.\n. @Famlam \n\nvia bower.\n\nThat's the thing, in order to do so, we need builded version of jscs in the repo, but we can generate it only during the release and push it only with tag commit without including that commit in the master branch i.e. you will be able to download it without using npm or bower.\nFollow https://github.com/mdevils/node-jscs/issues/458 for more information on the progress of that issue\n. This issue has been open more than a month without supported PR for it. \nUnfortunately, we don't have the resources to implement rules that could not be included in any of the supported presets (if it could be, please point that out).\nHowever, if you or anybody else submit PR for it, we will gladly consider it.\n.  it would create strange side-effects \nThese \"side-effects\" is a feature, as it said in documentation preset option extends already defined rules.\n wasn't intended\nIt was intended.\nnow finds 2 errors\nEdit: Actually it does find only 1 error.\ntest timing out\nI assume you referring to the case when you single out this assertion? This behavior was introduced in this commit, looks like this test assertion is a tricky one, since it so prone to error, i would remove it entirely. \n. Fix the trailing space, augment jshint options and add warning comment for this test.\n. I would advice not to do this, JSON as a format does not allow comment nodes, if jscs would, it would not be JSON anymore.\nBut you already can do this, .jscs.json is just a default filepath, you can pass an c option, like this: jscs ... -c yourconfig.js and inside yourconfig.js:\njs\nmodule.exports = {\n    // super cool rule\n    \"rule\": \"value\"\n}\nand no offence, but proposed change is a hack and an ugly one.\n. +1\n. As it said in documentation, jscs should be used with jshint, so i would suggest not to update jQuery preset or any other future preset with duplicated options of jshint unitll 3.0 is released.\nOf newly added options i don't see any \"new\" ones.\n. @nschonni yes, i know, all newly added rules duplicate jshint 2.4 options, we should wait until 3.0 to be released, only then we should update jQuery preset rules so there wouldn't be any identical checks for the same thing.\n.  Are you concerned about the computational overhead\nI don't think it would a big deal at build process but it might be significant at build process in watch task, since we talking about adding 17 rules here.\nMigration to jscs would be easier\nI think it would be easier to wait at least until doc for migration process will arrive, so you would know (or someone else) exactly what  jshint rules to remove. Since again, 17 rules, it's easy to make a mistake.\nAnd besides, what is the hurry? 3.0 should come soon enough, plus, i hope, additional rules for jscs should be added at that time, they should be a nice compliment to jquery preset, instead of continuously update jscs dependency with new preset rules and, as a result, the code base, it could be done as one action.\n. It will be, we just have to be careful and sure new rules will cover all cases of *StickOperators\n. @nschonni if you mean replacement of onevar and removal of *stickedOperators rules, then yes, but i'm gonna do that pretty soon anyway :-)\n. This issue has been open more than a month without supported PR for it. \nUnfortunately, we don't have the resources to implement rules that could not be included in any of the supported presets (if it could be, please point that out).\nHowever, if you or anybody else submit PR for it, we will gladly consider it.\n. What you purposes we do here? Are you satisfied with changes from #167?\n. Sorry, i didn't understand your request, perhaps you could provide valid/invalid example?\n. Closing for now, since owner is not responding\n. Okay, seems valid and relevant to disallowCommaBeforeLineBreak rule.\n. It is valid i guess, but now for disallowSpaceBeforeBinaryOperators rule, perhaps we should create separate issue for it\n. Replaced by https://github.com/mdevils/node-jscs/issues/467\n. See discussion in #152\n. preset option extends already defined rules, so you can do \u2013\njs\n\"validateLineBreaks\": \"LF\",\n\"preset\": \"jquery\"\nI really don't want to implicitly duplicate identical checks by two different tools, again see my comment, we need at least have documentation for migration. \n. Just like you said, it's not about jQuery Core, some other projects could be using this, like jQuery UI which is using it. jQuery Core config is without preset option because new release is around the corner and we need a clean path to it. \n. @leobalter jshint is still not removed it, which means we're still waiting :-(, i'd say we should wait a little bit more and then proceed regardless of jshint commit speed.\nJust a reminder: you always can extend the preset, with jscs or yours additional rules \n. @mikesherov, as a fellow jQuery team member \u2013 what is your take on this?\n. It's settled than - jQuery preset will be updated\n. Superseded by https://github.com/mdevils/node-jscs/commit/8762dffcc12286db4138a5efb2fe56a30cf1cbb6, thank you @nschonni \n. You have problems with indentation, could also update readme file?\n. I think one example is enough for readme, rule is pretty much self-descriptive.\nHow this corresponds with asi option of JSHint? it's not being dropped as far as i know.  \nThe opposite rule might be helpful though, but if JSCS would have disallowSemicolon rule, it's better to have requireSemicolon too. So i would land this if we would have both, but this open for discussion.\n@mikesherov, @mdevils?\n. Don't warn on every semicolon, just on ones that you described in the PR description, maybe we would need to change the name of the rule, but i fine with the current one, but perhaps explanation of it should be more verbose.\n. Opposite rule should do only opposite checks, this is why i noted \u2013 \nmaybe we would need to change the name of the rule, but i fine with the current one, but perhaps explanation of it should be more verbose\nBut this could go another way too, i'm just considering options here, since esprima AST is verbose enough to catch cases you mentioned above. But only way i see to land this is to create the opposite rule.\n. Perhaps we could reconsider this, if the opposite rule would be presented\n. I closed it because it's a duplicative rule of jshint asi option, we recommend use jscs with jshint and that's why we usually don't do rules like this. \nThe only way i can see to land this, is presented it with conjunction with opposite one, but i already said that.\n. Yep, would you like to rebase this or open a new PR?\n. Fixed via https://github.com/mdevils/node-jscs/commit/d36c4727cc35a551ec5f0a0b8601d75808756975\n. nor can\nYeah, it can, tokenization could easily depend on the context, in many language implementations it's precisely like that, but it's implementation question, it could go either way.\nAs for our temporary fix, where we change the type of each token, that seems dangerous.\nHow so?\nIt's us. We shouldn't be using the token list without inspecting the context of each token.\nWhat I think we should do instead is make a token helper function that can traverse keywords, inspect that they aren't actually identifiers, and then perform a check, rather than directly modifying the token list.\nOr we could do that, sure, but as i downside it would be really alike with this, it just would be another construction for it, and it will complicate interface of js-file module and logic of rules, since it would too specific.\n.  if I wanted to make a rule\nThen, you would have to analyze the context, yeah, it's just what you purposing to do here but the in opposite way, so i would use that logic for the fictional rule then for real ones :). I think it's just more useful that way, since more rules could simplified like that, that's why we usually use tokens. In other words, we would have complicate and change a lot of stuff to do it otherwise and yet we still could do that.\nI don't like to change response from esprima too, this is why i did PR to esprima first and explicitly called this fix a temporary one, but as it stands right now, i don't see any danger in it. \nLogic of esprima dep is another question entirely, but i don't see a contradiction with parseObjectPropertyKey function.\nWe'll see\nThat's exactly right, it's essentially what i propose to do, It's not a blocker to do it like that, so we can improve the solution later, but we can fix it now, so i would choose the latter. \n. This guy \u2013 https://github.com/marklog must be really surprised :-). Will check this out in the weekend, but it looks like we should move it to another branch.\n. we need ability to turn off a rule +1\n@nschonni i appreciate the effort but we really need to agree on the new format (if we would do that) first, i would hate if all of time spent on this would be for nothing. \nOriginal ticket was not only about changing value of existing rules but also to make them more consistent with each other. Also i wouldn't want to deprecated anything at this point, but provide layer on top, but again, it would depend on the new format, maybe we even should create a different documentation for it.\n. @nschonni perhaps i sounded a bit dismissive, we might go with this approach, i don't know frankly, but in any case it's good to provide a proof of concept\n. This issue has been open more than a month without supported PR for it. \nUnfortunately, we don't have the resources to implement rules that could not be included in any of the supported presets (if it could be, please point that out).\nHowever, if you or anybody else submit PR for it, we will gladly consider it.\n. @shobhitg parenthesis also could be used for grouping, which is hard to deduce, also in some cases comma could be valid, there is probably more details, are you up for it?\n. @mikesherov what you take on this one? As i stands right now, we should prioritize .jscs.js and support .jscs.json as well. \nRelates to https://github.com/gustavohenke/grunt-jscs-checker/issues/20\n@tivac do you want to do this?\n. No hurry, in fact, it probably would be better to wait @mikesherov opinion anyway. \n. agreed? yep!\n. Your tests are falling.\nkinda dodgy for me\nWe gonna fix #144 one way or another.\nvalue which is necessary for this sort of code to be properly tested\nWhere did you override it? It's definitely not necessary.\ndecide we no longer care about the json\nIt's not gonna happen for very long time.\n. What if your module would return config itself, then a path to it? If we do the https://github.com/mdevils/node-jscs/issues/201 or something like that in the future, it could be more helpful.\n. We just talked about it, yes, new approach is more preferable.\nPlease add test for case when you specify the config file but it's not exist, at that point we should throw a error, but not silently take the default one. And for the case when default config does not exist, we should correctly return a error message too, maybe you could even add more tests like that of your choosing, but don't forget about preset option.\n. @tivac \nSorry for the delay.\nLooks good, although i would have done it differently, not sure about this chdir business though. \nNow there is another relevant PR \u2013 #213. @qubyte maybe you guys could work together? \n. How does that sound?\nit sounds great to me :-)\n. Oh my, well we could think about it, although i'm not sure to just comment out the ones they don't want is a good argument for it. Relates to #196 \n. If disallowLeftStickedOperators is deprecated i would remove it entirely and put requireSpaceAfterBinaryOperators instead.\n. disallowLeftStickedOperators is duplicative for all cases, except for ternary operator, - is just the case where it get's ugly, so it probably better to delegate all it's options except for ?: on other rules.\n. There is number approaches that we can take, for example ?: is ternary right? But isn't \"?\" a binary one? I know it's weird interpretations, but if so, we could just put it to our binary rules.\n. Besides, we have only one ternary operator, it would be a weird rule :-)\n. Would you like to do it?\n. We have a lot of issues to attend to, but it's on our radar, any help would be appreciated\n. huh, maxlen sounded like as easy as it can get :-(\n/cc @mikesherov\n. Sorry, i should have thought about this earlier, let's not change .jshintrc but .jscs.json with disallowTrailingWhitespace rule.\n. Check the result of the output, that's exactly what i talked about \u2013 looks like this test assertion is a tricky one, since it so prone to error, i would remove it entirely.\n. No, i mean with current changes the whole testsuite is falling and i'm inclined to say we should remove it completely, it looks like that this approach is too flaky, but you could try to find more stable way to do it.\n. Would you like to do this?\n. We could follow logic of jshint here again, but five (instead of two) default reporters and path otherwise. But in any case, solution for this should be approved by @mdevils.\n. > But it would break the existing implementation unless we allow all three of the following\nSee http://www.jshint.com/docs/cli/. It has two predefined reporters, we have five, that would be only one difference, so it wouldn't be a breaking change, but i'm not sure if we will go that way.\n. @am11 please look closely at link i provided \u2013\n\njshint --reporter=checkstyle myfile.js\n\nOr you can also specify a path to it, we too have checkstyle and another four reporters, please don't make me explain this for the fourth time.\n. We should be able to do it after the seventh February, maybe earlier.\n. Great idea\nIf the move of configuration to package.json was too aggressive a change, please let me know and I can put them back.\nyeah, but only because some IDE linters would not find this config in package.json\n. Didn't test it, but it looks good! @tivac if you notice something, let us know.\nThis pull request now integrates the commits from\nYeah, but it it conflicts with current master, but i can fix that, will do it soon.\n. Could you also update readme?\n. > I can rebase it on top\nI doubt we would have the same situation, but it would probably better to do a rebase but not merge if we agree upon it.\nOkay, it's landed, nice work you guys. Go team, happy thoughts and all that :-)\n. cc @mikesherov\n. Thank you\n. @nschonni is right, it's dup (we should really speed that thing up), format is still undecided.\n. So you want to establish some default values for the specific rule, but not for the set of rules?\n. \"logout the rule with information about error\" what do mean by that?\n. Okay let's focus on #224 then\n. cc @mdevils \n. You could move repetitive line checker.configure({ requireBlocksOnNewline: true }); to beforeEach hook, plus rebase would be in order, otherwise it looks good.\n.  it has no effect\nit should throw\nIt's already doing that.\nLogically when the type is Boolean, shouldn't false be regarded as disabled (equals to non-existence in this case)\n@am11 no, we use a different format i.e. if you don't need that rule - don't mentioned it and i suppose you don't need a disallowLineFeedAtFileEnd rule?\n. So i suppose we should add --verbose argument to cli module too?\n. Shoot, will do\n. cc @mikesherov\n. Please create new issue and please use english and be more verbose.\n. @am11 thank you!\n. This is stuff is not implemented in jshint, but they have a ticket for it \u2013 https://github.com/jshint/jshint/issues/832 that apparently would not be solved, so i guess it's on us now\ncc @mikesherov \n. Alrighty then, landed, thank you again, although i'm not a fan of sorting this kind of stuff, but it will do.\n. All right then, ping us, if we could provide help on our side\n. Same applies to excludeFiles option, would like to fix that as well?\n. Merged, thank you! \n. Duplicate of https://github.com/mdevils/node-jscs/issues/218\n. @am11 i guess you meant https://github.com/mdevils/node-jscs/commit/a90547d9f955a59cdc64158ed89bc69494900630 \n\nwhich is scheduled any day now\n\nShould happen tomorrow, if @mdevils would not be to busy.\n@jonathanong if this was an issue then i'm closing it, if not, ping us up.\n. Tests would nice addition, but keep in mind that we're not sure we will go this way. \n. Rebase, add tests. Also this logic looks convoluted, two nested try...catch, two require('./reporters/' + program.reporter) plus change in behavior for colors and reporter logic, and you try...catch something that might not be specified at all.\n\nso we can fix it before the tomorrow's release?\n\nI see what i can do\n. > Rebase\nRebase with master that is\n. See discussion in https://github.com/mdevils/node-jscs/pull/254\n. Help me understand this, if don't use braces, you only allowed to use one statement, so if return foo(); is valid, what should be invalid? \nfoo();? Or foo() && bar();?\nor this \njs\nif (key.charAt(0) === '$' || isFunction(o1[key])) continue;\nshould be valid, but this isn't:\njs\nif (key.charAt(0) === '$' || isFunction(o1[key])) \n    continue;\n?\n. So, is there any takers for this one?\n. > Only allow one statement, such as return false;, return foo();, etc.\nThis sounds good to me\n. Cool!\n. js\n\"keywords\": [\"if\", \"else\"], \n\"allExcept\" : ['ReturnStatement', 'BreakStatement', 'ContinueStatement']`\nSeems inconsistent, this rule already maps those entities together, so it should be pretty easy to use same type of lists.\nGenerally it is good idea to distance from parser json\n. I meant if keywords has \"token list\", then it would be logical for allExcept to have the same, then AST entities\n. yeah\n. Usually it's done like that see \"Parameters With Properties\", but i suppose we could support this too.\n. > This is a real bummer\nIt is.\n\nI know it depends on esprima support for ES6 modules\n\nIt is.\n\nDupe of #165 maybe?\n\nIt is.\n. The thing is jshint has a \"default config\" is none is specified which is logical since it's looking for potential errors this is why it's interprets as 0 operation. \nBut jscs couldn't have a default options so i'm sceptical.\n. > does it?\nNo, but i meant to fix that\n. > Are you committed to supporting the package.json config option?\nYes\nI'm not sure if we need this kind of functionality, especially using the local version of jscs, looks like this issue either could be managed through peerDependency or through scripts properties, i'm not saying it's a bad idea, but this practise, to my knowledge, is not widely used, just like liftoff package, which creates possible risks for us.\n. > battle tested by thousands of users of Grunt for the past two years\nNot past two years, but only from 0.4 version, and it's not the same, there is two grunt packages one should be installed locally - grunt and one should be installed globally - grunt-cli. \nIf you run grunt command grunt-cli would search for local grunt package, if it's not exist it will not attempt to use the global grunt (which shouldn't be installed globally) package.\n\nBroccoli\n\nJust like with grunt-cli\n\nPlato\n\nThis is not true\nBasically, i'm just not sure what kind of risks this approach could bring, although this makes me more secure about this proposition.\n. We decided to wait on this, but @tkellen, we will revisit this later\n. @BryanDonovan i'm sorry, we received another pull for this, with right description and i already merge it, but thank you anyway!\n. This has been corrected, but new version is not published yet, @mdevils ?\n. Merged, thank you\n. We don't have jscs-module.js and readRealTimeConfig method\n. It does not fixes #258, but we still could consider changes for bin/jscs\n. @am11 Go to lib folder and do \n./../bin/jscs -c ../.jscsrc cli.js\nbtw, don't do PR's from master\n. > to allow reporter name without .js extension\nNot right now, this option is polymorphic enough, but we can think about it, we still can consider changes in bin/jscs\n. Merged! thank you.\n. @jzaefferer talked about it with @mdevils, after next release we will develop new staff in special branch, how is that sound?\ncc @mikesherov\n. > Along with the existing jquery preset, jscs would cover the two most common style guides\nI would very much like to have google preset, i talked with some devs about it, but so far no luck, i guess we would have to implement it ourselves, it would be nice to check out some project(s) that use jscs and google style guide, so we could start from somewhere.\n\nI'd use preset: \"noop\" and go from there.\n\nWhy? You could provide empty json config, which would do the same thing.\n\nI don't agree with the notion of \"But jscs couldn't have a default options so i'm sceptical.\" though, as outlined above.\n\nIt's more like \"doesn't have\" then \"couldn't have\"\n\nGoogle is default, jQuery preset is bundled\n\n@mdevils what you think?\n. After some back-and-forth we decided to do this, hope commander will be nice to us.\nAnyway, thank you @am11!\n. Merged, thank you!\n. Merged, thank you!\n. @vtambourine \n\nThat option can be very useful in various CI log outputs.\n\nsee\n\nthis matters should be deal with through tty module\n\nIf terminal has the ability to display colors it would do so, we just need to check that, we could also check for the specific env var.\n. Right now i'm thinking to switch to chalk and leave the option, but that would mean that user could not force colors output (if such option would be requested) if terminal does not support it.\nHow is that sounds?\n. Oh, i see chalk.enabled option, cool, switching than\n. Hm, apparently i speak to soon, our reporters can decide if they want color in their output, they do that by passing an additional argument to explainError method.\nBut in order to preserve current logic, we would need to change chalk.enabled value every time explainError method is called to the value of that argument, which mean it would have a side effect which it did not have before, since it would change state of chalk module.\nWe shouldn't do that.\n@sindresorhus is that possible to disable auto-detection of tty? Would you accept a PR for that?\n. Alrighty than, reverting\n. See https://github.com/mdevils/node-jscs/commit/c57be47f09a8b0fcd3474aa70fc3609595fa6f77\n. Merged! Thank you.\n. This was fixed, if problem persist in latest version, ping us up, and i will reopen this\n. This ticket isn't valid just like documentation is incorrect, which says that this rule is analog of onevar. onevar checks if there is only one var on function scope, whereas requireMultipleVarDecl rule report only if there nonconsecutive vars, which i think is incorrect \u2013 https://github.com/mdevils/node-jscs/pull/279\n. When new version will come up, you would need to change \njs\n  \"requireMultipleVarDecl\": true\nto \njs\n  \"requireMultipleVarDecl\": \"onevar\"\n. > The only way is to have this behavior as a separate value for requireMultipleVarDecl.\ndone\n. Merged\n. duplicate of #92\n. You didn't actually test anything, you defined the preset but didn't enable it, effectively disable all jscs lint checks :(, i mean, excludeFiles in the preset?\n. @jzaefferer In order to make preset works on browser side through the browserify we need to explicitly define it.\n. That is, it could be done in the generic way, like read every json file in the preset folder, but because we need browser version to work, we need to explicitly define them for the node version too.\n. >  apparently the person merging this PR didn't care either\nMy fault, right know preset and additionalRules options are tricky, and i was unable to check this since i was a bit busy at that moment.\n\nwhy did you remove the 'google' preset from the readme?\n\nIf excludeFiles option was missed, it makes me wonder if missed something else, doc should come back with new version.\n. Done in https://github.com/mdevils/node-jscs/commit/8a67862c6fd1b3d88dc16a7e6ab38ff128eea2ec, expect this in new version of jscs\n. Sounds good, @davidchambers jamesallardice do any of you guys want to send us a PR?\n. @jamesallardice, awesome! Thanks\n. @Krinkle, @mikesherov \n\nActually, timo, you're right. Nothing yet covers all.\n(though indeed not all)\n\nCould you provide a test case with code from master? \nWhy this\n\nCommas in general is addressed by _spaces_BinaryOperators: [\",\"].\n\nis not correct?\n. @mikesherov they do\n. Why wouldn't you create npm package for it?\n. @zxqfox \n\nHow? \n\nNot yet in the docs, but you could check out example here. Grunt plugin also has this ability.\n@wurmr\n\nIf you think it the wrong use/direction for this project\n\nI think it should be a plugin first, if it becomes \"popular\", we could merge it to the source.\n. @zxqfox \n\nHow? \n\nNot yet in the docs, but you could check out example here. Grunt plugin also has this ability.\n@wurmr\n\nIf you think it the wrong use/direction for this project\n\nI think it should be a plugin first, if it becomes \"popular\", we could merge it to the source.\n. mmm, okay, good \n. Yeah, that's cool :-)\n. @zxqfox is this on your list?\n. Is there a PR? \n. Cool, miss this one\n. > Should we drop 0.8 support?\nThere is some projects that i know that still use 0.8, for some companies (including ours) transition from the 0.8 could be painful, but on the other hand, 0.8 was released almost two years ago and there is still be old versions of jscs that they could use.\nAnyway, if \n\nApparently node.js 0.8 is not supported anymore from many deps...\n\nis the case, i say yes.\n. > $ npm view jscs version\n\nnpm http GET https://registry.npmjs.org/jscs\nnpm http 200 https://registry.npmjs.org/jscs\n1.3.0\n\nhm, @mdevils? We really should do all the dev stuff in the \"development\" branch\n. On second thought, let's wait until i will fix this, which should be tomorrow and then release \n. @mikesherov +1, do you need any help?\nhey @gustavohenke let's do a release right after jscs\n. Readme looks weird now, like we have only two options, search works for names of the rules only, it might complicate things, for example: if i would like to move from some of the JSHint to JSCS rules,\nhow i would understand what rules to add to JSCS config and remove from JSHint? Right now, this search is pretty much useless. \nOr what \"Disallow implicit type conversion\" means? Without open associated page, i wouldn't understand what this rule does, this pretty much true for every other rule.\nI think everyone agree - we need automatically generated docs, but if would do it like this, it would complicate things, would complicate things a lot. We can categorize rules or put them in the table - like jshint or eslint or even coffeelint. \nIn other words i think we need a different representation then this, right know, i don't understand how to use this docs effectively.\n. > We can iterate on improvements from there, no?\n\nin future\n\nBut not now, right now it could hurt us, i saw a lot of examples when \"bad\" temporary solution became permanent, i think at first we need better rules representation, simple table maybe? And rethink readme page, since now it looks confusing.\n. > hard to include here a more\nSo not \"more\" same amount, but different, simplier, at least this is my take on it.\n. > So, you want perfect docs before merging it to the master?\nNah, you misunderstood, what you have currently is already cool, but it's hard to use, in our docs explanation is pretty straightforward, but here, the doc path is a bit complicated, like a mentioned in my previous comments.\nRight now, only basic stuff would be enough, something from which we can iterate from, it would be great to change the readme entry so it would be less confusing and put all rules into a table on one page, these changes on your PR should be sufficient i think. We could go on improving the details later on.\n\nI'm sure, that you have a plans about it\n\nActually, strictly speaking, we don't have a roadmap, we should though.\n. > you want \nI rather suggest something simple, like in the links i provided in previous comment, but if you could do something better like bootstrap page, then i'm all for it.\n. > Do I think in right direction?\nI thinks so, couple of things though:\n\nIn English, titles (rules titles that is) usually written with first upper-case letter\nHome page is still looks confusing, for excludeFiles, additionalRules and preset, perhaps we should add a header with a note of explanation?\n\nI'm still a bit scared that user could have troubles with this doc, but it looks as good way to start. \n. It becomes stale pretty quickly, @just-boris it would be possible for you to update this? Want to land this as soon as possible, all and all pretty excited about it.\nBtw, could you add new line character at the end of every file you introduced? And also use jscs and jshint to the new files? But it's not biggie can take care of that for you. \n. @just-boris no one saying this is not useful, quite the opposite in fact.\nBut in 2.0 we will redefine all rules, so we would need to update everything. \nJust bringing this pull up to date would be a quote an effort. But if you willing to do that, then by all means!\n. There is a lot of work to do with this, maybe you could tackle this together?\n. Thank you!\n. A lot of problems with this one, first of all we already have spacesInsideObjectBrackets, spacesInsideArrayBrackets rules, this rule should not overlap with others (also see this comment).\nThere might be discussion to unify all of them, but i do think it's a good thing to be more specific, since it would give user a more flexible config, which is our goal. In other words this rule should only cover () case, there is also some problems with nested cases, but i will omit them in this comment, since it shouldn't be in this rule anyway.\n\nbut there are some points in that issue that are not covered - mainly the grouping.\n\nThis is important, this why i'm doing it so long (and i was a bit busy :-), i had similar code, but stumble on it, this rule should either not notice them or check them, as far as i remember, esprima does not give that ability, which is why this rule is a challenge, this why i can't merge this as is.\n. Talked with @mdevils about these inconsistencies, we inclined to soften requireSpacesInsideObjectBrackets rule for allButNested option, but instead represent this requirement with other option, which means we would need that option for all rules including this one.\nWhat do you think?\n. Loving this discussion, in other words you propose to soften allButNested option for the requireSpacesInsideObjectBrackets and add new option for the disallowSpacesInside rules, right?\nWould you like to tackle it? It might a good idea to do the explanation of relatinship between these rules in the readme, is that possible for to collaborate with @just-boris on the #327? \nSince we're talking about parentheses what is your thoughts about #92?\n. There is some minor problems, but i will fix them myself, intend to land this today.\n. Merged, thank you\n. I don't think we need this kind of functionality, this could be solved in number of ways, not to mentioned that this is pretty much an edge case, plus i hope autoformating would fix it all.\n. @angryzor Nicely done! Merged, thank you\n. @SevInf this week would be fair assumption\n. Need to push release date a bit, need to do https://github.com/mdevils/node-jscs/issues/366, https://github.com/mdevils/node-jscs/issues/402, https://github.com/mdevils/node-jscs/issues/405 and https://github.com/mdevils/node-jscs/issues/406 before 1.5.\n. Need to push release date a bit, need to do https://github.com/mdevils/node-jscs/issues/366, https://github.com/mdevils/node-jscs/issues/402, https://github.com/mdevils/node-jscs/issues/405 and https://github.com/mdevils/node-jscs/issues/406 before 1.5.\n. Merged, thank you!\n. \"requireLineFeedAtFileEnd\": null, just like it said in the doc\n. @jzaefferer hard to do, since every rule defines it's own exception, see this rule for example.\n. Can't do exactly like that, since for example logic for options is spread through modules, but we can do something like, but yeah, that would be my next move.\nWith this structure, i think it might be easier to try to do a new possible wrapper for new format.\n. Updated\n. @mdevils matter of the taste i suppose, it might be better if those files (modules) would not dangle like they do not belong - this structure give a more strict convergence of hierarchy, at least in my head it does :-).\nBut we could put them in the lib folder just like we could put tests for them in the root of the tests folder\n. Updated\n. I guess this idea was suggested to a lot code analysis tools, but the problem with that idea and reason why all, as far i'm aware, those tools has lack of that feature - it's because logic of it is elusive and fuzzy and all&all - pretty hard to implement.\nBut that said, we can start from the easy part (but still has to deal with a lot of icky stuff) and generate the rules (i.e. .jscsrc) from code example and add it as experimental cli option, then go from there.\nAlthough we have a lot on our plate right now, even above mentioned inline rules, should come up only in 2.1 (as it stands right now).\n. Yep, in the future we will avoid discrepancy like that, sorry \n. Sorry it took us that long, merged!\n. Nope, we don't know what your code style is, it's logical to provide defaults, say in jshint, but this is a code style checker.\nBut if you have something awesome in mind - please share with us.\n. @mikesherov \n\nfor each file being linted with these rules telling them to use the other rules\n\nWe probably should add those rules in the error message, or even not remove the documentation just yet, but add deprecation notice with explanation what rules to use instead, since this question comes up a lot.\n. We really should add all those binary operators to the test suite\n. Strictly speaking they are not bugs, since support for them weren't promised :-)\n. I think so \u2013 \n\nWe probably should add those rules in the error message, or even not remove the documentation just yet, but add deprecation notice with explanation what rules to use instead, since this question comes up a lot.\n\nThoughts?\n. @mikesherov sounds good to me\n. It looks like it does not matter how we go on about it, result still will be unsatisfactory :-(. We need to figure out some way for 2.0 to make a nice output for these kind of messages, given that we probably will have a lot of them.\n\nWe could make `configure` method of those rules to output these messages in the console, but that would be an ugly side-effect\nWe could leave those sticked rules in, but beside they usual message we could output these deprecation messages\nWe could throw, but output is ugly and plugins would silently break\nOr output deprecation message only for first lint file\n\nOf these options, i like the second one (although i don't really like it), i know we should be noisy about this, but removing them is too radical for my taste.\n. I didn't purposed to break anything, for me, this scenario is preferable \u2013 \n\nWe could leave those sticked rules in, but beside they usual message we could output these deprecation messages\n\nBut in any case, it's good to move forward.\n@mikesherov could you release the new version? It would requires you to create jscs-browser.js file, changelog, tag, etc; - see the scripts commands in package.json. If you do, please don't forget to remove warning in the readme doc before publishing.\n. Not very popular rule i suppose, would you like to tackle this?\n. *StickedOperators rules are deprecated now, use other rules for that\n. Not just yet sorry, but it will be, use *spaceBeforeBinaryOperators, *spacesInConditionalExpression and *unaryOperators, some of them not released yet, but we planning to do a new version of jscs today.\n. We use esprima, if esprima support something, we can too \n. yep\n. Please, read the link you provided \u2013\n\nFrom version 2.0, Esprima starts to support new features in ECMAScript 6.\nArrow Function\nSince: version 2.0. Specification: section 14.2.\n\n2.0 is not released yet\n. > Comma is not a binary operator\nSorry? It has two operands therefore it's by definition a binary operator. \nSee http://en.wikipedia.org/wiki/Comma_operator, http://en.wikipedia.org/wiki/Binary_operator, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Operators\n. > In that case, does this rule cover = as well?\nRight, will add it the next commit\n. @mdevils fixed\n. afk right now, but will get back to my desk in 10 minutes\n. @MikeKlemarewski  very soon\n. @MikeKlemarewski  very soon\n. New version is published\n. Thank you\n. Expect this in new version of jscs\n. > After that we need to update presets, remove doc for *stickedOperators rules and update the docs, then i think we would be ready for 1.5.\n@gustavohenke heads up, i think we could do 0.5.0 release, since these updates could generate new errors if users use ~ as version package number for grunt-jscs-checker, i remember about https://github.com/gustavohenke/grunt-jscs-checker/issues/20, but now i having doubts about it, what  do you think?\n. @mikesherov done\n. Yeah, was a bit busy, really hoping for tomorow\n. Tests?\n. undefined is not a reserved word and it's not a syntax error in old ie, but null is, add null to this list, remove change in lib/rules/disallow-quoted-keys-in-objects.js leave the test but only for null and we're a good to go\n. After merge had to change commit message a bit, so hashes are different\n. Superseded by https://github.com/mdevils/node-jscs/pull/336\n. merged\n. cc @mikesherov \n. We don't have support for 0.6\n. Merged, thank you\n. oops, wrong PR\n. What information should be here? Like how to run tests? Or how to deal with test runner? Something else?\n. All cases that your described could be accomplished through npm commands,\nLike \n\nHow to build the jscs project\nHow to instruct my application's grunt configuration to use the private build I generated in step 1 (functional test to ensure I really solved the the problem I am trying to address)\n\nShould be done through npm link\n\nHow to run tests\n\nnpm test, more info about it is here, so that is pretty basic stuff, in any case let me know if stumble on something.\n. Would you like to send a PR for this?\n. @zz85 that would be great.\n. Merged, thank you\n. Merged, thank you\n. Done for array and objects, replace by https://github.com/mdevils/node-jscs/issues/431 for parentheses\n. That's because they are two individual tokens, what is your use-case?\n. @mikesherov, great let's do that\n. /cc @mdevils @mikesherov \n. I think all maintainers know how to create right commit message they could modify commits by other contributors, whereas for new contributors commitplease errors might be a pain to deal with, which in turn would mean that it would hard for them to contribute to jscs.\n. > commit guidelines in the contributing guide,\nThat's cool, miss that.\n\nCan we close this?\n\nYeah, i will reopen, if someone from the team will disagree. \n. Re-opening due to @hzoo request \n. It is :-)\n. Landed in 02baa6c30b17e4221e1f811aa50b0ea2123d3661\n. Expect this in new version of jscs\n. Expect this in new version of jscs\n. Looks great\n. Already fixed \u2013 https://github.com/mdevils/node-jscs/commit/68eb571aa7fa4a1013a3f39750e928dde60c8c61\n. Hm, it does persist, could swear i fixed that\n. Merged, thank you\n. /cc @Krinkle\n. yep\n. btw, i already prepared PRs for jQuery Core and Sizzle which would fix errors raised by adding new rules to preset\n. Fixed in https://github.com/mdevils/node-jscs/commit/b30b4967d0920a210cdba168317b81415e16ab29,\nnicely done btw :-)\n. We covered arrays and objects, but exception for parentheses is still an open question, see discussion in https://github.com/mdevils/node-jscs/pull/333 and https://github.com/mdevils/node-jscs/issues/92\nAlso there is a common opinion (although it's not mentioned in the code style), that grouping parentheses should not have spaces, but for every other cases - they should, That's another problem, since esprima do not differentiate between them\n. #92 is basically a duplicate for this\n. Not sure what you're trying to say - npm is not our site to handle, sometimes it brokes down and amm, jQuery preset?\n. Fixed in https://github.com/mdevils/node-jscs/commit/dc2a4fa2dc32ac812f23dfe05444ed3ce0c2c24e\n. Sounds like a duplicate of https://github.com/mdevils/node-jscs/issues/244\n. That, and a lot of new stuff will be published today\n. Need to push release time again, will try again tomorrow\n. This is incorrect, i need to get some sleep.\n. I guess this is no need for that anymore\n. This issue has been open more than a month without supported PR for it. \nUnfortunately, we don't have the resources to implement rules that could not be included in any of the supported presets (if it could be, please point that out).\nHowever, if you or anybody else submit PR for it, we will gladly consider it.\n. Did you try it with current master? I added to test to both of these rules to make sure\n. nohow, unfortunately, we depend on esprima parser, esprima will have partial support for ES6, but only in 2.0 and that version is not released yet\n. Probably better to create new issue for it\n. /cc @mikesherov \n. sad panda and all that :-(\n/cc @joelrbrandt, @mikesherov \n. To clarify: this is pretty big regression, we need to either revert this or fix it today and release a new version\n. @mikesherov already on it, will publish in couple of moments\n. @mikesherov check it out \u2013 https://github.com/mdevils/node-jscs/pull/447\n. What is \"ios instruments style js\"?\n. As a temporary measure, until we will have inline rules, thank you!\nShould be out with 1.5.3\n. Merged, thank you!\n. Done, thank you!\n. We probably need to change names of these rules, now when i'm working on their logic i get confused every time :-)\n. We would like to fix this ticket for 1.8, @hzoo, @gustavohenke do any of you want to try tackle this?\n. Done, keep us frosty @jzaefferer :-)\n. Will be out with 1.5.3\n. Published\n. > it's easy to adapt the current error output simply number truncating the error array\nIt's an easy way yes, but i was thinking that we need a correct message for it, if we would output say 100 errors when there could be a thousand, without any message, user would thought that we found only 100 errors in total, he would fix one, and still get a 100 errors, he would fix 10 and... you get the picture, whereas people might not look in doc for it, similar to a problem we have with nulling rules of the preset.\n\nI'm not sure we can get away from reporting dropped rules in the normal error output without breaking the world\n\n2.0 and break stuff, like in Limp Bizkit song\n. @SgtPooki could you send us a PR?\n. Would you like to try to implement it?\n. Could provide the full test case and your config?\n. yeah, although it would be better if test case would be reduced as much as possible\n. No longer needed for jquery preset. \nIs anyone still interested in this?\n. I'm gonna take this one\n. Sorry for the noise :(\n. Although bower distribution not essential for removing jscs-browser.js file, we could do that at npm publish command\n. I think we need to do something similar to jquery-release here\n. We never received such real-world request, besides browser version has very limited use, so i'm gonna close this for now\n. Let's publish this as new 1.5.4\n. Will be more careful next time \n. Merged, thank you!\n. Created another ticket for that\n. Already on it\n. @globexdesigns I wonder, how do you use jscs in the browser, what is your use-case?\n. > Are you thinking of killing the browser build support?\nNope, just wondering\n. @LaurentGoderre as i asked before: please describe your use-case, link to the grunt config and what you expect to happen would suffice \n. > Can you let me know when it's published to npm ?\nAlready done\n. I'm not sure if i understand, grunt-task uses a checkPath only, but that might not be true for every other code that uses jscs.\nBut i believe that we're doing the right thing now, grunt-task by itself has integration tests btw\n. Will check grunt task with these changes\n. Improved, grunt task works okay\n. Will merge and release a new version\n. @gustavohenke Yes, for version 1.5.6 but not with these changes\n. First and second is https://github.com/jscs-dev/node-jscs/issues/895, consider it as sub-task to this issue\n. What is the use-case?\n. Yeah, should release new version today\n. Matter of fact, could you try jscs with https://github.com/mdevils/node-jscs/pull/477 changes?\n. Can we wait a bit here? Need some time to check this out\n. Not in favor of adding those integration tests, i don't understand what they are testing, i doubt that code could hit every rule and if not, why should we test against it? \nIn MDCS preset we consider to add a 6 thousands lines of code for integration test? Doesn't it sounds weird to you?\nWhat if didn't implement some rule for some preset code to follow and after we land that rule we would find a lot of errors, what are we gonna do then? Most people who created those code styles do not following them to the letter.\nI think we should test presets decoratively anything else sounds excessive to me. But as a middle ground we could ask to add some small amount of code but make that a suggestion not a requirement.\n. > Can we meet in the middle on this, @markelog, and call them required but make them representative and small?\nIf you think that is best way, than yes\n. >  all presets\nNot all, we will leave some built-in presets, but this is our plan, yes\n. Sounds good\nRegards,\nOleg\n\nOn 09 \u00e8\u00fe\u00eb\u00ff 2014 \u00e3., at 17:47, Mike Sherov notifications@github.com wrote:\n@markelog, I'm going to land this in a few hours unless you object further now that @mrjoelkemp has made the agreed upon changes.\n\u2014\nReply to this email directly or view it on GitHub.\n. Pretty sad :-( \u2013 https://github.com/npm/npm/issues/3059\n. How about we add ignoreComments flag? Would that be an acceptable compromise?\n\n@cowwoc would you like to try do it?\n. Cool\n. I would suggest put all logic to cli module - check if we have program.args === 0 if true than check stdin, we could even use something like this for it, although its not that complicated to do it ourselves \n. process.stdin.isTTY much better :-)\n. > are slower (they're yellow in color) since they use exec to simulate real command line usage\nWe can improve that later\n. +1\n. Are we good?\n. It's common to refer dot as an operator, although spec doesn't call it like that, so it's open for interpretation, but i think it's acceptable for requireOperatorBeforeLineBreak rule to handle case like that\n. @rachelnicole any news?\n@jdlrobson would you like to try and tackle this one? If you would implement it we could add to the \"wikimedia\" preset.\n. Re-opening for further investigation, @cowwoc would you like to take a closer look?\n. > Was there a specific reason that this wasn't done sooner?\nYes, unfortunately, the same reason why we need to explicitly require presets \u2013 browserification. If we could kick that off, a lot of things could be simplified but apparently people use browser version, i'm working on improving that stuff though.\n. Oooh, man, i wanted to do that :(.\nWe initially decided to wait with this until next version, since we gonna change rule names in 2.0\n. > I thought we discussed this.... I asked for feedback for things I had slated for 1.6, which included this?\ni said \"initially\" :-)\n. > It looks super interesting\nIt is indeed!\n. For what? I understand including the rule, but option? Could you just check your config?\n. So excited about this :-)\n. I believe it should be a separated npm-module, (see similar reasons in https://github.com/jscs-dev/node-jscs/issues/747) \nAlso we would need more information from the errors, like range resource is absolutely essential, we could do that either with new method of errors module or with new errors module altogether - https://github.com/jscs-dev/node-jscs/issues/453, if new module is used it would collect more data and then send it to errors instance in order to preserve back-compat, if need to be that is.\n. > I don't think it should be a separate module.\nBase parts of it could be, so it would be used somewhere else besides jscs, we're only about code style, but someone could use it for other things. That is the only reason why i think this should be separated.\n\nThere are ways to achieve this that you're not thinking of. \n\nYou mean without range resource?\n. > Perhaps, but I think we should focus on modularization a bit later. Features first.\nSure, moving it to the its own module is an easy part.\n\nIt depends. The way I had thought...\n\nI was taking about a different thing, right now, if rule find an error it would just pass its line and column to errors instance. But in order to fix things we need at least range data to identify the place in tokens array for further actions on it.\nTokens array should be augmented, no question on that.\n. I think there is a lot of ideas flying around, we need to play with some code\n. @indexzero only whitespace, eof and indentation rules are supported at the moment, there is no clear way to support others, more specific rules like disallowAnonymousFunctions or disallowCommaBeforeLineBreak, etc.\nRight know, we thinking, either specific assertions for every rule or this.\n. Autofix has been landed, other updates will be iterative, so if no one object, i would like to close this one. Will wait until tomorrow.\nAs a team, we decided to donate this money to charity organization \"Girls Who Code\" - https://girlswhocode.com.\nThank you everyone!\n. @difosfor https://github.com/jscs-dev/node-jscs/issues/1113 has potential, but there is concern of providing API for modifying AST, since there is obvious danger in that way.\nWe have this - https://github.com/jscs-dev/node-jscs/issues/1086 as at least one element of protection from ruining your code. \nWe need to be very careful here.\n. > But I don't like either of these\nSee: https://github.com/mdevils/node-jscs/issues/92, https://github.com/mdevils/node-jscs/pull/333\n\nWhere do I start?\n\nhttps://github.com/mdevils/node-jscs/blob/master/CONTRIBUTING.md\nhttps://github.com/mdevils/node-jscs/blob/master/MAINTAIN.md\n\nI'm happy to make a PR.\n\nAnd we would happy to look at it!\n. @tarmolov is this legit? @ikokostya sorry for asking, just wanted to know if everyone aware about this\n. Merged!\n. Would you like to do it?\n. Merged, thank you\n. Merged!\n. > This is a pretty impressive statistic\nSounds like you think we have a need to impress someone? I think jscs functionality could speak for its usefulness already\n. Don't need to do that, we need to look in every possible paths, i.e. not only in the first paht that we found.\n\nis there any good way to test this or otherwise be assured of its validity?\n\nSure, just stab process.env\n@am11 would you like to do it?\n. > @mikesherov, should we find a wrapper npm for locating correct home (taking care of this disparity among various OSes)?\nhttps://github.com/isaacs/osenv\nBut you don't need to do that, as i said, we need to check every paths available, if it's null \u2013 do the next one, if there no jscs config there - do the next one, etc;\n. Great! Could also add test by stabbing process.env? Or if you not getting what i'm saying, i could do that myself in any case many thanks :-)\n. No, no i certainly didn't mean that, that would be crazy, i just was asking for you to add test for this logic.\nLike rewrite \nprocess.env.USERPROFILE = undefined\nprocess.env.HOMEPATH = some path in which we Don't have jscs config\nprocess.env.HOME = some path in which we Do have jscs config\nthan perform the test - make sure that we found that config, than restore those paths\n. @mikesherov merging it right now, could wait until tomorrow? Would like finish up with piping.\n. @am11 merged, thank you!\n. Merged, thank you!\n. So @dbwhddn10 would you like to try it?\n. @mikesherov beat you to it :-)\n@BryanDonovan merged, thank you!\n. Merged, thank you!\n. It is a pain to review presets, so i'm gonna trust @Krinkle on this one, if something is wrong, someone will call us out on it\n. Can't do this until 2.0 :-(\n. Ooops, wrong issue to close\n. I think we could land this as is, although i hope that would not result in a lot of conflicts with 1.x.\n\nAlso, when are you planning to have 2.0 out? \n\nThere is no dead line.\n\nI will continue trying to help with help-wanted labelled bugs and 2.0 milestones, so let me know if there are any issues you specifically want me to work on.\n\n@mdevils ?\n. This is more or less duplicative of the jshint laxbreak option\n. @cowwoc \nadding rule for the case\njs\nvar good2 =\n{\n  key: value\n};\nis a pretty much a bad move even for agnostic tool, but i didn't close it because of that, laxbreak warns you for the case:\njs\nvar bad =\n{};\nif you don't disable it, which is pretty much what you looking for.\n. Seems problem has gone away.\nthank you anyway!\n. See https://github.com/mdevils/node-jscs/issues/341\n. btw, as soon as piping issue is dealt with, we could release it and grunt plugin too\n. You are planning this for 1.5.9? Sounds like it should be introduced in 1.6 \n. > we can cut 1.5.9\nYep, probably will have time to do that in few hours\n. as discussed, i would add tests for new methods, we probably could start using some coverage tool for it too :-)\n. > actual implementation in at least one rule would be nice\n@mdevils already find use of them \u2013 https://github.com/mdevils/node-jscs/commit/67337995ab8f909739658e375bc34f3cd17d10f9\n. > Yes, but perhaps land them them with this PR?\nThat is the idea\n. Same here\n. I wonder if we can merge this to master branch, it seems we could already start using it\n. Also, how about iteratePunctuatorsByName, would ease those rules that have to check through tokens? \nHas a downside, since it will reflect on performance.\n. Sounds like a great rule, would you like to implement it?\n. Right! Fixed with https://github.com/jscs-dev/node-jscs/pull/699\n. Merged, thank you!\n. Could you rebase this with master and allow this rule to accept true value? See https://github.com/jscs-dev/node-jscs/pull/620/files\nAnd sorry it took that long\n. btw, i'm gonna merge #620 in couple of minutes\n. All right, #620 is merged, you are good to go\n. I think so, utils.spacedKeywords should do the job\n. > Almost done with a follow up to #620. Just an fyi\nAre you planning to add something else, or it's fine as is?\n@BryanDonovan i guess you merged your commits instead of rebasing them, but it's fine, i'm gonna take care of that\n. Could you add an opposite rule? Sorry i didn't notice this earlier. \nIt would better if you open another (and close this one) PR for these rules, since now it has a lot of garbage info. \n. > Yeah, no problem. I can probably work on this in the next few days.\nAlrighty, i'm closing this PR and gonna wait for your new one, really want land this :-)\n. @BryanDonovan ?\n. cool, thanks\n. Could you add test please?\n. No response, closing\n. Who would you use it? Where?\n. @mdevils thoughts?\n. My concerns are that we changing signature of a string-checker module, which means we can change it back only when we release another major, whereas esprima 2.0 and ES6 could and will be released soon. But that could be justified.\nWhat doesn't look good, that this can be used only through API not through cli which make this awkward.\nI think we could introduce harmony flag and make it right, so user wouldn't have to do something like this.\n. > Let's introduce harmony flag\n@rwjblue would you like to do it?\n\nrelease it with 1.6.0 then?\n\nWorking at some new stuff, let's wait a bit\n. > It is not possible to ship with multiple esprima versions as far as I know\nWe can commit esprima#harmony to the repo, not good (although it's common practise for some devs), but better to leave it for user to deal with.\n\nI am happy to remove the change to the constructor and simply set the private property directly\n\nIt  might be better to pass a boolean value than a module object to the constructor. Would like other consumers to use that as well, like grunt, gulp and IDE plugins.\n\nit is highly likely that Ember would be using JSCS's programmatic API\n\nWhy?\n. Hm, it seems github lost my previous comment, probably due to it recent problems...\n@rwjblue\n\nWe could also fork Esprima, update package.json\n\nSounds good.\n\nWe need to provide a specific Esprima version/module to ensure AST compatibility with other tools in the pipeline\n\nI see, how about this - if:\n1. argument is not passed - use default version of Esprima\n2. argument is boolean true value - use our harmony version of Esprima \n3. argument is object - assume that is custom esprima module\nNumber two would be need for the tools that do not care about AST compatibility, and it will keep parity with CLI.\n\nWe will be using it from a build tool (most likely a Broccoli plugin), and there is no need to force that tool to use spawn or exec when it could simply invoke the checker directly.\n\nCool, i was asking to make sure you wouldn't use the our own jscs executable file. \n@mdevils, @mikesherov the use of harmony esprima could justified, since ES6 will come up only in december 2014,  only then it could be truly finished and after, well, after there is gonna be ES7, so esprima harmony probably will always exist and, since user commonly ask about, need for us to support it too. /cc @ariya\n\n@mikesherov In this case how can we guarantee stability?\n\nIt is pretty common in some projects, although not a good way to go, since it suggests use of hacks for it, different modules for different versions, etc;\nBut if we would have different AST for different versions, well, that would be bad, although harmony would not guarantee stability, since unfinished language spec doesn't either (right?)\n. @rwjblue will you be able to make the changes? \ncustom esprima \u2013 https://github.com/markelog/esprima-harmony\n. > @markelog, can you move that package to the jscs-dev org?\nDone - https://github.com/jscs-dev/esprima-harmony\n. Gonna need more time with this, if acceptable, should be landed in 1.6\n. > funcWithCallback( function( params ) {\n\n// do something with params\nreturn 'result';\n\n} ); // <- space between delimiter is butt-ugly\n\nThat is mentioned as exception in jQuery code style, so that is what we're looking for.\nCould you add more test? We would like these passing as well, some of them aren't or wasn't that your endeavour? \n. Will check this out on jQuery code, hope it finds all the cases now\n. damn, it will :(, get completely blind on it. \n. I have, if not finish by then, then go ahead\n. Almost finished here, will PR in couple hours\n. @tybenz with #606 your case now could be addressed like that:\njson\n\"requireSpacesInsideParentheses\": {\n    \"all\": true,\n    \"except\": [ \"function\" ]\n}\n. yes:\n``` js\n\"requireSpacesInsideParentheses\": {\n    \"all\": true,\n    \"except\": [ \"function\" ]\n},\n\"disallowSpacesInsideParentheses\": {\n    \"only\": [ \"}\", \"{\" ]\n},\n``\n. @tybenz sorry, missed you comment, there is still some quirks to work on, i'm a bit busy with the day job, but i will get back to this problem as soon as i can\n. So we can useexec` here otherwise good to land?\n. > Oh, I think this is ready to go as-is unless you have concerns about the test implementation?\nDo we really need a spawn method, why we can't use exec here?\n. Merged, thank you\n. js\n$ ./bin/jscs -\nError: Path - was not found.\n    at ../jscs/lib/checker.js:111:19\n    at Array.0 (../jscs/node_modules/vow-fs/node_modules/vow/lib/vow.js:555:56)\n    at Object.callFns [as _onImmediate] (../jscs/node_modules/vow-fs/node_modules/vow/lib/vow.js:1148:35)\n    at processImmediate [as _immediateCallback] (timers.js:336:15)\nTest for this we would be preferable \n. Merged\n. Merged!\n. Merged, thank you!\n. With new config in 2.0 it should be more obvious way to do that kind of thing\n. Config options will be changed in 2.0, so there is no point doing so at the moment\n. Not sure why you would want us to add new feature then, if can't or don't want to update\n. I wonder if that is code style issue\n. Didn't understand your use case, but this way is better anyhow, merged\n. If you installed jscs through npm, there can't be a .gitignore\n. Could you add test for it? See https://github.com/mdevils/node-jscs/blob/master/test/data/options/preset/google.js and https://github.com/mdevils/node-jscs/blob/master/test/options/preset.js\n. Merged, thank you\n. Do you proposing something? Or filling an issue? Is so why did you change only readme then?\n. Wow, that is an old one, @kilemensi are you still interested?\n. Well here, i see only test changes, new commits in jscs should not affect new features too much \n. Well, currently, when you changing only tests it is not, but if you do provide a pull for this, merge should not be difficult \n. Could you also add docs for this?\n. friendly ping\n. Okay, great, thank you!\n. Are pulling jscs from git? Or you using the one in npm? I will assume the latter - we didn't release inline error suppression yet. \n. There is a lot of ideas how we can do new plugin interface for 2.0, like #342 and #482, so additionalRules, hopefully, will be replaced or augmented to something more useful.\nIf you have better phrasing in mind - please share it. Here is the use example. \n. Merged, thank you\n. Merged, thank you\n. @mrjoelkemp i concur.\n@Moeriki i'm gonna close this since it's not reproducible with recent change, please point us to right direction otherwise\n. We don't support .8 anymore \n\nbreaks older 0.10\n\nWhat versions are we talking about?\n. > there's no work required to support all the way down\nYour ticket prove otherwise.\nIf you don't see something, it doesn't meant it doesn't exist.\nWe had problems with .8 when running tests, which means even it works with your code it doesn't means it works.\n\nnode 0.10.26 is the oldest node version that supported the ^ out of the box.\n\nYou could just update npm, it does work with older versions. But since it breaks on 0.10, i guess we could use tilde instead.\n. >  Yeah, it's known problem. Last time I've recommended to lint and jscs just once for the stable node version\nPretty good solution that is \n. Seems excessive\n. Would you able provide the opposite rule? Could you add more tests? Like one in the doc, it would be preferable to have test for every keywords too.\n. Yep, will do that tomorrow\n. @avishnyak please rebase with current master, fix the lint errors that will come up after rebase and i'm gonna land this\n. @avishnyak sorry it took that long, missed the letter with your comment.\nOne other thing, could these rules accept true value like all rules of JSCS with possible array value?\nIf value is true it would use this - https://github.com/jscs-dev/node-jscs/blob/a16a694efc8b87108116d22a3caebc4d7b163644/lib/utils.js#L72 array?\n. Could you add a test for true value for each rule?\n. I finished up with your pull, thank you\n. I finished up with your pull, thank you\n. Exemplary issue i must say, would like to send us a PR? You basically did it anyways. \n. > I'm sorry, I couldn't understand the meaning of your remarks (I'm not native English speaker...).\nMe neither :-), i meant you already proposed the fix and it doesn't require any tests since we can't make travis run on Windows and because node-exit would be a dependency and we don't test dependencies.\nSo all you would have to do is modify package.json and cli module, you can even do that through github interface, without cloning our repo on your system. It would take you a couple of seconds, i'm saying this because it might be more satisfying to do this yourself.\n\nDo you get what I want to say?\n\nSure, i research the issue, if you don't have the time to make the fix, we will surely do it ourselves.\n. > Um...did you mean that:\nNo-no, of course not, i meant you could do everything for you to send us a pull request without leaving your browser, check this out \u2013 https://help.github.com/articles/editing-files-in-another-user-s-repository\nThat way you wound't need to do a git clone/branch//commit/push on your machine.\n. /cc @mikesherov \n. Having trouble reproducing your use-case.\nWhat version of jscs do you use? Also please provide your config and try to test this code with the current master\n. Duplicate of https://github.com/mdevils/node-jscs/issues/92\n. > Please take a look.\nWill do\n. Merged, thank you\n. Awesome, can't wait to land it\n. Merged, thank you\n. Hm, after merging this and #594 one test is now falling, could you take a look?\n. @mdevils added test for such case\n. For jscs lib --reporter=summary it gives me \"Files With Errors\" of 99, whereas \"Total Errors\" is 0. \n. ping\n. @SgtPooki if you would want to get back to that, ping us up\n. Can't do this until 2.0 :-(\n. Yeah, like an alias, but i guess it could wait, we have a lot that could be changed\n. But, we could land this in 2.x branch.\n@SgtPooki could you fix travis run?\n. Why this was re-open?\n. @mikesherov still relevant?\n. Also, this will fail for cases like:\njs\nfor (var i in { something: 1 });\nwith({})\nBut that could not be achieved without introducing additional syntax to the parens rules\n. >  But we need to cover \\n}) vs ( function() {} )\nCan you give me more verbose example?\n\nHowever, I think its a bigger deal to specify the tokens rather than the node types. Users need to be able to disambiguate member from array.\n\nThat would complicate rule couple steps up, since then user would be required to know esprima AST.\nThere is couple of ways to avoid that, but i'd like to await if someone will stumble on it.\n. > func( { inline: 'object' } );\nWhere did you find this? I have only \u2013\n\n// Function with a callback, object, or array as the sole argument:\n// No space on either side of the argument\n\nthis is sole object argument, so no spaces\n. Also we don't comply with:\njs\nvar html = \"<p>The sum of \" + a + \" and \" + b + \" plus \" + c +\n    \" is \" + (a + b + c);\nWhich suggest that there should not be spaces when parens used for grouping, but i had discussion with @dmethvin and @scottgonzalez couple months back - we agree to require spaces in such case. \nScott did anything changed on that matter?\n. Read further Mike \u2013 \n\n// Function with a callback, object, or array as the last argument:\n// No space after after the last argument\n. > func( a, { obj: 'whatever' } );\n\nStill don't understand how you came to conclusion that this is valid\n. > The wording alone is incorrect; you need to look at the code examples\nWhat code example? I don't see any func( a, { obj: 'whatever' } ); anywhere. I also don't remember that team has agreed on that code style.\n\nI can update the style guide to cover every possible case if that would make you happy\n\nThat would be preferable, yes, since we should know about this kind of stuff.\n. @scottgonzalez  That is very much obscure\n. @mikesherov let's hold on on this change and release 1.6 until we clear how we should pursue this further\n. >  but at least this one makes sense to me and doesn't seem obscure at all\nI meant how this logic presented, not the logic itself.\n. @scottgonzalez could you update the style guide and clarify these issues?\nI can do this multiline thing and i also have an idea how we could find and describe those rules for grouping case.\n. But in 1.6.1, since there is a lot to do for it and we hold on 1.6 a bit longer than we should have.\n. > @markelog is the current master ready for a 1.6 release?\nI think so, yes\n. This week\n. I think we could land this as is and add new rule for call expression\n. It does :-)\nOn Thu, Sep 25, 2014 at 11:22 PM, Mike Sherov notifications@github.com\nwrote:\n\nAs long as this rule can be combined with the call expression rule to\nexactly specify the jQuery style guide.\nIf so, land it :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/606#issuecomment-56869929.\n\n\nRegards,\nOleg\n. Cool, merged\n. Reviewing presets are hard, especially that big as airbnb one, so i'm gonna cc contributors of it in hope they could check it out \u2013 @hshoff, @ssorallen, @thisconnect\nbtw, where did you get code example?\n. Judging by code examples, those rules could be added to google preset, let's do that instead?\n. That's funny, since now we need tests to google preset, for the new included rules. Also could you divide this commit, one that adds new rules and one that fixes our code?\n. Merged, thank you\n. > DisallowSingleLetterVarNames\nwhat about \n``` js\nvar i = 0;\nvar l = array.length;\nfor (; i < l; i++) {}\n```\nBut that could be attributed to code style of some sort. But what if this i would be used outside of the loop, like\n``` js\nvar i;\nfor (i = 0; i < array.length; i++) {\nif (something) {break;}\n}\nfoo(i)\n```\nIn that case, it might considered logical to define it outside the loop. I guess there would be couple cases like that\n\nDisallowVarNames\n\nCan't think of use-case for this, this list of values could pretty big for this rule to be useful, while using regexp as value sounds crazy.\n-1 from me, at least for DisallowVarNames  maybe as plugin first?\n. This issue has been open more than a month without supported PR for it. \nUnfortunately, we don't have the resources to implement rules that could not be included in any of the supported presets (if it could be, please point that out).\nHowever, if you or anybody else submit PR for it, we will gladly consider it.\n. Cool, merged :-)\n. Not sure what you meant by \"generic check\", but i could not find any indication for this rule to be in this preset\n. Could add test for it please \u2013 https://github.com/jscs-dev/node-jscs/blob/master/test/data/options/preset/crockford.js\n. I guess we could add a correct example, but it's already there\n. Merged, thank you\n. Well, looking on code examples from link you provided you can find code like that \u2013\njs\n if (at >= 0) { \n...\nNot \njs\n if (0 >= at) { \n...\nHe is not explicitly saying that, but code styles usually do not define these kind of stuff like that, so we have to look on the code itself\n. Just published 1.6.1\n. Nice, merged\n. > Is this on purpose?\nYes, disallow-right-sticked-operators was too generic and baggy\n\nDid I miss another rule?\n\nNo, althoug we have requireAlignedObjectValues and (disallow|require)SpaceAfterObjectKeys\n\nOr do we need a new rule\n\nProbably, while keeping parity with other rules, it should be named (disallow|require)SpaceBeforeObjectKeys\nWould you like to send us a PR? Should be a pretty simple to add.\n. > Is this on purpose?\nYes, disallow-right-sticked-operators was too generic and baggy\n\nDid I miss another rule?\n\nNo, althoug we have requireAlignedObjectValues and (disallow|require)SpaceAfterObjectKeys\n\nOr do we need a new rule\n\nProbably, while keeping parity with other rules, it should be named (disallow|require)SpaceBeforeObjectKeys\nWould you like to send us a PR? Should be a pretty simple to add.\n. Awesome, merged\n. /cc @mikesherov \n. Merged, thank you!\n. We probably not gonna guarantee support of any other parser, but we probably provide the way to use different parser with jscs\n. > Will wait for @markelog to give the go ahead.\ngo ahead :-)\n. > Not sure if this is standard: providing a test case that proves that an issue is not an issue\nI think that is the best way to do it!\n. @mrjoelkemp could you follow git conventions, like this or that?\n. Not by much, commit head should not be more then 80 symbols, its hard for us since our rule names are pretty long :-(. Also there shouldn't be a dot at the end of it.\n\nCloses #629\n\nWith parity with jQuery style i usually use keyword Closes for pull request while adding \"gh-\" before the number instead of a hashtag. And \"Fixes\" keyword with the hashtag for the issues.\nWe're not have to follow this guide to the letter or follow it at all, but i'd like some consistency there.\nI would resolved https://github.com/jscs-dev/node-jscs/issues/407 issue, that way we wouldn't have that problem, but i fear that hook might be challenging for the new contributors.\nBut that problem disappears if maintainers only would follow git conventions and we would take responsibility to correct contributor's git messages so he/she wouldn't have to. \n/cc @mikesherov, @mdevils \n. > Is there a guide on the exact flow that you guys use to reword commits for merged PRs that need to be touched up? \nNo, any way you do this is fine, matter only the result i suppose.\n\nNot sure if an interactive rebase (to reword the commit) retains the original author\n\nIt will, i usually use it. Also if you think the changes in commit need to touch up a bit  (like a add comment or something) and you don't want to bother the author you can make the commit than \"squash\" or \"fixup\" it. \nYou can also always use git commit --amend --author=\"...\"\nFeel free to merge https://github.com/jscs-dev/node-jscs/pull/630 as an exercise \n. > Closes: gh-630\nColon is the issue, do it without the colon and github will close it for you \n. Thank you, just in case, i'm gonna wait a little bit to allow @jamesallardice to response and conform\n. Cool, merged\n. mm, isn't that https://github.com/jscs-dev/node-jscs/commit/3e4787a701d899fcbee008c33a4044257db1c233 ?\n/cc @BryanDonovan \n. What you proposing is not deprecation, its removal. With semver, i guess, that could be considered as major change, which should happen in 2.0. In any case, i would consider that only for 2.0.\nI would remove a bunch of rules for 2.0 and move them to plugin(s) under jscs org. But i would remove only rules that are not used in presets. I think presets should be stable no matter what. \nI will email to jscs-dev@ with details about this.\n. Until we gonna do the https://github.com/jscs-dev/node-jscs/issues/453 we can't provide any warnings.\nBut we might not have to, we could just change the doc - put there \"deprecated\" word somewhere in it and be done with it.\n\nwe should deprecate in 1.7, remove in 2.0.\n\nI don't think we should remove it, i think we should replace it, maybe even include JSDoc plugin in the jscs. (/cc zxqfox). As i said (and email will be more verbose on the subject) i think any preset should be stable and fully cover it style guide rules.\n. > at this point as progress seems slow.\nPersonally, i have a lot to cover for my day job until the end of October, i have time to look at the new issues/pulls and fix-up jQuery code style issues, maybe more, but can't make any promises.\nWill have a talk with @mdevils about our current state of affairs. A lot to do though!\n. > @mdevils @mdevils Can we formalize and split tasks?\nPanic mode! :-)\nExpect this at the next week, if Marat will be busy, with his guidance, i'm gonna work on that.\n. @zxqfox just wanted to let you know: had a meeting with Marat - need to figure out new config, issue for that should be created (or we could an existing one - https://github.com/jscs-dev/node-jscs/issues/136 ?) as soon as Marat will have some free time.\nAnd we need to decide what rules are gonna stay, we're gonna ping you up for help, if you would still be interested.\n. > I can try to implement it you're ok with that but don't wan't to or can't do it.\nDidn't understand that phrase, but yes, we can consider this feature\n. @pomeh are you still interested?\n. @mikesherov addressed your comment, although without beforeEach clause.\n@pomeh landed, thank you\n. LGTM\n. @GrayedFox would like to implement it?\n. Yey! This config style probably not used in any projects.\nBut :-(, this will break backward-compatibility, which we are allowed to do only in 2.0. \n. Or we fix https://github.com/jscs-dev/node-jscs/issues/482 and deprecated it\n. There is possibility for us to introduce new plugin system earlier than 2.0.\nFYI: re-reading my previous comment i might not be clear about it: i'm not against of docs improvement in any anyway\n. This also relevant to disallowSpaceBeforeObjectValues rule could you do the same for it too?\n. Thank you!\n. New version of JSCS will be release soon, until then then\n. @mikesherov mm, yeah, i remember\n. Not sure what you wanted to establish :-)\n. LGTM\n. Will be out with 1.7, that should happen very soon\n. @tbusser would you like to tackle this?\n. We definitely need some message at the end of jscs run, which would say, that we found more errors, but didn't show it.\n. Don't forget to add labels\n. That looks undesirable for me, configuring interface with static properties and not through constructor looks horrible\n. >  but it's semantically correct.\nNot sure if i understand what do you mean by that.\n\n@markelog Would that be better?\n\nHard to say, without doing the actual implementation. But i guess the right way would require rework the errors module.\nNow it created for each file, can we create it on each StringChecker instance?\n. Would like @mdevils opinion on this, especially considering static properties\n. > Can you provide a solution that doesn't involve a large rewrite? \nNo, but maybe we should try a rewrite? Or maybe not, i just fear that is far from what we tried to preserve.\n\nerrorCollections\n\nMight complicate stuff even further, or not :-), again, just don't want this to bite us in the future.\n. > I think that if someone needs a feature so much, then no problem if such person wants to pay for it.\nagree\n. Was fixed in https://github.com/jscs-dev/node-jscs/commit/7733cbba2a592f32241e939892baf8c702fe505e\n. > Which in turn makes it impossible to exclude files from the paths specified to jscs\nCould clarify this?\nWhat would be an expected behaviour?\n. How about\n\n\"excludeFiles\": [\"../node_modules\"]\n\n? :-)\n\nI think the expected behaviour would be that the excludeFiles would be\nresolved each of the paths specified as inputs to jscs?\n\nThat might provide an unexpected output\n. I think it is an issue only in very rare conjunction and if we solve https://github.com/jscs-dev/node-jscs/issues/73 it will go away by itself.\nI think we can close this one.\n. At this point only major and CST related bugs will be fixed\n. /cc @mikesherov \n. /cc @mikesherov \n. @pdehaan did @hzoo suggestion helped you?\n. @pdehaan did @hzoo suggestion helped you?\n. cool\n. Could you send a PR?\n. I suppose we need tests for this, like alternative the ones in test/options.\nNew modules would need that too.\nHow jscs config with plugins would look like? require for them should work relative to the jscsrc file right?\nIt also would be cool to see repo with example plugin.\n. Related - https://github.com/jscs-dev/node-jscs/issues/705\n. /cc @mrjoelkemp\n. There was comment by @mikesherov somewhere with similar idea - instead writing maxerror error in the console we could add it as an error with values (line, column) of the previous error.\nThat way every reporters would work as of now but user would know (even in CI run) that JSCS didn't check everything and bail out.\nWhich allow us to change default value of maxerror property.\nHow is that sounds?\n. @mikesherov yep, exactly my train of thought\n. > Agreed about the benefits of showing maxerr as an error.\nThis change should not be that hard to implement\n. I guess, this not applicable for 1.7, since we changed and fixed a lot before accepting this protocol, we probably should use this logic for the next releases but not for 1.7.\n\nBut right now I'm talking about current CI-integrations and Instruments (like Sublime integration) which expect all errors to be reported.\n\nhmm, that wouldn't be a problem if this option wouldn't be used for the whole run, but for individual files.\nAnyway, something to think about.\n\nCI-integrations\n\nThey will definitely see this last problem and could react accordingly, in my head they do :-)\n\nSublime integration\n\nThose plugins lint one file at the time, so they gonna see plenty, might be a problem though.\n. and btw @mikesherov \nit says \"Modifying rules so they report less errors, and don't cause build\nfailures.\"\nModifying rules not options.\n. Let's agree on change the default for 2.0 and discuss whole run vs individual files?\n. > #681\ncool\n. Could you post your full config?\n. jscs-options.json works fine for me\nfor jscs-options.js add module.exports = {.... on top\n. The problem here is that you didn't understand how to do configure JSCS with comments, which could be solved, but if you want to close this, then okay, we still need a site anyways, where we could explain stuff in detail\n. > I\u2019ve read the docs and didn\u2019t found any reference to js or jscsrc.\naaam..., from the readme.md -\n\nIf there is no --config option specified, jscs it will consequentially search for jscsConfig option in package.json file then for .jscsrc and .jscs.json files in the current working directory then in nearest ancestor until it hits the system root.\n. That is what your #675 trying to fix, isn't it?\n. Right, but this is an issue, where you describe an unclear documentation problem, which you would fix with your pull request. I.E. those are different but depended entities.\n. If we gonna add this in i think we should re-do the previous paragraph too\n. package.json, .jscsrc, .jscs.json. But it depends on what would be the closest config in file hierarchy.\n\nIn the case:\n\n--\n  package.json\n  --\n    .jscsrc\n\nIt will take .jscsrc\n.js is not fully supported, would you like to change that?\n. > In #674 it was said that it\u2019s supported.\nNothing is supported until it's documented.\n\nI don\u2019t think it\u2019s necessary.\n\nYour comment, by my opinion, does not bring any new information except for explanation of what is .jscsrc is. Which you could include in paragraph above.\n. jscsrc is recommended way to define your config, you just need a better phrasing that's all\n. I would just do this -\n\nIf there is no --config option specified, jscs it will consequentially search for jscsConfig option in package.json file then for .jscsrc (which is a just JSON with comments) and .jscs.json files in the current working directory then in nearest ancestor until it hits the system root.\n. Your problem with https://github.com/jscs-dev/node-jscs#user-content-validatequotemarks rule, look at possible values and i'm sure you will figure it out.\n. > I think jscs could show a line where error ocured.\n\nWould you like to fix that?\n\nAnd why does this error not show up in .js\n\nIt does for JSON, it's a valid js, but not valid JSON. \n\nThat, by the way, is just one more reason not to invent own config format.\n\nI would say, that it is more like doing the simple debug yourself then ask every possible question there is.\n. Merged, although i removed your note about js config since its not fully supported and created a ticket for it\n. > What's the \"grouping case\" that you're having trouble with?\nNot directly related to this rule, but to #92, in jQuery style guide we have this - http://contribute.jquery.org/style-guide/js/#multi-line-statements\nGiven previous conversation with @scottgonzalez we need to look at the examples. Which means grouping parentheses is another exception, where you shouldn't  use spaces inside parentheses.\nThere is no way to catch this with esprima parser, except implementing parser of our own :-)\n. > Grouping parens SHOULD have spaces. \nPreviously, i had talk with various people from the team, they had different opinions on the matter.\nSo i just referenced the guide instead. If it being wrong, could you create an issue about it? And reference it here?\n. But if exceptions on call expressions are spread to grouping parentheses we're still have the same problem\n. >  I'm not sure I'm following. The exception on call expression isn't spread to grouping parentheses. \nIf its not - then great, will wait for the your PR to jQuery code style to reduce confusion\n. > can you please provide some sample code for \"exceptions on call expressions are spread to grouping parentheses\" so I can sure we're talking about the same thing?\nNo, because you said:\n\nThe exception on call expression isn't spread to grouping parentheses.\n\nThat is true, right? If this kind of code:\njs\nfoo({ a: \"alpha\", b: \"beta\" });\navoids the spaces, but this kind:\njs\nsomething && ( { a: \"alpha\", b: \"beta\" } )\nisn't and shouldn't be written like this:\njs\nsomething && ({ a: \"alpha\", b: \"beta\" })\nthen we good, if not, then we have problems.\n. > so there is no exception\nI think we would need to document that.\n\nThough I wonder about things like ({}).toString\n\nWhat is the use-case for that?\n@mikesherov if that possible, it would be awesome to talk with @ariya about this, i.e. finding some way to catch those grouping parentheses.\n. > It's a fairly common alternative to Object.prototype.toString\nNot aware of that pattern, what is the meaning of getting [object Object] string?\n\nthis will never be written, so there's no problem :-)\n\nIt's possible with the semantics of the language whereas Murphy's law says it's gonna happen if it didn't already.\n. Hope it \n\nYes, I definitely will, but I don't understand the problem fully, which is why I've been asking what the problem was specifically, so that I can explain it to @ariya well.\n\nWill happen earlier than \n\nWhen someone reports a bug against it, we'll fix it then\n. @scottgonzalez got it, thanks\n. Okay, so basically we need PR to code style guide and couple more relatively simple commits to jscs and #92 should be finally done (cross my fingers on it). \n\nI'm gonna continue with the opposite rule and do some additional changes in other places.\n. @mikesherov ping\n. Don't let this pull hold 1.8\n. > Looks like this rule can be drastically simplified \nOr not accepted, it seems requireSpacesInsideParentheses is now suitable for our needs\n. > Why not use https://www.npmjs.org/package/esprima-harmony\nThis is full grown fork, with additional code in it, like support of JSX. We could use different forks, but we don't have confidence that it will be supported.\n\nDownload from github will slow in some bad network.\n\nWe could publish it.\n. @mikesherov FYI: just created a label for harmony bugs\n. @jzaefferer if you will face this problem again, ping us up and we will reopen it\n. Nicely done\n. > Can we have it the way it was with just the except?\nWhat if we call it requireExceptFor? Or something in that manner?\n. > How about allExcept considering the rule name already says \"require\"?\nSounds good\n\nAnd then we could use this for the new format as well: always have allExcept\n\nNot sure about this\n\nWhat means only?\n\nFrom related discussion (https://github.com/jscs-dev/node-jscs/issues/698)\n. No, it was just a reference to another discussion, it seems we settled on allExcept property instead of except  without additional value property.\n. > So these rules should be merged in future. Right?\nyep.\nWe would need add only to disallowSpaceAfterLineComment so they would complement each other, but new format is not ready yet, it might look very differently at the end.\n. How this is fixes tab issue of https://github.com/jscs-dev/node-jscs/issues/592?\n. Merged, cudos for clear comment notes\n. > How does a user nullify rules?\ncurlyBraces: false or \njs\ncurlyBraces: {\nrequire: false,\ndisallow: false\n}\n\nHow can we make sure this config lends itself to automatic configuration?\n\nWhat ticket number are we talking about?\n. Is\n\nAuto formatting \n\nthe same as \n\nautomatic configuration\n\nhttps://github.com/jscs-dev/node-jscs/issues/341 ?\n. Correct\n. @mrjoelkemp\n\nIs the plan to change the returned value from each rule's getOptionName to indicate the category (ex: \"blocks\") and the rule (\"curlyBraces\")?\n\nSounds reasonable.\n\nA few nitpicks:\n\nFixed\n@mikesherov\n\nHow can we make sure this config lends itself to automatic configuration?\n\nWe don't have module for it yet, i suppose we could only guess, but i don't see problems with this ticket with any config style we choose.\n\nHow does the new format handle \"require spaces around only + but disallow spaces around all except - ?\"\n\nYour idea looks better: \njs\n{\n    require: true || { except|only: [] },\n    disallow: true || { except|only: [] }\n}\n\nHow does the new format handle validateIndentation?\n\nDidn't get to that part yet, requires more thought i guess. One way or another it would be sane to have no more than two levels of nesting objects, like this:\n``` js\n\"function\": {\n    \"spacesInFunction\": {\n        \"anonymousExpression\": {\n            ...\n        }\n        ...\n    },\n\"validate\": {\n    \"argumentSeparator\": ...\n}\n\n}\n```\nWould be overdoing it i guess.\n. > But once again, I'm stuck in mapping these declarations to rules.\nLet's decide on format first, there is a lot of grey areas we need to cover first.\n. to all: there is a lot of rules to adopt for this config, we also need identify rules that we would move to the plugin i.e. rules that could not be used in any of supported presets and those rules that could not be easily included in any category (first level).\nSo if you have time, please go ahead and add rest of the rules to the new format, i will update the gist with our new ideas shortly.\n. Format updated, stopped at disallowDanglingUnderscores rule\n. Format updated, stopped at disallowDanglingUnderscores rule\n. > This appears to be the format from #181\nYeah, maybe In some ways but i'm trying to take best ideas from all purposed formats.\n\nbut as pointed out there it doesn't prevent conflicting rules like the format in #182 does.\n\nIt could be handled on engine level, if,  for example, there both require and disallow properties are defined - we could throw an error.\nIf you have time to add more rules to the gist above or provide more constructive critic - that would be much appreciated.\n. > This appears to be the format from #181\nYeah, maybe In some ways but i'm trying to take best ideas from all purposed formats.\n\nbut as pointed out there it doesn't prevent conflicting rules like the format in #182 does.\n\nIt could be handled on engine level, if,  for example, there both require and disallow properties are defined - we could throw an error.\nIf you have time to add more rules to the gist above or provide more constructive critic - that would be much appreciated.\n. > Sorry if this is coming off as non-constructive\nIt wasn't, it's not what i meant.\n. We need to do something with preset, plugin and additionalRules options, since they pretty much duplicative of each other.\nFor example, this option, say preset could be polymorphic (i know that's usually not good way to do it, but nonetheless), it would accept either seven predefined names - wikimedia, airbnb, etc; just like right know or module name with a mandatory prefix jscs-, if string with a prefix is used, it would search for that module in node_modules folder relative to the .jscsrc config of the project, i.e. require it.\nIf package.json of that module has main property in it, jscs will require and execute it with configuration module as an argument, otherwise it will try to use .jscsrc file on that path, or any other possible names for jscs config.\nEverything else is an error. \nThoughts?\n. > This would allow for presets outside of jscs core right? That's a great solution.\nYep.\n\nIf a module's package.json has a main property, then this module is a plugin?\n\nYep.\n\nOtherwise, we'll use a .jscsrc on that path\n\nYep. \n\nas in do style checking against the path\n\nNope, relative to jscsrc config where preset config is specified. Yeah, if that \"plugin\" also have preset option in it, we should use it too and so on, but use those configs should act relative to the original config.\n\nI don't quite follow what this achieves.\n\nSo user would have a choice, he could use program API of jscs, like registerRule, registerPreset, etc; or he just want to share the config, so he would add only a config to his jscs-* module and nothing more.\nSo specifying just .jscsrc in his module would be equivalent of specifying node export with registerPreset in it. But that might be confusing and not really needed.\n. What about it?\n. Yeah.\n. Plugins could express both preset and additionalRules, so why would we need those options?\n. Couple new rules, fixes, comments, stopped at requireAlignedObjectValues.\n. I think we're at the point of prototyping this thing, i'm sure will find more caveats along the way or possible improvements. \n. For this issue to resolve i think we need to:\n- declaratively specify rule options #480, #895\n- preserve back-compat - both old and new format should work\n- create classification strategy of which rules should go to which block, like \"block\", \"vars\", etc; see the proposed format\n- actually add new parsing for the new format\n- improve documentation, since new format would be defined by the \"blocks\" we need to clearly document who to do that \n- rules clean-up, at least #853, #538 #1349\nOnly last item is a breaking change.\n. In other words, is there any takers for the proposed items?\n. Merged, thank you!\n. LGTM\n. This should be an easy solve, would you like try to tackle this?\n\nAlso, should the test file be moved to under test/rules/?\n\nVery much so yes\n. Well, we do not support node 0.11 no one does i suppose.\n. @UltCombo riiight, that is why it's not pragmatic to test your stuff on unstable platform, since most of those inconsistencies will disappear in stable release.\nIf you want to run your code on .11 that is one thing (if your thing is doubling your work efforts) but you don't have to use jscs with .11 just use it with .10 for code your written for .11.\n. @maximal for sure\n. Closing because of the inactivity\n. Fixed with https://github.com/jscs-dev/node-jscs/commit/cda4d10f83b1999dc59e2dfc069da644cff48264\n. @lencioni hoping for later this week\n. @hzoo could create a ticket for it?\n. Thank you!\n. Thank you!\n. @mdevils yes it should - https://github.com/facebook/esprima \n. LGTM\n. @mikesherov ?\n. Not sure what you meant, by \"in a semicolon-less project\", with code like this -\njs\nvar foo = 1\n;()\n;[]\nCould you elaborate?\n. See discussion - https://github.com/jscs-dev/node-jscs/pull/178, we can implement disallow rule and this is popularly requested feature, but that would mean we should have rule that would require it but it would mean duplicating JSHint asi option in some sense.\nAnyway, would you like to implement these rules?\n/cc @mikesherov \n. > Any chance you could direct me to a similar rule I could use as a starting point?\nPull #178 has almost everything you need to start, including code examples and pretty helpful discussion.\n. > Is there a way to find out the rule that tripped the validation so as to more easily search the documentation?\nhttps://github.com/jscs-dev/node-jscs#user-content---verbose\n. Okay, so if you change your code to\njs\nmodule.exports = function(grunt) {}\nIt will pass, It seems disallowSpacesInAnonymousFunctionExpression doesn't set correct pointer.\n. Check this out - https://github.com/jscs-dev/node-jscs#user-content-preset\n. @shellscape would you mind posting your config, jscs version and output of the jscs --verbose ... with both versions of your code?\n. like --debug or something like that?\n. It totally wouldn't :-)\n. > does not make statements about the use of quote marks\nCode examples show single quote use, agree about disallowMultipleLineBreaks though\n. Not for nothing, but @douglascrockford care to comment? \nDo you prefer to use single, double or both quote marks in your code?\n. Fixed via https://github.com/jscs-dev/node-jscs/commit/5ccacb56491c3c93901c12d5a7f292e1de2f57ee\n. Not planned at the moment, sorry, you would have to execute JSCS twice for this with different configs.\n/cc @mdevils \n. Nicely done!\n. Discussion moved to https://github.com/jscs-dev/node-jscs/issues/796\n. @mdevils could create a repo with plugin example?\n. @zxqfox i saw it, but i was asking about new plugin interface that introduced in this pull.\nLike how you should install it and configure it.\n. That would be helpful\n. 1. Could you create an issue?\n. @mrjoelkemp  wait a bit please, let me check it out\n. requireSemicolons is duplicative of jshint options, yes, but i'm not sure that we shouldn't add it, since\nsemicolons could be code style choice and precaution measure and since we would have disallowSemicolons we probably should have the opposite rule too.\nThoughts? \n/cc @mdevils \n. @mdevils you probably gonna enjoy this - https://github.com/twbs/bootstrap/issues/3057 :-)\n. This should be in 1.8, which is scheduled to November 19th, but we aren't good with deadlines :-(, sorry.\n. Current one is 1.13.1\n. Not sure about \"soon\", we have a lot to do - https://github.com/jscs-dev/node-jscs/milestones/1.8, any help is appreciated. \n. See the docs:\n\nThis is a documentation for the development version, please refer to the https://www.npmjs.org/package/jscs instead\n. Will this preset actually be used at the grunt team? If no one needs it, then we shouldn't add it.\n\nWe have made this mistake before when we added mdcs preset, which is not used by anyone to my knowledge.\n/cc @vladikoff @cowboy\n. > I was wondering if there is a way to write custom presets without PRing node-jscs?\nNot at the moment, but this should be possible with JSCS 2.0\n. > Would the enhancements to that lib only include features that help JSCS?\nIf need to be, yes, although it would be an interested case.\n. Sure, that's is the other way to do it, but at least right now, we use our own thing, if we could achieve something better we could deprecate that module and just as @mrjoelkemp said, i don't think there is much of a conflict here.\nIf we try and fail, we could get experience from it and better understand how things should look like.\n. Not sure if i understand where this is going, like why errors.assert.* is better then errors.add and why we need to use eventEmitter, or do we really need to modify the way we obtain error information or information that we already have is sufficient enough (after some thinking, i think it is)?\nWhich doesn't mean i object, just don't get it :-), i think we could/should tackle this from different angles, there is number of approaches we could take, we could exploit most of them.\nSo i would encourage people to try their on thing. There is 100 bucks on the line for the cry sake! :-)\n. > i think we could/should tackle this from different angles, there is number of approaches we could take, we could exploit most of them\nThen we could take best ideas and unite them for greater good and all that.\n. > I am trying to be open for discussions on many points of implementation. If you feel I'm on the wrong way, tell me about it here. If you do not like my approach, feel free to propose and develop alternative implementation based on your own vision.\nNo-no, i'm saying there could be a number approaches here, we could try couple of them, then take the best ideas from them.\n. If assertions are truly generic enough then it should be a huge win\n. These efforts may take some time to implement, as i see it, this code shouldn't conflict with master code-base, so i'd say let's add tests for new methods and merge it.\n. With tests it would be easier to grasp ideas behind new code-paths, could we check it out after?\n. Will check it out tomorrow\n. A bit busy at the moment, will check this out on the weekend, although i'm pretty sure this is OK for merge \n. Fixed, thank you\n. Sorry, patch release is impossible now a lot of things already has been merged, so we will have to wait until 1.8, which is scheduled for 19th of November, but we aren't good with deadlines :-(\n. btw, @jdlrobson could add dot to the requireOperatorBeforeLineBreak rule too? So they would be coherent with each other.\n. @hzoo it already allows null value every rule allows it. See - https://github.com/jscs-dev/node-jscs#user-content-preset\n. @hzoo you could null the whole rule, not the specific property.\n. Maybe only smoke tests, phantom should suffice or we could do something heavy with browserstack or saucelabs\n. We probably gonna remove it, closing\n. @zxqfox github doesn't allow that\n. We're a bit busy with other stuff plus holidays and all.\nIssue seems easy to fix though, @narqo, @dfilatov would any of you like to give us a hand with this?\n. @mdevils check out travis log, is that unit-coverage issue?\n. We're only adding presets that are widely used, but fear not, in 2.0 you will get the ability to share presets as npm modules.\n. > Sorry, the purpose of this issue wasn't to discuss presets. It was to discuss the rules that I have that are not currently covered by jscs. e.g.\nOh, didn't get that from your issue description, sure thing\n. > When programatically building up a string, use Array#join instead of string concatenation.\nIs that a common case? Is there any style-guides that require you to do that?\n. But they also have this as good example:\njs\nvar errorMessage = 'This is a super long error that was thrown because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\nSo it looks like it's not a hard rule\n. >  I guess you're implying that this should be a plugin and not part of core.\nNope, no hidden agenda here :-), just want to understand if majority of jscs users could use it. \nRight now, i think, we could accept a lot of rules, we don't have a criteria for accepting rules to core, but in 2.0 i hope we will, so now we could accept lots of them, but they might be moved at 2.0.\n. New rule is our best bet, however we're trying to unify rule names and values.\nSo something like requireSpaceBetweenArguments might be a better choice.\n. Duplicate of https://github.com/jscs-dev/node-jscs/issues/685 \n. How about true value, it should solve\njs\ndoStuff(a, b, c); // valid\ndoStuff(a,b,c); // invalid\nWhereas value would be more consistent with other rules, yes, it would be not flexible as it could have been, but really, who would write code like:\njs\ndoStuff(a , b ,);\n?\nThat would mean implementing opposite rule too.\n. >  a, b, c and a,b,c\nI think those cases could be used in the presets, when others are not, so they are probably more common then others.\nI would say, let's be a little less flexible and a little bit more consistent.\n. > Should the commits be squashed so it appears as it was done this way first time around or do you prefer to keep the history?\nTook care of it, thank you!\n. It might beneficial to add a test with defined errorFilter option in .jscsrc config.\nJust in case\n. I remember de decided to do this in 2.0, did something change?\n. Sure we can, but should we? Anyway, do not feel strongly about this.\nWould need to create warnings for them though, which is always a pain.\n. Merged!\n. btw, we about to cut new version (1.8) soon and i remember that you wanted to add new stuff in the preset, whereas, preset changes are only included in major/minor releases.\n. Merged, thank you\n. like \njs\nvar b = 1,\nc;\n?\nThe \njs\nvar c,\nb = 1;\nwould be a blast too, would you like to do them?\n. Would land this, only at 2.0\n. @othiym23 you help here would be really appreciated, it seems it affects a lot of people :-(\n. @othiym23 thank you for the clarification, great news and all :-).\n. LGTM, need land this, if you rework all the tests in one pull it would be hard to merge it, so i propose to land this kind of stuff with small portions and ASAP.\n. > It can be solved easier by introducing an option allowNewLine to whitespaceBetween\nI fear we could bloat interface if new arguments will keep popping up.\nMaybe new method for this altogether? Or make whitespaceBetween to allow newlines all the time? \n. > This replaces #126.\nAnd #726\n. Associated PR https://github.com/jscs-dev/node-jscs/pull/880\n. It's great that we would use presets configuration instead of individual rules configuration :-).\n. Sounds like awesome vacation!. I'm too primarily take vacations to calmly finish some work :-) \n. Sounds like awesome vacation!. I'm too primarily take vacations to calmly finish some work :-) \n. Looks good!\nMaybe you could send PR now? Could very well be a WIP.\n. We have a falling CI-run, also, since there couldn't be a disallow rule, perhaps we can call it validateNewlineAfterArrayElements, maybe even use it as general rule for naming - if there couldn't be an opposite rule, start name from \"validate\"\n. Oh, and nitpick: be sure to use imperative mood in commit head\n. Would you like try to fix it?\n. Hm, we didn't remove it - https://github.com/jscs-dev/node-jscs/blob/master/package.json#L90, but jscs was indeed published without it, weird. \nI suspect npm publish bug.\n/cc @mikesherov \n. Will consider this an asymptomatic isolated episode, will re-open if something like this will happen again\n. LGTM\n. @jdlrobson @indexzero relevant - https://github.com/jscs-dev/node-jscs/issues/808\nSo one rule or two? Thoughts?\n. > @marklog\nYou almost got it :-)\nYeah, that is what i proposed in #808, easier to implement and test. Although these values stand out from values of other rules. \nBut we can disregard that point since even if we did two rules, it would became one in 2.0 anyway. \n. Or it could be the same rule with different values\n. Or it could be the same rule with different values\n. @craigjennings11 didn't notice this comment before, would you like to send us a PR?\n. We doing that in general, but requireInitializedVariablesFirst is still required to be implemented, although since jquery code-style changed we no longer need requireInitializedVariablesLast\n. @mikesherov if everything okay here, i will merge this in couple hours \n. No, that pr only for grouping parentheses\n. @BlackVegetable still interested?\n. +1\n. > disallowYodaConditions should not be specified.\n\nCode Conventions does not mention this.\n\nAs far as i know he never uses yoda conventions, that is enough evidance for me otherwise LGTM\n. > \"not explicitly forbid every possible stupid thing a user might do\"\nI think jslint does exactly that.\n\nInstead it mostly states what one should do, leaving implied what one shouldn't do.\n\nNot sure if crockford style is that groove. In any case, i would judge any the style by generalized principle - if code that follow some style never does something - it's forbidden otherwise why it doesn't do that? I hope my point is not to vague. \nAlternative, is pretty much removing all require rules from the preset completely, and, i mean, @douglascrockford is not a philosopher of some kind :-)\n. So i reach out to Crockford, his response was - \n\nIt solves a problem that C has. If you use JSLint, there is no good reason to do this.\n\nSo if you use crockford preset means you use jslint? I'm not gonna make assumptions and merge this as-is.\n. I closed it via merge, you changes are now in 1.9.0 :-) - https://github.com/jscs-dev/node-jscs/commit/5ccacb56491c3c93901c12d5a7f292e1de2f57ee\n. Without yoda rule too btw\n. @mrjoelkemp not sure i understood your point, after fixing the CI run this pull could be landed for 1.9, but i would wait until we ready to release it and land it only then, just like with https://github.com/jscs-dev/node-jscs/pull/819\n. Yeah, i don't understand where here is back-compat issue, jscs very rarely have a back-compat issues, we not once yet changed API, removed some rules yes, but nothing more. \nAnd even that could hardly be interpreted as compatibility breakage in the semver terminology.\nOur version strategy is in place so user could choose what he would rather pursue - more stable jscs checks - same amount of errors or less \"stable\" runs with recent fixes - more errors.\nPreset changes could be introduced either in minor or major release because of that. \n. I would still land this in 1.9, but given that you both sure it would a bad thing until 2.0/autofixing i'm trusting your senses - let's wait.\n\nI think we need to then amend our policy to make this clear\n\nI would say we need to adjust it, like if preset code-styles changes significantly we would release the changes only in major version.\n. > Seems like the same rules as before apply\nThey not exactly that, minor could be released with with more errors, but patch release couldn't - \nhttps://github.com/jscs-dev/node-jscs#versioning--semver \n\nA bug fix in a rule that causes JSCS to report more errors.\n\nAlthough if you talking about presets only, then that new strategy would limit us with adding new rules to the preset, since it will definitely provide more errors then before\n. In that manner i could say that\n\n\"Puporsefully modifying existing rules so that they change the meaning of a rule\" \n\nonly have \"rules\" word not \"preset\" word.\n\nThis preset change, IMO, falls into the idea of \"Puporsefully modifying existing rules so that they change the meaning of a rule\"\n\nAnd \"Any preset changes.\" for minor version didn't? I'm not missing parts but focusing on \"report more errors\" part, meaning we can introduce changes that reports more errors with minor release.\nLet's compromise on clearing the wording here, so it wouldn't require us to use abbreviations like \"IMO\"\n. Okay, cool, will write a letter to jscs group so we wouldn't cloud this issue\n. I will kill myself explaining this to ppl over and over again :-).\nDo this - \njs\n{\n    \"preset\": \"airbnb\",\n    \"disallowMultipleVarDecl\": true,\n    \"requireMultipleVarDecl\": null\n}\nI hope new upcoming config will make this clear.\n. It was decided to wait to apply this policy until we switch to more frequent releases, bottom line is - updated preset will be available in 1.11.\n. After response to @mrjoelkemp questions, i think it's great thing to land, although @coveralls says we decreased coverage with this.\n/cc @mdevils so you would be up to date.\n. > ES5 is used by default, as I see.\nCan we close this then?\n. -1 from me, es3 environment is dying but this stuff complicates our cli interface and rules configuration.\nNot that my \"-1\" is a blocker more just a note but i feel uneasy with it.\n. Yep, this understandable and regrettable at the same time\n. Is this ready?\n. Didn't review it, but i'm gonna merge it, since this is blocking https://github.com/jscs-dev/node-jscs/pull/868\n. @mikesherov, @mrjoelkemp thoughts?\n. Updated preset will be available in 1.11\n. Looks great, but it seems the same problem exist for the opposite rule as well. \nWould you like to fix this case for requireSpaceBeforeBlockStatements rule?\n. Cool :-)\n. Still interested?\n. That's kind of hard to justify since this rule has wide array of use-cases.\n. I don't know how this could be implemented correctly, if you have an idea feel free to explore it\n. > I am not confident in putting MemberExpression and Identifier under the same option key\nI have the same confidence - that is my initial fear about it,\nShould this option work on cases like:\n``` js\nvar x = function() {}\n// or \n{\nx: function() {}\n}\n```\n?\n. > I am not confident in putting MemberExpression and Identifier under the same option key\nI have the same confidence - that is my initial fear about it,\nShould this option work on cases like:\n``` js\nvar x = function() {}\n// or \n{\nx: function() {}\n}\n```\n?\n. Looks like this is pretty common request - https://github.com/jscs-dev/node-jscs/issues/852\nHow about we only focus on funargs and rename new option to allExceptHOF : ... or allExceptFunctors: ...\nIf you still interested, send us PR.\n. Sorry for the late response, got caught up with other stuff. Your use-cases sound like a new rule, if you send us a PR we would definitely consider it.\nIt seems verbose error stacks is primary reason for use of disallowAnonymousFunctions i would extend its scope. \nHowever, function might be a named expression, which might be considered as an error, if this rule would find these cases. But i would catch them anyway.\n@mikesherov what's your take on that?\n. Relevant https://github.com/jscs-dev/node-jscs/issues/834\n/cc @Nijikokun, @ahmadnassri\n. oops, wrong reference, thanks @Nijikokun \n. > duplicate but it looks like the thread has shifted over here instead of stayed on #655 =/\nAs long as it would be fixed, i don't care where is discussion is held :). Is there any takers for this one? We are pretty buried with other issues.\n. /cc @mikesherov \n. Since quote is not token, you can't put into exception list.\nWe would really like that too, i'm working on this, but can get enough time to finish it.\n. Reopening, since jquery code-style has changed and doesn't need it anymore, but incoming idiomatic preset would require this feature.\n/cc @hzoo\n. Don't forget to add labels :-)\n. Sounds like validateIndentation bug.\n/cc @mikesherov \n. Sounds like validateIndentation bug.\n/cc @mikesherov \n. Don't you think that this configPath as non-enumerable property is just too tricky thing to have?\nWe could rewrite it in another way to make it explicit and visible.\n. btw, after we will land this, i think we should release new version\n. Sounds good to time, would like to send us a PR?\n. Given our semver policy, we can merge this only with 1.9, i wanted to release 1.8.2, but maybe it's time for 1.9? \nSay, tomorrow?\n/cc @mikesherov, @mdevils\n. We don't have a rule for this case, if you like, you can file a PR that we could consider.\n. Nope, but we should though, i'd say we need to introduce a new rules, with word \"punctuation\" and perhaps \"sign | symbol\" in the their names\n. That would be a breaking change, so in 2.0, which should be released soon, would you mind sending pr for this?\n. jscs .jscsrc - amm of course, \".jscsrc\" is not js file.\nIt seems jscs config is included into the list of files to check somehow. \nWhat steps to repro? Could you create a test repo for it?\n. @mikesherov are we good here?\n. Thank you for the patience! And sorry it took that long to land.\n. Duplicate of https://github.com/jscs-dev/node-jscs/issues/834\n. @Krinkle if you notice any other inconsistencies or you have any new ideas about new format, please feel free to join the discussion - https://github.com/jscs-dev/node-jscs/issues/698\n. Merged!\n. Another validateIndentation bug :-(\n/cc @mikesherov \n. @Krinkle could you verify?\n. /cc @mikesherov \n. /cc @mikesherov \n. I'm afraid until esprima would not have support for it, we can't do anything about it.\nSorry.\n. /cc @mdevils \nWant to give it a shot?\n. > not allow installing jscs globally\nThat is what we recommend - http://jscs.info/overview.html :-), i can see how it might cause problems though.\n. > Wow, I didn't know we recommend that O_O\nThat is universally acceptable way - \nhttps://github.com/jshint/jshint/blob/master/package.json#L66\nhttps://github.com/eslint/eslint/blob/master/package.json#L82\nand for a lot of programs alike. And as @zxqfox mentioned, IDE plugins usually ask you do it, although i have no idea why.\nIt could do harm with obvious ways though.\n\nOr consult with how JSHint or ESLint accomplish this?\n\nI think there is not many things you could do, usually discrepancies between global and local installs are low, especially for our kind of tools. grunt-cli example is only acceptable way to handle this, if we want to handle this. \nBut i don't think this is that much of a big deal, i think people know about this problem and why it is like that.\n. > A few (not impossible to solve) reasons:\nI would install own version of jscs with the package, without depending on local one, or make local dependency a requirement, it's weird if project has \".jscsrc\" config but don't depend on jscs\n. > What if we make some jscs-cli package that will install global jscs binary and will use locally installed jscs in projects.\nThat's what i said in https://github.com/jscs-dev/node-jscs/issues/863issuecomment-69349848. I think we should have a real life issue before doing that stuff\n. > We will \nThat's speculative\n\nnow I can't use plugins without global installation\n\nThat's a different issue\n. No, feel free to create one\n. Maaan, you gotta be more convincing then that! This is not a feature, this is a bug and big one!\n. Fixed via https://github.com/jscs-dev/node-jscs/commit/4008ba26fba862b6dbf55de6a32118a35a0f2133\n. @gero3 i'm curious, how did you find this? Do you use it somewhere?\n. Could you give me a link?\n. We're talking about https://github.com/jscs-dev/node-jscs/issues/516 right?\nAwesome :-)\n. > I suppose you'd have to check the case of the string.\nI would go with that, as an additional option for requireDotNotation rule, anyone wants to tack this?\nGiven the perf improvements, i think it would justifies the 1.9.1 release.\n. > exceptSnakeCase\nSounds good, although except_snake_case would be more fun :-).\n. Check it out - https://github.com/jscs-dev/node-jscs/pull/890\n. Could you check if there is conflicts with https://github.com/jscs-dev/node-jscs/pull/825 ?\n. > Coverage decreased (-0.03%)\n?\n. > I think easier to rebase after #825 will be merged\ndone\n. Could add tests for https://github.com/jscs-dev/node-jscs/pull/868#discussion_r22388356?\n. Merged, although, i doubt we would ever need isSnakeCased and trimUnderscores methods somewhere else.\nLet's put a pin on those\n. Still a WIP?\n. Cudos for this hard work!\n. Oh, man, this was merged pretty fast.\n1. I'd say it's definitely should be in separate repo, with it's own issues and commits, otherwise it would clutter everything\n2. Readme.md of the node-jscs should be clean now, and consist only with very basic info about the project\n3. Twitter feed, if we need one, should also show \"#jscs\" tweets\n4. All those \"who uses\" references should be verified, (although i don't feel the need to publish them in the main page or publish it at all :-), i think we need a links for each of them to be sure people are actually use it.\n5. \"who uses\" reference should be more focused, now everything is in the pile without evident structure\n6. Rules should be dived and clusterized with their own pages and description for them should be taken from JSDoc as it was in @just-boris pull\n7. jscs.io also could be used, as redirect\n8. \"Extensions\", \"Friendly packages\", \"CLI options\", \"options\", \"presets\" should be moved to their own pages\nI would put N1 as a priority, so everything else could be moved to the issues. \n. btw, great job!\n. Will merge this, when 1.10 will be around the corner, there is no date for it yet\n. @mdevils it seems we need more methods for assertion module?\n. Okay, lack of assertion methods should block this PR\n. No code changes only tests, i think i love you :-).\nBefore assertion API this job was on getPointerEntities method, but now it's used only once and with assertions API we no longer need it.\nWould you like to remove this method and adapt requireOperatorBeforeLineBreak logic to the assertion API?\n. Sounds like a duplicate of https://github.com/jscs-dev/node-jscs/pull/861, please try it with current master, if problem persist i will reopen this.\nOtherwise, fix will come with 1.9.1, which should be released in couple of days, i hope that is \n. @mikesherov, @mrjoelkemp please check it out\n. There is a lot of redundancy and inconsistency in the rule names, everything of which should be addressed in 2.0. \nSince this is opposite rule, it wouldn't makes sense to get rid of it now, but totally should be done in the future. \n. Hm, had the same thought :-)\n. This is probably npm issue, like - https://github.com/npm/npm/issues/6309 \nWe don't do anything special for esprima here.\n. We discussed this issue in length in here - https://github.com/jscs-dev/node-jscs/issues/787\nDo you still see the error?\n. Yeah, given discussion in here. i'm reopening this.\n/cc @Krinkle, @mikesherov \n. I don't see a reason why we still need a esprima-harmony-jscs it seems we can just update esprima to the latest 2.2 and let es6 be enabled by default.\n@mikesherov ?\n. Why?\n. Why?\n. @mikesherov okay, so it seems after 2.3 we can ditch it, although we can update esprima to 2.2?\n. @Krinkle, @ljharb could use current master in your CI-runs to see if problem is resolved?\n. Minor will be released very soon (hoping for monday) just wanted to be sure we all okay here, so we wouldn't need to release 1.13.1 or something.\nIt most certainly should be fixed, but i can't test it, can't reproduce it, so it's a shot in the dark.\n. Thank you for the report, would you like to send us a pull request?\n. Went ahead on this one, would need to fix this asap\n. Did a simplified version of it, but still merged yours, since it was better\n. This nextToken/subjectToken could be very well previous or the next token, so i would choose a name which would be agnostic to the direction, since \"direction\" doesn't matter, because it doesn't reflected in checks of those methods.  Same with token property.\nBikeshedding process is as fun as i remember it.\n. > We need to start planning 1.13, 2.0, and make determinations on what the goals are. Can't land this until a potential 1.12.1 goes out also.\nIt seems 1.13 would the next release, merging.\n. > Coverage decreased (-0.04%) \nBecause of the configure ifs, i find it tedious to add tests for it, should be resolved with https://github.com/jscs-dev/node-jscs/issues/895 instead\n. > As I can remember, @mikesherov wanted to do something about it.\nYeah, i remember something like that, although no one responded when i repeatedly ask about this, hence the ticket\n. > Who will implement the validation using this?\nWhoever is capable and have time to do this :-), after 1.10 my next item is jquery tasks, there is a lot them accumulated out there.\n\nWe just have to make sure no rule currently overrides this.values\n\nconfigure method usually set only private properties (style which @mdevils set long time ago, nice going btw :-) i.e. with \"_\" prefix, so we should be good there.\n\nHence, the validator can be shipped quickly without being used.\n\nThat is my thought exactly.\n. What options do we have on the table?\n. > Coverage decreased (-0.02%)\nSame as with https://github.com/jscs-dev/node-jscs/pull/893#issuecomment-69401817\n. Wow, it would also fix https://github.com/jscs-dev/node-jscs/issues/111\n. Wow, it would also fix https://github.com/jscs-dev/node-jscs/issues/111\n. Updated preset will be available in 1.11\n. > When I was done, I found the discussion about the logo and a high res version on the mailing list :-/\nAsk next time, we could have save you some time :-).\nNot gonna feel comfortable with this, until author of logo could check it out.\n. @alawatthe still interested?\n. Sure thing! I'm glad you on it :-)\n. If no one objects, i'd like to start using this logo. \n@mdevils it seems we need to land it in some repo, site or main one?\n@mikesherov, @mrjoelkemp, @zxqfox thoughts?\n@panoplied you cool with that?\n. @alawatthe could you post new logo in svg?\n. Okay, cool, new logo is in the house!\n@alawatthe congrats!\n. /cc @mikesherov \n. /cc @mdevils might be helpful info at refactoring\n. Could you mention in the commit what issues do you fix?\n. LGTM\n. > Changed the title because people have asked to control other options as well.\nIs there related issues?\n. Well, technically it's should show a error just like description for the name suggest -\n\nDisallows placing keywords on a new line.\n\nBut i guess we can special case it, since it makes more sense that way.\n. Couple notes: \n1. It seems we don't need to \"fix\" that for opposite rule\n2. I know one other case when braces are optional: do...while (is there more?), but if that rule is activated for while keyword it will also catch precondition loop too, since it does not distinguishes those cases, so no special case for it.\n. I think we can release 1.11 right after it's done.\n/cc @mikesherov @mdevils \n. For jscs --configure it gives\n/Users/arkel/Workspace/jscs/lib/utils.js:169\n    var start = path.substring(0, 2);\n                     ^\nTypeError: Object true has no method 'substring'\n    at Object.exports.isRelativePath (/Users/arkel/Workspace/jscs/lib/utils.js:169:22)\n    at Object.exports.normalizePath (/Users/arkel/Workspace/jscs/lib/utils.js:196:14)\n    at Object.Generator.generate (/Users/arkel/Workspace/jscs/lib/config/generator.js:47:27)\n    at module.exports (/Users/arkel/Workspace/jscs/lib/cli.js:104:10)\n    at Object.<anonymous> (/Users/arkel/Workspace/jscs/bin/jscs:36:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\nIt seems No input files specified. should we displayed instead.\n\nDid node bin/jscs lib test bin publis from https://github.com/jscs-dev/node-jscs/blob/ccff2178d35c785190eb5f62a75149a4ae6dd5a6/package.json#L112\nGet the same error as above, whereas node bin/jscs lib test bin publish -c .jscsrc works, looks like a blocker\n. I guess comments above is enough for now\n. I can finish this up if @mrjoelkemp is busy, but would love some help with writing the docs.\n. Awesome!\nWill you check out inquirer module?\n. Sounds good\n. I'd say better ship early, there probably more issues with it that we didn't consider yet. If we would try to make everything perfect, we would never release anything.\n\nBut it should be noticed as experimental\n\n+1\n@mrjoelkemp \n\ndoes not turn on automatically\n\nThis is 2.0 stuff https://github.com/jscs-dev/node-jscs/issues/986 it would be great to have open tickets for other issues you mentioned.\n. /cc @mikesherov \n. Could add an opposite rule? \nAnd add this rule to the following presets:  \"jquery\", \"wikimedia\", \"google\", \"airbnb\" and \"crockford\".\nEach preset changes with different commit.\n. > and to MDCS\nDidn't find the mentions about it in the mdcs code-style, could you point me to it?\n. @gero3 could you put preset changes in the different commit? That might be helpful in the future.\n. I'm planning to release 1.10 in couple hours, \"127.1Mb\" doesn't sit right with me, wouldn't even thought it would grow that much.\nI'm gonna yank fix for #847 and wait for more intelligent approach. \n@mathiasbynens could you verify @alawatthe patch when it will come?\n. btw @mathiasbynens \n\nFor the use case in jscs, unicode-6.3.0 should really be a devDependency, not a dependency. The regular expression for identifiers should be generated at build time (just once) and saved to a file that is part of the npm-published tarball.\n\nWould be cool for you to point this out in the docs, it seems as most popular use-case, when now i see only npm install unicode-6.3.0 --save there\n. Unfortunate typo :-(\n. That was intentional, ArrayBrackets reference to square brackets, probably need to rename this rule.\n@mikesherov, @mdevils am i wrong here?\n. No, see - http://en.wikipedia.org/wiki/Bracket\n. Yes, but this rule previously would catch only array declarations through literals.\nThis case:\njs\nx = [ 1 ]\nx[0]\nwas previously missed. \nAnd rule that would distinguish object and array accessors would be hard to do and i think it pretty much weird, if someone would need one but not the either. \nIt seems name part ArrayBracket was specifying the type of bracket not implying it could be used with arrays only.\nBesides, objects with brackets accessor context are commonly referred as \"associated arrays\", for example - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\n. Sounds like we should add new rule(s) and revert recent changes for requireSpacesInsideArrayBrackets.\nI wouldn't want to do this until 1.11 (although we can, according to our semver policy), since this rule used in couple of presets and current behaviour seems as more preferred one.\n. These changes has fixed three issues and introduced new values, which with this tactic, should be re-implemented, that would be a pain, current behaviour, as i can judge, is needed for 7 presets. \nWhereas this issue is presented only for custom made configs. \nWhereas it's a matter of opinion if these cases should be catched or not.\nBecause of these reasons, it's easy and more subtle to revert in 1.11, this version could be released right after https://github.com/jscs-dev/node-jscs/issues/797, which, i hope, wouldn't take long.\n/cc @mrjoelkemp \n. > By revert, you mean return this rule to what it was doing (1.9)\nYep\n\nand introduce a new rule that does the current (1.10) behavior?\n\nYep and, in the presets, replace old rules with new ones. Although if we will not re-implemented newly added options that might be considered as feature regression, so i'd need to check how hard it is.\n. > +1\nhttps://twitter.com/rwaldron/status/557629305552134145 ... just kidding :-), although it was already stated that we would do our best to bring this back in the next version, unless you wanna help?\n. How about we make a module from tools/generate-pattern.js by moving it to publish/helpers folder and execute it in publish/prepublish.js?\n. Closed via https://github.com/jscs-dev/node-jscs/commit/2fca14a5dc2ac1f8db29ed4864684f25bdd0f674\n. It does nothing? http://jscs.info/overview.html#esnext\n/cc @mikesherov \n. > Where does this come from?\nJust a thought, same use-case as with https://github.com/jscs-dev/node-jscs/issues/866\n. -1 from me, one CI is enough, i think it's fair to say we depend on other tools for jscs to be cross-platform.\n. @mdevils what is your take on this?\n. It seems hassle for nothing, we didn't yet receive at least one ticket of windows failures and now we need to change a bunch of things for no apparent reason.\n. Meant this comment - https://github.com/jscs-dev/node-jscs/pull/937#issuecomment-72328916\n\nActually the arguments are also parsed by supports-color code and the good thing is mocha just ignores the arguments which it does not understand (as opposed to throwing error like: invalid argument).\n\nThis is unsettling, it should work without any hacks.\n\n\nnode --version\nnpm --version\nnpm install\nnode_modules/.bin/jshint .\nnode bin/jscs lib test bin publish\n./node_modules/.bin/mocha --no-exit --color\n\n\nIt should do only npm test and that's it.\n. @zxqfox \n\nI think it should do npm run mocha or npm run appveyor with just mocha\n\nYeah, this is what i call \"hassle\"\n\nWe don't need to test codestyle several times on different platforms.\n\nDon't want to know about :-(, i would let it execute as it does on travis.\n@am11 \n\nnpm test does not work when jshint is not globally installed.\n\nIt does, this why we have it as dev dep, user doesn't required to install anything globally, see npm docs for more info.\n. @am11 btw, thank you for the all work you doing here, i'm skeptical, but we're all appreciative\n. LGTM\n. Confirmed, doesn't work for call expression\n. Yep, will do that today\n. Allowing import to be everywhere sounds like side-effect of transpiling, otherwise it seems weird for ES6 to forbid it but for transpiler to allow it. \nWhy is that? Could you provide links to relevant topics?\n. Yep, remember arguing for that :-)\n. Wow!\n. And if https://github.com/jscs-dev/node-jscs/issues/109 will goes through, it would be even simpler to share your presets.\n. @phanect our thoughts exactly, but i as mentioned, #109 might resolve \"too hard\" problem, allowing you to do what you ask but with preset property.\n. @necolas \n\nreporting 100s/1000s of errors where there were none before.\n\nif you are still going to use caret, this situation will happen again, we're trying really hard to make patch releases without additional error reports specifically for this reason, so if you don't want this kind of mishaps in the future - use ~.\n. > Do you plan on changing rule behaviour for minor releases?\nNope, but we will try our best to fix known bugs and if we fix them, you might get unexpected 1000 errors from nowhere in your CI-run \n. > 98.03%\nWow!\n\nCan we remove this for 1.11 or must we wait for 2.0?\n\nWasn't documented, i think it's safe to remove in minor. \nPerhaps we should start documenting js-file and cli-config modules, one of the steps would be to solve https://github.com/jscs-dev/node-jscs/issues/747\n. > ping @markelog ... should I also switch all of the presets to use the new rules? None of them have caveats for expression vs. accessor AFAIK.\nYeah.\nI think after https://github.com/jscs-dev/node-jscs/pull/958#discussion_r23536197 we are good to go.\nNicely done!\n. It seems new rules behave according to code styles.\nBut i also think we also should address https://github.com/jscs-dev/node-jscs/pull/822 and https://github.com/jquery/contribute.jquery.org/pull/104.\nAnd do this sort of thing until 2.0 is released. After that, switch to strict release tactics. \n. > but you should file bugs against the existing rules.\n+1\n. Yeah!\n. Updated preset will be available in 1.11\n. Updated preset will be available in 1.11\n. @cowwoc would you mind posting the code that triggers this?\n. Yeah, it might be a good idea, although it rarely happens\n. Thank you for keeping an eye on it\n. Updated preset will be available in 1.11\n. Thank you!\n. I would divide this commit, require-parentheses-around-iife changes are nothing to do with #436.\nCode looks better, comments especially helpful, but i'm afraid bus factor of the validateIndentation rule is equal to one. @zxqfox, @mdevils, @mrjoelkemp i'm i right?\n. Well put @mikesherov. \n@ikokostya Perhaps there was a misunderstanding? \n\nWe recommend installing JSCS via NPM using ^, or ~ if you want more stable releases.\n\nMeans you get stable releases with ~, not with caret. Your build will eventually fail if you will keep using the caret. Wasn't that clear? If so, we can update the docs with more precise explanation.\n. Code styles, usually, are not as precise are jscs rules, so more often then not, preset rules are based on code examples:\nhttp://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#eval__\nhttp://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#Array_and_Object_literals\nIt seems we're in line here.\n. No, see the docs for those rules and feel free to create a ticket for their rename.\nAlso don't forget to add labels to the issues. \n. @dbrinegar are satisfied with explanation?\n. > Maybe a note in the docs \"this is our interpretation of the style guide and not meant to be compatible with gjslint\"\nMaybe it is other way around? Maybe we just better then gjslint? :-) \nI'm kidding of course, but do think its one sided opinion, jscs have a lot of rules, therefore has more features, maybe gjslint devs just didn't had a chance to implement such check?\n. @cramforce could help us out here? \n. /cc @mdevils, @mrjoelkemp, @mikesherov, @zxqfox \n. That is because eslint added and removed default rules with each new version, which is irritating, we good here, because we have strict semver policy, so in our case, if we would add or remove rules that cause more errors, we would do that only in major.\n. Defining your own config is hard, even if you define only online like \"preset\": ..., since you would need to know the rules of that preset or at least have basic idea of that guide.\nBut if we would use default preset, people wouldn't need to think about that stuff, they just would start working, this is main advantage of the https://github.com/feross/standard package, this is main reason why people used it, i think we should listen the community and plan accordingly \n. > I think this problem is solved by adding an --init option, which is simply --auto-configure . followed by --fix . and perhaps even automatically electing (f)ix for every violation.\nSee #1471\n\nOur docs should have a big hero banner at the top:\nnpm install -g jscs && jscs --init\n\nWell, some users don't need that, for example they might base their decision of the preset on how good it is, not on amount of errors current code is actually has, plus autofixing deals with most errors anyway - basically it doesn't matter how many errors it finds autofix will work up most of them. Also what if there no code yet, what if user chose the jscs config without any code?\n\nIt creates unneeded holy wars for very little value for the user.\n\nSimilar decision was chosen by the eslint maintainers for the default presets, that it would create holly wars, but it didn't happened in jscs.\nI think users are a lot more friendly then we might think they are :-). \nI'm hoping 3.0 will be out in next couple months, we basically already started working on it - https://github.com/jscs-dev/node-jscs/pull/1502.\nSo i think for this couple of months we might try this, if it wouldn't go well, we will revert in 3.0.\n\nWhat would the default preset be? I'd vote for airbnb as it seems to be the most mainstream.\n\nThis is most popular preset according to github traffic, so i would say yes.\n. > Most linters that start becoming opinionated later revert.\nJSLint, ESLint, JSHint all has default configs they didn't revert that behaviour. I'm not sure what are you referring to.\n\nSimply because a popular library exists doesn't mean we need to copy their functionality.\n\nPython, Go and many more has that \"default config\", whereas in more mature languages static analises tools with \"default config\" included in the compiler itself. We actually also received couple issues that \"jscs doesn't lint\" simple because user didn't set their own jscs config. \nAnd again, popularity of standart also shows that, some people don't want to set their own config, they don't care about style, for them, it doesn't matter what some config looks like, it just needed to exist.\n\nWhy aren't we content being a module consumed...\n\nThis fix wouldn't change that, it doesn't mean we would became opinionated, we would have default as most tools do, a convention, that you could change if you want to.\n\nConsider the sublime text plugin... suddenly it's going to start throwing errors when you clone a repo that doesn't have a .jscsrc? And those errors are for a style guide you didn't choose or ask for? Blecch. \n\nThat is why this is a major change, but that actually not gonna happen, for that case plugin would work as it did before - https://github.com/SublimeLinter/SublimeLinter-jscs/blob/aff99a9be7685a2c1eef7288d899a79520c100f4/linter.py#L35\nIf some plugins do not do that, they can adapt, again, this is why this is a major change, one way or another plugins would need to adapt. For example we no longer show \"There is no errors...\" or our exit codes now completely different, those tools could depend on that, but there is no going forward, without breaking a few eggs.\nEven if they don't use jscs --config=.jscsrc, \"One code style to rule them all\" seems as a good future to me. For example, most of the Python, Go, Ruby written programs use one code style. Why should JS be any different? If it shouldn't be, then ppl would simple use their own config, that would be a way to tell us they don't want that. \nEverything i stated above should be a big pointer for us, i think we shouldn't ignore all that.\nThis is might be a bad decision, yes, good intention and road to hell, all that, but it also might be a very good one, we don't know, right now, we have opinions, couple pointers and no data. \nSince next major version (let's Hope!) should come up soon enough, that would be a good experimental period.\n. Resolution of this ticket depends on https://github.com/jscs-dev/node-jscs/issues/1064\n. It seems it was done already\n. Fixed with https://github.com/jscs-dev/node-jscs/commit/0f78baf08fba75aeba4575608aaa08c384875701\n. So what's up with this one?\n. @mrjoelkemp good point, added\n. @sfrisk, @arschmitz, @scottgonzalez, @mzgol since you voted \u21162 in https://github.com/jquery/contribute.jquery.org/pull/104, new code will look like that (see test/data/options/preset/jquery.js changes), still good?\n. We decided to remove global lang option, and let rule decide for itself \n. Thank you for the patience! And sorry it took that long to land.\n. Where is your config located?\n. .jshintrc? Not .jscsrc?\n. At this point only major and CST related bugs will be fixed\n. > Useful for standardizing styles across all JSCS org projects.\nNot sure if that is needed, grunt-jscs, for example, uses jquery preset and pretty happy with the choice.\n\nAlso useful if we want to eventually support the JSCS preset as the default.\n\nThat's undecided, i'd say, if would choose a default one, we should choose most popular one.\n. > @markelog I'm not sure why you against that.\nBecause you the only one how does this. \n- \"JSCS\" preset doesn't have a formal and detailed definition.\n- Who would use it, aside from us?\nIt seems the only reason why we want to add it, is only because we can. Seems like a plugin job.\n. @zxqfox would be a perfect reference in the plugin/preset wiki\n. @Slayer95, i see you have a commit there, would you like to send us a PR?\n. Oh, well can do this only in 2.0, since https://github.com/jscs-dev/node-jscs/issues/1150 is a breaking change ((\n. Is that still WIP?\n. ping @zxqfox \n. Just a remainder, if pr has two \"LGTM\" you can definitely merge it, @mdevils, @zxqfox could one of you do that?\n. @jfelchner do you have any suggestion how we could implement such feature?\n. How about we settle on this version right now and rewrite it if needed?\n. There is stuff to improve, but i would rather do it later, get response from the community and not wait for another three months\n. We should prioritize this and schedule for the new release\n. Whenever it's ready :-), it seems it could be soon though, there is couple prs we could land\n. extract\nSo this is not a cli flag? What about documentation? Do we really needed? JSHint has it, but i wonder if it is redundant?\n. > No requests before, but I could add both if needed. But we need to determine your interest first. PR is 7 months old already, but owners opinion about feature is still not clear to me.\nNo-no, that was about replacing it with fileExtensions property.\n\nPR is 7 months old already, but owners opinion about feature is still not clear to me.\n\nI would landed it it seven months ago, but couldn't, since some of us thought we should wait, sometimes, perfectionism wins when it shouldn't :-(.\n\nMost strange part to me, that you ask those questions after your own proposition recently to continue work on it (and proposition about merge in june) and when I fixed known problems once again :-/\n\nSorry for misunderstanding, i should have better express my thoughts, i'm very excited about this feature,  one way or another, it will be in the next release.\n. Here would be good\n. Would like to release new version this week, will you have time to finish this up?\n. > I afraid I have no time till Sunday. But on Sunday I would continue to work on it (maybe earlier but I'm not sure).\nFriendly ping\n. > For now I'm not sure we need for special values, i.e. always, auto and never.\n:thumbsup:\n. Would be cool if anyone else would check docs, /cc @hzoo, @mikesherov \n. Okay, i see there is couple artefacts of the previous logic and room for improvement, but we can deal with that later if that would be an issue\n. Would you mind squashing your commits?\n. Hooray! \nMany thanks @lahmatiy, this was truly epic patience test!\n. It was optional thing to do anyway\n. Since next release should be 1.12 it's safe to land\n. Thank you\n. I'd say is pretty much an edge use-case - to much for adding a new option, it seems such problem should be resolved on plugin side.\n. > than the alternative amount of LISP\nThis is why js better! jk. Don't do regexes, orient on the exit code\n. The problem with adding additional options with very limited use that it might clutter existing API. \nWhen some API provides a lot of options is starts perceived as complex, when some API provides big docs (like with jscs -h) people stop reading it, especially, when good amount of those options do not fit with most of use cases, especially, when similar tools don't know about that user story or when users might not know that this is theirs user story.\nIf you don't implement your own config search (which is, i think, is good way to go), then currently, you might have to navigate through existing exit codes. \nYes, that is not a perfect solution, since, as you mentioned, user might not immediately notice that their config is faulty. But i think it's best thing to do, at the moment. \nHowever, we can improve on it by providing additional exit code for every faulty situation, so user user can differentiate by them, unix way and all that, but this change only can happen in major version.\nCould you settle on hack now and after 2.0 will come out issue will disappear by itself?\n. I'm not sure if understand you, differentiation with exit codes would solve you problem?\n. In any case, it would be good to have it - https://github.com/jscs-dev/node-jscs/issues/1095\n. > I'd still need to add support to Flycheck to check for particular exit codes\nThis is seems as most promising and correct way.\n\nI don't think 127 is a correct \n\nWe can debate on code numbers in relevant issue, the main thing is that we can assign different exit codes on different situations.\n. > those arbitrarily-defined codes could vary from linter to linter\nI could say the same about your option, there is already established way for handling these kind of situations and that is an exit codes, it's been like this for years and years before us and we should stick to it then making up our own ways to workaround that.\nYou see only how it would benefit to you, but some reason ignoring my points above. I think we discuss this long enough, so i'm closing this.\n. > I also know my coworkers have been asking for this as an option as well, and we had other tickets about this\nIf that so, then this is a duplicate so it should be closed, also could you provide the links?\n\nI literally just told @jacksonrayhamilton that I wanted to here from @zxqfox and @mdevils \n\nHow issue status preventing them from sharing their opinions? If we decide to go another way, we can always re-open.\n\nWhat gives?\n\nI can redirect the same question to you, i just close this, what gives? Please leave this closed.\n. > @markelog, because you also closed the other one from my coworker without a chance for discussion!\nCould you post a ticket number? My apologies if i did, if you find my action too hasty don't hesitate to ping me in IRC or somewhere else next time.\n\nIs #962 the same as --ignore-missing-config\n\nDoesn't look like a duplicate, point of that issue is to do be quite only if config is there and there is no errors to show.\nI also like 3, not sure about the 4.\n. Not sure we need allow_failures or .11 - if something fail and we support it then it shouldn't fail :)\n. Thank you\n. @mikesherov \n\nbut using getNodeByRange is a bit unsafe\n\nUnsafe how?\n. Will ping @mdevils too :-)\n. > @markelog as discussed previously, getNodeByRange assumes that there is only one node that matches, which is incorrect.\ngetNodeByRange finds deepest node with provided range number, so \"algoritm\" is pretty deterministic\n. /cc @escaton\n. /cc @mrjoelkemp \n. Since you dealt with the bounty ticket last time :-)\n. There is no logic there, bin is purely declarative\n. @rwaldron you might like this :-)\n. We can't land this, until https://github.com/jscs-dev/node-jscs/pull/1069#discussion_r24805322 is all done, specifically until\njs\nfoo(\"bar\")\ncase is handled, would like to take a hit on this one? https://github.com/jscs-dev/node-jscs/issues/836\n. @ehartford \n\nstill need foo(\"bar\") case\n. https://github.com/jscs-dev/node-jscs/issues/836\n. Well, we certainly can, but that feature is kinda important\n. Can we include requireVarDeclFirst?\n\nWhat about \n\nJSDoc style is good, but requires a significant time investment\nEnd of line comments are prohibited!\n\nWhat is that?\n. > JSDoc style is good, but requires a significant time investment - don't think we need to make a rule to prevent jsdoc style unless the rule would be disallowBlockComments.\nI was thinking we should include jsdoc rules \n\nGetting an error with requireVarDeclFirst on\n\nhttps://github.com/jscs-dev/node-jscs/issues/1783\n. What about disallowSpacesInsideParenthesizedExpression: true and validateCommentPosition?\n. :-(\n. It seems we all good here?\n. > since if you update the jquery preset, then the tests will fail (validateIdentation errors in that case) so I just removed that?\nDo what you think is right :-).\n. How we doing here?\n. I guess we did catch the spirit of this preset, we can take care the details afterwards\n. LGTM\n. Closing in favour of #1071 \n. I guess #1070 could be closed in favour of this issue.\n@felixge what is you thoughts about this? Would it be cool for jscs to have this?\n. At this point only major and CST related bugs will be fixed\n. LGTM\n. FYI: https://github.com/jscs-dev/node-jscs/issues/1084.\nI have talked about this with @mdevils recently and bring it up couple times via mail, this rule like many others feels very specific in autofixing terms. Like what other rule would use those assertions?\nIt feels we need something like fix field in rule declarations like in @gero3 fork otherwise our assertion module would became very big and hard to maintain.\nThoughts?\n. Oh yeah, even if we add assertions to every rule in our codebase it wouldn't mean any external rule could use it. Which would mean auto-fixing wouldn't possible for the them.\nOn the other hand, give users API to change your code is dangerous. \nOpened another issue in order not to clutter this one - https://github.com/jscs-dev/node-jscs/issues/1113\n. @felixge would you mind checking this out?\n. VIP?\n. Thank you\n. You can replace extends with preset you would get same picture when as soon as https://github.com/jscs-dev/node-jscs/issues/109 is done and we would need to implement more elaborate config search.\n. i can take this one, sounds like post 1.12 though, for \n\nwe would need to implement more elaborate config search.\n. > And be done with it.\n\nYeah, you could already do that starting from 2.0 - http://jscs.info/overview.html#preset - \n\nOr you can load from it local path or as node module\n\nAlso see the examples, we received couple complaints about docs though, but i'm not sure how we could communicate this information in the better way, if anyone has any ideas, that would be cool to hear them.\nThis issue is only open so we could deal with multiple configs with the single jscs run. If someone would help, that would be awesome.\n\njscs-config for discovery\n\nWe do that, not with jscs-config prefix though, but with jscs- prefix, we could consider adding another one though. You could do that with filters, plugins, presets, reporters, etc. Any external entities in other words.\nBut that logic only for convenience, as i mentioned by the @TheSavior, you could publish your configs for a long time now. Although in @TheSavior case, he needs an additional rule distributed with npm-package, so he needs to use plugin interface. Although that rule is look like disallowIdentifierNames, but seems more powerful, i wouldn't mind including it to the jscs itself.\n\nI also honestly don't see the point of the built-in presets. Why can't they just be extendable configs on npm?\n\nAgain, for convenience, a lot of people just want to do npm install jscs && jscs -p <preset> . and be done with it. Not sure why we should complicate that process. \nSo the main question is, how we could document it in the right way?\n. @sindresorhus found yet another unpleasant bug with loading external entities, which probably warrants 2.1.1 version.\nHow about i will make a pull to jscs-config-xo repo and based on that pull we will try to create extendable wiki page on how to use those presets?\n. > jscs-config-xo should be renamed to jscs-xo, right?\nNuh, there is already couple projects that use jscs-config prefix, so i will add this one and jscs-preset too, just in case.\n. Example is ready - https://github.com/sindresorhus/jscs-xo/pull/1\n. > Relative path still not working!\nThis is why this is still open\n. At this point only major and CST related bugs will be fixed\n. @mrjoelkemp @zxqfox @mikesherov @mdevils would like some reaction to this, there is some rules that could not be used with basic assertions without bloating amount of functions for this module.\n. @aronwoost would you like to do it?\n. I think ignoreSingleValue is more suitable for this rule.\n. Rebased and merged, thank you\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. Thank you\n. At this point only major and CST related bugs will be fixed.\n. Fixed via https://github.com/jscs-dev/node-jscs/commit/72464525fd5804c6bfa5115fc087887265ef1c28\n. Since we can't repro it, i'm closing this\n. Just got another one - https://github.com/jscs-dev/node-jscs/issues/1287\n. @mikesherov @TheSavior hey there, do any of you have time to tackle this one?\n. Thank you!\n. That is a lot of thoughtful work, wow. Although, i fear we would have to do it all over again, after we address https://github.com/jscs-dev/node-jscs/issues/895.\nWill merge this in couple hours.\n. Seems this list becomes pretty big, deserves its own page, or we can just \"everybody uses it\" :-)\n. > Or we could do logos/pictures instead to fill up the width\nI remember that is what @mdevils wanted, preferred way for me too\n\nAlso do we want to give a link to their actual .jscsrc file if it's on github?\n\nIt would be hard to support those links\n. I think on the main jscs.info page it's okay, but i would try to remove it from README.md.\n. For example, you could define additionalRules like that:\njs\n{\n  \"additionalRules\":  \"foo/bar\"\n}\nnow, you can do it only like that:\njs\n{\n  \"additionalRules\":  \"./foo/bar\"\n}\notherwise jscs will consider this value as module name\n. @mikesherov we could consider releasing 2.0 instead of 1.12, there is some tickets/pulls that could be done/landed, plus yeah, auto-fixing is not a breaking change, but its feels like a lot, it could justify the major in pre-semver times. Even today, in many minds version change perceived not by breakage but by the functionality enhancement. \n/cc @mdevils, @mrjoelkemp \n@zxqfox it still be breaking, basically, we can't distinguish between the path foo and module foo.\n. You have a firm stance on it, did you make any promises?\n. You right, will send a letter\n. Sorry Marat, just pulled the thread, i tried to make commits as atomic as possible though, you might be better of reviewing them individually.\n\n\"additionalRules\": \"./foo/bar\" is a breaking change.\n\nThat is what i have repeatedly said. \n\nAnd at the same time I don't see the purpose of this change.\n\nThis PR mentions tickets that it would solve.\n. > On the other hand it would be safer to merge them.\nHow so? I don't follow.\nIs there something preventing you to review this by the individual commits?\n. Every commit should atomic, if there is any issues please let me know\n. Looks like it :-(\n. To get more rapid updates, is there any concerns?\n. If we not gonna use shrinkwrap, dependency tree wouldn't be stable anyway, since fixed deps would work only if all our deps would use fixed deps.\n. @tarmolov @ikokostya could any of you confirm this please?\n. @ikokostya, @zxqfox is right, you can disable any rule.\nOkay, it seems we can land this.\n. E4X is deprecated and removed from FF - https://developer.mozilla.org/en-US/docs/Archive/Web/E4X, i'm surprised anyone still use that.\nDo you have big legacy code that you support?\n. For crying out loud you guys :-).\nCheck this out - https://github.com/jscs-dev/node-jscs/commit/8de3850aff54e1519bd196a0627ee1cc3b6a96a0, we can do the same here, would you like to submit the pull request?\n. Hm, or not, it seem it would be a pretty complicated regexps :-(\n. If you can't come up with that regexp then it seems we are out of options, since we use esprima as a parser, which even if you provide tolerant flag would not work with such code.\nYou could try https://github.com/Constellation/esprima, but obviously that wouldn't be best solution if it would be solution at all.\nYeah, jshint can mitigate that, but it uses its own parser, so they could do pretty much whatever they want. ESLint can't, because they do what we do.\nOnly one viable solution that i can think of is to parse js line by line, which has it own drawbacks in terms of great degree of complication.\n. In 3.0 esprima will not gonna be used anymore\n. LGTM\n. I guess we just need to do it and improve iteratively. Any takers?\n. > Can just make an issue asking for company/project name, homepage, license, logo (svg?) and broadcast it\nAsk who? Most of those logos are in public domain and accessible, i guess simple google search should do the trick \n@escaton Do you want to take this one?\n. Most of it should\n. > Sadly, that version still has warnings on node.js 0.12 due to xmlbuilder...\nIs there an issue, if not, please create one. Could you try it in 1.12?\n. Closing because of inactivity\n. Since there is only concerns with the tests we can improve that later. \n. I only fear that spacesBetween might become a some sort of god function, since now it's used by a lot of methods and its cyclomatic complexity is pretty high. \n. > Do I just submit a PR for the OVERVIEW.md in this repo?\nYep\n. Okay, so not disabling it, but fixing requirePaddingNewLinesBeforeLineComments rule.\nAlthough i would consider changing the example in the doc from\njs\nfunction foo( types, selector, data, fn, /* INTERNAL */ one ) {\n    // Do stuff\n}\nto \n``` js\nfunction foo( types, selector, data, fn, / INTERNAL / one ) {\n// Do stuff\n}\n```\nJust like it was done in jQuery code-style, or changing this rule value to \"allExcept\": \"firstAfterCurly\"\n. Yeah, you right\n. Yeah, you right\n. Okay, so #651 is our guy then\n. Oh, all right, thanks for the clarification\n. /cc @lahmatiy\n. Thank you!\n. @fluidsonic we will try to release a patch with a fix for this bug soon, let's move this discussion in https://github.com/jscs-dev/node-jscs/issues/1319\n. At this point only major and CST related bugs will be fixed.\n. Right, let's have commit ref, for good record keeping - https://github.com/jscs-dev/node-jscs/commit/52083ffde676fa4ca35c7203d0284f3939dcf970 \n. \ndisallowMultipleLineBreaks: } and ; should have at most 2 line(s) between them at test.js :\n     3 |\n     4 |\n     5 |}\n---------^\n     6 |\n\nI don't know, does it looks better?\n. @zxqfox now it looks like this - \njs\ndisallowMultipleLineBreaks: ; and } should have at most 2 line(s) between them at test.js :\n     1 |function foo() {\n     2 |  var a = 2;\n--------------------^\n     3 |\n     4 |\n. At this point only major and CST related bugs will be fixed.\n. Still a WIP?\n. I would ask for opposite rule, but really, who would need that?\n. Yeah, was thinking the same thing, but validateNotOperatorsInConditionals sounds peculiar to me.\nIdeas?\n. @hzoo ?\n. I think it would be a good naming convention, we can start enforcing it now and continue to use it in new major version\n. Me too, but see above, i'd like establish convention for these kind of rules.\n. Works for me, will land this soon\n. Shaky rule :-(\n. I would even move those methods in different repo as its own module. \nSince this case is no longer fictional, i would re-added it, who knows when 2.0 will come out.\n. So does anyone want to tackle this? I guess @mikesherov currently overwhelmed with validateIndentation issues\n. Niiice!\n. @jacksonrayhamilton repository is created and invite has been sent!\n. Just give admin rights, let me know if you need something else\n. @jacksonrayhamilton other then that, can we say this plugin is tested and ready to be used?\n. So everybody is fine with merging this?\n. Since this rule can't have the opposite one, it's renamed to validateAlignedFunctionParameters.\nThank you.\n. That one would be cool to have\n. Okay, reopening, since it is needed for couple presets\n. So it seems this rule should be enabled, but rule itself should be fixed - https://github.com/jscs-dev/node-jscs/issues/1194\n. Nevertheless, as always, thank you :-)\n. Thank you\n. For example in grunt plugin - https://github.com/jscs-dev/grunt-jscs/blob/bb98fca2c6184e4cc9963cdab7e4f2613701a38f/tasks/lib/jscs.js#L54-L55\nThen use checkString, checkPath methods or etc, we will create documentation for this interface, would you like to help?\n. Nope those are very different APIs\n. > Does the website automatically update when docs change?\nNope, we will update it manually.\nYour ideas on screenshots and separate pages for some of the options sounds really good to me!\nLGTM\n. @mrjoelkemp how about it?\n. Thank you\n. Thank you, although,  technically speaking , true/false/null are reserved words but not keywords, whereas this list should contain only keywords.\nbtw, it's generally considered a bad idea to give proof links on http://www.w3schools.com\n. Situation around the http://www.w3schools.com has improved, but it still has bad reputation, for example this how it was couple years ago -https://web.archive.org/web/20130115033517/http://w3fools.com/\nIt's usually better to give link on the spec itself. \n. Closing it in favour of  #1191, nevertheless, thank you @MartinKolarik.\n. Oh, shoot #1191 and this one are two different fixes :-), reopening\n. @yannickcr it's done in https://github.com/jscs-dev/node-jscs/pull/1245/files, thanks for keeping an eye on it.\n. Thank you\n. inCallExpressions and inArrayExpressions are specific options for this rule only, i wouldn't want to invent any new names, only if it would be really necessary \n1232 could be solved much more easily\n. See the latest changes/comments in https://github.com/jscs-dev/node-jscs/pull/1246\n. @TheSavior i'm talking about consistency - allExcept values, in other rules, either a token list or list of exceptions, here we trying to provide rule options through it. Inventing our own node types or tokens are not ideal.\nPlus why would we need to complicate the rule, if we could do it much more simpler?\n. Sorry @TheSavior, it sometimes awful not to land a nice piece of work :-(. I'm closing this in favour of #1246\nThat being said, i think we can add support for arrays though.\n. I think we should go further to be consistent there and ignore blocks in objects too, if there is need for that functionality we would need a different rule altogether.\n. Did you push these changes?\n. I see falling tests in CI, could you check it out?\n. How about opposite rule?\n. Code is simplified, failures are fixed\nThank you.\n. At this point only major and CST related bugs will be fixed.\n. Nicely done! Thank you\n. It does, i guess we close that a bit prematurely\n. PR welcome\n. Added support for const and let while i'm at it\n. Incorporated gh-1236 pull\n. @hzoo nope, have an idea, checking it out\n. Okay, how about now?\n. Oh, cool :-), one hit two down\n. It seems like auto-fixing bug, which relates to https://github.com/jscs-dev/node-jscs/commit/5f20bf884ff9a6b77d0cbbffd4ef1054b866deb7\n. It makes more sense to put them in separate lines, but i agree - additional rule would be better\n. At this point only major and CST related bugs will be fixed.\n. An edge case, but yeah, we could build that in, does anyone want to tackle it?\n. > Always allow _ before the $?\nWould that be enough?\n. Thank you\n. How would we enforce \njs\n(options || { x: true } ).x\nbut disallow\njs\n(options || { x: true }).x\n?\n. Did you run it on core source?\n\ncomments handling: is configuration like allExcept: ['//', '/', '/'] reasonable?\n\nIt is for me, don't see any better way\n\nNaming: ParenthesizedExpression, ParenthesizedArguments, ParenthesizedParameters, and ParenthesizedStatement alphabetize conveniently, but may not be as intuitive as e.g. ParenthesizedExpression, Call(Expression)?Arguments, (Function)?Parameters, and StatementParentheses\n\nWhat would those rules do? Could you give me couple examples?\n. > Would it be acceptable to add and/or reassess that outside of this PR?\nTotally \n\nI addressed the outermost of these in e97c8eb, which is technically out of scope for this PR but lowered runtime to 1.5 seconds (a reduction of 99%). \n\nWow! That would be great to see it in the new release, i guess another PR would be best.\nIf no one has any objections, i will land this a bit later today.\nAwesomely done Richard!\n. Hooray!\n. Okay :-)\n. At this point only major and CST related bugs will be fixed.\n. /cc @TheSavior \n. Added object exception\n. Hm, after some thinking, i would prefer if we would merge https://github.com/jscs-dev/node-jscs/pull/1239 and this one together, while adding third option for ignoring object expressions.\nHow is that sound?\n. I'm thinking we could move exceptions check to the isException helper\n. Needed @mdevils to sign off, i'd say it should be done either through token-assert module or though fix property in rule declaration\n. @mdevils +1 to the Mike point\n. So we decided how not to do, how about we decide how to do it :-).\nhttps://github.com/jscs-dev/node-jscs/issues/1113\n?\n. We either fix stuff in check method or introduce fix property for this \"specific\" rules that could not be included in the token-assert and try to isolate its execution hence link to the relevant issue.\n. Sorry for waiting (@zxqfox, @mikesherov little help you guys?)\n\nJSX\n\nhttp://jscs.info/overview.html#-esprima-\n\nes6/7\n\nhttp://jscs.info/overview.html#esnext\nWhen esprima 2.3 will came out esnext would be enabled by default\n. FYI, i think we need to support jsx by default.\n/cc @mdevils\n. Created https://github.com/jscs-dev/node-jscs/issues/1294\n. LGTM\n. This is by design, most users wouldn't want to show error for this particular case, i'd say it's a plugin job.\n. Well, yeah, since this rule called \"requireSpacesInsideObjectBrackets\", but i can understand the confusion, we will change rule names in 2.0 to make them more appropriate.\nAs far as i can see, we don't have the rule that would enforce spaces in your case, you're welcome to submit one, or add additional values for the requireSpacesIn* rules.\n. Inconsistency in rule values is frustrating though\n. allExcept comes to mind, but this would not fix the issue, since we already use ignoreProperties in another rule.\n2.0 should save us all\n. > Update readme to remove it as a cli option?\nYou can still override it though console, need to update docs though\n. > Is it breaking change?\nNo\n. You have enabled disallowKeywords rule, probably through crockford preset.\nYou can null it out, or redefine it -\n``` js\n{ \n    \"preset\": \"crockford\",\n    \"disallowKeywords\": [\n        \"with\"\n    ]\n// Or\n// \"disallowKeywords\": null\n\n}\n```\nIf there problem is somewhere else, please let us know, and i will re-open it\n. :thumbsup:\n. Yep - https://github.com/jscs-dev/jscs-dev.github.io/issues/24\n. google preset has this enabled rule - which requires && to be on the same line.\nNot sure if this incorrect, but it certainly could done better\n. yeah\n. I think we could integrate this error message if you up for it\n. /cc @mdevils \n. I would like somewhere from mozilla verify this preset, providing real code-example would be preferable too.\n. @tofumatt care to comment? Is there any projects following mozilla code-style you know?\n. @SimenB nevertheless, thanks you for the discussion.\n@tofumatt thank you for the reply.\n@zxqfox let's be conservative here, if community doesn't need it, we shouldn't force it.\n. I wonder, what do you think \"JS\" in \"JSX\" stands for? JSX is popular extension of ECMAScript, a lot of people use it, a lot of people request it.\nWe go where the community wants to go.\n. > In that case, JS is Java o:\nLink?\n\nDo we have actual numbers? As in relative to the total JSCS userbase?\n\nI don't know who you would collect these numbers, we have a lot of request for it, in fact, it's one of the most popular request we have.\n. Now you can use esnext:true and jsx would work so it seems that logic is enough for everyone\n. At this point only major and CST related bugs will be fixed.\n. Awesome!\n. Feel free to send us a PR.\ncool avatar btw.\n. That is weird, but we will accept PR for it\n. Would be a cool rule, but it seems as complicated one, @hzoo are you up for it?\n. So, basically, something like disallowIdentifiers analogues to http://jscs.info/rules.html#disallowkeywords, not sure if that would be enough\n. Gush, we have 124 rules now. \nIt seems we can add it to the airbnb preset\n. We can add new option to the rule, something like \njs\n\"disallowIdentifierNames\": {\n  es6: [],\n  es5: []\n}\nit seems strange though\n. We have to be careful with amount of presets, not sure if that constitutes the new config\n. As far as i can see, this code example could very well be a es3 code, if cli tool doesn't throw for you, then, as you said it, it is a linter issue\n. > Should I keep adding more ES6 rules as seperate issues or make a issue for ES6 in general so we can discuss and eventually make separate ones?\nSure thing, we can filter them out with esnext label, so separate issues might be overkill, although i would stick to rules that are needed for the presets only.\n\nAlso do we have a roadmap for what we want to do next?\n\nYeah, that is a pain, basically we need to increase amount of fixable rules, change config in back-compat way and make es6 and jsx to be enabled by default.\n/cc @mdevils, @mikesherov, @zxqfox, @mrjoelkemp \n. I would even would go so far as starting to use babel and make es6 a primary language of jscs code-base\n. > any other rules are just potential styles\nbe careful, if people don't need it, no need to spend time on it\n. Well, that is keyword, you know where i'm going with this, right? :-)\n. Would you mind adding a comment for it?\n. @jasonkarns  I see you added it, thank you, btw, github doesn't notify if you just commited, so it's a pure like i catch that\n. Thank you\n. Why not? Is that something that could be used in one of the supported presets?\n. Could post a link to relevant statement?\n. So does anyone would like to implement it?\n. Yeah, that would be cool, are you up for it?\n. fyi we have \"orphaned\" label - https://github.com/jscs-dev/node-jscs/issues/139#issuecomment-70729477\n. Thank you!\n. At this point only major and CST related bugs will be fixed.\n. I guess not, there is a lot of confusion around it, even between us.\n@mdevils what do you say?\n/cc @mikesherov, @zxqfox \n. Sure, need to choose on day & time, i can do it whenever\n. https://github.com/jscs-dev/node-jscs/wiki/Roadmap\nIf someone wants to add something to that list, please be sure to assignee yourself to that item and be ready to do it in the next week\n. See for more info in https://github.com/jscs-dev/node-jscs/issues/429\nUse (require | disallow)SpacesInsideBrackets rules instead\n. After #429 was fixed (require | disallow)SpacesInsideArrayBrackets started to catch those cases, but we received couple issues about it, some people consider this behaviour as unexpected and want these rules to miss them.\nThis is why we introduced new more strict rules and removed this logic from (require | disallow)SpacesInsideArrayBrackets\n. @SimenB fyi, when you change your message github doesn't notify the participants, could you open a pull for that?\n. How about we use \njs\n\"requireMultipleVarDecl\" {\n  \"allExcept\": [ \"require or something like that\" ]\n}\n?\n. Oh, i see we have the same vibe with @mrjoelkemp https://github.com/jscs-dev/node-jscs/pull/1310#issuecomment-98681787 here :-)\n. @mrjoelkemp, @zxqfox we good here?\n. @stefanosala are you down with that?\n. @stefanosala friendly ping :-)\n. This is justifies a patch version, you could use workaround for now \n@mikesherov i remember you said you have couple bugs you want to fix too? Does tomorrow sounds good?\n. @akash1810 or even easier - use esnext option in the config\n. @mikesherov, please see the full history\n. Thank you\n. What is the status of this? @mrjoelkemp?\n. Friendly ping\n. Okay, feel bad closing this, ping us up if you change your mind\n. Relates to https://github.com/jscs-dev/node-jscs/issues/1303\njs\n\"requireAlignedObjectValues\": {\n  \"allExcept\": [ \"function\", \"lineBreak\" ]\n}\nmight be better choice, while conserving back-compat\n. At this point only major and CST related bugs will be fixed.\n. > Also I used ArrowFunctionExpression since ArrowExpression didn't work - where should I be looking to know what to use (normally I can just find the jscs codebase). In the validateIndentation rule I see ArrowExpression.\nThere is no place better then https://github.com/jquery/esprima/blob/master/esprima.js#L108-169\n. > Coverage decreased (-0.05%) \n?\n. LGTM, i remember @mikesherov would like to prepare fixes for patch release too\n. How about opposite rule?\n. i meant, with \"disallowPaddingNewLinesAfterBlocks\": true this code -\n``` js\nvar a = function() {\n};\nvar b = 2\n```\nwill not going to be fixed, but this one -\n``` js\nvar a = function() {\n}\nvar b = 2\n```\nwill\n. @TheSavior still interested?\n. I'm gonna introduce the same logic for the opposite rule and land it :-)\n. No worries\n. @hzoo do you wanna check this out further?\n. It was discussed couple times before, can't find links right know though. Gist of is - you can place jscs config in any place you want.\nIt would cool though.\n. /cc @gero3 \n. Cool, although this pull might need to sit around for a bit, just in case we would need to release another patch release\n. Thank you!\n. Just send you a pull, both names are fine with me\n. Oh, that's unpleasant, thank you.\n. I see you are from wikimedia, do you need that rule in \"wikimedia\" preset?\n. @zxqfox there is a lot of things to consider in the new format\n. > Also, I plan on introducing a diff feature, which would allow you to check which rules you follow but have not configured \u2013 for example freshly introduced rules\nThat would be awesome! We always have these problems with updating presets.\n\nI would like something to help add new rules to your .jscsrc. http://csscomb.com/config is pretty cool \n\nPeople ask for this, but, personally, i don't see the point, \"auto-configure\" feature is enough, which probably mean we aren't good of promoting it.\n. I'm not sure who esprima-fb is relevant here, it seems Esprima nor in 2.2 nor in harmony branch supports static properties.\nRe-opining for further invistigation, @mikesherov @ariya please advise.\n. Okay, upon further investigation it is revealed that this is not valid es6, it's not even in the list of proposals for es7, i guess babel only supports it because of this discussion, which seems premature even for babel.\n/cc @sebmck \n. Yeah, i have a link to this gist above, isn't to early? Since this proposal, even if submitted (which is currently not) will likely change?\n. @sebmck thank you for explanation, it's weird that people already start using it in production though :-(.\nAnyways, we will try to support it with babel-jscs.\n. Thank you!\n. @samfb You saying you see warning for the:\njs\n...\nelse if(\n...\nwhen \njs\n\"disallowSpaceAfterKeywords\": [ \"else\" ]\n? Could you provide the code-example otherwise?\n. Yep\n. Seems as pretty specific, would you like to take a stab at it?\n. @hzoo yep\n. Sure thing, would you like to send us a PR?\n. I'd say it's more a enhancement then a bug :-)\n. See the esnext option \n. If esprima doesn't support it, we can't too.\n@hzoo could you create a specific issue for your work?\n. Created - https://github.com/jscs-dev/babel-jscs\n. Does it work with our tests? We can intergrate this in our CI-runs, if it pass, i think we could do the npm package and push to jscs-dev org repo \n. It seems babel-jscs has support for jsx?\n. So is there anything preventing us from dropping esprima-harmony-jscs dep and using babel-jscs for esnext option?\n. Well, we described this esnext option as experimental, although, i fear about esprimaOptions param.\nOtherwise jsx and more extensive es6 supports does it for me.\n@mikesherov, @zxqfox, @mrjoelkemp, @mdevils thoughts?\n. Just added this feature to 2.0 roadmap, i hope you don't mind\n. Nice list\n\nesprima supports ES6\n\nNot fully, plugin interface will come right after full support of the ES6.\n\nbut it does not support ES5 without ES6\n\nES6 is back-compat, so i don't see an issue there.\nAcorn supports es6 and written on es6-dialect also has plugin for jsx, you forgot the espree btw :-). \nAnswer for babel is kinda obvious :-), but it also has support for ES7 features, like if someone mention possible extension on TC-meeting. But not proposed but only mentioned! It probably be added into the babel for the community response, which scary cool and dangerous at the same time.\nIn any case, i put all my money on babel-jscs here.\n. Hey @hzoo, do you have time to provide pr for this?\n. Basically, pr that proposes to use babel-jscs instead of esprima-fb\n. Yeah :-)\n. Now you just need to use esnext: true\n. Yeah, i read it, as i understand this is not part of the \"standart\" yet?\n. I'd say we need understand if \"jsdoc\" plugin is correct here, if it is, then we should fix the issues, if not, we should correct the check.\n. > driven by Google Closure and integrated to jsdoc toolkit 3\nEnough for me, could you send a PR?\n. Purpose of this ticket is to discuss inclusion of jsdoc rules to the jscs distribution \n. \"new rule\" in sense of lack of such rule(s) in the current jscs distro\n. > What is painful about the current solution of it being an external plugin?\nNothing painful, it would improve convenience though, and popularity of such rule(s), since we would document it on the site and could use them in the presets.\n\nThe separation of concern is clear as it stands.\n\nSeparation would stay, since rule(s) would be in another repo.\n. > Mmm, but we can document them without inclusion into jscs dist, no?\nThat would be a complicated task.\n\nI'm just trying to find a way to write other plugins with documenting at jscs.info.\n\nThat might be unnecessary \n. Just added this feature to 2.0 roadmap, i hope you don't mind\n. @zxqfox do you have time to provide pr for this?\n. Would you like to do that?\n. @mrjoelkemp addressed your remarks\n. > Should we also run non auto-fixed jscs on that subdirectory to make sure the style isn't violated post-autofix?\nYou mean run autofix with our config?\n. There is examples like crockford style that prevents use of continue keyword, such presets will always return broken styles.\n. Thank you!\n. Sorry, for responding so, so late, i see this result for empty results - \nxml\n<?xml version=\"1.0\"?>\n<testsuite name=\"JSCS\" tests=\"1\" failures=\"0\">\n  <testcase name=\"input\" failures=\"0\"/>\n</testsuite>\nDo you see a different picture?\n. At this point only major and CST related bugs will be fixed.\n. Okay, lets wait for @mrjoelkemp \"LGTM\"\n. @lpil would you like to tackle this one?\n. @tsteuwer still interested?\n. Could you provide links to the doc for every rule you added?\n. Nice, thank you!\n\n\"disallowSpacesInFunctionExpression\": { \"beforeOpeningRoundBrace\": true }: For example here and here, all functions do not have space before round brace : \nvar foo = function() {};, function bar(a, b) {\n\nIt seems we need to add disallowSpacesInFunctionDeclaration too?\n. Okay, commit this up, and we are good to go\n. Thank you!\n. @hzoo could create an issue for that, so we wouldn't forget?\n. Thank you!\n. I'd say esnext: true should have ability to parse babel code :-). \nThe bigger problem is to support jsx by default, which probably not gonna happen soon.\n. I will merge this as-is, but it seems\n``` js\nvar functionNode = node.id || node;\n// for a class method\nif (parent.type === 'MethodDefinition' && parent.key.type === 'Identifier') {\n    functionNode = parent.key;\n}\n```\nthis could be really moved to the helper\n. It seems it was done already\n. At this point only major and CST related bugs will be fixed.\n. Could you run jscs --verbose <path to problematic file> with your jscs config?\n. Thank you\n/cc @mikesherov \n. @GrayedFox hm, so there is no space, but there is a line break char, are sure you it is a correct one?\nWhat is the value of validateLineBreaks rule? Do you use some sort of plugin to create those comments?\n. > So I end up with the exact same comment lines and style, but with no error (until I reopen the file). Something to do with how JSCS reads the beginning of a file, which differs from how it reads a file which is edited/updated?\nNope, it seems this is an editor issue, i bet if you change validateLineBreaks value to CRLF this issue will go away, others should pop though :-).\nYou could try to open this file in vim, like so - http://stackoverflow.com/questions/3852868/how-to-make-vim-show-m-and-substitute-it, or show line breaks in some other way. If there really is CRLF char, then rule works correctly\n. np :-)\n. Hooray for the first ES6-only rule!\n. /cc @ljharb, @mikesherov \n. mm, where broad rule, couldn't hurt though\n. Yeah, i read it, there might be use-cases for that, sure, it feels as advanced rule though\n. Thank you!\n. I rarely land PRs without looking at the code, but when i do, it is always with two \"LGTM\" comments.\nThank you!\n. @aliosv could you elaborate your issue? And please add tests to this PR\n. Still don't understand the issue, you saying excludeFiles doesn't work?\nCould you provide tests for this pull? With them, it would be easier to grasp exactly what do you trying to fix.\n. @aliosv still interested? \n. I don't understand what is the issue, tests your added are passing without source changes\n. Please use english, otherwise others can't participate in the discussion.\nI'm afraid you are not too descriptive, link to the repo doesn't explain anything, please add failing tests to this pr or create a repo where possible bug could be reproduced.\n. So can you add a falling test?\n. > fails the test that you commented(https://github.com/jscs-dev/node-jscs/pull/1405/files#diff-9511adab08ed83a63c8bb84eb0d54617R63). \nJust like i said - this is by design, for example if you do eslint test.json or jshint test.json without specifying additional extensions for either of those tools, they will still print the errors, but if you specify test.json either in .jshintignore or in .eslintignore they will be ignored.\nWe follow common practise here.\n. @zxqfox \n\nOur excludeFiles doesn't skip files if you pass them directly as arguments.\n\nCould provide a test-case?\n@aliosv Thank you for understanding.\n. It seems it was already been done\n. It seems we good here?\n. it seems\njs\nmaximumLineLength: {\n  value: 40,\n  tabSize: 1,\n  allExcept: [ ... ]\n}\n. And obviously deprecate allow values\n. @clayreimann is this common situation in your code?\n. :-), i just afraid we end up adding exceptions for every possible language construction.\n. @clayreimann would you like to implement aforementioned logic?\n. Coolballs!\n. I would let people to add everything they want in that exception list :-)\n. I'd say it should default behaviour\n. @zxqfox @mrjoelkemp hey there, if there is at least to \"LGTM\" you really should land such pr :-)\n. Intergration tests for the win! Since they helped to discover this issue, tests are failing because of that\n. Replaced by #1430\n. btw, github doesn't send notification when you push new changes, so it is preferable to leave a comment when you do\n. Nicely done! Thank you\n. No, @mikesherov seems busy with outer stuff, you welcome to tackle it though\n. At this point only major and CST related bugs will be fixed.\n. hmm, okay, if everybody is cool with it :-)\n. > Can we just check for string literal + non string literal? Why have a list of types?\nWow, cool.\n\nDo we want to make an exception for a multi-line concatenation if we do string + string?\n\nI would say no, we always can wait for the community response on that.\n. Not sure what the problem with coveralls here.\n/cc @mdevils \n. Funny, now we have a test failure :-)\n. Finally, we landed that thing :-)\n. > For example. if I wanted all scripts under controllers directory to have camel case, and all scripts under services directory to have pascal case?\nIt seems as a task for the config finder\n. It seems it would decrease code-coverage, you can check the coverage by running npm run coverage-html && open coverage.html\n. Nicely done, thank you!\n. LGTM\n. It seems both values are acceptable, today, these kind of values could be considered as a single word, for example - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n. > @markelog fyi, couldn't manage to reorder the two disallowSpaceAfterObjectKeys commits to squash them together.\nOkay, cool!\n. > And allowing to modify AST directly is too dangerous for the compatibility.\nSee the\n\nThis pull represents two different ideas for autofix infrastructure - \"fix\" field and assertion interface.\nWhich is bad, we need to make them complimentary to each other or unite approaches, but we need to keep ball rolling need to release 2.0 soon, we can improve/refactor later.\n\n\n\nAnd allowing to modify AST directly is too dangerous for the compatibility.\n\nThat will happen, one way or another, we has examples of it in our repo and there is tons of modules already doing that,  if we don't provide the way ppl will use other means.\nAs of use of token-assert module, i believe we already had discussion about that - https://github.com/jscs-dev/node-jscs/pull/1265#issuecomment-96653961. So without going in circles, we have two options, either \"fix\" function or doing the autofixing in check function.\n. > But token list does not allow us to do a lot of other required changes. For instance, you cannot replace var x = 1, y = 2; with var x = 1; var y = 2;. To apply these changes you need tree. At some point I believe we will start operating on the tree and assertion module will just smoothly switch from token list to tree (because we have good connection between tokens and tree nodes). And during that switch we will not have to touch rules. But if we go and introduce modifying token list directly from the rules, we will tie ourselves into token list and we will not be able to use tree for source modification.\nRight now this looks as speculation, need proof of concept. As of tree modification we can provide means for that. \nIf you have specific rule fix method which would lay in the assert-module you still need to change it to work with tree, so there is no difference where fix method would be specified - in the other module or in the fix field.\nBasically, this is why i insist on trying it out, to see how will people will work with it.\n\nRemove fixing logic from check method in validateQuoteMarks and move it to assertion module.\nAdd more methods to assertion module. We may even split it to several modules.\n\nI thought we already past that, we had a discussion about that, and decide not to do that, see link above, we going in circles, which is not a good thing.\ntoken-assert would hide those methods, but fix function wouldn't go anywhere it just would be in the different module, if you hide those functions it just would be harder for ppl to contribute to jscs, while assert module would grow, instead modifying the fix method, they would just add more and more stuff to token-assert, which by itself is not good. And yes, plugin writers couldn't easily create their own fixes. Except in the check method, in method, that originally had nothing to do with autofixing.\nOtherwise i don't see any difference with those approaches.\nI suggest going through the route that already works, if there would be something better, we would do it. Now, i think, we just holding up the progress with such discussions that become resurrected for some reason.\n@mrjoelkemp @zxqfox @mikesherov @hzoo thoughts?\n. Okay, so after long discussion, we came to the compromise, we wouldn't introduce the \"fix\" field, but a private \"fix\" field, all support and possible relocation of its logic to the assert module would be on me.\n. > mrjoelkemp added this to the 1.14.0 milestone 25 minutes ago\n@mrjoelkemp ?\n. Do you want to release 1.14? There is only couple things to do for 2.0, i think i could deal with most of them during this week and release on the next one.\n. This was merged in 2.0, removed the 1.14 tag, also, i would like to propose couple new prs for the new version\n. Sounds like https://github.com/jscs-dev/node-jscs/issues/612? Still interested?\n. Ping us up if you change your mind\n. Also, the most important thing :-), could you add a note to the docs about this feature?\n. For some reason coverage decreased, but changed js-file is still 100%, so i landed it regardless. \nAnyway, awesome! Thank you :-)\n. I'd say this PR should point to different target, i think lintining js in html code should be a 2.0 issue.\n. > What do you mean by different target?\nNot master but 2.0\n\nWhat extracting from HTML has to do with 2.0?\n\nNothing, but this is a structural change, which would mean we would have problems merging it to 2.0, while if we land this in 2.0 right away, we wouldn't have these issues.\nSo i'd propose landing only iterative changes for the 1.x, like new rules, bugfixes, etc. i.e. changes that wouldn't affect merging process with 2.0 and allow us to release 1.x if needs to, everything else -  2.x \n. > Show test output (currently output is hidden, it hides errors).\n\nFix STDIO-error (the actual cause of the problem).\n\nThose are fixed in 2.0 branch :)\n\nUse promises instead of callbacks: bulletproof execution flow and readability.\n\nWell, promise().then(fn) is basically the same as read(..., fn) if there was something like .then().then() i would all for it, otherwise i don't see the point. Besides there is still code that uses callbacks which makes the code heterogeneous, i.e. uses two different concepts.\n. > @markelog Just check out the code. I could not understand anything in the previous version \u2014 it was not properly abstracted \u2014 process routines messed up with control flow. With all respect, I was totally confused when I was trying to fix my build.\n\nWith this code you have structure and abstraction.\n\nThis is subjective, matter of taste even. And that is okay, we all see code that we don't like and have different opinions on. \nFor example i don't see how this code is better - additinal abstraction like promise \ndon't give me anything, except as what it is - an abstraction, which could be considered as needless \nabstraction altogether since there is no advantages to use promises, at least, i don't see them, since promises usually dealing with different kind of code flow.\nBut vowfs and vow are not \"popular\" packages, without any real community, API that you have to know, know common issues too and bunch of other things.\nThose might be obvious to you, but for anyone else this is a blackbox. Whereas i operated with standart API.\nYes, you introduced couple functions and couple constants, but that could be as seen as what i described above -  additional needless abstraction, like passthroughProgress helper, it just proxies to stdout does nothing else, why it need to be there? Because you might switch to console.log there? Or because it just feels right? Or both? You might see it as \"proper abstraction\" someone else could see this is \"needless abstraction\".\nI mean phrase like \n\nit was not properly abstracted \u2014 process routines messed up with control flow\n\nis subjective and not productive, i can say the same thing about these changes, and mine phrase would mean nothing to you, just like yours statement means nothing to me. If you say something like that - prove it, or better yet, just lay the evidences, not the conclusion.\nI'm not gonna call your code as \"bad\" or something else negative, no, but i'd propose you would give me the same courtesy and operate only on objective terms - expandability, cyclomatic complexity, modularity, etc.\n\nWhy not port this to 1.0 and fix PRs? Where can I read about 2.0 branch?\n\nThere is only roadmap. I'd propose landing only iterative changes for the 1.x, like new rules, bugfixes, etc. i.e. changes that wouldn't affect merging process with 2.0, everything else - 2.x that is my view though, didn't yet shared it with anyone else.\n. > You have low-level routines (controlling child processes) messed up with control routines and user interface (console).\nI don't see who they \"messed up\" with it, but i see dramatic increase of cyclomatic complexity, which is has direct correlation with code perception.\nEncapsulation by itself is not always great thing, besides, if you put something in function it doesn't mean it is became encapsulated. \"high-level\" code is not always great too, especially, with lack of definition of it and context dependency. \nAlso this kind of \"encapsulation\" be interpreted as half way still, since constructions like this -\njs\nconsole.log('');\nlogStep(...);\nor console.log('\\n' + chalk.green('> ') + 'Autofix ingeration tests');, while in logStep you \"encapsulated\" console.log(chalk.magenta(' - ') + step);.\nDo not strike me as properly encapsulated.\nThose things are needed only if you need them, while you increased the complexity, added more indirect logic, new interfaces, new APIs, for what?\nYou had the problem - you didn't see error output of failed tests, in 2.0 branch you can now do that. Whereas here, you don't introduce new features or improvements, you exercising your level of \"rightness\", you refactor because of the refactoring, uroborus of some sort.\n\nThis discussion could go on for the long time, we will start to define what is a \"low-level\" and why cyclomatic complexity not the right metric and so on. \nThat would be controproductive. You want to make this \"right\", fine, i'm not oppose to it, i don't see the point, i don't see who this would be better or why your paradigms are better then mine. But fine, this is your call anyhow.\nThere is only one admonition from me - i would prefer if you don't use promises.\n. Hm, can't reproduce it, are you sure you using latest version of jscs?\nCould you execute the jscs --version and jscs <problematic file> --verbose and post the output?\n. np :-)\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. @jakezatecky still interested?\n. No worries :-)\n. Oh, i see you added a commit, but coverage decreased, would you mind adding more tests and rebase?\n. Hm, didn't find a problem with the coverage, anyway, thank you!\n. jQuery preset could benefit from that rule too - https://contribute.jquery.org/style-guide/js/#comments\nBut with exception for the parameter list.\n@ShashankaNataraj  would you like to do it?\n. > Well, I\u2019ll try to use provided solution and let you know, if this will fix.\nWhat solution? We didn't introduce any, we need a code sample, jscs config or just output of jscs --verbose and jscs --version\n. Can't reproduce the error with\njs\n\"requirePaddingNewLinesBeforeLineComments\": { \"allExcept\": \"firstAfterCurly\" }\nor \njs\n\"requirePaddingNewLinesBeforeLineComments\": true\nWhat version of jscs do you use?\n. That is weird, as @zxqfox said, this error should be catched and re-throw it in more friendly manner by jscs internal logic that was introduced some time back.\nI'm afraid you need to provide a repo with this error, otherwise, if someone else couldn't reproduce it, we're out of options.\n. Thank you! It was easy, isn't it? :)\n. > I think the tests are failing because of the local/global npm issue?\nNope, legitimate failure, \"couldn't resolve jscs\"\n\nmake jscs bigger\n\nBy how much?\n. It seems you solved all open issues in babel-jscs repo, can we land this?\n. Okay, i finish this up\n. > Was just thinking about how esnext isn't really a thing anymore\nWell, Esprima still doesn't support all es6 features and es7 features and jsx could be considered as \"esnext\", don't you think?\n. Would be very interesting rule, would you like to tackle this one?\n. You also already can do that for the comma btw - http://jscs.info/rule/disallowSpaceAfterBinaryOperators.html\nBut we would rather move it to it own rule(s), see discussion in https://github.com/jscs-dev/node-jscs/issues/845\n. Cool, if only it would use assert module and no regexps\n. Okay, we landed semicolon rule, should be pretty easy to create rule for the comma\n. @ShashankaNataraj would you like to tackle this?\n. @ShashankaNataraj it seems you almost finish with it?\n. PR is welcome\n. Most changes are related to JSCS code-base are related to the new rule, new option rule, or bug fixes for existing ones, maybe presets changes too. Those are easy changes, any of those issues could be a good start for the beginner.\nI think we could add some helpful notes for the beginners to the contribution guide though and mention it on the main readme.\n. I would remove or replace everything between // jscs: disable and // jscs: enable, would help in cases like this - https://github.com/jscs-dev/node-jscs/issues/1156\n. @hzoo when we merge 2.0 to master they all will close\n. It was optional anyway \n. > Coverage decreased (-0.57%)\nhm?\nOtherwise LGTM.\n. You can check the coverage by running npm run coverage-html && open coverage.html\n. Oh, right :-), check this out - https://github.com/jscs-dev/node-jscs/blob/8de3850aff54e1519bd196a0627ee1cc3b6a96a0/lib/config/configuration.js#L563\nYou would need to change tests for disallow rule too \n. Thank you!\n. Yeah, i had bad connection and failed to see git fetch has failed, merging local old version instead. \nAnyway, fixed, thank you for keeping an eye on it.\n. PR welcome!\n. Yeah, we agree, feel free to implement\n. At this point only major and CST related bugs will be fixed.\n. Thank you!\n. Now excludeFiles has default value of [] we could define this value as [ \"node_modules/**\" ]\n. @TheSavior you had idea about additional paths?\n. yep\n. More then maxErrors?\n. https://github.com/jscs-dev/node-jscs/issues/681 also mentioned on our roadmap :-)\n. This is out of scope, but check this out - https://github.com/palantir/tslint\n. Okay, re-open for the consideration then\n. Okay, closing as dup\n. You didn't forget :-), thanks!\n. At this point only major and CST related bugs will be fixed.\n. /cc @mrjoelkemp \n. See https://github.com/jscs-dev/node-jscs/issues/704\n. > Took a try to address this issue\nWhat issue? With the refactoring it is hard to see\n. It might be better to break down this commit on two, one that does test refactoring and the either that adds new option (is there an issue btw?), also, could you add docs for it?\n. Sounds good, although it is not necessary to create separate pr, it might be better, but it might not worth the fuzz\n. Awesome! Thank you\n. Try reportAndFix test helper for autofixing - https://github.com/jscs-dev/node-jscs/search?utf8=%E2%9C%93&q=reportAndFix\nAlso, check this out https://github.com/jscs-dev/node-jscs/commit/f8d0360e39b6928a4323671d18e61be9e039022b\nit is better move it in _fix field, providing that you would change pr target to 2.0\n. > Do you mean that I should move new tests to ./test/specs/rules/ and use reportAndFix instead of files?\nYep, this is how we usually check autofix feature\n\nWhat is the _fix field?\n\nSee https://github.com/jscs-dev/node-jscs/blob/ff7a6a1f4366bfc3c9004d79946bfec0ef570259/lib/rules/validate-quote-marks.js in 2.0 branch\n. > Regarding 2.0 version I'll try to fix it on another branch and create a new pull request for it.\nWith the _fix field? Promise :-)?\n. @zz85 could you check this out?\nsince this is autofix ticket /cc @mdevils \n. So @zz85, can i get \"LGTM\"?\n. One more thing, is it possible for you to move autofix logic to the token-assert module? Otherwise we will have three place where we fix things.\n. @Burnedo will you be able to make the necessary changes by monday? Since we're planning to release then.\nIf not, it is okay, i think we can move this logic to token-assert module ourselves.\n. np, you did an awesome thing here!\n. Landed, thank you!\n. See the comment i left in another pr\n. How about \n\nit is better move it in _fix field, providing that you would change pr target to 2.0\n\n?\n. Yeah\n. Thank you @zz85 for this pull and for the #1479 review!\n. At this point only major and CST related bugs will be fixed.\n. /cc @lahmatiy\n. Hm, since fat function is statically binds this, is it that hard to check the scope? We don't want it to report if parent is Program node? Can we just check it?\n. > (don't think we have any other rules doing this)\nThey don't, that is an interesting part :-).\nIf we would go that route, we would need to find first scope, which should be pretty easy, since there is only handful constructions that creates closure - let, with, function, class and const. \nParent of the checked syntax should have one of those fairly early in the upper stack, if it is not, it means it in the global context, i.e. parent = Program\n. Done, could you create an issue based on this discussion?\n. At this point only major and CST related bugs will be fixed.\n. Could you post screenshot of the summary output?\n. Is this analogue of the https://github.com/jscs-dev/node-jscs/pull/601?\n. How about we unite two approaches? We could show paths with error count and then rule table - http://imgur.com/FBX0C75\n. > for fixing #453\nNo connections to the new reporter\n\nI did not style the tables but it can be done if required.\n\nYeah, that would be preferable, it seems, wow effect of the #601 partly was achieved because of the styling thing.\nAlso, could align width of those tables?\n. > I found that it make the tests brittle\nYeah, that is one of the reason i was asking about that, console checks could be really tricky, just like regexps, perhaps you could change those tests to indexOf instead?\nAlso, red looks kinda aggressive, i understand that perhaps you chose that color because those are errors and errors are usually red. But i would propose to switch to more friendly color, like green one.\n. Awesome! Thank you\n. Could you elaborate? requireAlignedObjectValues should enforce \njs\nvar x = {\n    a   : 1,\n    bcd : 2,\n    ef  : 'str'\n};\n. There is a lot of rules that conflict with each other, like requireSemicolons and disallowSemicolons.\nCurrent style of requireAlignedObjectValues is fairly popular, it seems it would better to introduce disallowAlignedObjectValues rule for your particular use-case.\n. @kolomiichenko Still interested?\n. Okay, ping us up if you change your mind\n. Jesus, looks intimidating :-) \n. Since this pull affects a lot (or we could say everything), it should be landed in master asap, since it would be really, really hard to merge it with master in the near future\n. > I don't think this should be merged into master without at least having a discussion with the estree folks.\nWorking implementation might be good place to start iteratively improving CST image, with that being said, there is room and need for discussion \n. Okay, merged 2.0 to master, see ya in pull with different target\n. > I'm strongly agree that <=, >=, etc should be enabled by default\nSo, you against these changes?\n. Okay then :-), it is a breaking change so merged in 2.0, since this pr was incomplete, i did it myself, @segv i hope you don't mind.\n. > Sigh that we have to now maintain this\nA lot of tools do that, like grunt or jshint (in some manner). Although it would be more correct to add tests for this logic.\n. > A test would suffice for reassurance.\nFor sure, will add one\n\nLgtm, but this is for sure a breaking change. So merge in the 2.0 branch? Still haven't heard if we're doing 2.0 first or 1.14.\n\nThat is the question, isn't it :-). It is good thing that we have two branches, there is three things need to be done, in order to release 2.0:\n1. https://github.com/jscs-dev/node-jscs/issues/986\n2. #1359\n3. https://github.com/jscs-dev/node-jscs/issues/1353\n986 requires more discussion, so it might be closed as won't fix, others, mostly depend on free time of the  @zxqfox and @hzoo.\nIt seems #1359 is pretty easy to do and @hzoo solved most of complicated issues of #1353, one little step left to do.\nSo i'm thinking, if we could do those three things quickly, like week at most, we might as well, release 2.0.\n. Looks great, could also add example of the explainError invocation? Like here.\n. Awesome sauce!\n. Sounds like a different rule, we will accept it, if you choose to send us a pr\n. Well, there is no operator !! there is only ! this is why it parsed like that\n. I will put that on my list, but it will be much faster if you choose to send us a PR for the new rule (preferable for the opposite one too). \nfyi we're planing to release 2.0 on monday.\n. Any takers? Should be veeery easy\n. > nevermind, looks like this was fixed in a8296db ?\nNope, the opposite :-)\n. > \"allExcept\" is not in the documentation FYI\nIt is, but there no example for it, if you would like to add, we would accept the pr\n. Thank you @hzoo Hooray! \n. Yeah, automatization would be a good thing, automatization is always cool :-)\n. @lahmatiy thoughts?\n. > All tests passed but something wrong with build process :(\nYeah, sorry about that, coveralls started to do this a lot, build restarted, all green now\n. Thank you!\n. If you want to make it better we would appreciate your PR on the matter\n. Would you mind posting you config?\n. Could you add some comments, like for while for loops, or why you need to break/continue, etc. And it also might be good to put somewhere explanation of error search.\nNeed some else to give \"LGTM\" since this logic is not obvious like for the other rules.\n. @zxqfox @mrjoelkemp @mikesherov @hzoo i would like to merge this, so it would go in to 2.0, but need a at least one \"LGTM\" from you\n. @zxqfox @mrjoelkemp @mikesherov @hzoo i would like to merge this, so it would go in to 2.0, but need a at least one \"LGTM\" from you\n. @oredi which is makes so cool :-)\n. hm, it will fail for the case like this -\njs\nfunction tst(node) {\n    var array, // array of class names\n        ncn = node.className;\n}\n. When it is ready, would like to add it to following presets - \nCrockford - http://javascript.crockford.com/code.html#variable declarations\n\"The var statement should be the first statement in the function body.\" \nWikimedia - https://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript#Declarations\n\"Variables must be declared before use and should be the first statement of the function body.\"\nWordPess - https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/#declaring-variables-with-var\n\"Each function should begin with a single comma-delimited var statement that declares any local variables necessary.\"\n/cc @Krinkle, @paulschreiber, @jacksonrayhamilton\n. I predict that we will receive a ticket that would ask to allow case like this - \njs\n// Example\nvar i;\n. Thank you @oredi, nicely done\n. Did we discuss this?\n. I'd say you need to know rule name only if want to disable it which seems as a rare case, otherwise you just need to fix the error.\nPlus no other linter does it.\n. Well, that would practically eliminate this flag and it would be major change, so in any case it would have to wait for 3.0.\nTo prove these hypothesises we would need to fix https://github.com/jscs-dev/node-jscs/issues/1064, since we didn't received actual opinion from users.\n. Hm, after some thought, i think we should do that, even without #1064, what we want to do with --verbose flag though? remove it?\n. Added check for destructive assignments, but import statements are more tricky, so i also added tests (not fix) for it too - https://github.com/jscs-dev/node-jscs/blob/bc90c56791e9a552e2fa8293e9bd0d9e0af768e0/test/specs/rules/require-spaces-inside-object-brackets.js#L68\nIn case, if you would like to give it try.\n. Sounds good to me\n. At this point only major and CST related bugs will be fixed.\n. This issues shouldn't exist in current master, i will close this, but ping us up if it does happen with the latest commits\n. > Do we really want to load the only rule and copy-paste docs like that?\nWell, i don't, i really don't like that, but this is currently a one way to do that, we could do hierarchy, but that would mean site would need to support that and we would need to dynamically move it from node_modules \n\nI'm not sure also that we should register jsDoc as a single rule. I would like to see it like in eslint plugins: jsdoc/rule1. But this issue is like so very complicated to solve that nobody want to open that pandora box.\n\nWould you like to open that? Would be really cool, if you did.\n\nBtw. Why you stick to 1.0.0?\n\nBecause if you release new version, you might change documentation, but this dup will not change :-(\n. > p.s. I fear this react and webpack used in our site ;-(\nJoin the club, but common, this is nothing for bemtree priv.js veteran :-)\n. hm, can't repro it, could you try current master?\n. Another validateIndentation bug, /cc @mikesherov \n. At this point only major and CST related bugs will be fixed.\n. Thank you!\n. > I think we should move out jsdoc rule from default rules and add it with some other way.\nYeah, that is the idea :-).\n\nAlso what you thinking about rewriting default rules instead of throwing an errors? \n\nI think we should take one step at the time, this might be confusing for user though.\n. At this point only major and CST related bugs will be fixed.\n. Looks good, opposite rule should be pretty easy then?\n. > would we prefer to write a seperate rule allow-space-before-commas \nSounds good! You can add a separate commit to this PR, would you be able to do this today? Would like these rules to be in 2.0, which should happen today.\n. > Coverage decreased (-1.0%)\nIt seems we need more tests, you can check it out more thoroughly with npm run coverage-html && open coverage.html command\n. Thank you!\n. > @markelog Hi, Was this PR merged?\nYep and it already used in couple of presets\n\nI can see that it is closed now, but does it count as a contribution of mine?\n\nIt sure does :-).\n\n\"markelog closed this pull request from a commit 14 days ago\"\n\nThis means i pushed your commit to the repo, since you don't have push privileges, but commit is credited to you - https://github.com/jscs-dev/node-jscs/commit/66f89940c01d86dad0017213888f68f508e769fb \n. Thank you!\n. LGTM, /cc @indexzero\n. Since changes are pretty big and will get bigger, i think we need to make this green for the travis - add all those skip's or disable testing for the yet unmodified rules. And land it to 3.0 otherwise diff would became pretty big so it would be impossible to review properly.\n. Don't remember why we didn't do it before, worth a shot though!\n. Yeah, currently there is no way to enforce this particular style, it seems you need something more specific than SpacesInsideBrackets an opposite analogue of SpacesInsideArrayBrackets for getters only.\nWe could accept that rule if you choose to send us a pr? Would you like to do that?\n. > it's not available on npm (only component). I've given https://www.npmjs.com/package/natural-compare a go and it seems to be exactly like the original module but without the native prototype intrusion. It doesn't look like it's actively maintained, but time will tell. \nLet's ask, @megawac could you help us out? Can we relay on this module?\n. Thank you @megawac.\n@ruimarinho i'd say you could submit this issue to the underscore.string repo, i guess underscore.string is much less risky then natural-compare.\n. @ruimarinho we probably gonna release soon, would you have time to finish this up?\n. Okay, created an issue for it - https://github.com/jscs-dev/node-jscs/issues/1647. Let's do this as is\n. Landed, would be cool to autofix it though :-)\n. Why? Could you use inArrayExpressions option?\n. Sounds reasonable, could you add the same logic for function call parentheses?\n. Thank you\n. Weird, some prs failed, but now, without changing single thing they passing, hm\n. Probably, yeah, at this weekend i was planning to refactor grunt-jscs module, to have hands on experience on how we should do it\n. @hzoo other linters don't do anything like that, so i'm not sure in what way we can show it, so it wouldn't  be too invasive, docs change are indeed absolutely necessary.\n. Created the issue\n. Okay ladies and gentlemen, it seems we reached the tie.\nBy vote of JSCS core team (sorry @hzoo) - \n+1 from me and @mrjoelkemp\n-1 from @mikesherov and @mdevils\nIt seems final decision is on @zxqfox, after that, 2.0 is finally out of the door, otherwise me and @mdevils thinking we should start using insight in the next release (introduce it in minor or patch release) to get more definitive data and resurrect that issue for 3.0 if necessary.\n@zxqfox i encourage you to read full discussion on https://github.com/jscs-dev/node-jscs/issues/986. So what it would be?\n. Closing for now\n. Me and @mdevils thinking of providing new cli flag which we enable config autoformat and if jscs would executed with old config (without the flag) then show those errors with suggestion of using that flag.\nThat should be pretty easy if we would just map the old config to the new one.\n. New format and renaming is planned for the user convenience - to make it more consistent and easier to understand\n. I think not a lot of people would need such general functionality with numeric values. Also it is not easy to implement such values and not easy to define - if you want to check object with one key, then it is easy - 1 value should suffice, but what if you want to check objects with unknown amount of keys? Then we would have do something else.\nOkay, so given all above, sounds like this -\njs\n\"disallowPaddingNewLinesInObjects\": {\n    allExcept: [\"one\"] // or some variation of it, like \"one-key\"\n},\n\"requirePaddingNewLinesInObjects\": {\n    allExcept: [\"many\"]\n}\nshould be enough? Would you like to implement it?\n. @yekver would you be interested in implementing that feature?\n. Thank you!\n. @hzoo that flag might indicate that jscs should update the .jscsrc from the old format to the new one (when implemented)\n. Yeah, it seems travis failure is another coveralls trick\n. Could you try \"esnext\": true with current master?\n. It seems amount of reporters grows pretty fast, we need to be more conservative here.  \nLGTM\n. btw, what is use-case for this?\n. Isn't that easier to use API for that sort of thing? What do you do for other runners?\n. ?\n. Lets start from the other end, how do get that info from the other linters? Like jshint, eslint?\n. fyi, we probably gonna release this with 2.1 version, i would like to just better understand your use-case\n. And you don't want to provide global/relative reporter for the --reporter flag?\n. See http://jscs.info/overview.html#-reporter-r, like https://github.com/wurmr/jscs-teamcity-reporter\n. Thank you!\n. Oh man, i wish you would ask before submitting this, we will not rename rules in 2.0, this planned only for 3.0 :-(\n. Yes, also @mrjoelkemp wrote\n\nI'm not sure we have a lot of breaking, rule renaming going on in 2.0. @markelog, do you think we should maintain backCompat for this even if the rename lands in 2.0?\n\nand Mike added \n\nBut there was also a whole lot more renaming we were going to do for 2.0, but now that we haven't released in so long, I fear its counterproductive to do this now as it'll delay a 2.0 for longer than it's already been delayed. This is at least one reason I wanted a 1.14\n. > If you are worried about breakage, we can just silently alias indefinitely.\n\nWe would need to do something with documentation, maintain renamed rules, show deprecate notice, etc.\n. > No one said not to do it\nReally?\n\nI fear its counterproductive to do this now\n\nI guess this is misunderstanding, in any case, i'm sorry, you did all that work, but we really can't delay 2.0 anymore\n. The thing is, we should release in couple hours, everything is prepared for it, what you asking is to delay the release\n. Thank you @jacksonrayhamilton and sorry again for this misunderstanding\n. \"Indentation expert\" sounds peculiar :-), Is it makes sense to move includeEmptyLines (with renaming) to allExcept option? \n. > I'm curious as to what the failing tests are... \nCoverage... again, so it seems LGTM\n. Thank you\n. With isolated validate-indentation tests for time mocha command.\nWith changes - 0m1.276s, without - 0m1.281s. \nIs that theoretical speed increase? Where did you get these numbers? How big should be the code-base to notice this?\n. Tried with jscs code-base with only one validate-indentation enabled - \nwith 0m1.867s, without - 0m1.917s\n. Thanks :-)\n. This issues was existed because that plugin was added to dev deps. Should work for current master\n. Okay, lets talk, could you describe the issue? Since here you editing internal .jscsrc config.\nWith 2.0, which was published recently - https://github.com/jscs-dev/node-jscs/releases/tag/v2.0.0\nyou should have the ability to use JSDoc rules without specifying it in the jscs plugins or in package.json dependencies.\n. If you use this plugin - https://packagecontrol.io/packages/SublimeLinter-jscs\nThen you using global version of jscs, which is older then 2.0, so it is not compatible with newer major release.\n. That is your npm version, you need to do jscs --verison\n. That's been done\n. Thank you!\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. @zxqfox don't forget to update jscs-doc dep\n. Sometimes it is scary to observe how Crockford ideas influence people so strongly\n. You can also add https://gist.github.com/qubyte/43e0093274e793cc82ba#gistcomment-1292183 to your list, would be cool if you unite those lists together, so we would have explanation for these rule and why it they are useful.\nCould in docs or it could be a link to the such page\n. You could create a gist for it add link to the docs or put them directly.\n\nA quick skim reveals other rules don't contain justifications\n\nWould be nice isn't it? Since arrow syntax is \"improvement\" on ECMAScript version, it might be convenient to explain of why we add such a rule.\n. Check it out - https://github.com/angelozerr/tern.java/wiki/Tern-Linter-JSCS\n. Hm, thought i fix that\n. It is, although i gotta say, you have a pretty confusing code-style, since this\njs\nreturn new (SomeClass.extend());\nIs actually this\njs\nreturn new (SomeClass.extend)();\n. Disregard that, nothing wrong with your code style, i was just confused :-)\n. Could show your jscs config and problematic code?\n. Remove this:\n\"esprima\": \"esprima-fb\"\n. Yep, you could even remove esnex:true, since airbnb preset already define it \n. @lahmatiy Yeah, see the release notes for 2.0 \"Simplified inclusion of plugins, presets, and custom rules\" entry.\n@mrjoelkemp yeah, we should - https://github.com/jscs-dev/node-jscs/pull/1597\n. > it was a mistake in release notes\nIf you found anything that is even looks like a mistake or inconsistency of some sort please don't hesitate to tell us.\n\nWhen I use .jscsrc like this:\n\nJust checked, this should work, if issue persist would you mind create test repo?\n\nsee some progress on issue in #1597. \n\nNuh, that pull provides ability to load presets with .jscsrc extension not just with json or js\n. Yeah, we should show relevant error, would you like to send us a PR?\n. It is supported\n. @iamstarkov i'm confused, release notes clearly states that you can already do that, if there is any issues with the new functionality please let us now\n. Hm, it successes with mocha command but fails with npm run coverage.\n@mdevils could you help us out?\n. They are there, if they weren't, coverage drop would be in original pr, not in yours.\nAnyway, this code -\njs\n// Protect from the case like \"new (SomeClass.extend())\"(#1590)\nif (node.callee.type === 'CallExpression') {\n    return;\n}\nis now unreachable, you can remove it\n. LGTM\n. Couple notes, otherwise good to go\n. > I'm not sure we need to test it. Otherwise all messages should be tested.\nYeah, they should be all tested and believe we do that\n\nAnd actually I don't know how to get printed message. Believe console patching is not good aproach. Any ideas?\n\nStubbing is the only way, we do that all over the place\n. Okay, i added test, thank you @lahmatiy\n. Awesome, thanks\n. > I think they deserve their own rule or perhaps some exception value.\nYeah, it might be a good thing, would you like to create one? Should be pretty similar to (require | disallow)SpacesInAnonymousFunctionExpression\n\nPS2: Wow, even adding a space before the opening brace (ie: constructor () {) gives the same error. Mind blown.\n\nOh, god, No! There is so much blood! \n... \nAnyway, that is bug and that is a fix for it.\n. > I think they deserve their own rule or perhaps some exception value.\nhttps://github.com/jscs-dev/node-jscs/issues/1513 btw :-)\n. This fix was intended for the \n\nPS2: Wow, even adding a space before the opening brace (ie: constructor () {) gives the same error. Mind blown.\n\nissue, everything else is https://github.com/jscs-dev/node-jscs/issues/1513\n. btw, would you like to implement such value?\n. > remove disallowEmptyBlocks: nothing about it in the Airbnb JavaScript Style Guide\nThere is non-empty blocks :-), sometimes you gotta look at the code and code-examples, not everything is mentioned in the code-styles but only hints on some behaviour so i would leave that in.\n. Okay, i'm gonna merge this without disallowEmptyBlocks changes, if you like to continue this discussion further we would be open to that.\n. At this point only major and CST related bugs will be fixed.\n. > Yeah we need to check if the identifier is a param somehow\nIt could be done with escope, sounds like other issues could be handled as well, would you like to finish this up?\n. Hm, could you show an example of such code? Is there any code-style that recommends to do that? Is there any editors/IDE that do that?\n. Not exactly, they recommend to use 2 spaces indentation, so 2 spaces not only for switches but for every block constuction\n. Okay, if you want to continue this discussion, ping us up\n. Would like to hear another opinion for the new name properties, @hzoo, @mrjoelkemp, @zxqfox?\n. @zxqfox we can't use \"statement\", since as i said, a lot of constructions that would be counted by this rule are not \"statements\" in terms of ECMAScript specification.\n. Bikeshedding always a \"hard part\" as said in that popular proverb ;).\nminLines sounds good to me\n. constructions? entities?\n. nodes?\nanyway, @oredi, choose the one you like best :-) \n. Thank you!\n. Since wordpress (see the #1632) explicitly prescribes use of such comments, should we reconsider? \n@mrjoelkemp ? \n. This one failed because of the force push, so yeah, pretty safe to land.\n\nWhat do we think about getting Docs commits to add [ci skip] to the commit message?\n\nDoesn't hurt to run on every commit\n. What happens if you change \njs\n \"excludeFiles\": [\n    \"app/templates/_index.test.js\"\n  ]\nto\njs\n \"excludeFiles\": [\n    \"./app/templates/_index.test.js\"\n  ]\n?\n. Thank you for the repo, this looks severe, so this should fixed soon and release should happen on monday.\n. There you go - #1652\n. Thanks!\n. I'd say we should wait and see how many people needed it, presumably all rules should work correctly with es7\n. >  We run into\n\nissues with new syntax that doesn't have the appropriate types without\nworkarounds like _babelType.\n\nYeah, that is unfortunate, but looking at amount of es7 issues recently, it seems people want it\n. /cc @mrjoelkemp \n. Thank you\n. The thing is, jQuery call jQuery#each with the predefined context i.e. <function>.call(<my context>). For such cases there is no way to know what context of the call would be for the static analysis tool.\nOnly one thing we could do, is allow chaining calls for that rule.\n. Closing because of inactivity \n. Would you like do it?\n. This is also needed for the jquery preset, i guess, technically, this is not a bug, since rule does exactly what it supposed to do.\nWe need to add allExcept option for it.\n. @Reinmar would you like to try to implement such option?\n. What is the use-case? How it would work with CST?\n. Sounds like some parts of these changes belongs in utils module\n. We use those constructions a lot, i guess it would be better to not duplicate the same logic, since if there would be a error, you would need to check all those places and write tests for them too.\nWe could create another helper module for those cases\n. Okay, created an issue for the utils hazard - https://github.com/jscs-dev/node-jscs/issues/1662\n. Looks good\n. Awesome, thank you\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. Interesting, although i run on github requests limitation couple times, even with authentication \n. > Can you use a different token for each project?\nYeah, try that, but github sometimes gives me 4998 times from 5000 tried for the last hour, or something like that, even if it is my first request with newly created user.\n. Anyway, will try these changes at new release\n. Closed via c9ee4f70d99f535d1d88425b3088382983164569\n. I guess we should figure out this after in different issue, so we wouldn't hold this on.\n. Could you also update documentation on top of the rule file?\n. Thank you!\n. We have this comprehensive \"Contribution Guide\", but \"new rule\" guide would be very interesting to see.\nYou could start by creating wiki page - https://github.com/jscs-dev/node-jscs/wiki/_new and we will figure out the rest.\n. Had to note, after this, you can't nullify those values. \n. Thank you!\n. At this point only major and CST related bugs will be fixed.\n. Yeah, we can do this at \"pre-parsing\" phase, essentially same issue as in https://github.com/jscs-dev/node-jscs/issues/1156\n. Could you post your config?\n. That would be cool, docs require some love\n. Thank you!\n. Thank you!\n. Fast eye! Although it was already fixed - https://github.com/jscs-dev/node-jscs/commit/de1b932f2342fe4e90c1dcab5f7a674d069d8c35\n. Thanks again\n. Wow\n. Looks good!\n. > It would be great to have some feedback on requirePaddingNewlinesBeforeKeywords as it has a default array list that is too big to fit into the value section. \nYou could do the same thing we did for http://jscs.info/rule/disallowSpaceAfterBinaryOperators.html \nIn other words no need to mention full list of default values. Since that spacedKeywords array could change, but docs might not.\n\nI can squash it if required\n\nIt would be cool, to make this commit like this - \n```\nDocs: improve documentation for various rules\n* disallowKeywordsOnNewLine\n    Modify the type and value sections to be consistent with other rules\n\n* requirePaddingNewlinesInBlocks\n    Modify the type, value and example sections to be consistent with other rules\n\n* requireVarDeclFirst\n    Modify the type, value and example sections to be consistent with other rule\n\n* requirePaddingNewlinesBeforeKeywords\n    Modify the type, value and example sections to be consistent with other rule.\n    Added valid and invalid cases for array example\n\nFixes #1658\n\n```\nSee http://jscs.info/contributing.html#commit-message-format\n. > I was trying to look for something like that as the generic format in the documentation did not cover cases with multiple rules in a single commit like this.\nI only ask about this style, so we wouldn't clutter commit history.\n\nShould I follow what we did there and create an issue/PR for every 4-5 rules I am going to update?\n\nThat would be cool!\n. Thank you!\n. For sure \n. @zxqfox could you check it out?\n. There is tests for allButReserved, just one test missing\n. See https://github.com/jscs-dev/node-jscs/issues/1513\nWould you like to implement such value?\n. > seems that disallowAnonymousFunctions handles \"Method Definitions\" as \"anonymous functions\"\nThat is because they technically are \"anonymous functions\", since this request for same value but for different rule then #1513, i will leave this open\n. This is method definition, as property of the class, it as a property that has a name and that name points to function, which is a \"function expression\", without a name.\nYou can see that on mdn page - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions#Description, as a \"shorten\" version of \njs\nvar obj = {\n  foo: function() {},\n  bar: function() {}\n};\nnot of \njs\nvar obj = {\n  foo: function foo() {},\n  bar: function bar() {}\n};\nYou can also see this in the spec - http://www.ecma-international.org/ecma-262/6.0/#sec-method-definitions, which divides property name and function or more precisely in here - http://www.ecma-international.org/ecma-262/6.0/#sec-runtime-semantics-definemethod, this is why it doesn't do lexical identifier binding:\njs\nvar o = {\n   foo() { console.log(typeof foo) } // undefined\n}; o.foo()\nNevertheless, what ever you want to call it, we still would need to fix it, if you want to help us out that is great, we already show you the way, otherwise this discussion has no meaning.\n. > Please see my comment's images.\nAwesome images, very enjoyed them! Dutch is tilt though.\nSetFunctionName gives name property to a function, but it is still, for all intents and purposes, anonymous. If it wasn't, you could do recursion, you could do event binding, etc, but you can't.\nNow see the\n\n\nLet scope be the running execution context\u2019s LexicalEnvironment.\n\n\nSome say that this makes spec inconsistent, that it is has name but it don't have lexical binding. Some say that it is a bug, but as AST shows that it is anonymous, we show you that is anonymous.\nAnd once again, if you don't think i'm right, that is fine, we still need to fix it.\n. cli-config already used in couple projects, how would you suggest to make it \"clean\"?\nbtw, this -\njs\nimport configFile from './node_modules/jscs/lib/cli-config'\nCould be simplified to this\njs\nimport configFile from 'jscs/lib/cli-config'\n. Friendly ping\n. You are not the only one :-). Not sure who we can do it better though\n. Yeah, so disallowIdentifiers should work for your case, ping us up if you want more\n. LGTM\n. Minor notes, looks good otherwise\n. Change the name of the exception, anyway, good work, thank you\n. Kudos \n. > Is Infinity supported by JSON?\ntotally\n@danechitoaie, not sure of what you asking, if the question is How can you disable maxErrors?, to complete @hzoo answer - you can also provide a cli argument too\n. > Um, what? Infinity is most certainly not valid JSON:\nokay, okay, you don't need to act so suprised, like this is a common knowledge :-).   \njs\n{\n  \"maxErrors\": null\n}\nshould be used instead\n. > How do you disable maxErrors when using the cli? (it's still not clear here to me how to do this. What do I pass as argument in the cli? null doesn't work there as it's interpreted as string.\njscs --max-errors Infinity .\nOkay, reopening, since we have two types of issues here:\n1. Need to document disabling maxErrors option through config and cli\n2. Need to improve error output, since now we have this -\nbash\n$ jscs --max-errors null lib/cli.js\n`maxErrors` option requires positive number or null value`\n. btw, @danechitoaie would you like to help us out, and try to tackle one of these issues?\n. There is two issues, first one is easy - docs update, you can check out these docs, updating them basing on this discussion, or/and you can sink to the jscs code and try to change logic of the cli max-errors flag, like jscs --max-errors null <path> either to allow null value or change error output.\n. @hzoo merge away :-)\n. Nicely done, LGTM\n. Cool, thanks\n. fyi: we probably gonna release soon, you might still make it :-)\n. @danechitoaie\n\nSorry, these days were crazy at work... you don't even want to know...\n\nI do know, i'm living it :-)\n@hzoo \nOnly if @danechitoaie does mind, are you want to take that in?\n. Would be cool to have a bit more tests for new values\n. I have finished this up, thank you!\n. good to me\n. /cc @mikesherov \n. Yeah, pretty confusing.\n\nrename allExcept ('invert'? 'special'?) or restore includeEmptyLines\n\nHow about we would add option include that would accept array, just like allExcept?\n. > [\"comments\"]- they are already included by default\nYep, we included it by default and document it, if options are contradicts with each other, we would need to throw.\n. Sounds good?\n. > What about adding two options\nLike this - \njs\nvalidateIndentation: {\n  allExcept: ['comments'],\n  include: ['emptyLines']\n}\nand if\njs\nvalidateIndentation: {\n  allExcept: ['comments'],\n  include: ['comments']\n}\nthen throw\n. Would you like to implement it?\n. At this point only major and CST related bugs will be fixed.\n. > Hmm, why do we want to do this?\nTo make rule more friendly, since such comments, are not exactly comments but controlling instructions, similar to the \"use strict\" literal, but pretty common.\n\nHow would one then disable these default values?\n\n\"requireCapitalizedComments\": { \"allExcept\": [] }\n\nI can easily see comments starting with global which are not eslint comments and therefore should be capitalized.\n\nYeah, so there is two ways of dealing with this, argue that amount of false positive would be greatly lower then legitimated cases or even further, you could implement heuristic for each case, which would bring down false negatives to nil.\nOr don't include it in the default list.\n. > This means, that setting the \"allExcept\" option overrides the default values, right?\nWell, yeah, that is why they are \"default\".\n\nThis feels a little inconsistent :-/\n\nWith what?\n. > \"requireCapitalizedComments\": { \"allExcept\": ['foobar'] } and now the default values are gone\nYeah, this is a downside, but i guess there is no better way.\n\nShall I implement these changes?\n\nThat would be cool :-)\n. globals i guess, other then that, it looks good\n. > we'll get requests for every pragma from every popular tool\nDon't see anything bad with it, if people would send as a request, it would mean they needed it.\n\ninvolves copying all other exceptions unless we also have a way to negate a single default\n\nYeah, that is surely a downside, although we could mention that set in the docs, so user would need to only copy-paste it.\n\nRight now, if user use istanbul for example, their would need to add that an exception, which means they would need to spend some time to set up their config, which would be cool to avoid.\nAnd in preset case, a goal here, at least how i see it, is for users to know much less about configuration of specific config, and just set \"preset\": \"something\", and do not require to know anything else, don't go to read docs and figure out how to add an exception.\nAnd it is pretty much what already do with other rules, like http://jscs.info/rule/requireSpaceBeforeKeywords.html\nWhereas, downside is although probable but speculative.\n. Still interested?\n. > In the current implementation \"jscs\"...\nSince it is not a breaking change, we all good there\n\nDumb question, but what does this have to do with #1729?\n\nCould you spot the difference between https://github.com/jscs-dev/node-jscs/pull/1729/files#diff-50e3aa130a4f97a42ee2cf111c7b1d9dR208 and https://github.com/jscs-dev/node-jscs/pull/1731/files#diff-32c54cbe9c291803095ecdfe5f955728R99 ? :-)\nSince two rules already can use that list, we should put it in utils\n. Okay, lets wait until your suggestion is resolved\n. We can't do anything with \n``` js\n/*\ntest(  \"i dont want this to run\", function() { \n*/\n```\nYou can use jscs:disable pragmas  though or wait for https://github.com/jquery/qunit/issues/496\nAnd this - \njs\nfunction( /* option */ ) {\nshould be a new option\n. Thank you for keeping an eye on such things\n. Not sure how would you enforce second case, like what if \njs\nlet myObject = {\n  field1: value1,\n  field2: value2\n};\n// ... lots of code, or no code at all\nmyObject.field3 = value3;\nexport {myObject as default};\n? \n. Awesomely done!\n. /cc @mikesherov \n. Try to update your SublimeLinter and global jscs\n. Thank you\n. Yeah, that is definitely an issue, we \"fix\" this for -x flag but not for --auto-configure\n. Could you post the full command?\n. And config would be also helpful\n. Thank you for noticing!\n. At this point only major and CST related bugs will be fixed.\n. @zxqfox \nYou mean in fileExtensions? Yeah, i think we should be consistent \n. It seems now we have inconsistency of how we document fileExtension and excludeFiles?\n. LGTM\n. Confirmed\n. Confirmed \n. I assume you proposing the new rule?\n. What valid/invalid code would be? Would you like to implement it?\n. I'm not sure what you want here, limit amount of call expressions?\n. Would you like to take a stab at it?\n. Please use English, could you try to sens us a PR?\n. > i'm not sure, that i can finish this work in short time.\nNo hurry, just make a pr and we will figure out the rest\n. yep\n. +1 :)\n. Nuh, https://github.com/jscs-dev/node-jscs/issues/241\n. It seems we need to always ignore .git folder, otherwise user could redefine that value and will have same issue\n. It is different way of solving it\n. > @markelog these changes will not break #241\nWhy not?\n. It seems it would be a breaking change?\n. Stil interested?\n. I would suggest stop searching in .git folder, but leave the dot folders in general\n. It seems as less invasive way to do it\n. Duplicate of https://github.com/jscs-dev/node-jscs/issues/1342\n. we could use time command with mocha run, but without service like coveralls for benchs, it is pretty much useless i guess\n. Okay, so this improvement only for the rules that use that method? Still, pretty cool\n. Landed without last return, since it seems it is a unreachable code.\n. Landed, thank you\n. @zxqfox is this still an issue?\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. Hm, can't repro it\n. Fixed via https://github.com/jscs-dev/node-jscs/commit/f45748876052fd61da35c2c24c174cb585c43645\n. Yeah, maxErrors is respected if you run through CLI, but not programmatically \n. Okay, it is grunt-jscs, since fix property is its flag not jscs's - https://github.com/jscs-dev/grunt-jscs/issues/95\n. > coffee before issue reporting this morning :-)\nI will drink to that! :-)\n. /cc @mrjoelkemp \n. How about /**/?\n. > I guess I assumed this was for line comments.\nYeah, i was asking if you ignore them or not\n\nbut should 'enable' trigger an error or pass?\n\ni'd say just ignore them. I guess we would need to expand on other constructions as well? See discussion in https://github.com/jscs-dev/node-jscs/issues/1685\n. LGTM\n. Sounds like we should move pragma checker to utils not only the list alone\n. Okay, added one more test so coveralls wouldn't swear.\nAnyhow, landed! Nicely done\n. We just landed utils.isPragma - https://github.com/jscs-dev/node-jscs/commit/8db0ee95cab00a450f5bda2f8fc4e7d134d0e70e, could you applied it here?\n. > But the file is still 100% covered. So why exactly are you failing my build? :-|\nAdded couple tests in https://github.com/jscs-dev/node-jscs/commit/6153d1fcdff98098de635b1a26e948e2d49214b5, now you are 100% \nLanded! Thank you\n. Sure, let's do it, would you like to implement it?\n. Nooice!\n. Don't worry, one way or another these changes will be in the next release\n. It would be cool to take down https://github.com/jscs-dev/node-jscs/issues/1722 while we at it\n. It seems we can add to the jquery preset?\n. At this point only major and CST related bugs will be fixed.\n. LGTM\n. Can't believe we didn't do it earlier\n. Oh, shoot, miss that pull https://github.com/jscs-dev/node-jscs/commit/376dbc3dd3d018df438dc2711d75067b21606542, sorry @arschmitz\n. @arschmitz most of the #1686 is now fixed, you sure we still need this?\n. Okay, closing for now, ping me up, if you think this is still necessary \n. LGTM\n. Like what?\n. Yeah, i get it, thought you might something specific in mind :)\n. So propose of that list is to use it at jscs.info site? Right? Are you planning to submit supporting PR for the jscs-dev.github.io branch?\n. Still interested? \n. Would you like to try to fix it?\n. At this point only major and CST related bugs will be fixed.\n. I guess new rule would be a better choice, would you like to implement it?\n. Although we mention this three times in the docs, ppl still make that mistake - \njs\n{\n\"requireTrailingComma\": null\n}\nIn the next version false value will also be supported\n. Thank you!\n. I guess this duplicates in some way duplicates\njs\n{ \n  \"validateIndentation\": 4\n}\nBut not fully\n. > yeah, would it be better to extend validateIndentation to handle this? My use case is to completely disallow tabs.\nI think it is better to have a different rule for it.\n\nI was finding that validateIndentation wasn't doing that and in fact was exhibiting problems when tabs were present.\n\nWhat problems?\n. Landed!\n. > Can't do nothing about it at the moment, until we can extend parser\n/cc @mikesherov \n. At this point only major and CST related bugs will be fixed.\n. Maybe we can output amount of fixed errors\n. > Alternately, we could filter out the fixed errors before they get to the reporter, and just provide the reporter with the number of fixed errors.\nThis approach sounds better to me :-), otherwise we can confuse the users, showing them errors that we already fix. \nFor that task we could introduce new flag, like --fix-dry-run (or something) but since everyone these days use some kind of VCS it might be redundant.\n. At this point only major and CST related bugs will be fixed.\n. LGTM\n. @ptarjan would you like to implement such value?\n. Cool! Love ya\n. Yeah\n. Landed, btw, would do think of creating your own npm preset package, if you would, we could just make it a dependency of jscs so you can update it independently?\n. Oh, sorry, was asking about it in original ticket, i guess i should have ask you directly :/\n. Cool, will do\n. @gibson042 with this change, we can include disallowSpacesInsideParenthesizedExpression: true and requireSpacesInsideParentheses: {\"all\": true, \"ignoreParenthesizedExpression\": true} for jQuery preset.\nYou still want to introduce such change to jQuery code style? Do you want to introduce other parentheses rules?\n. > Wouldn't allExcept: [\"ParenthesizedExpression\"] be more in line with recent deprecations than introducing independent ignore properties?\nThe thing is, allExcept for this rule accepts array of token values, whereas this value wouldn't be a token. So i'm not sure which is better - polymorhic configuration value or new value.\n\nHowever, allowing production-based exceptions like this for requreSpacesInsideParentheses seems to make such rules unnecessary\n\nYeah, my thought exactly.\n\n(but then again, many JSCS rules would become redundant through expansion of only and allExcept on more general forms).\n\nI guess it depends on what is easier to support and implement some check - new additional rule value or new rule.\n\nP.S. Are you planning to introduce categorization-based exceptions in disallowSpacesInsideParentheses here as well, to maintain parity?\n\nWe tried the parity approach, but it generated rules or rule values that no one uses, so we would ask a contributor to do something time consuming that no one would use, that seems wrong, consistent, but wrong.\nRule and rule values are in chaotic state at the moment, we have a lot of rules and the more rules we have the more chaotic it gets.\nHoping to straight it up in 3.0 - new config, removing unused or deprecated values/rules, etc. Yeah, hoping...\n. Okay, lets see how it goes, will you open an issue in https://github.com/jquery/contribute.jquery.org?\n. At this point only major and CST related bugs will be fixed.\n. Needed for other changes, landed, if there would be any issue - will revert\n. At this point only major and CST related bugs will be fixed.\n. For sure! No hurry ;)\n. > If we're adding this\nWe discussed this couple times in gitter, it seems we were generally liking the idea. Plus it is pretty useful to have is as autofix.\n\nalso remove unused from jshintrc please\n\nunused also catches the vars, whereas this rule works only for params\n. No worries, thank you!\n. Sounds like an issue with gulp task, .jscsrc is correct\n. > I'd like to include the exponentiation operator (* and *=) into the binary operator list. \nYeah sure, lets do it.\n\nuse the opportunity to ask\n\nStage 2 i suppose, rules with earlier stages could be made as a plugin\n. @SimenB  Would you like to take a stab at it?\n. /cc @mikesherov \n. Thank you!\n. LGTM\n. Did you try inCallExpressions value?\n. Sure thing :-)\n. @SimenB would you mind checking this out?\n. Looks we need to change both - source and docs, will check this out more thoroughly and add tests\n. At this point only major and CST related bugs will be fixed.\n. LGTM\n. @nantunes Could you explain what you trying to do here?\n. @RehanSaeed could you check this out?\n. I will land this for now, @RehanSaeed if there any issues please let us know.\n@jwilsson many thanks!\n. /cc @zxqfox \n. > which is not possible\nEverything is possible with ES6 :-) - \njs\nfunction sanitizeArticles (articles) {\n    return articles\n        .slice()\n        .map(article => ({\n                id      : article.id,\n                category: article.category.id\n            })\n        );\n}\n. We would need to use those tags with changelog generator, since primarily we want to do it for changelog itself.\nLike what it would generate if we would use Fix:Breaking: ...?\nAlso we need to make sure we can add such checks in githook.\n. Did you implemented commitplease? Since you moved that ticket here but not implemented it\n. We also need to document this\n. That's really impressive\n. Hm, i think i know what the issue is, we would need to release again though\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. > We should probably update disallowSpaceBeforeComma too later (only has 2 tests)\nMaybe, although if it has 100% coverage and no one complain about it...\nAnyhow, it shouldn't be a concern of this pr :-)\n. Thank you for adding tests for the sister rule!\nLGTM\n. Would love that rule\n. Why would anyone use validateLineBreaks if their have correct .gitattributes file? \n. Yeah!\n. At this point only major and CST related bugs will be fixed.\n. I think, file example would be enough, if you don't want to go in the internals\n. That would be a cool rule, @minj would you like to give it a shot?\n. @schempy still interested?\n. Ping us up if you are still interested\n. hm, that is weird, it should work, since we have windows CI and users with windows, would you mind creating a test repo?\n. Friendly ping\n. > If that time comes, we'll give table a shot. Thanks for contributing.\nYeah, we always try to choose best package out there to work with, so @gajus, if you submit pr we will consider it :-)\n. At this point only major and CST related bugs will be fixed.\n. @zxqfox i remember you were using windows (?), could you check this out?\n. Friendly ping\n. Hm, rule in question is disallowSpaceBeforeBinaryOperators, can't reproduce it though, would you mind posting your config, and showing output of npm ls | grep jscs?\n. Oh, i had feeling i have seen something like that - https://github.com/jscs-dev/node-jscs/issues/685, https://github.com/jscs-dev/node-jscs/issues/849\nSo, yeah, just remove old esprima and you should be good to go, ping us otherwise\n. You bet\n. When we will have CST, that would be even better for autofixing.\n@bjdixon would you like us to ping you when it will happen?\n. LGTM\n. Still WIP?\n. all good\n. I think that would be a good idea, i think current behaviour could be considered as bug\n. Thank you!\n. Didn't document, since i'm still hoping someone will come up with a better name\n. Could be a 1 + /* yep! */ 2 too \n. yep\n. So, any ideas?\n. What is the progress on those points?\n\nUsing CST for fixing.\n\nCan we leave some parts on token manipulating? I think no, right?\nWould you mind providing examples for #3 and #4 points? How it was and how it should be? So others could duplicate that\n. @mikesherov yes, but that token shouldn't have a Keyword type, but an Identifier, i see this issue in Esprima and in babylon too\n. > Oh, just in case I wasn't clear enough, your change is fine for me as is. \nCool then :-)\n. Why do you want to change that?\n. Seems like we do https://travis-ci.org/jscs-dev/node-jscs/jobs/84916786\n. Mostly, it is there for .8 users\n. @paladox nevertheless, thank you for keeping an eye for such things!\n. Nope, no connection\n. Hm, can't repro. Do you use gulp or grunt?\n. At this point only major and CST related bugs will be fixed.\n. It is a bug, but we can't fix it without supporting https://github.com/jscs-dev/node-jscs/issues/454\n. At this point only major and CST related bugs will be fixed.\n. Congrats!\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. How about: \njs\nrequireCamelCaseOrUpperCaseIdentifiers: {\n  value: '...'\n  allExcept: [...]\n}\n?\nWould be a good opportunity to try out is-my-json-valid, or similar package, so you wouldn't go crazy writing all those checks in configure.\n. How about glob patterns? So we wouldn't be tied to specific cases, but could be more generic, i imagine such conditions also could be used in other styles.\nAlso, it would be cool to justify such option in docs\n. Looks good to me\n. > Coverage decreased (-0.01%) to 98.373%\nWould you mind fixing that? You can check out the coverage by executing nm run coverage-html && open coverage.html command\n. If anyone would like to add standard ones, it would be most appreciated\n. Yeah\n. We can release, right after that\n. Increased the timeout, but it didn't help, honestly, i would just remove appveyor, don't remember if it did help us in any capacity\n. Can't repro, @hzoo could you confirm?\n. @lf94 do you wanna do it?\n. At this point only major and CST related bugs will be fixed.\n. js\nCommas should be placed on the same line as value at test.js :\n     1 |var a = [\n     2 |    1\n     3 |    ,\n-------------^\n     4 |]\nWhy not?\n. Would you mind adding tests and valid example to docs?\n. We can guide you through the process of writing tests if you like\n. Drizzt Do'Urden is one awesome dude btw :-)\n. Closing in favour of https://github.com/jscs-dev/node-jscs/pull/1914\n. At this point only major and CST related bugs will be fixed.\n. > Coverage decreased (-0.02%) to 98.391%\n?\n. Friendly ping\n. Ping us up if want to continue work on this\n. How about we make it as separate rule? Two rules even, since one would require to have spaces -\njs\nfoo( baz, \"bar\" )\nand the other would disallow it - \njs\nfoo(\"bar\")\nDoes it sound doable?\n. Would you like to take a stab at it?\n. See discussion in https://github.com/jscs-dev/node-jscs/issues/1918\n. Do you have a link to the schema?\n. Current schema is compatible with ant, if we would accept your proposition it would mean we wouldn't support it but would support jenkins one. \nI'm not sure what is more popular and what should be used by default. But since this is first request for format change since this reporter was introduced (for two years that is) and because format change would warrant major version i'm leaning to recommend package this reporter as jscs plugin.\n. > So what you are saying is create another jscs plugin for this schema ?\nYeah\n. I would recommend to do it as a plugin first, since we already have an overwhelming amount of default reporters.\nIf it will became popular we can consider adding it to the dist. \n. At this point only major and CST related bugs will be fixed.\n. How about we make it as \njs\nallExcept: ['trailing']\n?\n. If that information is not enough, please ping us up!\n. Sounds like this should be enabled by default? i.e. no need to introduce another option?\n\nCoverage decreased (-0.04%) to 97.809%\n\n? You can check the coverage by running npm run coverage-html && open coverage.html\n. What about making this behaviour enabled by default?\n. Thank you!\n. > Or maybe a rule requiring a newline char after opening curly brace and before closing curly brace?\nSounds interesting! I would recommend though, using https://github.com/mafintosh/is-my-json-valid package if your options would became complicated\n. I meant instead of using bunch of asserts in configure method to validate user input, you can use json schema. It is not a stopper though, but something to help you out, you can do those checks with the old fashion way though\n. Hm, nuh, that is not what i mean, but doing it old fashion way is also good\n. Could you check it with current master?\n. Releasing tomorrow\n. Hm, other linters do not include it by default and we have 8 already. I'd say it would be interesting to see it as a plugin first. \n. Yeah, we have a long standing ticket about that - https://github.com/jscs-dev/node-jscs/issues/1106, if you would help us with it, it would be great!\n. Okay, since @mdevils should be almost finish with it, i'm closing it\n. At this point only major and CST related bugs will be fixed.\n. More tests are awesome, but it usually better to do it in different commits, like if we notice some bugs with this pr, we would need to revert the whole thing since it all done in one commit, including unrelated changes.\nIt is also better to differentiate since it might be hard to next guy understand what and why was done here with git blame or analogues commands or gui\n. What about (require | disallow)CommaBeforeLineBreak rules?\n. Okay, landing pr, but not closing the ticket, because of omission of (require | disallow)CommaBeforeLineBreak rules.\n. At this point only major and CST related bugs will be fixed.\n. > I can't understand how I can add test for this rule to https://github.com/jscs-dev/node-jscs/blob/master/test/data/options/preset/yandex.js, because it works only in ES6.\nLike that - https://github.com/wikimedia/jscs-preset-wikimedia/blob/master/test/specs/preset-wikimedia.js#L28-L33, it would be better though to move this preset to its own repo.\n. Is there any speed penalty?\n. > Coverage decreased (-0.3%) to 97.554%\nI know we gonna change this soon, but would still recommend to go down with this metric\n. Don't forget to apply git tags next time. \n@hzoo you wanted to add commitplease right?\n. @hzoo \n\nWe rewrite the changelog anyway but if we want to do it still ok.\n\nWell, we still experimenting at this point, with tags we could create more clean changelog.\n@mdevils https://github.com/jscs-dev/node-jscs/issues/1812, bureaucracy at its best in other words :-)\n. Could you give us full example please?\n. Yeah, wanna do it?\n. > Would you say this rule also needs both before and after rules?\nThis could be done with options, but if you would want it this way, we would need such options for the opposite rule too.\n. Well, if we do that, rules would be different in their behaviour, ideally, they should be full opposite of each other, if one rule require something the other should disallow it in the same occurrence \n. js\nfunctionname(){}\nIs not valid JS, \njs\nfunction*aGenerator(){}\nIs.\nProbably better way would be to introduce before, after options to requireSpacesInGenerator along with opposite rule\n. It seems escope package is not compatible with babylon ast (which is used in this case). \n@Constellation\nIs there some could be done about this? Easiest way to repro it with this code - \njs\nfunction foo() {\n    <div></div>\n}\nwhich would output following AST - https://gist.github.com/markelog/c7674a737b2c7e993215\n. Yeah, this is the same issue :/, it is too bad @Constellation is not willing to help us out, will try to hack this up somehow\n. /cc @michaelficarra \n. @michaelficarra this is pretty weird, because you use babylon, i.e. you use babel to build your own project, but funny thing is, you can't use escope on your own code, like if you would try to analyze scope of the src/definition.js file, you will get the same recursion issue.\nI found this very strange and unpleasant. \n. > Yeah we would need a different fix for v2\nThere is hard to do anything on our side, this is why we put so much work on creating our own scope analyze module, so probably, if someone else wouldn't submit a pr, you would need to wait until 3.0 :/\n. At this point only major and CST related bugs will be fixed.\n. The issue is not with the grunt plugin, but with logic of extract property - \n1. It can't process file if it is not in the directory i.e; this - \njscs index.html --extract *.html will not work\n2. It can't correctly process directory files too i.e; this - \njscs tmp --extract *.html (if there is file index.html inside tmp directory) will not work, only \njscs index.html --extract *.html which pretty weird considering that you don't have index.html file in the root, only inside tmp folder.\nIn other words, extract requires a lot more work and is not really in working condition at the moment.\n/cc @lahmatiy\n. @texel Friendly ping :-)\n. Okay, i'm closing it for now, ping us up if you want to continue work on this\n. New value for it, would be fine, would you like try to implement it?\n. Yep\n. It seems we are moving in both directions with focus on \"new rules\" approach - https://github.com/jscs-dev/node-jscs/pull/1951\nIf someone would like to add them, that would be great\n. /cc @hzoo\n. js\nif (cond1 && cond2 &&\n    cond3...)\nCheck it out - http://jscs.info/rule/requireOperatorBeforeLineBreak\n\nThe same thing should work for for\n\nNot sure by what condition we could decide if body is too long.\n. Would you like to try to implement it?\n. There is find(Next | Prev)Token(token, type, value)\n. What happened here?\n. Said news, but not a surprise :/\n\nCan we make this changes in version 2.6.0?\n\nIt would break backcompat, so only in 3.0\n. Fixed via https://github.com/jscs-dev/node-jscs/commit/25b92408ae7f5410bf930e2497814538f034270f\n. LGTM\n. If you want to take a shot at it, it would be great!\n. Logical! But would be kinda weird to check such case, but it is easy to implement such rule yourself and use it as a plugin\n. Good one! Thanks\n. For the file -\n``` js\nvar x = \"hello\",\n    b = 3;\n/jscs:disable disallowMultipleSpaces/\nfunction  y() {}\n```\nI see no applied fix\n. Sorry for late response, yeah, i did. Config looks like this - \njs\n{\n    \"disallowMultipleSpaces\": true,\n    \"disallowMultipleVarDecl\": true\n}\n. Can't repro\n. Hm, can't repro it, what version of do you use? Can you run jscs with --verbose flag?\n. Coolsies\n. I guess this is one of the most confusing addition to ES6, those methods, are in fact anonymous functions, see discussion in - https://github.com/jscs-dev/node-jscs/issues/1671#event-438122364\nIf you would like to send us pull to include exceptions to this rule, we would welcome it.\n. @hzoo \n\nAlso we are switching to using cst which will just use babylon.\n\nYeah, this week i will start working on it, if you not beat me to it :-)\n. Good job everyone!\n. So @danny-andrews, would you help us out?\n. At this point only major and CST related bugs will be fixed.\n. Moved to 3.0 branch\n. > coveralls still showing wrong coverage: https://coveralls.io/builds/4154949/source?filename=lib%2Fjs-file.js#L865\nand\n\"All checks have passed\"?\n. Fair enough, i pinged @mdevils about it, as he is maintainer of the unit-coverage tool\n. You would need to add tests for TokenAssert#noTrailingSpaces method, not to the rule that use it, although having tests for rule is also good\n. > yeah but at the moment something is in\n\nthe wrong place.  is it a.  the tests or b.  the code\n\nNot sure what do you mean by that, if you move tests in other file nothing will change.\n\nits a bit harsh that fixing a bug needs me to refactor one or the other...\n\nNot exactly, if in the future, rule disallowTrailingWhitespace will be removed, TokenAssert#noTrailingSpaces method will be left untested. Or if there will be a bug in the TokenAssert#noTrailingSpaces developer will see rule failure not of the method.\nThis is more strict testing policy, i give you that, but more maintainable. \n. Other rules could use that method, that is why it is in the common place\n. We can probably move this logic to the _fix property, note that token-assert module was introduced before the _fix.\n. We already use two ways of autofixing - token-assert and _fix property, i would rather not introduce the third one.\nWould you mind moving your autofixing logic to _fix, like that - https://github.com/jscs-dev/node-jscs/blob/ec8c0b0eda7cc1aa427c1a6c77ded42adab39c8c/lib/rules/validate-quote-marks.js#L136-L141 and https://github.com/jscs-dev/node-jscs/blob/ec8c0b0eda7cc1aa427c1a6c77ded42adab39c8c/lib/rules/validate-quote-marks.js#L146-L151?\n. > All tests and fixes from #1978, #1979, #1980\nSo we don't need those pulls? We can just land this one?\n. Postprocessing would be nice for it, but it kinda contradicts the idea of using AST/CST/tokens or parser itself. I'm not sure why we would need to go this way if we have such powerful tools already.\nAs of the modifying tokens or AST with _fix, it is not hard, for example, for the file like that -\njs\nvar a;\\n\nYou will have following tokens array (with couple of our extension btw) - \njs\n[ Token {\n    type: 'Keyword',\n    value: 'var',\n    start: 0,\n    end: 3,\n    loc: SourceLocation { start: [Object], end: [Object] },\n    range: [ 0, 3 ] },\n  { type: 'Whitespace', value: ' ', isWhitespace: true },\n  Token {\n    type: 'Identifier',\n    value: 'a',\n    start: 4,\n    end: 5,\n    loc: SourceLocation { start: [Object], end: [Object] },\n    range: [ 4, 5 ] },\n  Token {\n    type: 'Punctuator',\n    value: ';',\n    start: 5,\n    end: 6,\n    loc: SourceLocation { start: [Object], end: [Object] },\n    range: [ 5, 6 ] },\n  { type: 'Whitespace', value: '\\n \\n', isWhitespace: true },\n  { type: 'EOF',\n    value: '',\n    range: [ 9, 10 ],\n    loc: { start: [Object], end: [Object] } } ]\nSo, you can just modify the Whitespace tokens, for which, we already have helper functions like setWhitespaceBefore, without introducing additional complexity to the system like post processing \n. Yeah, that is why i said that post processing is nice for such cases, but AST/CST/tokens exist to simplify any approach for modification or search of specific patterns, whitespaces are not that different from token Punctuator or VariableDeclarator AST node.\nWe don't use regexps so we wouldn't duplicate parser efforts and work not with source but with its representation of it. Which is much simpler approach in the long run.\nOf course, i might be wrong, so in order to be sure. Let's ask other maintainers.\n@hzoo, @mrjoelkemp, @mdevils thoughts?\n. > I guess we just need to decide what we want to do while we move to eventually use the CST to check/fix in 3.0 #1854\nNot really CST related question, post processing source output with regexps still could be a viable option with any representation of the code\n. > I understand this is a closed issue, but did it get resolved?\nWhat do you mean? There is no bug here\n. You are welcome to give a try :-), for both proposals \n. Would you mind adding rules documentation to your pulls?\n. Yep :)\n. >  Coverage decreased (-0.05%) \n?\n. You can check it out by running \nbash\nnpm run coverage-html && open coverage.html\n. > That throws an ugly error on my machine.\nCould you post the output? \n. > Sure:\nDoes this happen for you on clear master? What OS do you running this on?\n\nStill, isn't it normal to get a lower coverage since configuration.js got a new line of text?\n\nI don't see coverage drop for configuration module, there is, however, only 80% for the disallow-spaces-in-generator.js - https://coveralls.io/builds/4163102/source?filename=lib%2Frules%2Fdisallow-spaces-in-generator.js\n. @mdevils seems as an issue with unit-coverage, could you check it out?\n. > I don't understand why that is, the disallowSpacesInGenerator is almost identical to requireSpacesInGenerator and has double the tests since I check each of the 2 params set to true separately.\nOh, yeah, that is because require rule covered even more poorly, on 69%  :/\n/cc @hzoo \n. Okay, so i added supported commit in which i removed some unused logic, increased coverage to 100%, fixed one bug, changed logic a bit.\nThose issues are still present in the opposite rule though.\n. Nothing, it is landed.\nIf you like, you can port https://github.com/jscs-dev/node-jscs/commit/2b6a93cb0afed0b4bd401bb626f4aeca17f32681 commit to the require rule.\n. Will throw for empty if -\n``` js\nfunction test() {\n    if (true) {\n    } \n}\n```\nWill fail for if...else without the function scope - \n``` js\nif (true) {\n    return\n} else {\n}\n```\nWill fail if last statement is not a return but return is present in the if body -\njs\nfunction test() {\n    if (true) {\n        return\n        eval()\n    } else {}\n}\n. Aside for couple minor things, it seems we are good to go\n. Awesome work!\n. Thank you the for changes and perseverance! \n. At this point only major and CST related bugs will be fixed.\n. Would you mind providing the code example?\n. Could you clarify? I'm not sure what do you mean by that.\n. Can't repro with this example -\njs\n/* eslint new-cap: [2, {\"capIsNewExceptions\": [\"DropTarget\",\"DragSource\"]}] */\n<div className=\"flex-card__header\">{this.props.children}</div>;\nand .jscsrc like that - \njs\n{\n    validateQuoteMarks: { \"mark\": \"'\", \"escape\": true, \"ignoreJSX\": true },\n    esnext: true\n}\nWould you mind posting full content on https://gist.github.com?\n. Can't repro\n. Thank you!\n. Yeah, all because of the escope package which can't work with babel AST :/\n. Yeah, bunch of issues with inability of escope to work with circular structures :/\n. Basically, if parser generates AST with circular refs escope will go down, but the sad part is, no one of the maintainers of that package is interesting in fixing it :/\n. @gibson042 sure, but we don't parse ourselves\n@hzoo underscore is meaningless :/\n. At this point only major and CST related bugs will be fixed.\n. Wanna try to tackle this bug?\n. Would be cool to have, would you like to try to implement it?\n. We have more or less extensive guide - https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md, but whole architecture of jscs is pretty simple.\nNevertheless, if you have any questions don't hesitate to ask\n. If your console statements are in some parts of the tests, they might be omitted, due to stubbing - https://github.com/jscs-dev/node-jscs/blob/365569a60bb6b908f27b151f55a9b0d9418fdfd8/test/specs/cli.js#L27-L28\nBut it is probably not your case. Hard to come up with the other hypothesis without seeing any code, as you might imagine. For most cases console output should be there.\nnode-inspector or iron-node might be useful, but usually not as much.\n. Send us a pull request and we will go from there\n. github has a limit for this page, which is hundred, we have more then a hundred contributors, so anyone else that has less then couple commits might not gonna appear there.\nIn other words, just send us another PR :-).\n. Would you like to try to fix it?\n. At this point only major and CST related bugs will be fixed.\n. Thank you!\n. Would you like to try to fix it?\n. Feel free to create a ticket about this with or without accompanied pr.\n. > jscs is included because jscs-jsdoc apparently now requires it as a peerDep.\nSo to be dependant on itself o_0?\n. Okay, talked with @zxqfox, we decided to remove that peer dep, we will land this right after the release of the jscs-jsdoc 1.3.1 and push it up with jscs 2.7.\n. Can't repro this, would you mind posting jscs --verbose output and your config?\n. Oh yeah, that because of the strict mode.\nWonder what we should do here.\n@janpieterz thoughts?\n. It is common practise to name \"classes\"  in JS with uppercase, but that would be \"PascalCase\" naming convention which strict mode disallows.\nYeah, we can allow using first uppercase letter with new operator, but new is often optional operator. \"classes\" could defined in way that allows be invoked without it.\nWe can also try to omit all expression statements.\n. How about right now, we just would check the new keyword and omit such warnings? And see how it would go from there.\nHow is that sound?\n. > Wouldn't it be easier to ignore function/constructor calls entirely and flag them only at the declaration? Since the calls must match the declarations, it's better to flag the source of the problem (declaration). And if you ignore it for a single function, you don't have to ignore it at each call.\nOr flag both cases, but only if we find a declaration? Since you still would wanna know where do you use such naming after renaming of the \"source\"\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. @kobezzza Would like to try to tackle this bug?\n. Friendly ping\n. At this point only major and CST related bugs will be fixed.\n. Would you mind running jscs --verbose, without the --fix flag and posting the result? Your .jscsrc config would also be helpful.\n\njshint@v2.7\n\nYou meant jscs, right?\n. Having troubles opening that archive, would you mind posting your config to https://gist.github.com/ ?\n. Yeah, it is a babel (enabled when esnext option is used) issue :/, it removes the backslash - http://astexplorer.net/#/658X2gkWBg from tokens list, whereas esprima (enabled when esnext is not used) do it correctly - http://astexplorer.net/#/aKoWHrenCG.\nYou can try removing esnext option from your config, esprima support most of the es6 features nowadays, but still might be incomplete.\nCreated a ticket in the babel tracker - https://phabricator.babeljs.io/T6833.\n@hzoo can you draw attention to this issue?\nSince there is nothing we can do on our side, i'm closing it.\n. That's because null is not a keyword it is a literal, you would need a special rule for that.\nIf you would like to implement it, let us know\n. /cc @zxqfox \n. At this point only major and CST related bugs will be fixed.\n. Sounds good to me, pr welcome\n. Friendly ping\n. > As it turned out, proposal conflicts with http://jscs.info/rule/disallowQuotedKeysInObjects and my understanding is that rules should know nothing about other rules and properties to keep things simple.\nIf you would disable it, it wouldn't ;).\n\nWhat's interesting is that requireCamelCaseOrUpperCaseIdentifiers doesn't validate quoted keys/properties as of now, which one might consider as bug\n\nSounds like it\n. > Sounds like it\nAlthough it more like a behaviour specialty, not necessary a bug. \nOkay, so feel free to send/open an issue/pr for disallowQuotedKeysInObjects, note though, that you would need to add snake_case to allExcept value\n. @TheSavior would you mind checking it against your code?\n. Sorry for the late response.\nHow about\njscs src --fix --preset=\"@foo/jscs-preset-foo/foo.json\"\n?\n. At this point only major and CST related bugs will be fixed.\n. /cc @oredi\n. btw, @galvarez421 you are welcome to try to fix it yourself, might be faster that way\n. Don't know, it could be\n. > Although this is putting if rules are fixable rather than not - #2014\nWhy?\n. I think no, since this pull is pretty old and i'm would go other way around with it\n. We would need this pull to be updated then, although i'm still not sure why it can't be other way around\n. > my point is that it's already done\nSunk costs fallacity\nafter fourth months it needs to be reevaluated anyhow, which means you have go through all the rules again and jscs has more rules that are autofixable then not\n. I'm not sure if all rules that right now marked as fixable are indeed fixable, some rules didn't have any autofix tests, since they used tested versions of general methods, but with 3.0 rewrite we heavily change every single rule with removal of general methods and for some introduced _fix method.\nPlus we need to account for new rules.\n. Feel free to implement allExcept option, like, for example, in http://jscs.info/rule/disallowSpacesInsideParenthesizedExpression\nAlso, check out - https://github.com/olov/ng-annotate\n. At this point only major and CST related bugs will be fixed.\n. Thank you!\n. Hey Karl, fancy meeting you here :-).\nSo there is our culprit - https://github.com/tvcutsem/harmony-reflect/blob/e66cbac79158b6e32c65e67b53a79d094d24dced/reflect.js#L1632-L1636, i guess now it is pretty much self-explanatory.\nWe shouldn't use an object there to identify our exception anyway.\n. Thanks, hope to see you too :-).\n. LGTM\n. > Coverage decreased (-0.01%) to 99.291%\n?\n. Totally forgot about that ticket, can we introduce allExcept instead of adding two new options?\n. Yeah, you probably right, do you want to send us a PR?\n. By looking at the code, it seems there is a commit that shouldn't be there, probably landed by mistake :/\n. Even though logic is flowed, it actually works correctly from the console, i clean up the code though.\nThank you for noticing. \n. Well yeah, it is called \"checkString\" for a reason :-), it doesn't deal with paths, second argument is need just to tell the reporter where is the violation. In other words use \"checkPath\"\n. Hm, will you able to send us a pr? I suppose we can do that, if that is really needed. Would want you to create some hacks in your app, instead of just using it\n. It totally is! By looking at the code, it is not ideally implemented, one might say - badly implemented.\nDo you wanna try to fix it?\n. Judging by name of the option, i'd say it would be okay to make those changes.\nHappy Christmas btw!\n. That is actually a cool thing that happens, when you executing jscs from the console, it goes through shell, say bash for example, which parses the stdin, so bash parses the input, not jscs, not node, but shell, which unfolds that wildcard.\nBut with spawn, you bypass the shell part, so there is nobody who doing this job anymore.\nAnyhow, primarily, you have two options - either use exec or unfold that pattern yourself.\n. Please use english next time.\nmaster is fine, 3.0 changes eventually will be merged to master\n. Sweetsauce!\n. Hey John, will check it out asap.\n/cc @zxqfox\n. Don't see any errors :/. So okay, what node version? Did you try to remove node_modules?\n. Nice one, thank you\n. Oh, cool, will revert\n. @hzoo should know about it, since he did the decoration\n. > Coverage decreased (-0.001%) to 99.327%\n?\nAlso, would you mind adding example for this param?\n. Thank you!\n. Sounds like we should add an option for this, would you like to implement allExcept for this rule?\n. See example - http://jscs.info/rule/disallowSpacesInsideParenthesizedExpression.html\n. Yep - https://contribute.jquery.org/style-guide/js/#spacing, but i agree, that is seems pretty esoteric and could be accomplished by other rules.\nSo i'm fine implementing this behaviour by default.\n. I think we can make this as a default behaviour, if jquery followers would want such style, they could use different rules for that\n. /cc @zxqfox \n. At this point only major and CST related bugs will be fixed.\n. Hm, didn't happen for me -\nbash\nmarkelog in ~/Workspace/react_on_rails on (HEAD detached at eac2a29)*\n$ git status\nHEAD detached at eac2a29\nnothing to commit, working directory clean\nmarkelog in ~/Workspace/react_on_rails on (HEAD detached at eac2a29)*\n$ jscs -x node_package/tests/buildConsoleReplay.test.js\nmarkelog in ~/Workspace/react_on_rails on (HEAD detached at eac2a29)*\n$ git status\nHEAD detached at eac2a29\nnothing to commit, working directory clean\nmarkelog in ~/Workspace/react_on_rails on (HEAD detached at eac2a29)*\n$ node -v\nv5.1.0\n. It seems config is okay. Can you try to reinstall your modules? And post version of the node.\n. > Should I first update to node latest?\nNo, it should work from node .10, i'm asking about the node version, so i would repro it\n\nDid you pull my project and run jscs -x?\n\nYeah, you can see my actions at the comment - https://github.com/jscs-dev/node-jscs/issues/2043#issuecomment-168161191\nHappy new year btw!\n. Okay, keep us posted if you see anything :)\n. Thank you!\n. It totally should, would you like to implement it?\n. We didn't do it before, but i don't see a reason why we can't :-)\n. > It is OK\nI'd say yes, but we need to structure it with low cyclomatic complexity \n. Sounds like a different rule, would you like to implement it?\n. It should be working for home dir, we have tests for it, i will verify this.\n\nI also noticed there's a presets option but I'm not sure how to add my preset in there if that's the way to go.\n\nCheck this out - https://github.com/jscs-dev/node-jscs/wiki/Creating-a-Custom-Preset-or-Config\n. It does work from dir, what is your system?\n. Thank you for noticing :-)\n. /cc @zxqfox \n. At this point only major and CST related bugs will be fixed.\n. > { \"allowBeforeComment\": true }\nallExcept: ['beforeComment'].\nFeel free to send a pr\n. /cc @zxqfox \n. Wow, didn't even know you could do that. \nLGTM\n. Oh right, we need the same action for disallowSemicolons )\n. When prop without semicolon will became a valid syntax that is\n. @michaelficarra\nReally?\n\nsemicolons are required always. \n. Don't see any clarification on the ASI in original link i provided, but judging by the interesting original discussion and rules of ASI you should be right.\n\nWhich means babel pr was indeed falsy (not this pr though) and that we can add same opposite logic to disallowSemicolons rule.\nThanks for playing!\n. Don't see any clarification on the ASI in original link i provided, but judging by the interesting original discussion and rules of ASI you should be right.\nWhich means babel pr was indeed falsy (not this pr though) and that we can add same opposite logic to disallowSemicolons rule.\nThanks for playing!\n. Sorry, was preoccupied lately, check this out - https://twitter.com/jscs_dev/status/694073841568583682\n. > Coverage decreased (-0.02%) to 99.308%\nYou need to add tests\n. Totally okay, just bring it up\n. Nicely done, thank you!\n. Could you add test-case for https://github.com/jscs-dev/node-jscs/issues/1946 ?\n. And https://github.com/jscs-dev/node-jscs/issues/2002\n. I see we all DONE here, just don't forget the git conventions (sorry :-)\n. I guess @mdevils is a rebel!\n\njust don't forget the git conventions (sorry :-)\n. We can leave allExcept, but i think function should be there by default, what do you think?\n. Awesome, thank you!\n. > Could the autofix feature be implemented for this rule? \n\nFor realsies! Wanna do it?\nCheck out similar rule, like https://github.com/jscs-dev/node-jscs/blob/6ca665fe7068d3a1e7a6e4787a77c757802388b8/lib/rules/disallow-padding-newlines-after-blocks.js\nThis is the kicker - \n``` js\nerrors.assert.linesBetween({\n    token: endToken,\n    nextToken: nextToken,\n    atMost: 1,\n    message: 'Extra newline after closing curly brace'\n});\n```\nlinesBetween will automatically will do all the fixing, you just need to pass right arguments to it.\n. validateIndentation rule doesn't work for this kind of indentation - http://jscs.info/rule/validateIndentation\n\nValidates indentation for switch statements and block statements\n\nI guess you can detect and fix indentation in  validateNewlineAfterArrayElements rule, which might not be trivial \n. If you would be champion of it, it would be great! We would really like to improve our indentation situation.\n. Yeah, sure, ping us up in gitter or at the github if you would have any questions\n. Yeah, jsdoc plugin requires some love\n. /cc @zxqfox \n. At this point only major and CST related bugs will be fixed.\n. Well, yeah, requireSpaceAfterKeywords conflicts with pre-defined rules in google preset, so you need to disable them.\nAnd since their conflict with each other, --fix will always give different output\n. @hzoo LGTY?\n. @pabigot Nicely done! note @gibson042 comment, that is the high praise :)\n. Would you mind adding basic tests for autofixing? See example - https://github.com/jscs-dev/node-jscs/blob/c704e9e0713c5462a61dac309a6e6abd30098545/test/specs/rules/disallow-semicolons.js#L68-L74\n. Friendly ping\n. Yeah and congrats on your first contribution! \n. Be sure to send doc update to the airbnb folks\n. It should be in 3.0 though!\n. With autofixing too\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. Sounds like require and disallow rules.\n@pabigot wanna do it?\n. Hm, weird, it gives me the correct position, what would happen if you execute this line with node?\n. I would ask you to change parsers right after verifying we see the same thing, okay, so it seems it is a esprima bug - since it is pretty much nothing we can do on our side, i can just only recommend to use babylon i.e.babel-jscs for now and /cc @ariya \n. In other words, we would welcome the pr from you :-)\n. https://github.com/jscs-dev/node-jscs/pull/2089#issuecomment-179094387\n. There might be a lot of things that could affect it. Do you have .editorconfig/.gitattributes file? What mode enabled in sublime? You can see it with view -> line edings\n. Sorry, can't reproduce, feel free to check out the code, we would welcome the pr, if error is indeed there\n. Would you mind showing exact reference to airbnb code style (i.e. on https://github.com/airbnb/javascript) for every change you have made?\nAlso, tests are falling, we would need to fix that \n. Friendly ping\n. Ping us up, if you would like to finish it\n. Sounds like a different rule to be honest, since this - \n\nYou should declare them as close as possible to their point of first use.\n\nIs still looks debatable, especially given that in many languages you also can't use variables before they were initialized, but they still follow convention of defining all used variables at the beginning of the subprogram, in other words, some people might find current behaviour appealing.\nHaving said that do you want to add such rule(s)?\n. Ping us up, if you still interested\n. Awesome, thank you!\n. It works as expected - https://github.com/jscs-dev/node-jscs/blob/72f9cb5ce85fb6a2fa737a791e8227de79b743cf/test/specs/rules/disallow-nested-ternaries.js#L12\nJS is confusing sometimes :)\n. Oh, i see what you mean, yeah, pr welcome\n. Friendly ping\n. Would you mind rephrasing? I don't understand what \"JSHint compiles\" means and how it is related to JSCS.\n. What do you mean by \"compiles\"? Still not sure what do you mean...\n. Ping us if it's still an issue\n. It seems you have two rules which conflicts with each other, i'm not sure what we can do about that.\n. > We'd need both rules, no way to make one winning on the other?\nNo, your config shouldn't consist with conflicting rules\n. > cc @markelog we should modify the https://github.com/jscs-dev/node-jscs/issues/new url to pre-fill with an issue template.\n:+1:\n. At this point only major and CST related bugs will be fixed.\n. See http://jscs.info/overview#versioning-semver\n. So what do you propose?\n. Feel free to send us a pr for it\n. Sounds good!\n. Yay!\n. Okay, it seems question is answered, ping us up, if i'm wrong\n. It is hard to understand what is the \"key\" in this situation, if are strict about it it seems @alawatthe is right, but neither rule has been expected to handle such cases nor it logical perceivable.\nAnyway, looks as a bug to me, i think there is no need for option, it could be handled by different rule.\nTo echoing @alawatthe question - @sholladay would you like to fix it?\n. At this point only major and CST related bugs will be fixed.\n. http://jscs.info/rule/requireSpaceAfterBinaryOperators and http://jscs.info/rule/requireSpaceBeforeBinaryOperators\n. Can't repo it, would you mind posting your .jscsrc config and give a link to your file or part of it (if you can)?\n. Okay, ping us up, if you still facing the issue\n. Hm, what version do you use?\n. Try to update to 2.9 version\n. Okay, thanks\n. It seems there is couple failures? \n. Tests and rebased myself, all good.\nThank you!\n. Seems as \n\nIs strict truly strict even in the case of UPPER_CASE\n\nShould be true, i see in docs note about it though - \n\nstrict: boolean that forces the first character to not be capitalized\n\nWhat kind of clarification do you think is needed?\n. At this point only major and CST related bugs will be fixed.\n. Awesome!\n. @hzoo so we can close this, right?\n. Ping us up, if you would try to fix this\n. Thank you!\n. Thank you!\n. > I understand jscs can point out issues and can automatically fix files. Is there any way to e.g. get all issues with a unified diff appended as JSON or something?\nYou mean output the ast structures? \n. Sorry, forgot about this one.\n\nThe rule it violates\n\nThat is basically running a jscs without --fix flag\n\nThe information on how to fix it.\n\nOnly link to the docs of specific rule is suited here i guess.\n. Did you made any progress?\n. At this point only major and CST related bugs will be fixed.\n. Looks good!\n. Thank you!\n. /cc @lahmatiy if you still care :)\n. At this point only major and CST related bugs will be fixed.\n. Thank you for the clear example, we will investigate.\nRight now you can workaround this either with max-old-space-size node option or processing files sequentially.\nIf you come with the fix, that would be cool too :)\n. At this point only major and CST related bugs will be fixed.\n. Thanks!\n. Would you like try to fix this?\n. Nope, this still should be reproducible, right now, this rule basically checks that if some function called $ then result of it should also starts with $\n. Hm, yeah you right, apparently rule stop checking when it detects chaining, which is not ideal, but i guess enough to close this ticket \n. Can't repro, the error is shown for every case. Try to reinstall the jscs and make sure this rule is enabled\n. LGTM\n. Thank you!\n. > Coverage decreased (-0.002%) to 88.698%\n?\nYou check the coverage by running \nshell\nnpm run coverage-html && open coverage.html\n. Had issues with rebasing it against 2.x branch feel free to create one for 2.x\n. Thank you\n. Thanks\n. Hm, maybe requireNewlineBeforeSingleStatementsInIf name could be more explanatory?\n. > Could also allow options to work with if/else, for etc...\nI think we can consider using different rule for that?\n. Fix for it will be released with 2.11 i.e. monday, working on it for 3.0, this is why this issue still needs to be open\n. It seems there is a jshint issue there?\n. Oh, yeah, sorry about that, anyway, merged, thank you!\n. At this point only major and CST related bugs will be fixed.\n. Monday\n. Waiting for pr, pushing to Tuesday\n. At this point only major and CST related bugs will be fixed.\n. Sounds good, would you like to implement it?\n. Yeah, sounds like an easy fix\n. Indeed\n. What about assignment cases?\n. This pull fully covers the return cases i.e. #2073. I'm asking if you would like to fully implement the \n``` js\n// bad\nconst [left, __, top] = processInput(input);\n// good\nconst { left, right } = processInput(input);\n```\nFrom https://github.com/airbnb/javascript#5.3.\nOr maybe just detect and forbid array destructuring en masse.\n. When i think it of it of thoroughly, isn't this rule forbids any return statement with array value, without any check if that value is used in destruction assignment?\nIt seems check for assignment is mandatory and even should show the error only for assignment.\n. If in different modules then we are out of luck (actually, not really, but it sounds a bit complicated to implement for one rule), but we can \"easily\"  detect such violations if both assignment and FE is in the same rule.\n. >  whilst when we can detect only a function  - show error for return statement?\nThe thing is, if function returns an array, it doesn't mean it would be used in destructuring assignment.\nSo we can show error only for the assignment.\n. Also, we were thinking to release today, but we can push it, if you intendent to finish this soon\n. Ready for review?\n. Thank you!\n. Some people used it with desktop app, without firing up the node, not sure if it makes sense now though...\n. Why this was closed?\n. Nuh, but let's do this\n. Sounds good!\n. requireShorthandArrowFunctions is good but disallowParenthesesAroundArrowParam isn't, since that rule is strict, whereas this -\njs\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  return `A string containing the ${nextNumber}.`;\n});\nis allowed.\n/cc @hzoo \nThank you!\n. > But I think if you ctrl f for browser there's probably more\n\nlike jscs-browser.js in gitignore, jshintignore, deleting from comments\n\nOh yeah, good catch\n\nDoes that mean we can remove this.registerRule(require...?\n\nIt sure does!\n. It seems we just need to stop releasing 2.x\n. Not all tests are passing in 3.0 at the moment\n.  \"unstable master approach\" is popular in some workflows or at the transition periods, this is the latter\n. At this point only major and CST related bugs will be fixed.\n. That is disallowSpaceAfterComma not the require one\n. All trailing comma code is legit js, this is a comma and it is trailing\n. We don't accept new features at this time :/, see https://medium.com/@markelog/jscs-end-of-the-line-bc9bf0b3fdb2 and http://eslint.org/blog/2016/04/welcoming-jscs-to-eslint for more\n. Updated tests a bit, thanks\n. At this point only major and CST related bugs will be fixed.\n. Works for me \n. Awesome, thank you\n. You mean signature? It's the same as in DOM replaceChild\n. Yeah\n. Yeah, it is generally not a good idea to have two conflicting rules\n. This sounds like a custom rule to me, would be confusing otherwise\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. Thank you!\n. We use https://github.com/sindresorhus/to-single-quotes package for fixing this, you probably should open an issue there instead\n. Would you like to implement it?\n. Do you have code example?\n. Do you have code example?\n. it seems requireNewlineBeforeSingleStatementsInIf rule doesn't work with single if branches, i added a guard for it, but it seems it should also warn for that case too -\njs\nif (err) throw err;\n/cc @schempy\n. @stupidisum you probably need to update jscs\n. Would you like to implement it?\n. Hey, happy vacation! :)\n. Thank you\n. Beautiful, with CST that thing really takes shape!\n. I think we should fix this on the cst side, can you port your changes over there?\n. I'm thinking if that happened in this case it should happen elsewhere too\n. So what do you think? Still wanna do it here, regardless?\n. It seems there is a jshint error?\n. Friendly ping\n. It seems we still have couple failures?\n. LGTM\n. Judging by the travis log, it seems we need to increase the test timeout?\n. > Means that the tests were taking < 3 sec and now > 15 which is pretty bad and something we certainly need to investigate?\nDefinitely! /cc @mdevils \n. Can't repro, would you mind testing it on current master? If this indeed reproducible, can you provide more code?\n. At this point only major and CST related bugs will be fixed.\n. Duplicate of https://github.com/jscs-dev/node-jscs/issues/2168\n. Thanks\n. At this point only major and CST related bugs will be fixed.\n. Should work with 3.x\n. /cc @zxqfox \n. So is this still valid?\n. At this point only major and CST related bugs will be fixed.\nYou however open ticket on https://github.com/jscs-dev/jscs-jsdoc and keep pinging @zxqfox\n. Didn't fix the build, but fixed the tests, thanks\n. From http://jscs.info/rule/validateIndentation\n\nValidates indentation for switch statements and block statements\n. > When you say \"Validates indentation for switch statements and block statements\" you mean this is a jscs limitation won't be fixed?\n\nWe have tickets about this - https://github.com/jscs-dev/node-jscs/issues/1866, so if anyone has the time to implement this, it would be most appreciated.\n. huh?\n. > \"/**\",\nYou probably need to removed the first slash\n. At this point only major and CST related bugs will be fixed.\n. We use https://github.com/sindresorhus/to-single-quotes package for fixing this, you probably should open an issue there instead\n. Wow, if everything works, that would be an impressive one!\n/cc @mdevils \n\nBad response: 422 {\"message\":\"Couldn't find a repository matching this job.\",\"error\":true}\n\nYou probably force-push at some point, which what happens, i.e. totally okay.\n. @schempy you are the man! Thanks\n. That was fast! @schempy could you check it out?\n. Well, that's is incorrect syntax, while from you link, for the case - \njs\nvar o = {\n  set current (str) {\n    this.log[this.log.length] = str;\n  },\n  log: []\n}\nI don't see any errors, which is what to be expected?\n. Works for me\n. Don't see this in their code style, sorry\n. Fair enough\n. Landed! And thank you for the persistence. \n. Tests?\n. Can't repro - \nsh\n$ echo \"alert(1);\" > test.js\n$ jscs test.js --preset airbnb\n$ jscs --version\n2.11.0\nCheck how you execute the jscs\n. Yeah, i'm checking, thank you\n. So, okay, this rule was merged to master and airbnb preset also has it, but only in master.\nSo how you doing that?\n. > cat /usr/local/lib/node_modules/jscs/presets/airbnb.json | grep -i 'requirePaddingNewLinesAfterBlocks\"'\nIsn't this command the same in both your examples, so how could you have different results for the same command?\n. Okay, so why you surprised by this output? requirePaddingNewLinesAfterBlocks is in the preset, while requireSpacesInsideImportedObjectBraces isn't - https://github.com/jscs-dev/node-jscs/blob/2.x/presets/airbnb.json \n. > Repo https://registry.npmjs.org/jscs/-/jscs-2.11.0.tgz has incorrect preset for airbnb :(\nand \n\nRule not found. And default preset working correct.\n\nI'm confused, so is there something that not needed to be there or not?\n. Yep\n. > It's ok?\nYeah, presets from master depends on code from master and 2.x presets depend on 2.x code. Not sure what could be confusing about that.\nLike if you would use module of say express package from their master whereas you installed 3.x version you woudn't expect it to work.\nThis use-case is strange all the way.\n. Have no idea what you talking about\n. Did you check it with master?\n. Ping us up if this behaviour is present in master.\n. /cc @mdevils \n. At this point only major and CST related bugs will be fixed.\n. We only interesting in style concerns, if you have improvement in mind please send a pr\n. ping us up if you still has this error\n. Hm it is weird it doesn't work with https\n. @mdevils could you check it out?\n. Thanks for clarifying \n. There is lot of different errors here and they about different things, like \njs\nexport function myFunction ({ foo = false, bar = null } = {}) {\n    console.log(foo, bar);\n}\nIs https://github.com/cst/cst/issues/118\nstatic properties is about - https://github.com/cst/cst/issues/112 \nAnd so on.\nAfter https://github.com/cst/cst/pull/116 and with https://github.com/jscs-dev/node-jscs/commit/729db94f86902496f3962a4a97bdd91a75ab5514, errors will be outputted in a friendly manner\n. Well it isn't one, it is by design, we can add exception for such rule though, since it is looks weird yeah :)\n. Can't repro - \nsh\n$ echo 'requireObjectKeysOnNewLine: true' > .jscsrc\n$ echo 'module.exports.someObject = {\n  property1: 'property1',\n  property2: 'property2',\n  method1() {\n    // Do some stuff\n  }\n};\n' > test.js\n$ jscs test.js\n$ jscs --version\n3.0.3\n. > I can't run JSCS on a file which contains an object with a property which contains a huge string of hardcoded html content.\nDoesn't sound like memory leak to me, it just takes a lot of memory for big file. We can check out some example if you post it somewhere (please not here). \n\nAlso I have to mention that there are a // jscs:disable line in the top of this file, so I wonder while JSCS tries to parse the rest of this file.\n\nIt finds errors regardless of inline pragmas, just removes it from the error list\n. Wouldn't call it as a bug but enhancement, but that would be enhancement on cst side and cst package is fully supported\n. Replaced with https://github.com/cst/cst/issues/113\n. It does work in current master\n. CST doesn't use babel it uses babylon and CST uses last available version.\nNot sure what to update there\n. How does it looks like on the site?\n. You probably can remove Try JSCS Online (Coming back soon!) too :)\n. /cc @mdevils \n. At this point only major and CST related bugs will be fixed.\n. Sorry it is not unclear what file are you trying to lint here\n. @zxqfox are you on it?\n. Nope that was the point - always show the error, rule property only for the convenience \n. What version?\n. jscs-doc is included to jscs, so just remove it from the deps\n. /cc @mdevils \n. Really sorry, we do not accept new features at this time :/.\nSee https://medium.com/@markelog/jscs-end-of-the-line-bc9bf0b3fdb2#.jsnhpxsjz\n. > can this be fixed by updating cst to 0.2.0?\nIt totally can :)\n. I guess.\n@mdevils thoughts?\n. Is jscs-jsdoc included in your deps?\n. \"plugins\": [\n    \"jscs-jsdoc\"\n  ]\nYeah, this is redundant, jsdoc is jscs dependency for some time now, just remove it - should work fine without it\n. Just run jscs --preset airbnb on \njs\nconst flat = {};\n[[0, 1], [2, 3], [4, 5]].reduce((memo, item, index) => {\n  const flatten = memo.concat(item);\n  flat[index] = flatten;\n  return flatten;\n});\nDon't see any errors. With those three rules i also don't see any contradictions.\n@petrelselina i'm gonna close this for now, please ping us up if you find any bugs, thank you\n. Need to add support for this in cst first - https://github.com/cst/cst/issues/117\n. Need to add support for this in cst first - https://github.com/cst/cst/issues/117\n. Fixed via a215e672ad76270881bfc7252a954762119c48a3\n. Yeah, different representation of the same thing, everything would work correctly with the -x flag aka enabled autofix though\n. Replaced with https://github.com/jscs-dev/node-jscs/issues/2246\n. Oh yeah, sorry, indeed i meant cst/cst#113\n. Perhaps things get more clear if you would read issue description?\n. /cc @zxqfox \n. At this point only major and CST related bugs will be fixed.\nYou however open ticket on https://github.com/jscs-dev/jscs-jsdoc and keep pinging @zxqfox \n. Can't repro [const1, const2, , , const3]; shows errors as expected, we also have tests which proves it - https://github.com/jscs-dev/node-jscs/blob/2cdb26d172fc8e19779dffcbab88ca8ab8f06fb9/test/specs/rules/disallow-space-after-comma.js#L58\n. What version do you use? Also need a code example\n. So i see - you using spread operator on objects which is es7 feature, need to add support for it in cst first - https://github.com/cst/cst/issues/114\n. Duplicate of https://github.com/jscs-dev/node-jscs/issues/2244\n. > will the changes to CST eventually go in ESLint, when ESLint switches over to CST?\nTo note: that's an \"if\" and pretty big one :)\n. > Coverage decreased (-0.03%)\nI think we can live with that in maintenance mode \n. See https://github.com/cst/cst/issues/113 :/, right now i'm just comment them out\n. Code example?\n. Issues for gulp are over there - https://github.com/jscs-dev/gulp-jscs/issues\n. See https://github.com/cst/cst/issues/113\n. See https://github.com/cst/cst/issues/113\n. No\n. That is API design, you can easily mitigate this, also see https://github.com/jscs-dev/node-jscs/wiki/Exit-codes\n. At this point only major and CST related bugs will be fixed.\n. At this point only major and CST related bugs will be fixed.\n. Check it out - https://medium.com/@markelog/jscs-end-of-the-line-bc9bf0b3fdb2#.jsnhpxsjz\n. false is indented, but with spaces, when you want tabs. There is and there were many issues with indentation rules, but this is not one of them\n. Need a code example\n. Can't repro with this example\n. Hm, works for me, could you try again? If it still doesn't work would you mind creating separate issue about it?\n. To differentiate error types, see https://github.com/jscs-dev/node-jscs/wiki/Exit-codes\n. Replaced with https://github.com/cst/cst/issues/123\n. Fixed in cst repo \n. Wait until cst is updated in jscs, hence this ticket is still open\n. Those are different issues - you are talking about object method whereas original issue is about class method, created - https://github.com/cst/cst/issues/133 \n. Not 100% on this, but i don't think there is such workaround and at this point, we are not committed to adding new features, sorry\n. Well in that case, i.e. *.es2015.js, file extension would be .js, like \nrequire(\"path\").extname('test.a.b') would be .b. For example if you filename would be v1.0.js, extension should still be .js.\nYou can mitigate this by not linting the full folder, but using glob like jscs **/*.es2015.js\n. You can use globs in .eslintignore yes, if that is what you mean by \"supported\", but you can't use it with --ext flag.\nYou can use glob patterns with jscs from the command line\n. Decided to fix this a bit differently, would appreciate a second look though - https://github.com/jscs-dev/node-jscs/commit/0d027a7b4a95c7c349f57ffd37f10e497d66a5d4\n. It's not supposed to\n. I don't know man, everywhere i looked, like https://en.wikipedia.org/wiki/File_format#Filename_extension,  https://en.wikipedia.org/wiki/Filename_extension https://docs.python.org/2/library/os.path.html#os.path.splitext,\npath.extname of node.js, \nhttp://ruby-doc.org/core-2.2.0/File.html#method-c-extname,\nhttps://golang.org/pkg/path/filepath/#Ext\nand others... give me the same result\n. You can probably workaround it with something like this though - \njs\n\"excludeFiles\": [\"**/!(*.es2015.js)\"]\n. It should ignore all files which ends with .es2015.js\n. Oh shoot, typo there, it shouldn't ignore files which ends with  .es2015.js\n. Weird, works for me\n. Maybe you could illustrate it with test repo?\n. You need to remove shrinkwrap file\n. You probably need to reinstall your node_modules\n. Should be fine now\n. Would you mind checking it again?\n. > PS, this must be one of the first repositories of a large project that I've seen with 0 open issues \nThere is a reason for that :/, see \nhttps://medium.com/@markelog/jscs-end-of-the-line-bc9bf0b3fdb2 and\nhttp://eslint.org/blog/2016/04/welcoming-jscs-to-eslint\nWe are not adding new features at this time\n. ES6/ES2015 is mostly compatible with previous versions, \"ES6\" tag in rules docs means it works with new js constructions\n. You say you use latest version of jscs, but this error could only happen when requireSpaceBeforeDestructuredValues on older versions of jscs in which such rule wasn't introduced\n. See https://medium.com/@markelog/jscs-end-of-the-line-bc9bf0b3fdb2 and\nhttp://eslint.org/blog/2016/04/welcoming-jscs-to-eslint\nWe are not adding new features at this time\n. At this point only major and CST related bugs will be fixed.\n. Pretty sure facebook doesn't have public javascript code style, regardless, this is not implemented right and we are not adding new features at this time.\nSee https://medium.com/@markelog/jscs-end-of-the-line-bc9bf0b3fdb2, http://eslint.org/blog/2016/04/welcoming-jscs-to-eslint \n. I meant formal document for it, like \nhttps://google.github.io/styleguide/javascriptguide.xml\nhttps://github.com/airbnb/javascript\nsince linters are not yet at the point when everything could be defined through config.\nAlso i don't see it used, like: \nhttps://github.com/reactjs/react-router/blob/master/.eslintrc\nhttps://github.com/facebook/react/blob/master/.eslintrc.js (redefines it quite a lot)\nhttps://github.com/reactjs/redux/blob/master/.eslintrc\nare very different\n. Need a code example and jscs version \n. You still would need to update to the latest atom-jscs version\n. Replaced with https://github.com/cst/cst/issues/131\n. Should work now\n. I don't think so, if it's not on there we don't have it, sorry\n. Replaced with https://github.com/cst/cst/issues/132\n. This rule applicable only for call expressions, see - http://jscs.info/rule/requireSpaceBetweenArguments since those are not arguments those are parameters.\nYou want validateParameterSeparator\n. Hm, but apparently validateParameterSeparator doesn't notice class methods :/\n. I don't think we have the rule for this\n. Okay, it works\n. > @markelog Could it also auto-close all issues/PRs?\nThat's exactly what I asked before implementing it :) - no it can't, this bot works only on PRs too.\n. Nah, i think it is very possible, many OSS projects doing that, both auto-closing and leave comments in issues, its just limitation of the @eslintbot cause it was used only in ESLint repos since there is no need for those features in there\n. No, sorry, you still can do this with custom config or overwriting this rule on the project level\n. Just reinstall jscs\n. @nschonni force of habit, fixed, thank you.\n. Trailing space, perhaps jshint options should be augmented\n. Why did you named it?\n. what program.cwd || process.cwd() should accomplish?\n. Don't think we need that\n. Could you add test for this message too? I'm asking only because in previous iteration we had problems with it\n. I guess we should add requireSpacesInFunctionExpression to jscs config\n. maybe this.getCwd(cwd)?\n. > I really don't like using this\nDoes not matter that much, it's fine as is\n\ncan be dropped altogether \n\nyeah, we can do that, since it used only once now\n\nAnother option that I favour\n\nInteresting idea, but not for that type of module\nCould you also add test for the case when package.json exist but jscsConfig property isn't?\n. Thanks for that :-)\n. How about fs.existsSync here? And i think it would be better if we would exit at this point with appropriate message if such reporter does not exist or incorrect, then silently take a default one\n. we could show two different errors - if reporter does not exist or if it's incorrect\n. \"ERROR:\" remove that - it's inconsistent with other output and console.error not warn and as consequence of that - reject the promise \n. Nice refactoring\n. Cool idea :-)\n. @mdevils ?\n. You sort it again :-)\n. Why?\n. https://github.com/gustavohenke/grunt-jscs-checker/pull/33/files#r9999052 :-), plus it used by a lot of popular projects, but i guess is a matter of taste \n. https://github.com/mdevils/node-jscs/pull/265#issuecomment-36013475\n. Maybe we could move this after no-colors option\n. jscs --reporter <default reporter> and jscs --reporter <path to reporter with extension> already works\njscs --reporter <path to reporter without extension> - is not, and it shouldn't, at least right now\n. This is no longer needed\n. How about\njs\nreturn file.getComments().some(function(comment) {\n. It's better to do \njs\nerrors.add('Missing space before closing round bracket',\n    token.loc.end.line,\n    token.loc.end.column - 2\n);\nWould give more relevant result for this case\n. Do a rebase, you will see a couple of lint errors\n. Nitpick, why this is on the next line?\n. token.loc.end.column - 2 ) -> token.loc.end.column - 2), :-) i guess we should add this new rule to our config too\n. We should call this not \"bracket\" but \"parenthesis\". Only one assert for this option? Probably best to put tests for these options on their own describe's\n. alpha?\n. Wouldn't \"doc\": \"jsdoc -c jsdoc.conf.json\" be enough?\n. I thought to add the rule, but with required space :-), since we use it that way sometimes, but i guess it should another way around\n. Fixed, thank you!\n. Updated\n. Since vow now distinguish promise and defer let's return promise, does not make any real difference since defer is already rejected though.\nOr better yet, let's always return an object, tests for that would be nice to have too.\n. > I'm not sure why it would be better to return an object (with potentially infinite keys) rather than a single Promise value?\nFor tests and consistency\n\nEither way, would it be OK to change this in a followup, or do you want me to make the change here?\n\nHere please\n. Could you do that for every rule with this value?\n. > Ah, the type of requireSpaceAfterPrefixUnaryOperators should be describe \"Type: Array or Boolean\", not \"Type: Array or true\"\nThe thing is - for this rule and rules alike, true value is only possible boolean value, Boolean is a correct mark, but a confusing one, so it probably would be better to write \u2013  \"true value\" or just \"true\"\n. binaryOperators for this case\n. Don't use *stickedOperators rules they will be removed in the next version, for this case use requireSpacesInConditionalExpression instead\n. Why?\n. You just can defined true value instead, same is true for all unary rules\n. true value is applicable here as well \n. Right, confused it with requireSpaceAfterKeywords :-)\n. done\n. Don't know if that project follow the yandex code style, @tarmolov, @mdevils could help us out here?\n. Seems it would require more tests than that, also do we really need a whole file for this? Check this out \n. Why not true value?\n. Where is he say that?\n. ?\n. Not anymore, you would have to explicitly put it in the array to enable check for it \n. > I've removed the rule.\nAam, did you? Still see it in json and in test file\n. jscs bin should be declarative file only\n. Need to initialize this prop in constructor first\n. what about space between \"jscs: \" and its value?\n. Also, do we really need it? From the looks of it, modifying  _activeRules array from string-checker module would be easier and much faster\n. How would re-configuration of the rule would feet in that syntax?\njs\n//jscs requireCurlyBraces: [\"if\"]\nlike that?\n. +1\n. > Also, do we really need it?\nYes, we do :-)\n. Well, i already has retracted from that idea :-)\n. check for the last argument, not first\n. Do we really need do this, can't we stub this stuff?\n. sad artefact, could you do it in another commit?\n. Yep\n. Just as in test below you need to restore the method you are spying on \u2013 see \"Spying on existing methods\" in here\n. hm, it's already restored, by the time the test is done, so we don't need to do that ourselves\n. Please correct the indentation\n. Hm, i wonder why requireLineFeedAtFileEnd miss this file\n. scov?\n. This command produces the coverage.json file, when do we would need that command, should we add that file to .gitignore?\n. scov run -p common -r lcov -o out.lcov && cat out.lcov i guess scov does not registered itself as available command from npm scripts, only as separated-coverage\n. Sorry, my npm didn't install it correctly, works fine now\n. ./node_modules/coveralls/bin/coveralls.js i guess we could simplify that as well? To coveralls?\n. Could you add newline between description and @return comments so it would be consistent with other methods?\n. In other methods we use _this, not _self. Maybe we should add safeContextKeyword to our config?\n. So if that returns undefined, than customer of that method should check for it before using? So i can't just do if (getTokenByRangeStart(...).value === '['), i would need to do something like this:\n``` js\nvar token = getTokenByRangeStart(...);\nif (token && token.value === \"[\"){\n...\n}\n```\nMaybe, for convenience sake, it could return some fake token instead of undefined, like \njs\n{ \n  type: '',\n  value: '',\n  range: [ -1, -1 ],\n  loc: { start: { line: -1, column: -0 }, end: { line: -1, column: -1 } },\n  _tokenIndex: -1 \n}\n. This token isn't there, so it's not really fake, such situations might exist if current token is first or last token in the tree\n. @mdevils that is mostly for the getNextToken/getPrevToken, here, just for the consistency\n. This line divides two cases: foo([ 1, 2 ]) and foo( object[ i ] ), first is array creation, second is property access. Relates to https://github.com/jscs-dev/node-jscs/issues/429. \nThis is in order to fully compile to jQuery code style, which has this distinction, in one hand it says \u2013\n\n// Function with a callback, object, or array as the last argument:\n// No space after after the last argument\n\nOn the other hand, it has an example \u2013 \njs\nfoo( options, object[ property ] );\n/cc @scottgonzalez\nSo this rule could forgive only array creation, which isn't good compromise since you should except only tokens.\nWe could add keywords to workaround it, like instead:\njs\n\"except\": [ \"[\", \"]\" ]\nwe do:\njs\n\"except\": [ \"array\" ]\nBut that would complicate the rule\n. Done\n. Example?\n. I see, the thing is, getNodeByRange will not stop on first node it finds, but on the last one\n. Just optimized this method a bit\n. yep\n. Right now, it has pretty limited use, would be use-case otherwise?\n. Fixed\n. Why did you define this values twice? as KEYWORDS_WITH_SPACES and exports.es3SpacedKeywords?\n. array or true value?\n. array or true value?\n. Is that relevant to make it es3 only, do you plane add es5 array? If true then what for?\n. Line feed, this why travis is falling :-) \n. It might be covered with https://github.com/jscs-dev/node-jscs/issues/591\n. Maybe link to your github project would be a better choice? Up to you though \n. Please file an issue and if you have the time send us pull request with the test confirming the fix\n. Could you move ternary operator from if statement?\n. I would prefer if ternary operator (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) was outside if statement \n. It requires new line at the end\n. Could you comment that in it?\n. Could you move that to it own module like fileExtensions, excludeFiles and additionalRules. \nAlso you don't need to delete it, or add _maxErrors property see how we did modules above\n. Static property? Could we pass it to the constructor instead?\n. Maybe even define this default value in errors module and change it, if it was defined in the config or as cli option?\n. Do we really need to throw here? You throwing here to stop the checks iterations, but you could makeerrors#add just return result of the operation, i.e. true/false?\nIf false - then stop the checks? try..catch is expansive and usually used only when you definitely can't avoid it.\nAnd why you always call getErrorCount? Since we know about _errorList property, its private, yes, but its our private and we're working with it in the next line. It would better to just check the property than create new and needless function scope.\n. console.log?\n. We probably should include current maxErrors somewhere\n. So this would not come up if user doesn't use TTY?\n. Fixed\n. How about we put deprecation notice instead? \n. >  I can put deprecation as an error.\nToo severe, let's just mention it in doc and create ticket, that should be enough\n\nWe don't have warnings now, right?\n\nNope, it might happen only in 2.0\n. put deprecation notice to the doc\n. *deprecated* might be better\n. hm, maybe \njs\n{\n\"value\": true,\n\"except\": [ ... ]\n}\notherwise it would be unusual i guess, although it makes sense\n. >  Do we have another rule with value: true?\nExcept for maximumLineLength nope, but we're toying with that idea couple of times.\n\nJust if we defining this rule with an object it's means value: true by self. Isn't it?\n\nIt is! This is why i wrote \"although it makes sense\", i thinking mostly about coherence with other rule values\n. What is that?\n. Awesome! But could you move it to different commit?\n. Don't worry I took care of it\n. Additional spacing?\n. Docs for these rules are very different, could make them more coherent with each other?\n. Incorrect name, also why list of those keywords are different?\n. Should we create a ticket for this?\n. Maybe we could explicitly show that these rule aren't there? \njs\nchecker.configure({ notExist: true, noSuchRule: true })\n. Probably not, but it wouldn't hurt\n. Should we add dot to binaryOperators array? \n/cc @mikesherov @mdevils \n. Could you put this on 416 line?\n. Just like i said in https://github.com/jscs-dev/node-jscs/issues/511#issuecomment-48851189,\nProblem with , and . that they are binary operators but not all the time, sometimes it's punctuation sign and sometimes it isn't. \nSo what should we do here?\n. I see three ways to workaround that:\n1. Create new rule, specially for dot symbol\n2. Detect when dot is used as binary operator and apply the check only then\n3. Add dot as binary operator and rename the rule in 2.0 by replacing word \"Operators\" to something like \"Tokens\", we're iterating on tokens here anyhow\n. Why? looks like http://gruntjs.com/contributing#syntax has pretty small amount of requirements, does everyone agrees on this set of rules?\n. Why is that?\n. We probably need to add some smoke tests for browser version, like with phantom, not sure if would need something more besides that\n. Created - https://github.com/jscs-dev/node-jscs/issues/757\n. They don't have any limit at all? \n@vladikoff could you help us out here?\n. Preset based on another preset? \nCool.\n. Is that a new one? From es6?\n. A bit hard to understand what it does, like Punctuator is always the operator token? Could add test for it?\n. Sorry for the late response, we were considering other options, it seems \n\nAdd dot as binary operator and rename the rule in 2.0 by replacing word \"Operators\" to something like \"Tokens\", we're iterating on tokens here anyhow\n\nIs our best bet, in other words, will merge this pretty soon, after that, we could add this rule to the wikimedia preset\n. > So do you want me to alter my pull request to put '.' in binaryOperators?\nNope, will merge it as is\n. Done, sorry, busy day\n. hasOwnProperty for what? \n. usually in operator is used for such cases, but i suppose that's a developer choice :-)\n. That way you will also catch const assignments, could you add test for them too and change error if VariableDeclaration has a different type?\nProbably to early talk about let.\n. bikeshedding is always fun! And it seems we running out of names for rules now :-)\nrequireLineBreakAfterVariableAssignment sounds good to me.\n. What case is this?\n. We use this construction a lot, primary in test, but if we would add a new option or remove one in the future, we would have to redo it everywhere.\nMaybe we should introduce static method in StringChecker class which would serve as decorator to esprima.parse.\n. \n. This looks like overkill, let's not do that\n. > To make sure I understand: do you mean that this rule should ignore spacing for bare blocks?\nYep, it might be considered as contradiction to the name and documentation of the rule. And if we give this logic to this rule we should give the opposite logic for the more popular require rule, it looks like no one would want that even if this is an edge case.\n\nIt's a side effect of the changes I made\n\nYeah, i gather that, but it should be relatively easy to add workaround for it though.\n. Since you touching this file, it might be good thing to rename it\n. Why?\n. .jscs.json to .jscsrc, since we would need to deprecate (i assume) that name anyway\n. Not sure if i understood, you mean you will remove those beforeEach, afterEach?\n. \"use can use\"?\nI think we should say that user could use glob patterns but not a specific library. \nSince those are really a two different things, like oranges and apples\n. How would whole sentence would look like?\n. LGTM\n. .\n. That's a new value not an option, but i guess it works better\n. nevermind\n. typeof checks look like overkill, so i'd say yes\n. how about\n\nrequireDotNotation option requires true value or  \"except_snake_case\" string\n. Looking at other rules, we have so much discrepancies between them, somewhere we have typeof checks, somewhere we don't in some places we have \"or should be removed\" string in some places we don't.\n\n@mdevils didn't we have a task somewhere for interface that would simplify this kind stuff?\n. Don't think this should caught strings like \"_something\" or \"__something\", why is this so extensive?\n. > Something else?\nI guess __camelA__ but it probably also will be caught alongside with other cases although a separate test wouldn't hurt, and there is just _ case\n. No \"allButReserved\" option here, so only \"boolean\" is allowed\n. This and and next test after that are needless?\n. (14)?\n. For the description of the rule i'm not sure what id does, could add more clarify it more explicitly?\nLike what 3 as value means? Or true value?\n. Nope, i think we need interface that would accept declaration with acceptable values and do this checks automatically.\nBut i'm not sure if we have talked about this or not. Waiting for @mdevils to respond.\n. Nope, it was a mistake, see description of the rule\n. Why this is TODO, we can change this later?\n. Is there a relevant link about this?\n. /cc @jdlrobson, @jdforrester, @Krinkle \nIs that OK?\n. I guess you can use assertion API here, should be much cleaner\nmodule called \"token-assert\",\nuse example - https://github.com/jscs-dev/node-jscs/blob/8bd2ffd7bd1fc53a49d017f06322b178124534fa/lib/rules/validate-parameter-separator.js#L67-72\n. Would be cool to check for case without initialization part, like:\njs\nfor( ; i<l; i++ ){}\n. Why?\n. /cc @Krinkle \n. Nuh, i meant why do you skip that test?\n. prevToken2 - not a fun of this kind of naming, maybe something more meaningful would be better?\n. Look at example a bit more:\n``` js\n// this is valid:\nfor( var i = 0; i<l; i++ )\n// this is isn't:\nfor( var i = 0;i<l;i++ )\n``\n. should have donenpm testatnpm releasefrom the beginning :-)\n. Could that conflict withrequireSpaceAfterLineComment` rule?\n. https://github.com/jscs-dev/node-jscs/pull/941/files#diff-c4ec64ef009f51578bddc596b5b6ddc2R107\nI see, okay :-)\n. This pull for the string-checker module, but test for the rule, could we add one to for the relevant module too?\nLike here - https://github.com/jscs-dev/node-jscs/blob/30049c1da94b590b783c1ba948da1d639b8c06bc/test/string-checker.js#L38\n. Only production-ready envs, i.e. 0.10\n. Fun, huh :-)? it is 1.0.4, but its not ready to be used, see - https://iojs.org/faq.html#version\n@mikeal do you have a ticket about that? It seems it confuses a lot of people.\n. --configure and --config, -c are very similar. Can we try another name for it?\n. I guess colors is used implicitly, i would add it explicitly\n. Nit-pick, could we change sequence of those definition like we do in other modules?\nLike this:\n``` js\n// Default node modules\nvar path = require('path');\nvar fs = require('fs');\n// Deps\nvar Vow = require('vow');\nvar vowNode = require('vow-node');\nvar Table = require('cli-table');\nvar prompt = require('prompt');\n// Our stuff\nvar Checker = require('../checker');\nvar utils = require('../utils');\n``\n. Could we add JSDoc to the constructor?\n. Nit-pick: it seems, constructor ref is now lost?\n.@private?\n. It seems as overkill, to add a whole module just for one function\n. Nit-pick: missing JSDoc for those helpers?\n. Maybe we just should use alodashdep?\n. Should it be inutilsif it used in one module? In some projectsutils` quickly becomes a collection of weird functions, could we avoid that?\n. How about \njs\npath.resolve( p ) !== path.normalize( p )\n. js\n/[0-9]*/.test(\"a\")\ntrue\nI expect something like:\njs\n/\\d+/\nBut we have only 8 presets, need to limit input to that number or handle it ourselves.\n. I would even use https://github.com/SBoudrias/Inquirer.js here, it's more popular, and has more features and flexibility, like https://github.com/SBoudrias/Inquirer.js#user-content-prompts-type would work much better here\n. Yeah, but it feels like we could use it in a lot of places\n. > I think we should allow custom presets somehow.\nYou mean from the plugin?\n\nSomething like auto-nullifier?\n\nHm, not sure what you asking, \"auto-nullifier\" already exist with these changes\n. There is a lot of comments here now, so i lost track of why this is needed, i'd like to fully understand why it is required to have --color pseudo-option in appveyor but not in travis.\n. This question could be deferred, in fact, i would like to fix https://github.com/jscs-dev/node-jscs/issues/109 (if that something we're willing to do) first.\nBut it seems identification through jscs- is our best bet.\n. Could you do the\n\"test\": \"npm run lint && mocha --color\"\nand make appveyor execute npm test\n. Is dependencies update required?\n. I guess you could remove it now\n. Is this required?\n. If it could work without it then i guess we could remove it\n. Why do we need that?\n. Alrighty, it's fine, could merge it with it\n. Isn't .gitattributes not enough?\n. This method could be used anywhere else?\n. Strike that, see the use\n. Usually, if there is no object to return, null is used instead of undefined.\n. These kind of test declarations are harder to isolate, not sure if copy/paste is worse, i did it couple times myself though\n. A bit dangerous, but i can't think of the case when ranges would overlap.\n. Would move it to the filter function, but i guess it's developer choice\n. This line looks like an if statement then as assignment considering how it used below \n. Spaces are awesome! Since everyone says so :-).\n/cc @dmethvin\n. Already fixed\n. Can you give me link to this setting?\n. Correct one is:\njs\n\"except\": [ \"{\", \"}\", \"[\", \"]\", \"function\" ]\nAnd as a said feature, requireSpacesInsideParentheses should understand quotes, so case like this:\njs\nfoo(\"bar\")\nwould be acceptable.\n. If requireSpacesInsideParentheses doesn't throw on this, with config above, then it's a bug\n. same as above\n. Catch cases like this is currently impossible and i think, really hard to implement \n. same as above\n. Maybe, i overestimated it, maybe not that hard :-), but still need to add additional feature for that rule\n. Cool, updated\n. We probably need to mention all shorten flags we have in this doc.\n. So test-case, code-example?\n\nMy solution also handles arrays\n\nI'm not sure if we need that at the moment\n. We require newline char in objects but not in arrays? What is the diff?\n. Alrighty, i don't see an example when we would need exception for parentNode.parentNode top-level element. \nIf find one, let me know\n. Nope, just in case assertion\n. Removed for the debug purposes, reverted\n. Could you elaborate? \n. \"Please report it in...\"?\n. I wonder how it would reflect on the performance\n. How about you would form error message here (or in special helper) that way Error#add wouldn't be polymorphic  signature and your intention would be clear and not spread across modules?\n. > Typed errors can help us to have it with Errors object.\nNot sure if i understand you, why exactly we need to pass it to another function?\n. 5% is a lot, but try..catch function, (like from here)  probably wouldn't get us anywhere, it worth a try though\n. Fine by me, although i'm not sure why we always use \" \" sign\n. If that is only use-case for passing whole error object, i'd say we shouldn't complicate theErrors#add, just + error.stack` is enough. \nWarnings would be nice to have for this case and for rule deprecation but it would mean changing reporters API. \n. > Is it a real problem?\nOn the small code-base no, on the large one, considering cumulative impact with other patches... might be, if you look on user perception - http://www.sitepoint.com/comparison-javascript-linting-tools#jscs\n\nSlowest of the four, but this is not a problem in typical use\n\nWhich might be a not fair conclusion, but a thing we should keep an eye on. \"Slowest\" - don't want to be categorized like that\n. I can debate it for a long time, which would lead nowhere, so i really don't want to argue about that, if you ask \"if that is a real problem\" - yes, i think it is, if we can do something about that, i would prefer to do it.\n. > execution time like 5% lower in branch than in master\nHm, i interpret this phrase as these changes would add 5%. So you somehow make it faster? :anguished:\n. I was pushing for the opmization because i was under impression we would take hit. If there is nothing hurting the performance then its all good by me.\n1043 is not about perf improvements by about perf monitoring, we would need address every bottleneck on case-by-case basis\n. If you talking about other use-cases, i guess it would better to discuss in separate issue, it probably would require proof of concept.\n\nAnyway, I don't now see how to make it work without hardcoding here output.\n\nYou either \"hardcode\" it here or in errors module, but doing it here we would clearly see the genesis of error and would not complicate add method.\n. What preventing you to check verbose flag here?\n. Why?\n. js\nerror.add('message ' + e.stack, 1, 0);\n. Yeah, no better way to do it, i'm not sure why asking though, in this pull you're proposing to do exact same thing, just in another module.\n. btw, we're already done it for deprecated rules and for syntax errors provided by the esprima, i believe other linters do the same \n. > Can we try to make \"warnings\" mechanism to report internal issues without failing code style check?\nWe can try - https://github.com/jscs-dev/node-jscs/issues/453, i'm not sure it would better though\n. How it look in the console, could post a screenshot?\n. okay :-)\n. scarrrry\n. This whole block is very complicated, i guess it would be better to work on https://github.com/jscs-dev/node-jscs/issues/895 instead?\n. We usually create a variable for this\n. comma\n. Couple new lines would help here\n. shouldn't this be an array?\n. Maybe more meaningful examples would fit better\n. Nice solution\n. You can call getOptionName once assigning it to variable\n. Seriously, why does everybody use \" \" sign?\n. you can pass context as second argument to theforEach.((` very subjective\n. Meaning?\n. Could you elaborate?\n. I'd would use something time-tested, like https://github.com/sindresorhus/to-single-quotes/blob/master/index.js\n. Although it is not fully documented but we can accept config declared through js format\n. You are correct, but in order to update the website we need to pull these changes manually, we will release 1.13.1 today and i will update site with it\n. Same would happen for -\njs\nassert(checker.checkString('var x = \"hello-there\".split(\"-\")[ 0 ];').isEmpty());\n. Why?\n. Might make sense to expose it in helper module\n. Might make sense to add \"es6 only rule\"  or something like that\n. Might make sense to move es6 requires into the special helper, or at least in spacial place in this method\n. If there is no nodes like that it wouldn't break. It could save time if esnext is not enabled, but if user enabled es6-only rule we could say their know what their are doing\n. Second one sounds better, but any of them will do i think\n. Yeah\n. > And I guess if we are using esnext by default later..\nWell, i'm starting to doubt it would be a best course of action, since if we would have - \njs\ndisallowKeywords: {\n  es6: ['var']\n}\nand add it to the airbnb preset while enabling esnext by default - :boom:\n. Generate the file instance, take the node, passed them to isWrapped, what else is there?\n. You can do that in another pull though\n. Would do you think? Do you think it needed? Or not?\n. See https://github.com/jscs-dev/node-jscs/blob/fb9ce4fe6f55c83c96fa311a0973dfa77e5740af/test/specs/js-file.js\n. @mikesherov what do you think?\n. ?\n. Confusiong for me, i don't understand why would anyone would wants this\n. That is not a \"single statement\"? This is hard to get your head around it, i'd say this rule is strange, is there any use-cases for it?\n. Oh, so it prohibits use of return if there is a single expression?\n. No dot at the end\n. Maybe i was the only one confused by this, but if you could clarify this a bit more, that would be great\n. I'm open to suggestions\n. A sad test dependency :(\n/cc @mrjoelkemp \n. > Which test fails when you exclude this?\nSee https://github.com/jscs-dev/node-jscs/pull/1357/files#diff-8c69b27e094f551b0135c745b7940c78R117\n. Sure, to remove this dep we could simple register new preset for the test\n. Hm, maybe we need to add helper method for that?\n. Without changes in the source, only this test is falling, whereas this behaviour is by design, we open to discuss this issue, but it seems point of this pull should be about another matter?\n. For situation when rule decides it can't fix the error, if case is too complicated for exampe. Then in the fix method it can do error.fixed = false.\n. Original value is undefined\n. npm i --save\n. Sounds good\n. > I guess an error being unfixable isn't an exception?\nYeah, otherwise we would show that big message, inviting user to submit a bug to this repo.\n\nWhat I'm getting at is avoiding rules knowing about the fixed property of the error.\n\nAlternative for it would be to make a return value of the fix method count, if returns undefined | true -> error.fixed = true if returns false -> error.fixed = undefined, or false value, which, btw could signify failure (either through exception or through return) of the  fix attempt.\n. Could you not remove but deprecate them?\n. The thing is, output might not be terminal, but anything user want, this is why we have reporters.\nSo only mentioning them in the docs as deprecated is fine.\n. .\n. Why ignore?\n. Now we can inline this\n. We started to use allExcept: [ \"...\" ] style instead of bunch different values. Could you deprecate these values (just note in the docs is fine) while introducing the allExcept for this rule?\nlike allExcept: [ \"aligned\", \"multiline\", ... ]. Also couple examples of what those values do would be cool.\n. None of the other rule method does it, so i'm not totally sure :(\n. Could you leave those values, but note them as \"deprecated\"?\n. For some reason, we use \"\" symbol for those errors, like that \"singleline\", i have no idea why though\n. So there might be \"spaces\" not \"space\"?\n. Just in case, could add//jscs:test?\n. Why?\n. Could add comments for those variables?\n. Perhaps you meanerrorInfoargument of thecastmethod? Specificallyadditional` property?\nIn such case, yes, that would be preferable, but it has to be polymorphic since we don't know in what way rule would want apply the fix :-(\n. If you could add a test for it, it would be great\n. Yeah, exactly\n. Just why those variables are needed\n. This should be \"requireTrailingComma\": true\n. \"parser.Please not\" -> \"parser. Please not\"\n. Also, we should add note about \"jsx\"\n. \"uppercase\" sure\n. In some guides it is preferable to move them in special variables with prefixes, it seems author followed that guide.\n\nWould you prefer them not to be variables?\n\nIt is fine with me, just a comment would suffice \n. Although this change likely will be landed to 2.0, it is better to preserve true value in order for this change to be back-compat\n. Could that be valid? To ignore single line for all rules?\n. Hm, not sure if i get it, changing from /(jscs\\s*:\\s*ignore)(\\s+\\w.*)/ to /(jscs\\s*:\\s*ignore)(.*)/ and redoing test to \njs\nit('requires a rule to be specified', function() {\n    var file = createJsFile([\n        'var a = \"1\"; // jscs:ignore',\n        'var b = \"1\";'\n    ].join('\\n'));\n    assert(!file.isEnabledRule('validateQuoteMarks', 1));\n    assert(file.isEnabledRule('validateQuoteMarks', 2));\n});\nWorks for me\n. Yeah, that makes sense, it seems as edge case though, we have never saw someone having issues with it.\nCould you then change regexp and create issue for described problem?\n. If there is no objections, then yeah.\n. I wonder who would want that rule, yeah, we usually ask for the opposite rule, but i think we should be more soft on that.\n. Empty?\n. Just missed the ! :-), but yeah, specific is better, although if we would be real sticklers we would ask you to put assertions in their very own it functions since it easier to isolated them with it.only.\n. ?\n. ?\n. Booleab\n. Here, it seems you testing, although quite elegantly, logic of the external tool?\n. You modifying the AST?\n. Not really a fan of that kind of declaration, i understand it is much easier to define, but it is much harder to support or isolate.\nNot saying you should redo it, but want to hear some opinions about it.\n. Oh, i see, you don't\n. I would remove it, if we will have something else, we will add it again :-)\n. Yep, feel free to fix this\n. I think we should remove warn completely, but when we start warn about such things, we should do it in a general way, so we wouldn't need to add deprecation noticed in every rule with deprecated values.\nJust have file with the old way and warn at config parse. @mdevils already working on the mapping file.\nBesides, never use console in rules, since such errors are not consumable by the reporters.\n. It is better to make such changes more visible i.e. have special commit for it and link on why this was done\n. This looks pretty great, i would even move this to standalone module, since it might be useful for other projects as well.\nIt seems though, esutils module already does this job, although with completely different interface.\n. So this code will break in older browsers?\n. This could be a link\n. I think it would preferable do changes like that in the 3.0 version\n. This should be a \"allExcept\": [\"snake_case\" ]?\n. Same as above\n. Are you planning to rework these methods as well? Seems unrelated to proposed changes?\n. Looks much better, although it seems there is no need for the for anymore, some of the Array#<methods> or lodash methods should do the job?\n. It seems argument check should look like the same way as in getNodesByType method\n. Maybe method like that should be included in cst?\n. Was this method being replaced?\n. Would document those extensions at the wiki page, otherwise this could get confusing\n. Even though a lot of rule values are deprecated, we do not removing them, leaving this task for 3.0\n. This wasn't explicitly said anywhere, it just where the flow of development is\n. And in Android 2.3, i'd say we don't care about them\n. More reasons to move reserved-words to standalone module :-)\n. We can remove that newline\n. That could be useful! Although i'm not sure how cross os this thing.\n. So this module implicitly extends String prototype, extending and doing so implicitly could be considered as harmful.\nIs there any alternative to this package?\n. Will you use this package in this pull?\n. Done\n. I guess we can do that later, after squashing couple commits - LGTM\n. @hzoo, @mrjoelkemp, @zxqfox any ideas?\n. @ruimarinho could you try natural-sort package instead?\n. Although you would need only couple rules from that preset, i'd say it doesn't really matter, we just shouldn't forget to update that when we rename the rules\n. Prefixes usually added so they wouldn't be confused with other packages since it name without prefix might be misleading and have possibility of the name conflict - https://twitter.com/ironshay/status/370525864523743232\nESlint recent change of the same nature and popularity of https://github.com/sindresorhus/load-grunt-tasks packages somewhat proves it, plus it seems popular for the jscs too - https://www.npmjs.com/search?q=jscs\nSo we know ppl use those prefixes a lot, so we might take advantage of it...\nAnd you know, it is nicer to write preset: my-company, then preset: jscs-my-company. \n. Not exactly, but yeah\n. Sure, although it seems logical to do in the different commit, since we use forEach in the test above\n. objects'?\n. Same as above\n. >  I'm okay with letting this in as an interim fix\nWould be cool to have an issue for that, so we wouldn't forget\n. Since rule already has \"functions\" in their name, maybe we could just use declarations instead of functionDeclarations?\n. Could you call it allExcept: [\"declarations\"], we do that in couple places, i guess that would be good trend to follow\n. Perhaps additional spacing is required - $('#foo').click(function()/*here*/{?\n. Well, those are not statements, they are function calls, which makes them an expressions, maybe we need to choose more general term?\n. It seems you could unite those two describes, also, could you call it allExcept: [\"comments\"], we do that in couple places, i guess that would be good trend to follow.\n. Hmm, we can provide function in utils module which could get that value, so this private property getter thing would be encapsulated and when push come to shove we could easily change it logic.\n. Hm, i guess we should change that warning now?\n. Could structure those docs in similar manner - https://github.com/jscs-dev/node-jscs/commit/c536b21ca16b74e44081f4c7d89a38e08439e23c#diff-98bfebb24c1ec81d05c332bf6483e9beR6?\n. statements?\n. statements?\n. > It might feel like a yagni to create this abstraction, but lib/utils really shouldn't be a grab bag of random methods.\nTrue that!\n. utils.getBabelType might best since, we take just that, not another node.type or anything else\n. And test?\n. Why did you remove those?\n. Fair enough\n. We started to clean up docs a little, could you follow the same style as in - https://github.com/jscs-dev/node-jscs/pull/1667/files\n?\n. Nit-pick: we usually don't use bindings, that is why we have those lines:\njs\nvar beforeOpeningRoundBrace = this._beforeOpeningRoundBrace;\nvar beforeOpeningCurlyBrace = this._beforeOpeningCurlyBrace;\nWould you mind using this.exceptions property in the similar manner? \n. We pretty strict about naming conventions of the private properties, could name it ._exceptions?\n. I would compress those examples, to \njs\n\"disallowPaddingNewlinesInBlocks\": true\n\"disallowPaddingNewlinesInBlocks\": { \"open\": true, \"close\": true }\n\"disallowPaddingNewlinesInBlocks\": { \"allExcept\": [ \"conditionals\" ] }\nAs suggested in https://github.com/jscs-dev/node-jscs/pull/1667/files#r37021702\n. Hm, i wonder who this usually done for such flags, like passing \"0\", can't remember any popular commands with similar logic.\nAnyway, could you add tests for it?\n/cc @zxqfox\n. How about http://jscs.info/overview.html#maxerrors?\n. funny )\n. Well, it is logical to have null value in the .jscsrc config for maxErrors, since this is how we disable rules, consistency and all that, but passing such value to the cli seems pretty uncommon, just like passing Infinity if you think about it.\nSo i think we can keep both, but document only null value for maxErrors of .jscsrc (when in reality it would accept both) and document -1 for max-errors of cli option  (when in reality it would again accept both).\nDoes it sounds like a good compromise?\n. We have some tests for this option now, i think it would be logical to move it into its own describe  and move\njs\nchecker = new Checker();\nchecker.registerDefaultRules();\nchecker.configure({ disallowQuotedKeysInObjects: 'allButReserved' });\nbit there too\n. Deprecating allButReserved? Yeah, that would be cool.\n\nShould we do it now or... in other PR?\n\nIf that is not too much trouble\n. aaah, for some reason we use \"\" when quoting such entities\n. Well, we will start usingchai\"soon\" - https://github.com/jscs-dev/node-jscs/pull/1542\n. is this description correct?\n. The next string would also be included in the quote block\n.git commit -asounds easier\n. Or fix the conflicts yourself?\n.hub` link missing i guess, also we could add that this is a suggest workflow \n. We should update the release instruction as well, since in there it assumes your copy points to origin\n. @zxqfox is right!\n. We had a discussion about it somewhere, for standardizing error output and rule names, in the new approach it would be cool to follow common terminology - https://en.wikipedia.org/wiki/Bracket.\nIn other words, i think it would be okay to call it \"parentheses\".\n. Is this comment relevant?\n. Why this is a quote?\n. mm, interesting, so jscs would identify type of the format\n. Here we probably should throw our own error, to get meanigful output, so it would be less confusing if user uses json format\n. I meant a try..catch thing, anyhow\n. How about we check (after trim) that first symbol is { if it is - throw json error, if it is not - try the yaml parser and throw their error?\n. Since yaml is subset of json that is expected, although whole point of supporting yaml config is to not write it in json, isn't?\nAnyway, this would be a downside of format recognition, if user would want to use yaml explicitly their would need to just rename the file. I guess it is still better then weird error.\n. If you would have error in .jscsrc file while using json format, you would throw yaml error, which could be confusing, not to mention two nested try..catch\n. The one you proposing?\njs\nthrow new Error('Parse error in ' + configPath);\nIt is better to provide more information, it might be pretty big issue to find error in config file inside big yaml/json\n. Something is better then nothing, good point though, how about we try https://github.com/zaach/jsonlint, so we could output nice info?\n. I wouldn't say it is out of scope, different commit maybe but not a pr, since this pr would change error output, from json error to custom one, with jsonlint we could preserve and improve that message rather then regress it\n. fyi, it is not a blocker, if you wouldn't want to do this, that is okay! You did a great thing here, we could finish this up for you\n. Well, i have only one concern, that incorrect configs like\njs\n{\npreset: 'preset' // property without quotes and incorrect quotes on value\n}\nThat could be confusing\n. Yes, but user might meant to use json, i'm not sure that anyone would except file like\njs\n{\npreset: 'preset' \n}\nto be parsed as yaml format\n. Yaml first would be more logical, but i think it is less clear, since other devs might not expect it and that might be considered as magic or as our own format\n. > I can switch it around...\nYeah, i think it would be best for now, maybe we could switch change it in the future\n. Maybe we could be more specific then that?\n. text/javascript  is obsolete, check this out - http://tools.ietf.org/html/rfc4329 \n. Hm, it seems we need to create a public push method\n. What if pass a full path?\n. Wouldn't that slows us down? If user does something like jscs .? Then we would read every perky file out there.\n. I meant put a column number there\n. Yes, sure, but i provided the link not for nothing, what about - \napplication/ecmascript\napplication/javascript\napplication/x-ecmascript\napplication/x-javascript\ntext/ecmascript\ntext/javascript\ntext/javascript1.0\ntext/javascript1.1\ntext/javascript1.2\ntext/javascript1.3\ntext/javascript1.4\ntext/javascript1.5\n. How about extending defaults of fileExtensions option instead of introducing the extract and putting every possible html extension?\nIt has obvious downside, like if user redefine it, their would need to add those extension again.\n. So this class called HtmlFile analogues to JsFile, but file named as extract-js?\n. cool\n. /cc @mdevils \n. Why we need this?\n. If JSHint did it, it doesn't mean it is a good solution - with extract = never by default, user would need to know about this option (and users rarely read docs), with extract = auto by default, it would hurt performance.\nWhereas if we would extend fileExtensions we would support most use-cases without performance downside.\n\nI believe we should do initial solution as simple as possible.\n\nIf we would add extract option we need to support it for long time, so we need to drawn the line somewhere\n. Fair enough\n. I was asking would happen if we would pass a full path with extension\n. Would be good, but yeah, we could do it later\n. Sounds good!\n. comined\n. Auto fixing is not apply - > Autofixing does not apply?\n. Maybe other options could be links?\n. Would remove meaning\n. JavaScript extracts from any file -> extract from any file, since you use imperative mood down the road\n. So JavaScript extracts -> So JavaScript is extracted?\n. It would be better to not have any logic in bin file, would you mind moving it? Tests would be good too\n. could don't?\n. You really like this, huh? :-)\n. Currently onlyhtmlformat... what else is there? xml? or...?\n. Could remove extra newline there?\n. @mdevils be aware of this file :-)\n. Is this covered by tests?\n. This is one of the bugs you were talking about?\n. Is this used in here?\n. Default functionality of the chai is not enough? like match or string?\n. To have error count equal? It seems chai tries to emulate real language, whereas this sentence structure looks out of place\n. I would move this module to different package\n. in the next lines we use abbreviation flags, could you change them all then? Or use -t?\n. So this is an empty function now?\n. Was this done with automatic or you did it by hand?\n. to have property would be better though :-)\n. It could be helpful for the plugin writers too, plus we could add tests for those assertions\n. How about string? \n. Sure thing, would you mind creating a ticket after this will land?\n. .to.equal.errors, /cc @zxqfox \n. I mean, can we remove second function?\n. They can be replaced with string, i suspect that is not a popular use-case in other libraries too, that is why those functions are not included in main dist.\nMy concern is solely becase chai-string is not very popular module, which raise flag for me, since it might not be stable enough\n. Is this helper really needed?\n. Oh, i see, yeah, cool\n. Could you also add invalid case?\n. We want to switch to https://github.com/mafintosh/is-my-json-valid, to simplify those assertions, we can either leave this as is or you can help us out and simplify live of developers after you.\n. In your case, close to none, since you already wrote the logic and tests for it, for supporting it, there some benefit and for developers that could use this as an example for the new rules\n. Soon we will start to use it even in most simplest cases, no sweat though, as-is is fine, will try it out on the next rule :-)\n. Why it should omit this? Isn't \njs\nif (true) { doSomething(); }\nis valid for singleLine?\n. Could you add one should report? It seems one would be needed for the next describe too\n. It seems unnecessary \n. So why it's rule should show validation error? If documentation says it shouldn't?\n. I mean you have test that proves that error will not be shown, but you don't have one that will\n. Is this a relevant change?\n. ?\n. Oh, okay\n. ?\n. So why change this file?\n. This change is not relevant to introducing of whitespace token isn't it?\n. Okay, gotcha\n. I'd say this method is a bit complicated, would recommend to consider a decomposition\n. So we only need to those private helpers to increment/decrement token index?\n. For speed?\n. They say v8 already do the optimization for caching length\n. Just fyi btw, i'm still using it :-)\n. There is two primary code paths - if we have whitespace and when we need to add a whitespace token, i would propose to try to decompose it by those points \n. Maybe this is something we should consider for 3.0\n. It is really seems that we need to make it enabled by default, but since now we can ignore whitespaces too, it might look inconsistent\n. Well, we could use keywords, like \"left\", \"right\", but yeah, if we remove it soon, then no big deal, but i always was afraid of the phrase - \"There is nothing more permanent than temporary\"\n. I guess it is fine for temporary measure, but we might need to start about limit for cyclomatic complexity \n. You can replace this with\njs\nexpect(errors).to.have.one.error('Operator = should not stick to preceding expression');\n. Could you document such value?\n. Would you mind adding some documentation for the rule?\n. It is better to put that stuff in the description of the tests itself\n. { requireEarlyReturn: 'noElse' } why not { requireEarlyReturn: true }?\n. First letter should be in uppercase\n. What would strict option do?\nI think we can switch to boolean.\n. Would you mind providing example in the comment?\n. Would be cool to have a comment here too\n. How about we would use true value? We can introduce strict later. To be honest, i don't see anything criminal in the second case.\n. It get the job done! Although i wonder if there is better way. Would you mind adding explanation comment?\n. I guess it is fine, just add a comment and we are good to go\n. You gotta decompose here, three included if's with pretty complicated conditions, whereas two of them are included in for.\nCyclomatic complexity should be much, much lower.\n. Use line instead of the block comments\n. We can move those function from check method\n. Instead of one if would you mind trying something like \n``` js\nvar start = prefix.length + 1;\nif (start >= value.length)) {\n  return;\n}\n...\nreturn start;\n```\n?\nAnd if such approach would prove itself more easier to read, then do the same for other helpers too?\n. Why there is a newline?\n. There is a lot of nested if which usually not a good sign. Would you mind trying requireEarlyReturn style here?\n. Also, couple of comments would do good here\n. Not sure if we need that, if tests covering used code-paths we good either way\n. Meaning that we could move those tests from the helper function and to the 'with true value' describe\n. I'd say no, for my taste, if we covered it, it should be good\n. Don't think this is related\n. Couldn't this be part of scope api?\n. Now we can dump cast method and just use add\n. So this would be autofixed to function fun({g}) { g++; }?\n. How about using reportAndFix for such tests?\n. So this, could be replaced with var node = error.element;\n. Hm, if project uses tabs it should be \\t not 4, maybe you trying to fix something else?\n. Checked the code from https://github.com/jscs-dev/node-jscs/issues/1907 it still shows same errors\n. So you want to use spaces for indentation but still using tabs? This would be quite unconventional.\n\n. Sorry for the delay, @mdevils, @hzoo opinions?\n. I think we need to mention how we could store regexp in json\n. Oh, i see, you already did that :)\n. Would you mind using ast instead here? Such checks are very unstable\n. Could you decompose it? And add comments, right now it is veery hard to grasp\n. How about \njs\nif (decl.firstChild.type === 'ObjectPattern') {\n?\n. Can't port that to the 2.x branch though, so it might have to wait until 3.0 release :/\n. Would be better to put this in beforeEach\n. It seems outdated?\n. If we only have one option, it seems object value is redundant\n. Sounds like it would easier to do it like this\n. It seems we need add an some import statement to https://github.com/jscs-dev/node-jscs/blob/fbe9bf4ad5ab3e2645affee07a5fc5ff19cea35f/test/data/options/preset/airbnb.js ?\n. Adding import { resolve } from \"path\"; in the begging?\n. That file will not be executed anyway, you can even add a non-existent module, will still work\n. Why we remove those?\n. Can we try a different approach with continue statements?\nLike -\njs\nif (elem.type !== 'Punctuator') {\n   elem = elem.previousSibling;\n   continue;\n}\n?\n. That condition could be moved to a function right? Something like -\njs\nwhile(somethingOrOther(elem)) {\n...\n?\n. Much better!\nHow about we go further with it - \n``` js\n // Probably mess up some condition\n function isRelevant /or some better name/ (elem) {\n    var itIs = false;\nif (!elem) {\n    return itIs;\n}\n\nif (elem.expression.value !== 'use strict') {\n    return itIs;\n}\n\nitIs = elem.isComment || elem.isWhitespace;\nitIs = itIs || elem.type === 'VariableDeclaration';\nitIs = itIs || elem.type === 'Punctuator';\nitIs = itIs || elem.type === 'ExpressionStatement';\n\nreturn itIs;\n\n}\nwhile(isRelevant(elem)) {\n  elem = elem.previousSibling;\n}\n```\nDoes it reads better?\n. only\n. It seems in this case, variable is used?\n. Seems duplicative we have these names already\n. ",
    "mishanga": "\u0423\u0444, \u0437\u0430\u043f\u0430\u0440\u0438\u043b\u0441\u044f \u043f\u0438\u0441\u0430\u0442\u044c \u043f\u043e-\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438 ;)\n\u041a\u043e\u0440\u043e\u0447\u0435, \u043f\u0440\u043e esprima \u0432\u0441\u0451 \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u0432\u044b\u0440\u0430\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442. \u041d\u043e \u0432\u0435\u0434\u044c \u043b\u044c\u0432\u0438\u043d\u0443\u044e \u0434\u043e\u043b\u044e \u0444\u0438\u043a\u0441\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0438\u043c\u0435\u044f \u043d\u0430 \u0440\u0443\u043a\u0430\u0445 token \u0438 loc \u2014 \u0442\u0443\u043f\u044b\u043c replace \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443. \u0422\u043e \u0435\u0441\u0442\u044c \u0431\u0435\u0437 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0435\u0440\u0435\u0432\u0430, \u043f\u0440\u043e\u0441\u0442\u043e \u0445\u0430\u0440\u0434\u043a\u043e\u0440\u043d\u044b\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u0422\u0430\u043a \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f?\n. \u0424\u0430\u043a\u0438\u043d \u0438\u043d\u0433\u043b\u0438\u0448 :)\nLet's just make an exclusion for loops by default for true?\n. ",
    "kirjs": "What if we don't use the AST to generate the code, but modify the existing files instead?\nEach rule can have a method, which would receive line and column, and would know how to fix the code.\nThe only gotcha I can see is that some fixes could change the line length (e.g. adding or removing a space), and therefore some column numbers may have to be shifted after the fix, but this seems to be trackable.\n. ",
    "doochik": "Ok, let's change default behaviour\n. When do you build new npm release?\n. great! )\n. \u041c\u043d\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u0442\u043e\u0433\u0434\u0430 \u043d\u0430\u0434\u043e \u043d\u0435 \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0445\u043e\u0434\u0438\u0442\u044c, \u0430 \u0434\u0435\u0440\u0435\u0432\u043e \u0440\u0430\u0437\u0431\u0438\u0440\u0430\u0442\u044c.\n\u0423\u043d\u0430\u0440\u043d\u043e\u0435 - \u0435\u0441\u043b\u0438 \u0441\u043b\u0435\u0432\u0430 \u043d\u0435\u0442 expression (-2)\n\u0411\u0438\u043d\u0430\u0440\u043d\u043e\u0435 - \u0441\u043b\u0435\u0432\u0430 \u0435\u0441\u0442\u044c expression (2 + 2)\n. duplicate of #31 \n. ok )\n. ",
    "thorbenziemek": "See my commit for a fix. I'm not sure whether this is an elegant solution, as I'm not an expert with Vow - but it works. Would you like me to send you a pull request or did you have another solution in mind?\n. ",
    "zarkone": ":+1: \n. I've added --no-colors because i had no ability to work in dumb terminals. From my point of view, we can just check color support in current terminal to decide how to run jscs -- with colors support or without it. Replace colors to Chalk or whatever could become a reason of bugs or undefined behaviour -- i suggest to make such decision if only there are some more strong reasons to do such migration. And even if  migration would be approved i believe that it's better to leave the ability to force monochrome mode -- at least explain in docs how to switch mode with $TERM variable.\n. ",
    "paazmaya": ":thumbsup: \n. :thumbsup: \n. Hups, not sure how I missed that. Sorry.\n. ",
    "EvHaus": "\u0420\u0435\u0431\u044f\u0442\u0430, I am still getting this issue using jscs-browser.js v1.2.4.\n. I agree. The \"disallowLeftStickedOperators\" should ignore function parameters.\n. I'd like to advise either revisiting this issue or updating the documentation for \"disallowLeftStickedOperators\". The impression I get from the documentation (and from the param name) is that \"disallowLeftStickedOperators\" only applies to operators. In this example the \"-\" is not used an operator so it shouldn't be treated as such.\n. Thanks! FYI -- it would be nice if you could add my Brackets extension to your list of supported code editors: https://github.com/globexdesigns/brackets-jscs\n. I don't use it in the browser actually, but I use the non-node version in my Brackets extension: https://github.com/globexdesigns/brackets-jscs\nIt's much faster to parse the editor code on the fly rather than invoke an instance of Node.js and execute the code there.\nAre you thinking of killing the browser build support?\n. ",
    "mrjoelkemp": "I added a \"strict\" value to disallow the for statement's exception to the rule.\n. What's the verdict on this? \n@mikesherov @zxqfox Should we deprecate this rule within jscs and inform users to use https://github.com/jscs-dev/jscs-jsdoc instead? I can create another issue for that task and put a PR together if you guys agree.\n. What's the status on this? I'm tempted to close it as orphaned unless there's a strong objection.\n. One idea for tackling this is to use the newline delimited contents of the jscsignore to populate the excludeFiles configuration array internally. \n. @jwhitmarsh friendly ping. Any progress on this?\n. requireVarDeclFirst sounds closer to the rule's logic.\nOn Jul 6, 2015 3:50 AM, \"oredi\" notifications@github.com wrote:\n\nThink I found the requireMultipleVarDecl that might be applicable for\nthis. I am thinking about names like requireVarDeclAtTop with the only\noption value of true unless someone else has better suggestions.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/99#issuecomment-118761825.\n. I'd modify Mike's example to avoid mentioning jscs all together, just to show that the prefix is unimportant:\n\n{\n  preset: \"my-npm-module-name\"\n}\nWhere my-npm-module-name could be whatever you'd require the module as (ex: require('my-npm-module-name'). We'll try to register the custom preset and if it doesn't adhere to the code standard for custom presets, then it'll fail. Otherwise, it should pass without a problem.\n. I'll take care of this one. I see the following rules benefiting from a true value:\n1. requireSpaceAfterKeywords and disallowSpaceAfterKeywords\n2. requireCurlyBraces\nLet me know if there are any other rules to consider.\n. Some thoughts after digging into this:\n1. A lib/errors object could have a clause in add that prevents a new rule from being added if the maxErrors limit is hit. This would help the RAM issue by reducing the number of error objects kept in memory within _errorlist; though, I'm not entirely convinced that's the cause of the memory bloat. \n2. Checker should avoid checking the file against the next rule if the error limit has been hit. This will avoid further, unnecessary processing of the current file.\n3. checkString should (abruptly) return an empty list if the error limit has been hit. This should avoid esprima-parsing files unnecessarily once the limit is hit.\nThe only problem is that once we're in the execution context of rule.check(file, errors), it's not possible to halt processing without modifying rules. With (1), we can avoid additional errors from being added past the maxErrors limit, but we can't stop rule checking abruptly. Not being able to halt processing is only an issue for a processor-heavy rule checking a large file before hitting the maxErrors limit.\nAny objections/thoughts on these points?\n. Great idea!\nOn Oct 1, 2014 7:36 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nActually, much simpler: keep a static running tally of errors, and when\nthe max is reached, throw inside errors.add and catch the error\noutside. This takes care of 1,2,3. Mike Sherov\nOn Wed, Oct 1, 2014 at 7:12 AM, Mike Sherov mike.sherov@gmail.com\nwrote:\n\nImplementing 1 & 2 seems good for now. Let someone complain about 3\nbefore we fix it. Mike Sherov\nOn Tue, Sep 30, 2014 at 11:17 PM, Joel Kemp notifications@github.com\nwrote:\n\nSome thoughts after digging into this:\n1. An Errors object could have a clause in add that prevents a new\nrule from being added if the maxErrors limit is hit. This would help the\nRAM issue\nby reducing the number of error objects kept in memory within _errorlist;\nthough, I'm not entirely convinced that's the cause of the memory bloat.\n2. Checker should avoid checking the file against the next rule if the\nerror limit has been hit. This will avoid further, unnecessary processing\nof the current file.\n3. checkString should (abruptly) return an empty list if the error\nlimit has been hit. This should avoid esprima-parsing files unnecessarily\nonce the limit is hit.\nThe only problem is that once we're in the execution context of\nrule.check(file, errors),\nit's not possible to halt processing without modifying rules. With (1), we\ncan avoid additional errors from being added past the maxErrors limit, but\nwe can't stop rule checking abruptly. Not being able to halt processing is\nonly an issue for a processor-heavy rule checking a large file before\nhitting the maxErrors limit.\nAny objections/thoughts on these points?\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/238#issuecomment-57414036\n\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/238#issuecomment-57451041.\n. Wow. That's huge. Awesome!\nOn Nov 13, 2014 8:29 AM, \"Ekaterina Prigara\" notifications@github.com\nwrote:\nWebStorm 9 https://www.jetbrains.com/webstorm/whatsnew/ brings JSCS\nsupport out of the box (see Preferences | Languages & Frameworks |\nJavaScript | Code quality tools | JSCS).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/314#issuecomment-62889891.\n. I'd personally like to see the code examples for each rule inlined on the /rules page since that's the most important part to making sense of a rule. However, I do see the SEO (and traffic visibility) benefits to having separate pages for each rule. \n\nThe traffic per-rule visibility could help us determine which rules to cut from core. However, we've spoken about using presets to determine what stays in core. If we are set on the latter (preset) approach, then we should inline the examples (requiring us to inline the examples in the source code).\nThoughts?\n. Is this as simple as setting a new property like this._foundUnsupportedRules = true instead of throwing an error when hitting an unsupported rule. \nThen, right before returning the errors, we check this._foundUnsupportedRules and add a new error (as you specified above) to the error list?\n. But you don't have access to the error instance in StringChecker#configure, so you have to wait until StringChecker#checkString to add the errors for unsupported rules. \nI don't see an alternative.\n. @mikesherov To clarify the potential implementation, are you talking about adding another cli option that allows a user to supply a path to a filters module (that exports a function that takes in the error list) that we require in and call with the errors before passing it to the reporter?\n. 1. Should we support a user providing a path to a directory containing various filters? Or solely accept a path to a single filter (they could just wire up multiple filters to be used within a single filter module)? \n   - If we don't support a directory of filters, then I don't really see the need for an array of filters (I'm not entirely sure that a maxErrors belongs in the filter list given its far reach outside of the errors object)\n2. A \"filter\" should be a function (whose context is a lib/errors object) that accepts the following error literal and returns a boolean indicating whether or not the error should be subsequently added to the error object's _errorList.\n3. Upon calling errors.add within rule checking, we run the generated error literal through all of the filters. If the error passes through (all filters return true indicating that a rule should be added), then proceed with adding the error to the _errorList.\nAre we in agreement of what a filter should do, has access to, and when it's invoked?\n. Thanks,  Mike.\nI wanted to avoid the case of post-filtering since maxerr would cap the\nnumber of errors - yielding an incorrect number of filtered errors.\nIt would be strange to see 2 errors reported post-filtering when there are\nmore errors that weren't part of the first unfiltered batch of 50 errors.\nBy filtering before adding an error,  we give the user a relevant set of 50\nerrors.\nOn Oct 1, 2014 7:20 AM, \"Mike Sherov\" notifications@github.com wrote:\n\n\nWe should accept a file path to a filter for right now. In the future,\n   we could extend this to accept a directory too with no API change needed.\nI was envisioning a filter as 2 parted: 1. a function for filename\n   filtering, ran before any checking at all, that reduces the list of files\n   to check. 2. A post processor function, right before reporting, that\n   filters by location in file and message. That seems the most\n   straightforward way, IMO.\nNo need to do this if my second suggestion is used.\n\nHowever, I think either method is fine.\nMike Sherov\nOn Tue, Sep 30, 2014 at 11:37 PM, Joel Kemp notifications@github.com\nwrote:\n\n\nShould we support a user providing a path to a directory containing\n   various filters? Or solely accept a path to a single filter (they could\n   just wire up multiple filters to be used within a single filter module)?\nIf we don't support a directory of filters, then I don't really see\n   the need for an array of filters (I'm not entirely sure that a maxErrors\n   belongs in the filter list given its far reach outside of the errors\n   object)\nA \"filter\" should be a function (whose context is a lib/errors\n   object) that accepts the following error literal\n   and returns a boolean indicating whether or not the error should be\n   subsequently added to the error object's _errorList.\nUpon calling errors.add within rule checking, we run the generated\n   error literal\n   through all of the filters. If the error passes through (all filters return\n   true indicating that a rule should be added), then proceed with adding\n   the error to the _errorList.\n   Are we in agreement of what a filter should do, has access to, and when\n   it's invoked?\n\n\nReply to this email directly or view it on GitHub:\n   https://github.com/jscs-dev/node-jscs/issues/335#issuecomment-57415075\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/335#issuecomment-57449613.\n. @mikesherov @markelog I plan to implement the following:\n\njs\n// sample config\n{\n  filenameFilter: 'path/to/my/filter.js',\n  errorFilter: 'path/to/my/filter.js'\n}\nSimilarly, there will be cli options:\n--error-filter <filepath>\n--filename-filter <filepath>\nIn regards to the config, I know that there are various possible forms of a jscsrc. Should I support a function object passed as the value for filenameFilter and errorFilter (similar to Murat's plugin architecture)? Should that be in a follow up commit, if considered? \nI'll open a PR this week.\n. Happy you objected, Oleg. \nThe filenameFilter actually feels duplicative of excludeFiles. \nThe errorFilter would definitely solve this case, but I can't think of another practical use case \u2013 aside from generally allowing users to enrich error messages.\nAgreed that autoformatting would fix the root of this problem.\n@lawnsea What are your thoughts on waiting until we have an autoformatter to take care of fixing all errors within a file?\n. This has been provided to a certain degree by the website: http://jscs.info/rules.html. It doesn't have the configuration out in the open, but feel free to file issues against https://github.com/jscs-dev/jscs-dev.github.io for improvements.\nThis issue hasn't seen a PR to provide the suggested automation so I'm closing for now. Happy to reopen if anyone wants to submit a patch.\n. On this\n. Yes, a few contributors have tried to adhere to the commit guidelines in the contributing guide, but I don't think there will ever come a time when everyone is doing it. \nCan we close this?\n. @mikesherov What do you have in mind? I agree that the commit template isn't incredibly clear at first glance. Perhaps more example commits would help?\n. I'll tackle this if it's not being worked on.\n. @malandrew answered here: https://github.com/jscs-dev/node-jscs/issues/561#issuecomment-73288226\n. @mikesherov I can take care of this one if you're not working on it. \n. To be clear, are we talking about usage like below?\njscs --source \"var a = [1, 2]\"\nThe -s option could be shorthand for --source.\n. Back compat for now is best for landing this. This rule should change its name and config in 2.0.\n. @mikesherov What if we only allow the creation of jscsrc files based on presets? Something like:\njscs -g jquery would create a .jscsrc that's a clone of the contents of presets/jquery.json.\nUnless you're thinking of creating a cli that walks you through the creation of a jscsrc, I'm not seeing the value here that warrants the work of changing how we check for valid inputs.\n. Hey @mdevils. I'm super excited for this feature. Any progress updates on this? \nThis is perhaps the single biggest feature pushing users to ESLint. Need some help? \nThanks in advance. \n. For record keeping, point 2 seems to be taken care of with #492 \n. I'd like to tackle this, unless @markelog wants it ;), to get the 1.6 milestone moving. It's not too far away from what I did for the file-wide config. Have we settled on the api?\n. Folks, I now have a working implementation that's ready for review. https://github.com/mdevils/node-jscs/pull/513\n. @mikesherov Thanks for the tips. Made the edits. Yandex was a killer: barely any open source JS code and the code available required the most edits to fit the preset. \nLet me know if anything else is missing. Thanks for reviewing.\n. @mikesherov Done. I appreciate the comments.\n. @mikesherov Can I just link to this for Yandex? https://github.com/yandex/csp-tester/blob/master/LICENSE\nOr do I need to paste that entire license into the source?\n. I added the appropriate attribution for yandex.\n. @mikesherov Nice work turning that promise thing over so quickly. Rebase done.\n. Thanks for the review guys. I'll trim the sample files down to a few functions that hit all of the rules in the respective preset.\nI guess I'll wait on (or modify) the sample Yandex code.\n. @mikesherov doesn't \"disallowSpaceAfterObjectKeys\": true conflict with \"requireSpacesInsideObjectBrackets\": \"all\" in the jquery preset?\n. @mikesherov @markelog Trimmed down the sample files and made them representative of all of the rules in those presets. \n. @mikesherov Addressed all of them, pending resolution on https://github.com/mdevils/node-jscs/pull/491#discussion-diff-14422462. \n. @mikesherov Agreed. Great tip. Made the edits.\n. @mikesherov This should be mergeable whenever you're ready.\n. @mikesherov Great points. Thanks for the tips. Made the edits.\n. @mikesherov @markelog I opted for the old style of processing stdin, similar to how CSS-Guard does it.\nAdded more tests to ensure that all is well. \n. @mikesherov @markelog @mdevils Made the adjustments. My only concern is that the added tests are slower (they're yellow in color) since they use exec to simulate real command line usage.\nGreat tip on process.stdin.isTTY, Mike. \n. Hi @dstroot, I couldn't reproduce the error with the setup that you provided.\nI received a proper output:\n\nCan you try deleting your node_modules directory and doing a fresh npm install?\n. @rachelnicole is tackling this one.\n. This looks good to me. \n. Looks like the original issue was fixed but now there's a lingering bug. Safe to open a new issue with the bug report and close this feature request?\n. Issue opened https://github.com/jscs-dev/node-jscs/issues/1437\n. @mikesherov @markelog Was there a specific reason that this wasn't done sooner?\n. @markelog Thanks for the clarification. I understand completely. Out of curiosity, what do you have in mind to make registration easier? \n. I'm beginning to think that the JSCS configuration at the top of the file doesn't represent the only configuration that should be applied to that file \u2013 it should be added to (or override) the existing configuration. My current implementation clears the active ruleset and uses the rules defined in the file-wide configuration as the only rule set for the current file; this mistakingly isn't inline with JSHint.\nFor rule configuration overrides, this would imply saving the existing rule configuration, applying the new configuration, then reverting to the old rule configuration after checking the file.\nFor new rule configurations being defined within the file-wide configuration, this would imply remembering which rules are new, processing the file, then removing those newly added rules from the active ruleset.\nPlease confirm the expected behavior.\n. If you have a jscsrc file, then there is an initial configuration, so\nfile-wide configuration for toggling (or, if you want stricter checks for\nsome reason, adding)  options makes sense.\nFor legacy code, it would be useful to be able to incrementally add rules\n(perhaps a subset of a jscsrc file) or turn off JSCS file wide with /\njscs: / as a cleanup process instead of forcing an entire cleanup of the\nfile. Ignoring the file with Grunt is also an option instead of the blank\njscs file-wide configuration.\nOn Thu, Jul 17, 2014 at 6:51 AM, Mike Sherov notifications@github.com\nwrote:\n\nThe difference between JSCS and JSHint is that JSHint has an initial\nconfiguration, with options to relax or enforce more.\nJSCS does not. This makes partial rule application at the top of a file\nalmost nonsensical, and strongly weakens the argument of specifying the\nconfig at the top of the file.\nThe more I think about this, the more it seems that this isn't a feature\nfor JSCS. Yes, you should be able to disable rules inline, but that's a\ndifferent issue.\nLike @markelog https://github.com/markelog asked \"what's the use\ncase?\". I replied \"feature parity and some people don't like using the task\nrunners.\" These seem like weak arguments now.\n@mrjoelkemp https://github.com/mrjoelkemp, thanks for the hard work you\nput in here, but I'd like to keep this PR open a bit longer and discuss\nwhether this is a necessary feature or not.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/pull/513#issuecomment-49291749.\n. Just an FYI, @addyosmani and others, we recently added Bountysource support. \n. Thanks @gero3 for the details. Great ideas.\n\nSome initial thoughts:\nI envisioned this functionality as a plugin (separate repo, possibly using ideas from #335) that takes in an errorList and generates deltas for every error (aggregated and applied to the source's ast). The tool would have custom delta-generation logic for every jscs rule (perhaps even a plugin system of its own for jscs' 3rd party rules/plugins).\nI agree that formatting and error-checking are two separate processes, but they should not live together (as your initial implementation described). I fear that we'll scare off contributors of new rules if they need to worry about providing formatting logic as well.\nAs an aside, It would be great to get esformatter on our side and in the jscs-dev repo: to use our rules and align with our trajectory. Perhaps @mikesherov can reach out and do some smooth talking.\n. > I think that autoformatting MUST be part of the core. To move this\n\nfunctionality to a plugin for fear that it discourages contributions seems\nbackwards to me. Our primary concern is our users first and our\ncontributors second.\n\n@mikesherov It is possible to incorporate the tool in core without merging codebases.\nOur primary concern for JSCS is style checking and auto-formatting is secondary \u2013 though very important and this tool needs to exist (preferably within our organization). It does not need to exist as part of core. In a similar argument, should JSHint absorb fixmyjs' codebase into their core? No. Both tools can live separately and harmoniously.\nDeterring contributors is another way of saying taking on too many concerns within a single tool is adding unnecessary amounts of complexity to the codebase. My fear is that this will raise the barrier to entry. \nCoupling both tools means that no breaking changes to our rules can be made without also updating the formatting code. As two separate (but synergistic) tools, jscsformat can gradually upgrade to newer versions of jscs.\n\nThe AST needs to be generated twice if we want to keep it completely seperate.\n\n@gero3 Not necessarily. As a plugin (or filter), we should discuss core supplying lib/js-file objects in addition to errors. Perhaps @markelog and @mdevils will have some ideas on this communication layer.\n. @markelog can we close this? \n. This solution was worked on by many individuals in the community. Together, we have decided that the bounty should go to charity: https://groups.google.com/forum/#!topic/jscs-dev/u-Gy0Yh97EU. \nAs a core team member, I was nominated to handle claiming the bounty, donating the money, and posting a donation receipt on the issue to notify the community of the donation. I will post status updates on this issue to stay transparent until the donation receipt is posted. \nTo start the claiming of the bounty, I need to close the ticket.\n. \n\nThe bounty will be paid out if all backers accept your claim or if no backers reject your claim by May 28, 2015 8:19 AM (GMT).\n\nI'll check bountysource on the 28th (or sooner if all backers accept the claim) to proceed with the next steps. \n. The bounty was awarded.\n\nI've requested to be paid via paypal. \n\nBountysource took a $31 cut from the funds. That left a balance of 284 (315 - 31).\n. \nGetting it transferred to my bank and will then donate that money. Everyone wants a cut of the funds, it seems. Not even charity gets a break from fees!\nWill post a donation receipt once that's done.\n. Just a quick update. The money has reached my account. I'll donate it on Wednesday and post a receipt.\n. Donation complete. Thanks again to everyone who contributed to the effort.\n\n. Safe to close as orphaned?\n. We're closing this issue due to inactivity: no PR was submitted. We're happy to accept a patch to resolve this issue.\n. I meant nothing by it more than trying to further showcase the tool's effectiveness.\n. Hey @turadg, mind fixing your jscs errors?\n\n. Thanks for the speedy turnaround! \nJust curious, why did you choose \"nested\" instead of \"all\"? That documentation that you linked has examples for flat objects, so I assume the disallow rule should hold for nested as well. Hence, the value of disallowSpacesInsideObjectBrackets and disallowSpacesInsideArrayBrackets should be \"all\".\n. Hey @turadg. Thanks for the insight. From experience, if you're strict on not allowing spaces within flat objects, you're not allowing spaces within nested objects. \nWould you mind making the change to \"all\"? Unless anyone else objects, I think that's the proper value. Thanks in advance!\n. Thanks. LGTM.\n. Great points! The multi-line case should register as a single comment block (need to verify this). That block will fail to parse due to the then uncommented comment (\"This only happens...') not being valid JS, as the comment block's contents are passed to esprima. \n. There hasn't been a PR for this issue in a while. I'm closing it as \"ophaned.\" We'd gladly reopen if anyone is interested in submitting a PR.\n. +1 Love the idea. The proposed implementation sounds like it could work; although, it assumes that a sample is representative enough of the entire codebase to properly assume the rules to set.\nPerhaps this could be extended to an entire codebase where we spawn forks to gather the proposed configs on a per-file basis then the master process could determine the rules to set by the majority. e.g., if 90% of the modules agree on a particular rule's configuration, then that's the configuration to use.\nThis would make a nice generator tool outside of the jscs codebase. That tool could get access to the jscs ruleset by requiring it as a dependency and looking into node_modules/jscs/lib/rules. Not too pretty, but it works. Unless, there's a way to require('jscs') and then get access to the _activeRules.\n. @mikesherov You the man! Great work and turnaround time.\n. @michaelhogg Happy to review a PR with documentation clarification. \n. @BryanDonovan @markelog I added those keywords here: https://github.com/jscs-dev/node-jscs/pull/624. Consider merging mine first, then remove https://github.com/BryanDonovan/node-jscs/commit/293cb2a306d8d195a284fb8b35f44e7cc2c30c38#diff-b1371d87a68476836faccb97701460c3R9.\n. Look out for some additional elements in that array of spaced keywords.\nAlmost done with a follow up to #620. Just an fyi\nOn Sep 5, 2014 4:00 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nI think so, utils.spacedKeywords should do the job\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/555#issuecomment-54673996.\n. My PR is done. Nothing more to add.\nOn Sep 6, 2014 12:48 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\nAlmost done with a follow up to #620\nhttps://github.com/jscs-dev/node-jscs/pull/620. Just an fyi\nAre you planning to add something else, or it's fine as is?\n@BryanDonovan https://github.com/BryanDonovan i guess you merged your\ncommits instead of rebasing them, but it's fine, i'm gonna take care of that\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/555#issuecomment-54720205.\n. @malandrew The --esprima option should work: http://jscs.info/overview.html\n. I'll fix this. \n. @benesch I don't follow the \"if the filename was - (standard convention)\" part of your suggested fix. Can you please elaborate? Thanks in advance.\n. @benesch I added the option to trigger stdin from supplying - as the first argument to the binary invocation.\n\nAny way that you could pull this PR down and npm link to see if it fixes the SublimeLinter issue before this merges?\n. I see that you changed the implementation, so this isn't really relevant anymore. However, are you saying that the stream wouldn't buffer if you still used exec and piped in a really long string instead of a file with really long contents? I'm not familiar with stream internals, but I would think that the two methods are equivalent.\n. LGTM\n. Not true, from my tests. Exec does as well. Try it in the repl.\nOn Aug 16, 2014 3:19 PM, \"Nikhil Benesch\" notifications@github.com wrote:\n\nUnless I've missed something in the docs, only spawn gives you access to\nthe child process's stdin stream.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/pull/565#issuecomment-52403176.\n. @markelog Ready for another review. \n\nI stubbed a few of the stdin tests. However, I need more time to think through stubbing of the other stdin tests. That shouldn't hold up this PR and would be more appropriate for https://github.com/mdevils/node-jscs/issues/547.\n. @benesch Great tip! \nI'm thinking something like checker.checkStdin(callback) where callback resolves with the input string.\nI think this improvement could be in a separate PR since it would require a refactor of cli.js and new tests for checker. process.stdin.on no longer being a spy (for some reason) doesn't seem like a blocker since the suite passes.\n. LGTM. Nice work.\n. Try using null instead of false. Should work well. \n. Great suggestion. You definitely have access to all CallExpressions in a file. You also have access to all FunctionExpressions and FunctionDeclarations and their line numbers. Totally possible to implement. Would you like to give the implementation a shot? \n. Perhaps more jscs-appropriate example is whether or not a codebase allows implicit hoisting (i.e., whether to put function declarations at the top or bottom of a file). \nThis gets complicated when certain scripts require declarations at the top of the file (when functions are being called right away instead of upon invocation of another function.\nExample:\njs\nfunction foo() {};\nfoo();\nIf you have a style check that asserts that function declarations are at the bottom of the file, you're now in a bad place.\n. Now I don't see it. Must have been an issue with my machine.\n. Hi @luanmuniz, thanks for inquiring. It's already available: https://github.com/jscs-dev/node-jscs#error-suppression.\n. Thanks for filing the issue! I'll look into this further.\nAs an interim fix,  try adding a hyphen as last argument to the second\ncommand. It might force the cli to check stdin; although this particular\nerror message leads me to believe that the hyphen won't kick-in in time.\nOn Aug 21, 2014 5:51 AM, \"Dieter Luypaert\" notifications@github.com wrote:\n\nI have a pre-commit hook that checks jscs.\nThe first command works fine validating with the default settings.\n$ git show :$file | node_modules/jscs/bin/jscs\nMissing space before opening curly brace for block expressions at input :\n    77 |\n    78 |        /* Activate the select component. /\n    79 |        activate: function(){\n-----------------------------------^\n    80 |            // setup dependencies\n    81 |            Application.with('actionbar').run(Select._withActionBar);\nThe second command.\n$ git show :$file | node_modules/jscs/bin/jscs -- config .jscsrc\nNo input files specified. Try option --help for usage information.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/584.\n. @Moeriki I'm having trouble reproducing this issue against the master branch; I very recently did some work on fixing stdin. Your issue should be resolved with the next release (cc @markelog).\n. @mattyurka Disabling the rule might help your case. https://github.com/jscs-dev/node-jscs#inline-comments\n. Agreed with @zxqfox. A list of exceptions seems to be the way to go if we'd like to minimize the maintenance of this rule. Plus, allowing any non-word characters via the regex weakens the rule quite a bit for just a few edge cases.\n. @zxqfox If @mikesherov agrees, would you like to add the ability to supply an array of exceptions?\n. @markelog Fixes made. Thanks!\n. Will do.\n. @markelog addressed in https://github.com/jscs-dev/node-jscs/pull/607\n. What's the output if you just run mocha?\n. Yes. \n. Hi, which version of jscs are you using? This feature was released a few\nversions ago.\nOn Oct 22, 2014 11:44 AM, \"Konstantin Tarkus\" notifications@github.com\nwrote:\nAny update on this issue? It seems like adding // jscs:disable doesn't\nmake any difference, jscs still tries to validate everything.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/603#issuecomment-60066474.\n. > btw, where did you get code example?\n\nI manually created a sample that (probably not completely) covered the styleguide.\n. @hshoff that's awesome! Thanks!\n. @markelog Good call. Done.\n. Done\n. What's the heuristic for determining a \"naive\" var name? \n. DisallowSingleLetterVarNames sounds like a great rule. Only exception is\nwithin a loop (though that could be an optional exception).\nDisallowVarNames with a list of names and/or regexes sounds okay too, for\navoiding overriding app globals like $.\nOn Aug 31, 2014 9:20 PM, \"Morgan Cheng\" notifications@github.com wrote:\n\n@mrjoelkemp https://github.com/mrjoelkemp The definition of \"naive\"\nmight be project-specific. So, the regex of \"naive\" should be configurable\nin addition to a default value.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/612#issuecomment-54007650.\n. > But what if this i would be used outside of the loop\n\nThen it should not be a single letter identifier since it has meaning to the rest of the program. Historically, single letters are only reserved for temporary, one-off contexts like loops. \nThe alternative: looking for an identifier (in the same scope as the loop) that matches the identifier used in the test statement feels like a lot of work to excuse what's taught as a bad practice.\n. @markelog @mikesherov Made the edits. Thanks for reviewing.\n. Thanks for the suggestion. Would you like to add those links to the readme?\nOn Sep 11, 2014 8:57 AM, \"idok\" notifications@github.com wrote:\n\nPlease add jscs intellij plugin to Friendly packages:\nhttp://plugins.jetbrains.com/plugin/7554\nhttps://github.com/idok/jscs-plugin\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/628.\n. Thanks a ton for reporting the false positive! We'll take a look soon. \n. I can't seem to reproduce against the master branch. \n\nHere's the (passing) test that I mocked up for verification:\n``` js\n    it('should not report with a regex is present #(629)', function() {\n        function foo() {\n            var direction = 'foo'.match(/(\\w+)Number/)[1];\n        }\n    assert(checker.checkString(foo.toString()).isEmpty());\n});\n\n```\nCan you provide the version of jscs that you're using and/or check that file against the jscs master branch?\nThanks.\n. Thanks for contributing! \nAs far as I know, we've been using the tag release notes to provide linkable changelogs. Wouldn't hurt to have parts of the changelog.md linkable though. I see no harm in this.\nWill wait for @markelog to give the go ahead.\n. Thanks, closed via https://github.com/jscs-dev/node-jscs/commit/b615bd79a809ba72b4dfcb00bebd039380c5e011\n. Following the jquery guide now. Thanks for the tip! Better?\n\n. @markelog Thanks for clarifying; I appreciate it. Hoping my latest change better adheres to the guidelines. \n\nI'm all for using the jquery style \u2013 it provides a really helpful summary in the commit messages. Using commitplease for this purpose sounds fine so long as it doesn't require any manual githook setup.\nPerhaps a quick beginner's guide (specifically doing git commit without options to open an editor) to achieve this style of commit message would avoid scaring folks off. \n@markelog @mikesherov Is there a guide on the exact flow that you guys use to reword commits for merged PRs that need to be touched up? I'm thinking of a git reset --soft HEAD^ then git commit -am \"proper msg here\" --author=\"whomever\". Not sure if an interactive rebase (to reword the commit) retains the original author. Any help is appreciated; I won't feel comfortable merging anything until I have that flow solid. Thanks in advance. \n. Thanks Oleg. I appreciate the help. Will merge today.\nOn Sep 18, 2014 8:24 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nIs there a guide on the exact flow that you guys use to reword commits for\nmerged PRs that need to be touched up?\nNo, any way you do this is fine, matter only the result i suppose.\nNot sure if an interactive rebase (to reword the commit) retains the\noriginal author\nIt will, i usually use it. Also if you think the changes in commit need to\ntouch up a bit (like a add comment or something) and you don't want to\nbother the author you can make the commit than \"squash\" or \"fixup\" it.\nYou can also always use git commit --amend --author=\"...\"\nFeel free to merge #630 https://github.com/jscs-dev/node-jscs/pull/630\nas an exercise\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/631#issuecomment-56037181.\n. @markelog Done: https://github.com/jscs-dev/node-jscs/commit/b615bd79a809ba72b4dfcb00bebd039380c5e011. Had to manually close the issue after pushing the modified commit upstream; hope that's normal. Let me know if anything is wrong with the commit. Thanks again!\n. Got it. Thanks Mike.\n\nOn Thu, Sep 18, 2014 at 1:01 PM, Mike Sherov notifications@github.com\nwrote:\n\n@mrjoelkemp https://github.com/mrjoelkemp yes, normal because the SHA\ntechnically changed. Just close the issue, and say \"Thanks. Landed in \".\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/631#issuecomment-56077984.\n. Nice catch. Thanks\nOn Sep 18, 2014 2:34 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\nCloses: gh-630 https://github.com/jscs-dev/node-jscs/pull/630\nColon is the issue, do it without the colon and github will close it for\nyou\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/631#issuecomment-56090312.\n. +1 Thanks!\n. @mikesherov Couldn't we just loop over every module in lib/rules and for each rule:\n1. require it\n2. Use the getOptionName method of the rule to get its name\n3. add it to an empty config (plain object) with a default value of null\n\nWhen we've finished iterating over all rules, we can then stringify the config and dump it to disk. \nThis functionality could be achieved via a new cli option that serves as a dummy config generator.\n. @mikesherov :) :) Actually, this seems very similar to (if not a duplicate of) https://github.com/jscs-dev/node-jscs/issues/352. Agree?\n. @mikesherov Fine with this addition? \n. @markelog I couldn't find examples of truly deprecated rules. The other \"deprecated\" rules are also removals (perhaps removed in the major bump to 1.0, I'm assuming).\nIs there an example of how we properly deprecate a rule? Thanks in advance.\n. @markelog @mikesherov Reverted the changes to the presets and the rule. The readme points users to the plugin instead. \n. Good to land?\n. Hey @pomeh. Thanks for the suggestion; you already got the ok, so it's unlikely to be rejected. We love having community members contribute features and enhancements, so please feel free to help out. \nIf you're stuck or have questions, post them to this issue and we'll help you out :) \nThanks again for contributing. \n. > BTW I've not seen any detailed recommendations about PR in CONTRIBUTING.md. I'll use MAINTAIN.md as a starting point for now !\nWhat kind of details are you interested in? We'd love to make those documents more helpful. Any suggestions are appreciated. Thanks in advance.\n. @pomeh Great points. I'll work on improving the documentation to make it easier to contribute. Thanks a ton for the help.\n. Hey @pomeh. Thanks so much for your thoughts; you bring up another set of great points.\n\nPlease not there's no offense in any of my remarks\n\nNone taken. Any and all feedback is welcome :)\n\nany \"quick start guide\" would be really appreciated. I'll fail and repeat until I get some result :)\n\nIt's difficult to know how much instruction to provide newcomers to the project. As much as we try to lower the barrier to entry, there is some exploration of the codebase and technologies that's required for the problem domain. We can most likely do better when it comes to in-code and architectural documentation, but the learning curve exists in all large projects.\nAs for your earlier questions/points, esprima and nodejs' documentation are necessary references (if you're not already familiar with those tools) while learning the core of jscs.\n\nAlso, one simple question: why is it possible to get all tokens via getTokens which returns this._tree.tokens and it's not possible to get all nodes ?\n\nCan you share some details on the algorithm that requires access the entire node list? There might be an existing way to achieve the same thing. \nBe sure to check out the requireSpaceAfterKeywords rule; the Keyword token iteration might be relevant.\nThanks!\n. Hey @pomeh. Thanks for the questions.\nIn regards to why the keywords you listed are missing, the list is used in the requireCurlyBraces rule. The stylistic choice is indicative of whether or not braces are included. For function, you need to provide braces to define the body, so it's not a choice. You've identified a bug however, where with has optional braces (which I wasn't aware of). Thanks to Crockford, this may never have been reported :P I'll patch it accordingly\n\nwhile I do not for switch and default. Is it ok for you or should I add those two also ? \n\nI think they should be added.\n\nwhat do you think about this algorithm for now ? Does it looks ok for you ?\n\nCommented on the commit: https://github.com/pomeh/node-jscs/commit/d95a90b93f6c1c204ce2542ada02e22a6fb6e8c7#diff-04b100573b89ec338d98f12d62f652d9R14\n. Great point about try/catch being listed. Removing them from the utils list.\n\none list with all curly braced keywords (with function, try, if, siwtch, etc..), and one with the subset where curly braces are optional (with if, case, ...),\n\nSounds like a plan. Would love to get input from others once a PR is opened.\n. Hey @andreineculau, thanks for the report. I added a test that passes for your code sample with validateIndentation set to 8: https://github.com/jscs-dev/node-jscs/pull/641/files#diff-99d2d4153117bcc108478af3d2e4cb08R39. \nThe rule seems fine. Are you using the ES6-supported esprima version? We've had some issues pop up from that recently.\n. @markelog @mikesherov @pomeh Thoughts on the added details? More background information on the AST structure and key parts of the codebase (like files in lib/) are still missing, but I'd like to get this 1st draft landed for us to point to when reviewing PRs or responding to issues.\n. Hey @Skywalker13. Thanks for contributing!\nThis rule sounds totally feasible. A more appropriate name (similar to other rules) might be (require|disallow)SpacesInFunctionInvocation.\nWould you like to implement this? To get started, you can iterate over all CallExpressions and assert that there is a (or many) spaces.\nLook at the following rules (within lib/rules) for tips on how to structure your implementation:\n- https://github.com/jscs-dev/node-jscs#requirespacesinfunctionexpression\n- https://github.com/jscs-dev/node-jscs#disallowspacesinfunctionexpression\n- https://github.com/jscs-dev/node-jscs#requirespacesinnamedfunctionexpression\n- https://github.com/jscs-dev/node-jscs#disallowspacesinnamedfunctionexpression\nFeel free to ask questions if you need help or get stuck. We're more than happy to help.\nIf you would like more information on getting started, be sure to check out the contribution guide: https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md\n. Hey @pomeh, thanks for the awesome suggestion!\nI have mixed feelings about this rule as I personally think TODO-like annotations in codebases are a good thing. \nI also think that this rule has the potential for a lot of false positives. This could be remedied with regexes, but 1) you're offloading the work to the end user and 2) the regexes would have to bank on positioning, casing, prefixed and/or postfixed characters to better guess what's an actual violation.\nI think this would be best served as an external plugin, but I welcome the opinion of @mikesherov on whether or not this should be in the core. \n. Sounds like a good plan. Would you like to work on this rule?\nOn Sep 28, 2014 5:56 AM, \"Romain Guerin\" notifications@github.com wrote:\n\nI also think that this rule has the potential for a lot of false\npositives. This could be remedied with regexes, but 1) you're offloading\nthe work to the end user and 2) the regexes would have to bank on\npositioning, casing, prefixed and/or postfixed characters to better guess\nwhat's an actual violation.\nI think we can have something strong using regexes, to match only comment\nlike this // TODO: xxxx for example. It sound quietly simple to me atm.\nAnd the idea of the user supplied keywords/regexes list is also to\n\"bypass\" that false positives problem: if you get one of them, then you\njust have to edit the associated regex with no code modifications. And it\nbrings a lot of power to end users. And we can propose some default values,\nlike for TODO/FIXME-comment or whatever.\nThis way, the rule could be used with its default (\"disallowKeywordInComments\":\ntrue), or with user supplied values (\"disallowKeywordInComments\": [\"a\",\n\"b\"]).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/646#issuecomment-57080686.\n. Hey @pomeh, still interested in implementing this rule?\n. @joesepi This is a great rule to get started with. \n\nCheck out https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md#implementing-features. \nYour rule will be structured similar to: https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-capitalized-comments.js. In that, you will follow the general rule structure, use file.getComments() to get all the comments and then for each comment, if it contains a word in the user-supplied list of words, add an error to the errors list. \nPoke around some of the other rules that use comments and you'll see some common patterns on how rules get used. \nFeel free to ask questions!\n. Yes. Good call. What a coincidence.\nOn Sep 23, 2014 8:29 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nClosed #648 https://github.com/jscs-dev/node-jscs/pull/648.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/648#event-168973833.\n. Thanks, will review soon.\n\nOn Fri, Sep 26, 2014 at 3:13 AM, Coveralls notifications@github.com wrote:\n\n[image: Coverage Status] https://coveralls.io/builds/1259412\nCoverage increased (+0.11%) when pulling b2ae64a\nhttps://github.com/jscs-dev/node-jscs/commit/b2ae64a519b6c470758f5f0981fc9c3776a769a3\non Skywalker13:spaces-call-expressions into 467a170\nhttps://github.com/jscs-dev/node-jscs/commit/467a170f26678bb895ca734e8feb6c8c30981c80\non jscs-dev:master.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/650#issuecomment-56927229.\n. @Skywalker13 This looks great! Parentheses-wrapped IIFEs and callees made this a bit more complicated than I thought, but you did a great job. \n\nDuring the review, I came up with another implementation that found the closest token at the end range of the nodeBeforeRoundBrace. That required a new method (getClosestTokenByStartRange) in js-file that looped and incremented the given range until a token was found. This way, you could avoid spaces between the callee and ( yielding an undefined in getTokenByRangeStart. Your implementation works around this well.\nMerging soon.\n. Closed via https://github.com/jscs-dev/node-jscs/commit/2643f3ee225bb05a073af99881e20582d2e0ddb1. Thanks again! \nWould love your help on other issues.\n. Just keep in mind that inline disabling of rules needs to still work. In other words, // jscs disable should still be valid above the line. \n. Ping @GrayedFox. Still interested? \n. Go for it @bjdixon. We could use the help!\n. Ready for review.\n. @mikesherov done\n. Safe to land?\n. LGTM if it's definitely not used elsewhere in the codebase. \n. It may be a long road to 2.0. There will be many new rule requests and community PRs until then. Will we jump from 1.7 to 2.0? If not, it makes sense to document what we have so that we can spend less time reviewing and more time completing milestones. Of course, this would curb community contributions to core, which is not great. \n. Understood. Shall we try to clear out what we can from the current list of PRs and then recommend waiting for the plugin system for new rule suggestions? It doesn't make sense to advocate for using additionalRules if the api for the plugin system will be different. \n. Closing to wait for the new plugin architecture. \n. @mikesherov @markelog Ready for review. \nI think the name maxErrors is better than maxerr. The only reason to go with maxerr is for familiarity with jshint. I'd like to keep it as maxErrors unless there's a strong objection to it.\nI originally wanted to explicitly test the fact that lib/errors throws when the max number of errors has already been reached, but that felt like testing implementation details. I'd have to instantiate a lib/errors object, set the static property, then try/catch the use of the add method. This functionality is implicitly tested by the fact that error limiting works.\n. Regarding the \"we found more errors\" message, how about the following options: \n- 50+ code style errors found.\n- At least 50 code style errors found\n- 50 code style errors found. But wait, there's more! :)\nThis is only a suggestion for the console reporter. Does that suffice, or should other reporters include an indication of there being more errors? I'd assume the console reporter is the most popular and we'd wait for filed issues to add the functionality to the other reporters.\n. Should we also consider allowing a value of 0 turn this feature off? Our tests would hit the maxErrors limit. We could supply a large, arbitrary number of errors to get around this.\n. I can likely add the suite for reporter/console tomorrow night to get the coverage back up.\n. It may look horrible, but it's semantically correct. There's no need for instances to carry duplicative information that should really be global to all instances. \nAn alternative is to have a \"static\" property defined on the Errors prototype: \nErrors.prototype._errorCount = {value: 0}\nInstances can then increment this property without touching the constructor. I'd be able to do the same test-specific override by modifying the value of _errorCount. \n@markelog Would that be better?\n. > Not sure if i understand what do you mean by that.\nI meant that it's better at achieving the actual meaning of the feature: disallowing jscs to report more than maxErrors across all files (and errors instances). The prototypal way also achieves the ideal. \nAt the end of the day, a static count of the number of errors reported so far is needed to implement this feature correctly.\n\nHard to say, without doing the actual implementation. But i guess the right way would require rework the errors module.\n\nIf the errors module exported a singleton, that would work too.\n\nNow it created for each file, can we create it on each StringChecker instance?\n\nThat's a good idea. The string checker defers to each rule's check method which could potentially add more errors than maxErrors before the checker regains control. You could then slice off the extra errors, which is not far from what I'm doing. I simply avoid extra errors from being pushed, which doesn't actually halt processing (just avoids the need to slice).\n. @markelog @mikesherov Ready for re-review. \n. @mikesherov Thanks! Nitpick addressed. \n. To be clear,  I'm proposing linking to the rules section, not each rule. \n. I'm mistaken here. \n. I think @mdevils needs to be the one to enable this. \nTo enable:\n1. Signup on bountysource\n2. Go here: https://www.bountysource.com/tools\n3. Find node-jscs\n4. Install the plugin\nI'm getting the following error:\n\n. Cool,  thanks!\nOn Oct 7, 2014 3:41 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nCool\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/667#issuecomment-58247561.\n. I'm sure @mikesherov cries a little when he sees validateIndentation\nenhancements :)\nOn Oct 7, 2014 7:27 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n/cc @mikesherov https://github.com/mikesherov\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/670#issuecomment-58170371.\n. I like it too. Having this configuration logic in a single place makes the flow clearer. +1 for the plugin hooks. Great job.\n. When can we land this? Should we land a follow up commit fixing the stdin issue and adding tests? 1.7 is long overdue. \n. Looks good. I'll file an issue to write a test for the stdin case,  but it looks fine as is. Nice work! So excited for the release :) \n. Agreed about the benefits of showing maxerr as an error. Is this a blocker for 1.7? Could this follow up change be pushed to 1.8?\n. Should we say 1.7 ships with no default (it's opt-in) and 2.0 lowers the\ndefault to 50?\nOn Oct 14, 2014 8:44 AM, \"Marat Dulin\" notifications@github.com wrote:\nI agree with @mikesherov https://github.com/mikesherov about reporting\nstyle about this error.\nBut right now I'm talking about current CI-integrations and Instruments\n(like Sublime integration) which expect all errors to be reported. For them\nchanging this option value from Infinity to something else will be a\ncompatibility breaking change.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/673#issuecomment-59036518.\n. Hey @eltacodeldiablo, thanks for contributing! This is great. \n\nWe should consider adding a \"How to Contribute\" item (linking to contributing.md) at the bottom of the table of contents. I'll do that in a follow up commit.\nWill merge soon! Thanks again!\n. Landed in https://github.com/jscs-dev/node-jscs/commit/d42dbab2f6b4bc6416fa604bb7500b5887f1fcfd. Thanks again!\n. Thanks\nOn Oct 10, 2014 7:48 PM, \"Mike Sherov\" notifications@github.com wrote:\n\nFor reference: http://www.jshint.com/docs/options/#bitwise\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/678#issuecomment-58729536.\n. Looks great. Nice work! Can't see anything wrong with this; LGTM. \n. Hi @lukaszfiszer. Thanks so much for reporting the issue. cc @mikesherov \n. @jzaefferer It passes if you add a newline at the end of the string. Printing out the errorList for that case yields:\n\n[ { rule: 'requireLineFeedAtFileEnd',\n    message: 'Missing line feed at file end',\n    line: 2,\n    column: 0 } ]\nI got that test to pass once the \\n was added to the string.\n. I'm still not sure what's causing that error you reported though; as the snippet passes the tests (with the trailing newline). Have a link to the source code? If not, A larger code sample would help. \n. I'm still not sure what's causing that error you reported though; as the snippet passes the tests (with the trailing newline). Have a link to the source code? If not, A larger code sample would help. \n. @jzaefferer The first time I downloaded the commitplease repo, npm installed, removed the nullification of the rule, and ran jscs commit-msg-hook.js, I saw the error. \nLinking to a local version that has the most recent jscs master didn't show the error. Also, unlinking, blowing away commitplease/node_modules, and npm installing fresh didn't yield the error.\n~/D/commitplease-master node ./node_modules/jscs/bin/jscs commit-msg-hook.js\nNo code style errors found.\nCan you try removing node_modules and doing a fresh npm install? Can't say I'm sure what caused the error.\n. @jzaefferer Any updates on this? \n. Nice work, Oleg. \nHow are you going to map the configuration items to the existing rules? The current way is nice because we rely on the user to indicate the rules to use. Is the plan to change the returned value from each rule's getOptionName to indicate the category (ex: \"blocks\") and the rule (\"curlyBraces\")?\nA few nitpicks:\nhttps://gist.github.com/markelog/752e53faf9f27de4024d#file-gistfile1-js-L15\nexcept instead of expect\nhttps://gist.github.com/markelog/752e53faf9f27de4024d#file-gistfile1-js-L45\nTo keep with the style, maybe empty instead of emptyBlocks?\n. @zxqfox How would that help plugins? Can you elaborate?\n. @mdevils beforeOpeningParenthesis is definitely more correct. +1 to using the standard names.\n. > module name with a mandatory prefix jscs-, if string with a prefix is used, it would search for that module in node_modules folder relative to the .jscsrc config of the project, i.e. require it.\nThis would allow for presets outside of jscs core right? That's a great solution.\n\nIf package.json of that module has main property in it, jscs will require and execute it with configuration module as an argument, otherwise it will try to use .jscsrc file on that path,\n\nI don't quite follow what this achieves. \nIf a module's package.json has a main property, then this module is a plugin?\nOtherwise, we'll use a .jscsrc on that path (as in do style checking against the path)?\n. @zxqfox Sounds interesting, but can you supply an example of the options property and the cli flag? I'm not seeing the full picture.\n. A bit of discussion on this issue going on in Gitter: https://gitter.im/jscs-dev/node-jscs?at=55566279811d64626eebcb40. \nWe're torn between forcing users to change their configuration in 2.0 versus having an internal conversion proxy to allow users to not have to change their config.\n. Yes, I'm looking at #895.\n. :+1: \n. @kellyselden Thanks so much for the fix. Landed in https://github.com/jscs-dev/node-jscs/commit/1f4f8adabd0b21afbdb2fc0333575acfb6a2c666\n. Great job! Sounds like a doozy\nOn Oct 21, 2014 8:15 PM, \"Fabr\u00edcio Matt\u00e9\" notifications@github.com wrote:\n\nFound the issue:\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/checker.js#L29\npath.dirname() returns a capitalized drive letter while process.cwd()\nreturns a lower-case drive letter. Then the path.resolve here\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/options/exclude-files.js#L6\nkeeps the original casing and minimatch does not play well with lowercase\ndrive letters apparently.\nThis is probably a Node issue, I recall seeing some discussion about drive\nletter casing, I'll have to check on their repository to see if there has\nbeen a consensus.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/703#issuecomment-60019555.\n. Hey @sindresorhus! Not sure why this problem is just surfacing, we've been modifying the config for a while now.\n\nIs there a reason why the esnext flag is being deleted from the config in the first place? \n. Safe to close this since the configuration changes landed?\n. Safe to land, friends?\n. This is ready now. cc @mikesherov @markelog \n. Thanks for the comments guys. Made the edits. Feel free to merge, or ping me to merge if it looks good.\n. Merged. Thanks again!\n. @markelog We should maybe write a cli command to generate all this helpful\ndebug info that could pipe to a cross-platform pbcopy. cc @hzoo\nOn Sep 29, 2015 7:47 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\n@shellscape https://github.com/shellscape would you mind posting your\nconfig, jscs version and output of the jscs --verbose ... with both\nversions of your code?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/714#issuecomment-144035293.\n. Not sure if that would mistakenly trigger node's debug mode, but yes.\nOtherwise --debug-info works.\nOn Sep 29, 2015 8:07 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\nlike --debug or something like that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/714#issuecomment-144039180.\n. Hey @yelworc. Thanks for the great suggestion. Would you like to submit a PR with the change (and short test)?\n. Thanks for the PR @yelworc. Can you also modify the readme to list the new exception?\n. Merged! Thanks again for contributing.\n. Nice work @hzoo! I like that this doesn't break back-compat (which makes it a candidate for 1.8). \n\nWe should consider making this new value adhere to the new rule spec and use disallowDanglingUnderscores: { except: [] }\nI also like having a default set of the most common exceptions as it would be redundant to exclude very common underscored properties. \nFYI, perhaps __proto__ should be added?\n. @hzoo nice job! Thanks for contributing.\n. Hi @donaldpipowitch. Is it that you're trying to turn off the requireCurlyBraces rule (from a preset, I assume)? If so, you can set the value of that rule to null. Does that help?\n. I understand. Sounds like we need a new rule disallowCurlyBraces that accepts true or a list of keywords whose braces to disallow.\nWould you like to give this a shot? We could definitely use the help. \nIf so, you can look at the implementation of requireCurlyBraces for an idea of how to support the value of true and the list of keywords. Feel free to ping me if you run into any problems.\n. Ready for review, friends. cc @mdevils @markelog \n. Ready for review.\n. Ready for re-review: @mdevils and @markelog \n. @mikesherov Please give this a final look over when you have a chance. Just need a thumbs up to merge this. Thanks in advance.\n. Yay! Thanks for reviewing, all.\n. This is amazing work @mdevils. Bravo on getting this done and fully tested. \nI have no glaring problems with this approach; I'm sure issues will arise in the near future we start working with (and extending) this new format.\n:+1: \n. Can we move the discussion of the plugin system to another issue? I'd like to land this config change since it's holding up other PRs. \n. Hey @christophercliff. Thanks for contributing. This looks great. \n1. Can you add the rule to the Readme.\n2. Would you mind also implementing the reverse rule: requireSemicolons?\n   - If you don't have time, we could probably land this and have requireSemicolons in a follow up PR.\ncc @markelog \n. Sounds good. Will merge very soon. Thanks again!\n. @markelog k, feel free to merge when you're ready.\n. Yes, browserify. Damn. Great catch.\n. @hzoo Thanks for contributing! Great job! This looks good to me. \n. @hzoo Nice work. Thanks for contributing!\n. Hi @webdesserts, thanks for filing the issue. We need to cut 1.8.0 soon. The rules will be available then. Thanks for the nudge :)\n. Thanks @gustavohenke! \n. Great catch. Closing this.\n. @mdevils looks good. feel free to merge.\n@zxqfox Great job! Thanks!\n. Hey @lencioni. Thanks for reporting the issue. I'm not sure there's much we can do here; there will always be a color scheme that creates this problem regardless of the color that we choose.\nI'm going to close this since there are workarounds (changing color scheme or using --no-colors), but will cc @mikesherov in case he has any additional suggestions.\n. +1 to this. Been thinking about this a lot. Would the enhancements to that lib only include features that help JSCS?\n. @mikesherov I'm not sure what the action steps are to get the CST moving forward. Any suggested readings or an established process for getting this together?\nDo you have thoughts on what the CST would look like? Would this be a PR into Esprima and possibly formally standardized?\nAre you hinting that we just use rocambole instead of vanilla esprima to construct our token and node lists?\nNot sure what the next step is.\nI also don't think extracting JS-file into a utility module for ast traversal conflicts with the CST effort. \n. Seems so. +1 to closing. Will let @markelog decide.\nOn Jul 9, 2015 8:50 PM, \"Henry Zhu\" notifications@github.com wrote:\n\nShould we close this specific issue since we're talking about a CST now?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/747#issuecomment-120187730.\n. Scheduled for tomorrow.\n\nOn Tue, Mar 17, 2015 at 11:20 AM, Stefan Penner notifications@github.com\nwrote:\n\neta for 1.12?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/748#issuecomment-82407513.\n. Thanks for this @hzoo! Great work getting this together. I agree that the condition is hard to follow. See my suggestion for making it a bit more readable.\n\nI'm pretty excited to land this, as it's one step closer to the grunt preset and JSCS being used throughout the Grunt plugin ecosystem.\n. Doesn't matter much; we'll clean up the commit messages before merging to master. Amend + force push is totally fine.\n. @hzoo Great work! Thanks for contributing.\n. This looks good so far. I'm having a hard time seeing what you'll do with these collected errors; looking forward to reviewing the implementation of #5.\n. +1 to the separation of entities in jsfile. Is this jsfile api exposed outside of jscs? Just wondering if this is a breaking change. \n. @mdevils Any chance we can start shipping this effort without all rules needing modification? \nI'd like to do a few things, if we can:\n1. Minimize conflicts between ongoing bug fixes and rule extensions and this auto-fixing effort\n2. Split the effort of reworking rules across the maintainers\n   - This makes sure that we're all on the same page at an implementation level in addition to getting the work done faster\n3. Implement auto-fixing for a few rules (if possible) and increase the number of auto-fixable rules over time.\nIn regards to the bounty, let's avoid saying that a particular PR \"fixes\" the issue. This way, the bounty stays open, either until we're convinced that this approach works, or until all rules have been rewritten. Instead of closing the bountied issue, link to that issue in each shippable PR for this effort.\nThoughts? /cc @markelog @mikesherov \n. LGTM\n. Yes. Thanks for the reminder.\n. Will wait for @markelog to give the +1 before merging.\n. @stephanebachelier Yes. We're releasing 1.8 on 11/19. I'll ping you and @vladikoff when that happens and finish up my PRs for bringing jscs to grunt plugins.\nAny interest in bringing JSCS to Yeoman? The google preset should suffice for that.\n. @stephanebachelier Thanks for the clarification. +1 about the yeoman styleguide being a tweaked version of the grunt preset.\nI'll likely test yeoman's source against the tweaked grunt preset (before the jscs release) by npm linking jscs in grunt-jscs then npm linking grunt-jscs in the yeoman codebase.\n. Added the 120 line width to the preset. I think this is ready to merge. \n@stephanebachelier Should we consider a Yeoman preset? Does that styleguide get used on a good number of projects?\n. Looking to land this today.\n. Landed via cea14d6d94be19123113164da95ab4b1ea0f5614\n. Any way to write a failing unit test for this? Not sure if the change is that simple.\n. @hzoo You can use .getErrorList() to get the list of errors then assert properties about the column field.\n. Would be nice if we could hook building the bundler and running a subset of our mocha tests on the bundle into travis. \n. Hey @ForbesLindesay, thanks for the suggestion! \nI believe the new (soon to be released) value: exceptUndefined would work for you. Please see https://github.com/jscs-dev/node-jscs/issues/451 and the documentation for the new value: https://github.com/jscs-dev/node-jscs#valid-for-exceptundefined.\nWe're releasing 1.8 on 11/19 (or sooner).\nLet me know if I'm missing something and I'll reopen.\n. @zxqfox Thanks for the insight. Are you able to create a wiki page with this info and link to it on the jscs readme?\n. That looks great. We can always add to it later if folks need more of a\nwalkthrough.\nMind submitting a PR linking to this wiki page within the readme?\nThanks again!\nOn Nov 11, 2014 7:50 AM, \"Alex Yaroshevich\" notifications@github.com\nwrote:\n\n@mrjoelkemp https://github.com/mrjoelkemp\nhttps://github.com/jscs-dev/node-jscs/wiki/Plugin-API Somehow like that?\nI'm not sure what to write there ;-(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/760#issuecomment-62542327.\n. We could also use a section detailing the plugins: ['blah'] api. Perhaps you could link to that section in the table of contents then link to the wiki for more details. Like this section: https://github.com/jscs-dev/node-jscs/pull/728/files#diff-04c6e90faac2675aa89e2176d2eec7d8R225 \n. @zxqfox Didn't you do that in your recent commit? What do you mean by separated section?\n. @zxqfox For such a core feature, I think we should keep the mini section in the readme and link to the wiki page for details. We haven't used the wiki really, but I agree that it could replace large sections of the readme (rules being a nice one).\n\nWant to open a ticket proposing what the wiki structure should be?\n. @zxqfox Thanks again! Merged.\n. :) Was too small of a change to hold up the PR. \n. Hey @dfilatov! Thanks for reporting the issue. I'll look into this. @mikesherov is more intimate with the rule and might have some insight into the problem.\n. +1. Thanks @indexzero!\n. Hi @aik099. Thanks for the great idea. This would definitely be helpful for covering all JS within a codebase.\nWould you like to give the implementation a go? We could use the help. The jshint technique of using an html parser and then extracting the source still applies. You'd likely have to pipe that through checker.checkString to gather the errors within cli.js.\nWe can bikeshed more implementation ideas if you are interested.\n. @aik099 Currently there's no html parser involved, but that's necessary to implement --extract. \nWe currently pipe JS files through Esprima to get an abstract syntax tree. Esprima will throw an error if we pipe html files through it.\nThe jshint implementation seems like a good way of implementing this: piping all files through the extractor and if it doesn't smell like an html file, just return the input (JS) code. Otherwise, extract out the JS and return that.\n\nI'm PHP developer myself and pretty new to NodeJS world.\n\nTotally understand. \nIf you (or anyone else) would like to give it a go, you can always ping one of the maintainers for help. \n. @indexzero Thanks!\n. Hey @indexzero. Thanks for the great suggestion. I'd consider this a bug in the rule. \nI think this is a great bug for getting familiar with the codebase. Would you like to tackle it? We could use the help.\nIf so, here are the (failing) test cases to add to test/rules/require-capitalized-comments:\n```\nit('should report on a lowercase start of a comment', function() {\n       ...\n    assert(checker.checkString('//\\n// invalid\\n//').getErrorCount() === 1);\n    assert(checker.checkString('/*\\ninvalid\\n*/').getErrorCount() === 1);\n\n```\nand\n```\nit('should not report an uppercase start of a comment', function() {\n        ...\n    assert(checker.checkString('//\\n// Valid\\n//').isEmpty());\n    assert(checker.checkString('/*\\nValid\\n*/').isEmpty());\n\n```\nThe rule implementation is located in lib/rules/require-capitalized-comments. You'll see that the implementation is small (which makes this a perfect bug to get started).\nFeel free to ping me if you have any questions. \n. :) I do this on other projects too. +1. I'd change the value to exceptRequire for clarity.\n@hzoo would you like to give this a go? You did a great job with a similar rule not so long ago.\n. Really interesting test cases @indexzero. Great job on this. I'll take a closer look through the implementation and edge cases tonight (hopefully).\n. @indexzero this looks great. thanks for contributing!\nI'll fix the travis fail; be sure to run npm test locally before pushing up to catch the style errors on your PR.\nIt would be great for parity if you could also enhance disallowCapitalizedComments to fail on the cases where requireCapitalizedComments passes. We'd greatly appreciate the help. A follow up PR works.\n. @indexzero Filed an issue for disallowCapitalizedComments. https://github.com/jscs-dev/node-jscs/issues/775\n. Thanks for sharing @indexzero!\nWith the plugin system landing in 1.8.0, more specific rules can be implemented outside of core. With that said, rules that are potentially helpful to the masses (more specifically, in presets) should still be considered for inclusion into core.\n\nBlock comments must only be used in file headers\n\nThis would make a great plugin rule.\n\nPut an emptyline before a comment.\n\nThis is already an issue: https://github.com/jscs-dev/node-jscs/issues/598\n\nWhen programatically building up a string, use Array#join instead of string concatenation.\n\nThis would make a great plugin, though it seems like a candidate for core. /cc @markelog\n. @markelog Airbnb has it: http://bit.ly/1sNwbyB\n. Ok, so not a hard rule. I guess you're implying that this should be a plugin and not part of core.\n. Thanks for reporting @gustavohenke!\nThis doesn't properly parse in Esprima Harmony: http://esprima.googlecode.com/git-history/harmony/demo/parse.html?code=return%20%7B%20foo%20%7D%3B. \nWill close, but @mikesherov, should this be reported to esprima?\n. It should definitely be reported to esprima, but we have left other esprima bug issues open. Will reopen in that case. \nNo sad face :) \n. Great job on this @jamesallardice! It's looking good except for a the ',' false positive. It seems like we also need the new rule: disallowSpaceBetweenArguments. I imagine that's simpler than the rule you implemented; would you mind giving that a go?\n. Will add the test. Would like to land this patch today.\n. @markelog That was a great call with testing an actual config file; the feature was indeed broken. Added tests appropriately.\nFYI, when testing locally, this \"uncovered\" line actually gets hit by this test: https://github.com/jscs-dev/node-jscs/pull/776/files#diff-583d616f4b01bf1fa153e71c0cef7de7R592.\n. Since @markelog is busy until the weekend, @mikesherov can you give this a look when you have time? It's a bugfix for the newly landed errorFilter. It needs to go in before the release.\n. Hi @arthurschreiber. Thanks for reporting. This is a duplicate of https://github.com/jscs-dev/node-jscs/issues/685. We're working with the Esprima team to get this sorted out.\n. @arthurschreiber No worries at all. Thanks for the nudge!\n. Yes, we deprecated the use of validateJSDoc, but the google preset still uses it. Seems like there's a bug in the rule's (outdated) implementation. \nWe should consider removing the use of that rule in the google preset. Do you agree @markelog?\n. Agreed that function expressions should be excluded from this rule. Function declarations should still be processed though.\nYour PR is using the previous token to identify a function expression, however, there should be a more accurate way. Given a token, can you tell if there's a FunctionExpression node that contains that token (possibly using range)? If the current function token belongs to a function expression then it should be skipped.\n. +1. It should go in the airbnb preset.\nOn Dec 3, 2014 4:04 AM, \"Joaquin\" notifications@github.com wrote:\n\n@indexzero https://github.com/indexzero @markelog\nhttps://github.com/markelog I think we have some kind of convention\naround this in wikimedia, I don't remember exactly if it is one way or the\nother, but yes, there is interest.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/780#issuecomment-65374810.\n. This should fall in line with a minor release and can go in with 1.8. \n\nIt seems like we lost the ability to test the preset fixture data with the new configuration setup. The current preset tests only ensure that the presets are registered (cc @mdevils). Not entirely sure where to add a test for this bug fix.\n. @mikesherov Nice! Mind adding the 'grunt' preset to that list?\n. @mikesherov Whipped one up on my fork: https://github.com/mrjoelkemp/node-jscs/commit/6e6a888201a8d85350eb5ab8565526c2f3b7bc6d\n. My fault, it's not a bug. The docblock stated the param was named file but the parameter name was content. The rule did what it was supposed to do.\nRemoving this from the presets is a minor change:\n\nAny preset changes.\nModifying rules so they report less errors, and don't cause build failures.\n\nWhen we remove validateJSdoc in 2.0, the preset integration tests will fail and we'll end up removing them from the presets anyway. I'll close this PR.\n. This is separate from the auto fix effort yes?\nOn Nov 20, 2014 6:49 PM, \"Marat Dulin\" notifications@github.com wrote:\n\nI found it difficult to find out, which methods are tested and which are\nnot in JsFile. I want to reorganize code in JsFile test file (\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/js-file.js):\n1. Group tests by method they are testing.\n2. Cover methods with tests (currently many methods are half-covered).\n@mikesherov https://github.com/mikesherov, @markelog\nhttps://github.com/markelog, @mrjoelkemp https://github.com/mrjoelkemp,\ngoing to start working on it if you don't have any objection.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/786.\n. Haven't experienced this before. Any chance you can follow up with the npm crew to get some more insight?\n. Thanks for the fix, @snater!\n. Hi @christianv! Thanks for reporting the issue. An array value for that rule sounds like a great idea.\n\n@mdevils If we support an array of configurable separator tokens, we would need a more generic assertion like assert.tokenBetween() that allows us to pass in any of the user-defined separators but still have autofixing work. Currently, this rule uses whitespaceBetween and noWhitespaceBetween. Sound like the right fix?\n. This issue has been inactive for quite a while. Going to close as orphaned. Happy to reopen if anyone wants to submit a patch.\n. @mikesherov This outline of the functionality looks pretty great. \nA small reservation that I have is outputting a link to the style guide since that information is not a part of the preset's configuration and not readily available at runtime. \nWe can either maintain a hash of preset names to styleguide urls or simply issue a message (after displaying the error counts for each preset) saying to consult the JSCS documentation, specifically: \"https://github.com/jscs-dev/node-jscs/#presets\", for links to the styleguides. \nTo be fair, we already maintain these urls within the docs and code comments, so 1 more place isn't a big deal. If you think the link to each preset's styleguide is essential, then I'll add the hash.\n. Progress so far. Still super early, but I'm really excited about this feature:\n\nFeel free to bikeshed on the display format and the user's choice being the preset number vs the preset name. I'm using https://github.com/Automattic/cli-table for the tabular output and https://github.com/flatiron/prompt for reading user input.\n. @zxqfox The preset approach is great (for now and in the future) in many ways:\n1. It centers the community around major/published style-guides (this is pretty opinionated, but only if they opt-in to autoconfig)\n2. Replicates the most straight-forward way that JSCS is brought to new projects: looking at the codebase, getting a feel for which preset might be the best fit, and either fixing violations or nullifying rules. \n3. Reduces the maintenance headache of seeing a massive list of rules in a jscsrc file that project maintainers didn't have to touch to begin with (thanks to autoconfig)\n   - I intend not to dump the appropriate preset's config into the jscsrc, but simply set the preset value in the config (along with nullified rules). \n   - Semantically, this achieves \"our style is like airbnb's but with a few tweaks\". Look no further than JSCS's jscsrc for more validation: \"our style is like google's but with a few tweaks.\"\n. FYI, going to finish this early next week while I'm on vacation.\n. Finished the first iteration. It works, but needs code cleanup, tests, and documentation. I'll finish up those items to get the PR ready for review either tomorrow (Tuesday) or this weekend.\nHere's what it looks like:\n\nCode is here: https://github.com/jscs-dev/node-jscs/pull/908\n. @markelog PR is here: https://github.com/jscs-dev/node-jscs/pull/908\n. @callumacrae Thanks for contributing!\n. Thanks @jdlrobson! Much appreciated.\n. LGTM. Thanks for contributing! \n. :+1: \n. I don't particularly see the value in the leave function of estraverse. I know you're not using it here, but any insights on how it's useful?\n. LGTM\n. Thanks for contributing @avlasof! Merged.\n. Hey @mbohal! Thanks for bringing the change to our attention. Seems like they just changed that part of the styleguide a few days ago.\n@mikesherov @markelog What's the best way to handle styleguides making breaking changes? I would think this is a 2.0 candidate since it's a breaking change for every project using the airbnb preset. Our minor release guideline states that preset changes warrant a minor version bump, but the major version bump includes rule (and preset?) meaning changes.\n. My only reservation is that this change to the airbnb preset will require every non-conforming codebase to make a sweeping change from multipleVarDecl to single var. \nIf we had autofixing, this change would be less painful. However, this would certainly prevent users from upgrading to 1.9, unless they nullify this rule or override it with the previous value. If we're not shipping this until we have autofixing (at least supporting this var change), then I'm fine to land this in 1.9. \n@mikesherov What's your stance on this?\n. This should be two separate commits: one for moving overrides and another for modifying maxErrors. The second commit would help clarify what the changes are meant to achieve.\n. +1\n. LGTM\n. Sounds good. I assume this would be in the form of an object with a property called minimumBlockSize: Number. Is this the same as applying true or should we still allow the user to specify keywords? If we're still allowing specific keywords, then @markelog might have a better idea on how the config might possibly adhere to #698 \n. Thanks @lucascosta, but this is a duplicate of https://github.com/jscs-dev/node-jscs/pull/822. We've been discussing the future of this change in that PR. Thanks again for contributing.\n. @BlackVegetable Thanks a ton for contributing. This will be really helpful for the tool's organic growth; we should have done this a long time ago. Much appreciated.\n. Great idea. Thanks for contributing @alawatthe. The rule format would be: requireCapitalizedComments: { allExcept: [\"globals\", \"istanbul\", \"jshint\"] }.\nWould you like to give this a shot? We could use the help.\n. Closing this one since discussion already started on the dupe. \n. Thanks for the fix @alawatthe. Much appreciated.\n. LGTM\n. Tomorrow works.\nI'll try to get some of the smaller 1.9 items done today to squeeze into\nthe release.\nOn Dec 22, 2014 8:49 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nGiven our semver policy, we can merge this only with 1.9, i wanted to\nrelease 1.8.2, but maybe it's time 1.9?\nSay, tomorrow?\n/cc @mikesherov https://github.com/mikesherov, @mdevils\nhttps://github.com/mdevils\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/843#issuecomment-67838566.\n. Thanks for reporting the issue @Deathspike. I recreated the issue and will investigate. \n\ncc @jdlrobson \n. Seems like the rule is forcing comma-first style because the , operator is in the list of binary operators being used to enforce the rule.\nThe passing snippet is:\njs\nfunction Route($routeProvider) {\n  $routeProvider.when('/', {\n    controller: 'TestController'\n    , templateUrl: 'views/test-view.html'\n  }).otherwise({\n    redirectTo: '/'\n  });\n}\nThe fix is to either use the array value form and not include the comma in your config, or to allow a new rule value like: \"disallowOperatorBeforeLineBreak\": { allExcept: [\",\"] }. The other option is to remove the comma operator from the rule entirely.\nThere was a discussion about the comma operator on #754. Any follow up thoughts @jdlrobson and @markelog?\n. Hey @xaka. Thanks for contributing! This rule definitely makes sense as a stylistic preference. \nWe tend to go with rule names that start with require or disallow. I like your rule name, though it doesn't capture what has to match exactly. A more descriptive name might  be requireFunctionExpressionNameMatchesAssignmentMemberName but that's a mouthful. \nLet's go with your rule name unless anyone else has suggestions.\n. Hey @alawatthe! Great work! Thanks for contributing. \nLGTM. Will wait for the +1 from @markelog before merging.\n. Great work @xaka! This is a very clear implementation. I left one comment on the scope of what this rule handles. Once that's addressed, it looks good to land; I'll wait for another reviewer to give the +1 before merging.\n. We have some helpful lists in lib/utils that should help identify reserved words.\n. +1 for using newline everywhere.\n. Nice catch! Thanks for contributing @svetlyak40wt \n. Landed. Thanks again!\n. @svetlyak40wt Very cool project! Thanks for sharing.\n. LGTM. Great work. What did you use to profile the code? \n. Landed! Thanks again @efolio. \n. > IDE plugins usually ask you do it, although i have no idea why.\nA few (not impossible to solve) reasons:\n1. It's easier than assuming all packages are installed in node_modules of the currently opened project. 2. It's also less prone to breakages if the binary's filename changes.\n2. In the sublime text case, workspaces allow multiple projects in a single editor instance which adds complexity to determining which node_modules folder is the right one (since the ST api isn't great for knowing the currently active project of all opened projects)\n. Nice work @gero3! \nLGTM but @markelog would know best if there was a reason why the condition was strict to begin with.\n. Thanks for the report! Seems like it's specific to your node version. I had the same thing happen some time ago with an older version of node. Travis doesn't like your fix likely because it's running a newer stable version of node. \nTry upgrading locally if you can? \nHappy new year,  friend :) \n. If this does indeed fix it for both node versions, then +1, though the restore of the spy intuitively seems equivalent to restoring process.stdin.on (which doesn't work). \n. Merged in via 7125f4a20a4ae22edd6ce587b284a9d7d5a697b6.\nThanks again for the patch!\n. Actually, those files are already 100% covered according to coveralls. What are you using to see coverage locally?\n. Yes, but it has to be done by the repo owner. Specifically, I'm talking about this location next to the repo description: \n\n. This looks great. Great work! \nWe need to make sure we update Contributing.md with the following:\n1. Replace all instances of Readme.md with the appropriate link to the website\n2. In the section \"Proposing additional presets,\" users should modify OVERVIEW.md now, not README.md.\nFor the list of companies/projects that use JSCS, we can add:\n- Adobe (http://www.adobe.com/)\n- Grunt (http://gruntjs.com/)\n. Looks great.\n. > First I want this to be merged to avoid complicated rebases later.\nYes. I don't see any blockers from merging. We can patch after.\n. Also FineUploader: https://github.com/FineUploader/fine-uploader\nand you can fix this quickly @mdevils https://github.com/jscs-dev/node-jscs/issues/872\n. Thanks for reporting. I felt the same with simply using the google preset yesterday. Will look into it. \n. +1. The demo looks really cool. Nice work!\n. What motivated the property name change? I agree with Marat that nextToken was a better name. I'd think what is currently token should be prevToken and nextToken/subjectToken should just be token or currentToken. \n. :+1: \n. Looks good and manageable. Nice work, Oleg.\nWho will implement the validation using this? I can help port some rules\nonce the validator is in master.\nWe just have to make sure no rule currently overrides this.values in its\nconfigure. If none do, the validator can just check for the existence of\nvalues on a rule and run the validator then configure, or just run\nconfigure. Hence, the validator can be shipped quickly without being used.\nOn Jan 9, 2015 4:02 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nNow this responsibility falls on the configure method, but it would much\neasier if this method would be replaced by some declaration like:\nvalues: [{\n    type: \"object\",\n    value: {\n        type: \"string\",\n        value: \"allExcept\"\n    }\n}, {\n    type: \"boolean\",\n    value: true\n}];\nwe couldn't fully dispose from the configure method, but it will simplify\na lot of things\n/cc @mdevils https://github.com/mdevils\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/895.\n. Looking to use one of the suggested tools. The proposed schema would change\nto fit the tool. Experimenting with the options for now.\nOn May 19, 2015 8:14 AM, \"Henry Zhu\" notifications@github.com wrote:\nDo we know if we're going to use another tool to validate or make our own?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/895#issuecomment-103463956.\n. I've been looking at the ones suggested in this thread mostly. @hzoo's suggestion of https://github.com/mafintosh/is-my-json-valid feels like the best one so far. I'm in the middle of a prototype with it, so no guarantees that it'll work just yet. \n. Hey @vkarpov15! Thanks for contributing. This is a duplicate as @hzoo mentioned. \n. No worries. Thanks for using the tool!\n. Hi @gagle. Thanks for contributing. The reason is that new Foo() is not a CallExpression, it's a NewExpression. \n\nMaking this as a configurable exception for the rule seems to be a stretch. A new rule might be more appropriate; though the implementation for disallowSpacesInCallExpression could serve as a helpful basis.\nWould you like to give the implementation a go? We could use the help.\n. Sounds good. Perhaps this can be considered a bug from a user's standpoint? \n. That's sooo cool @alawatthe. Awesome job. \nWould you be able to vertically center the logo? The top has a padding of ~85px whereas the bottom has a padding of ~110px. \nYou'll likely have to modify https://github.com/jscs-dev/jscs-dev.github.io/blob/dev/src/partials/header.jade to integrate the logo.\n. @markelog thanks for the offer, but i'll have time tonight and tomorrow night to address some of the comments. Most importantly, i'll fix the blocker (with a test) and write documentation. \n. It doesn't seem like it'll be a lot of work to switch it to inquirer. I'll\nconsider it; however, my priority is to unblock the release of 1.11 and do\nfollow up changes/bugfixes shortly after.\nOn Feb 3, 2015 7:02 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nAwesome!\nWill you check out inquirer module?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/908#issuecomment-72639102.\n. @markelog Addressed a bunch of your issues. This PR is still not ready yet; the outstanding todo items are listed in the PR's description. Will ping you when this is ready for a re-review.\n. @zxqfox Yeah :) I do agree that lodash.assign has the potential to be more valuable to the codebase than vow-node. I may end up not even using my custom promisify with the switch to Inquirer.js.\n. @markelog I fixed the bug where using --auto-configure without a path shows the \"No input files specified\" message. This still needs a test (as the todo list suggests).\n\nIn terms of usage (as the readme states), this was built to be used like jscs --auto-configure path where path is a file or directory. I hadn't considered supplying multiple paths. I now see the utility in that for legacy codebases, but is this a blocker? If we change the format for the auto-configure cli option, is that considered \"breaking\"?\nI'm concerned with continuing to block 1.11. As it stands, auto-configure works for a subset of cases. It does not properly handle erroneous input, does not use Inquire,js, does not turn on automatically the way Mike suggested, doesn't work for ES6 codebases, and only supports single input paths (file or directory, but not multiple args).\nWe should either ship 1.11 without this (realistically, it'll be at least another week to get some of the missing things in) or are we fine with shipping a first draft of this and collectively iterating on it thereafter? cc @mikesherov @mdevils @zxqfox \n. Will do. I'll merge today after one last pass through.\nOn Feb 5, 2015 9:07 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nFuck it, we'll do it live!\n@mrjoelkemp https://github.com/mrjoelkemp, please file a new issue with\nremaining items, and let's land this thing!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/908#issuecomment-73050895.\n. Thanks! \n. Looking into it. cc @efolio and @alawatthe. \n. Nice work @mathiasbynens. Thanks for the patch. \n\n@markelog should we fix this up pre-merge to avoid checking in the browser bundle and regexes? \n. @mathiasbynens Agreed about the generated files being checked in. \nI'm not sure why jscs-browser.js wasn't on the gitignore; @markelog would know better. \n. I plan on landing this very soon. Sorry it took a while. \n. Thanks again @mathiasbynens. Great work!\n. +1 looks good\n. :+1: assuming Oleg's comment is not applicable.\n. Thanks @samlecuyer. Looks good from a quick glance. I'll give it a more careful look and merge today. Nice work!\nOh, and rewriting history is totally fine for the commits that have yet to be merged into master. We typically strive for a single commit unless you're touching another file as part of a cleanup.\n. This looks good. I'll merge.\n. Landed! Thanks again @samlecuyer! Great job on this rule.\n. Do you need to rebase off of master?\n. Nice work @alawatthe!\n. @gustavohenke Thanks buddy!\n. @lahmatiy Mind rebasing off of master and fixing the jshint violation?\n. Thanks for contributing @lahmatiy! Landed.\n. :+1: \n. Woah. Nice work man!\n. :+1: Nice work!\n. :+1: \n. A test asserting case sensitivity would be great. In other words, there should be a test that shows that FOO does not result in an error.\n. @alawatthe Sorry this fell through the cracks. Great work here. Thanks for contributing. Landed!\nI think this will be a popular rule.\n. Nice job @feross! :+1: \n. Sounds good. This was not a bug, as i stated in a relevant ticket (on my phone atm, hard to find it) . On the grounds of the rule not being supported within core, yes, let's remove it. \n. @mikesherov Landed. Thanks @zxqfox.\n. As a heavy user of this preset and due to no clear standard, I'd like to keep it in and folks can override/nullify the rule if they choose. \nThis is also the first request to remove the rule from the preset. Given that the google preset is out second most popular preset (according to github traffic), let's keep things as is to see if this issue comes up again. \n. Thanks for contributing @dbrinegar. Nullifying the rule should solve your problem. \n. > Defining your own config is hard, even if you define only online like \"preset\": ..., since you would need to know the rules of that preset or at least have basic idea of that guide.\n+1, though the barrier to entry is high only for preset authors. We have the presets at the top of the Overview section on the website, so we've at least attempted to make it easy to get started. \nWhat would the default preset be? I'd vote for airbnb as it seems to be the most mainstream.\n. Users aren't explicitly asking for it, but as Oleg said, the success of\nfeross/standard shows an implicit desire.\nOn Jul 12, 2015 6:23 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nSome users might not need it but those users typically need docs less. The\neasier it is to get started using it, the better. I still vote for an init\noption as the easiest path towards using JSCS.\nThe auto fix and auto configure options are what seem to blow people's\nminds and are the quickest easier path to a fixed up codebase. Yes, people\ncould base their decisions on many things, but giving them an init that\nmakes them not have to think about it is the most user friendly.\nAgain, we could have a default preset in auto configure with zero\ncontroversy. Once we choose a default, it will make users mad no matter\nwhat we do to it afterwards.\nSo i think for this couple of months we might try this, if it wouldn't go\nwell, we will revert in 3.0.\nHave users been asking for a default preset? I see zero evidence this is a\nthing people want.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/986#issuecomment-120706141.\n. Hi @YetiOr. That looks like what's expected from the rule. Perhaps you want to use the opposite rule: requireKeywordsOnNewline? \n\nThanks for inquiring. \n. :+1: \n. Not sure, honestly. @sindresorhus might know. \n. +1, though I hope the test data for each preset already has an instance where this rule is used. \n. I'll land this.\n. I'm not particularly inclined to swap out the prompt-displaying library for little gain. No one has complained yet about auto-configure's prompts. Closing this for now until the code really does become messy because of prompt.\n. Yes. \n1. We either always provide esnext: true in the generated config as an easy fix, \n2. or ask the user for the dialect, \n3. or deduce the dialect.\nI think solution 2 is fairly straightforward to put into the config generator.\n. Of course, we have no insight into the use of autoconfig. We don't know how many users are giving up when trying to use the tool to configure an es6 codebase. It doesn't hurt to add this though.\n. @zxqfox Linked that issue in the description. Thanks!\n. Haven't received any complaints about the lack of error handling. Inclined to close this until we get a report.\n. > Not sure if that is needed, grunt-jscs, for example, uses jquery preset and pretty happy with the choice.\nStyle uniformity across the JSCS ecosystem would be great for external contributions. For example, I wanted to build jscs-bot and thought it wouldn't be right to use my own style for a tool that would (may) eventually live in the jscs org.\n. +1\n. /cc @mikesherov \n. Are there downsides to just enabling esnext by default?\n. Understood, however, I'd assume es5 codebases wouldn't be affected at all by esnext: true being the default for autoconfiguration. A lot of the bugs that I see reported here are from folks actually using es6 features, not es5 folks getting hit with regressions from es6's introduction.\n. @zxqfox The primary demographic for autogenerate users is newcomers. The confusion around esnext expands to all rules.\nIn the ideal sense of this feature, users will never touch their jscsrc, so it's our configuration to control. \n. Yes, that would be the best option. I'll close this PR and update the issue so that someone from the community could give it a shot.\n. Is this PR mergeable (once rebased)?\ncc @zxqfox @hzoo\n. @lahmatiy This is really impressive work! Great job and thanks for contributing!\nPlease rebase off of master. \nI added a bunch of comments, most of which are suggestions to increase the clarity of the code. Feel free to ask questions about any of the comments.\nAfter the comments are addressed, we'll need another maintainer to review the code before merging. It's a big PR, so we need more than one review on this one.\nYou're also missing changes to Overview.md: https://github.com/jscs-dev/node-jscs/blob/master/OVERVIEW.md#options to document the extract option and its possible values.\nI noticed (and you stated) that the algorithm is similar to jshint's approach but the code is original, so I think we're okay with licensing.\nAwesome work!\n. @ashclarke thanks for reporting! \n@alawatthe would you like to look into it? \n. If this actually fixes things on Windows, then :+1: \n. Oh wow, didn't notice the \"2 successful checks.\" \nLGTM\n. Great catch @ashclarke! We should totally do this.\nWould you like to give this a go?\n. Thanks @bassjobsen! That's awesome.\n. Hey @morenoh149. Thanks for contributing! Interesting idea.\nThe closest we have is the first step in --auto-configure that shows you the number of errors generated from the given path for every preset. It then tells you the number of violated rules. That's not quite what you're asking for.\nMaybe a new cli option like jscs --summarize path would work. For now this would output a format like:\nfilename #Errors #ViolatedRules\nI'm not particularly sold on showing the number of violated rules, but it could be helpful. If someone wanted to know the violated rules, they could just run jscs on that particular file.\nWould you like to give the implementation a go? We could really use the help. If you have questions on how to approach this and where to look, we're happy to help.\n. @mikesherov Woah.\n. @TheSavior Awesome rule! Nice work.\nHow many jquery functions would you have to add that return jquery objects? \nWe'd typically maintain an internal list and then your rule would just make sure that the last function in the chain was a member of that list. To get the \"last function in the chain\" would be a nice helper that could also help with https://github.com/jscs-dev/node-jscs/issues/511.\n. @TheSavior Not sure. Mind rebasing your branch off of master, squashing commits, and then force pushing up to trigger a rebuild?\n. @TheSavior For now, you can do npm run coverage or npm run coverage-html for coverage data.\n. Coveralls obviously doesn't like this rule. Closing the PR :) :)\n. @TheSavior Landed! Sorry this took so long. Nice work!\n. Hey @jacksonrayhamilton. Thanks for contributing! Can you provide a few references to prove that this should be added to the crockford preset? Folks are pretty touchy about this preset, so we need to make sure the addition won't start a war :)\n. Thanks for the references @alawatthe. \nWe also add examples for each rule to our fixture file associated with the preset. Namely, this file https://github.com/jscs-dev/node-jscs/blob/master/test/data/options/preset/crockford.js should have additions for the new rule.\nI'm also interested to see if https://github.com/douglascrockford/JSLint/blob/394bf291bfa3881bb9827b9fc7b7d1112d83f313/jslint.js#L307 breaks the tests.\nPlease update the fixture.\n. LGTM\n. Rebased and landed for ya @ashclarke. Nice work! Sorry this took so long.\n. Taking a look\n. LGTM. Great work Marat! This is really exciting.\n. @mikesherov cool with this?\n@twolfson Mind rebasing?\n. Nice work here @twolfson. Always happy to see a super old issue closed. Thanks for contributing.\n. @mdevils ping https://github.com/jscs-dev/node-jscs/pull/1063#issuecomment-77146304.\n. As stated by @markelog outside of this thread, we should use https://www.npmjs.com/package/insight to collect usage data.\n. Henry can do it. I'm out of the country at the moment. Cc @hzoo\nOn Sep 22, 2015 6:49 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nSince you dealt with the bounty ticket last time :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1065#issuecomment-142120499\n.\n. I'd think a test that ensures that the cli module is being passed the appropriate args would prevent accidental breakages \u2013 especially since our cli tests use the cli module directly and bypass bin. \n\nThere isn't much in the binary though, so I'm fine if we'd like to continue omitting it from the coverage report.\n. What's the status on this PR? Still held up?\n. @hzoo Can we not just land this with that case in an open issue? Would it be reporting the wrong case or nothing at all? Can we just nullify that case?\nWould love to land this finally.\n. New issue created for the https://github.com/felixge/node-style-guide preset. @markelog usually has opinions on new presets, so we can discuss is there/here.\n@hzoo Thanks for continuing to help. You're doing great work!\n. Can we reference this PR as being fixed from a commit in 3.0? Ideally, this\nwouldn't be closed until 3.0 is merged to master\nOn Mon, Oct 12, 2015 at 11:16 PM, Henry Zhu notifications@github.com\nwrote:\n\nAdded to 3.0 - should be close or leave this open?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1084#issuecomment-147583525\n.\n. Thanks for contributing @gero3.\n. > Not sure if the preset should only include rules based on the explicit statements or also include rules based on the code in the examples that is implied.\n\nAlso add rules implied from sample.\nLGTM \n. Safe to land after rebasing?\n. Good work @hzoo! \n. @mugenkanosei Great find. Glad to hear it's fixable via the config. Still odd that the error message states that it's invalid javascript. \n. @mikesherov Safe to land once rebased? \nThe merge conflict is basically this test being in the wrong folder (it's in test/rules instead of test/spec/rules). The rebase should resolve automatically.\n. Thanks @gero3!\n. For the record, if this preset will only be used within wordpress core, then the jscsrc (i.e., wordpress preset) should live in that project \u2013 not maintained by jscs core.\nSimilar to grunt, if this preset will be used to enforce the wordpress style across all wordpress plugins, then the preset will be widely used and is a great candidate for inclusion in jscs core. \n. Sweet. +1 to this\n. @hzoo mind rebasing? Would like to land this.\n. Awesome stuff @hzoo. \n. Lgtm\n. LGTM but what's the benefit here?\n. Hey @fubu! Thanks for the suggestion. Yes, that info is available. I originally considered adding that instead of #Errors, but there's no reason why both datapoints can't be shown.\nWould you like to give it a go? We could use the help. You'd have to modify https://github.com/jscs-dev/node-jscs/blob/84ab5a3f2bcdc46c80eba5b17c00d5e01295be31/lib/config/generator.js#L105 to add the number of (unique) violated rules. Then modify https://github.com/jscs-dev/node-jscs/blob/84ab5a3f2bcdc46c80eba5b17c00d5e01295be31/lib/config/generator.js#L250 to add the column and https://github.com/jscs-dev/node-jscs/blob/84ab5a3f2bcdc46c80eba5b17c00d5e01295be31/lib/config/generator.js#L132 to add the data. Let me know if you have any questions; we're more than happy to help.\n. Great idea. +1\nOn Mar 1, 2015 2:01 PM, \"fubu\" notifications@github.com wrote:\n\nI just came up with another idea which would help me make better decisions\nwhen auto-configuring. Although the initial approach here supports me in\nchoosing the right preset, the tool does not assist me when I have to\ndecide whether to create an exception or to fix the issue myself: It just\ntells me which rules my codebase violates, but gives no clue how bad it\nreally is. Maybe it only affects a few places or a single file (so it may\nbe easy for me to fix or ignore), or maybe it's a more general problem (so\nI probably want to add an exception)?\nIn short: When asking for a decision per violated rule, tell the user the\namount of errors and files flagged by this specific rule.\n@mrjoelkemp https://github.com/mrjoelkemp I could add this on top of\nthe existing pull request if that's okay with you guys.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1125#issuecomment-76624190.\n. Great work. I need to pull it down and verify soon. A test would be great. Any chance you could whip one up? \n. Agreed about the testing being not too obvious. The best way to test this is to fix the fixture file; currently it's the source code for the config generator, which I thought was cute, but isn't. \n\nWe need a control file that has a guaranteed results set of errors and violated rules. Then we know for sure what the console output should look like and can split lines to assert the number of violated rules.\nFor now, I'd say a manual verification is okay since coverage remained the same.\n. @fubu Great work here. Mind rebasing off of master and then we'll land this?\n. git pull - -  rebase upstream master. Assuming you did: git remote add upstream the_jscs_repo_ssh_url. \nLet me know if that doesn't work. \n. @fubu I can't get that build to load on appveyor. Any chance you could force push up an insignificant change to trigger a rebuild?\n. K. Will give a final look and merge. Thanks @zxqfox \n. Great work @fubu. The extra info that you added is really helpful. Thanks for contributing.\n. Nice work! \n. Good stuff @TheSavior\n. Thanks @varemenos \n. The history details when the first breaking build occurred: https://ci.appveyor.com/project/mdevils/node-jscs/history. That's odd, since I know that https://ci.appveyor.com/project/mdevils/node-jscs/build/156 for sure had passing checks.\nI reached out to AppVeyor to see what's up: https://twitter.com/mrjoelkemp/status/573114388196028416\n. Heard back from AppVeyor. The logs open properly in Firefox. \nYou'll see 484 passing and 2697 tests failing. https://ci.appveyor.com/project/mdevils/node-jscs/build/157\n. Mind modifying the config as necessary? \n. ping @yaycmyk. Ready to merge once Mike's comments are addressed.\n. No worries @yaycmyk. Thanks for contributing :)\n. Testing the two versions separately would be nice for isolating v0.12 bugs, if any. \n. :+1: \n. LGTM nice work @hzoo! \n. @hzoo The file name idea is a good one, but doesn't work for the browser bundle. \n. Closing in favor of the suggested move of this information.\n. Nice work here @markelog! :+1: \n. Lgtm. Coveralls is lagging eh? \n. Lgtm\n. Carets? Why? \n. Yes, package authors shouldn't be trusted :) \nOur users shouldn't have their builds break under their feet because of one of our dependencies pushing a broken minor (even patch) update. So ideally, we'd have fixed versions. Carets create a house of cards in dependency management.\n. Good point.\n. Nice job @markelog. Thanks for contributing ;)\n. Thanks for contributing @gunnarlium.\n. Hi @amel-true. Thanks for contributing.\nParse errors aren't currently handled by inline comments. \nThis test fails:\njs\n    it('should suppress esprima parse errors', function() {\n        var errors = checker.checkString('//jscs:disable\\n\\tvar x =');\n        assert.ok(errors.isEmpty());\n    });\n@mikesherov Was this intentional? The esprima parse error is consumed by jscs and presented as a style error, so it seems like the parse error should be disabled by inline commenting. Thoughts?\n. Hi @blazarus. Thanks for contributing. \nThis could be achieved by extending the rule with a value like allExcept: ['ForStatement']. Though, I'm not particularly sold on including the node type in the value. Any other suggestions using allExcept?\n. What about users who want the current, strict version of the rule? We'd have to revert the special case and go with allExcept anyway. \nIs there any other valid configuration that avoids users having to type the 3 for loop node types? \n. I'm having a hard time discerning whether we're fixing a bug in the rule or creating an exception.\nI only hesitate to avoid imposing our sense of style on users. \n@mikesherov or @markelog can you make the call? \n. Hey @TheSavior. Thanks for asking. This is a question better suited for the mailing list though. That said, we maintain a set of milestones: https://github.com/jscs-dev/node-jscs/milestones. We may not always hit every single item, but the milestones list the core team's priorities. \nWe typically hold release-centric discussions transparently on the mailing list. There's very little non-public communication amongst the maintainers.\nHope that sheds more light. Feel free to repost on the mailing list.\n. I should also add that we'd love help for the issues in the 1.12 milestone and any future milestones. Any help is appreciated. Thanks again for asking.\n. \nYeah, the button on jscs.info is preeeeetty tiny :) Perhaps we should also add it to https://github.com/jscs-dev/node-jscs/#more-about-jscs? Mind fixing that or suggesting a better place?\n. Nice work @hzoo.\n. Nice work @hzoo.\n. Thanks for contributing @jcchingithub.\n. Hey @ariutta. Thanks for contributing.\n\nIt would be useful if the exception option allowed for choosing an alternate value instead of just setting the rule to null. \n\nI'm not seeing the benefit to allowing users to supply custom values in the autoconfig prompt. It's the same as replacing null with another value in the generated jscsrc. The goal of autoconfig, was to get the user up and running as quickly as possible. We also envision replacing the \"fix it yourself\" with \"fix it automatically\" so that you wouldn't have to worry about configuration.\n\nEven better would be if the number of errors for each possible alternate value were shown.\n\nThis heavily depends on #480 to avoid having to modify rules and the autoconfigure code. \n\nI have code for generating a .jscsrc file by automatically choosing the rule value that produces the lowest error count.\n\nGreat work here. Along with my previous comment, the route you've experimented with relies on us hardcoding the rule values in both the rule definition and the autoconfigure code.\n\nWould there be interest in integrating something like this as a built-in option for JSCS?\n\nDefinitely, so long as it read the rule values from the rule's definition.\n. Any reason why you think this isn't the right fix? Looks good to me. Landed. \nThanks for contributing @jamesreggio! \n. Thanks for contributing @MunGell!\n. Agreed with @TheSavior here. Would you mind making that change where appropriate @MunGell? That would be a great win for the docs.\n. Seems like it would depend on #480.\n. Yes please. The docs should be grammatically correct.\nOn Mar 17, 2015 4:13 AM, \"Shmavon\" notifications@github.com wrote:\n\nI was thinking about changing it to singular form where necessary, but it\nis looking like we are using just one form in all the rules. I can change\nit, should I do the same for \"Type\"/\"Types\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1174#issuecomment-82195775.\n. @MunGell Great work here! Thanks for contributing. Landed!\n. :+1: @hzoo \n. Thanks @ikokostya\n. Seems patch worthy.\n. @markelog This is technically a bug fix (though unrelated to the new stuff in 1.12). Are we cool with merging it?\n. +1 for the idea. I need to sit on the proposed implementation though. \n. Great points @alawatthe! I'd love to see something like this on comments, but you'd run into similar issues as what @alawatthe described when it comes to docblocks or comments that mention var names. \n. Thanks for reporting.\n\nIt's a new rule (which is opt in), so it's not a breaking change - just a\nbug.\nWill fix soon.\nOn Mar 27, 2015 5:15 AM, \"Jordan Harband\" notifications@github.com wrote:\n\nThis is basically a breaking change in a minor bump, so hopefully it can\nget resolved very soon.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1203#issuecomment-86877397.\n. The pinging isn't necessary :) We don't usually forget about PRs, we just do a bunch of merges in one sitting. \n\n@zxqfox, since it's been approved by two maintainers, it should be fine to initiate the fast-forward merge. \nWe'd still have to cut a patch release, which won't happen today. However, @ljharb, after merge, you can reference the master branch of jscs if you need immediate access to the fix. \n. lgtm\n. Thanks @hzoo. Sorry about that oversight @rwjblue; we removed the function since it wasn't being used internally. We should have deprecated it and removed it in 2.0. Thanks for reporting the issue; it's great to get some certainty that folks are using the public apis.\n@mikesherov Should we consider reverting the commit that removes the JSFile method and including it in a patch release?\n. > it's unfortunate that people had relied on them\nDoesn't that potentially affect all users of additionalRules? Not that everyone used this particular function, but they use JSFile's methods.\nThis feels like a delicate area to be so firm. By this logic, we could merge the rule of silence PR since we never documented that the error/success messages couldn't change \u2013 well knowing 3rd party integrations probably rely on that output. \n\nwe'd need to document their existence\n\nWhere? Within one of the markdown files?\n. What about allExcept: ['comments']?\nOn Jun 12, 2015 5:08 PM, \"Nate Eagle\" notifications@github.com wrote:\n\nThis is a problem for me, too. I'm using validateIndentation: \"\\t\" which\nis really useful, but it's reporting errors for commented-out blocks of\ncode like this:\n//User.findById(new ObjectId(userId), function (err, user) {\n    //if (err) {\n        //return next(new Error('Failed to load User'));\n    //}\n    //...\n//});\nExpected indentation of 1 characters at controllers/users.js :\nWould it make sense to have an option along the lines of\nallowArbitrarilyIndentedComments? (Name mostly for humor value.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1215#issuecomment-111619640\n.\n. Thanks for contributing @smeijer. This proposal sounds like a great candidate for a custom plugin. Unless others chime in on this PR, I'd vote for it not being in core.\n\nBy using safeContextKeyword, you're already enforcing that it's used (when needed). Your proposal would also have to ban use of .bind(this) if I understand correctly.\nI'll wait for the opinions of other contributors before closing this issue.\ncc @hzoo @TheSavior @alawatthe \n. :+1:\n. It's a one time use feature, so I'm not itching for a shortcut. I'm fine\neither way.\nOn Apr 2, 2015 8:42 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\n@mrjoelkemp https://github.com/mrjoelkemp how about it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1231#issuecomment-88885506.\n. We have the esnext option as well. See if that works: http://jscs.info/overview.html#esnext. If that doesn't work, then it's an esprima bug and we can proceed accordingly.\n. Nice work @MartinKolarik. Thanks for contributing.\n. Hmm, just me or does it seem like the verbose flag wasn't carried through\nwith npm run?\nOn Apr 6, 2015 6:02 AM, \"Justin Gordon\" notifications@github.com wrote:\n@hzoo https://github.com/hzoo Here you go:\n\u279c  ~/j/react/react-webpack-rails-tutorial/client (rubocop-integration u=) npm run jscs --verbose .                                                                                                                                                                  [0:00:54]\nnpm info it worked if it ends with ok\nnpm verb cli [ 'node', '/usr/local/bin/npm', 'run', 'jscs', '--verbose', '.' ]\nnpm info using npm@2.7.5\nnpm info using node@v0.10.33\nnpm verb run-script [ 'prejscs', 'jscs', 'postjscs' ]\nnpm info prejscs react-webpack-rails-tutorial@1.1.0\nnpm info jscs react-webpack-rails-tutorial@1.1.0\n\nreact-webpack-rails-tutorial@1.1.0 jscs /Users/justin/j/react/react-webpack-rails-tutorial/client\njscs .\n\nMissing newline after closing curly brace at ./assets/javascripts/CommentBox.jsx :\n    44 |      var newComments = React.addons.update(oldComments, {$push: [newComment]});\n    45 |      this.setState({ajaxSending: false, data: newComments, formData: this.emptyFormData});\n    46 |    }, (xhr, status, err) => {\n-------------^\n    47 |      this.logError(xhr, status, err);\n    48 |      this.setState({ajaxSending: false});\nMissing newline after closing curly brace at ./assets/javascripts/CommentList.jsx :\n    19 |        \n    20 |      );\n    21 |    });\n-------------^\n    22 |    return (\n    23 |      \n2 code style errors found.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1237#issuecomment-89998206.\n. Seems like an exception that should be built in. The first char in the property or identifier. Patch release worthy. \n. @gibson042 Sorry this slipped through the cracks. This needs to be rebased and the coverage needs to be increased.\n\n@hzoo Does this look good aside from the above issues? I see it's holding up the Idiomatic Preset PR: https://github.com/jscs-dev/node-jscs/pull/1069. Would like to land both (this and Idiomatic) prs.\n. This is really great work, @gibson042. Bravo.\n. Sounds like a plan to me. Maybe wait for the second go ahead from\n@markelog, @hzoo, or @zxqfox.\nOn Jul 25, 2015 12:46 PM, \"Richard Gibson\" notifications@github.com wrote:\n\n(and then the SpacesInsideParenthesizedArguments [function call], /\nSpacesInsideParenthesizedParameters [function definition], and\nSpacesInsideParenthesizedStatement [if/for/while/etc.] pairs, of\ncourse). Any thoughts on the names?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1254#issuecomment-124860804.\n. :+1: \n. @hzoo Should we consider forking babel-eslint as babel-jscs, putting in the org, making the edits necessary for our purposes, then publishing the package as babel-jscs?\n. Update readme to remove it as a cli option? \n\nThis is possibly considered a breaking change if folks rely on the output of the CLI using verbose in flag form. \n. :+1: \n. Safe to close then? \n. Will take that as a yes :) ping to reopen if needed\n. Great work here. \nIn terms of the option naming, what about using  allExcept: ['require'] to adhere to our rule configuration style? \n. Crap, didn't catch that exceptUndefined was an existing value. We'd have to keep the exceptUndefined but squeeze in the allExcept: ['require']. Otherwise, it's a breaking change that would only allow this to be shipped in 2.0. Sorry about that.\nDoes this complicate the implementation or force you to backpedal too much?\n. LGTM. @hzoo and @zxqfox, can you guys review?\n. Feel free to squash and I'll land this @stefanosala. Really great work here! Thanks for contributing.\n. Landed! Woohoo!\n. Thanks for contributing @astorije \n. No worries at all. We don't usually get contributions that abide by the format, so maintainers usually change the commit message before merging.\nThanks again for the help.\n. Thanks @astorije!\n. Milestones don't suffice? \n. @mikesherov can you set something up for this week? Probably during our lunch 12pm EST on Wednesday? \n. Yeah, we should change this to allExcept: \"require\" \n. I've taken this to the finish line @stefanosala. Made the fixes in a replacement PR: https://github.com/jscs-dev/node-jscs/pull/1539. Gave you commit credit, of course. Thanks again.\n. Can we not just use an EOF token in the rules for padding to know the difference between a padding newline and a newline for the EOF?\nThis would avoid needing coordination between the sets of rules. \n. The last newline in a file should be the EOF token, in that it signifies the end of the file.\nThe padding newlines rules should only act on newlines that are not the EOF token. Within the requirePaddingNewlines check, for all found newlines, if it's not an EOF token, throw an error. \n. Disregard my comments. This is fine to go in if Marat gave the lgtm.\nOn Mon, Jul 27, 2015 at 2:38 PM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nWhat is the status of this? @mrjoelkemp https://github.com/mrjoelkemp?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1323#issuecomment-125300706.\n. Safe to merge?\n. LGTM\n. @markelog Oh. Didn't see your comment until after I just landed :(. Will have to introduce it in a separate PR. Sorry about that.\n. Lgtm\n. Lgtm. Nice job! Excited to see this land. \n. No policy. Happy to merge PRs with bumped versions and passing tests.\n. @zxqfox That's what I was thinking: skipping empty files. Empty files shouldn't be forced to have a newline at EOF right?\n. :+1: \n. +1 except for the autoconfig test confusion \n. What's the best way to handle this via the jscs-jsdoc plugin? Ignore that style of type or disable specific instances? Or do we have to change them until the spec is updated? \n. I'm fine with something like Promise.<String> if that's standard. To be clear, this implies that the promise resolves with a string, correct?\n. \"new rule\"? Can you further describe what the inclusion entails? Is this for the website?\n. So you want users to be able to use jscs-jsdoc from jscs directly. Got it. \n\nWhat is painful about the current solution of it being an external plugin? i.e. What are the benefits? The separation of concern is clear as it stands. \n. Plugins are in dedicated repos though, so they could also have dedicated github pages that we could link to within our overview.\nWhat we're saying, in a more general sense, is that org-owned plugins are likely to be brought into the core (unifying the config, not the code). \nDo we intend on keeping the jsDoc key as part of the configuration or flattening it to the main jscsrc level with this integration?\n. Great work here. Not really following what the approach is from reading the code. Can you refactor the code to use more named functions to clarify the high-level algorithm?\n. The comments actually helped a ton. You're running autofix on a subdirectory of the codebase and then making sure the tests still pass. Got it. \nShould we also run non auto-fixed jscs on that subdirectory to make sure the style isn't violated post-autofix?\n. No, your integration test runs autofix then makes sure the tests pass (ensuring that autofix didn't break the code). I'm saying after doing that, make sure that the style isn't violated by running jscs -p presetName lib test/specs.\nAutofix for a rule, if not implemented correctly, can either break code (by producing syntax errors) or break style (by modifying the ast incorrectly). Your integration test only handles the first case, as far as I can tell. \n. Ah, plus we don't have autofix for every rule in a preset, so we'll always have style errors until we have all rules as fixable.\n. LGTM\n. LGTM\n. I restarted the build and it's passing. Couldn't reproduce the timeout locally either. \n. LGTM\n. So that I understand, we're saying that exporting default functions will be the only time that a nameless function declaration is proper syntax? Otherwise, it's a syntax error.\n. LGTM\n. Merge or no? \n. :+1: \n. Thanks @hzoo \n. @tsteuwer A PR is very welcome. Let us know if you have any questions.\n. Closing because it seems like using another parser is a workaround in the mean time.\n. You should be able to just set the esprima option in your jscs grunt target\nand it will be passed through to jscs.\n@hzoo worth adding those Grunt jscs instructions to the readme of\nbabel-jscs.\nOn Jun 16, 2015 7:29 AM, \"Micha\u0142 Go\u0142\u0119biowski\" notifications@github.com\nwrote:\n\n@hzoo https://github.com/hzoo I'd love to try babel-jscs but I use\ngrunt-jscs https://github.com/jscs-dev/grunt-jscs and it doesn't seem\nto be possible to swap the JSCS package used.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1375#issuecomment-112391151\n.\n. (require|disallow)ImplicitReturn or the same with InArrowFunction for\nspecificity (if necessary)?\nOn May 17, 2015 6:25 PM, \"Alexander Zeilmann\" notifications@github.com\nwrote:\nDo you only want to disallow the return statement when returning an object\nor in all single expression arrow functions? I.e something like\n// bad\nx => {return 42;}\n// good\nx => 42\nName suggestion for the second case:\ndisallowReturnInSingleExpressionArrowFunctions Does this win the price of\nthe longest rule name so far? ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1385#issuecomment-102864918\n.\n. Nope. That's fine. Will likely tackle this first since the declarative\nconfig involves a bit of experimentation and will take longer.\nOn May 19, 2015 6:37 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\nAssigned #1392 https://github.com/jscs-dev/node-jscs/issues/1392 to\n@mrjoelkemp https://github.com/mrjoelkemp.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1392#event-308305223.\n. Hey @aliosv. Thanks for reporting. Is there an existing  test for this? If not, would you be open to submitting a failing test or a PR to fix this? \n. Can we add a test for the multi-line form of an arrow function?\n\nTo clarify, this form: \njs\nfoo => {\n  console.log('hi');\n  console.log('there);\n}\n. Nice work! LGTM\n. Lgtm\n. Thanks @hzoo. Nice work\n. This feels like a JSHint type of rule. As such, I'm not sold on its inclusion in JSCS.\nIt's disallowing the use of certain parts of the language.\n. Sure then. DisallowKeywords was likely discussed at length and accepted so\nthis is fine by me.\nOn May 23, 2015 9:49 AM, \"Henry Zhu\" notifications@github.com wrote:\n\nYeah that's true. However, we do have disallowIdentifiers, and\ndisallowKeywords that are used with the intent to disallow parts as well (\nwith, certain methods like eval or something) so this rule is created\nwith a similar purpose?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1398#issuecomment-104900146.\n. Lgtm\n. Thanks @aliosv. Looks like a few tests broke with this PR. \n. Lgtm. Nice work! \n. Odd. Lgtm\n. Great work here @dreef3. Thanks again for contributing.\n. The value of allExcept: 'parameters' seems applicable. For this rule, however, we'd need to also pass a line length value. @markelog how would that work in the new format? \n. I'd prefer to call it allExcept: 'functionSignature' but that seems overly\nwordy (though the most accurate).\nOn May 29, 2015 6:51 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n:-), i just afraid we end up adding exceptions for every possible language\nconstruction.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1412#issuecomment-106953905\n.\n. Looks good. :+1:\n. Done. Thanks @hzoo \n. :+1: \n. @brzpegasus Thanks for the suggestion. This seems like another possible value: allExcept: ['multiLineStrings']. It's a stricter form of allExcept: ['stringConcatenation']\n. @hzoo sounds good\n. LGTM. Restarting the travis build to see if coverage passes. \n. Seeing a travis failure now: \n\n\nWe could try running unit-coverage locally via one of our package.json scripts to see if the error can be reproduced.\n. This is a good catch. +1 for ignoring. Computing valid  scopes sounds like a JSHint feature more than a style choice. \n. Thanks for contributing. I've wanted this for a while too. \nAll of our rules are for linting the contents of a file, not its filename. However, I believe it's possible to attach the filename as part of the JsFile object and assert properties about that filename in a new rule. \nWould you like to give it a go? We could use the help. Feel free to ask questions on this issue thread if you need help. \n. Great work here @dreef3. It looks good except for the casing of the values. All of our code is camelCased, so the options should also adhere to that rule so folks don't have to think about casing (and get surprised when a rule doesn't conform) anymore.\n. Okay then. Landing.\n. Thanks again @dreef3. Great work here. Landed!\n@markelog fyi, couldn't manage to reorder the two disallowSpaceAfterObjectKeys commits to squash them together. \n. Sounds like disallowKeywordsOnNewLine is doing the right thing. Perhaps an additional brace-centric rule is necessary for the example you want to be invalid?\n. Sounds like it's safe to close. Happy to reopen if I'm wrong.\n. This is 2.0? Thought this was in a good place to land and include in a new release. \nFeel free to update the milestone.\n. We have plenty to fill a 1.14 release; it's been over a month.\nTo be clear, this particular PR will go into the 2.0 milestone, correct? Feel free to tag any other issues/PRs that should be 2.0 so that I hold off on merging them.\n. This PR seems to be the last one holding up the 1.14 milestone. Are we still aiming to get this in?\n. Hey @pohutukawa. Thanks for contributing. Similar to @hzoo's point, examples of what you want to be valid/invalid would be really helpful. It sounds like you do want either disallowIdentifierNames or requireCamelCaseOrUpperCaseIdentifiers.\nPlease let me know if we're missing something. Otherwise, it seems we have rules that suffice. Happy to reopen with more details provided.\n. Awesome. Thanks for contributing! Without reviewing your PR just yet and looking at the edge case, the jscs:disable (without a matching jscs:enable should disable jscs for the entire file. The jscs:ignore, in that case, is redundant. As for the question on var f = 6, it should be disabled due to the jscs:disable comment.\n. Looks good aside from the confusion around what's happening in lib/string-checker and the failed test. Nice work here. \n. This particular PR is a harmless refactor. I'd say merge to 2.0 then cherrypick to master. No reason it shouldn't get released. \nIf anything, a community PR that modifies JSFile (like grit processing) would need these changes or 2.0 will have a bad time with the merge conflict (if any). \n. Keep in mind requireBlockComments will need to respect // jscs: disable comments.\n. Hey @ShashankaNataraj still interested?\n. Hi @kover. Thanks for contributing. Any chance you could supply a code sample that reproduces the error? It would greatly help us track down the issue. \n. What's the benefit of changing the name?\nOn Jul 11, 2015 3:09 PM, \"Henry Zhu\" notifications@github.com wrote:\n\nAlso do we want to keep the option as esnext or use a different name?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1446#issuecomment-120652926.\n. The entire flag, the added code and tests for esnext all seem unnecessary.\nWe use esprima and if it lags behind what others need out of a parser, then\nthey should just specify a parser to use with custom options for that\nparser. If we want to avoid them having to do that then we should adopt the\nbleeding edge parser instead of esprima.\n\nDuring the push to stabilize babel-jscs, I always wondered why we don't\njust use that as the primary parser instead of Esprima.\n2 options in my mind (both involve dropping esnext):\n1. Adopt babel-jscs as the primary parser\n2. Use esprima and encourage the use of babel-jscs as an alternative\nThoughts?\nOn Jul 12, 2015 8:13 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nesnext was a term used to describe es6 back in the \"harmony\" days. It is\nno longer a useful description of any language feature. If anything, we\nshould either switch to a version flag (considering new version every\nyear), or have a stage flag which allows the user to opt into features at\ndifferent stages of acceptance (this is what babel does).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1446#issuecomment-120715828.\n. @hzoo How much slower are we talking?\n. Great suggestion. We have the help-wanted label for that purpose. We should likely change the label name to 'beginner-friendly' so it's clearer. \n\nSound good @markelog?\n. Agreed, @oredi. Sounds like you want to submit a PR :) :)\n. Thanks for contributing. The upgrade combination of esprima and estraverse is breaking the test suite. Since we don't yet have integration tests for the browser bundle, I'd rather not bump a major version of browserify (seeing what the breaking change is through their commit history is hard). \nUpdates to lodash.assign and jshint can go in though.\n. Thanks for reporting @ShashankaNataraj. Which jscs version are you using?\n. Yes, there's excludeFiles: https://github.com/jscs-dev/node-jscs/blob/master/OVERVIEW.md#excludefiles.\nFeel free to ask questions like this on the gitter channel: https://gitter.im/jscs-dev/node-jscs\n. Actually, you're right. This doesn't exist. I assume we'd accept a comma-sep list of dir-names and split that to form the excludeFiles config value.\n. I'd like to land https://github.com/jscs-dev/node-jscs/pull/1467 and then open up the gitignore file inclusion as a follow up PR. Sound good?\n. True. The integration of fixing is more useful than a meesage suggesting to use it. \n. Lgtm\n. Thanks @oredi!\n. Lgtm\n. Maybe add a comment in the docs? \n. Thanks again for contributing @lpil! \n. We also need to make sure our \"main\" in the package.json is still valid after this effort. \n. core to es6 is a smaller effort and quicker to merge.\n. This would have to be after 2.0 since all outstanding prs would need to be\nes6ified then merge conflict resolved.\nOn Jun 19, 2015 9:15 AM, \"Henry Zhu\" notifications@github.com wrote:\n\nWould this be on master or 2.0 branch, I thought it would be harder for\ncore since we are changing things in 2.0?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1469#issuecomment-113511308\n.\n. @rimunroe That would definitely be a problem for folks using visual debuggers. We're not the first to use babel for node tools, so I'm hopeful there's a decent solution. It's definitely something to think about though.\n\n@zxqfox All outstanding PRs that touch core files are in ES5. If we merge them into lib (after moving to es6), then the lib and src directories will be out of sync. \n. Using es6 within JSCS is along the lines of having a .jscsrc within jscs. We gain the ability to dogfood our es6 rules and get more hands-on experience of what our es6-centric parsers currently support. Today, we're currently relying on the community to tell us what's wrong with our es6 support.\nPersonally (and other community members might share the sentiment), I want to write more es6 on a day to day basis to learn more about it and have it become second nature. As a module author, I'm also very curious about the process of babel-ifying a tool that's distributed on npm.\n. In regards to a higher barrier to entry, only the basic rule structure would be an es6 class. We could force adherence to es6 idioms within check, but they could easily just write es5 and it'll still compile. \nFor jscs core, we don't get too many contributions outside a small group of us. Suffice to say, we'd all have no problem es6'ing.\nHere are a few downsides (in no particular order, just a brain dump):\nA potential downside/catch is that we'd have to potentially bake in the babel browser-polyfill into the browser bundle based on the es6 features that we use. Not a deal-breaker IMO.\nAnother downside is that we'd need more tooling around development and releasing. We'd likely avoid committing the transpiled code and transpile pre-release. We'd also need a development task runner (grunt, gulp, etc) for transpiling. \nWe'd have to recast the legacy code into es6 (at least the basic rule structure into a class) for a sense of uniformity. Since users copy/paste a lot, we need to make sure our tests and rules have a consistent syntax to avoid getting strictly es5 PRs.\nWe'd have to police the use of es7 constructs that we feel comfortable allowing/maintaining in the codebase. There's likely some babel configuration that could limit the scope of used features during transpilation.\nFolks that install via a git url will have a sad time since the transpiled assets wouldn't exist. We could likely put a post-install script in place to fix that.\nWill think of more potential downsides.\n. +1 for a fix\n. Gonna move my comment to this thread:\nIn the following code:\njs\nvar o = {\n  f() {},\n};\nf() {} is sugar for f: function() {}. f() is part of the function signature (as you'd define params like f(foo, bar)), so it should adhere to the rules. \n. For this particular request, sounds like we only need to support allExcept:\n['shorthandMethod'].\nOn Jul 5, 2015 11:01 PM, \"Henry Zhu\" notifications@github.com wrote:\n\nI guess it's true we were already ignoring getters/setters (so the spacing\nfor that wasn't enforced)\nhttps://github.com/hzoo/node-jscs/blob/b4084d7d4e1fbcb2033aa0c0bcb584fa839434df/lib/rules/disallow-spaces-in-anonymous-function-expression.js#L88\nOk so we would need to add requireSpacesInClassMethod,\nrequireSpacesInGetter, requireSpacesInSetter,\nrequireSpacesInMethodShorthand or something (seems like too many if it's\nseparate rules) - and when we change the config make a single rule for all\nfunction types with options?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1470#issuecomment-118699787\n.\n. @mzgol Added a ticket for this: https://github.com/jscs-dev/node-jscs/issues/1513. \n. @christophehurpeau Thanks for contributing!\n. @zz85 Thanks!\n. I'll upgrade to 2.4.0 while this is still open\n. @mikesherov Upgraded to esprima 2.4.0 and specified the traversal key of handlers for backCompat. Coveralls saying coverage decreased by -0.0%. Is that a blocker?\n. Thanks for contributing the idea @TheSavior. If the goal is to avoid redundancy, you could extract the array to a variable and use it as the value for both rules within your configuration.\n\nI do agree that requireSpaceAroundBinaryOperators reads well. However, if we still need to support the other two, more granular rules, then I'm not sure it's worth the added maintenance. Of course, if the community agrees, then let's do it. Any other benefits aside from avoiding config redundancy?\n. > If you are specifying these in a .jscsrc file, how would you pull them out into a variable? My understanding is that file is just JSON.\nThere's the .js form that lets you put comments and logic in there.\n\nWe also already do shorthands like this.\n\nGood point. \n. :+1: \n. +1 for the clarification. The cases you provide make this rule seem wrong, but padding is usually on the ends. \n. Thanks for contributing @angelsanz \n. LGTM. Will fix the last set of tests to use .isEmpty before I merge\n. Thanks again @inian \n. Is this different than jshint's strict option to enforce the use of use-strict?\n. Nice work here @phlip9. Thanks for contributing! Looks good, but a test showing that a require call reports without the option on would assert that the rule still works properly. \n. Thanks again @phlip9.\n. The weakening of the rule makes sense. We'll see how folks use it. \nLGTM\n. Thanks @christophehurpeau!\n. Yeah, git doesn't track empty directories. \n. LGTM. Nice work!\n. Nice work @lahmatiy. Thanks!\n. Hey @khaledkbadr. Thanks for reporting.\nCan you try jscs --max-old-space-size=4096 --auto-configure .? That'll increase node's memory limit from 512mb to 4gb. That should be enough to avoid the error. \n. See http://stackoverflow.com/a/26094800/700897 for more info. \nWe haven't had to care much about memory concerns for parsing really big files. An alternative concern could be a memory leak in the auto-config generator, but that's hard to say with just this one reported case.\n. Makes sense, but odd that I didn't see that error locally. You could get\naround this doing something like node --max-old-space-size=4096\n./node_modules/jscs/bin/jscs --auto-configure .\nI'm more interested in finding out how to avoid the space issue on the jscs\nside. It's hard to dig in without a reproducible scenario though. I'd only\nbe guessing at possible causes at this point.\nLet me know if that works.\nOn Jul 1, 2015 7:48 AM, \"Kushagra Gour\" notifications@github.com wrote:\n\n@mrjoelkemp https://github.com/mrjoelkemp I get an error when using\nthat flag:\nerror: unknown option--max-old-space-size'`\n\u00bb jscs --version\n1.13.1\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1501#issuecomment-117626807\n.\n. It should on the master branch given a recent commit. Can you try the\nmaster branch and see if that helps?\nOn Jul 1, 2015 9:42 PM, \"Khaled Karam\" notifications@github.com wrote:\nI have a very initial rep that I had the same problem with.\nhttps://github.com/khaledkbadr/token-authentication\nDoes jscs jscs --auto-configure . ignore the node_modules directory??\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1501#issuecomment-117870597\n.\n. Closing as I think 1ba4b45d649729670edf691f9971e38011a8bcdb fixes the problem. Happy to reopen if that's not the case. \n. Setting time aside to review today or tomorrow. Lots to take in here.\nOn Jul 5, 2015 7:42 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\nSince this pull affects a lot (or we could say everything), it should be\nlanded in master asap, since it would be really, really hard to merge it\nwith master in the near future\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1502#issuecomment-118614967.\n. @oredi You need to npm install on the master branch\n. LGTM\n. @oredi Happened to me many many times :) Adding an npm install to a post-checkout git hook should solve that problem.\n. This is missing an autofix test.\n. Looks like a test case is missing for this line: \nhttps://coveralls.io/builds/2972302/source?filename=lib%2Frules%2Frequire-spaces-in-anonymous-function-expression.js#L100.\n\nOnce that's resolved, it should be good to merge.\n. Sigh that we have to now maintain this but LGTM\n. Lgtm\n. Not seeing new logic about how this prevents autofix from being affected. A test would suffice for reassurance. \nLgtm, but this is for sure a breaking change. So merge in the 2.0 branch? Still haven't heard if we're doing 2.0 first or 1.14. \n. Thanks for the explanation @markelog. 2.0 on 7/14. Sounds like a plan.\n. It's a major bump since folks using babel-jscs will hit errors without the\nlatest jscs master since you removed the monkeypatch.\nOn Jul 8, 2015 8:28 AM, \"Henry Zhu\" notifications@github.com wrote:\n\nI can merge https://github.com/jscs-dev/babel-jscs/pull/10/files so we\ncan change jscs-dev/babel-jscs#remove-monkeypatch. Would that be a major\nversion so 2.0.0 or just 1.0.4?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1515#issuecomment-119558521.\n. Check out the Maintain.md docs (i believe) for the automated way of\ngenerating the changelog. We'd need to automate this link generation in\naddition to backfilling for old releases.\nOn Jul 7, 2015 9:44 PM, \"Henry Zhu\" notifications@github.com wrote:\nRef jscs-dev/jscs-dev.github.io#19\nhttps://github.com/jscs-dev/jscs-dev.github.io/issues/19\nNot sure exactly how we would want to add it but just a suggestion.\nIt links to the previous minor version github commit link\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/jscs-dev/node-jscs/pull/1516\nCommit Summary\n- Docs: add link to commits between minor releases in CHANGELOG\nFile Changes\n- M CHANGELOG.md\n  https://github.com/jscs-dev/node-jscs/pull/1516/files#diff-0 (36)\nPatch Links:\n- https://github.com/jscs-dev/node-jscs/pull/1516.patch\n- https://github.com/jscs-dev/node-jscs/pull/1516.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1516.\n. Forgot about this item. Nice!\n\nWith the docs generated from the rules, there are no readme changes to make (thankfully). This should be good enough.\nLGTM\n. @zxqfox is correct. The rules with a value of null are never executed. Happy to reopen if you find that to not be the case. \n. @zxqfox not sure i understand the need for allExcept in the context of this issue. We don't nullify parts of a rule's configuration. \nNullifying the whole rule is the way to go. We should have been more clear when suggesting null. \n. Great work here @oredi! Excited for this rule. However, as my comments suggest, I worry about the maintenance of the current state of the code. Any improvements to stating the high level algorithm through function usage is a big win. \nFeel free to ping me for clarification or when the edits are made. Thanks for the great effort here. \n. Great job here @oredi! The code reads much better now; hopefully you agree. Thanks so much for making the edits.\n. Or support both but update our docs to only use parserOptions. This is not\na big win though and I agree that we only work with esprima-like parsers,\nso the semantics are currently upheld.\nClosable imo\nOn Oct 1, 2015 10:53 PM, \"Henry Zhu\" notifications@github.com wrote:\n\nIf we do this - 3.0 change?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1523#issuecomment-144903177\n.\n. +1 for a separate preset. Maintenance is pretty low for the preset itself - it's just a collection of rules. The rules are the where most of the maintenance is. \n. I restarted the build to see if the coveralls report changes. It's claiming the token assertion lib dropped in coverage though you're not really touching it: https://coveralls.io/builds/3102954/source?filename=lib%2Ftoken-assert.js\n1. This PR is missing fix tests.\n. @ShashankaNataraj Mind rebasing off of master and then force pushing up?\n. Nice work here @oredi! \n\nCan we have a test for a single line comment? Still not seeing why the regex was used \u2013 a test would help clarify the comment.\n. lgtm. nice work!\n. What about the concat of envName? That's an implicit conversion.\nOn Jul 17, 2015 12:04 PM, \"Adam Buczynski\" notifications@github.com wrote:\n\ndisallowImplicitTypeConversion is triggered for the following code:\nreturn '' +\n    '\\'use strict\\';+\\n\\n' +\n    '/*\\n' +\n    ' * Environment configuration (' + envName + ')\\n' +\n    ' /\\n' +\n    'module.exports = {\\n' +\n    '  //Your configuration here\\n' +\n    '};\\n';\nThis is because of the '' +, but there is clearly no type conversion\ngoing on in the code block.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1538.\n. Hi @aivus. That's a necessary part of the rule to validate its configuration values. To solve your problem, you can set the rule's value to null in your config. \n\nSpecifically, set the preset in your config, then state the rule you want to override and then assign its value to null. \n. Or we could just support both null and false for turning off a rule. @markelog \n. Nice work here @ruimarinho! Minor issues in the PR, but a solid contribution. Excited for this rule. \n. That new library that you imported might be affecting other tests according travis? Does that library mutate a native object?\n. Actually, I'm wrong. A completely separate PR is also failing. There might be a dependency bump that is causing builds to break.\n. Seems like babel v5.8.3 is causing duplicated comments. \n@hzoo any chance you could see if the latest babel master passes the test suite? I had a hard time getting a git url download and/or an npm link of a local copy of babel to work well.\n. :+1:\nOn Jul 22, 2015 6:21 PM, \"Rui Marinho\" notifications@github.com wrote:\n\n@mrjoelkemp https://github.com/mrjoelkemp @hzoo\nhttps://github.com/hzoo thanks for the input - babel-jscs was indeed\nthe culprit, but just found that localeCompare is broken on some versions\nof node. For that reason, unless we write specific tests for those\nversions, then it's best to leave (asc|desc)-locale sorting out for now.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1545#issuecomment-123887513.\n. Great find with the new plugin. LGTM\n. lgtm minus the test fail\n. babel-jscs worked around some breaking changes in babel that were causing\nthe failures. The fixes were released in patch versions which travis picked\nup fine.\n\nOn Mon, Jul 27, 2015 at 10:47 AM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nWeird, some prs failed, but now, without changing single thing they\npassing, hm\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1547#issuecomment-125231702.\n. Lgtm\n. > because the only style guide anyone likes is his/her own\n\nThat's not entirely true as the airbnb preset is the most highly visited part of the JSCS repo. \n\nChoosing a favorite style guide contradicts that quality.\n\nIf you supply your own jscsrc, then you are overriding the default. This change does not stop anyone from doing that. Supplying a default preset, in addition to --auto-configure allow folks to download the tool and avoid any setup.\n. Fair points @jacksonrayhamilton. Thanks for your thoughts. We wanted to try it out in 2.0 and remove it in 3.0 if there was substantial backlash. \nYou bring up a good catch though. @markelog would a user have to set preset to null to provide their own custom config. If they don't nullify the preset field, do we view it as overriding the airbnb preset? \n. Safe to close?\n. Thanks for contributing @jacksonrayhamilton. It's a good point. We spoke about renaming disallowMultipleVarDecl and requireMultipleVarDecl for clarity, but didn't really touch on the shortening of Variable and Declaration. \nWould you like to submit a PR that renames the rules? I'm not sure we have a lot of breaking, rule renaming going on in 2.0. @markelog, do you think we should maintain backCompat for this even if the rename lands in 2.0?\n. Hi @yekver. Thanks for contributing. So that I'm clear, you're proposing a new rule value for the requirePaddingNewLinesInObjects rule? \n. Thanks for reporting @shauns. Would you be open to trying out babel-jscs as a replacement for (now deprecated) esprima-fb? You'll likely need to use the latest master of jscs as well. Let me know if that fixes the issue.\n. Try autofix for the errors :) We don't have fixing logic for everything though. \nGlad it's fixed. \n. Thanks for contributing @BigBlueHat. I'm looking into the build breaking.\n. Is this ready for review? \n. LGTM\n. Hi @fishbar. Thanks for contributing. The proper way to skip the checking of a rule is to supply a value of null for that rule in your config: http://jscs.info/overview.html.\n. Nice work here @romanblanco. Thanks for contributing! LGTM\n. Nice work here! \nLgtm, but @mikesherov is the indentation expert. Will wait for his approval. \n. Sounds like a new rule value allExcept: ['callbacks'] would do it.\n@benjamincharity Would you like to give the implementation of this new value a shot? We could use the help. If you have any questions, feel free to ask questions on this thread or on gitter.\n. This is pretty great! Thanks for the recommendation @stevemao. \nI assume we'd have to tweak the handlebars templates to get this sample closer to what we produce for our changelogs. We like giving authors credit and grouping all Rule-related changes under a rules section \u2013 instead of a section per rule. \nThis is definitely a +1 from me to try integrating it into the build flow. \n@stevemao Do you have the command that you used to generate our changelogs handy? \n. @TheSavior Mind confirming that this is resolved?\n. Hey @benjamincharity. Thanks for reporting. \nAny chance you could specify your jscs version (I assume it's 1.13 if you just made the switch to jscs) and a brief snippet of code that reproduces the error?\nThanks in advance.\n. The following tests passes:\n\n\nI don't see anything glaringly wrong with your config either. I'm going to close this issue since the test shows that the rule is catching that case. \nPerhaps someone else can provide insight into what might be going wrong. Let me know if you find anything. Happy to reopen if it's a legit bug with the rule.\n. @benjamincharity hurray! glad to hear it.\n. Hi @tkissing. Thanks for inquiring.\nThe rule forces you to use anonymous function expressions instead:\njs\nvar foo = function() {\n  return 'foo';\n};\n. I think the best option here is to support allExcept: ['functionDeclarations'] to avoid changing the default behavior.\nWould you like to give that a go? I'll reopen and update the title accordingly if so.\n. Nice catch :)\nWhat's the alternative?\n. Thanks @TheSavior. Not a fan of the custom file walker, but it gets the job done.\nWorking with globbing for me has involved hitting my head against a wall several times \u2013 particularly when it comes to multiple excludes. node-glob does have an exclude option that I haven't been able to get working properly (outside of jscs). The approach of constructing one glob pattern that incorporates directory and file exclusions should work.\nWill explore other globbing libs and node-glob's exclude to see if there's a better way.\n. Thanks @stevemao for finding that npm issue. Closing this since we can't do anything about it and it's within npm's wheelhouse.\n. True :) I didn't see why we would change our readme for an npm bug, which is why I didn't consider it an option. \n. Thanks for contributing @SimenB! \n. Thanks for reporting @kobezzza. Would you mind sharing your entire jscsrc? \nThe error implies that the babel visitor types aren't being applied to estraverse in our tree iterator. @hzoo, can you confirm that all is well on that front? Hopefully babel didn't remove those keys. We should also likely peg our babel version in jscs proper. \n@kobezzza Can you try removing jscs from node_modules and installing it again? Any change? \n. @kobezzza Thanks! I'm not familar with how Jetbrains uses JSCS, but does it require you to globally install jscs? Or does it ship with a particular version of jscs?\n. Can you globally install jscs 2.0? Make sure your jscsrc has esnext: true to use babel-jscs. The esprima-fb parser is deprecated and babel-jscs replaces it.\nSeems like there's a workaround, so I assume your issue is resolved. Feel free to report back if the upgrade to 2.0 and esnext flag fixed your issue.\nThanks again for reporting!\n. Thanks for reporting @TheSavior. Any help investigating this is appreciated. \n. Thanks @jacksonrayhamilton. Great ideas. Would love two separate issues on the rule proposals. Alternatively, if you're up for submitting a PR that lands both, then that would be awesome.\n. cc @markelog \n. @angelomichel Thanks for reporting. For use with atom, do you need to globally install jscs, or does it ship with an Atom plugin? \nIf you have to globally install jscs, you're likely on an old version. Upgrading your version of jscs will fix the issue. Mind reporting back if that worked?\nThanks! \n. Thanks for reporting back. Is it possible to provide a snippet of code that reproduces the error?\n. Glad to hear about the fix, but the error message is concerning. It should have produced a style error, not a runtime error. \nWe'd still appreciate a snippet to prevent this from happening to others. \nThanks again. \n. Happy to reopen if we have a snippet of code for reproducing the error message. \n@angelomichel, any chance you could help us? \n. You sure can! Thanks for asking. Feel free to ask in the gitter room if you need any further assistance.\n. Why shrinkwrap jscs? It's usually a devDependency.\nWe could remove the babel dependency and inline its visitor keys for\nestraverse.\nOn Jul 29, 2015 5:44 PM, \"Alexej Yaroshevich\" notifications@github.com\nwrote:\n\nI bet it's because of babel-* packages have a lot of dependencies.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1586#issuecomment-126105949\n.\n. Btw, we're totally open to a Pr that inlines the visitor keys into\ntree-iterator.js if anyone is interested.\nOn Jul 29, 2015 9:29 PM, \"Rui Marinho\" notifications@github.com wrote:\nIn addition to @mrjoelkemp https://github.com/mrjoelkemp's comment,\njust tested the improvement from dependency flattening from npm@2 to npm@3\nand that number gets reduced by ~330 lines. Not a huge improvement, but\nstill nice.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1586#issuecomment-126148770\n.\n. @hzoo Good point about babel-core being used within babel-jscs. I forgot that parse was being used. Looking into parse though, it seems like it's just mostly a passthrough to babylon. \n\nDo you think that babel-jscs could just inline parts of babel-core's parse and parse directly with babylon? This would avoid the truckton of dependencies from babel-core (unless I'm underestimating how much of those dependencies are necessary for an ast parse).\n. Good point, @hzoo. Thanks for looking into it.\nI'm going to close this as a wont-fix since my original question of why a devDependency should be shrinkwrapped wasn't addressed. I'm not convinced this is an actual problem that's breaking anything.\nHappy to reopen with more details.\n. Thanks for reporting @Coobaha. So that I'm clear, you're saying the rule fails for dynamic object properties? The printed error oddly made it look like a missing esnext: true configuration.\n. I can't reproduce @Coobaha.\nThe following test passes:\njs\n        it('should not report on an import plus aligned computed property names (#1587)', function() {\n          checker.configure({ esnext: true });\n            assert(\n                checker.checkString([\n                    'import React, {PropTypes} from \\'react\\';\\n',\n                    'import {ImmutableComponentPure} from \\'common/ImmutableComponent.js\\'',\n                    'let myObject = {',\n                      '[myKey]    : \"myKeyValue\",',\n                      '[otherKey] : \"myOtherValue\"',\n                    '};'\n                ].join('\\n')).isEmpty()\n            );\n        });\nAny other clues?\n. A clue! Seems like it's the MemberExpression key (e.g., [$main.pod]) that's causing trouble. \nThe following test fails: \njs\n        it('should not report on an import plus aligned computed property names (#1587)', function() {\n            checker.configure({ esnext: true });\n            assert(\n                checker.checkString([\n                    'import React, {PropTypes} from \\'react\\';\\n',\n                    'import {ImmutableComponentPure} from \\'common/ImmutableComponent.js\\'',\n                    'let myObject = {',\n                      '[myKey]     : \"myKeyValue\",',\n                      '[$main.pod] : \"myOtherValue\"',\n                    '};'\n                ].join('\\n')).isEmpty()\n            );\n        });\n. Thanks for reporting @Nightmaster. \ncc @zxqfox \n. :+1: \n. Thanks for contributing @Ky6uk \n. :+1: \n. JSCS did it first: http://jscs.info/rule/disallowOperatorBeforeLineBreak.html :)\nThat should suffice. There's a require counterpart as well. \n. Thanks @kobezzza. Nice catch. \nReproduced with a failing test:\njs\n    it('should not report on an if statement followed by a NewExpression #(1594)', function() {\n        checker.configure({ disallowSpacesInCallExpression: true, esnext: true });\n        assert(checker.checkString('const newObj = dataIsMap || dataIsSet ? new data.constructor : {};\\n\\nif (dataIsMap) {\\n\\n}').isEmpty());\n    });\n. I believe you can do this as of 2.0. This commit by @markelog landed it: https://github.com/jscs-dev/node-jscs/pull/1150/files#diff-567cf572129c7869c556d43748ad5e63R104.\n@markelog If you can confirm that this works as intended, we should definitely document this (powerful) feature.\n. Thanks for contributing @9point6. The typical rule values for these exceptions would be allExcept: ['function', 'if', 'else'].\nWould you like to submit a pull request to tackle this issue? We could use the help.\n. Test fail, but LGTM otherwise\n. Hey @kawaljeetdhesi. Thanks for the question, but you might not get much help on that issue here. I recommend checking out https://www.npmjs.com/package/gulp-jscs. \nIf all else fails, you can ask in our gitter room: https://gitter.im/jscs-dev/node-jscs \n. What is $.jscs supposed to do? Shouldn't it be just jscs?  Also, you can just shell out to jscs -x with those files. Or use the sublime text plugin JSCS-Formatter. \n. That's a question for the gulp repo. I'm not sure how to solve your issue,\nbut it has little to do with jscs it seems.\nSorry we can't be of more assistance. Post your question on Stack Overflow;\nyou'd have a greater chance of getting help.\nOn Aug 5, 2015 8:54 AM, \"kawaljeetdhesi\" notifications@github.com wrote:\n\n@hzoo https://github.com/hzoo you are right.\n@mrjoelkemp https://github.com/mrjoelkemp \"jscs -x \" individual works\nbut i am creating a generic gulp task which will run JSCS on all the\nfolders and automatically fix the issues.\nand gulp.dest() only accepts one directory.\nIs there any other way where i can pass an array of directories?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1598#issuecomment-127988477\n.\n. Good idea. Thanks for contributing. The value should be allExcept:\n['require'].\nOn Jul 31, 2015 3:58 PM, \"JD Ballard\" notifications@github.com wrote:\nOur code style requires require() statements to immediately follow use\nstrict;. However, JSCS doesn't like that :)\n// requirePaddingNewlinesAfterUseStrict'use strict';var something = require('something'); // ERROR\n/* rest of code, after exactly 1 empty line */\nIt'd be nice to have\n{\n  \"requirePaddingNewlinesAfterUseStrict\": \"require\"\n}\n// @sindresorhus https://github.com/sindresorhus\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1599.\n. Odd regarding Coveralls' drop in coverage. I thought there were already tests for that when @markelog landed the relevant fix.\n. Good tip. Thanks. Changes pushed.\n. Thanks for reporting @Famlam.  \n\n@zxqfox mind looking into this? Seems like you landed some changes to that rule last.https://github.com/jscs-dev/node-jscs/commit/91e9a38c45bb41e54feccb6d004be73d54c024c4#diff-105ac0edfe6913192922933858c13d7f\n. LGTM aside from the JSHint complaints. \n. Nice find @lahmatiy. Would you like to submit a patch? We'd greatly appreciate it.\n. Nice work here @jacksonrayhamilton! Thanks for contributing. \nLGTM\n. Seems like our tests just check for an error code. If we really wanted to test this change, we could enhance https://github.com/jscs-dev/node-jscs/blob/master/test/specs/cli.js#L433-L444 to check the error message. \nMind giving that a try?\n. ping @lahmatiy. Would love to include this for the 2.1.0 release happening on Monday. Any chance the tests could be added by then?\n. Thanks for contributing. Seems like you have a jshint error: https://travis-ci.org/jscs-dev/node-jscs/jobs/73833209\n. Thanks. Seeing a build fail for io.js: https://travis-ci.org/jscs-dev/node-jscs/jobs/74187606 related to coveralls. Not entirely sure what's causing it.\n. Thanks for contributing. That seems like a breaking change for the rule. \nI don't see a good way of adding an exception to allExcept. \nThere's always disabling of the rule per file with jscs: disable. \nIf we had support for extending jscsrc files, then you could have a test-only jscsrc that disabled that rule. \n@hzoo, any opinion on this? \n. Then I guess we're good here. I foresee folks from the opposite camp wanting a strict mode that disallows string to string. Perhaps we should just do allExcept: ['stringConcatenation']. Though wordy, it doesn't weaken the rule for everyone. \nThoughts? \n. Nice work here @michelle. Thanks for contributing!\n. Thanks for contributing! Great idea. \nA new rule value to support this would be allExcept: ['comments']. \nWould you like to give the implementation a shot? We could use the help. \n. Yes. @christophehurpeau is correct. Thanks!\n. LGTM\n. LGTM\n. Yeah, we haven't added any functionality directly with this bump, so it's a patch. If we had esprima aa a caret dep, users would get it immediately. Not seeing why it shouldn't qualify for a patch. \n. > some may consider allowing es6 grammar when they haven't asked for it to\n\nbe a bug.\n\nBased on our policy, yes, that's a minor bump. Good point.\nOn Wed, Aug 5, 2015 at 10:03 AM, Mike Sherov notifications@github.com\nwrote:\n\nEsprima 2.5.0 brings with it all remaining ES6 funtionality. Technically,\nthis is for a minor version considering it has new features, and some may\nconsider allowing es6 grammar when they haven't asked for it to be a bug.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1615#issuecomment-128007424.\n. Thanks for reporting the issue @mduvall. \n\ncc @hzoo \n. Nice work so far @hzoo. This is a toughie but a goodie.\n. cc @mikesherov \n. :+1: \n. Regarding your comment about debugging. I've been using node-debug a bunch in my projects. We could have a debug channel as the rule name for more control. \nI think it would be cool to do it.only on a test, and then run DEBUG=* mocha to see the entire debug logging for that test (printing out asts and other info).\nHappy to have this incorporated into core (though there's a valid argument for it seemingly cluttering the codebase, so I'll leave it to @markelog to give the go ahead for using debug)\n. Thanks @hzoo \n. LGTM\n. Nice work @hzoo \n. > This still brings up the issue about whether we will support babel in jscs itself or if we need to make a custom repo/rules for es7+ features. I'm ok with either\nWas this brought up in another issue?\nES7+ rules have the potential to make backward incompatible changes frequently. We try do that only in major versions. \n- To get around this, we could document that certain es7-labeled rules are prone to breakages in patch versions.\n- It's an easier user-experience if we have the rules in core. \nI vote to add es7+ rules into core. \n. Thanks for contributing @natemara!\n. Thanks for contributing @existentialism!\n. Thanks for contributing @westonruter! \n\nmost JS files have JSHint/JSLint configuration comments like global.\n\nSeems like a codebase-specific choice. You could just define the globals in a jshintrc. The only built-in exception to the rule is the jscs pragma.\nIt seems to me like the best course of action is to set allExcept: ['globals'] in your configuration. I don't see why the wordpress preset would need to be extended for this.\n. Yup!\nOn Aug 6, 2015 7:05 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nSince wordpress (see the #1632\nhttps://github.com/jscs-dev/node-jscs/pull/1632) explicitly prescribes\nuse of such comments, should we reconsider?\n@mrjoelkemp https://github.com/mrjoelkemp ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1627#issuecomment-128535672\n.\n. Really not sure why coveralls is complaining about doc-only builds: https://travis-ci.org/jscs-dev/node-jscs/jobs/74479224. This and another doc-only PR keep failing :(\n\n@markelog should we still merge? I assume this would break master, unfortunately.\n. Thanks for contributing @kaicataldo. \nThanks for the confirmation @markelog.\n. All rules working with es7 is the other half of supporting es7. We run into\nissues with new syntax that doesn't have the appropriate types without\nworkarounds like _babelType.\nAgreed about waiting for es7 rule requests.\nOn Aug 7, 2015 1:52 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nI'd say we should wait and see how many people needed it, presumably all\nrules should work correctly with es7\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1634#issuecomment-128777307\n.\n. Haven't done any es7-only rules, but we are making fixes to support es6.\n. I just did something like: \n\n\nIn regards to the use within destructuring, in the case of\njs\nvar {foo} = {foo: $('.foo')};\nThe validation would occur on the right have side.\nIf it were:\njs\nvar {foo} = {$foo: $('.foo')};\nThen the destructuring is invalid since the destructured var would need to be $foo.\nAs such, simply returning is viable.\nWould you like to make those adjustments to the PR?\n. LGTM\n. We'll fix the commit message before merge. Thanks for contributing!\n. You can do:\njs\nrequestSent = _.map(requests, req => ({\n    requestBody: $.parseJSON(req.requestBody),\n    requestHeaders: req.requestHeaders,\n    method: req.requestMethod,\n    url: req.requestURL\n  })\n);\nhttps://babeljs.io/repl/#?experimental=true&evaluate=true&loose=false&spec=false&code=requestSent%20%3D%20_.map(requests%2C%20req%20%3D%3E%20(%7B%0A%20%20%20%20requestBody%3A%20%24.parseJSON(req.requestBody)%2C%0A%20%20%20%20requestHeaders%3A%20req.requestHeaders%2C%0A%20%20%20%20method%3A%20req.requestMethod%2C%0A%20%20%20%20url%3A%20req.requestURL%0A%20%20%7D)%0A)%3B\n. In theory, it's a great idea. However, it feels like a solution in search of an integration. \n1. None of our integrations have requested this. \n2. The perf gains only arise when you'd otherwise redundantly parse really large files (like 3rd party libs that likely shouldn't be linted) but they're still only saving a few hundred ms in aggregate once vendor libs  are excluded.\n\nHow it would work with CST?\n\nWe'd need an AST to CST converter if the user pipes in an AST (assuming the CST structure can be extrapolated from an AST). Without a CST being a json structure, you can't pipe it. \nSurely the ESTree folks have had lengthy discussions on this \u2013 which is why they're pushing for the JSON-formatted CST.\n. Those are all static methods of a Function class.\nOn Aug 10, 2015 9:23 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nWe use those constructions a lot, i guess it would be better to not\nduplicate the same logic, since if there would be a error, you would need\nto check all those places and write tests for them too.\nWe could create another helper module for those cases\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1644#issuecomment-129447391.\n. Thought about alternate solutions to adding a new function to utils, but all other abstractions are too specific. \n\nFor example, making a Property class with the getBabelType is misleading as more than just properties can have a _babelType. \nMaking it part of an AST class could work, but _babelType isn't really a property of an AST (though subtrees are also syntax trees). Though, if we were to make an AST class, then we could possible move tree-iterator logic to it. \nThoughts?\n. Hey @thenovices! Thanks for contributing.\nWe don't currently have a way to allow users to configure delimiters to skip. In https://github.com/jscs-dev/node-jscs/issues/1434, we spoke about giving the user the power to transform source code pre-linting (where you'd be able to remove all of your erb delimiters).\nHow does JSHint strip the delimiters? \n. Very interesting. Thanks for linking the PR. #1434 gives the user (perhaps too much) power to make their own source transformations (which could include stripping erb tags or anything else). However, the JSHint solution is effective and avoids the redundancy of users regex replacing source files in the case of wanting to strip delimiters.\nI'm definitely in favor of supporting a similar feature. @markelog thoughts?\n. Thanks for reporting. You can use the errorFilter feature to decide which\nfiles should report errors.\nLet me know if you need any help getting started with that feature.\nOn Aug 10, 2015 10:58 PM, \"melbourne2991\" notifications@github.com wrote:\n\nWe have a lot of code that has not yet been subject to any style guide.\nBecause of this virtually our entire codebase contains errors (over 5k). We\nwant to apply the style guide only to new files, I noticed the config does\nhave an \"excludeFiles\" array, but no mechanism for excluding all and just\nincluding a specified list of files/folders\nI tried globbing\nexcludeFiles:\n!/folder//myfoldertoinclude\nThis didn't seem to work. Is there any work around for this?\nThanks\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1657.\n. requireArrowFunctions should work\n. Let me know if it doesn't and I'll reopen\n. Cc @hzoo \n. Nice work! Merge away! \n. Feel free to add the following to Maintain.md:\n\nSome golden rules:\n1. We never hit the Merge pull request button on github. This avoids merge commits which makes history muddy. We generate changelogs from the history, so the less noise \u2013 the better. \n2. We never change history on master. If you make a mistake and push up a silly commit to upstream's master, then you issue a revert commit, you do not remove the commit from the history and force push up.\nMy typical flow is (other maintainers likely have a more streamlined process):\n1. hub co the_pull_request_link to check out the PR\n2. Make sure that it's up to date with master: git pull --rebase upstream master\n   - Assuming you have a remote upstream pointing to git@github.com:jscs-dev/node-jscs.git\n3. Make sure the PR is still passing all tests: npm test\n4. Fix up the commit message (according to the suggested format)\n   - Make sure the issue number is listed if it's a bug fix: Fixes #123\n   - Make sure the commit closes the PR number: Closes gh-124\n   - Make sure any referenced issues are listed: Ref #111\n   - If they have a single commit, then git rebase -i HEAD and choose to reword that commit according to the above rules.\n   - If they have multiple commits, then git rebase -i the_SHA_before_their_first_commit and fixup all commits except the top most. reword the top-most commit according to the above rules.\n5. Save the commit changes and exit the editor of that tab of the editor\n6. The rebase should be carried out without a problem \n   - If you run into problems, git rebase --abort and ask another maintainer for help\n7. git checkout master && git pull upstream master && git merge -\n   - This should result in a fast-forward merge. If you have a recursive merge, then you did something wrong.\n8. For sanity sake, feel free to run the test suite again post-merge: npm test\n9. Once it's all passing, git push upstream master to push that commit to the master branch of the main jscs repo.\n. Yes, please add to Maintain.md.\nOn Sat, Aug 15, 2015 at 3:43 PM, Henry Zhu notifications@github.com wrote:\n\nThanks for the in depth steps and explanation! Was mostly what I thought -\nadd the Closes statement and fast forward merge it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1675#issuecomment-131436914.\n. From a maintenance perspective, I'm against these additions. We can't\nprovide a total set that makes everyone happy and we'll get requests for\nevery pragma from every popular tool.\n\nFurthermore, only extension makes sense with the defaults. As stated in\nthis thread, you either get the defaults only or the user supplied set,\nnever both. And wanting all but one (to avoid a false positive) involves\ncopying all other exceptions unless we also have a way to negate a single\ndefault.\nOn top of this, we have shareable presets. Folks can write exceptions once\nand use everywhere.\nI don't see the benefits that warrant this special treatment and\nmaintenance.\nOn Aug 20, 2015 7:00 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nglobals i guess, other then that, it looks good\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1685#issuecomment-132974322\n.\n. Speculation based on the pattern of community requests, not misguided\nspeculation. Just wanted to throw my thoughts in.\n\n:+1:\nOn Aug 20, 2015 7:42 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nwe'll get requests for every pragma from every popular tool\nDon't see anything bad with it, if people would send as a request, it\nwould mean they needed it.\ninvolves copying all other exceptions unless we also have a way to negate\na single default\nYeah, that is surely a downside, although we could mention that set in the\ndocs, so user would need to copy-paste it.\nRight now, if user use some preset and istanbul for example, their would\nneed to add that an exception, whereas a goal here, at least how i see it,\nis for users to know much less about configuration of specific config, and\njust set \"preset\": \"something\", and do not require to know anything else,\ndon't go to read docs or figure out how to add an exception.\nAnd it is pretty much what already do with other rules, like\nhttp://jscs.info/rule/requireSpaceBeforeKeywords.html\nWhereas, downside is although probable but speculative.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1685#issuecomment-132983356\n.\n. No, that's the assuming properties about the left-hand side that don't hold with destructuring. This ticket is an existing bug in the rule where it only checks the first property in an object on the right hand side.\n. Hey @con-ssc. Thanks for reporting. Which version of jscs are you using?\n. That could work\nOn Aug 27, 2015 5:55 PM, \"Henry Zhu\" notifications@github.com wrote:\nSo do we just have to change this line\nhttps://github.com/jscs-dev/node-jscs/blob/4a9bfa2b1ce84df5b141cbf4295e862798a7ff1e/lib/cli.js#L86\nif (program.fix || program.autoConfigure) {\n    program.maxErrors = Infinity;\n}\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1695#issuecomment-135566499\n.\n. You're a beast.\n. :+1: \n. .git sounds like a good default exception to add to excludeFiles. \n\nIf @markelog agrees, then would you be open to submitting a PR? We could use the help.\n. :+1: \n. :+1: \n. Nice job. Sooooooooooooo glad to see this go in.\n. How about a test for:\n/* my sweet comment */\n/* my super sweet comment */\nor any combination of stacked comments\n. Nice work here @bjdixon! \n. Woot! Looks great @bjdixon. Thanks for the effort.\n@markelog mind giving this another glance?\n. Thanks for reporting. To be clear, you reinstalled jscs and it worked\nright? You didn't install lodash separately to make it work.\nOn Aug 26, 2015 6:20 AM, \"Oliver Salzburg\" notifications@github.com wrote:\n\nClosed #1730 https://github.com/jscs-dev/node-jscs/issues/1730.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1730#event-392680112.\n. Awesome. Thanks for the clarification! Enjoy.\nOn Aug 26, 2015 8:04 AM, \"Oliver Salzburg\" notifications@github.com wrote:\n@mrjoelkemp https://github.com/mrjoelkemp Correct. I realized that the\ninstalled lodash dependency was missing a lot of files. Something must\nhave went wrong during the initial installation of jscs. I cleared out my\nwhole node_modules and ran npm i again.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1730#issuecomment-134967438\n.\n. Try npm cache clear, removing your node_modules folder (or just jscs) and\nthen doing an npm install.\n\nDoes that work?\nOn Mar 24, 2016 12:33 AM, \"simkessy\" notifications@github.com wrote:\n\nI'm getting this issue after trying to update to 4.6.1. Not sure how to\nfix it\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1730#issuecomment-200660132\n. LGTM\n. That's the ideal usage: use jscs for style checks and another linter for\nother linting needs.\n\nHonestly, it's painful to see communities reinventing the wheel when it\ncomes to linting rules. Everyone loses when we stall progress implementing\nthe same features across numerous tools (eslint, babel, esformatter).\nWe've heard from the eslint community and our own that folks like the\nconvenience of one tool that covers linting needs. We have the machinery to\ndo non-style rules already but have punted those rules to eslint for\nsemantic adherence.\nTo my earlier point about not duplicating effort, using eslint as a\ndependency makes most sense.\nIf most of the parties are in agreement, then we can list out the problem\nareas bridging the two tools.\nOn Sep 17, 2015 1:40 PM, \"Ron Korving\" notifications@github.com wrote:\n\nWhy bother complicating things? I already use ESLint for safety checks and\nJSCS for style checks. I'm absolutely fine using 2 tools for 2 different\npurposes. I don't need them mixed up. Next year, someone will make \"ESLint\n2000 Pro\" and I may want to use that instead of ESLint. That should have no\nimpact on how I use JSCS.\nThe only added value I can see is sharing ASTs, so performance could be\nboosted. But then I would suggest releasing a module that parses a file's\nAST and then passes it through a JSCS API and an ESLint API. At least then\nyou're not creating dependencies between ESLint and JSCS.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1771#issuecomment-140968908\n.\n. :+1: great work here. \n. :+1:\n. Thanks for suggesting it. What problem does it fix with the current\nimplementation? We've received no complaints so far.\nOn Oct 4, 2015 4:19 PM, \"Gajus Kuizinas\" notifications@github.com wrote:\nhttps://github.com/gajus/table package is a very modular, well documented\nand well tested module/function for generating text tables. It allows\ngranular customisation of how table contents is aligned, text wrapping,\ntext truncation, border style and text padding.\nIf accepted, I will happily create a PR.\nWant to back this issue? Post a bounty on it!\nhttps://www.bountysource.com/issues/27158702-consider-using-table-package-instead-of-cli-table?utm_campaign=plugin&utm_content=tracker%2F281640&utm_medium=issues&utm_source=github\nWe accept bounties via Bountysource\nhttps://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F281640&utm_medium=issues&utm_source=github\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1836.\n. Thanks for the insight.\ndo not effect, as far as I can tell, JSCS use case\n\nThat's precisely the point though. Until we have the pain caused by those issues you mentioned, we have no real need to move off of it.\nIf that time comes, we'll give table a shot. Thanks for contributing.\n. Lgtm. Great work @bjdixon! \nI know the body of that function was an extraction of the same code, but the comments (if possible) would help readability of the rule. It's hard to visualize programs that satisfy parts of the code.\n. :+1: lgtm\nOn Sun, Oct 11, 2015 at 1:29 PM, Brian Dixon notifications@github.com\nwrote:\n\nThanks for the review @mrjoelkemp https://github.com/mrjoelkemp! I've\nupdated the PR to comply with most of your comments. However, I'm\nstruggling in coming up with the conditions for the last test mentioned.\nHappy to update the PR again if you or anyone else can point me in the\nright direction.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1856#issuecomment-147223319.\n. That sounds like an issue in Commander @hzoo; I'd expect either form to work. The stacktrace hints at path.substring not existing \u2013 which doesn't make sense.\n. :+1: \n. Do we know what's actually taking a long time during these tests? Otherwise, double it and call it a day?\n. :+1: \n. Nice! Way better\n. :+1: \n. Why does this skip async? \n. :+1: \n. Thanks for contributing!\n. Hi @ilwebdifabio! Thanks for reporting the issue.\n\nI'm not seeing a possible cause right away, but some additional information might help lead to possible causes:\n- Did your jscsrc change at all between version bumps?\n- Do you mind pasting your jscsrc so we can see which rules you're using?\n- Did the number of files change significantly between version bumps?\n- How many files are in src/scripts roughly?\n- Or are you saying that you only bumped the version, changed nothing else, and noticed this problem?\n- Do you notice the problem if you only fix your gulpfile?\nOther maintainers may have other hunches. Thanks in advance for the information.\n. You should be able to ignore those by using excludeFiles. Thanks! \n. It's not covered within that suite of tests. This one checks that the member access operator in var bar = foo[0]; isn't throwing a false-positive. \n. The test still fails, which successfully indicates a problem. I agree that the timeout isn't great though. What would the alternative be? \n. Thanks @ikokostya! I'll add this to the PR.\n. I'm iffy about this. Since the configuration syntax isn't well-formed JSON (i.e., the property names aren't quoted), you can't just JSON.parse() it to go from string to object.\nThe alternative (unless you guys have any suggestions) is a messy regex that identifies the property names \u2013 allowing me to loop over the matches and replace them with quoted versions.\n. I don't need to test that the config only affects a single file because a new JsFile object is created per call of checkString.\nI don't need to test that files without the config work, because the entire suite passes.\nAny thoughts on additional test cases? \n. Won't lint, so I'll replace it tomorrow. Going to try to construct a JsFile from the config to use the AST to get the keys and values to construct the object. Feels like the eval solution though. A regex might be the more \"straightforward\" solution. \n. Great tip. Thanks.\n. We need to be really careful that rules are prepared to be configured more than once. This implies that state must not linger between calls. \nSuppose requireTrailingComma: { ignoreSingleValue: true } was the default configuration. Had I kept line 14 above, this._ignoreSingleValue would be true. If a file-wide configuration (using the same checker instance) sets requireTrailingComma: true, then during the reconfiguration of the rule (to use the file-specific config) would not unset (or falsify) this._ignoreSingleValue. Hence, the old state would have leaked into the new configuration (yielding false-positives) and the active rule set.\nMy point is that we need to either have a base cleanup function that deletes all internal state for the rules (only called during the use of a file-wide configuration), or we keep a careful eye on new rules defining stateful variables as the last part of the rule's configure() function.\n. This should probably be if (process.argv.length === 2).\nThis triggers the piped stdin processing if jscs is invoked via node jscs, as in, the jscs command is invoked without arguments.\n. @mdevils Modified the condition appropriately. \n. What if we later introduce a rule that comments should lead with a space. This proposed format would make that difficult. \nWhy not /* jscs: disable */?\n. Having a hard time understanding this. Any way to rephrase it? Or add an example?\n. What about two disable comments following each other in succession?\n//jscs:disable\n//jscs:disable disallowQuotedKeysInObjects\n1. Does the system still work?\n2. Which rule(s) get disabled?\n. Great catch!\n. Any way of using the function constructor to create a function string that is as large as you need? This would avoid the need to commit a huge file. \n. You'd dynamically construct something like:\njs\nfunction test(){\n   var a = 'cows';\n   // keep concatenating this function string to add as many entries as you need\n})\nThen feed the string representation of that function as the piped input to the binary.\n. Like what? Options don't add data to the args array.\n. Done: #570 \n. Ok, to make sure I'm clear, here are the possible invocations that trigger reading from stdin:\n- some_cmd | jscs [options]\n  - not a tty and has no args\n- jscs [options] -\n  - is a tty and has a - as the last arg\nAm I missing another case?\n. Restoring this method works well. Good catch. Done.\n. @markelog Restoring process.stdin.on is problematic. I'm not 100% sure why (still trying to find the cause through sinon's source), but process.stdin.on.restore only exists until the first call to process.stdin.on at https://github.com/mrjoelkemp/node-jscs/blob/fix_stdin/lib/cli.js#L117. After this call, process.stdin.on.restore is gone. Hence, adding a restore call in the promise callback throws an error.\n. @benesch hey, since you can just do process.stdin.emit('data', ...), do we still need the timeout of half a second?\nSeems like two things are going on here: \n1. The timeout simulates a delay in data buffering\n2. The timeout is stated to be used because of the lack of being able to trigger two 'data' events. I don't believe this is the case.\nIf it turns out that case 2 is no longer valid, and if you agree, I will decrease the timeout to avoid unnecessarily slowing down the suite.\n. We should have a rule for that :P :P \nI did it to keep with the style of the other arrays. Changed it to just export the array directly.\n. TODO: Assertion per keyword\n. TODO: Assertion per keyword\n. Extend with union of presets' values for this rule.\n. I haven't seen the use of XXX before. It should probably be removed.\n. Please remove the XXX\n. Hmm, I think the name of the function would be the callee's identifier: http://esprima.org/demo/parse.html?code=var%20x%20%3D%20foo()%3B. Do you have an example to justify this branch?\n. @Skywalker13 This is great work! Thanks a ton for the PR.\nThere might be a simpler implementation if you go in the reverse direction: starting from an open paren and checking if the previous token's end range is the same as the parens' start range. Something like:\njs\ntokens.forEach(function(token, idx) {\n  if (token.value === '(' && tokens[idx - 1].range[1] !== token.range[0]) {\n     errors.add(\n       'Illegal space before opening round brace',\n       token.loc.start\n     );\n } \n});\nThis passes your tests, and it seems unlikely that there would be a token before the paren that isn't the function name (otherwise Esprima parsing would fail).\nThoughts?\n. +1 to the simplification\n. typo on expression\n. Can you add a test for an IIFE please? Something like '(function(){})()'. \n. IIFE test too\n. You don't need this assertion because the assertion below does a strict check on true.\n. remove\n. remove\n. This test was failing due to the default limit of 50 for maxErrors.\n. Just a test case for with that came to mind, no real importance. Should I\nchange it?\nOn Sun, Oct 5, 2014 at 3:10 PM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nIn test/rules/require-curly-braces.js:\n\nassert(!checker.checkString('try {x++;} catch(e) throw e;').isEmpty());\n     assert(!checker.checkString('switch(\\'4\\'){ case \\'4\\': break; }').isEmpty());\n     assert(!checker.checkString('switch(\\'4\\'){ case \\'4\\': {break;} default: 1; }').isEmpty());\n-        assert(!checker.checkString('with(x) console.log(toString());').isEmpty());\n\nconsole.log?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/661/files#r18436763.\n. Forces the test-config to run before all of the other tests to bypass the maxErrors limit of 50.\n. @mikesherov While I like the idea of having other reporters pick up the maxError error message, the output doesn't look sensible: \n\n\nI'd have to modify explainError to avoid printing anything but the maxError message. Plus, the count of errors would be wrong.\nI still believe that the message should be either inline or after the 2 code style errors found. message. The non-invasive alternative is to set a property on the checker once maxErrors has been hit and then console.log an additional message within cli.js after the errors are sent to the reporter.\n. Yup, setting the property on the checker works well:\n\n. Trying to add it and not seeing any difference.\n. @markelog @mikesherov What should the actual message be?\n. I meant that I'm not seeing the newline in the diff.\n. @markelog @mdevils @mikesherov Opted for a closed-over counter variable. Since we don't really enforce a default value for maxError anymore, I don't need to dangle a bunch of things on the constructor.\n. I don't like this, but it should adhere to your suggestions. It implies that the maxErrors is configurable on a per-instance basis \u2013 which it is not. In any case, it will hopefully suffice.\n. This is essential as the closed-over counter, by this point, will have incremented past any small limit we set in the configuration. Like maxErrors: 1 below.\n. +1. Nice work, Marat.\nOn Oct 8, 2014 6:13 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nIn lib/cli.js:\n\n@@ -135,6 +139,10 @@ module.exports = function(program) {\nreporter(errorsCollection);\n-            if (checker.maxErrorsExceeded()) {\n-                console.log('Too many errors... Increase maxErrors configuration option value to see more.');\n\nSo this would not come up if user doesn't use TTY?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/673/files#r18615530.\n. No, when dealing with piped stdin input. We should show this error message\ntoo\nOn Oct 9, 2014 6:02 AM, \"Marat Dulin\" notifications@github.com wrote:\nIn lib/cli.js:\n\n@@ -135,6 +139,10 @@ module.exports = function(program) {\nreporter(errorsCollection);\n-            if (checker.maxErrorsExceeded()) {\n-                console.log('Too many errors... Increase maxErrors configuration option value to see more.');\n\nSo this would not come up if user doesn't use TTY?\nYou mean browser version? If so, we don't even include reporters there.\nUsers are free to implement their own reactions.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/673/files#r18636360.\n. @mikesherov Does this suffice for making sure that multiple checks pass? Moving this to a separate it felt redundant.\n. Alternatively, value.indexOf(allowed[i]) === 0\n. Can you add a separate test that makes sure that this rule doesn't incorrectly report for non-coddled keywords? For example:\n\njs\nwhile(x < 5) {\n}\nshould not report an error.\n. The logic behind false was that it was like disallowing the propagation of the error to the reporter.\nIf enough people think true should throw the current error away, then I'll change it.\n. Perhaps a nice middle ground between an error filter and a file filter. \n. @markelog Can we define a function as a config value in a .jscsrc? Supporting a function type was nice for the tests and potentially useful for plugins (maybe @zxqfox has thoughts).\n. Docs are missing\n. @protected?\n. Fyi, Mike's suggested change is actually a nice segway to #734: allowing us to deduce a rule's name from its file extension.\n. Feel free to combine this with the previous condition but put this condition on a separate line for readability.\n. Yup\n. Why the '(column & & ' clause? \n. Hmm,  does this actually get used? \n. I misread. This is an optional argument. Defaulted to the line of the error's invocation. Doesn't seem necessary in this test,  unless im missing something. \n. K. Makes sense. Please comment above that line with that explanation. \nCan you add a test for this please? \n. I'm not sure why makeThrowingEsprima is necessary. Why can't you just call errors.add with arguments that trigger the exception? \nSomething like:\njs\nassert.throws(function() {\n  errors.add('foo', -1, -1);\n})\nAll of the arguments that you passed to makeThrowingEsprima could be passed to errors.add instead.\nWould that not work?\n. Good catch! Thanks @zxqfox \n. You might also be able to do:\njs\nhasDefinedVariables = node.declarations.some(function(declaration) {\n  return !!declaration.init;\n});\n. This is duplicative of https://github.com/jscs-dev/node-jscs/pull/749/files#diff-bbab9dfea97994901be20fd462a701c0R42. Can we remove one of them?\n. Here's an alternative that defines the passing cases to reduce the complexity of the condition:\n``` js\n            if (node.declarations.length === 1 ||\n                !inStrictMode && isForStatement ||\n                exceptUndefined && !hasDefinedVariables) {\n                return;\n            }\n        errors.add('Multiple var declaration', node.loc.start);\n\n```\n. Should we consider an options object for these assertions to maintain flexibility in the api?\n. Filter out errors after the fact, like maxerrors.\nThe clarity seems worth the extra loop over the errors list. Plus the loop\nwould look nice with filter().\nOn Nov 8, 2014 8:09 AM, \"Alex Yaroshevich\" notifications@github.com wrote:\n\nIn lib/string-checker.js:\n\n@@ -92,7 +92,7 @@ StringChecker.prototype = {\n             parseError = e;\n         }\n         var file = new JsFile(filename, str, tree);\n-        var errors = new Errors(file, this._verbose);\n-        var errors = new Errors(file, this._verbose, this._configuration.getErrorFilter());\n\nYup. But how?\nhttps://github.com/mrjoelkemp/node-jscs/blob/error_filter/lib/string-checker.js#L107\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/728/files#r20051600.\n. Yes. Making the edits. Great suggestion.\n. This is a good point; the readme is pretty cluttered as is. I'm going to create a wiki page and link to it.\n. > \"follow the conventions you see used in the source already.\"\n\nThough all of the details are not in the style guide, a lot of the source code already abides by the google preset.\nPlus, when creating .jscsrc files, as you know, it's always much easier to base a styleguide off of an existing preset and override what you don't need. \n. Most of the plugins (and grunt core, I believe) don't adhere to the 80 char line length. Trying to force that limitation seemed unnecessary.\n. @mdevils This is a great catch. This implies that an errorFilter is a function in lib/config/configuration and a string in lib/config/node-configuration. \n. @mdevils The fact that configuration jumps between its own functions and the overridden functions of node-configuration made this hard to follow and implement. I understand why this has to happen, but do you feel it would be more unclear if we only have lib/config/configuration and use try/catch to determine if we're in the node or browser environment?\n. That's fair. Thanks for the insight.\n. Link to this section in the table of contents.\n. @zxqfox I'll do that after merging, no worries. Great work!\n. Hey @stephanebachelier. Thanks for the info. Would you like the grunt preset to enforce a 120 line width? Those other cases would have to be corrected or disabled.\nThe alternative is to allow exceptions to the line width rule for concatenated strings and comments. That seems like it would be best as a plugin rule.\n. should not report\n. Should this be a valid separator? It's not in the list of acceptable values for this rule.\n. This looks like it should be the definition of disallowSpaceBetweenArguments\n. If this is a \"valid\" separator, your rule's regex might need to be strengthened to disallow that.\n. I think it's useful, but the rule is meant to force a space between arguments. Forcing ',' (no spaces) is best for disallowSpaceBetweenArguments\n. Just an fyi, we typically don't include the name of the committer in the code; that info could be found via git blame. I'll remove post-merge.\nIt's also pretty clear that the helper cleans things up a bit.\n. @mdevils requested to keep the Error class as simple as possible: https://github.com/jscs-dev/node-jscs/pull/728#discussion_r20051368.\nThis implementation is along the lines of what happened to maxErrors.\n. Either add filename here or in _addError as to not blow away: https://github.com/jscs-dev/node-jscs/blob/2ca671be3d3de645417d4c565bda2e7251950f2f/lib/errors.js#L43. Not sure if you'd get a merge conflict when rebasing off of the new master.\n. This commit-level comment doesn't show here, so just reposting so it's not forgotten.\n. @mdevils I like the explicit nature of this, but the actualTokenBefore could be deduced within TokenAssert if TokenAssert had access to the file object. This can be achieved by passing it into the TokenAssert constructor here: https://github.com/jscs-dev/node-jscs/pull/751/files#diff-11c8ed6891535db0efdc438909405929R22.\nThis idea would make this particular assertion cleaner. Perhaps it may also help other assertions in the future?\n. Please move to the top of the file. I was so confused thinking createJsFile was an import but couldn't find the require :)\n. So that it passes through if it's set to anything (even falsy null).\n. Though I've proposed an alternate implementation, for the future, it's preferable to have an array of tokens to exclude and just use indexOf to determine membership: \nif (excludedTokens.indexOf(prevToken.value) !== -1) { return; }\nIt'll be easier to extend the list of excluded tokens without creating additional, redundant branches.\nNice work though!\n. Nice catch\n. Why the isNan check? I don't see what wasn't captured with the previous version of this assertion.\n. What about using the superset from lib/config/configuration to avoid maintaining multiple structures?\n. Right, it should throw. Why let non-numeric values in at all?\n. Ok. We should discuss why that is still a concern in a different ticket.\nOn Dec 8, 2014 6:13 AM, \"Mike Sherov\" notifications@github.com wrote:\n\nIn lib/config/configuration.js:\n\nassert(\n-            typeof config.maxErrors === 'number' || config.maxErrors === null,\n-            maxErrors > 0 || isNaN(maxErrors) || maxErrors === null,\n\nTo maintain backCompat. There was an explicit test in StringChecker\nallowing NaN to not cause a crash. Is that archaic now?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/823/files#r21446630.\n. I think the first clause mandates too much. This rule now enforces disallowAnonymousFunctions and requireFunctionNameMatch. \n\nWhat do you think about this rule enforcing that if a function expression is named, its name must match the assignment property or member?\n. If I'm following the code paths properly, the es3 flag is implicitly true by default. Should the its for this describe be moved up a level since this is the default behavior?\n. Nice\n. In general, my problem with the weakening of the conditions is that they were added for edge cases. If we don't have a test hitting that condition, then we should add the test, not remove the condition. \nWith the removal, this would throw an error on empty case statements since .length wouldn't exist on undefined.\n. Right. My bad, I was thinking about SwitchStatement, not SwitchCase. This seems okay then.\n. Instead, try to use prompt's built-in validation\n. Only output unique errors to avoid count discrepancy between the table and the number of rules the user is walked through for fixup/exception.\n. Agreed about the clarity. Forcing an instantiation for what should be a function didn't seem correct. This function only looks like a class because the tests need access to internal methods for stubbing. \nI'll convert this to a class though; thanks for reaffirming.\nTests ruin everything :)\n. Why not just strip out the line (from #! to \\n from str?\n. Same thing? str.indexOf('#!') === 0 \n. newline before every it please\n. Can you also add tests for vars in loops and functions for completeness?\n. Same comment about completeness of the tests for other scenarios where vars are declared.\n. No specific order. This is fine.\n. As per https://github.com/jscs-dev/node-jscs/issues/698, it might be more appropriate for this to be \"requireCapitalizedConstructors\": { allExcept: ['somethingNative', 'anotherNativeThing'] }\n. Brainstorming is definitely appreciated and welcomed. However, the new config format has been agreed upon by the community and maintainers, so let's stick with using the allExcept format unless @markelog feels there's another format from #698 that makes more sense.\nThanks for the PR @samlecuyer. I'll do a more careful review once the config change is done. Feel free to ping me.\n. If a true value is supplied as requireCapitalizedConstructors, this will throw an error.\n. Well damn. Thanks for the tip :) I assumed booleans had a similar behavior to other primitives (e.g., 1.foobar throws) \u2013 but ya know, JavaScript :)\n. !allowedConstructors[node.callee.name]?\n. Maybe extract the cases that are redundant between the describes into a checkBaseCases() function? That'll make it clearer which cases are unique to the different configuration value.\n. That's awesome :)\n. Why not just munge all together on one line? \nI'll take care of that post-merge.\n. We typically store data on the rule instance to avoid shared state across instances: this._message = buildMessage(). \n. Alternative\njs\nerrorArray = errorArray.concat(matches.map(function(match) {\n   ... \n   return {\n     line: ...,\n     column: ...\n   };\n}))\n. errors implies it's an array\n. if (!matches) { return; }\n. Consider removing the temp var:\njs\ngetCommentErrors(comment)\n.forEach(...)\n. Consider introducing a better explaining variable like: hasViolations = comment.value.search(keywordRegEx) !== -1\n. The iteration over disallowVariableNames is redundant. In configure, you could create an object of var name -> true (ex: foo: true) for a constant time lookup. You'd then do if (disallowVariableNames[node.name]).\n. What about uppercase var names? Your check should be case insensitive. I guess an alternative to the object lookup above is to create a regex from all of the disallowed vars and do a case insensitive match on node.name. \n. Be sure to add tests for the uppercase var names.\n. @mikesherov any opinion on the uppercase/lowercase issue above?\n@alawatthe I was iffy on mentioning the object notation for the same fear of \"the root of all evil,\" but:\n1. This is one of the more obvious improvements that doesn't obfuscate the code (it actually clarifies the condition).\n2. We have other rules that do this: https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-dangling-underscores.js#L84-L87, https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-implicit-type-conversion.js#L41-L44, https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-keywords.js#L31-L34, and a bunch more.\nWe'll wait for other opinions on casing to decide on the course of action.\n. Can you add \"allExcept\": [ \"[\", \"]\", \"{\", \"}\" ] instead for clarity?\n. foo should be quoted\n. fine should be quoted\n. There's already a test for getRegisteredPreset in configuration and this function's sole role is to delegate to that tested method. Doing checks on the returned value is redundant.\nWhat's the minimum checking here that you feel is appropriate?\n. In all fairness, the other delegated methods in string-checker don't have dedicated tests. I'll revert my hide delegate.\n. @zxqfox That's cool. Great tip. \n. Opting for --auto-configure\n. Sure. Opting for lodash.assign.\n. It's used in generator and in configuration. The only suitable location aside from utils would be checker if we want to avoid a PathHelper.\n. I think the existing solution is much clearer and more performant. Any edge cases that your method accounts for?\n. A minor annoyance that I have is rolling my own functions and writing tests for them only to have it suggested that I scrap that effort and use a 3rd party solution \u2013 or the reverse (using 3rd party and asked to roll my own). \nIs a way to avoid the deletion of work to keep functions in closed scope and during a review, have other maintainers suggest the extraction and testing of the function if they know of other places where it could be applied?\n. That's handled by the caller: cli.\n. I think that's a great idea. We should add an issue to do that in 1.12 or 1.later depending on priorities.\n. Yes. Works well. Feel free to +1 if this looks good. \n. Great tip. Will try it out. \n. We should maybe think about tree iteration yielding custom classes like an ObjectExpression class that has a list of Property instances. Each Property instance will have the isKeylessProperty method. This avoids the bag of utils. Probably an issue worthy comment? \n. Good question, but I don't believe so. This is the definition of the jscs preset (which is an extension of the google preset).\n. I hear ya. Preset name registration happens here: https://github.com/jscs-dev/node-jscs/blob/master/lib/config/configuration.js#L657-L681\n. Maybe path.resolve(path.dirname(base), 'foo'))?\n. ```\nif (this._configuration.isFileExcluded(path)) {\n  return Vow.resolve(null);\n}\nreturn vowFs.read(path, 'utf8').then(function(data) {\n...\n``\n. Seems to only return aStringnot aString[].\n.needed?\n. Document params please\n. Opt forHtmlFile.prototype.getFilename. Consider extracting outside ofgetScripts` with documentation of the function\n. Consider:\njs\n// tag should be a <script>\nif (name !== 'script' || \n    // ignore scripts with src attribute  \n    attrs.src ||\n    // script tag should has no type attribute or attribute should be equal to text/javascript\n    (attrs.type && attrs.type.toLowerCase() !== 'text/javascript')) {\n    return;\n}\n. Ah, I see that this depends on closed over vars later on. Tiny touch confusing, but no harm done. A class might be clearer, but not a blocker.\n. if (!scriptStartPos) {\n    return;\n}\n. Unhelpful comment. Please remove\n. @zxqfox Is there a jscs-jsdoc rule to enforce a newline after function description? Might be useful to add to #994 \n. Opt for scripts.forEach(function(scriptInfo) {...\n. Finish the params documentation please.\n. Consider renaming data to source as it's more descriptive and matches the constructor's signature.\n. Can this regex be substituted with /\\r\\n?|\\n\\r?/? If so, extract this regex to a closed over var near the top of the file. It's used in 3 places.\n. Unnecessary comment. Please remove\n. errors.add?\n. Consider:\njs\naddError: function(error) {\n    error.filename = filename;\n    errors.add(error);\n}\n. usually\n. Consider extracting /\\S/ to a var for reuse. The var name should explain what the regex represents. The comment above could likely be removed in that case.\n. Why pop the last line only to push it back on? Why not just do something like:\njs\nvar lastLine = lines[lines.length - 1];\n...\nif (!/\\S/.test(lastLine)) {\n  lines[lines.length - 1] = '';\n}\n. beginning\n. I'm not understanding why this function is necessary. Mind expanding on this function's docblock explaining why?\n. Wouldn't you need to check that fullname contains the .html extension? Is that check done somewhere else? Seems like this would attempt to parse everything but .js files.\n. Comment on what the regex is or extract to a var with a name that explains it.\n. Consider renaming data to source for clarity\n. Need to return something for the case when it's empty? Would null suffice?\n. I believe we typically do @returns {Promise} descriptionHere where the description can describe the resolved values. In this case it's an error list or null.\n. An alternative might be:\njs\nreturn checker.checkPath('./test/non-exists').then(null, done);\nThis requires done as a parameter to the it, of course\n. Why return null instead of an empty list?\n. modules/extract-js although lib/extract-js would be more accurate (though, I'm aware we have the discrepancy for other test suites). \n. Does this simply test that the error format added within extract-js is correct?\n. Sounds like an issue should be filed.\n. Would you mind adding an issue for this with what you expect to see from the rule?\n. Join condition with previous condition and comment explaining why this condition matters. i.e., what's an example case that this catches?\n. Using tokens instead of CallExpression nodes is what makes this implementation seem off, however, we've had a similar discussion in https://github.com/jscs-dev/node-jscs/issues/779 and settled on tokens.\n. Non-blocker: This style becomes pervasive throughout community contributions. What about opting for an early return?\n``` js\nif (this._configuration.isFileExcluded(path)) {\n  return Vow.resolve(null);\n}\nreturn vowFs.read(path, ...\n```\nThe idea is along the lines of: http://sourcemaking.com/refactoring/replace-nested-conditional-with-guard-clauses\n. Non-blocker: I was wondering where this came from in https://github.com/jscs-dev/node-jscs/pull/1038/files#diff-605f23c7e3628b173a428e6a469e6ff6R52. \nIs that valid jsdoc?\n. I thought the jsdoc way to do this was:\njs\n@returns {Object} data\n@returns {String} data.output\n@returns {Errors} data.errors\ncc @zxqfox \n. [filename='input']\n. :+1: \n. :+1: \n. js\nvar hasFixes = errorList.some(function(err) {\n  return err.fixed;\n})\n. What in this do actually fixes the source? I see no explicit call to any fix-related function.\n. Thanks.\n. Non-blocker: consider leaving a comment above that indicates the implicit assertions fix. Something like Mike's explanation would be helpful to newcomers to the source who are not familiar with the inner assertions.\n. Why?\n. This is the only change that blocks this PR for me. Does this require a change in the way users use this feature?\n. :+1: \n. This is okay, but only because the prompt module doesn't have a meaning associated with the associatedRuleName key. The prompt object was intended to be an object of settings specifically for the prompt module.\n. Non-blocker: This works too. An alternative is:\njs\nerrors[rulename] = errors[rulename] || {\n  files: {},\n  violations: 0\n};\n. assert(!Object.keys(config)) instead of the for and assert(true)?\n. Why was this removed from the beforeEach?\n. Should go back in the beforeEach.\n. Newlines after descriptions?\n. @zxqfox rule for that? :)\n. Newline\n. If config is the only datum passed, I'd vote for removing the .apply and calling configure with config. \n. No ~? \n. Love these comments! <3\n. I'd prefer if this new option was not supported. If users want to exclude requires, then they should use the allExcept form (which would also help them migrate to 2.0).\n. Yes. Exactly. \n. multiple\n. multiple\n. multiple\n. Is there any other way to test this besides spying on a private method? \n. Another not great solution is to assert that none of the rules are called. \nI'm fine with this if you make it protected (we don't have the notion of friend functions) for testing (jsdoc tag change should suffice, comment is a bonus). \n. Which test fails when you exclude this? Not seeing why this is necessary. \n. Also didnt have to add anything to expectedConfig which is a tad confusing. \n. Not immediately seeing why this happens. Can you land this and add a card to remove this dependency? I'll tackle it soon.\n. Yes, that would be much better. \n. Otherwise what happens? \n. I guess the general criticism is to comment why you needed to do this. \n. See https://github.com/jscs-dev/node-jscs/pull/1357#discussion_r30009897\n. We don't have tests for the browser version. Anything worrisome in that major version bump? \n. @gero3 any way for you to test that this PR (after generating the bundle) works with your mr doob app? \n. Please move the description of this PR to an issue (the explanation of why this needs to happen) and then reference the issue number in a comment above this line. The reasoning as to why we need to do this should be captured in the code.\n. Maybe move to: \n``` js\ndescribe('before round brace', function() {\n  beforeEach(function() {\n    checker.configure({ disallowSpacesInFunctionDeclaration: { beforeOpeningRoundBrace: true } });\n  });\nit('should not report missing space in export default function', ...\n})\n```\n. Same comment as above: move to its own describe and use a beforeEach for what's common\n. Same comment as in previous file. Move to describe with beforeEach\n. Please comment about when this would be the case. A code sample would suffice\n. Create a map of bases:\njs\n{\n  2: 'binary',\n  8: 'octal',\n  16: 'hexadecimal'\n}\nThen this entire conditional gets replaced by:\njs\nerrors.add('Use ' + bases[radix.value] + ' literals instead of parseInt', node.loc.start);`\n. It's confusing as to why this is valid. I thought the rule (based on its name) was to ban the use off parseInt entirely. \nNow, I see that it's only for predicates/conditions. The rule's name should be adjusted to mention this.\n. For sanity, can we add a test for function expressions assignments as object properties?\ne.g., \njs\nvar foo = {};\nfoo.bar = function() {};\nand\njs\nvar foo = {\n  bar: function() {}\n};\n. Can we also add a test for named function expressions?\ne.g., \nshould still report on \njs\nvar foo = function mySweetFunc() {};\n. > I was thinking it would only discourage use when it could be a binary, hex, octal literal instead\nSounds good\n. Yeah, a comment along the lines of // Prevent calls like parseInt(1), ... would help clarify this condition\n. Without proper use cases from the community, it feels like we're guessing as to what people need. \nAre you saying that this rule isn't worth including?\n. Unnecessary object creation per file checked. Move to this.radixMap in configure. \n. Unused\n. assertPosition is a clearer name\n. Not seeing the need for this additional public function. Why not put the checks in _addError?\nIf you want to remove that logic to avoid cluttering _addError, then maybe put it in a _validateError function called within _addError\n. typo: configuration\n. existing\n. 1. What about adding this to the Error constructor?\n2. The default should be false and made true after the call to instance.fix(error).\n. false?\n. The majority of our dependencies use tildes. What's the heuristic to determine if we should use caret or tilde?\n. > if case is too complicated for example\nMy alternative implementation would be to have the rule throw an error in the fix method for unfixable errors. I guess an error being unfixable isn't an exception? What I'm getting at is avoiding rules knowing about the fixed property of the error.\nOf course, fixed is public, so it doesn't matter so much.\n. Ah, I changed my default to tilde. I guess we'll opt for caret first and then discuss whether or not it should be a tilde during PR review?\n. I prefer that suggestion. Nice idea! \n. Combine conditionals? \n. What about a template string concatenated with a regular string. Is that possible? \n. Also, can you add tests that have more than just two operands being concatenated? \n. What about for tagged template strings being concatenated with another string or template string? I guess I'm questioning the ast type for a tagged template string. \n. Right. Didn't catch those tests. :+1: \n. This is considered a breaking change no?\n. See https://github.com/jscs-dev/node-jscs/issues/1214. It's not private because it's not closed over, not using @private, and is not called _parse.\n. Great point. Missed that. :+1: \n. return exceptFunction && property.value.type === 'FunctionExpression'\n. What is this entire condition describing? Can you leave a comment with an example that would satisfy this condition?\n. Seems like this could be allExcept: ['singleLine']\n. No need to check for whether or not the max errors have been exceeded?\n. Are you trying to remove all usage of this? Why wouldn't you just update it to use the new object format and then use it within this function to generate file (as it used to) and remove your local duplicate: https://github.com/jscs-dev/node-jscs/pull/1433/files?diff=unified#diff-c4ec64ef009f51578bddc596b5b6ddc2R225?\nA little confused here.\n. We already have lodash.assign (https://github.com/jscs-dev/node-jscs/blob/mdevils.jsfile-constructor/package.json#L71), maybe use it here?\n. :+1: for bringing this into JSFIle\n. Should be camelCase: singleLine. \n. Should be camelCase: multiLine\n. singleLine\n. multiLine\n. singleLine\n. multiLine\n. multiLine\n. singleLine and multiLine\n. singleLine\n. singleLine\n. multiLine\n. multiLine\n. 'singleLine', 'multiLine'\n. Looks like validateIndentation was the only rule that explicitly used handlers, but you also added support for handler :) https://github.com/jscs-dev/node-jscs/blob/cbfde5db457ee49673494a6a65f75fea4e049a52/lib/rules/validate-indentation.js#L448\n\nAlso, wondering if we should backCompat this until 2.0?\n\nYou mean to replace handler with handlers?\n. Keep the are. Requires that arrow functions are used instead of anonymous function expressions in callbacks\n. Extract to a function so the name indicates what this does. Not clear why this is necessary. \n. Ah, i see. Youre trying to find the wrapping function of the node,  if any. Yes, a function like getFunctionContaining(node) would help clarify. \n. parentNode represents the containing function. It should be called such. This should help make the code clearer. \n. Can you extract to a named variable to explain what's being checked here? \n. For clarity and reducing the amount of code in this callback, please extract the computation of this to a function. \n. Not clear what this is checking. Extract to a named variable please\n. Would be easier to have a list of valid snippets. We can assume that they'd have an errorCount of zero if they were members. \n. Agreed. The test code isn't a description of the behavior being tested. It's that which tests the behavior. The number of errors isn't important when stating which behaviors or preconditions result in a failure. \n. this was done for minimumLineLength? Would like this on the previous line\n. This reaches into a rule's implementation. Would prefer to assert the implied sort order with a test like the other values (i.e., testing that it reports on descending keys but not on ascending) \n. You could remove this since objects don't have duplicate keys. \n. You could remove this since objects don't have duplicate keys.\n. Remove\n. True. Wouldn't work on windows. We don't get a lot of tickets where we tell users about coverage-html though. So it might not be worthwhile.\n. Why not set ')' as a default part of the exceptions object? You can then simplify this if statement.\n. I'm not particularly fond of adding more function to utils (because it becomes a big bag of random functions that could make more sense in classes). At the very least, these should be functions dangled on the rule export unless other rules will use them. If they're going to be reused, then these functions could be properties of a TokenCategorizer class that's within lib. \n. Yes\n. If logically equivalent, I'd rather use https://github.com/javve/natural-sort to avoid the String.prototype modification. \nWe should let the community indicate the edge cases to consider. Trying to handle all of the cases would lead to a bloated and overly complicated solution likely with a blend of tools used.\n. Or you can load it from a local path or node module:\n. I don't really see the point to the sugar of jscs-. It only helps users who want to fork the built-in presets and retain the name. But if they're forking it, they can name it whatever they'd like and just supply that as the preset value.\nAny big wins with this prefix?\n. What will the user see if the resolution fails? Said differently, what does the user see if this function returns undefined? I assume it'll bubble to cli.js and then show an error about a missing config?\n. Use .some instead\n. Non-blocker: For readability, I find it helpful for maintenance when an example code is supplied that clarifies an assignment with a left property that doesn't have a name but has a value. Similarly, what's an assignment that doesn't have a property?\nA contributor would have to guess or hope that coverage is 100% and figure out which tests correspond to which part of the condition.\n. Comments would be great. Thanks @zxqfox!\n. Fair points. +1\nOn Aug 2, 2015 1:02 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nIn OVERVIEW.md\nhttps://github.com/jscs-dev/node-jscs/pull/1597#discussion_r36045007:\n\n#### Example\njs\n \"preset\": \"jquery\"\n+\"preset\": \"./path-to-your-preset\"\n+\n+// If your preset called \"jscs-your-preset-node_modules-path\"\n+// You can either define full name or omit \"jscs-\" prefix -\n\nPrefixes usually added so they wouldn't be confused with other packages\nsince it name without prefix might be misleading and have possibility of\nthe name conflict - https://twitter.com/ironshay/status/370525864523743232\nESlint recent change of the same nature and popularity of\nhttps://github.com/sindresorhus/load-grunt-tasks packages somewhat proves\nit, plus it seems popular for the jscs too -\nhttps://www.npmjs.com/search?q=jscs\nSo we know ppl use those prefixes a lot, so we might take advantage of\nit...\nAnd you know, it is nicer to write preset: my-company, then preset:\njscs-my-company.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1597/files#r36045007.\n. Yeah, it's correct; though it always looks strange even to native English speakers :) \n. They are aligned, but the computed property (i.e., tokens) was causing a failure.\n. This doesn't capture the if statement form though. \n\nIt also doesn't capture !(typeof b === 'undefined') or b === undefined\n. Instead of a massive if, I'd opt for a strategy based on the right.type value.\njs\nvar resolvers = {\n  LogicalExpression: function() {\n    // Some example code that clarifies the condition\n    return left.type === 'Identifier' && right.left.type === 'Identifier' && left.name === right.left.name;\n  },\n  ConditionalExpression: function() {\n    return right.test.type === 'BinaryExpression' && right.test.left.type === 'UnaryExpression' && right.test.left.operator === 'typeof' && test.right.type === 'Literal' && right.test.right.value === 'undefined' && left.type === 'Identifier' && right.consequent.type === 'Identifier' && right.test.left.argument.type === 'Identifier' && left.name === right.consequent.name && left.name === right.test.left.argument.name;\n  }\n};\nthen the check code becomes: \njs\nvar resolver = resolvers[right.type];\nif (resolver(right, left)) {\n  errors.add(...)\n}\nSomething like that would break up the condition into logical parts.\n. Some explaining variables would maybe help tame this condition:\njs\nvar isTypeOfUndefined = right.test.type === 'BinaryExpression' && right.test.left.type === 'UnaryExpression' && right.test.left.operator === 'typeof' && right.test.right.type === 'Literal' && right.test.right.value === 'undefined';\nThen the if reads pretty nicely and is easier to maintain.\n. Add test for if form:\njs\nif (typeof b !== 'undefined')\nand the other cases not covered by your if condition\n. This yields false positives though. If a user defaults any other variable, your rule deems it an error. Seems like you'd want to isolate your checks to the function parameters.\n. Not a fan of checking a private member of the node. \n. 1. Under which circumstances was the type being changed within acorn to esprima?\n2. Why was the original type not preserved as type and a babel-specific type kept private?\n. Non-blocker: prefer assert.equal instead of a === usage for better error messages when this test fails.\n. Non-blocker: a bit confusing on a separate line. I immediately thought this was a nameless function declaration and was confused.\n. Ah, it's es7! I guess the complications with supporting es7 syntax is already rearing its head. I understand now, you can't/shouldn't modify the tree with an unsupported node type, so _babelType was created to hold artificial types. \nWhat concerns me is the maintenance of rules that depend on a private property (_babelType ) that was made up by an ast transformation lib. IF this feature gets standardized by EStree, then we'll have to wait for Esprima or Acorn to implement it, then update our rule to stop using _babelType.\n- Making _babelType a public property doesn't really solve the issue (though it makes a statement that the artificial node type is part of babel-jscs' public api)\nWould love an opinion from @mdevils, @markelog, or @mikesherov on suggestions for moving forward with es7 features.\n. Would this not work generically for any number of padding newlines before the first comment?\n. Is this going to affect the CST integration at all?\n. Thanks for clarifying, Henry. \nWhat breaks for JSCS if you just make the type 'SpreadProperty?\n. Having a really hard time visualizing/understanding how this works. Why do you need to do this for non-rest elements? If rest elements were failing, performing an action for non-rest elements doesn't seem right (though I see the tests passing). Any insight is appreciated.\n. This is a drastically different condition and the test seemingly didn't have to change. Something is fishy about that.\n. As far is this PR is concerned, I'm okay with letting this in as an interim fix. Will wait for one of the other maintainers to give a thumb before merging.\n. Opened https://github.com/jscs-dev/node-jscs/issues/1633. Wording of the issue title might not be the best. Feel free to edit.\n. We don't have a helper. We have node iteration by function types. However, if you need to have utility functions on a function node (like getting the list of params), my vote would be for creating lib/Function that is a class that takes in a node and computes the params list from it. It could then have utility methods on it for getting the params list.\nIt might feel like a yagni to create this abstraction, but lib/utils really shouldn't be a grab bag of random methods.\n. Why not an AST class that contains tree-iterator logic and getBabelType?\nOn Aug 10, 2015 9:12 AM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nIn lib/rules/require-quoted-keys-in-objects.js\nhttps://github.com/jscs-dev/node-jscs/pull/1649#discussion_r36628665:\n\n@@ -44,7 +44,7 @@ module.exports.prototype = {\n     check: function(file, errors) {\n         file.iterateNodesByType('ObjectExpression', function(node) {\n             node.properties.forEach(function(prop) {\n-                if (prop.shorthand || prop.method || prop.kind !== 'init') {\n-                if (prop.shorthand || prop.method || prop.kind !== 'init' || prop._babelType === 'SpreadProperty') {\n\nutils.getBabelType might best since, we take just that, not another\nnode.type or anything else\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1649/files#r36628665.\n. Please add a test for destructuring usage that's not the first param: (foo, {bar}) => is valid.\n. We typically have newlines before each it for readability.\n. Non-blocker: It's unfortunate that we don't have this as a standard, but using assert.equal instead of assert with === is better for error messages when tests fail. You'd get expected 3 to equal 2 instead of expected false to equal true for a test asserting an expectation of the error count.\n. Newline before\n. Why not just call it position?\n. I was confused as to where exceptions was defined. Seems like that var declaration var exceptions = this._exceptions; could be moved up above this helper.\n. Also consider just using return exceptions.some(...\n. Why do you need to trim?\n. Non-blocker: we typically don't put code in the descriptions. A general description of the code would suffice. Like it('should report on a comment beside a statement', ...\n. Non-blocker: a regex for the dollar matchers would combine conditions\n. Why is var not first in the list? The function name talks about var, not left or right\n. Is there a quick code sample where the right is not there? Either a test or comment would be good. The test is preferable though\n. Test or comment for the case when nextToken is not defined? \n. You should be able to do this early return at the top of the function no?\n. \n",
    "jzaefferer": "@mdevils could you get this into a release?\n. In esformatter these are called presets. There's currently \"default\" (match google code js style guide) and \"jquery\" (matching jQuery style guide, which overlaps a lot of idiomatic.js). You can pick a preset, then override the specific settings you want to be different. That seems like a good route for this project as well.\nFor a jQuery/idiomatic preset, the configuration in jQuery UI might be a good starting point: https://github.com/jquery/jquery-ui/blob/master/.jscs.json\n. 0.2.6 of grunt-jscs-checker fixes this.\n. @markelog is this something you could look into? Would be useful to get this into the jQuery preset.\n. The jQuery style guide used to have exceptions for nested parens, those were removed. So in your two for examples, the first one is invalid, the second one valid.\nDo requireSpacesInsideObjectBrackets etc. accept [] and {} as valid?\n. I may be missing something, but the commit that closed that issue doesn't make any changes to the jQuery preset. Is that intended? Seems like new options would need to be added to the preset...\n. Addressing #268 would significantly reduce the barrier to entry, since you could just start with that, instead of having to dig through all the configuration options until the tool does anything useful.\n. @mikesherov could you also update the jQuery preset to include all the new options that #102 added?\n. Done, see #152\n. Since this was closed, does it mean there's now a migration guide? Where can I find it?\n. Why not? Are you concerned about the computational overhead? Or is there something else? Migration to jscs would be easier if I don't have to wait for jshint 3.0 for these rules to be added to the jQuery preset.\n. Looks like the updated preset made it into the latest release. Thanks!\n. This seems like a bad idea. If you really need exceptions, your suggestion in #224 seems a little more sane (though that should be a separate ticket).\n. Disabling specific errors with code comments should be handled separately (if at all).\nProviding more details for each rule seems like a good idea. CSSLint does this via its wiki: https://github.com/stubbornella/csslint/wiki/Rules - though they don't have \"error codes\".\nThe above example is fine, but most errors will be way too trivial to provide any details. If my code is function(){ and it should be function() {, what could you possibly be verbose about?\n. Disabling all validation was requested by #20.\n. Could you provide some more details? What exactly is the problem you'd like to see addressed? What would a limit do, what should the limit configuration look like?\n. maxerr ala jshint seems reasonable. Thanks for the link.\n. Whatever it is, there should be a default for this to be useful. Jshint has 50.\n. This is pretty similar to the rules for \"Chained Method Calls\" in the jQuery style guide, for example:\njs\nelements\n    .addClass( \"foo\" )\n    .children()\n        .html( \"hello\" )\n    .end()\n    .appendTo( \"body\" );\nAfaik its somewhat @mikesherov was working on.\n. See also #204\n. Once jscs looks further up for the config file, you should notify the SublimeLinter-jscs maintainers, since they currently implement that themselves:\n\nNote: Whereas jscs only looks in the linted file\u2019s directory for a .jscs.json file, this linter plugin extends that behavior by searching the file hierarchy up to the root directory and then in the user\u2019s home directory.\n. It sounds like this gets addressed by #242\n. Your file can't be parsed due to that syntax error. Stopping execution seems like exactly the right behaviour to me. And the error is pretty clear, isn't it?\n. I see. I guess the README on https://www.npmjs.org/package/jscs is a better reference for what's actually in a release. Considering the support was added 20 days ago, how about a new release?\n\nAnyway, nothing to see here, I guess.\n. Also somewhat a duplicate of #197, but I'm going a little further here, suggesting a default preset, not just a Google preset.\n. Also somewhat a duplicate of #109, but that sounds way too complicated. Just make the tool do something useful by default.\n. I'm fine with not having a default, while bundling both \"jquery\" and \"google\" presets. It looks to me like the .jscsrc you have in this repo could be used as a starting point for the google preset. What do you think?\nBy now very much a duplicate of #197.\n. Why did you reopen this? If there isn't supposed to be a default preset, this can be closed.\n. Thanks for merging this, looking forward to the next release to start using this.\nThat said, there's still the issue of lack of tests for this preset and the one pointed out by @nschonni in the diff. Should I create separate tickets for those?\n. Created #293 and #294.\n. I did not notice the excludeFiles in the configuration, those should be moved from the preset to the project configuration. \n\nyou defined the preset but didn't enable it, effectively disable all jscs lint checks\n\nThis part I don't understand. The updated .jscsrc file now has \"preset\": \"google\", isn't that enough?\n. Gotcha. I had no idea that was necessary, apparently the person merging this PR didn't care either /o\\\nBtw. why did you remove the 'google' preset from the readme?\n. I see. How about updating the exception to say option requires true value or should be removed (or set to null)?\n. Oh well. Then I hope you can keep an eye on similar issues and come up with something if others run into this as well.\n. Nice, that was quick :-) Don't be afraid to do daily patch releases ;)\n. So #751 was merged, introducing the infrastructure for autofixing, but not the autofixing itself, is that right? Does someone have plans to work on the next step? If not, would a bigger bounty make a difference?\n. Yay! Is the autofixer going to deal with this as well?\n. Nice, looking forward to start using both.\n. Nice, that was an easy one.\n. Using 1.7.3. Maybe it fails due to the comment on the next line? This looks like it might be simple to fix, I'll try to put together a PR.\n. Adding this to test/rules/disallow-multiple-line-breaks.js fails:\njs\nit('should not report single line break when first line starts with #!, using jquery preset(?)', function() {\n    checker.configure({ preset: 'jquery' });\n    assert(checker.checkString('#!/usr/bin/env node\\n// comment\\nx = 1;').isEmpty());\n});\nThough I have no idea why it does, it seems like there's more going on then just disallowMultipleLineBreaks. I didn't find any tests that verify presets, maybe that would help avoiding issues like this?\n. Here's the source file: https://github.com/jzaefferer/commitplease/blob/master/commit-msg-hook.js (exactly what I pasted in the ticket above)\nIn the repo's .jscsrc, I've set disallowMultipleLineBreaks: null to supress the error.\n. This looks like a good approach, I like the CLI previews, too. Regarding\n\noutput the number of violations from each preset with a link to the style guide.\n\nand\n\nA small reservation that I have is outputting a link to the style guide since that information is not a part of the preset's configuration and not readily available at runtime.\n\nThis could be addressed by adding a URL to each preset. I expect each of these presets to have a stable URL where the style guide is documented.\nCould just add a presetUrl property at the start of each preset json file. Or _presetReference or some such, whatever avoids collisions with actual rules.\n. I've implemented something similar as a esformatter plugin for formatting jQuery method chains, might come in handy as a reference for the AST traversal: https://github.com/jzaefferer/esformatter-jquery-chain. I think the relevant code would be here: https://github.com/jzaefferer/esformatter-jquery-chain/blob/master/plugin.js#L13-L57\n. That's very much a separate issue, right? Is there an existing ticket?\n. Okay, but this PR is about extract the bundled config with a preset, anything else should be handled separately.\n. The Google JS Style Guide is mostly just the even more common C Style Guide, with some specifics for JS. Its the most generic one I know of and I didn't see anything in this repo that goes against it.\nEven if that were the case, you can just use the preset as a starting point, then override what you wouldn't like, right? That's the beauty of the preset, isn't it?\n. Sure, check out the \"Code formatting\" section in the Google JavaScript Style Guide. Other sections have more sample code that might provide some clarifications.\n. ",
    "ignovak": "Updated https://github.com/mdevils/node-jscs/pull/51:)\n. ",
    "maksimr": ":+1: \n. ",
    "cowwoc": "I discussed this with the author of wro4j and a browser-version will work for us. Do you have an open issue tracking work on the browser version, or is this it?\n. Updated title.\n. @mdevils I googled the two terms and here is what I found: hard tabs are the tab character (soft tabs are spaces that simulate the look of a tab). smart tabs use tabs for indentation and spaces for alignment (see http://www.vim.org/scripts/script.php?script_id=231)\n. @bhardin yes, but it has yet to be merged. See https://github.com/mdevils/node-jscs/pull/536\n. Although disallowSucceedingComma is technically correct, it took me a while to understand what it means without reading the above description. Please consider another name, such as disallowAnythingAfterComma (this style is in line with existing naming, such as disallowSpaceAfterBinaryOperators).\n. Sorry, it looks like I misunderstood https://github.com/mdevils/node-jscs/issues/66. Yes, disallowCommaBeforeLineBreak would work for me.\n. Oops. I hit submit too soon. Please revisit this issue as I've now updated the description.\n. On second glance, this is actually caused by #347.\n. @mikesherov That works. Thanks for the workaround!\n. @markelog \n1. How to build the jscs project (produce a private build to feed into my application for testing).\n2. How to run tests (ensure I didn't break anything and add new tests for functionality I add).\n3. How to instruct my application's grunt configuration to use the private build I generated in step 1 (functional test to ensure I really solved the the problem I am trying to address)\n. Another scenario I just ran into is:\n```\nreturn {\n        getClassName: function(object)\n        {\n            // We cannot modify Object.prototype directly because libraries like JQuery blow up:\n            // http://stackoverflow.com/q/14941657/14731\n            // See also http://sugarjs.com/native#enumerable_properties.\n        // Handle user-defined types (Chrome, Firefox and potentially others)\n        var results = object.constructor.toString().match(/^function ([^(]+)\\(/);\n        if (results && results.length > 1)\n            return results[1];\n\n[...]\n```\nMeaning, the function body starts with a brief paragraph discussing implementation details, followed by a newline, followed by a comment explaining the line of code that follows.\n. @markelog I would, but I don't know where to begin. See #391.\nI'm coming from a Java background. I've got decent HTML, CSS, JS experience but no experience with Node. If you help me past the basics (ideally add it to the official documentation so others can benefit as well) I will try to contribute a PR.\n. @mikesherov Agreed.\n. @mikesherov Wow, that is surprising.\nThe use-case is a user commenting out some broken piece of code to revisit it later. The whole point is to avoid having to fix the code right away. On the flip side, what is your use-case for validating comments?\nI think we need to differentiate between comments explaining describing the code, versus commented-out code.\n. @mikesherov \n\nYou're saying any block comment, not just ones that contain multiple line breaks?\n\nSorry, I don't understand the question. What did I say about \"any block comment\"?\n\nHowever, block comments are legit for... commenting, but there's no reason to ignore the rule inside of them.\n\nMy understanding is that JSCS is a code style checker and comments are, by definition, non-code. Comments may contain arbitrary text and do not have to follow the Javascript specification. What are you attempting to \"style\" by parsing their body?\nAre you attempting to style text describing code? Or are you attempting to style commented-out code? My point is that it doesn't make sense to format the former, and you have no way to distinguish between comments that contain the former and latter. Even if you could, my argument is that commented out code should be left alone because very often code is commented out precisely because it is non-functional and does not follow the expected style. This is the developer's way of turning off validation (by the compiler and JSCS) for some piece of code.\nI hope this explanation helps.\n. @mikesherov I honestly don't get it. I'm not trying to disagree with you. I honestly don't understand what it is you are trying to format/style in the comments.\n1. Are you saying that users want to prevent multiple newlines inside comments that describe code (i.e. English text)?\n2. Does this apply to all rules or only this specific rule? For example, if I set a rule requiring a space before ? does that mean that my comments (English text) must contain spaces before question-marks as well?\nIf so (users expect to be able to style comments that contain English text) I think we should be able to apply a separate ruleset for comments and for code. I might want to keep the disallowMultipleLineBreaks enabled for comments but treat ? differently (require spaces for code, disallow spaces for comments).\n. I don't think this issue was fixed correctly.\nI have requireOperatorBeforeLineBreak: true but I am not receiving a warning for:\n/**\n         * Setup the notifications to start displaying and polling\n         */\n        Notifications.setUp = function()\n        {\n            var userUri = $(\"#user_uri\").val();\n            if (!userUri)\n                return;\n            User.getByUri(new URI(userUri)).then(function(theUser)\n            {\n                user = theUser;\n                return theUser;\n            }).then(getOperators)\n                .then(setNotificationPermission.bind(this));\n        };\nThat last .then should trigger a warning.\n. I think the documentation should indicate that rule is applied where possible and explicitly mention that return statements are unaffected (link to http://stackoverflow.com/a/3641525/14731); otherwise people might file bugs against this.\n. The latest commit looks good to me.\n. @mikesherov You're going to hate me but I think we need to address the following issues as well:\n1. We need to cover the closing brace.\n2. We need to cover the case where the block is empty.\n3. Add a parameter that adds an exception for empty blocks: they should not require newlines before each brace (by default this exception would be true).\nWe can add two additional rules to cover the closing brace, or rename this rule to requireNewlineBeforeCurlyBraces and have it apply to both the opening and close braces.\n. Sorry for any confusion I have caused. I'm going to provide a concrete example of what I'm expecting and we can then break it down into one or more rules:\n```\nvar goodObject1 =\n{\n  key: value\n};\nvar goodObject2 =\n{\n};\nvar goodObject3 = {};\nfunction goodReturn1()\n{\n  return {\n    key: value\n  };\n}\nfunction goodReturn2()\n{\n  return {\n  };\n}\nfunction goodReturn3()\n{\n  return {};\n}\nvar badObject1 = {\n  key: value\n};\nvar badObject2 = {\n};\nvar badObject3 =\n{};\nfunction badReturn1()\n{\n  return {\n    key: value; };\n}\nfunction badReturn2()\n{\n  return {\n    key: value; };\n}\n```\nOpen questions for @mikesherov:\n1. We're talking about blocks, and object declarations. Should we have separate rules for each?\n2. We have rule requireSpacesInsideObjectBrackets (notice the terminology is \"brackets\") but the description talks about curly braces. Should this rule be renamed to requireSpacesInsideObjectBraces? This impacts the previous question in case we decide to add a separate rule for object braces.\n3. We didn't discuss badObject3 before. If the object braces are empty, I'd like the open/close brace to show up on the same line as the variable declaration.\n4. We need revisit requireBlocksOnNewline. It only enforces a newline before the closing brace, but not the opening brace so the name is a bit misleading. Perhaps this rule should be renamed to requireNewlineBeforeClosingBlock?\nI'm trying to make sure the terminology is consistent across all rules.\nOne option is to break this down to 8 separate rules:\n1. requireNewlineBeforeOpeningBlock\n2. requireNewlineBeforeClosingBlock\n3. requireNewlineBeforeOpeningObjectBraces\n4. requireNewlineBeforeClosingObjectBraces\nand the disallow equivalents. Let me know what you prefer.\n. @mikesherov Okay, I'll open separate issues. Thanks.\n. I've filed the following new issues:\n538: requireSpacesInsideObjectBrackets using inconsistent terminology\n539: Braces should be opened on newline for objects\n540: Require newline after object declaration/assignment\n. On a related note, I want:\n```\nvar good = {};\nvar bad =\n{};\n```\nWould you make this the default behavior? A parameter on the rule? A separate rule?\n. @mikesherov It's still on my todo list (unless someone else implements it first). I haven't gotten around to it yet.\n. @zxqfox I think the equal sign should be enforced by a separate rule. This rule deals exclusively with the braces.\nThat said, I think it's a bit annoying have to have 3 different rules dealing with essentially the same thing (one for functions, objects, one for arrays). In an ideal world, we should be able to specify this rule once and pass functions/objects/arrays as an argument.\n. No. What I am looking for is:\n```\nvar good = {};\nvar good2 =\n{\n  key: value\n};\nvar bad =\n{};\nvar bad = {\n  key: value\n};\n```\nMeaning: braces on the same line as equals is acceptable only if the braces are empty. Otherwise, they must start on a new line.\nIn either case, I expect the equal sign on the same line as the var.\n. @marklog how do you figure? laxbreak suppresses warnings (what kind I can't tell, because the documentation is very vague) but either way it doesn't add warnings for the above cases, which is what I am asking for.\n. @cipiripper I don't need to be able to specify how many newlines after ObjectExpression. I expect true to require at least one newline.\n. @mikesherov is there another rule that already prevents multiple vars on the same line? I'm sure this question has come up for other rules...?\n. @jdlrobson The name sounds fine to me.\n@mikesherov, chime in if you have a better name in mind,\n. I am seeing the same thing (https://github.com/jscs-dev/node-jscs/issues/736#issuecomment-64961655) with JSCS 1.10.0 (the latest version as of this time).\n. @mikesherov I'm not very fluent with node. How do I get package.json to depend on a non-versioned version of jscs? Do I clone the project and reference the file path of entry point file (instead of version number)? If so, what is the entry point file?\n. Happy happy! Joy joy! :) Thanks.\n. @markelog Due to the beauty of gulp streams (sarcasm) I have no idea which file is responsible for triggering this error. I will investigate and get back to you.\n. @markelog Out of curiosity, is there a way for jscs to wrap exceptions thrown by rules and add the path that triggered the problem? This seems like something we should have anyway...\n. Here is the offending file: https://gist.github.com/cowwoc/fabfd4bff45c677362ed\n. @mikesherov Sorry about that. I have not forgotten. My codebase is not in a good place (it no longer builds). As soon as I get this straightened out I'll try to produce a minimal testcase for you. Feel free to ping me again if you don't hear from me within a week.\n. I can no longer reproduce this problem. Closing for now.\n. ",
    "zxqfox": "@mdevils I'll do it if you assign it to me ;-)\n. Actually, I think we could parse it more accurately and store result in Function* nodes. Is it possible?\nProbably, using jsdoc3/jsdoc or OrgaChem/jsdoctypeparser or something else.\n. Okay, I'll to use some jsdoc parsers tonight. I think we should accept all kinds of jsdoc types? http://orgachem.github.io/jsdoctypeparser/\n. I think it should be pretty useful to check it up as fast as possible. Afais lint-like tools pretty useful when they can check as much as they can to prevent buggy behaviour of software. Probably JSCS is not a place to check doctypes and type of resulting value but it's another question.\n. @mrjoelkemp probably yes. I've fixed this in plugin and I'm looking for issues.\n. Possibility to create separate file with ignored files and paths to put all of them to .jscsignore.\nI think it's the same as excludeFiles\n. @mdevils sorry. Maybe I'm wrong and there is no reason to split it to a separate file. But at the moment we can't provide some additional options, or decline some of commons, for concrete inner directory.\nFor example, in my cwd I have .jscs.json n.1, but some path in the tree shouldn't be checked because of some reasons. I'm putting there .jscs.json n.2 and nothing happens. ;-)\nBut it's another issue.\n. @mdevils I want to put ignores to inner directory.\n/\n  .jscs.json\n  vendor/\n    .jscsignore\n    something-dirty.js\n  ...\n. ;-D yep. I couldn't find a reason to make additional file excluding mechanisms.\n@Knotix what's your case?\n. @mikesherov I'm thinking about using .jshintignore files. jscs requires valid js-code and usually executes after jshint. So... If some files doesn't checked by jshint because of .jshintignore, jscs will fail. What you think about it?\n. Any ideas how to load this file and merge with excludeFiles option?\n. It looks like some excluding container (object) that can be copied and extended (or replaced) with inner (by fs tree) .jscsignore files, it also should load these files on walking, and it will be used instead of (or with) global excludedFiles.\nIt's also very close to inner configurations.\nbtw. Should we use .jshintignore files at the same time with .jscsignore? Just I think it's the same list just because code should be valid. But it can broke jsx and custom esprima parsers so we need to think about it. Maybe just an option in .jscsrc which files JSCS should use as ignore-files?\n. @mikesherov yep. I'll do it ;-)\n@mdevils Please take a look here, really want to know your thoughts.\n. @masi Yup. But if you gonna use .jshintignore or .gitignore as .jscsignore you can get troubles with different formats.\nAnyone against --excludes-file option name?\n. @mikesherov I'm agree in common, but e.g. git on windows doesn't support symlinks.\n. @masi In ideal world \u2014 yes. I'm gonna use and suggest for jshint ignore package. Guys at jshint also going to a .gitignore format (https://github.com/jshint/jshint/issues/1917 and https://github.com/jshint/jshint/pull/1758#issuecomment-60785192) so I think it's a right way.\nThoughts?\n. Waiting for #1150 to finish this.\nAlso there is #1159 \u2014 I think we should change this logic in 2.0.\n. @mdevils Review it please.\n. @mdevils All fixes applied and browserified\n. @mdevils What you think about realization about jsdoc? Can you provide some advices how to split code?\nAtm I want to move jsdoc parsing algorithms to separated commonjs module with simple interface. As like as js-parser itself. And some linking code with business logic between js and jsdoc will be in lib/rules/validate-jsdoc.js.\nI think it will be fine. Tell me please your mention.\n. @markelog Feel free! I wanted to have deep extension here if possible: https://github.com/jscs-dev/jscs-jsdoc/issues/83 . There were idea to split google (with closurecompiler specific tags), wiki (with other set), etc. To mix jscs and plugin presets.\n. I agree that we can solve original issue (according to current roadmap) and make another issue for future. Just need to know what we should solve here.\n. @mikesherov We already have plugins functionality and it's pretty simple to make it: https://github.com/zxqfox/jscs-bem/blob/master/lib/index.js\nI can suggest defining \"jscs\" or \"jscs-plugin\" right in package.json with \"presets\" section if we need something more but it looks pretty complex.\n{\n  \"jscs-plugin\": {\n    \"presets\": [\"hey-ho\", \"lets-go\"]\n  }\n}\nWe already have package.json usage: https://github.com/jscs-dev/node-jscs/blob/master/test/data/configs/mixedWithPkg/package.json\n. @markelog I'm not against some sugar for presets. Feels like it would be very helpful for preset makers.\n. So... Consumer's config (.jscsrc file or something) will be the same as before:\n{\n  \"preset\": \"somepreset\"\n}\nAnd \"somepreset\" will be searched on:\n1. Installed node_modules list;\n2. Registered presets list (by plugins or core).\nPublisher should name his NPM-package with jscs-preset- (or jscs- + special flag in package.json, to differentiate with usual plugins), create JSON, and publish these 2 files (package.json, and his somepreset.json). I'm not sure which field will aim to preset.json, there is \"main\" by default, but we can make \"jscs-presets\" array field to register them all.\nupd Here's a caveat with cwd, project root, configs, and testing files. But better to solve this later.\n@markelog @mikesherov Please correct me if I wrong.\n@markelog And feel free to take this ;-) I'll be back in a couple days.\n. @mrjoelkemp In that case we require some jscs-preset/-plugin field in NPM package.json file as well as main field for main js file. Also we can use some default file name value like jscs-preset.js (like index.js for main). I just don't want to have inconsistencies in package.json usage, but I think we'll fix them at review state.\nOkay. I think we need make something to make this talk subjective.\n. I think there is a difference between /* a */ and // b. (a) named BlockComment, (b) InlineComment, we can also differentiate (a) from multiline block comments. Just fyi.\n. Btw I can do it if nobody cares. I think it's very useful.\n. @ikokostya what you mean under environment? You mean executing checker in browser?\n. If you want to have this sets please share them between rules and plugins.\n. @mdevils @mikesherov :+1: I like this way\n. if (x < 5) x = 5, continue; // ?\n. @markelog That's not so big issue but better to clarify what we really need and how to configure it.\nOptions, as I see:\n- \"exceptSameline\";\n- { \"exceptSingleStatement\": true || [ 'ReturnStatement', 'BreakStatement', ... ] };\n- { \"exceptExpressions\":  [ 'BooleanLiteral', 'StringLiteral', 'ReservedWord', ... ] }.\nNot sure ;-( Can we discuss this?\n. @markelog I've done #312 . It uses http://github.com/Constellation/doctrine and it can be used for it easily.\nIt doesn't support multiline values and doesn't know about [variable] (idk why, maybe it's a bug) but 2 regexps fixes it. For jsdoc in case\njs\nvar jsdoc = (['/**', 'Some test', '@param {', '    {', '      status?: boolean|{error?: boolean, success?: boolean},', '      hint?: boolean', '    }', '    |Custom', '  } [condition] about', '@returns {Object} this'].join('\\n * ')+'\\n */');\njsdoc = jsdoc.replace(/\\n\\s\\*\\s([^@])/g, '$1').replace(/\\[(\\w+)\\]/g, '$1'); // these\nrequire('doctrine').parse(jsdocsimple, { unwrap: true });\nresult:\njs\n{ description: 'Some test',\n  tags:\n   [ { title: 'param',\n       description: 'about',\n       type: undefined, // here is something bad\n       name: 'condition' },\n     { title: 'returns',\n       description: 'this',\n       type: [Object] } ] }\n@jifeon Can you provide some info about this jsdoc code style?\nI thought this syntax is better just because it's used everywhere:\n@param {\n  {\n    status: ?(boolean | {error: ?boolean, success: ?boolean}),\n    hint: ?(boolean|{error: ?boolean, success: ?boolean})\n  } | FormFieldStatusCondition\n} [condition] info\nIt's also used by Closure Complier. This jsdoc block was easily parsed by doctrine after removing redundant line breaks.\n. I think we should support multiline params but not that syntax. Both resources (usejsdoc, google closure) declares {?type}, {!type} and {type=} syntax but not {prop?: value}. Name is always clean there.\nAt jsdoc-toolkit there is a little bit another version: @param {type} [name] info. But not name?. Links:\n- https://developers.google.com/closure/compiler/docs/js-for-compiler#types\n- http://usejsdoc.org/tags-type.html#jsdoc-types\n- https://code.google.com/p/jsdoc-toolkit/wiki/TagParam\nIdk but I think it should been widely used before integration. ;-)\n. @jifeon I was confused ;-) Btw I've found one more jsdoc style for properties:\njs\n/**\n * @param {Object} person comment\n *   - {String} title comment\n *   - {Number} [age] comment\n */\nNeed to check it too.\n. @pigulla :+1: \nAgreed. It would be nice to have this option.\n. @mzgol It's a code style preference. I know one guy. He used double-quotes for each keys and values in Objects, except true/false/null and numbers in values. http://json.org/\n. I will use this if it will force me to use any quotes I like (and same for all keys) for objects with numbers and dashes in keys.\nLike that:\n// valid\nvar o = { abc: 'asd' };\nvar p = { '1': \"yep\", 'abc': \"asd\" };\nvar q = { \"a-b\": 'foo', \"abc\": 'bar' };\n// invalid\nvar a = { 1: 2 };\nvar b = { abc: 2, 3: 4 };\nvar c = { 'a-b': 1, \"abc\": 'qwe' };\n// etc.\n. @mikesherov I'm really waiting for plugin API. And I will agree with you when It will be done. :smile: \nSo, yes. It can be placed in some plugin or project. So no reason to do it in the core.\n. Also we need an agreement for placing helpers for use in internal checkers.\n. In addition to @incorp ideas I think options should be named shorter. Not crypted like in jshint but just shortened.\nI think it can be easily shortened also by removing require/disallow/etc keywords and replacing it with true/false/undefined/null values of options. So I suppose to use 1 flag instead of 2 with a little bit more complex values.\nSomething like that:\n{\n  spacesInsideParens: false, // instead of disallowSpacesInsideParentheses: true\n  spacesInsideParens: true, // instead of requireSpacesInsideParentheses: true\n  parensAroundIIFE: true, // requireParenthesesAroundIIFE: true\n  beforeOpeningParens: null // to reset option\n}\nupd: my bad. work in progress already. #181 \n. @mdevils Can we try to make some testing plugins for 1.5-1.6 ? To drive it before 2.0.\n. @mdevils Please take a look at #321\n. @markelog We can use external reporters? How?\n. @wurmr Thanks for sharing! :+1: \n. @markelog Should we add this module to available plugins list?\n. @mikesherov done. check #326 please.\n. @mdevils I've finally done this one. Check it please. Waiting for review.\n. @mdevils @mikesherov @markelog Guys. Should I work on it? I need review.\nI should split it onto different commits, remove some unwanted changes, probably something else.\n. @mdevils Probably we can move out all jsdoc validation to that npm package?\n. @mdevils all of these was moved out to extension (plugin) https://github.com/zxqfox/jscs-jsdoc\n. @mikesherov 10 minutes to fix it. If you saw my code in PR #312 and it's fine then I'll do it tomorrow.\n. @mikesherov it looks like internal bug in esprima. For [,] there are [null] in elements property instead of nodes.\n. @mikesherov https://github.com/ariya/esprima/blob/master/esprima.js#L2094 That's it.\nI can add failover test there to skip line checking but better to fix this in esprima\n. @mikesherov I'm talking about that problem with Esprima owner here: https://code.google.com/p/esprima/issues/detail?id=525\nHe works on https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API#Expressions so Esprima works well atm but only if null is possible. It's not frozen.\nAnyway, I've made a little patch for it which works with nulls.\n. I would say it could be configurable how many items in array should enable this option. Like 'more than 3' or something. Or true for more than 0 or 1. Discussable.\nI suppose this:\njs\n/* jscs disallowInlineArrays: 2 */\nvar fruitsA = ['apples', 'bananas']; // valid\nvar fruitsC = ['apples', 'bananas', 'pears']; // invalid\nvar fruitsB = [ // valid\n  'apples',\n  'bananas'\n];\nvar fruitsD = [ // valid\n  'apples',\n  'bananas',\n  'pears'\n];\nand this if true qualified as like as 1:\njs\n/* jscs disallowInlineArrays: true */\nvar fruitsA = ['apples']; // valid\nvar fruitsC = ['apples', 'bananas', 'pears']; // invalid\neither this if 0:\njs\n/* jscs disallowInlineArrays: true */\nvar fruitsA = []; // valid\nvar fruitsA = ['apples']; // invalid\nvar fruitsC = [\n  'apples'\n]; // valid\n. @NickHeiner ye, u r right, probably it should be configurable. E.g. '12 chars' or '2 items'. Or just characters by default? or 2 different options?\nCompare:\njs\nf = ['Very very long 0123456789 string 0123456789 filled with \"0123456789\" couple of times 0123456789 yup.'];\nf = [\n  'Very very long 0123456789 string 0123456789 filled with \"0123456789\" couple of times 0123456789 yup.'\n];\nThere is no big difference if only one item, but still better, than inline version. Probably it should test both conditions.\nBut imagine u need to review commit with 40 chars:\njs\nvar args = ['-c', 'ls', '-k', 'abc', 'yolo'];\nvar args = ['-c', 'ls', 'asd', 'abc', 'molo', 'icecream', 'panda'];\n. @mikesherov yep. With limited items or 2 separated options (for items and for characters).\n. @mikesherov Sounds good. Np :racehorse: \n. @mikesherov Yep. Going to make it right now.\n. @mikesherov So, requireNewLinesAfterArrayItems ?\nValues: true or Number (items number limit)\nWill count items in array and report if too many (or more than 1 or 2?).\nRight?\n. @indexzero Thanks ;-)\nGuys, do we need the opposite rule?\nPlease, take a look at PR #798\n. Should we check this case\njs\nvar x = [1, 2,\n    3, 4];\n// vs\nvar x = [\n    1, 2,\n    3, 4\n];\n. There should be 5 nested properties for checking arrays:\n- maximal items q-ty at single line (default)\n- maximal summary length of items at single line (right)\n- items q-ty to enable checks\n- summary length of items to enable checks (it's very close to maximalLineLength but still another one)\n- allowing/disallowing to pass items at the same line with opening/closing brackets\nWhat we should check here? Can we split these to separated rules and how?\n. We can stick to items q-ty to enable checks as main numeric value. And set maximal items as line to 1 by default.\nE.g.\njs\n// {\"requireNewlineAfterArrayItems\": 3}\n// vaild\nvar x = [1, 2, 3];\nvar x = [\n  1,\n  2,\n  3,\n  4,\n];\n// invalid\nvar x = [1, 2, 3, 4];\nvar x = [1,\n  2,\n  3,\n  4];\nvar x = [\n  1, 2, 3,\n  4\n];\nvar x = [\n  1, 2,\n  3, 4\n];\n. Guys, I need review here. @mikesherov @markelog @mrjoelkemp @indexzero \nI know there is another task with items on the first and last lines in arrays and objects about trailing comma so probably it should be moved out to separated rule. And want to know about limits to be sure that all is fine.\nThanks!\n. @markelog I thought it's done ;-)\n. Yeah, sure. #798\n. @hzoo Yeah, I think it will be nice to have a separate rule. ;-)\n. @mikesherov Sorry. Did you mean to move out these tests to separated file? What is the fixture file? Don't understand, sorry again.\n. @mikesherov My bad. I've found indent validation fixtures and need review again ;-)\n. rebased.\n. @mikesherov done. check it please\n. @nschonni nope. It was a long talk about standard with owners and contributors of esprima and they don't want to change their point of view on it. They sticked to Parser API where nulls used for holes in arrays. So I think it will be there for a long period of time or even for ever.\n. @nschonni :+1: okay okay!\n. @globexdesigns If you're interested in extensions please take a look at #321 \n. @markelog Actually node 0.12 almost done. I think it will be fair to drop 0.8 when it will be released. If somebody needs 0.8 support for a while they should use older version. Just it.\nBut I agree. Time to drop 0.8.\n. > As long as the next version is like 1.4.0\nAgreed. 1.3.x should support 0.8.\n. @mikesherov Please take a look at https://github.com/zxqfox/node-jscs-plugin-tpl and https://github.com/zxqfox/jscs-jsdoc\n. Feels like we need a PR with plugins functionality as proof-of-concept.\nJust to understand all possible pitfalls.\n. @mikesherov Houston, we have a problem. Solution with glob is very unstable. Is it loadable in browser?\nAlso in addition to zxqfox/jscs-jsdoc#1 I want to say that we really need to define some list of plugin names because additionalRules works via glob and glob uses only cwd. Also we should make the simple api for plugins, something like:\njs\n// in jscs\n(config.plugins||[]).forEach(function (plugin) {\n  this.use(plugin);\n});\njscs.prototype.use = function use (plugin) {\n  require(plugin)(jscs = this);\n};\n// in plugin:\nvar rules = ['./lib/rules/yolo'];\nmodule.exports = function (jscs) {\n  rules.map(path.resolve).forEach(jscs.loadRule.bind(jscs));\n  jscs.loadReporter(new require('./lib/reporters/yolo'));\n  // etc. need to think about rules/reporters loading.\n}\nPlugins don't need anything else.\nThe only discutable thing here is the way to pass configs.\nProbably we don't need plugin configurations and we can pass here custom rules:\njs\n{ // v1\n  plugins: {\n    \"module\": {\n      // plugin configs and rules\n      \"pluginRule\": true\n    }\n  }\n}\nProbably it's not clear and we should define rules in the common way. E.g. if several plugins will use the same rules it would be annoying to copy paste them each time:\njs\n{ // v2\n  \"plugins\": [\"module\"],\n  \"pluginRule\": true,\n  \"pluginAnotherRule\": \"yolo\"\n}\nBut probably we should mix them both and just use globals + local plugin rules:\njs\n{ // v3\n  \"plugins\": {\n    \"module\": {\n      // plugin options/rules\n    }\n  },\n  \"pluginRule\": true\n}\nWhat do you think?\n. @globexdesigns Maybe we should create separate section with plugins/extensions?\n. @zaggino Probably you want to develop an extension which will control using of external global frameworks or libraries.\nJust to use _ instead of $ is not code style error (jscs equals js code style) in my humble opinion.\nAnd yes. In some projects I will use this extension. Pretty good idea. :+1: \n. @zaggino I mean extension to jscs. It's like\nsh\nnpm i jscs-extension --save-dev\nand add to .jscsrc\njson\n{\n  \"additionalRules\": [\n    \"node_modules/jscs-extension/rules/*.js\"\n  ],\n  \"forbiddenFunctions\": []\n}\n. @zaggino Probably you can create project-rules-file first ;-) No need in npm modules.\n. @zaggino :+1: \n. @zaggino Esprima strongly follows SpiderMonkey parser behaviour. https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API \n. @zaggino https://github.com/ariya/esprima/blob/master/esprima.js#L116 Possible syntax tree values. Take care of null values somewhere. e.g. in ArrayExpression.elements ;-)\n. https://github.com/mdevils/node-jscs/commit/07195d594642d7d48e68b8b0bd2b80e41ce89783\nSeems like you using an older version.\n. @alexilyaev Ye. All is fine. Trouble with v1.3.0. Have the same results.\n``` sh\n$ jscs --version\n1.3.0\n$ which jscs\n/usr/local/bin/jscs\n$ grep -A 2 -B 2 requireMultipleVar /usr/local/lib/node_modules/jscs/lib/rules/require-multiple-var-decl.js\nmodule.exports.prototype = {\n    configure: function(requireMultipleVarDecl) {\n        assert(\n            typeof requireMultipleVarDecl === 'boolean',\n            'requireMultipleVarDecl option requires boolean value'\n        );\n        assert(\n            requireMultipleVarDecl === true,\n            'requireMultipleVarDecl option requires true value or should be removed'\n        );\n    },\ngetOptionName: function() {\n    return 'requireMultipleVarDecl';\n},\n\n```\n@mdevils @markelog Can you please take a look at it? Is something wrong in npm repo?\n. Ah. That's a point.\nReadme just not about 1.3.0 or it just describes unpublished functionality.\n. @alexilyaev atm onevar not supported. hold on, it's coming ;-) or just use git master branch as npm repo.\nIt should works:\n```\nsudo npm i -g git://github.com/mdevils/node-jscs\nor\nnpm i git://github.com/mdevils/node-jscs\n```\nAnd later just use a simple jscs string instead of github url.\n. @mikesherov I can also add JsDoc Extension to a list. But I really want review. ;-)\n. @mikesherov Mr. Code Investigator ;-)\n. @mikesherov @Rantanen  :+1:\n. @mdevils :+1: same question here.\n. I suppose you should take a look at https://github.com/zxqfox/jscs-jsdoc/\nAgreed with your mention, it will be useful option\n. @samjohnb Yeah. I understand and can implement this check.\n. It's the difference between published in npm and development versions.\nVersion in npm is older.\n. I'm planning to do it at weekend. This or next.\nIssue: https://github.com/zxqfox/jscs-jsdoc/issues/4 \n. @ljharb Strange mention. If you are a developer you can personally have all available or needed versions. So you can just use the last (or supported) one. It seems legit.\n. @ljharb Actually. You don't need to run jshint/jscs tests in each nodejs version. If you need to test style of your code \u2014 you can do it once in any nodejs version. You just need to fix your test matrices. IMHO.\n. @ljharb It's overhead anyway. You know!\n. @alxgnon :+1: same minds\n. workaround for unixes:\nsh\njscs file.js --preset google | grep -v 'No code style errors found.'\n. @twolfson Great news ;-) Thanks!\n. @mathieumg It would be great!\n. Agreed, better to keep it as is for now.\n. @SgtPooki These stats you talking about can be generated by custom reporter (afaik). Take a look at https://github.com/wurmr/jscs-teamcity-reporter\n. @SgtPooki That's what I mean. Well done! :palm_tree: \n. One more suggestion\njs\njscs.plugIn('abrahadabra')\n// or\njscs.use('abrahadabra');\n// and\njscs.use(require('abrahadabra'));\njson\n{\n  \"plugins\": [ \"abrahadabra\" ]\n}\n. @mdevils if one plugin using another one it would be nice to load and overload it via jscs api.\nAnother case described in #543 about using rules in third-party tools. It would be very nice if jcsc will have some api for loading rules, presets, etc.\n. @mdevils Can I try to make this? Or you already working on it?\n. What if it was disabled by config?\n// jscs maximumLineLength: false\nkjkjfsdnfkndsknjjkdfsnkjsfdknfjdsknjfskjsndfkjnfskjnfdsknjfkjnsdkjnfkjnsdfkjnfskjnskdjn\n// jscs maximumLineLength: null\nLike that?\n. @mikesherov Seems like it enable or disable \"global\" configuration for the rest of file. But how to disable this?\nFor example. I have global config:\njson\n{\n  \"maximumLineLengh\": 50\n}\nAnd a file with inline config:\n//// here maximumLineLength is 50\n// jscs maximumLineLength: 80\n//// here maximumLineLength is 80\nkjkjfsdnfkndsknjjkdfsnkjsfdknfjdsknjfskjsndfkjnfskjnfdsknjfkjnsdkjnfkjnsdfkjnfskjnskdjn\n// jscs maximumLineLength: false\n//// here maximumLineLength is disabled, but how to rollback this to 50?\n. Ah. Got it. It's fine. Not so flexible as it could be but still fine.\n. @mikesherov For more sense it could be like enable/disable instead of true/false.\n// jscs maximumLineLength: disable\n. :+1: for making a separate issue about the bug.\nAlso, looks like rule can be simplified now with new tokens API.\n. I've thought about this issue and have got some ideas but already see that @gero3 already said about it.\nSo I think the simplest way is return somehow from rules what to change (insert/update/remove), it can be done e.g. via levenshtein algorithm. It looks much easier when you compare the difference between non-formatted and formatted code:\n``` js\n// unformatted sample\nfunction yolo ( var1, var2 ){\nreturn 1;\n};\n// formatted sample\nfunction yolo(var1, var2) {\n    return 1;\n}\n```\nWhile the difference list between them will be:\njs\n[\n    {\"type\": \"remove\", \"loc\": {\"start\": {\"line\": 1, \"column\": 13}, \"end\": {\"line\": 1, \"column\": 14}}},\n    {\"type\": \"remove\", \"loc\": {\"start\": {\"line\": 1, \"column\": 15}, \"end\": {\"line\": 1, \"column\": 16}}}, // here's the problem cuz column will be changed after first remove\n    {\"type\": \"remove\", \"loc\": {\"start\": {\"line\": 1, \"column\": 26}, \"end\": {\"line\": 1, \"column\": 27}}},\n    {\"type\": \"add\", \"loc\": {\"start\": {\"line\": 1, \"column\": 28}}, \"value\": \" \"},\n    {\"type\": \"add\", \"loc\": {\"start\": {\"line\": 2, \"column\": 0}}, \"value\": \"    \"}\n}\nE.g. for replaces it will be something like:\n[\n  {\"type\": \"replace\", \"loc\": {\"start\": {\"line\": 1, \"column\": 15}, \"end\": {\"line\": 1, \"column\": 16}}, \"value\": \"xxx\"}\n]\n// or separated\n[\n  {\"type\": \"remove\", \"loc\": {\"start\": {\"line\": 1, \"column\": 15}, \"end\": {\"line\": 1, \"column\": 16}}},\n  {\"type\": \"add\", \"loc\": {\"start\": {\"line\": 1, \"column\": 15}}, \"value\": \"xxx\"}\n]\nRight?\n. > Strategy for non whitespace fixes.\nIt can be fixing in place if we already doing it in assertion. But I feel like it becomes a mess because of high cyclomatic complexity in some rules.\n. Great news everyone :+1: \n. @soliton4 Docs in progress: #1231 #1192\nThere are the very first try also: #1202 \n. @difosfor #1202 \u2014 I think the battle begin ;-)\n. @Mirodil no reason to do it. To disable some option used in presets use null.\n. @mikesherov About (1) Why you think \"validate on save\" will be so annoying? It's like debugger statement. It's not ideal but I think it can be ignored at first release if we couldn't find a good solution for it.\n. @mikesherov Are you sure about 8 spaces? I thought it depends on tab-size css property. nvm\n. @mdevils Keep waiting! Thanks!\n. Should we make another rule with the same logic for arrays?\n. Does this bad?\n``` js\nvar good = {};\nvar normal // ?\n= {};\nvar bad =\n{};\n``\n. @cowwoc I think it's ok. These rules are like tiny bits of configuration word. In my ideal world they should be grouped up to some sets with common cases. It's very common with presets we have but presets are higher level. So rules \u2192 grouped rules \u2192 presets. We don't have now the middle but probably time will come soon.\n. Anyway, I can do a rule that comparesstart.lineof opening brace withstart.lineof equal sign or variable (that why I've asked about\"normal\"` case).\n@cowwoc Am I right if I said that good means equal sign (=) is placed on the same line with opening brace ({)?\n. :+1: Yup. Btw jscs can provide some method to get some lib or even get registered rule. Similar to registerRule in #482 \n. Idea: The piece of code that drawing rounding /-\\|/... have a little bug. ;-)\nSeems like it should have some control characters to be used in some environment. Need to see code to say.\nProbably it's a bug in npm run\n. Im not sure but plugin api in development right now and docs should be updated with it.\n@necolas atm there is no such thing as fully configured plugin system. Basic parts only. You can take a look at plugins section in readme. But once again it's in development. Take a look also at https://github.com/zxqfox/node-jscs-plugin-tpl It's a testing tpl for jscs plugins.\n. Im not sure but plugin api in development right now and docs should be updated with it.\n@necolas atm there is no such thing as fully configured plugin system. Basic parts only. You can take a look at plugins section in readme. But once again it's in development. Take a look also at https://github.com/zxqfox/node-jscs-plugin-tpl It's a testing tpl for jscs plugins.\n. Im agree with you @ljharb. Usage of ^ in versions can be delayed for a while.\nBut actually, why not start jscs with node 0.10? If you need 0.8 you usually using nvm or something.\n. > When I write a module, I use travis-ci to run its tests in all versions of node.\nYeah, it's known problem. Last time I've recommended to lint and jscs just once for the stable node version. No reason to exec it for each version you support.\n. @ljharb Im thinking of something like that.\nrequire('semver').Range(require('jscs/package.json').engines.node).test(process.version) // bool\nAnd in package.json\n{\n  scripts: {\n    \"latest-version\": \"node -e \\\"process.exit(require('semver').Range(require('jscs/package.json').engines.node).test(process.version)?0:1)\\\"\",\n    \"lint\": \"npm run latest-version && jshint && jscs || true\",\n    \"test\": \"npm run lint && mocha\"\n  }\n}\nBut it requires semver and depends on engines used in jscs (some guarantee of stable work).\nAnd the problem actually in getting stable version number. ;-( U'r right.\n. Maybe... Like that?\nNumber(require('jscs/package.json').stableNodeVersion) == (process.version) // bool\nSo we should add some field once to jscs/package.json. Or just export some simple method to check current version?\nOr even a command?\njscs --stable // exit code 0 or 1\nOr a flag to jscs?\n\"lint\": \"jshint && jscs --only-stable\"\n@markelog What you think about it?\n. ;-( No more ideas atm. Need more researches\n. @SgtPooki Did you look at https://github.com/mdevils/node-jscs/blob/master/CONTRIBUTING.md ?\nAnd code style https://github.com/mdevils/node-jscs/blob/master/.jscsrc tested with jscs itself.\nI think there is a problem with getOptionName method and rules themselves. Atm there is a statement \"one rule \u2014 one option\". You can see how it's done with some complex rules like in https://github.com/mdevils/node-jscs/blob/master/lib%2Frules%2Fdisallow-spaces-in-conditional-expression.js I hope it will be resolved in 2.0 because plugins need it too, they must use these obejcts as simple rules instead of making flat config more complicated. And I hope it will be reworked somehow.\n. Why I remember that I've already tryed to fix this?\n@mikesherov I think the best way we can do is to provide some array of characters that can be placed before space and after line comment slashes. It's very common case as I see.\n. Strings for sure, not characters.\n. @mrjoelkemp Yeah, sure. Almost done this already.\n. Check it up please\n. Check it up please\n. I think it should ignore triple slash somehow.\n@mikesherov take a look please at MR #595? It should resolve this issue.\nupd: I just add one more if with substr(0, 3) === '/ <'\n. @markelog Do we need to use here some special option like 'allButSlash' instead of true?\n. Moved this logic to value 'allowSlash' (instead of true). So it wouldn't broke current logic and gives possibility to use it with msjsdoc line comments.\n@markelog Please take a look.\nProbably I should rename allowSlash to something more sensible. And also I feels bad when thinking about disallowSpaceAfterLineComment rule.\n. Oh right, this solution won't work. I think it's possible to add some special value like 'allowSlash' or something like that. It will pass any lines with triple slashed comments. Need an opinion of somebody else.\n. Or maybe just allow to pass any additional characters to this option to ignore after // and before first space?\n. @SgtPooki I don't see tests for reporters except junit. https://github.com/jscs-dev/node-jscs/blob/master/test%2Freporters%2Fjunit.js\nI don't think this is good but actually I don't know what to test there.\nI would add (or use) some file with several codestyle errors, provide several rules (for these errors), and just execute checker and assert results with some simple regexps.\n. @SgtPooki and no, nothing special, just npm install and npm test. Are you using 0.8?\n. Try to check which mocha? Did you tried to execute ./node_modules/.bin/mocha ? What is in error stack?\n. Well, I think it's impossible to check this code if foo.bar value can be filled by some cb. And it's possible (just hard) task if it doesn't touched by black boxes.\n. You provided invalid code in valid section:\njs\nvar x = {\n    key: value, // bug here.\n}\nThis option is possible to use for arrays only.\n. @mikesherov @keithamus ah. this es5! sorry and thanks.\n. @mdevils @mdevils Can we formalize and split tasks? I wish to work on 2.0 but feels like all issues already taken. ;-(\n. @markelog ouch! ;-D\n. @markelog Sure. You think some jsdoc rules should stay in core? Thanks for information!\nI wanna to remake suboptions logic at all in plugin and waiting for plugin api.\n. I wish core will handle only main sections and the rest will be moved to plugins. But navigation is a great idea!\n. @markelog Since you already doing something with CLI can you try to make --cwd option?\nSomething like:\n``` diff\ndiff --git a/bin/jscs b/bin/jscs\nindex 3537a9c..ad5f4ba 100755\n--- a/bin/jscs\n+++ b/bin/jscs\n@@ -15,6 +15,7 @@ program\n     .usage('[options] ')\n     .description('A code style linter for programmatically enforcing your style guide.')\n     .option('-c, --config [path]', 'configuration file path')\n+    .option('--cwd ', 'will manually set the CWD')\n     .option('--auto-configure [path]', 'auto-generate a JSCS configuration file')\n     .option('-x, --fix', 'fix code style violations (applies to fixable violations)')\n     .option('-e, --esnext', 'attempts to parse esnext code (currently es6)')\ndiff --git a/lib/cli.js b/lib/cli.js\nindex f86de75..a043836 100644\n--- a/lib/cli.js\n+++ b/lib/cli.js\n@@ -35,7 +35,7 @@ module.exports = function(program) {\n     });\n try {\n\n\nconfig = configFile.load(program.config);\nconfig = configFile.load(program.config, program.cwd);\n     } catch (e) {\n         console.error('Config source is corrupted -', e.toString());\n         defer.reject(1);\n``\n. /cc @mikesherov @mdevils What you think about providingcwdexplicitly and use this for all relative paths we have. For plugins (#894), ignore files (#73), reporters, etc. We just can use this to resolving relative paths by custom cwd (project directory) instead of real cwd. It can drastically reduce complexity.\n. @markelog It won't because there are no chance to find up plugins and basic.jscsrc` for global installations (sublime, idea, atom, etc.).\n. My bad. It will.\n. I've fixed all comments (I hope) and this need one more review before squashing/rebasing.\n. So I should revert changes with value and rename option? Right?\n\nWhat means only?\n. > From related discussion (#698)\nOh, right. So we talking not only about requireSpaceAfterLineComment but also about disallowSpaceAfterLineComment, and new format.\nBut seems like it should be another issue about 2.0 or something, because we would merge these rules (or rework rules manager and configurator) to make it live.\nDo you really want to discuss about new format here?\n. @markelog But if we already have some thoughts about new format and trying to move to it we can try to apply it to existed rules. Right? What is we left current except as allExcept and make only as inverse of except?\nE.g. only: [\"/\"] will mean comments with format /// comment, but not // comment. And it's not inverse of allExcept but of rule itself ;-\\\nBut then only just denying default behaviour and referencing to disallowSpaceAfterLineComment what does the same.\nSo these rules should be merged in future. Right?\n. @mikesherov in my head it sounds like allExcept and onlyFor. Thanks for clarification.\np.s. Or even onlyAfter for this rule. But after already exist in rule itself.\n. Well. We can wait for #698 new format discussion results or just fix naming and revert value property usage.\nWhat should I do?\n. Done. And also added validation for allExcept.\n. @markelog Well. You're right. Can we just replace \\t with  inside comments?\n. I've replaced tabs with spaces for lineComment value and added test for this case.\n. > Is the plan to change the returned value from each rule's getOptionName to indicate the category (ex: \"blocks\") and the rule (\"curlyBraces\")?\nBtw It would be great to use in plugins.\n. require|disallow: true || { except|only: [] } looks nice. But how to map this configuration declarations to final rules?\nIn common:\njs\n{\n  \"category\": {\n    \"rule\": {\n      \"require\": true || { \"allExcept|only\": [] },\n      \"disallow\": true || { \"allExcept|only\": [] }\n    }\n  }\n}\nBut once again, I'm stuck in mapping these declarations to rules.\n. @mrjoelkemp Some thoughts about plugins.\n1. At this moment there is no API for plugins except additionalRules. And it loads your rules and passes only parts of configuration to configure method;\n2. Each rule now have concrete definition in configuration (configuration-rules mapping). And it means two different rules can't use the same data from configuration (as far as I know);\n3. We have plugin API in development and it would be great if @mdevils says something about his thoughts about it.\nFinally I have a lot of my own thoughts (partially realized in jscs-jsdoc) but each of them very variative.\nSo I think configuration format topic is very close to plugins because of configuration-rules mapping.\np.s. I :heart: new format at all.\n. > One way or another it would be sane to have no more than two levels of nesting objects, like this:\n@markelog It's like you giving scissors to kids. Rules and plugins shouldn't be developed by someone who doesn't know how to do it right. This nesting could be very useful for plugins, but I agree that 3-rd level of nesting should be used very-very rarely or never.\n. Nice work here :+1: Thanks!\n. What about browserify?\n. How to load preset without full name on the client side? Via register preset only?\n. I propose to have some config proxy because of a big lag between this research and v2.0.\nWhat if we will try to load configuration with a new way and convert to current naming if it has options property or some cli flag? It would allow us to make an old names\u2192new names map, and we will never forget a rule. While browserified version can be left as is before v2.0.\n. Oh. ;-) I'm talking about @markelog's gist: https://gist.github.com/markelog/752e53faf9f27de4024d#file-gistfile1-js-L7\nThe current .jscsrc format doesn't have this property while the new one will have it. So if this property exists in config then we should use proxy. And when we will go to v2 we'll just drop this condition (or will rewrite it somehow to detect and notify, or even autoconvert an old format to the new one).\nAnd the cli option can be simply --try-v2-config to force using configuration proxy.\np.s. I'm also thinking about different inline disables. This converter also could help users to convert v1 disables to v2.\n. @markelog https://gist.github.com/markelog/752e53faf9f27de4024d#file-gistfile1-js-L89 btw. array keyword in a singular while all others in plural. It's ok?\n. @Krinkle Yeah, I've thought about it too. Like these booleans usage. It's pretty intuitive.\n. @mikesherov Probably it can be done with custom parser passed as like as esprima-harmony. And I'm agree with @gustavohenke, It shouldn't be in core.\n. @mikesherov esprima itself based on Parser API, so theoretically it's not esprima but any library with common api. Are you sure with sticking to esprima name for option? Just thinking...\n. @mikesherov I think it won't contain comments and another stuff because it was designed for code execution. And no need to parse comments for that.\n. @mikesherov :heart: your optimism  ;-)\n. Great!\n. Unfortunately, nothing about getOptionName and rule mapping in plugins.\nAm I right about registering plugin rules in global rule space? Is it legal? Is it right? If it is then I there would be conflicts. But also there could be extensions of basic rules probably... What we decide about it?\nupd: I though we are in progress... But feels like I've missed something.\n. @mdevils I've stuck in loading something what I've called subrules because of subtree of jsdoc in jscs-jsdoc plugin. So it's already exists for me :-) Now I thinking how to do it easier and about plugins that could want to have some subrules routing as well as jsdoc plugin have. This problem is just about subrules and some common preparation for a bunch or subrules so probably it's a really very private problem and it won't break the most part of potential plugins that just use esprima ast tree.\nSo the main problem just in data preparation before calling rules itself. Atm I see 2 solutions.\n1. So jsdoc comments will be parsed before running main bunch of rules declared in config;\n2. Or just share some initial code between rules to call it each time and cache the result.\nIf we going (1) we should change jscs itself to call some triggers (or something) before calling rules that registered by plugin. While for (2) we don't need to change anything in jscs but we should make local router in each plugin and it will force jscs to call \"empty\" rules.\nSo for (1) plugin developer would register each rules independently and also probably some triggers for some events (to force parsing jsdoc once after esprima did some with file). While for (2) there are no difference in registering rules because we should do it manually in plugins.\nFor sure I believe it should be done in jscs for D.R.Y. and some optimizations (to call only what user want). At least would be great if some suboption logic will be shared with plugins (to not repeat this code in each plugin). But actually, if consumer uses this plugin by declaring it in config then he knows what he doing ... Well I hope you see now what I'm talking about.\n. @mdevils I've had some ideas\nIn plugin we can do something like registering helpers for a bunch of rules (or in global space):\njs\nconfig.registerFileHelper('jsdoc-comments-parser');\nconfig.registerRule('jsdoc-some-rule');\nconfig.registerRule('jsdoc-another-rule');\nAnd then in rules we've got already parsed jsdoc comments in file object. Or some special methods for parsing and caching them in file object instance.\nOr maybe we can just extend basic classes with some additional helpers to find scopes (closest function  in es-ast), blocks (closest block scope for let, const), etc.\nSo atm I can't parse file comments once (or maybe can with ast tree fixing, or caching in helper), iterate once, and register multiple different rules that using parsed comments.\nIt's not a big trouble because we can live without it, but it would be great if there will be a simple mechanism in jscs to provide some hooks for plugins. Atm it's registering rules, configuring rules, and checking files. Probably we can expose something else? To be clear, my need is onFileLoad or onBeforeCheck hook where I could parse comments (or prepare file, etc.) and extend ast nodes with jsdoc property for all rules checking jsdoc.\n. @mrjoelkemp Yeah, sure. Sorry :lollipop: \n. @markelog Take a look at https://github.com/zxqfox/node-jscs-plugin-tpl\n. @markelog I can do that if you want\n. 1. It doesn't work for relative paths at travis ;-( https://travis-ci.org/jscs-dev/jscs-jsdoc/jobs/40507024\n2. It does work as plugin with jscs#master at dev machine https://github.com/zxqfox/jscs-jsdoc/tree/feature/pluginization\n. @markelog Yeah, sure. #759 \n. JS itself doesn't comply with OOP :-)\nHow to solve these problems?\n. Actually, the first and the second cases can be done with some kind of helpers like it does atm. It's not perfect but it works and who cares how it does except me ;-(\nBut what about nested rules? It's a real pain to proxy subrules via jsDoc rule.\n. Well, yes, I want to have some shared objects with already prepared data. Atm all rules in jscs core getting file with esprima AST tree in check method.\nAnd also I want to split subrules. It means many rules in jscs (now it's a jsDoc only) and many separated files (now all subrules proxied via one jscs rule). But configuration { \"jsDoc\": { \"rule1\": true, \"rule2\": true }} will be the same. It would be great. But it also needs some object sharing via all these rules.\n. @mdevils You can also look at https://github.com/zxqfox/jscs-jsdoc/blob/feature/param-return-refactoring/lib/rules/validate-jsdoc.js\nBut I think it's a bad idea to make rules like that. I'm thinking now about a simple proxy like:\n// root rule file\nvar nestedRules = [\n  new require('./nestedRule1'),\n  new require('./nestedRule2'),\n  new require('./nestedRule3')\n];\nmodule.exports = function () {};\nmodule.exports.configure = function (options) {\n  // check root option value\n  assert(options);\n  // check all nested option values\n  nestedRules.forEach(function (rule) {\n    rule.configure(options); // ?\n  });\n};\nmodule.exports.getOptionName = function () { return 'rootRule'; }\nmodule.exports.check = function (file, errors) {\n  // prepare all things here\n  // and call all nested rules\n  nestedRules.forEach(function (rule) {\n    rule.check(file, errors);\n  });\n};\nIf I would go like that it would be a lot of iterations over AST. But it's ok I think.\nupd: Anyway, configures can be easily splitted, checks also can be splitted if to have some onBeforeCheck hook to prepare all things. And then any rules using jsdoc could use these preparations (even another plugins). I think it's the simplest solution and the best solution we can have for sharing data between rules and plugins.\n. One more problem with nested rules: https://github.com/jscs-dev/jscs-jsdoc/issues/61\n. Seems like we really need to think about processing nested rules as separated options. It's a:\n1. Configuration to rules mapping;\n2. Separate (or mixed) rules checking;\n3. Nested rules execution (separate or mixed somehow);\n4. Ignoring rules with // jscs: disable some rule.\nIntersects with #136\n. I think I see now what we should do here. Thanks for review guys!\n. @mdevils @mrjoelkemp Guys, I'm done. Need review.\n. @mdevils Sure. I was afraid it's not possible to use there. Going to do that.\n. @mdevils I would squash before merging. Should I?\n. Done.\n. You are welcome :palm_tree: \n. > What I would prefer over this is a new standard for AST that links to the token list and adds whitespace to it so that all tools have a lossless standard.\nYeah, it's really hard to change it.\n@mikesherov Good luck in it!\n. @vtambourine Probably in both projects. But basically in esprima.\n. @mdevils Why you've sticked to whitespaces? What if testing code missing semicolons or curly braces?\n. @mdevils Yup. Sorry ;-)\n. @mdevils Sounds like a good plan :-)\n. @mdevils I proposed protocol in #516 between checker and autofixing module. Let's say we store additional information based on that protocol in error itself (probably I'm wrong here). And then we could use this information for reporting or fixing an error. It means we just need to add some additional information about location and replacement or removement to fix problem. There are a lot of work but it must works. And situation is the same. I'm just believe in it. So you doing right anyway. But I think you trying to avoid this protocol and work in imperative manner what means you should do a little bit more work to get working prototype. Also this means you'll get some practical results and probably you'll find some better solution so better I'll shut myself up and let you work as you want and as you believe.\n. @mdevils Actually, you can't autofix code style without system inconsistency. Nor manually, nor automatically. So there shouldn't be conflicts. Maybe I didn't see something?\n. Guys, how to test browserified plugins? ;-)\n. @mdevils Thanks! What you think about passing './lib/index' as plugin path? Do you like to do it this way?\n. @mdevils Well, okay. Let it be like that. But better to make a note in Plugin writing guide about testing.\nThanks! I'll merge this soon.\n. Updated wiki https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\n. @Jimgskoop look at feature/pluginization branch in jscs-jsdoc.\nShortly:\n- Plugin API in jscs almost ready but not released;\n- There are problem in testing plugins at travis;\n- You still can start developing now.\nBut yes, you can make a package with rules set and use them as well as jscs-jsdoc now.\n\nSimple snippet\nindex.js:\njs\nmodule.exports = function (conf) {\n  // plugin loading\n  conf.registerRule(require('./lib/rules/your-rule.js'));\n};\n./lib/rules/your-rule.js (here you can take a look at rules in jscs repo):\njs\nmodule.exports = function () {};\nmodule.exports.prototype.getOptionName = function () {\n  return 'yourRule';\n};\nmodule.exports.prototype.configure = function (options) {\n  assert(options === true || typeof options === 'object');\n  // rule preparation and configuration\n  this._options = options;\n};\nmodule.exports.prototype.check = function (file, errors) {\n  // checking file\n  // this._options...\n  // file.iterateNodes...\n  // if (error) errors.add('some error', 1, 0);\n};\n./package.json:\njs\n{\n  \"devDependencies\": {\n    \"jscs\": \">=1.8.0 <2.0.0\"\n  },\n  \"peerDependencies\": {\n    \"jscs\": \">=1.8.0 <2.0.0\"\n  }\n}\n\nTo load plugin you should just add it to plugins (no need in additionalRules since v1.8):\n.jscsrc\njson\n{\n  \"plugins\": [\"your-plugin-package-name\"],\n  \"yourRule\": true\n}\nupd: I'm almost sure that v1.8 will be released this month.\n. @mrjoelkemp I can try ;-) I've promised @markelog to make a simple plugin example but I have no time until next week.\n. @mrjoelkemp Can you assign me to this issue?\n. @mrjoelkemp https://github.com/jscs-dev/node-jscs/wiki/Plugin-API Somehow like that? I'm not sure what to write there ;-(\n. @mrjoelkemp Please take a look at #761 \n. @mrjoelkemp Oh, yeah. Now I see. Thanks\n. Should we add separated section for plugins in readme?\n. @mrjoelkemp I did a subsection in options section. While asked about a bigger thing. After a several hours I think it doesn't needed. We have wiki page and no need to repeat that information in readme.\n. Ouch! ;-) I can't even react\n. :+1: \n. I'll do it.\n. @markelog @mikesherov Guys, I made some changes, It works but logic is different now. What you think about it?\n. Nice idea. +1 for this\n. @mrjoelkemp Agreed with removing in all presets.\n. We also should think about merging different presets. It would helps a lot in many cases for plugins.\nE.g. jscs provides a bunch of basic style rules, plugin provides their presets with plugin rules, for now you can't merge them (manually only). Related: #109\n. @mikesherov I couldn't find deprecated rules section ;-( validateJSDoc rule is moved out of docs since jscs.info or even earlier.\n. I propose just move out usage of that rule by @mrjoelkemp's commit.\nAlso we can cleanup tests but imo that's not really important.\n. To be clear: we can change presets in 1.11, and drop these rules in 2.0 (as decided). #982 \n. I've made a clear issue. Closing this.\n. @jdlrobson If it's possible you can use some treeish directly from git ;-) Or disable errors for some lines for a while.\n. @mrjoelkemp Unfortunately they won't fail. No rule \u2014 no reports.\nDo we really need to remove jsdoc blocks from integration tests?\n. @indexzero Here it is\n. Look at #73 ;-)\nBriefly: it exists as excludeFiles option.\n. :-D yeah\n. It looks like sudo npm -g update npm at before ;-)\n. Ouch. Thanks!\n. @mikesherov @mzgol I've stuck with almost the same problem in #317.\n. @markelog You think so?\n. @mikesherov @mrjoelkemp Oh guys, sorry. I thought it's about autofixing. I'm totally agree with both of you!\n. @indexzero I'm thinking about enabling this by default, and optionally have a subrule for disabling it.\nSo this:\njs\n\"requireNewlineAfterArrayItems\": true\nshould be equal to:\njs\n\"requireNewlineAfterArrayItems\": 1\nand to:\njs\n\"requireNewlineAfterArrayItems\": {\n  \"itemsLimit\": 1,\n  \"dontCheckNewlinesAtEnds\": null // how to name it? ;-)\n}\nSo everybody could make this checks weaker by passing true to dontCheckNewlinesAtEnds. And this:\njs\n\"requireNewlineAfterArrayItems\": {\n  \"itemsLimit\": 3,\n  \"dontCheckNewlinesAtEnds\": true\n}\nwould allow\njs\nvar x = [1, 2, 3,\n    4, 5, 6,\n    7, 8, 9];\n. @indexzero But you proposing another idea with some another limit for enabling this rule, right? I have troubles with naming ;-) Propose a name, please, and I'll implement that.\n. @indexzero ;-D\n\nThere are only two hard things in Computer Science: cache invalidation and naming things. -- Phil Karlton\n\nEspecially for non-native speaking people.\nSure we should fix naming.\n. @mikesherov correct me if I'm wrong:\n- rule renamed to requireNewlineAfterArrayElement\n- limit renamed to maximum\n- relaxing option renamed to ignoreBrackets\n- relaxing option now allows to place brackets on the same line with elements only (suppresses errors about it)\n- true value becomes roughly { enabled: true, maximum: Infinity, ignoreBrackets: false }\n- single line arrays shouldn't be reported if elements.length doesn't reach maximum value\n- multi-line arrays should have one element per line explicitly\n- first and last elements should report additional errors if they placed with brackets (and if ignoreBrackets not set)\nRight?\n. Done ;-)\n. Done.\nAlso fixed possible holes.\n. Droped !els. Misread specs, sorry. elements should be an array of Expression or null. So it's an array strictly.\n. :up: It looks like ready to merge.\n. Rebased, checked coverage.\n. Rebased, moved rule description to js and improved it.\n@markelog Please check this out. My english isn't perfect.\n. Oh, looks like we forgot about this.\n. @markelog Can you take a final look here?\n. > We have a falling CI-run\nIt's a \"Line must be at most 120 characters at lib/rules/require-newline-after-array-elements.js\"\n\nmaybe even use it as general rule for naming - if there couldn't be an opposite rule, start name from \"validate\"\n\nAgreed. Let's do this!\n. @markelog Oh, lol. Thanks!\n. We gonna try acorn as parser? ;-)\n. :+1: \n@adrianheine Actually, there are 2 options: https://github.com/jscs-dev/node-jscs/blob/v1.13.1/lib/js-file.js#L23-L24\nES5 is used by default, as I see.\nBehaviour: https://github.com/jscs-dev/node-jscs/blob/v1.13.1/test/specs/js-file.js#L900-L903\nWhat we decide to do with the options? I don't see where they are documented ;-(\nupd: set specific tag in urls\n. > Can we close this then?\nI think so. :+1: for closing as resolved or non-fixable.\n. /cc @mikesherov @mdevils\nPolite ping.\n. I've found the reason of this issue. Gonna fix it. Looks like there will be some reworks in some rules also.\nI hope we are ok with that because we gonna switch major version\n\n. Probably dialect: 'es3' will be better.\n. @mikesherov You mean version: 'es3'? I just wanna to say that es: 3 is much better than es3: true but we can check even actionscript with custom esprima. No?\n. I'm agreed with @mdevils. It's pretty nice to have something like that and I hope there's no troubles with implementing this ;-)\n. :smile: Great :+1: \n. @twolfson Thanks for your patience and contribution. Well done!\n. Dup of #1045 \n. @markelog We can make 1.8.2 with additionalRules hotfix and then merge this PR and publish 1.9.0. Why not?\np.s. I mean to merge all hotfixes to 1.8.2. And then merge all critical changes to 1.9.0.\n. Seems like it's a problem with esnext. Am I right with tests?\n. Yeah, seems like. Another one was closed already: #777\n. @mrjoelkemp :+1:\n. @mderazon Wow. Thanks!\n@mrjoelkemp I think we should make a note in readme about it. That's great!\n. If all is fine I can repeat that for require*. There is the same trouble\n. Okay, doing the same for requireSpacesInConditionalExpr\n. Done. Thanks!\n. Wow ;-D\n. @mikesherov @mdevils Also different plugins recommends that https://packagecontrol.io/packages/SublimeLinter-jscs\nYou can see that jshint requires that too https://packagecontrol.io/packages/SublimeLinter-jshint\n. But anyway there is a difference between jshint and jscs in plugins and additionalRules option. Even if some linter have plugin I'm not sure that this problem is resolved.\nAnd I have an idea.\nWhat if we make some jscs-cli package that will install global jscs binary and will use locally installed jscs in projects.\n. @mrjoelkemp I'm not sure that you can't determine what project it is if you saving a file. You can go through directories up to the root and look for .jscsrc or package.json file. But it would break a deal if somebody creates .jscsrc in inner project directories.\n. @markelog We will have a lot of troubles with rules deprecations, different versions (2.0?) and for now I can't use plugins without global installation. Is it real life issue?\n. Yup. Is there an issue in 2.0 milestone about that troubles? Probably it's time to make it to move this discussion there.\n. Yeah, that's known problem. Some ideas how to resolve that? ;-)\n. Internals of JSCS made with separate rules so it should be some feature fix for one of these rules.\nE.g. it can be an allExcept property for requireDotNotation rule.\n\"requireDotNotation\": { \"allExcept\": [\"snake_method\"] }\nImagine you have like 10-20 libraries with 10-20 used methods in each: it will be a list of 100-400 strings.\nIf you provide a list of libraries that should be skipped:\n\"requireCamelCaseOrUpperCaseIdentifiers\": {\n  \"allExceptLibraries\": [\"external-library\"] // how to detect that you access it?\n}\nThat's not so trivial ;-(\np.s. Probably It would be much easier just disable some JSCS rules for some files that using external libraries. No?\nTo use dotted format lib.snake_method() you can disable and reenable requireCamelCaseOrUpperCaseIdentifiers rule:\n// jscs:disable requireCamelCaseOrUpperCaseIdentifiers\nlib.snake_method();\n// jscs:enable requireCamelCaseOrUpperCaseIdentifiers\nAnd vice versa with requireDotNotation.\n. One more idea.\nWe can try to use subfolder configuration extensions (./lib/.jscsrc) for that. Probably we need this anyway for ignoring files. And in that .jscsrc we describe custom rules for some files.\nOr just jshint-groups-like way with defining a bunch configurations for different file groups.\nI'm usually using snake_style notation only in some files with proxies so this will fill my own needs. What about yours?\n. I'm really want pref improvements but...\n@markelog Can you propose option name for this? ;-) exceptSnakeCase?\n. :+1: :-D\nbtw. Do we need exceptCamelCase to mirror ...? Oh. We don't have requireSnakeCaseIdentifiers.\n. @markelog Proposal new value for requireDotNotation is here\n. @markelog There are a lot of conflicts ;-) After git merge fileConfig3 in current branch:\n$ git diff --name-only | uniq\nlib/rules/require-dot-notation.js\ntest/rules/require-dot-notation.js\n$ git diff |grep '^[ +][ +]' | grep -v '<<<' | grep -v '===' | grep -v '>>>' | wc -l\n112\nI think easier to rebase after #825 will be merged. Seems like it will be merged soon.\n. @markelog Thanks! :up: \n. @markelog I think coverage decreased because of growing codebase.\nI've checked coverage locally:\nrequire-dot-notation.js 100%\n. @mikesherov Right, sorry.\n. :up: \n. @markelog Rebased, reverted accidentally dropped docs for es3 flag (website commit), added test for case ___.\n. @markelog e.g. we don't have a semantic opposite to requireCamelCaseOrTitleCase rule. ;-)\n. @mrjoelkemp oooooo... Black magic detected.\nCan you take a look at Spying on existing methods?\nsinon.spy rewriting global object's method so it MUST restore it after calls counting (if it doesn't do that silently). I'm pretty sure in it. And 0.11.14 doesn't do this for sure. I'm not sure about 0.10.35.\nv0.10.35 really fails with this fix while v0.11.14 starting works well ;-(\n$ nvm use 0.11\nNow using node v0.11.14\n$ npm test\n...\n  2634 passing (12s)\n  4 pending\n. @mrjoelkemp :christmas_tree: I think I've found working solution for both node versions: spy.restore().\n. > Actually, those files are already 100% covered according to coveralls.\nI've just ran npm run coverage-html ;-)\nThese conditions marked yellow, and I think this information doesn't placed in lcov and these statements marked as covered. But actually it's overkill.\n. @mdevils Yeah, why not.\nWhat if there is no prevToken? It will be a uncaught error at lib/token-assert.js#L124\n. @mdevils Okey. I had tried to find test cases before. Can you please provide some ideas how to test these cases?\n. So I'm not sure but feels like we just don't need that check. ;-\\ Okay. I'll rewrite these rules with token-assert. Thanks!\n. @mdevils There is a problem with comments between tokens. Should I inject comments search logic into .whitespaceBetween and .noWhitespaceBetween functions?\n. @mdevils There is a problem with comments between tokens. Should I inject comments search logic into .whitespaceBetween and .noWhitespaceBetween functions?\n. @mdevils /* comment */ if /* yolo */ ( /* another */ condition /* more */) /* again */ { // etc\nShould whitespaceBetween ignore them? Should it count spaces outside of comments between tokens?\nedit: Also it would be great if we would pass several assertion methods at once.\n. @mdevils I suppose to use a helpers getCommentAfter/BeforeToken to get the closest comment for token. It simplifies a lot inner rule code for a bunch of rules. https://github.com/zxqfox/node-jscs/commit/7a86811c61e29ec8b47cd309a3c6a6bb349441b9\n. Fixed last nuts. Thanks for review, guys!\n/cc @markelog \n. @mdevils Great work!\nDo you think about regrouping rules according to @markelog's work (https://gist.github.com/markelog/752e53faf9f27de4024d)?\nIt should helps a lot for those who want manually fix their code style presets.\n. :+1: :clap: \n. Personally I don't like the idea to store website in the main repo. But code is lgtm. Great work!\n. @just-boris yeah. But it should be built and published just after releasing new version so anyway it's a script that can fetch main website repo, push there autogenerated content, and publish to gh-pages or something. But without website repo you'll see a mix of website and code fixes in the main repo. It's a critical difference for me ;-)\n. @mdevils One more great thing we have now. Thanks! Did you think about using plugins on this page? ;-)\n. What about:\nfoo[/*bar*/ 1 ]\nfoo[ 1 /*baz*/]\n. Actually, for now these comments will be ignored because all rules works with tokens while esprima doesn't provide them in AST. It's a Parser API standard.\nIt's not a problem already since we have tools to work with these cases. We just need to decide what to do ;-)\n. My first PR was much worse. ;-) Nicely done.\n. My first PR was much worse. ;-) Nicely done.\n. Should we get rid of Curly in name? Braces are { and } already.\n. @Krinkle :+1: for that.\nAnother solution is to have a proxy npm-package with esprima-harmony-jscs.\n. @markelog Yeah, I've tried Esprima 2.x with JSCS and it works well, but seems like we should inc major version.\n. @markelog Because we can't guarantee work of plugins.\n. @tteltrab Definitely ;-D\n. @twolfson Wow. Thanks!\n. It can be replaced with a function({Conf} conf) with some conf.registerRuleValue inside.\nAlso one rule could handle several rules and values. And also one rule could have aliases (for modern configuration).\nBut fully declarative version (yours) will also be good.\n. We can try to use here https://github.com/molnarg/js-schema/ or analogue. But it's 24Kb. Probably we can find more lighten solution.\n. Nice stuff. Thanks! ;-)\nAbout 2nd one: https://github.com/molnarg/js-schema/ \u2014 25Kb, can be used in browser. Is it fine for us?\n. > The thing I disagree with is the dashes. You see, the first version of logo was made with the original \"Neutra Text\" dashes\nI kept thinking about what's wrong here. Yes! Size of dashed!\n. @mrjoelkemp You've decided to not use vow-node? ;-) That's strange since lodash.assign is here.\n. :+1: That's ok. I just still remember that issue where @dfilatov decided to split promisify to separated module to make core codebase lighter for browser usage ;-)\n. I would do it because anybody wishes this a lot and it doesn't break anything. But it should be noticed as experimental. And I hope it does not break any current cli usage.\nIf we strongly need here some patches I can help. Personally I'm missing ES6 :-(\nGreat job, Joel! :tada:\n. I've got a wow effect today because of that ;-D \n/cc @markelog\n. Didn't we decided to use bracket notation for [], brace for () and curly for {} ?\n. Oh right, thanks. So brace for {} and parens for ().\n. Feels like \n\"requireSpacesInsideArrayBrackets\" : \"all\",\n    \"requireSpacesInsideObjectBrackets\" : \"all\",\nare not about property accessors. Can we make a different rule for x[y] ?\n. > I don't know if the JSCS parser is smart enough to identify both uses, but if it is... ;-)\nYep. It's pretty easy to do for your samples ;-) We need more cases!\n. I'm not sure if we need ability to enforce 2 or more spaces here. That's strange. But anyway it's pretty easy to implement.\n~~@jaswilli Do you need 2 or more spaces? or just any count more than zero?~~\nupd: Oops. I reread @mikesherov's question.\n@mikesherov Probably we should fix an error message here.\n. @jaswilli Yeah, we definitely should fix a message. Thanks again!\n. @mikesherov Done ;-)\n. @mikesherov Just about >0. For now there are 2 methods: whitespaceBetween and noWhitespaceBetween. And whitespaceBetween can handle amount property. amount equals to 1 in that rule.\n. @markelog Just travis also pushes coverage and it looks like overhead.\n@am11 Did you tried to set up Path manually? I've cloned repo onto windows machine, run PS, run npm i, and run npm test \u2014 all is fine.\nAfter that I did one more test:\n$env:Path = $env:Path + \";./node_modules/.bin\"\nmocha\nAnd it also works well.\nAlso I've tried to remove global jshint \u2014 but npm test still works.\nI can't repeat that ;-( Sorry.\nCan you try to add - ps: $env:Path = $env:Path + \";./node_modules/.bin\" after installation or before npm test? Also would be useful to have - ps: echo $env:Path before npm test.\n. @am11 Also I would try this syntax:\n- cmd: npm test\ninstead of\n- npm test\n. @elidupuis Definitely it is only about esnext. Feels like there are a lot of bugs in es6 parsing logic. ;-(\n. But... spaces : 1 is a good thing! :cry: \n. Yeah, nicely done! :+1:\nI'm only thinking about assert api to make it autofixable. Probably we can left it as is becase the opposite rule still need update.\n. You can try to use plugins + preset for that purpose. You're right about additionalRules that allows you to load only rules. But plugins also allows you to register your own preset so no worries!\nYou would need to make some index.js with registering your corporate preset, and then just load it with plugins.\nSee also plugins API: https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\nAnd example: https://github.com/zxqfox/jscs-bem\nNote that you can use plugins inside your preset package. Pretty flexible thing imho!\n. I'm sorry, but what about block comments between bracket and the next token?\nvar x = [/*1*/ 'a' ];\nvar x = [ /*2*/'a' ];\netc.\n. almost managed ;-( agreed!\n. /cc @markelog \nhttps://github.com/jscs-dev/node-jscs/blob/master/lib%2Frules%2Frequire-space-between-arguments.js#L56 \n. @cowwoc You can try to run jscs manually with your config to separate paths deeper and deeper until error happens on concrete file.\n. @mikesherov Okay, should I rebase? I've filed an issue for 2.0 #993, need to fix commit message.\n. You can see that there is .jscs.json in angular.js repo and it doesn't use google preset.\ncc @hzoo \nAgreed that google styleguide doesn't tell us how many vars we should use in a scope. It just tell us to use it.\nThis rule was added in google preset with https://github.com/jscs-dev/node-jscs/commit/ce6c5593c0d0c76b5d5d07f5b5f6315294c6536e\ncc @mrjoelkemp\n. These code examples uses multiple vars to declare variables. Isn't it? It's more like we need requireMultipleVarDecl: true in google preset.\n. Omg, this happens again!\n. > While the style guide examples have places that do use one var per decl\nAre you sure about that? I didn't find a place with that.\n. @dbrinegar I see a lot of code like this.\n\nJust to be clear. Am I right that you talking about allowing this in google preset?\nvar one,\n    two = 2,\n    three;\nI'm not against removing this rule from preset but attached examples tells us to declarate variables separately so we should think twice before doing it.\n. I think auto-config by default is not a good idea. You can easily mistype files or forget to put paths and you'll get wrong config.\n3 . Tell user that there are no rules to check and give him a note how to configure with preset or autoconfigure jscs.\nBut (1) is pretty fine too.\n. Well, It's pretty hard, because personally I like the idea with some very common default preset. But seems like airbnb is not the best choice. It has esnext, it has some specific things (like \"_this\" for context, requiring padding before line comments, etc). But yes, this preset the most common of existent.\nAnd actually, the more I think about it the less I like it. Here is comparison of presets: https://gist.github.com/zxqfox/12994393bd9b7681cbab\n\nUsers aren't explicitly asking for it\nJSLint, ESLint, JSHint all has default configs\n\nBut it's not about code style. It's about syntax and implicit things that are generating errors or so.\n\nPython, Go and many more has that \"default config\"\n\nPython is a bad example, indentation there is a syntax. So they more like require it. Just hard to write it right.\nNot sure why Go has it. But feels like it reduces the barrier to entry for newcomers, and makes community more focused on good things. So It's a always a good choice (btw that's why I like an idea with using the most common preset to check the code).\n\nFor now I'm voting :-1: because of:\n- esnext: true \u2014 we shouldn't use experimental things as default behaviour, imho;\n- checking with some specific rules (that airbnb has) can confuse user more than just silent exit (take a look at comparison);\n- If we go that way when we could change the default behaviour? ;-(\nBtw. I still think we can help user to configure jscs if there are no config after an error.\n. :+1: ;-)\n. Ah, right!\n. Houston, jscs-jsdoc has a peerDependency of jscs itself. Should I make a symlink in node_modules? Is there a more elegant solution? https://github.com/npm/npm/issues/7334\n. @sindresorhus Yes sir! ;-( But what to use for plugins? (Please don't tell me that \"plugins are deprecated\" ;-)\n. https://docs.npmjs.com/cli/dedupe ? Not sure that it's a right way to do it.\n. @sindresorhus Great news everyone! Thanks, it can really help with plugins. Looks like a real solution.\n. Looking for a time to get it done. ;-(\nIn my timeline actually.\n. @Shuhrat Just fyi: this case already handled correctly by plugin. Thanks!\n. It can simplify work with user input in cli. Less imperative checks, cleaner code.\n. Can Inquirer help to solve this? ;-)\n. @aju Please provide jscs -V, I can't repeat that with v1.11.2 on win7\n. Thanks. Feels like it will be hard.\nCan you provide some additional information? Maybe spaces in path or something else?\n. Nice to know! Interesting bug.\n. Yea, looks like. Anyway, thanks for details and contribution. ;-)\n. Looks like myfunc in { myfunc() { return null; } } doesn't evaluated as shorthand. Imo it should be fixed in esprima.\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-object-keys.js#L44\n. @mikesherov Thanks ;-) done.\n. Great work here! :+1: \n. @mdevils It's totally fine if it'd make autofix easier. For now I feel that assertion methods should be as simple as possible so new method should be better than extended old one.\n. :+1: Nicely done!\n. For now I'm synchronizing .jscsrc manually in jscs-jsdoc, so jscs preset would be handy. @markelog I'm not sure why you against that.\n. @markelog Can you create a repo for our preset?\n. @mikesherov Yup ;-) Done.\n. About method in utils: I've started to add this but it looks uglier ;-( I suggest to add it as property or method to ObjectExpression node.\n. :+1: It'd be great feature.\n. I think that unconditionally added esnest will confuse users. At least we should tell them about it if they don't use es6 atm. But in that way we should know about their code and can skip adding this option. So -1 for default esnext: true.\n. @TheSavior I'd make a test (spec) for that case. These tests would be useful in any way even if it works as it should (and it's not a bug).\nLooks strange... ;-\\\n. Oops. Totally agreed here.\n. I thought about it. Look like we lost a reason of denying yoda conditions.\nAfaik it was a bad code style because there is a difference between a = 5 and a == 5. And mistype is not a syntax error. But it's impossible to mistype a < 5. Do we really need this fix or we should just rethink this rule?\n. @mrjoelkemp I think it's too complicated and can be simplified. I'm not sure that 5 <= value should be interpreted as yoda condition.\n. Sorry for delay, somehow missed this PR. ;-(\n. @Slayer95 Thanks!\nLGTM\n. I'd say :cat::\n```\nskip unless current node is function\nskip if parent node is return\nskip if parent node is array\nreport this!\n``\n. @mikesherov @markelog @mdevils Can we remove function from that list and implement a separate rule for functions? E.g.requirePaddingNewlinesBeforeFunctionStatement`. I didn't see a good way to not break current solution while fixing this bug.\nAlso I'm not sure why it was labeled as enhancement. It's looks like a bug, and sound like a bug.\nupd as a quick solution we can just drop here function from a keyword list.\n. I'm not sure but it's very close to inversion of jsx checking. And since jsx check uses custom esprima should we do the extraction right in checker?\n. btw. One more similar and common case is checking js inside md-files.\n. @lahmatiy Better solution is to use custom esprima imo. E.g. you can take a look at esprima-fb\n. @lahmatiy It can skip all html nodes as comments (or anything concrete) and returns just Parser API AST nodes to for checking. But I agree that it will be a problem with indentation probably.\n. @lahmatiy Em. Why not?\nFor simple html you'll have AST like that:\njs\n// comments (or something):\n[\n  { type: 'HTMLPart', value: '<html>...<script></script><script>\\n</script>...<script>', range: ... },\n  { type: 'HTMLPart', value: '</script>etc...</html>' }\n]\n// nodes:\n[\n  { type: 'SomeStandardNode', value: 'var', etc... }, ...\n]\n~~The only thing to fix here is lines/columns normalization for indentation and reporters.~~\n@mikesherov provided a solution with first char in code block.\n. :+1: Go ahead!\nI'm thinking about checking code inside md-files. It's very close to check inside html.\n. @markelog It would be great to have an abstraction for these purposes...\n. @ashclarke There were 3 rules affected by this bug:\n- disallow-mixed-spaces-and-tabs\n- maximum-line-length\n- validate-indentation\nSo probably you have some of them before requireCapitalizedComments ;-)\nupd And as @alawatthe said: as temporary fix put them all to the end ;-)\n. @hzoo I've fixed that bug for 1.11.3, can you try to rebase?\n. @hzoo Nice cleanup. ;-)\n. Guys from travis denied continous benchs: https://github.com/travis-ci/travis-ci/issues/352\nAnyway, we can make a static script that will calculate a par of server's performance and then just normalize the result timings of bench via these values: timing s1 / performance s1 vs timing s2 / performance s2, etc.\nWe can run bench for many of our current tests, just we should mark them somehow.\nIf we go this way we need some script that fills a lot of key performance factors for js that can change with different hardware.\n. @mikesherov Some tagged version? Or just previous? I'm afraid of different set of functionality. Can be hard to compare. ;-(\n. @mrjoelkemp Yep, it is ;-) As you can see both builds succeed.\n. @alawatthe I'd say no. It's a kind of sugar, atm we almost done #109 about presets, and I believe that it could helps a lot with sugar making in common. At other hand, I'm agree with @alawatthe about discouraging defaults.\n. @alawatthe It was a message to @ashclarke, sorry. ;-)\nI'm talking about defaults, and presets can help with that.\n. Thanks for contribution! Please, make an issue for PR next time ;-)\n. @mikesherov This issue forces me to search sysexits codes. Is it time to cleanup? We can freely implement and document exit codes but there are some issues like #962 for v2.\n- Sysexists #1095\n- Obey of silence #962\n- Execution without options #986\n- etc.\nIs #962 the same as --ignore-missing-config? If so we can close this issue.\nProbably would be great to collect all of this cli issues into another one and talk about cli behaviour there.\nupd I like an idea in this issue so my choice is (3) + (4).\n. > Doesn't look like a duplicate, point of that issue is to do be quite only if config is there and there is no errors to show.\nFlag -s makes grep silent. Probably we need something similar.\n$ sh -c 'grep asd .jscsrc 2>/dev/null'; echo $?\n1\n$ sh -c 'grep asd asd 2>/dev/null'; echo $?\n2\n$ sh -c 'grep -s qwe asd'; echo $? # nice.\n2\n$ sh -c 'jscs -c asd lib 2>/dev/null'; echo $?\n1\n$ sh -c 'jscs -c .jscsrc zxc 2>/dev/null'; echo $?\n1\n. Travis uses nvm internally, all is fine here ;-)\n. Looks awesome!\n. @twolfson Thanks for contribution! Great work here. Here we have a conflict with another PR so I suggest to wait someone else to discuss with.\nPersonally, I like atLeast/atMost (just because it's shorter). ;-)\n. Nvm about appveyor, it uses iojs1.4.x (reason of broken build), we need to merge that PR first.\n. Afaik it's pretty easy to do and we can just ask about it on first use. I'd like to have it in JSCS.\ne.g. https://github.com/bower/bower/blob/0ce7053598bf8b79f059c61bdd7afab08497868b/lib/util/analytics.js \n. > If so, should we pull the binary's logic into lib/bin?\nWhy not? ;-)\n. Ouch, nice! :+1: \n. wow.\n. | Node Style Guide | ... |\n| --- | --- |\n| short declarations on a single line | \"disallowMultipleVarDecl\": \"exceptUndefined\" ? |\n| Write small functions | I think it's not about code style, it's more about complexity |\n| Return early from functions | This idea walking around about half of a year, I'm strongly for adding a rule for it. |\n| Don't use Object.freeze, etc | It'd be great to have a check for that. But is this code style? |\n| // This function has a .. | \"requireSpaceAfterLineComment\": true |\n. @hzoo It would be great to note that in docs somehow. I suggest to make an issue with global docs updating to collect some ideas.\n. :+1: \n@mdevils Thanks for note. Nope ;-)\n. @necolas Can you try to quote pattern?\nsh\njscs 'src/**/*.js'\nupd It won't work because we don't using glob internally for targets.\n. I just think it's not a bug or something because launching from different shells can produce different results. Also double star (**) pattern was used in git and many other ignore files to mark including inner directories, but it works as single star in bash and sh and when you using it from bash/sh it will expose it as a space-delimited list of arguments.\nsh\nls test/**/*.js | xargs echo\nBtw looks like fish using double-star as you expect because I see nested directories in output. But not bash/sh ;-)\n. @TheSavior Difference just in order. this._tokens are better since the set is the same.\nupd For code:\nvar a;\n// com1\nvar b\n// com2\nthis._tokens:\n['var', 'a', '// com1', 'var', 'b', '// com2']\nthis._tree.tokens.concat(this._tree.comments):\n['var', 'a', 'var', 'b', '// com1', '// com2']\n. :+1: YES\n. Moreover these \"modules\" widely used in plugins. ;-)\n. @mikesherov :+1: Feels like you almost found all indentation edge cases ;-) Gratz!\n. :+1: \n. @TheSavior @mikesherov My usual way is git pull --rebase upstream master ;-)\n. https://github.com/jscs-dev/node-jscs/issues/1136 yup. Nvm\n. Master is fixed, feel free to rebase ;-)\n. Master is fixed, feel free to rebase ;-)\n. You can make presets with jscs and use them as you want to use basic rules. Literally, it's the same.\nBut I'm not really sure that we should make internal configs without extending the basic one. The first time I've read your message I thought that you need config for inner directory without extending the root one.\nAtm you can use --preset manually like: jscs -p root/.jscs -c root/spec/.jscs targets.js.\nProbably you can solve your checking issues with making a simple preset, loading it somehow (via plugin or option), and then use it for all your target with different excludeFiles mask sets.\nIs it ok for ya?\n. > with no need to run the command multiple times per configuration or target\nThat's what we need to talk about.\n\nDo you understand what I mean?\n\nAbsolutely, I've just note that there is workaround.\n@markelog @mikesherov What you think about it? I think it's pretty close to overloading .gitignore for subpaths at my point of view.\n. Sorry for delay, guys.\n\nBut there doesn't seem to be many other needs for additional assertions, and I think the fear of an overblown is just that, fear.\n\n:+1: \n\neven if we add assertions to every rule in our codebase it wouldn't mean any external rule could use it. Which would mean auto-fixing wouldn't possible for the them.\n\n:+1: \n\nOn the other hand, give users API to change your code is dangerous.\n\n:+1:, but it's a fear ;-) If you using a plugin \u2014 ask plugin developer why it fails.\nIf you using JSCS as a plugin to IDE or Some smart editor \u2014 usually you have a choice to not save file and, moreover, cancel changes with Ctrl+Z/Cmd+Z.\nMost of folks using VCS so they can look at changes and decline them if it wrong.\nWhat you think about Assertion API. Is it ready to be public?\n. Am I right that we revert some assertions because they are invalid for autofixing? Probably we can fix autofix.\n:+1: if we can't.\n. You can see a part of errors here: https://ci.appveyor.com/project/mdevils/node-jscs/build/154 \u2014 that's one of early builds.\nhttps://ci.appveyor.com/api/buildjobs/1v3k79cy024mr1ym/log \u2014 and full log here with a lot of faults (3.4Mb)\nupd\nI'm not sure why this happens. I'll try to reproduce it.\nBut these errors with appveyor aren't blockers for this PR.\n. God! How you did this? ;-D\n. Can we support both?\n. I'm not sure that this is an appveyor bug. I can repeat this with 1.4.3 iojs on win7 machine. Exactly the same error set. ;-(\nBtw, v1.4.3 on my linux box also fails with:\n../deps/uv/src/unix/stream.c:1174: uv_shutdown: Assertion `(stream->type == UV_TCP || stream->type == UV_NAMED_PIPE) && \"uv_shutdown (unix) only supports uv_handle_t right now\"' failed.\non mocha call.\n. Okay, it's definitely iojs v1.4.1+ trouble. I suggest to freeze nodejs version for appveyor to 0.12 or 0.10 and 0.12.\n. I'm not sure how you can get This causes an unexpected \"multiple line break\" error. but agree with fixing this regex.\n. Unfinished test case that doesn't fail:\njs\nit('should not break lines with `#...` at begin inside comment blocks', function() {\n    assert(checker.checkString(\n        '/*\\n\\n' +\n        '## Section 1\\n\\n' +\n        'Some text\\n\\n' +\n        '## Section 2\\n\\n' +\n        'Some more text\\n\\n' +\n        '*/\\n'\n    ).isEmpty());\n});\n. #!/usr/bin/env node at the first line to force a file to be called itself as a node argument.\n. Master is fixed, feel free to rebase or just nvm.\n. Master is fixed, feel free to rebase or just nvm.\n. @yaycmyk It was a temporary error, I've restarted build and all is fine.\n. Thanks for contributing.\n. Thanks for contributing.\n. Thanks! :+1: \n. @mrjoelkemp Seems like all is fine with 0.10/0.12.\nShould we test both stables or just 0.12 (as latest stable)?\ncc @mikesherov @markelog @mdevils \n. @mrjoelkemp Yes, but we already testing them in travis. And since appveyor tests much slower we can skip them.\nAnyway if bug exists I should go & look into it and check manually both versions. As addition: there are no much windows specific bugs so I think we can left just the latest.\n. Thanks!\n. :+1: \n. @mikesherov Do you thought about making several options-flags to explicitly show what user want?\nE.g. allowArraysWithoutIndent, allowArraysWithSingleIndent, etc.\nupd AFAIK algorithm we using now some autodetection for indentation, etc. Probably we could have a way to explicitly set these flags&variables at configuration time.\n. Thanks for contributing ;-)\n. @markelog Why we can't check module foo first, and then local ./foo directory if module doesn't exist?\n. Would be great if we split this to several PRs. I need a part of it to finish .jscsignore related issue. On the other hand it would be safer to merge them.\n@markelog I know it's hard to split it. But still can we make a try?\n. > Is there something preventing you to review this by the individual commits?\nOnly fear of incomplete code.\n. :+1: And this ;-)\n. :+1: Same\nCan we land this?\n. I've restarted appveyor, ETIMEOUT happend.\n. Hm:\n.....................................................\u001b[93m.\u001b[93m.\u001b[93m. \n  \u001b[93m.\u001b[93m.......................................................\nWhat's that in appveyor logs?\n:+1: If it's fine.\n. > Carets? Why?\nBTW. As far as I remember the last time we face carets we decided to keep tildas until 0.12 release because of support of 2 latest stable versions of node. ;-)\n. Can you point me to Yandex Guide? Link to document would be great.\n/cc @markelog\n. @ikokostya It's a bug if you can't.\nAll rules can be disabled by nullifying:\njson\n{\n  \"preset\": \"yandex\",\n  \"validateIdentation\": null\n}\n. @mikesherov :+1: would be great if you also ~~add modules.define and modules.require or~~ an option to define these in preset. ;-)\n. @mrjoelkemp I think we should handle this as special case since I can't remember what other keywords can contains var:\nwhile (var i = 5) { break; }; // fail\ndo { break; } while (var i = 5); // fail\nDo you?\nAs I see it's only allowed in for.\n. @mrjoelkemp As far as I see it's a rare case. But this rule forces to make code like that (if I'm not wrong):\n```\nfor (var i = 0, length = myArray.length; i < length; i++) {\n// ...\n}\n```\nThis is strange at least.\nupd for those who need it we have another rule with padding for blocks.\n. Totally agreed.\n. Thanks for contribution. :+1: for not reporting this as an error.\n. Seems like this space doesn't checked in 1.10, because comments wasn't tokens.\nIt looks false positive because there are spaces in array brackets.\n@hzoo Am I right?\n/cc @mikesherov\n. Ah, :+1: for adding includeComments.\n. My 5 cents:\njs\nrequireAlignedFunctionParameters: {\n  alignment: \"indent\"|\"firstParameter\",\n  multiline: <boolean>,\n  maximumLineLength: <number>\n}\nI'm not sure about names but I think different styles has different rules for this case.\nalignment will rule:\njs\nfunction (\n  thisIs,\n  theLongestList\n) {}\n// vs\nfunction (thisIs,\n          theLongestList) {}\nmultitline will rule:\njs\nfunction (thisIs, theLongestList) {\n}\n// vs\nfunction (\n  thisIs,\n  theLongestList\n) {}\nAnd I think we need also a some sticky flag to rule newlines about parentheses.\njs\nfunction (thisIs,\n  theLongestList) {}\n// vs\nfunction (\n  thisIs, theLongestList\n) {\n}\n. Yeah, probably you're right. To decide wisely we need to know about real use cases.\n. Thanks! :+1: \n. Yeah, nice idea! Thanks for contributing\n. For me it's pretty close to requireSpacesInConditionalExpression with their afterTest/beforeConsequent: beforeStar, afterStar?\nBut if we look further and reach ES7's async function * name () we can also try to group up all of them to requireSpacesInFunctionExpression options: beforeAsync, afterAsync. Just a thought.\n. I'm afraid that it's from esprima; not sure but don't see Unexpected token in code base.\nhttps://github.com/jquery/esprima/blob/0b3658b7fddd05b4140fcbeacca56b2c6d7596e2/esprima.js#L168\n. /cc @mikesherov Am I right?\n. Emh, as far as I know JSON is not valid JS (except empty ones: {}, []).\nCan I ask why you need to check JSON files with JSCS?\n. @malsup Np. If you using it with explicit call on target you can take a look at #1159\nEach vote counts! ;-)\n. Greatly done!\n:+1: for merging.\n. 5 cents: It's very close to limiting cyclomatic complexity or nesting conditional blocks. Should we? Or better to move this to jshint?\nI mean it's not really stylistic thing. But I'm not against.\n. @alawatthe Yep! That's why I'm not against ;-)\n. :+1: Yeah, I like it too ;-)\n. As I see it's just because of BC, I think we shouldn't worry about it because public API is pretty stable and shouldn't drastically change in future.\nAnd because of that we can decrease this complexity by several waves of refactoring.\nWe just need it to finish giant leap for mankind ;-) \n. Back compatibility ;-)\n. Well:\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-between-arguments.js\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-for-statement.js\nI really don't know what is wrong there but rules are in place and crockford preset looks fine.\nCan you look at version you using? These rules are pretty fresh (3 dec '14, and 15 jan '15).\n. Oh. Probably you just trying to use rules that weren't published at the moment. If so it's ok ;-) And thanks for contribution!\n. Summoning @markelog as the great master of presets.\nBtw. @SteveALee how you using presets? Via preset option or by manual copying it to .jscsrc? I still can't get how you've got these errors.\n. Yeah, okay. That's why you have these errors. Some of rules in master doesn't exist in JSCS bundled with VS13 (or WebEssentials).\nFor further usage: { \"preset\" : \"crockford\" }. It will load this file for ya and won't fail because we synchronising presets and rules.\n. Yeah, we need to do something with this.\nhttp://jscs.info/overview.html#presets vs http://jscs.info/overview.html#preset\n. :+1: to merge\n. :+1: As a hot fix.\nBut I believe we should rework this document ;-)\n. Lgtm\n. Looks good ;-)\n. @mikesherov Can I help you with ~~merging~~ cherry-picking this? ;-)\n. @ljharb Landed, thanks for patience :smirk_cat: \n. It would be great partner to requireEarlyReturn\n. What about if (!(a && b)) vs if (!a || !b)? Logically it's the same. But should we handle this as negate?\nupd Oh, @hzoo, you already noted that.\nI think we should mark this as invalid:\njs\nif (!a && (!b || (!c && !d))) {\n}\nAnd this as valid:\njs\nif (!a || (!b && (!c || d))) {\n}\nThere is no difference between && and || because\n(!a op !b) eq !(a !op b) and\n(!a op b) eq !(a !op !b).\n. https://github.com/jscs-dev/jscs-jsdoc/issues/89 lol. It shows jsdoc comment as the second token.\n. Hm, not sure why } placed as the first token.\n@TheSavior Why you think the closing brace should be marked instead of opening one?\n@markelog I'm missing a lot location range here.\n. Check this ;-)\n``` js\nfunction foo() {\n  var a = 2;\n/*\n   * @something\n   /\n}\n```\nI think @TheSavior meant that it should looks like:\ndisallowMultipleLineBreaks: ; and } should have at most 2 line(s) between them at test.js :\n     3 |\n     4 |\n     5 |}\n--------^\n     6 |\nBut I'm not sure why.\n. Totally agreed about conditionals.\nBut are you sure about plural in naming?\ndisallowNotOperatorsInConditionals vs disallowNotOperatorInConditional\n. validate*?\n. validateTestInConditionals?\n. @markelog What you think about leaving it as is for now and try to rethink it in the way to 2.0? I still want to revive your issue with new shiny configurations.\n. :+1: \n. @rwjblue Since you are the one who used it atm I have another idea: can you try to readd it on your level? Just something like:\njs\n// temporary readded since it was removed in jscs\nrequire('jscs/lib/js-file').prototype.getTokenPosByRangeStart = function(start) {\n    return (this.getTokenByRangeStart(start) || {})._tokenIndex;\n};\n. @rwjblue Thank you for that ;-) We definitely should do it and trying to describe public API for JSFile in #1084\n. @boldt Why not to disable this specifique rule?\n. Why not to have this as a plugin? It's a really huge work which would be hard to support without a deep knowledge of internal logic. Also it will give us some advantages: clean issue list for this functionality, shorter release cycle, separate team which know more about different languages and less about jscs itself, etc.\nAlso I think that it would be great to have this plugin in jscs-dev group. @mikesherov @mdevils @markelog @mrjoelkemp  what you think guys?\n. Just a link to Plugin API: https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\nFeedback will be appreciated ;-)\n. @TheSavior #739 this only. Also it's related to many other things like how it install them #863 (because, JSCS should be installed globally for IDEs, but plugins can be local). That's why we thought about jscs-cli or something else #894. Etc. Perhaps it's a time to collect all suggestion to the one issue to rule them all.\nI've thought a lot of something to rule jshint+editor_config+etc., but the problem here is software that expect files in project root. And I can suggest here only copying or symlinking (if you don't care about win) files from node_modules/ultimate-cs/configs/* on postinstall/postupdate.\n. @mikesherov @markelog @mdevils Folks, we need your wish here (and access rights) to transfer https://github.com/jacksonrayhamilton/jscs-spellcheck to jscs-dev group.\n. Look like a rule of requireNewLineBefore* group. :+1: to have it!\n. I like this at all. There is something I'd fix but I can't get what is that actually.\nSo LGTM.\n. :+1: \n. :+1: for this.\nrequireEarlyReturn is fine for me. I think FromFunctions not needed because returns used in functions only and made for functions.\n. I'm not sure that this is about code style and should be implemented in JSCS.\n. I thought about it. But still not sure ;-) At least, jshint works with file itself and not js code (I meant AST/Tokens). So it's definitely closer to the BOM problem.\n/cc @mikesherov @mrjoelkemp @markelog\n. https://github.com/EE/jscs-trailing-comma/blob/master/lib/common/setup-rule.js#L75-L76\nfile.getTokenPosByRangeStart(node.range[0])\nDup of #1214\n. @mzgol Are you sure? :panda_face: \n. @mzgol Sorry ;-)\n. Looks :+1: \n. I'm not sure but looks like the problem can be in esprima-fb (or esprima itself).\n. We definitely should rethink default behaviour of esprima for our needs.\nupd\nAnd we can do this manually for sure atm. But better to try to do it as well.\n. I suggest to implement 3 additional tokens: //, /*, */.\nRelated #1242 \n. @alawatthe Thanks for the report ;-)\nThat's related to #739 \n. @mikesherov @markelog Please correct me (and milestone) if we can make it earlier than 2.0.\n. eslint using slash for separating: jsdoc/checkParamNames\n@hzoo It's not so simple. Here are few proposed solutions:\n- Via sharing data between rules and remaking rules in jsdoc plugin;\n- Via plugins for parser: to parse jsdoc comment blocks before executing checkers;\n- Via nested rules support in core: just to support better reporting for rules like that.\nNot sure what is better here atm. Earlier I though we should go for #698\n. @markelog :+1: Thanks! If you'll find some other related issues \u2014 please push it me too. :smirk_cat: \n. Let's land this?\n. :+1: \n. LGTM\n. @TheSavior Thanks for coming. Perhaps we need not to restore functionality you needed here in separate rule to left rules simple and focused. Or just an options?\nAnd also update presets to be consistent with new rules.\nThoughts?\n. :clap: Thanks!\n. Let's merge it?\n. @TheSavior #1264 was merged!\nJust fyi: I've also squashed 2 comments into the one (because the second was a fix to the first one).\n. Something goes wrong definitely:\n- You adding test/assertHelpers.js in 0940a14\n- Then you moving it out in 991a7a0\nI'd try to put b3b3ff1 before the rest and squash the rest to one.\nLike start git rebase -i origin/master, and put instructions like:\npick b3b3ff1\npick 0940a14\nf 8e93382\nf 991a7a0\nCan you try it?\n. :+1: Fine now ;-) Thanks!\nLGTM.\n@markelog @mikesherov Final look?\n. :+1: Fine now ;-) Thanks!\nLGTM.\n@markelog @mikesherov Final look?\n. @TheSavior Yeah, but: \"Who knew life, that is no longer hurries\" \u00a9 Omar Khayyam\n@markelog Thanks for summoning. ;-)\n. Thanks for the report ;-)\n. Object keys are identifiers too (as well as variables, function names, etc).\nWhat did you expect?\n. @mikesherov Yes, sure. I'm just afraid that I didn't understand the question.\n. Oh, sorry. So while you using\nrequireCamelCaseOrUpperCaseIdentifiers: \"some_url\"\nJSCS still reporting get some_url? Ok.\n. @Aintaer Thanks for reporting ;-)\n. Landed, thanks!\n. Well you need a parser that will make Parser API AST. And the problem here is there are no stable standard for parsing ES6.\nMoreover JSCS using some custom features (undescribed in standard), e.g. for handling comments. These features are specific to Esprima (the main parser that we using and supporting). It's not so important as primal parsing ES6 but keep it in mind too.\n. @moroshko Nope. Just saying that parser should be compatible with Parser API AST.\nThat's the first time I see Babel actually. Sorry for that ;-(\nEarlier we used an esprima-fb and all was just fine (almost).\n/cc @mikesherov @hzoo @mrjoelkemp \n. Folks, I think we need to rethink our JSFile (as a flexible abstraction under changing world) to support, let's say, jsfile-esprima, jsfile-acorn, jsfile-babel, etc.. JSFile itself will provide an API (as it does now) and just proxy to any AST-compatible parser. In that way we won't be damaged by any deprecations.\nPerhaps it's an overengineering. ;-)\n. @hzoo I want to hear @mikesherov since he are very close to Esprima now. ;-)\nThe last time we talked about it (about a year ago) we agreed that we don't need anything else. Now we have JSFile and incoming ES7 features. Looks like it's a time to rethink.\n. @hzoo Just fyi: Acorn had an mimic option a year ago and was an Esprima compatible AST builder. But it was a year ago ;-)\n. @mikesherov Not sure, lol.\n@ariya Thanks!\nDrawing a map to Esprima 2.x?\n. /cc @mrjoelkemp @markelog @TheSavior @hzoo @mikesherov \n. :+1: Agreed. But we shouldn't stop checking file on exceptions imho. One rule's fail shouldn't ruin all the rest.\nAnd yes, --verbose should definitely expose this information to user. It helps a lot for debugging and bug reporting.\n. Related issues: #916, #1163\n. I'm gonna land this if nobody against. Take one more look please.\n/cc @mikesherov @TheSavior @hzoo \n. @hzoo For me? Seems like. ;-) Is it a question?\n. Folks, I need review here.\n/cc @TheSavior @mikesherov @markelog @hzoo @mrjoelkemp \n. /cc @hzoo @mikesherov @markelog @TheSavior @mrjoelkemp Thoughs?\n. @dominik0711 I definitely should update Wiki ;-) Thanks!\n. Updated. @dominik0711 Can you please take a look at new version? https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\n. @dominik0711 Good to hear ;-) Thanks for review.\n. I've accidentally removed old branch (and closed old PR #798).\nIt has LGTM but I've wait some time before merging because name was changed.\nGonna merge it tomorrow...\n. Feels like what we need. Code is a little bit complicated but looks like we need to left just variables check with ignoreProperties. Am I right?\n/cc @viveleroi\n. @markelog Let's fix it! I've used ignoreProperties because it was suggested here https://github.com/jscs-dev/node-jscs/issues/1266#issuecomment-92838858\nAny ideas?\n. @markelog Made an issue for that: #1303\n. @markelog @mdevils @mikesherov What you think about that? Can't find a proper way to do it, but code becoming a mess ;-(\n. @mdevils I don't. But please take a look at issue, I don't want to see the whole comment but I want to see /* or */.\nI've also suggest to add additional tokens for comments like //, /* or */.\n. It can be an option to validateNewlineAfterArrayElements. I don't see how we can make requirePaddingNewlinesInArrayDeclaration.\n. :+1: at all.\nIs it breaking change?\n. Looks like. Thanks for a report but I can't repeat it.\nCan you provide your .jscsrc or find a rule that throw it?\n. Did you see disallowNewlineBeforeBlockStatements and requireNewlineBeforeBlockStatements?\nhttp://jscs.info/rules.html#requirenewlinebeforeblockstatements\n. Np ;-) Thanks for your question.\n. @hzoo :+1: But where?\n. @hzoo :+1: But where?\n. try to run JSCS with --versbose flag.\nI've ran your example and it showed me:\ndisallowSpacesInFunctionExpression: Illegal space before opening round brace at ...\nSo you need to nullify \"disallowSpacesInFunctionExpression\" rule.\n. @KaoruDev Np ;-) Thanks for your question. Hope we'll find a place in docs for notice that ;-)\n@hzoo Perhaps we need troubleshooting section or something?\n. :+1: \n. We need a note, but actually we almost got Esprima 2.x. And esnext flag will be removed when we get it.\n@markelog @mikesherov Guys, what you decide?\nupd\nSince there are async/awaits, and another ES7 features \u2014 this doc can be useful after esnext.\n. Thanks for you work here ;-)\n. @mdevils Waiting for ideas ;-)\n. Related #1296\n. That's my fault, I suggest to use callback here. It's because I don't think we can find a good way to handle a couple of cases. But still, we have a hope ;-)\n. @mdevils As I feel it should be resolved by moving tokens thru whitespaces (without adding extra spaces if possible).\nstickToPrevious/stickToNext/keepNewline? Interesting idea\n. @mdevils Yup. Should it be like api.moveTokenThruWhitespaces(target, stickToToken)?\nx\\n    /* foo */ && y\\n\n\u2192 x && \\n    /* foo */y\\n or, better:\n\u2192 x &&\\n    /* foo */ y\\n\n. @mdevils Yup, I just suggested a way to move them. On the top of it we can try to think about providing several options via assert-api for fixing (like stickToPreviousToken, etc.)\n. :+1: \n\nCoverage decreased (-0.06%)\n\nBut... ;-) Need tests for TokenAssert\n. @nicks :+1: Great, thank you, Nick!\n. Thanks! Personally, I like it. But looks like too early to merge, a lot of parts of code are not covered. Is it possible to fix it?\n/cc @markelog \np.s. note that we have a non-verbal rule about presets in core: they should be used by a lot of people. I hope we'll find these guys ;-)\n. @SimenB Or renamed to firefox/something-else?\n. @markelog :+1: okey ;-)\n. @rwjblue https://github.com/jquery/esprima/issues/1099 \u2014 There is a roadmap for es6-features. I believe better to make all we need right in esprima core (to not repeat ourselves). :smirk_cat: \n. @rwjblue Well, if we should write something \u2014 better to write in upstream IMO.\nBut if it blocking something \u2014 it's another case and we should make something with our fork.\n\nAlso, is there an issue in JSCS-land for tracking the move\n\nNot sure but we talking about it too often in past weeks. \n. :-1: for this because it can be solved via plugins easily.\nBut :+1: for make it as easy as possible (e.g. npm i jscs-jsx).\n. Thanks for suggestion. But it looks like a dup.\nRelated: #425 #962\nPlanned on 2.0\n. @joeybaker Np :smirk_cat: \n. These are destructors in Modules Imports and Consts. Probably this rule can be more common.\n. Oh, nice one!\n. Not sure why you shouldn't ;-)\n. Do we need an opposite?\n. @stefanosala Thanks for you work here ;-)\n. Oh, right. :+1: \nThanks, @hzoo \n. I've left 2 more non-critical notes. LGTM, thanks!\n. @stefanosala Thanks! LGTM\n. :smirk_cat: \n. Thanks!\n. :+1: Agree.\nAlso would be nice to have a label to mark candidates for 2.0 before meeting.\n. @hzoo No, we still don't have roadmap ;-)\n. @mrjoelkemp :+1: \n. @astorije I've restarted appveyor.\n2secs is not enough for tests?\n. Yup, unfortunately it happens too often with appveyor. ;-(\n. @markelog @mikesherov Guys, we need you here\n. @markelog :+1: \n. Idea. Use jscsConfig param in package.json file: http://jscs.info/overview.html#-config-c-\n. /cc @mrjoelkemp @markelog @mikesherov @mdevils Folks, please take a look\n. @markelog I'm not sure how we'll resolve this to new format ;-\\\n. @markelog I mean just suboptions for rules. Should we allow false for them?\n. @adrianheine Well, looks like we should drop that assert and allow false value (at least for overloading, and also more intuitive).\n. @adrianheine Just interesting: why not --auto-configure? http://jscs.info/overview.html#-auto-configure-\n. \"grandpa\" :smirk_cat: \n:+1: \n. Thanks for a report\n. Name suggestion: requireArrowFunctions?\n. /cc @markelog \n. Okey! ;-)\n. @markelog :+1: for jsx as a plugin for esprima ast. And I'm not sure we need this when we'll support esprima 2.x. Since there I'm not against using it for another library. But it's a revolution, and need to hear @mikesherov about it.\n. @jdat82 Is it was an empty file?\n. @hzoo Yeah, for sure. No reason to report empty files.\n. @hzoo Well, I'm not sure we should check them at all. Not just in this rule.\n@mrjoelkemp @markelog @mikesherov Guys what you think if we disable checking of empty files?\n. Definitely! :smirk_cat: \n. Looks good\n. Promise * Error[] is not valid jsdoc afaik. \nhttps://github.com/jsdoc3/jsdoc/issues/509\n. @markelog Yep, there is no standard. If we parsing it \u2014 we can stick to something parsable.\nTell me what it means and I tell you if it doesn`t correct.\nPersonally, I don't see why * (star) should be a sign to use for promises when Google Closer and jsdoc3 standard uses <...> for that.\nPromise is an Object that contains Result or Reject reason, several callbacks and internal state. So why we can't use a standard: Promise.<?Result, ?Reject>?\n. @mrjoelkemp Yep. Just there is a standard for any generic objects like Array.<Object.<String, function(Array.<String>)>> driven by Google Closure and integrated to jsdoc toolkit 3. But there is no something specific for Promises right now.\nbtw, I'm using online tool that parses jsdoc: http://kuniwak.github.io/jsdoctypeparser/ and since 1.2.0 it uses PEG, but * is still unknown thing. We can shut this exception in our jsdoc plugin, but still it's invalid (or unknown).\n. I'd say {Promise * Error[]} should be a {Promise.<Error[]>} for a while.\nupd: https://github.com/Kuniwak/jsdoctypeparser/issues/7 \u2014 about {Promise*Something}\n. Mmm?\n. > since we would document it on the site and could use them in the presets.\nMmm, but we can document them without inclusion into jscs dist, no?\nI'm just trying to find a way to write other plugins with documenting at jscs.info.\n. I'd say, if we want to show docs on jscs.info and/or build dist with it we should be sure in\n- rules inside plugin are the first class rules (there are some dirty things that couldn't be done without changes in jscs core. e.g. jscs-dev/jscs-jsdoc#61);\n- docs formatted as well as in core;\n- the same support as in core.\nE.g. atm it's not easy to use plugins for projects via samba/afp. IDE plugins looking for a global jscs and failing on searching project plugins. And also it's hard to use different versions of jscs for different projects. Etc.\nSo I'm not sure that I've completely got what you suggesting to do.\n. About formatting docs: we just need a convention for that.\n\nDo we intend on keeping the jsDoc key as part of the configuration or flattening it to the main jscsrc level with this integration?\n\n@mrjoelkemp Better to have namespaces for them because rule names can conflict. But I'm still waiting for new config format, and hope that it will reduce the count of possible (wrong) ways.\n. @markelog #1358 is landed, no more need to disable jsdoc checks.\n. /cc @markelog @mrjoelkemp \n. @hzoo It's 2sec timeout on some test while running instucted code. We need to fix it ;-(\n. > Coverage decreased (-0.06%) to 99.23%\nI'm aware of this. ;-(\n. @hzoo Np, let's just left an issue for that.\nupd: #1377\n. @hzoo Np, let's just left an issue for that.\nupd: #1377\n. \nI feel that error is everywhere.\n. /cc @mikesherov \n. @mikesherov It's about validateIndentation, but ... I can't repeat it.\n. @aliosv Looks like solution ;-)\n. Run grep \"\\015\" file to see what lines with CR (\\r)\nAnd tr -d \"015\" < file to remove \\r\n. @markelog If file is specified in .someignore it should be ignored even if specified as argument. Right? Our excludeFiles doesn't skip files if you pass them directly as arguments.\nThere is an issue about that #1159\n. Just thought: why not to check this automatically with our custom rules for jscs?\n. @hzoo I mean to make an internal plugin or just a set of rules to check the subject of the issue.\n. Yeah, looks good to me.\n. @clayreimann :+1: would be nice, thanks!\n. Looks like { value: \\d+ } or something\n. @clayreimann It's just about naming, all the rest is what you described above.\n. Agreed, good to me! :+1: \n. @mikesherov What you think about trying to move out validateIndentation core to separate module or bunch of them?\nIt looks like a huge code base already that needs a lot of tests. Also it'd be nice to have some abstraction layer between AST and rule itself. I believe we can drastically reduce amount or errors with that.\n. Did you tried to make a new commit? Like git ci --amend; git push -f\n. Looks good at all ;-)\n. Yeah, but we still using 1.x branch ;-( Upgrade were planned.\n. @jakezatecky Thanks! Good luck with that ;-)\n. Hm. Why it doesn't catched by https://github.com/jscs-dev/node-jscs/blob/master/lib/string-checker.js#L134-L142 ?\n. @hzoo lol ;-) Right!\n@kover Please, provide your config and used version or jscs.\np.s. or just value for requirePaddingNewlinesBeforeLineComments or preset\n. LGTM (except one nit in doc)\n. Even if TS parser will return the same AST as we await for usual JS, it can require additional rules for type checking. Not sure it's possible to parse it right in JSCS, but I see it can be easily made with some plugin. ;-) Just an idea.\n. @mrjoelkemp If we gonna to make a separate src/ folder to store es2015fied files we could avoid merge conflicts. Isn't it?\n. @mrjoelkemp Ah, that way. Sure, you're right.\n. > Folks that install via a git url will have a sad time since the transpiled assets wouldn't exist. We could likely put a post-install script in place to fix that.\nIs there a way to run post-install only for git installation? If we will precompile releases...\n. Wow, great!\n. :+1: \n. /cc @mikesherov \n. :+1: \n. We've discussed that in #1031\nI'm strongly agree that <=, >=, etc should be enabled by default, but we need an agreement of all to change this.\n@jscs-dev/jscs-maintainer Can we rethink that?\n. Wow, sorry. Shouldn't!\n5 \u0438\u044e\u043b\u044f 2015 \u0433. 21:56 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Oleg Gaidarenko notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b:\n\n\nI'm strongly agree that <=, >=, etc should be enabled by default\n\nSo, you against these changes?\n\u2014\nReply to this email directly or view it on GitHub.\n. @jamestalmage Actually, when you nullify rule in your config it won't load nor execute these (nullified) rules at all.\n\nIf you want to test it:\n``` js\nvar opts = {a: null}\nif (opts.a != null) {\n  assert(opts.a === true);\n}\n```\nupd: load \u2192 create object and configure, execute \u2192 check.\n. @jamestalmage It looks like a bug ;-\\ But you can nullify the whole rule:\n{\n  \"disallowSpacesInFunctionExpression\": null\n}\n@mrjoelkemp What we decided about rule's properties? upd: Should it be rewritten with allExcept?\n. :+1: \n. Oh, thanks for that. But, hmmm... ;-) it's dirty! Do we really want to load the only rule and copy-paste docs like that?\nWhat I really want here:\n- change file structure a little to have splitted docs and code (also tests maybe?);\n- have the same (or very similar) structure in all plugins (to use them in our build-scripts).\nFile structure could be then like:\nsh\nrules/\n  rule1/\n    index.js\n    index.md\n  rule2.js # with current structure\nAnd we could load them as we do it now but *.md files would be easier to load to build and also they will be highlighted, we could check them separately, etc.\nAnd with that structure we have to build as many plugins as we need.\nI'm not sure also that we should register jsDoc as a single rule. I would like to see it like in eslint plugins: jsdoc/rule1. But this issue is like so very complicated to solve that nobody want to open that pandora box. :smirk_cat:\nBtw. Why you stick to 1.0.0?\nLooks nice at all. If everybody fine with that method \u2014 ok.\n. > Because if you release new version, you might change documentation, but this dup will not change :-(\nBut the last version is 1.1.0\n\nWould you like to open that? Would be really cool, if you did.\n\nWould be cool if anyone will do it ;-) Let's listen to guys and @mdevils to decide what to do here.\np.s. I fear this react and webpack used in our site ;-(\n. @markelog Nice joke ;-D\n. I think we should move out jsdoc rule from default rules and add it with some other way.\nAlso what you thinking about rewriting default rules instead of throwing an errors? Atm we can't use another version of jsDoc rule. Would be nice to use rule from plugin instead of bundled one if we want it (e.g. via \"plugins\": [\"jsdoc\"]).\n. Need one more review here.\n. Since there is no sense to have disallowSortedObjectKeys. Maybe we can rename this rule to validateOrderInObjectKeys or something?\n. We should go for manual tree-walk with https://www.npmjs.com/package/ignore \u2014 the most compatible library for gitignore format. IMHO.\n. Are you sure about ...?? Looks like you need to use ...*.\n. I've left an issue in jsdoctypeparser, hope to find some time in a week or two.\n. Okay, my turn now ;-)\n. Thanks for report, it's not really for jscs, but for jscs-jsdoc. Going to fix that. ;-)\n. @markelog Yeah, sure. Will try to work on #1531\n. > but the error message is concerning. It should have produced a style error, not a runtime error.\n@mrjoelkemp @hzoo Let's reopen this then?\n. I bet it's because of babel-* packages have a lot of dependencies.\n. I don't see the bug with correct jsdoc format:\n```\n            /\n             * Here is the demonstration that JSCS don't find the @private annotation\n             \n             * @private\n             /\n            function _jscsFailsHereWithJsDocRule()\n            {\n                _jscsWillFailEvenWithAccessAnnotation();\n            }\n        /**\n         * Here is the demonstration that JSCS don't find the @access annotation no more\n         *\n         * @access private\n         */\n        function _jscsWillFailEvenWithAccessAnnotation()\n        {\n            $log.debug('JSCS will report innapropriate error here');\n        }\n\n```\nI think we should skip checking if there are no correctly formatted jsdoc comment block. Right?\n. Why it not support comments if there is .jscsrc extension? Hum...\n. Yeah, It's an old bug. I've made some fix, added some with additional tests, but not sure if it right. ;-\\\n. /cc @mrjoelkemp @Famlam \n. Would be nice to have another review.\n. :+1: \n. /cc @markelog \n. requireTemplateStrings: except string concat is good for me\n:+1: \n. > How do we feel about template string concatenation?\nSeems legit\n. Looks good ;-) Nicely done, @michelle \n:+1: \n. :+1:\nupd: Just not sure about patch version.\n. Guess we need to update tests for the preset also: https://github.com/jscs-dev/node-jscs/blob/master/test/data/options/preset/wikimedia.js#L19\n. I think statements are better here than lines of code, but guess entities (or something similar and abstract) are better.\n. If we also counter multilines inside multiline comment blocks then it could be just minLines (without OfCode). Good naming is always a hard part ;-)\n. elements?\n. :+1: Thanks!\n. /cc @markelog \n. I've started using babel and this is my :+1: for this. We should keep going ;-)\n. Would be nice to start it on Heroku, it support java 8, but it's not so easy to make daily cron runs there, even with https://addons.heroku.com/temporize\nFeels like it needs some help to make it work. I'm not familiar with Scala ;-( Guess it's much easier to run on some VM.\n. I've did a try and got this error:\n2015-08-08 17:29:10,653 [ERROR] com.jcabi.aspects.aj.MethodValidator - JSR-303 validator failed to initialize: Unable to create a Configuration, because no Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath. (see http://aspects.jcabi.com/jsr-303.html)\nWhat I did:\n- made a heroku app with stub java app (it let's me to use java 8)\n- added github user credentials to env\n- downloaded and pushed no-carrier.jar to the heroku git repo\n- made a simple script to run java -jar no-carrier.jar jscs-dev/node-jscs \"awaiting reply\" 14 under the ./cron.daily.sh\n- ran heroku run ./cron.daily.sh\n. Great! It means that it works with free Heroku app ;-) Should I write a recipe?\n. @cvrebert https://github.com/twbs/no-carrier/wiki Hope I didn't failed there ;-)\n. allExcept: topmost?\n. Something tells me that we can't nullify it now, but we can override them. What about passing empty arrays to \"nullify\"? Anyway, these are not rules, so it's fine.\nLooks good.\n. I think this is a problem that should be solved. I thought about using multiple tag sets.\n@markelog What you think about it? Should we add jsdoc3 tag set to google preset?\nRef: jscs-dev/jscs-jsdoc#69\n. Looks like. I just wondered why there is no test for this ;-\\\n. Perhaps I know what's the problem.\nWhat if:\njs\nimport * as configFile from 'jscs/lib/cli-config';\n?\n. Is Infinity supported by JSON?\n. Need one more review ;-) Rework and allButReserved deprecation included.\n/cc @markelog\n. Thanks for report.\nGuess we can make a hotfix. I'm just afraid of checking this inlined tags. Not sure we can do it well atm. ;-(\n. :+1: from me.\n@markelog #Default block looks like inconsistency ;-( What you think?\n. :+1: \n. @markelog npm i resolve --save ?\n. Thanks ;-)\n:+1: \n. I'm usually using jshint for these checks. Seems like you too. Is there some troubles with that?\n. Just set it to null instead of false.\nhttp://jscs.info/overview.html\n\nYou can specifically disable any preset rule by creating a .jscsrc config file and assigning it to null, like so:\n\nWould be great if you know how to improve docs ;-)\n. Can you elaborate? ;-) You don't want to have this hyphen if it ends with a newline?\n. Yep, unfortunately. I've missed this issue. Will fix it in a week or so.\n. Please, take a look.\n/cc @markelog \n. Looks good. The first rule without boolean value? ;-)\n. Looks good. ;-)\n. @MikeMcElroy Thanks for contribution!\nLGTM\n. LGTM then ;-) Need to watch iojs.\n. It looks like new rule value for disallowEmptyBlocks.\nallExcept: ['single-comment'] ?\n. Yeah. Not sure about plural, but yeah ;-)\n. Now we have esnext: true for all tests. But guess it's fine. LGTM.\n. The only idea I have is using matrix: http://docs.travis-ci.com/user/customizing-the-build/#Build-Matrix\n@hzoo Do we have an issue for speeding up tests?\n. I'm just looking at changelog. Not sure that we need so detailed list of tags. Breaking can be a flag, like: Fix: BREAKING etc.\nDocs: Documentation only changes\nFeat: A new feature\nFix: A bug fix\nChore: Changes to the build process or auxiliary tools and libraries such as documentation generation\nPreset\nNew Rule\nUpdate Rule\nPerf\nCleanup | Refactor\nMisc \u2190 Test, Config, Internal, Security\nChore \u2190 Dependency | Package | Upgrade, ?\n. Guess we could disable this rule on windows if it requires LF and git has crlf=auto. Or check it as CRLF. Just it.\nUpd: we can mirror git's autocrlf flag into this rule. ;-D\n. It's here: https://github.com/jscs-dev/node-jscs/blob/master/lib/errors.js#L250\nWould be nice to see something that helps to repeat this.\n. hashbang? eol at eof? You can try to add console.log(i, line) before errors.add in node-jscs/lib/rules/disallow-tabs.js. If line is not empty \u2014 dump lines in explainError here: https://github.com/jscs-dev/node-jscs/blob/master/lib/errors.js#L177\n. @ronkorving Yeah, jsDoc scope is all about plugin. I'll try to take a look asap.\nAtm I can propose you only monkey patching or disabling plugin at all to decrease noise ;-(\n. @irengrig I need some additional info. Can't repeat with jscs --preset .\\path (it works as expected). What hangs you see?\n. Am I right that you suggest to strip html before checking?\n. @ficristo Thank you! \ud83d\ude38 \n. Can you provide a code sample? https://github.com/jscs-dev/jscs-jsdoc/blob/master/lib/tags/jsdoc3.json#L26\nYou can try to use \"checkAnnotations\": { \"preset\": \"jsdoc3\", \"extra\": { \"example\": true } }\n. @params quantity should equal to function arity. You should drop redundant lines and all should be fine.\nAnd also put a space after param name instead of comma.\nIf you have another questions \u2014 feel free to ask. Thank you!\n. You can but mark it optional. Via {?type} or [var].\nBetter to not describe what variables you use inside doc block because in the most cases jsdoc is for public API. Better use inline comments inside the function. Or one line jsdoc blocks inside.\n. If you still want to check this file, I'd rename it (or just ignore), but copy to file.tmpl.js with e.g. empty blocks (as you do it in real life) before checking, and rm after.\nBut better to change syntax to replace multiline comment blocks like /* @@code */.\nUPD: ah, you already did that! Good job ;-)\n. Yeah, repeating with:\njs\n/** @param {Array} arr - source list */\nvar q = arr => arr.map(notArr => 1);\n. It can be other way around, but in that way it'll take more time. Isn't it a wasting?\n. :+1: \n. Thanks for report!\n. @kepta It's a rule requireDescriptionCompleteSentence\nhttps://github.com/jscs-dev/jscs-jsdoc/issues?utf8=\u2713&q=is%3Aissue+requireDescriptionCompleteSentence\nThe problem here that this rule based on regular expressions. I know this is not the best thing here but don't see any better solution atm.\nWould be great if you'll tackle this. I'm even agree if you'll find some good library for that. I'm really confused atm how this rule should work internally.\n. Btw, we have another rules that close to this problem:\n- http://jscs.info/rule/requireCapitalizedComments\n- https://github.com/jscs-dev/jscs-spellcheck\nProbably we just should move out this rule to separate package with independent release cycle and spec.\n. Guess this doc block incorrectly bound to the followed module.exports = function.\nWould be nice to have some minimal code after this jsdoc block to repeat. Please?\n. Thanks!\n. @markelog @hzoo Fixed ;-) somehow.\n. Huh, we definitely missing tests for jsdoc... ;-(\n. Guess, yes. I'll try to look at it tomorrow.\n. First of all, you've made a great start and thank you for contribution!\n\nWould like to see some more test coverage for edge cases in the ignore files.\n\nWould be great to have specs in GitKeeper module ;-) We don't need to test it here again.\nWould you mind to make it there?\n\nHow does this get exposed through the jscs CLI?\n\nGood catch. I don't get it atm. Don't even mind how it could be.\nI'd say, on this basis we could FINALLY finish epic #73 ;-)\n. LGTM\n. This is enough:\n\"devDependencies\": {\n  ...\n  \"jscs\": \"jscs-dev/node-jscs\",\n  ...\n}\n. We gonna publish 3.0.4 in a few days with a fix (we hope). Can you please try master branch?\n. It points to the space at the moment \ud83d\ude3a. And definitely looks like a bug.\n. Thank you for the report.\n. Need to check this with the latest patched cst version. There are huge chance this is fixed.\n. @mdevils Is this issue about CST?\n. Travis disagree with joining \ud83d\ude08 \n. Guess we can move _prepareMessage call from https://github.com/jscs-dev/node-jscs/blob/master/lib/errors.js#L86 to https://github.com/jscs-dev/node-jscs/blob/master/lib/errors.js#L211\nNeed to try to not break something else.\n. I've made an issue about this: https://github.com/cst/cst/issues/112\n. @srh-work Btw, why you using:\njs\nclass NotFound extends Component {\n    render = () => {};\n}\ninstead of just\njs\nclass NotFound extends Component {\n    render() {}\n}\n?\n. Hello.\nAccording to https://github.com/airbnb/javascript#arrays--callback-return it should looks like these:\n``` js\n// good\n[1, 2, 3].map(x => x + 1);\n// good\nconst flat = {};\n[[0, 1], [2, 3], [4, 5]].reduce((memo, item, index) => {\n  const flatten = memo.concat(item);\n  flat[index] = flatten;\n  return flatten;\n});\n```\nIt looks like a bug tho since requireTrailingComma should not require it for inlined arrays.\n/cc @markelog @hzoo \nThoughts?\n. @avighier Can you please provide information about your xxx.js?\n. Thank you ;-)\n. need tests for it\n. something wrong with indent\n. need revert\n. done.\n. Need a little fix and all be fine. visionmedia/commander.js#207 I'm on it.\n. Should we replace carets with tildas?\n. type: 'fake' :-) agreed with fake token, but probably we should be more concrete on this.\n. @mikesherov What did you mean about filing an issue? To create an issue for 2.0 milestone and link code to it?\n@markelog I can put deprecation as an error. We don't have warnings now, right?\n. Yeah, my bad.\n. Well, okay ;-)\n. @markelog actually, I'm confused. There is no errors. So how to put deprecation?\nSorry for stupid questions.\n. @markelog Like that?\n. Well. It's hard to say. Do we have another rule with value: true? Just if we defining this rule with an object it's means value: true by self. Isn't it?\n. Well, let's do this.\n. Added check into assertion in configure method. Added to docs as required. Fixed tests.\n. Oh, because it's declared as optional in jsdoc. Probably it isn't right.\n. It throws an error without this ;-)\nupd: Is lineNumber property a default one? Looks like yes. But non-standard\n. If you'll look at https://github.com/zxqfox/node-jscs/blob/hotfix/prevent-crashes-in-error-reporters/lib/string-checker.js#L89-L103 you'll see a catching parse error and puting err.lineNumber to errors.add. So if lineNumber is empty it will throw.\n. Probably we can allow calling with undefineds, but deny with strings/arrays/etc. I think it would be much better.\n. Sure, but I don't know where to place it. In string-checkers?\nAlso test will look like:\n``` js\n        function makeThrowingEsprima(description, line, column) {\n            return {\n                parse: function() {\n                    var error = new Error(description);\n                    error.lineNumber = line;\n                    error.column = column;\n                    throw error;\n                }\n            };\n        };\n    it('should throw an error on errors.add', function() {\n        checker = new Checker({ esprima: makeThrowingEsprima('object') });\n        checker.registerDefaultRules();\n\n        var errors = checker.checkString('import { foo } from \"bar\";');\n        var error = errors.getErrorList()[0];\n\n        // check error...\n    });\n\n```\nRight?\n. Right... So, we can decide to check line and column to be undefined or more than zero?\n(line === undefined || typeof line === 'number' && line > 0); // like that?\n. Sure I'll change message.\nIt was a useful proposal with minimal functionality.\n. > Is 0 a valid line number? I doubt it.\nWell, I thought some functionality throws errors without valid line numbers. We can left undefined values allowed for that.\n\nAnd I guess you should specify a column as well?\n\nColumn is optional atm so I would like to know why. I should fix that if it does only because of duck typing.\n. > I mean 1 is the first line number. 0 looks invalid.\nYup. But what to use by default? Can it be used without line number?\n. > Column is not optional\nThanks for clarification. I'll put it in comment.\n. > We are talking about the test, right? For the test use can use 1.\nAh. Yes, sure. And also I'll set column to 0. Do we need to allow undefined for line and column values? If we do then I'll just drop that.\n. @mdevils I strongly agree with you. There is one rule with skipped column. I've fixed it.\nHere it is: https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-mixed-spaces-and-tabs.js#L54\n. Default column is 0. It doesn't mean but still...\n. Did you mean Invalid as Legacy or Deprecated?\nI think we should think twice about format changing info.\nLet's say:\njs\n{ // legacy\n  \"requireSpaceBeforeCurlyBrace\": true,\n  // actual\n  \"requireSpaceBeforeParentheses\": { onlyTomorrow: true },\n  // later\n  \"parentheses\": {\n    \"space-before\": \"require\"\n  }\n}\nDoes this method would return only new name or also a replacement?\n. Do we really need this check?\nbtw. We should begin preparing splitting options and rules I think. According to pleasurable config format. :-)\n. Well, yes. Idk why I did it like that. Gonna fix that.\n. @mrjoelkemp fixed, thanks!\n. Yup. But how? https://github.com/mrjoelkemp/node-jscs/blob/error_filter/lib/string-checker.js#L107\n. mocha allows you to filter tests: mocha debug -b -g 'require-capitalized-comments'\n. Tabs? I think it should be changed to 4 spaces each.\n. maybe if ( === ) return;? diff will be much simpler\n. @mikesherov I think we should left !els because it can be null according to Parser API docs.\nAnd yes, I'll remove !els.length\n. Yeah, I've wrote almost the same part of code. But it will produce more errors. Gonna fix tests.\n. Oh. Shame on me.\nSo. Something like \"...for specified paths declared with glob patterns.\" ?\n. \"Disables style checking for specified paths declared with glob patterns.\"\n. Updated, thanks!\n. I'm not sure with this assertion. Do we really need it?\n. Upsie. Thanks.\n. I'm not sure that I'm clearly understand you here ;-)\n. Well, you're right. I'll update specs and will fix regex.\n. Valid:\n- snake_a\n- snake_a\n- snake_a\n- camelA_camelB\n- camelA_camelB_camelC\nInvalid:\n- camelA\n- camelA\nRight? Something else?\n. Okay, changed.\n. The link should be like:\nmd\n[https://github.com/mrdoob/three.js/wiki/Mr.doob's-Code-Style\u2122](https://github.com/mrdoob/three.js/wiki/Mr.doob's-Code-Style%E2%84%A2)\nBecause \u2122 was converted to %% and it looks weird\n. private: true ?\n. Parser API said: consequent should exists and be an Array in any cases. So no need to check it.\nSo it's not a problem about missing tests. It's about impossibility to test these cases.\n. Here I can't image a situation where nextToken for Keyword wouldn't exist. Probably I'm wrong.\n. Same as above. Need help with case.\n. I'm not sure we should move this section to overview.\n. License section missed?\n. Yeah, I mean something like \"JSCS is distributed under MIT License, see LICENSE file\" etc.\nAlmost each repo has it. Nvm\n. Probably it's overkill. We usually describe a value if rule has many.\n. @markelog Did you decided something about these assertions?\n. @hpshelton No no. Not an example. Just a \"for mode true\" substring.\n. Nice catch & thanks for contributing!\nProbably better to use here new assertions. Something like:\n```\nvar openingBrace = file.getFirstNodeToken(node);\nvar prevToken = file.getPrevToken(openingBrace);\nif (!prevToken) {\n  return;\n}\nerrors.assert.sameLine...\n``\n. Space missed?\n. Is it fine if we checking it in methods? We can call here_buildCommentIndex` and move check there. Also we can build that index every time just after token index building.\nDo we need that index at all?\n. id?\n\"Requires each element in array on a new line when size is more than passed number.\"\n\"Requires each element in array on a single line when length is bigger than maximum.\"\nhm?\n. I want this as rule! ;-D\n. I'm not sure, but feels like it should be double-slash b (\"\\\\b(...)\\\\b\") and in double-quotes ('cause of JSON). Right?\n. Suggest switch-case here:\njs\nswitch (true) {\n  case disallowKeywordsInComments === true:\n  ...\n  default:\n    assert(false, ...\n}\n. mmm... maybe:\njs\npattern = suppliedPattern || ('\\\\b(' + keywords.join('|') + ')\\\\b');\n. +1 for allExpect.\nIt's not clear to declare exceptions immediately after rule. That will look like \"...require capitalized constructors. which ones? these... A B C\" \u2014 definitely the opposite sense.\nGood job at all. Thanks for contributing!\n. You using here punctuatorToken = getPrevToken and later nextToken: file.getNextToken(punctuatorToken).\nSo file.getFirstNodeToken is already a nextToken for punctuatorToken.\nYou can get rid of unnecessary getNetToken call by storing firstNodeToken into variable.\n. What if there is a block comment between these tokens?\n. I think this line should be moved to install section (because it's about installation ;-)\n. --auto-config or --auto-generate?\n. It weights much more, even if https://www.npmjs.com/package/lodash.assign. But probably yes.\n. I think we should allow custom presets somehow. It will be useful feature if we allow to reconfigure already existed .jscsrc according to new code if rules were not specified in .jscsrc but were in preset. Something like auto-nullifier?\n. > You mean from the plugin?\nYup. I'm not sure if we can look into node_modules or .env.NODE_PATH for plugins (how to differentiate them from others, by jscs- prefix?), but it would be great if we could load .jscsrc and read plugins or preset options, or just provide --plugins option to cli to set them explicitly.\nAnother idea is to have ~/.jscsrc file and use it as default (with plugins, presets, etc.).\n. :+1: \n. @hzoo I've thought about it, but better no ;-) We did this: getCommentAfterToken \u2014 helpers to get all comments before and after token.\n\u2192 #987\n. {?Object} ?\n. @mikesherov Absolutely valid. http://usejsdoc.org/tags-type.html It's called nullable type.\np.s. Some older versions of jsdoc parsers doesn't understand {a|b} without parens ;-)\n. If you look at this module code: https://github.com/dfilatov/vow-node/blob/master/lib/vow-node.js there are just 2 functions. It's a kind of micromodule as well as lodash.assign.\nI'm not against it as soon as we accept lodash.assign. ;-)\n. I have a suggestion. Can we use jscs-jsdoc plugin a little bit later and fix all docs?\nSure it would be great if these new functions will have some description to ~~decrease~~ increase well known bus factor.\n. Windows maybe? Not sure.\n. Symlink?\n. Not gap - 1 lines?\n. It's not a real amount of lines between. It's more like difference between line numbers. Not sure how to name that properly. Gap?\nupd line breaks between tokens?\n. Should we?\n. VariableDeclarator nodes uses id property, Property uses key, AssignmentExpression uses left.\nAbsolutely not clear why we use here only id to check. ;-( Oh. there is negate!\nCan we use this structure?\n```\n// skip because...\nif (parentNode.type.match...) {\n  return;\n}\n// skip because\nif (node.id === null) {\n  return;\n}\n// ... the rest part of code\n``\n. I'm afraid that it won't work on windows. I'd suggest here to use{ \"preset\": \"jscs\" }. ;-)\n. Yep.Property?\n. I really like that idea but realization can be painful. Anyway, we can discuss about it and decide in that issue ;-) So, yep!\n. I'd add a test for that then. ;-)\n. Ye. https://github.com/jscs-dev/node-jscs/blob/master/test/rules/require-newline-before-block-statements.js#L30 \nYou're right. ;-) Nothing to do already. :+1: \n. Probably it's groundlessly slow because we can store_nextTokenIndexvalue on building index.getNext/PrevTokenmethods are very popular\n. Should we use hereresult.push+result.join('')for speed?\n. @mikesherov At least we can run tests before and after that PR.\nI know there are a couple of additional tests but...\nExecutingtime mochainmaster`:\nreal    0m13.345s\nuser    0m12.157s\nsys     0m0.304s\nAnd in mdevils.autofixing-token-data:\nreal    0m21.480s\nuser    0m19.745s\nsys     0m0.528s\nIt's like 1.5x slower ;-(\n. Once, but... Oh. I can't repeat that. Sorry.\n. > are not rigorous done by a perf testing framework, which exist and we should integrate\nLooking into v8.log, what you suggest as perf testing framework?\n. @markelog Do you remember what we decided about double assertions in configure?\n. I'm not sure about atMost, atLeast, and exactly (cc @mdevils), but if it's ok \u2014 can we make a switch-case here?\nLike:\njs\nswtich (true) {\n  case !!exactly:\n    error = 'exactly' + exactly;\n    break;\n  case !atMost:\n    error = 'at least ' + atLeast;\n    break;\n  case !atLeast:\n    error = 'at most ' + atMost;\n    break;\n  default:\n    error = 'more than ' + atLeast + ' and less than ' + atMost;\n    break;\n}\n. Just asking. I'm not sure that we have a strong decision about that ;-) Half of rules has double check, and the rest just value === true or something. Anyway, it's not a blocker.\n. Definitely. Just both assertions will throw if value !== true, and it's only possible value for rule. And also option requires boolean value can mislead. So why we need to assert twice? ;-) That's why we started that discussion earlier.\n. Oh, right, conditions should be different. Probably it's not ideal but it allows you to make a flat human readable tree of conditions and will report an error just one for one free lines block. So it's a nice option imo ;-)\nAnyway, this change affects assertion API and better to wait @mdevils with his minds about autoformatter.\n. Thanks ;-) fixed.\n. Nope, but it's easy to make ;-) https://github.com/jscs-dev/jscs-jsdoc/issues/85\n. I'm not sure but looks like mocha has built-in promise support.\n. :+1: \n. ~~Mistype?~~ Oh!\n. Maybe to check all items with options.allExcept.some(function(el) { return typeof el !== 'string'; })? It returns true if at least one element is not a string\n. yea, every would be better ;-)\n. custom configs \u2192 config, exit \u2192 exit with error status?\n. Shouldn't we just exit(0) on program.ignoreMissingConfig without a config? Like...\njs\nif (program.ignoreMissingConfig) {\n  defer.resolve();\n  return returnArgs;\n}\n. Yeah, you're right. Thin difference.\n. /cc @mikesherov @mrjoelkemp \n. Does this spaces number mean something?\n. If you returning in if, why to use else?\n. Is it right that we fixing code in assert methods?\n. What is the case to render/parse multiple time?\n. But... I believe that we shouldn't allow checking with conflicting rules like requireSomething and disallowSomething at once. And at that POV this line looks like overkill.\n. Incorrect structure are hard to parse ;-) Use of return makes an usual if-else harder to read. That's why I've asked ;-)\n. Yeah, +1 @mdevils, +1 @mikesherov for only if fixing is on.\n. Feels like we need some specs for this ;-) for objective discussing and to get rid of \"might\".\n. Oh, right. Thanks. But should we really reparse? Probably there is a way to just recheck fixed tree. It's much harder, yes. Ok, nvm ;-(\n. Can you add some tests with comments? Like:\njs\nvar X =  /** @lends X */  {  /** @type {String} */  name: \"some\" };\n       ^^               ^^ ^^                     ^^\n. I'm not sure but getTokens returns token list without comments and tests suggested by me will fail.\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/js-file.js#L492\nI suggest to use here\njs\nvar token = ...getFirstNodeTokenSomehow(...);\nwhile (token = file.getNextToken(token, {includeComments: true}) {\n  // ...\nor something similar to iterate through tokens and comments.\n. @mikesherov @mdevils What you think about integrating this into JSFile.interateTokens* methods?\n. I think this case should be an exception. Maybe we can make an option?\nvar CONST1 = \"one\"; // makes me sad\nvar C2 = \"1\";       // makes me happy\n. Agreed totally.\n. This is very close with ~~https://github.com/jscs-dev/node-jscs/pull/1023/files#diff-526f88acb4a66447fc67eaf20ca6acadR104~~ Oops, that's about lines.\nWe need to decide what naming we should use.\n/cc @markelog @mdevils @mikesherov \n. Nope. https://github.com/jsdoc3/jsdoc/issues/509\nThe most logical for me is to use something like {Promise.<Error[]>} or {Promise}.\nupd But I don't think it's time to document promises ;-) There is no standard.\n. Btw you can look at https://developers.google.com/closure/compiler/docs/js-for-compiler there are a lot of different examples for many cases.\n. atMost option is quietly fine if method will be about spaces (if we decide to use atMost for lines). I just wanted some consistency in options naming.\n. Good idea ;-)\n. I think /\\r\\n?|\\n/ is enough. What is \\n\\r?\n. @aik099 Line end is a \\r (mac) or \\n (unix) or \\r\\n (win). We can tune for gracefully parse mixes of them, but it really can be substituted with /\\r\\n?|\\n/. Right?\n. For me the last case is \"1 line between\" or \"2 line breaks between\" or \"2 new lines between\" or \"difference of 2 lines\".\nActually, I'm agree that linesBetween is more correct here if we apply -1.\nThis discuss about 0-based and 1-based numberings. I'd say that 0-based for measurement, while 1-based is for counting. So we should decide what we need here more. If we need to count lines between 2 other lines \u2014 we should use 1-based numbering.\n\u00a9 Your Captain Obvious ;-)\n. Personally I prefer counting (because I'm a human) so \"linesBetween\": 1 is preferable for the last case.\nupd I'm not against \"newLinesBetween\": 2 as a compromise. Just because we decided to use newLines some time ago and newLineCharactersBetween is the same for me.\n. Btw, drop the first assertion if you can ;-) It's ok if not. I'll do it at weekend for all rules.\n. I think it's a special case we shouldn't check here. Probably sameLine: true would be more informative. Or just a separate method to check that. Or rename of linesBetween to newLinesBetween ;-(\n. Yeah. _tree.tokens.concat(_tree.comments) ordered differently than _tokens.\n. :+1: \n. As I see it comes from esprima code base so the only thing we can do is redefining.\nupd https://github.com/jquery/esprima/blob/master/esprima.js#L446\nBut it can broke plugins so we can left an issue about it until 2.0. Or we can return fixed comment type names for getTokens only since nobody uses comment tokens from getTokens.\n. Actually, we don't need to. It's not a part of Parser API because comments doesn't affect code execution and they are just skipped on parsing for execution. Since we merging comment tokens into code AST we already using a superset of Parser API and Line and Block node/token types are confusing. I suggest to fix that and to describe it in JSFile docs.\n. Are we fine with this name? ;-) newLine? firstLineBreak?\n. :+1: \n. Non-blocker: empty line before } else if { ?\n. There are #698 and #136 (probably something else) where we can change the default value. And also #1064 could help us to know what default value should be for each rule. ;-)\n. But here you need double quotes ;-)\n. Are you against single line object declaration? ;-)\n. I hope each VariableDeclaration node has parentNode property :smiley_cat: \n. No, no reason. If node.parentNode.type is empty \u2014 block will be skipped, if it contains wrong value \u2014 it will be also skipped, all is fine as is.\n. null?\n. What about ForOf? ;-)\n. No need to check type when later we have explicit assert.\n. Sorry, there is an issue for that :( https://github.com/jscs-dev/jscs-jsdoc/issues/85\n. Maybe switch-case here?\nIs it just a BC or what about atLeast === undefined && atMost === 1 ?\nProbably better to use typeof variable === 'undefined'.\n. space between can not?\n. math.abs? not sure that it's right.\n. Nvm then. I'd also add here a comment about it. ;-)\n. Ah, nice! :+1: \n. I think we can move this to maximum-line-length\n. Space before closing brace?\n. According to @TheSavior comment: feels like we need to add an exception for Program node. No?\n. @SgtPooki As a man who merging like thousands lines of code each 1-2 weeks I can answer you: it's just stupidly annoying when someone adding empty lines and another one removing them. Personally in my team we have non-verbal rules: 1. Don't add empty lines in places in the code unless you specially fixing code style; 2. Use separate issues and commits for code-style fixes; 3. Changes (commits) should be focused on issues.\nI'm totally agree with @mikesherov that there are no reasons to toggle these empty lines in this issue.\n. Fixing. I'm not sure that we should add it as an usual codestyle error. Moreover, I'm sure that we shouldn't use usual errors.add here. Probably only with warn level?\n. Idk why but time mocha execution time like 5% lower in branch than in master. Called several times... results the same.\nissues/1271:\n```\n  3497 passing (17s)\nreal    0m18.497s\nuser    0m16.493s\nsys     0m0.408s\n```\nmaster:\n```\n  3490 passing (20s)\nreal    0m21.552s\nuser    0m19.225s\nsys     0m0.460s\n```\n. I believe we need a single warn/error messaging mechanism. Typed errors can help us to have it with Errors object.\nI know that's pretty risky way but it's just a proposal and I think it's fine or very close to be.\n. :+1: I'm gonna add it as a separate line:\nError running rule `someThrowingRule`: This is an issue with JSCS and not your codebase.\nPlease file an issue about it with stack trace in tracker: https://github.com/jscs-dev/node-jscs/issues/new\nFine? Correct my english ;-)\n. Error is an abstract entity about a problem. We have standard notification algorithm (by passing string to errors.add) that notifies user about code style problems. Why we shouldn't use this algorithm to notify user about other troubles? I don't get why errors.add is a code style issues collector.\nAt other hand user shouldn't know by default about problems with code (TypeErrors, etc.). So I prefer to hide it under verbose flag.\nI'd like to know what you thinking about current Errors object and errors, warnings, etc.\nWould be great to know your view at that problem.\n. There is a workaround, btw. The main idea here is to move try-catch out of other code. Is it a real problem?\n. :smile: well, politics!\n. Comparing typical linters with codestyle checker is like spoons to knifes. Yes, both written on nodejs, both checking your code, but jscs requires valid code and recommends using some linter before launching itself.\nEach project that using JSCS using it with (eslint or jslint or jshint). Do you know a project where JSCS superseding an usual linter tool? I don't ;-)\n. Anyway, code in this branch is faster than in master (about 5%). try-catch is almost made like @petkaantonov recommends. Still don't see a problem here ;-(\nAn article is not a real benchmark. Optimizations (that try-catch prevents) requires a lot of other things to happen. \nPersonally I don't like try-catchs but I don't see another way here to catch an exception and to increase stability (and friendliness).\n. Btw, @markelog, we already have an issue about that: https://github.com/jscs-dev/node-jscs/issues/1043\n. I don't see how we need to change API with custom Error (stringify-able) objects passed instead of plain string.\nAtm we have one big Errors object with a list of messages and their locations (and some other flags).\nI think we can drastically simplify that by making several Error types that will contain the same for code style errors (message, location, rule, fixed flag), and something else for other.\nI'm not insist but just an idea.\nAnyway, I don't now see how to make it work without hardcoding here output.\nupd waiting for ideas...\n. Time lower = Speed higher ;-)\nV8 magic or something. Not sure how...\nI suggest to talk about speed in #1043 since we all know that we need it and there are a lot of things we can speed up. If we've got troubles with perfomance because of this try-catch statement we could move it out into tryCatch helper function (as well as in bluebird) and I don't see here a problem.\n. Added url and dropped ticks\n. Fixed, thanks!\n. Agreed?\n. Totally agreed. :palm_tree: \nStill perf monitoring will allow us to make steps only forward in performance.\n. Yup, but there we can nicely shut these errors. Vice-versa. ;-(\n. Well, nothing. Problem is a message will go not to reporter but directly to stdout.\n. Because of nature of console.log. You know another way to do it?\n. Yeah. Let's do this.\n. Okay. This will mix code style issues with internal throws. And if something goes wrong in rules (we will catch an exception or something) it will report as a code style check not passed. Is it fair for user?\nThe original issue was about hiding away this error if it happens.\nIt's possible also to pass there InternalError('message ' + e.stack) to differentiate this kind of errors with code style issues.\n. If we pass an Error object here.\n. Internal error in a rule is not an issue for a user's code.\n. Better to report only what user wants (and not our bugs).\n. Can we try to make \"warnings\" mechanism to report internal issues without failing code style check?\nThis PR is not critical anyway. User now gets a huge amount of fun, and to reduce it we need to hardcode somewhere a try-catch.\n. Oh guys. You are so strong in your vision on it ;-)\nMaking what you want.\n. \n. grandpa?\n. :smile: \n. Does it affects shebangs?\n```\n!/usr/bin/env node\n// etc.?\n``\n.NewLinesorNewlinesorNewline?\n. But: https://github.com/jscs-dev/node-jscs/pull/798#issuecomment-65096090\nAnd disallowNewlineBeforeBlockStatements, disallowPaddingNewlinesBeforeKeywords,-newlines-`\nI think it was accidentally named NewLines (with a capital L) and then just copy-pasted several times ;-(\n. I'd say\n```\n!/usr/bin/env\n// line comment\n// etc.\n```\nBut\n// line comment\n// etc.\nWell, it's very rare and hard to implement case (unless we have a isShebanged flag in jsfile). Nvm! ;-)\n. Am I drunk? Not sure. Looks like it works well already ;-)\n. Can't get how ruin this ;-) You know string without ' or \"? ES6 template strings?\n. I'm checking what empty lines I've added with git show, git show HEAD~2 or git diff origin/master (after rebasing of origin/master) and just removing random spaces I've accidentally added: to make commits focused on issues.\n. TypeS.\n. Not sure about this change.\n. :+1: for moving them as local functions into configure\n. Intentional empty line.\n. :+1: You using it in check and no reason to left it in prototype.\n. Unused esnext?\n. Not sure it's a good idea ;-(\n. Didn't see where you readd it to checker. Suggesting that it wasn't used in code.\n. ``` js\nstr = '\"asd qwe\"';\nre = new RegExp('^' + '\"' + '(.*)' + '\"' + '$');\nfunction _requote(str, q) { return q + str.substr(1, str.length - 2) + q; }\nstr.replace(re, \"'$1'\"); // '\\'asd qwe\\''\n_requote(str, '\\'') // '\\'asd qwe\"\\''\nconsole.time(); for (var i = 0; i < 1000000; i++) str.replace(re, \"'$1'\"); console.timeEnd(); // 617ms\nconsole.time(); for (var i = 0; i < 1000000; i++) _requote(str, '\\''); console.timeEnd(); // 115ms\n```\nSafer and faster. Thoughts?\n. Yeah, I think so. For v2.0 ;-)\n. Just thinking about what Errors object should do. Reporters can format this kind of errors more wisely.\nNvm, it's another story.\n. @markelog @mikesherov What our code style said about padding lines about else ifs?\n. random whitespace.\n. Did you think about passing fixing callbacks?\n. I'll just left it here:\njs\nvar a, b, c = 1;\n// vs\nvar a,\n    b,\n    c = 2;\n// vs\nvar a, b,\n    c = 2;\n// vs\nvar a, b;\nvar c = 1;\n// vs\nvar a;\nvar b;\nvar c = 1;\n. I'm pretty sure we also need to check cases with single and multiline comments.\n. 'if (x // something',\n          '    && y) {',\n          '  alert(z);',\n// and\n          'if (x /* something */',\n          '    && y) {',\n          '  alert(z);',\n// and\n          'if (x',\n          '    /* something */ && y) {',\n          '  alert(z);',\n. Please add cases with /* comment before ampersands */ && and x // line comment between var and ampersand\n. Oh, I don't see them ;-)\n. :+1: \n. What if:\nthis._atBOF = options === true || options === 'beginningOfFileOnly';\nthis._atEOF = options === true || options === 'endOfFileOnly';\n?\n. It can fail if file has only 1 line. I think we can check file.getLines().length at function start and skip files with less than 3 lines.\nAlso would be nice to call file.getLines() just once and store to a variable.\n. :-D :+1: \n. Yeap, thanks! :+1: \nNot sure about 3. Just thinking about:\n- empty file (one line) \u2014 both rules will error\n- two lines:\n// \u2190 this line will be checked by both rules\n  // \u2190 this line by nothing, should it be empty?\n- three lines\n// \u2190 this line by BOF\n  // \u2190 this line by EOF\n  // should be empty?\nSo 3+ lines is working env for this rule at my pov. That's why I said it ;-)\nNot sure, btw, what's with the last line? Should it be empty?\n. /cc @markelog @mikesherov \nCan we detect that rule is used (line feed at eof is required)?\n\u2190 BOF-padding\nvar x;       \u2190 code\n             \u2190 EOF-padding\n             \u2190 line feed at EOF\n. @astorije Agree that we should know it to check intelligently. ;-( Otherwise we just going to force requireLineFeedAtEOF with this rule.\n. Not sure how to resolve this ;-(\n. This is a bug in type parser: Kuniwak/jsdoctypeparser#14\n. This line going to @name tag description. It's wrong.\n. @mrjoelkemp Nice tip. Fixing!\n. Since we making here a lot of rework I'd add _ to protected properties.\n. Non-blocker:\nNot sure about this else-block. We can add a return in if. Personally, I'd also swap these two blocks because options as object is not an exception in common.\n. Ouch, sorry. One more nit: Need to update README.\nhttps://github.com/jscs-dev/node-jscs/blob/feature/except-require/lib/rules/disallow-multiple-var-decl.js#L4-L10\n. Oh, I think it's too early to deprecate true value ;-(\nThoughts?\n. /cc @hzoo @mrjoelkemp \n. @stefanosala Yeah, just we should be more implicit. We have a lot of rules with true value with default behaviour (so I'm not sure we should deprecate it right now), but string values is deprecated and we can note it.\nAlso we have an issue about new format for 2.0 where we going to rework all rules (that's why we trying to prepare them to object form). #698 \n. Are you sure you can use fives (variables from outer scope) inside arrow functions?\n. Not sure we should do this ;-( And yep. I don't like this too.\n. only? p.s. you can use mocha -g '#1346'\n. mmm, allExcept: 'function'?\n. Need to update docs.\nAnd I'm not sure I understand what beforeComma option really means ;-( Perhaps there are better names.\n. What if make ['==', '===', '!='] by default (true)?\n. Usually, we making several describe blocks with different checker configurations. See https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/disallow-space-after-object-keys.js\n. I think it should be moved to NodeConfiguration if we gonna use .jscsignore to extend with internal ignores.\n. Even just '===' and '=='.\nHistorical reasons.\n. Actually I'm fine if we left it as is.\n. I think better to make a custom object instead of generic one with concrete order of fields. Hidden classes, etc.\n. Yeah, this place is not the best to talk about hidden classes and performance. errors.cast can do the job.\nPersonally I'm trying to keep it in mind. Ok, nvm!\n. JSX (uppercase?)\nNot sure currently is needed.\n\"will improve\" \u2192 \"will be improved\"?\n. Voting for an issue if we need it ;-)\n. New vs News\n. :+1: \n. do we need these checks with //; at the end of line?\n. What about this comments? ;-)\n. Range is pretty big, no?\n. np, fixed ;-)\n. Let's drop it then. I doubted about this if. Now I see we shouldn't add it.\n. I'll move it to separate commit.\n. Yep. My bad.\n. Can you elaborate?\n. IE8 and older doesn't support it. Yep ;-\\\nShould we set {es3: true} in our .jscsrc?\n. Well, looks like would be nice to use it. But there are no ES3 support atm.\n. Ah, true. Thanks! I'll add here deprecation note.\n. Better to prefix this with _ .\n. Moved https://github.com/zxqfox/reserved-words/blob/master/test/reserved-words.js\nI suggest to move it to jscs-dev namespace ;-)\n. I'd say return a < b ? -1 : 1 would be fine.\n. This can return false positive for snake cased keys like snake_case.\nE.g. this object will catch that bug:\n{\n  b_: 'asd',\n  a: 'qwe'\n}\n. Since there are just two options (asc and desc) why not use asc in desc? Like return -asc(a);\n. Just thought: If there will be many large objects in project this can affect performance.\n. I was sure I already used this package here ;-\\\n. I believe it should be wrapped to before statement inside this describe.\n. Shame on me ;-( I've forgot to push...\n. There are three options of assignments:\nvar simpleVar = function () {};\nobj.propertyName = function () {};\nobj['propertyValue'] = function () {};\nAnd _left property only exists for the second and the third line.\nI'll add here comments.\n. For a second I though we need to check names for ES6-destructuring. Feels like need to drop this test.\n. Are they aligned?\nupd: Ah, sorry. Not indented, but aligned.\n. Closing bracket under line comment.\n. And here\n. And here.\n. what if masks === null ? [] : ... ?\nupd: Nvm, I think it's over engineering, we can pass empty arrays.\n. :+1: for both\n. Yeah, we also need here to go for { allExcept: [\"reserved\"] }. Should we do it now or... in other PR?\n. @markelog Something like that: https://github.com/zxqfox/node-jscs/commit/fbd1e86a6d00e0dc44dc58fcf161bba924d80613\n. --amend, not -a ;-)\n. Yeah.\n- Try to fix conflicts youself if there are conflicts.\n- If you run into troubles, `git rebase --abort` and ask another maintainer for help.\nsounds better.\n. Feels like it doesn't work on linux. Not tested on win.\nLog:\n$ git co https://github.com/jscs-dev/node-jscs/pull/1710\ngithub.com username: zxqfox\ngithub.com password for zxqfox (never stored):\nuser: Current not implemented on linux/386\n. Better to let user know why his/her config wasn't loaded. :+1: for this check.\n. What you think about determining format with this check?\nif (=== '{') then try to parseJson else try to parseYaml.\nupd: In that way we don't need 2 try-catches.\n. Perhaps it can be optional. Thoughts?\n. Then this check is pointless. ;-(\n. EOL at EOF\n. Hm, we still need it?\n. I'm not sure that iojs will install 3.x ;-)\n. > Is there another word for tag\nAccording to http://usejsdoc.org/about-block-inline-tags.html tag is correct.\n\nMaybe By default, it allows for any combination of tags?\n\nDoes this meant that the user can use any tag of any existing preset? Atm preset field works like clarification. And by default it allows any tag of combined/merged tag set. Not sure that your version is more correct. But feels like the current one is even worse.\nThere is one more problem with this file because it's generated by the script at the end. If we want to make here changes we should do it also in jsdoc repo. Just fyi. ;-) Guess would be better to check the whole docs for grammar.\n. Guess, yes. But then we need to change it everywhere. Right?\n. Mixed set is a merged set of all tag files (presets). Union in terms of Set theory.\n. @markelog It works like: expect(${actual}).to.${comparator}(${expected}). Not sure we can do it better ;-)\n. \"'\" === \"\\'\" right?\n. What is the default?\n. I'd say we don't need too much options. Can we left just 2 params: allExcept with tokens array and, let's say, arity with 2 variants: single, multiple or even a Number.\n. \"string value true\"? nooo.\n. Better to check keys to exist in validFlags. Like\njs\nassert(Object.keys(value).every(function (key) {\n    return validFlags.indexOf(key) !== -1;\n}), error);\n. Why not\n``` js\nif (!isObject) {\n  assert(value === true, error);\n  return;\n}\n// do the rest\n```\n? ;-) We usually like early returns.\n. Better to check for isArray also.\n. same here \u2014 better to move to the top of the function, right after single/multiple checks (or even before them).\n. What about noArgs case? Is it fine here to have a space between parentheses?\n. openParens or openParen?\n. to reduce nested if's you can put here if (!this._strict) { return }\n. Can you cover this branch: || '\\n'?\n. You have 3 tests in outer if and 2 in inner, are you sure you need all of them?\nCan you cover it? That's why coveralls reporting about coverage decrease.\n. Well, you don't need test precendingToken here if there is no purpose ;-).\nI can't get how to break it if you remove precendingToken.\n. @markelog Why?\n. We have test for const and let above. And this rule ignores them at all.\n. I'm not sure we even need to allow vars inside blocks. I mean, if there is var \u2014 it should be placed FIRST in scope, while scope for var is some kind of function node or the program.\nFixed in the second commit. Please check it out!\n. Please, look at the code. I'll move it out if need, but looks like not needed.\n. Better? ;-)\n. Dono why I've added it. Need to drop\n. Redundant, right?\n. Uhm?\n. cc @hzoo @markelog \n. Guess, better to add slash to excludeFiles items programmatically: ['/1.js', '/app/1.js']. At least before next major.\n. I'm not sure about this API.\ncc @markelog @hzoo \n. ",
    "jgallen23": ":+1: \n. ",
    "mourner": "Yeah, hard tabs is using the tab character, and soft tabs is using a fixed number of spaces (say 2 or 4). Example of smart tabs (where |--- is tab and . is space):\n```\n|---var a = 5,\n|---....b = 3;\n|---if (a) {\n|---|---return \"Hello\" + \n|---|---.......\"World\";\n|---}\n```\n. @mikesherov not exactly \u2014 you can't enforce a particular indentation style in JSHint, so regardless of options you can have tabs and spaces mixed in the same file, which is bad. \n. @mikesherov try this code on JSHint.com:\n``` js\n/jshint indent:4 /\nfunction main() {\n/tab    /var foo = 'bar';\n/4-space/return foo;\n}\nmain();\n```\n. Well, it's tricky \u2013 JSHint doesn't tolerate tabs mixed with spaces on the same line unless you specified smarttabs and spaces come after tabs, but doesn't check whitespace in context of a file.\n. @mikesherov thanks, awesome work! \nLooking at the docs for smart indentation option, it seems that it will pass a file with mixed tabs and spaces if some lines use tabs and some use spaces, at least according to the code example, right?\n. Would it pass examples like this?\n\\tvar a = \"foo\" + \n\\s\\s\\s\\s\"bar\"\nMaybe worth only ignoring indentation on subsequent lines starting from the indentation level of the first line? E.g. check for tab on the next line, but not enforce whitespace on the rest of the line?\n. Yeah that's unfortunate. My goal here is to make managing contributions easier in Leaflet, which is quite a popular library and gets lots of contributions (more than 800 closed pull requests atm). A case when someone breaks whitespace in PR but you don't notice it because tools don't enforce it properly (so Travis build passes) is very common.\n. ",
    "timmywil": "I would like the opposite to be enforced by an option.\n. But only for statements. For instance, I'd like to differentiate between\njs\nvar o = {\n  key: [{\n    a: 0\n  },\n  // okay\n  {\n    a: 1\n  }]\n};\nand\njs\n// good\nif (true) {\n}\n// bad\nif (true)\n{\n}\nBy statements, I mean, if, else, for, while, switch, do, return, try, catch, and function. Elsewhere is fine.\nPerhaps the exception could be narrowed down to whenever the curly is preceded by comma and optional whitespace.\n. @mikesherov Yes, thank you for putting it concisely. Sounds great.\n. I like it.\n. ",
    "bhardin": "I agree with @timmywil, I'd like to have a rule to enforce the opposite also. Was NewlineBeforeBlockStatements ever implemented?\n. ",
    "joeybaker": "Thanks @mikesherov!\n. wow, sorry, issue search failed me there.\n. ",
    "bdougherty": "The problem is that there isn't a space before the round brace, it's a space before the curly brace, which should be allowed by that rule. I'm running into this issue as well.\n. ",
    "hnrch02": "IT'S BRAD! Sorry, I just couldn't contain myself :smile: Anyhow, I'm also experiencing this problem. :+1:\n. :+1: Just ran into this problem, especially bugging if you wanna use if(!(property in object)) ..., as !property in object would negate property, not the operator.\n. :+1: \n. What do you mean? This issue? If you look closely you can see that @mdevils closed the issue about 5 hours ago :smiley: \n. Yeah, exactly, I just wanted to point out, that I would like to have both of these examples (single-line conditionals without curly braces and multi-line conditionals with curly braces) existing side-by-side in my code.\nRegarding 1) Well, it would definitely require the consequent and alternate to be on new lines if no curly braces are found, but the disallowCurlyBracesForSingleLineConditionals-option would be nice, too.\n. :+1:\n. This feature is not in 1.2.4 and only available in the current master. A new version will be released once the remaining bugs with indentation checking are resolved. See #204\n. Great, thanks!\n. ",
    "tivac": "Also just ran into this :feelsgood:\n. I've had success with the following pattern (items like <this> are placeholders)\n``` javascript\n// This should probably be added as a \"main\" property to package.json\nvar Checker = require(\"jscs/lib/Checker\");\nvar checker = new Checker();\nchecker.registerDefaultRules();\nchecker.configure();\nvar errors = checker.checkString(, );\n``\n. Testing thatpreset` values are merged is great, and I'm happy to update this PR to ensure that happens. The way it was handled previously looked like a subtle bug. Given that this project is still under pretty heavy development I don't think that depending on the main project config for tests is a good idea.\nI agree on the fragility of the assertion, long term a better approach may be to further decouple the CLI code and the core logic so that this test can simply ensure that the configs were merged correctly.\n. So this test still times out for me, whether I run the entire suite or just the single test. Maybe there's a bug because I'm on windows?\nIf this PR to fix it isn't acceptable, what would be?\n. Closing this PR in favor of a new one after I fat-fingered some branch cleanup & deleted the one in this PR. :goberserk: Will file a new one after I figure out how to rebase to master w/o breaking everything.\n. I'm not interested in an argument about comments in JSON, so if there's going to be pushback like that I'd much rather solve this via renaming the config file. Since require() doesn't actually care, why not use a name that is JS/JSON agnostic?\n.jscsrc ala JSHint & their .jshintrc would make a lot of sense.\n. I'll close this and open a new issue or PR for supporting a format-neutral config file name.\nYes, I can use the -c flag, but having to do that every time is not ideal.\n. :+1: This is preventing me from being able to use JSCS for any indentation checking.\n. :+1:\n. @markelog I'm happy to take a swing at it, it'll be another couple of hours before I'm able to spend any real time on it though.\n. I'll go ahead and start working on this, it'll be trivial to change the filename it looks for in addition to the -c param and .jscs.json.\n. > Your tests are falling.\nYikes, not sure how .jscs.json & .jscsrc got transposed there. Fixing, and that should cover @mdevils comment as well.\n\nWhere did you override it? It's definitely not necessary.\n\nThe module I introduced takes two params, config & cwd so that when called by the normal CLI it can use process.cwd() and when called by the tests it can point at any directory. I could use process.chdir() in the tests but I don't like messing with environment settings like that in tests unless absolutely necessary. If you feel really strongly about that I'm fine w/ changing it to change the working directory instead.\n\nIt's not gonna happen for very long time.\n\nI figured, but wanted to be sure to make a note that this extra complexity could be dropped at some point in the future. :smile:\n. >  is what i don't get.\nOk, I think I see where the confusion's coming from. Hopefully my line note response cleared things up. That part's some cruft from earlier thinking that I'm cleaning up now.\n. @markelog Fine by me, I was trying to limit the scope of my changes. If everybody agrees on that approach going forward I can make the changes.\n. I didn't do any work against preset because that's handled in the cli module, not the cli-config module. Trying to keep this scoped so it can land, someday.\n. Any updates on this?\n. Since JSCS loads its config file using the built-in require() in Node you can use the -c flag to pass a custom config file that just exports an object.\njavascript\nmodule.exports = {\n    requireSpaceAfterKeywords : true\n};\nwhich makes things much easier to comment out and add comments, because it's just JS. You could actually do this with .jscs.json but then you've got the file extension not matching the file contents and that's just gross.\n. @markelog Sorry, I must've misunderstood. So to be clear, you want me to completely remove the output assertion so that the test just asserts that one of the jQuery config values is set?\nSomething like:\n``` javascript\nit('should set jquery preset', function(done) {\n    hooker.hook(console, 'log', {\n        pre: function(message) {\n            done();\n        return hooker.preempt(message);\n    }\n});\n\n// The merging of the main project's config w/ the jquery preset is intentional\nvar result = cli({\n    args: ['test/data/cli.js'],\n    preset: 'jquery',\n    config: ''\n});\n\nassert(result.getProcessedConfig().requireCurlyBraces);\n\n});\n```\n. Ah, interesting. The build worked on Travis with my changes, but then it was working on Travis previously.\nLooking at the way the config/preset are merged more closely it looks like it should be possible to have the test directly instantiate a new Checker and pass it a crafted config object with a preset value set. Then it'd be a relatively straightforward matter of investigating the rules set on the Checker instance to be sure that the preset values were merged in (without overwriting the original config values!).\nI'll take a swing at that a bit later.\n. I'm all for this change.\nDefinitely would like a test for when package.json exists but doesn't have a jscsConfig property. It looks like this code would handle that case fine, I just want to make sure it doesn't get forgotten about the next time this code changes.\n. I won't be able to look for a few hours, but sure I'll take a peek.\n. I would never consider using brackets to access object properties as being \"array brackets\" (clearly, because I filed a bug on it). You could think of an object as an associative array, but it isn't an array, and those brackets aren't array brackets.\nIf this behavior is intentional I hope the rule gets renamed.\n. The function? So stack traces look slightly nicer.\nError: error\n    at findConfig (C:\\Users\\pcavit\\Documents\\GitHub\\node-jscs\\lib\\cli-config.js:13:11)\n    ...\nvs\nError: error\n    at module.exports (C:\\Users\\pcavit\\Documents\\GitHub\\node-jscs\\lib\\cli-config.js:13:11)\n    ...\n. That's a remnant, I'll clean it up.\nI originally planned to run the tests through the full CI interface, but couldn't come up with a way I loved to determine which file my new function had returned. The thinking was I could do cli({ cwd : \"./data/...\", ... }) but it wasn't worth the extra work.\n. Ok\n. I second dropping getCwd() completely, it's unnecessary.\n. ",
    "BryanDonovan": "This should be reopened.. it's the one thing preventing me from using node-jscs I think.\n. I've added failing unit tests for this in this fork: https://github.com/BryanDonovan/node-jscs/compare/getter-setter-parens\n.. but I haven't figured out a solution yet.\n. I've narrowed it down a bit.\nThis passes:\njavascript\nit('should not report missing space before round brace in getters w/o space inside curly braces', function() {\n    checker.configure({ disallowSpacesInFunctionExpression: { beforeOpeningRoundBrace: true } });\n    assert(checker.checkString('var x = { get foo() {} }').isEmpty());\n});\nBut this fails:\njavascript\nit('should not report missing space before round brace in getters with space inside curly braces', function() {\n    checker.configure({ disallowSpacesInFunctionExpression: { beforeOpeningRoundBrace: true } });\n    assert(checker.checkString('var x = { get foo() { } }').isEmpty());\n});\nThe error message points to the space after the closing round brace, before the opening curly brace.\n. Nevermind this.. I can see the reason for not allowing more than one value per rule.\n. Thanks, fixed now.\n. I think the confusing thing here is the phrase 'multiple var declaration'.  I could read that as meaning \"multiple vars declared in one statement\" or \"vars declared in multiple statements\".  I don't have a better idea though :)\n. Oh, no problem :)\n. +1\n. no problem!\n. Yeah, see https://github.com/jscs-dev/node-jscs/pull/555 :)\n. Sure, no problem\n. @markelog - what do you think the default set of keywords should be for requireSpaceBeforeKeywords?  Same as requireSpaceAfterKeywords?\n. @markelog - Pull request is updated, but since utils.spacedKeywords didn't include else or catch, I added them directly in the require-space-before-keywords.js file.  I wasn't sure if you'd want them added to the spacedKeywords list or not.  I can change it if you want.\n. Thanks @mrjoelkemp.  @markelog - I'll wait until you merge #624.\n. Yeah, no problem.  I can probably work on this in the next few days.\n. Sounds good\n. Sorry, been busy lately.  I'll try to get this done tomorrow.\n. Thanks!\n. It would be awesome if there was as rule to enforce these newlines.\n. Oh, awesome!\n. Sure, good idea.\n. Hmm.. can't think of a better term than \"non-coddled\".  I'll go with that :)\n. It should be 0 instead of 1.  Previously it was choosing the wrong error message.  The original tests didn't catch it, so I added a test (see line 14 of test/rules/require-space-after-keywords.js). This change is unrelated to my pull request, but since I based mine on require-space-after-keywords, I found the bug and figured I'd fix it.\n. How do I move it to another commit?\n. ",
    "FarSeeing": "Not sure that I got you right:\njavascript\n'@param {String} template Template. Default value is \"{xxx}\"'.match(/^@param\\s+(?:{(.+?)})?\\s*(?:\\[)?([a-zA-Z0-9_\\.\\$]+)/)\n// [\"@param {String} template\", \"String\", \"template\"]\nSo we got param type (match[1] === 'String') and param name (match[2] === 'template').\nOr we should not match that string for any reason?\n. Well, we can split @param string using spaces and then analyze chunks.\nBut it's a complex task, so (as original regexp was not solving the problem either) maybe you accept this temporal solution and I begin working on a right one?\n. ",
    "ShimShamSam": "I'm not sure why this was closed. Not only does it solve the use-case presented by @zxqfox, but it is also more in line with other files like .gitignore and .jshintignore\n. I really just prefer it for consistency. It would match Git's and JSHint's method of ignoring files.\n. +1\n. I might take a look at it.\n. This would replace the option added in #369 \n. @mikesherov The use case in #369 is likely to be a single-line array/object, which would be covered by this suggested rule\n. ",
    "andrewdeandrade": "Turns out I have a use case for wanting .jscsignore files.\nWe're trying to write a node_module for our entire organization that encapsulates all our linting rules so every new projects can just npm install our linting module. This means that we are running jscs with the config option pointing to either a .jscsrc file in node_modules/ folder or calling it on a symlink from the project root to the universal  .jscsrc file in the node_modules/ folder. This presents two problems:\n(1) the excludeFiles array is calculated relative to the path where the .jscsrc file is located.\n(2) no ability for a project owner to ignore files on a project by project basis.\nFWIW this module makes it really easy to implement ignore files: https://www.npmjs.org/package/fstream-ignore \n. FWIW, I'm no longer +1 on this. I've completely switched over to eslint since it pretty much meets all the needs that jscs used to address.\n. Esprima 2.0 was released 10 hours ago.\n. Now that the official 2.0 esprima branch has been released (with official ES6 support for some features) can it be used instead of the harmony branch (which may have more comprehensive ES6 support today, but is poorly documented)?\n. I'm also seeing a column error issue too.\n```\n'use strict';\nvar _ = require('underscore');\nvar url = require('url');\nvar path = require('path');\nvar process = require('process');  \nvar bedrock = require('../../');\n// Clients fakes\nvar fakeLogger = require('../fakes/logger');\nmodule.exports.createServer = function createServer (opts, callback) {\n```\nIt's saying the disallowSpacesInNamedFunctionExpression error is on 12:39, when it's actually on 12:52, but when I make a test file with \"use strict\"; I can't reproduce the error.\n. ",
    "selfcontained": "Just adding another voice to the mix in support of a .jsrcignore file, and restating what @malandrew mentions.  One of the benefits from supporting an optional ignore file in addition to your config file, like jshint does, is that you can share the same style enforcements across projects, but allow for things like project specific ignore files to be handled in the project.\n. ",
    "indexzero": "Adding a +1 for a separate .jscsignore file for the same reason. \n. @malandrew that passive aggressive behavior is not welcome here. @adambuczynski would love your contributions if you have time. The biggest win that jscs has over eslint is that the autofix support is much more robust right now. \nAt GoDaddy we use both eslint and jscs together. eslint strictly for linting and jscs strictly for style. It is a very nice separation that I would recommend adopting. \nI am still very much +1 on this as it bit me recently. \n. I put a $200 bounty on this issue. Lets do this folks!\n. @adambuczynski exactly. I personally really only want autofix for style. Anything else does make me a little nervous. \n. @zxqfox that's what I would expect. I often allow 1 or 2 items in an array to be on the same line, but anything bigger has to be on its own line.\n. Doubled the bounty on this to $200. Will be so useful in so many ways. \n. That's awesome @mikesherov! I didn't realize #752 was merged. Is there a running list of rules that need formatters? Now that the API is defined I could help write a few.\n. @mikesherov looks like great progress here! I read the comments a bit and saw all the referenced commits for each rule \ud83d\udc4d\n... is there a place listing all the rules and which ones still need autofixing added? A checklist somewhere would be super helpful. I've finally got a little time and would love to pinch hit and knock a few out.\n. \ud83d\udc4d\ud83d\udcaa\ud83d\ude4c\n. :+1: :100: Awesome, looking forward to whoever claims the bounty on #516 :trophy: \n. @mrjoelkemp based on what you told me last night doesn't he want:\njs\n\"disallowSpacesInConditionalExpression\": {\n    \"afterTest\": true,\n    \"beforeConsequent\": null,\n    \"afterConsequent\": null,\n    \"beforeAlternate\": null\n}\nOtherwise, it does look like a bug, unless I am misunderstanding where the tokens actually are. The docs could definitely use this update to clarify. As I would understand it it is:\nvar value = test ? true : false;\n                ^ ^    ^ ^\n                | |    | |\n                | |    | \u2514- beforeAlternate\n                | |    \u2514--- afterConsequent\n                | \u2514-------- beforeConsequent\n                \u2514---------- afterTest\n. Thanks @mikesherov. I would be happy to add the above diagram to the docs if you think it would be useful.\n. @mrjoelkemp PR made. Decided that the semantic of \"textblock\" was most inline with what I actually do.\n. I don't understand the coveralls message, but happy to fix it.\n. @mikesherov ok. I'll remove the check for it.\n. :100: \n. @mrjoelkemp thanks. I actually just made a small change to support sentence breaks in textblocks which are perfectly valid.\n//\n// For example I often end my sentences on a single line.\n// And then start the next one on the following line.\n//\nActually checking for . in the previous line crossed a boundary with linting into grammar checking that I didn't want to cross.\n. Worth noting for my own learning purposes there are a lot of comments in the .jscsrc file and all opposite operators are set null. These are later stripped out in the light build script\n. Sorry, the purpose of this issue wasn't to discuss presets. It was to discuss the rules that I have that are not currently covered by jscs. e.g.\n- Code Comments\n  - Block comments must only be used in file headers\n  - Put an emptyline before a comment.\n- Strings\n  - When programatically building up a string, use Array#join instead of string concatenation.\nIf you wouldn't mind reopening this I'll change the title. \n. I should mention that there are at least a dozen other quirks in there that I'd like to help add as new rules or refinements to existing rules.\n. cc/ @mrjoelkemp ^^\n. How is this different than \"validateParameterSeparator\"\n. Yeah, sorry didn't mean to be short there, just got to Paris. Super jet lagged.\nThis looks to be exactly the same rules though: https://github.com/jscs-dev/node-jscs/blob/master/README.md#validateparameterseparator\n. Ah ok. Thanks for explaining it to me! Is the plan to move \"validateParameterSeparators\" to \"requireSpaceBetweenParameters\" in 2.0.0 then?\n. Ooooo ... is there any interest in a sister rule to this: requireVariableAssignmentsFirst which would require all of the assignments in the var statement come before the unassigned vars.\n. Thanks @zxqfox! Subscribed to the mailing list now :0)\n. Thanks, I added my +1 there for a proper .jscsignore file. Maybe I'll be so bold as to implement it :)\n. @zxqfox great start, but I find the number setting to be somewhat confusing. Honestly though, I'm just nitpicking. I think that in the future we can just add more settings as in validateQuoteMarks. \nExtrapolating on that idea it would be nice to support something like \"every item must be on it's own line after N items in the array\"\ne.g. \n``` js\n// Not valid\nvar x = [\n  1, 2\n  3, 4\n];\n// Valid\nvar x = [1,2];\nvar y = [\n  1,\n  2,\n  3,\n  4\n];\n```\nCould also be used in conjunction with a setting to understand the length of characters of the items themselves. But again, this is all just more to add on to this work imho, not something that should block it from coming in.\n. @zxqfox You are on the right track. Using your example, This:\njs\n\"requireNewlineAfterArrayItems\": true\nshould definitely be equal to:\njs\n\"requireNewlineAfterArrayItems\": 1\nWhich would in-turn be equivalent to:\njs\n\"requireNewlineAfterArrayItems\": {\n  \"maximum\": 1,\n  \"all\": true\n}\nI am only OK at naming things, but from what I read from the other rules the property values for Object settings are usually very short. (See requireSpacesInsideParentheses).\n@mikesherov @mrjoelkemp any thoughts on the above?\n. @zxqfox or the joke version:\n\nThere are two hard problems in Computer Science: cache invalidation, naming things, and off by one errors\n. @mikesherov just to make a side-note on your comment:\nThe options here seem like they are anticipating people using them, but of all of the style guides we've implemented, none have rules about max per line. All say \"1 per line if the array is multiline\" if they say anything at all. Please correct me if I'm wrong, but that means we don't need a lineLimit option, at least not yet. The value should be hard coded to one. We'll create an option later if needed.\n\nThere are some cases where one definitely wants this. It is rare, yes, but anytime an array of strings is exceptionally long I use a limited per line option. e.g. an Array of all the states in the USA:\njs\nvar states = [\n  'Alabama', 'Alaska', 'American Samoa',\n  'Arizona', 'Arkansas', 'California',\n  'Colorado', 'Connecticut', 'Delaware',\n  'District Of Columbia', 'Federated States Of Micronesia', 'Florida',\n  'Georgia', 'Guam', 'Hawaii', \n  'Idaho', 'Illinois', 'Indiana', \n  'Iowa', 'Kansas', 'Kentucky', \n  'Louisiana', 'Maine', 'Marshall Islands', \n  'Maryland', 'Massachusetts', 'Michigan', \n  'Minnesota', 'Mississippi', 'Missouri', \n  'Montana', 'Nebraska', 'Nevada', \n  'New Hampshire', 'New Jersey', 'New Mexico', \n  'New York', 'North Carolina', 'North Dakota', \n  'Northern Mariana Islands', 'Ohio', 'Oklahoma', \n  'Oregon', 'Palau', 'Pennsylvania', \n  'Puerto Rico', 'Rhode Island', 'South Carolina', \n  'South Dakota', 'Tennessee', 'Texas', \n  'Utah', 'Vermont', 'Virgin Islands', \n  'Virginia', 'Washington', 'West Virginia', \n  'Wisconsin', 'Wyoming'\n]\n. @marklog what about a single rule with two settings. e.g.\njs\n\"requireInitializedVariables\" : \"first\",\n\"requireInitializedVariables\" : \"last\"\n. @twolfson wouldn't it make more sense to disable disallowAnonymousFunctions in your test code all together? Just playing devils advocate here :)\n. Awesome. Awesome to the max.\n. Can't want to try this out. I basically spent week making config files before >_<\n. :+1: +1 lgtm\n. @TheSavior no complaints from me. I am deep in the last thralls of organizing EmpireJS so my OSS schedule is swamped. \n. @markelog yup. Working on that, but the purpose of this PR is to get feedback for the bucketing of the rules into groups themselves. \n. e.g. might be useful to have a script in this repo that ensures that all rules are in a group?\n. @hzoo fixed. I think I should add a test to make sure there is 100% inclusion of all rules. Will try to get to that this weekend.\n. @markelog yup. Just a lot going on. Did some work on this tonight. Look for a branch soon.\n. @markelog this should be good to go on this side. Now that the rules are all here and verified I can start work on the jscs-dev.github.io side.\n. @hzoo comments addressed. Please review.\n. @hzoo that's the idea. So we can stay up to date as new rules come in.\n. +1 this just bit me hard. \n. Hmm ... then I'll open a bug for what I was seeing. It didn't seem related to this rule the more I think about it.\n. Yup. Unrelaed: https://github.com/jscs-dev/node-jscs/issues/1805\n. It is also worth mentioning that since there is no function keyword here. This can cause an unlintable code situation when used in conjunction with other rules. \n. @hzoo @zxqfox I started on a basic implementation of this tonight: https://github.com/indexzero/git-lint Will currently work for autocrlf checking only.\n. Note: even more interesting is when autofix is enabled which leads to the fixer resolving this ambiguous rule ... well ambiguously as @DullReferenceException noted here\n\n(...) the autofixer will add a space in one run, then remove it in the next.\n. So the take away here is that we needed allexcept: shorthand. I'm going to leave this issue open to see if there might be a better way to explain these types of inherent conflicts to users without having to figure out the correct config incantation yourself https://github.com/jscs-dev/node-jscs/pull/2162#issuecomment-194422173\n. @DullReferenceException I believe so, yes. With auto-fix enabled it would suppress the error and attempt to fix it. \n. This looks like a great start. Could you:\n1. Provide some more details about the changes to the internals for the jscs core team?\n2. How does this get exposed through the jscs CLI?\n3. Documentation updates. \n4. Would like to see some more test coverage for edge cases in the ignore files.\n. Whoops! I forgot to remove that.\n. Yup. Typo\n. Will fix, y'all should turn on autofix on your own codebase :smile_cat: \n. \n",
    "yutin1987": "{excludedFiles: '.jshintignore'} is a good idea.\n. ",
    "masi": "I think support for .jscsignore is fine, but even better would be if I can name a ignore file. Either in the config or as CLI parameter. Then I could do:\njshint --exclude-path=myjsignore\njscs --exclude-path=myjsignore\na simple myjsignore could look like this:\n_/_min.js\n/_minified.js\n*/_packed.js\n. Different formats would indeed be troublesome. In my personal ideal world - :) - jshint and jscs are using the same format as git. But I'm fine with a shared format amongst the JS utilities.\n. If safety/securiity is a concern than IMHO Yoda is only a must only for == (beware type juggling!). But then you could always write === and !== (which linters may force upon you anyway).\n. ",
    "jwhitmarsh": ":+1: \n. I'd be interested in helping out with this.\n. ",
    "iamstarkov": "\ud83d\udc4d\n. I mean that node-jscs should log not only error, but error with rule responsible rule\n. Yes, adding rule code is good idea\n. Sure https://gist.github.com/matmuchrapna/9626987\n. Thank you\n. if this idea can extensed for shareble-configs concept like in eslint, it would be supercool\n. it seems to work fine, if you will delete plugins field\n. I check docs and jscs-config-nordnet implementation and cannot see any problem with jscs-config-nordnet\n. change preset from \"nordnet\" to \"airbnb\" also solve the issue\n. but anyway it should be some bug in jscs\n. it doesn\u2019t help https://travis-ci.org/iamstarkov/jscs-exlude-files-bug#L43-L65\n. @markelog any news here? also is there anything I can help with?\n. im going to create pr with ignoring all dot folders, is it ok?\n. @markelog these changes will not break #241\n. imo, the same for node_modules\n. but its another issue\n. I will edit pr as soon as conflict will happen\n. prob, but I dont think that someone really store js files in dot folders, but possibility of this is not zero\n. oh, i see conflicts here. will update today\n. yes, but unable to update pull-request due to broken laptop. feel free to close now, and I will update later and reopen when will have a time\n. as far as #1481 merged, then this issue is also can be closed by 6bbf569\n. it makes sense\n. looks good. thanks\n. ",
    "shawn-simon": "How is there no option to specify an ignore file...\n. That's not a file, it's json. I would like to have all of the ignores in one place, since I'm using jshint as well. Also, for some reason excludeFiles is fired in relation to your current working directory, not the config file. At least it works though!\n. ",
    "ronkorving": "Would love this too!\n. I had the same problem (Error: Unsupported rules: requireSpaceBeforeBlockStatements, disallowPaddingNewlinesInBlocks, disallowTrailingComma). Looking forward to a release! :)\n. I have the same problem. +1 on this.\n. I wanted to comment out some rules, like \"// requireSpaceBeforeBlockStatements\", but then it starts complaining. It's nice to be able to leave unsupported rules in. It would also be nice if you could explicitly set something to false.\n. It's actually possible that it doesn't treat the comment as whitespace, but rather ignores the comment. I tend to put whitespace after a comment so the first line probably becomes that whitespace.\n. Thanks for fixing!\n. Totally agree that that is the desired behavior.\n. I think this is very much a stylistic issue (something that would be in a codestyle guide) and would love to see this in JSCS. Also, I would love to get rid of JSHint. More and more rules that JSHint does cover have been implemented by JSCS already (named explicitly so in the JSCS docs), and incidentally JSCS runs much faster on my codebase than JSHint does. I would love for JSHint to become obsolete.\n. So how do I enforce the following?\njs\nswitch (foo) {\ncase 'bar':\n  break;\ncase 'bob':\n  break;\n}\n(Crockford style)\n. You work fast, awesome job :)\n. I just tried out 2.1.0, and the problem persists...\nrequireSpacesInAnonymousFunctionExpression: Missing space before opening round brace at lib/Foo.js :\n     7 | }\n     8 |\n     9 | add(chunk) {\n------------^\n. I'm currently not too familiar with the internals, Esprima, and I don't have much time. I'll live if I can't have this now and we put it on the backburner. But I don't think this issue should be closed, should it?\n. Imagine turning:\njson\n{\n    \"requireSpaceBeforeKeywords\": [\"if\", \"else\", \"for\", \"while\", \"do\", \"switch\", \"return\", \"try\", \"catch\", \"finally\"]\n}\nInto:\nyaml\nrequireSpaceBeforeKeywords: [if, else, for, while, do, switch, return, try, catch, finally]\n. js-yaml is indeed the library of choice for yaml parsing. I can have a crack at it.\n. \\o/\n. What would be the right place for that YAML file, and what would be right place for the test?\n. @markelog any input on this?\n. This is how ESLint actually opens JSON and YAML: https://github.com/eslint/eslint/blob/02c6c848d7d70c285269c54718dbc9c12d3f0720/lib/config.js#L82-L88\nIt makes sense, as (after stripping comments) JSON is a subset of YAML 1.2. Perhaps I should update this PR to apply the same approach.\n. @markelog, @zxqfox Let me know what you think of the current approach. I think you may like it.\n. @markelog any input on the current implementation?\n. :+1:\n. Why bother complicating things? I already use ESLint for safety checks and JSCS for style checks. I'm absolutely fine using 2 tools for 2 different purposes. I don't need them mixed up. Next year, someone will make \"ESLint 2000 Pro\" and I may want to use that instead of ESLint. That should have no impact on how I use JSCS.\nThe only added value I can see is sharing ASTs, so performance could be boosted. But then I would suggest releasing a module that parses a file's AST and then passes it through a JSCS API and an ESLint API. At least then you're not creating dependencies between ESLint and JSCS.\n. I'm glad you don't want to reinvent the wheel. But what's the purpose of adding ESLint as a dependency at all? Do people really want to deal with a single tool, period? It's not gonna make configuration any easier (documentation will still be split) and if I want to upgrade ESLint to the latest release, I'm now stuck waiting for JSCS to be updated first. This adds negative value to me as a user, I see nothing positive about it.\nAgain, if people want 1 tool so badly, why not make a separate package for this that has both ESLint and JSCS as a dependency? Why clutter the jscs code base?\nJust my 2 cents, coming from a long time fan and user of jscs.\n. Yes, and a different property I could set to false in jsDoc. I don't know the codebase well enough... Is the plugin to blame for this?\n. No worries, I've commented out the rule, so it's no biggy.\n. Thanks for the fix!\n. Possessive form of a plural word ending in 's', seems correct to me.\n. No, this is just for a unit test to match against.\n. How would something like this be (JSON is a subset of YAML, so this would work and is how ESLint loads .eslintrc):\njs\ntry {\n  content = yaml.safeLoad(stripJSONComments(data));\n} catch (e) {\n  throw new Error('Parse error in ' + configPath);\n}\n. yaml\n{\n  \"foo\": \"bar\"\n}\n^ that is valid YAML.\nBy the way, your suggestion was my first reasoning as well :)\n. So what's wrong with my suggested approach? (or isn't there?)\nAgain, it works wonders for ESLint.\n. Hence my custom exception in the code I wrote in a comment above. I'm not throwing a YAML error, nor a JSON error.\n. Yeah, I agree with you there. The error generated by JSON.parse is generally pretty useless though. It doesn't tell you what or where. Just that there's a parse error, right?\n. Oh, I'm a big fan of jsonlint. All for it. But that seems to be outside of the scope of this PR. This PR with what I'm proposing does not make the error more cryptic. Fair enough, \"parse error\" is cryptic in that it doesn't tell me where that error happened, but that's always been the case here. Is this something we can iterate on?\n. Understood. The biggest challenge is figuring out what the user's intention was with regards to format. We could write it:\n``` js\ndata = stripJSONComments(fs.readFileSync(configPath, 'utf8'));\ntry {\n  content = yaml.safeLoad(data);\n} catch (yamlError) {\n  // not valid YAML, so by definition also not valid JSON\n  if (data.trim()[0] === '{') {\n    // assume the intention was JSON\n    content = jsonlint.parse(data);\n  } else {\n    throw yamlError;\n  }\n}\n```\nWould that work for you? I could update it to be like that. If by some miracle jsonlint does successfully parse it (should be absolutely impossible, but hey...) it would not throw but still use the parsed content.\n. That would be valid YAML and parsed correctly, so I'm not sure I understand the concern...\n. I don't really see why not to be honest... It's valid YAML.\nAre you sure you wanna go down the road of what is pretty yaml vs. ugly yaml and do detection based on those assumptions?\nIn any case, if the YAML parsing fails (because they really don't know what they're doing), they will get a pretty JSON parse error with the code I wrote above.\nWould you rather have it reversed? Try JSON first, if that fails, try YAML, if that fails throw an error? I can switch it around...\n. @markelog let me know what you think of this.\nIs the { check overkill?\n. FYI: I moved the JSON down the the final else statement, so that we can benefit from jsonlint's parser.\n. Because if it starts with { it may still be valid YAML.\n. Optional deps always install anyway (it's just that installation failure is allowed. read: compilation failure, and js-yaml has no compiled parts). It wouldn't change the installation behavior or requirements.\n. ",
    "adamreisnz": "Was reading this and seeing how it was raised in 2013, really hoping that it would be in by now. Either a .jscsignore or to specify a path to the ignore file to use, so that .jshintignore can be recycled. Anyway, +1 from me for consistency with other libraries/tools. Might give it a crack myself later if I have some time.\n. @malandrew Thanks for the info. I will look into it as well.\n. I used to think that it's a good thing to have them separate, but I'm not sure anymore. Especially since I find myself just merging the results of jshint and jscs in my gulp tasks anyway. I haven't yet tried the autofix feature, because I'm a bit paranoid about software making coding decisions for me, but if it's only style then perhaps I should give it a go.\n. Stumbled upon this as well... You'd expect the linter to be able to handle JSON files as well, like jshint does. In my gulp process, I just lint all JS and JSON files in one stream. Had to add \"**/*.json\" to my excludeFiles in .jscsrc to prevent this error.\n. I think so, since it's causing errors anyway, might as well.\n. Nevermind, I've managed to suppress the error using\n\"./node_modules/jscs/bin/jscs lib || true\"\n. Certainly.\nI'm using jscs via gulp-jscs 1.6.0 which seems to be using jscs 1.13.1.\nI'm not passing in any specific config parameters.\nThe .jscsrc file looks like this:\njson\n{\n  \"preset\": \"google\",\n  \"fileExtensions\": [\".js\"],\n  \"maxErrors\": 100,\n  \"verbose\": false,\n  \"excludeFiles\": [\n    \"public/**\",\n    \"node_modules/**\",\n    \"client/vendor/**\",\n    \"client/static/**\"\n  ],\n  \"requireParenthesesAroundIIFE\": true,\n  \"maximumLineLength\": 100,\n  \"validateLineBreaks\": \"LF\",\n  \"validateIndentation\": 2,\n  \"disallowMultipleVarDecl\": \"exceptUndefined\",\n  \"disallowKeywordsOnNewLine\": null,\n  \"disallowSpacesInsideObjectBrackets\": null,\n  \"disallowImplicitTypeConversion\": [\"string\"],\n  \"safeContextKeyword\": \"self\"\n}\nI suspect the error arises from an empty switch statement:\n``` js\nswitch (error.code) {\n}\n```\nThe error goes away when I replace it by:\njs\nswitch (error.code) {}\nResulting error is:\nError running rule validateIndentation: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nTypeError: Cannot read property 'loc' of undefined\n. Then:\njs\nreturn '\\'use strict\\';+\\n\\n' +\n    '/**\\n' +\n    ' * Environment configuration (' + envName + ')\\n' +\n    ' */\\n' +\n    'module.exports = {\\n' +\n    '  //Your configuration here\\n' +\n    '};\\n';\ncould also be considered an implicit conversion, because you can never know what's inside envName.. \nIt's not though, because envName is assumed to be a string in this case.\nI think the rule should be limited to finding occurrences of '' + var;, which is an obvious implicit conversion to a string. When you're creating a larger string (not just blank string + var), you probably know what you're doing, so I don't think jscs should warn in those cases.\nJavascript is a loosely typed language after all.\n. Ah bugger :)\n. ",
    "dsebastien": "+1\n. +1 for a change of behavior of this property. I disabled it for now, way too annoying w/ ES2015 :)\n. ",
    "nescalante": "+1, any updates on this one? seems to be backed on bountysource\n. ",
    "keithamus": "The problem here lies within the use of Esprima's \"tokens\" vs the full \"body\" tree object. For a simple test-case we can see:\ntest.js\njavascript\nx = { for: 'bar' };\nThe \"for\" part in the tokens array produces:\njson\n{\n    \"type\": \"Keyword\",\n    \"value\": \"for\",\n    \"range\": [\n        6,\n        9\n    ],\n    \"loc\": {\n        \"start\": {\n            \"line\": 1,\n            \"column\": 6\n        },\n        \"end\": {\n            \"line\": 1,\n            \"column\": 9\n        }\n    }\n},\nbut in the \"body\" property, it produces this ouput:\njson\n\"key\": {\n    \"type\": \"Identifier\",\n    \"name\": \"for\",\n    \"range\": [\n        6,\n        9\n    ],\n    \"loc\": {\n        \"start\": {\n            \"line\": 1,\n            \"column\": 6\n        },\n        \"end\": {\n            \"line\": 1,\n            \"column\": 9\n        }\n    }\n},\nBecause the tokens array (perhaps incorrectly?) puts the \"type\" as \"Keyword\", which is no different to a real for token, JSCS cannot tell it is a Keyword.\nPossible Solutions\n\nMove JSCS to use the \"body\" tree object, so it can more accurately summise what each node type is\nContinue using the \"tokens\" array, but add a lookbehind in the rule, to check if the \"Keyword\" node is inside an object's \"Punctuation\" node\nTalk to Esprima devs or raise an issue about the \"tokens\" array labelling object properties as \"Keyword\"s instead of \"Identifier\"s\n. I'm not sure I follow what you're saying. requireTrailingComma works for Object and Arrays. Both the valid and invalid examples are syntactically valid javascript, but the requireTrailingComma enforces style rules. Could you elaborate further on where you see a bug?\n. \n",
    "JakeChampion": "@mdevils I believe this pr fixes the issue of having \"requireRightStickedOperators\": [\"!\"], in your .jscs.json and then getting an error because the value the user is negating has been wrapped in parentheses like so:\nJavascript\nif (!(/\\bnavigation-panel--wide\\b/.test(this.className))) {\n    .........\n}\n. It's manual fixing. If it's ran as part of a pre-commit process then the amount of errors there are to be fixed shouldn't be too large.\n. ",
    "SBoudrias": ":+1: \n. Awesome!\n. ",
    "thomasgohard": "My pleasure!\n. ",
    "zdroid": ":)\n. @nschonni Yes, I agree. That's the format I want.\n. Not completely. That is about variables, this is about code wrapping.\n. You can find the whole source of program at ZDroid/percent repo.\n2014/1/17 Mike Sherov notifications@github.com\n\n@ZDroid https://github.com/ZDroid Thanks for contributing! Please paste\nthe entire source for this issue... not just the error.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/162#issuecomment-32576140\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. I'll check this as soon as possible.\n. ok\n. Ha, that's good option! :)\n. CJSON isn't bad, +1.\n2014-01-30 Gustavo Henke notifications@github.com:\n\nAlso, YAML is a very clean format.\nHowever, to \"just comment out\", I believe that something like CJSONhttp://npmjs.org/package/cjsoncould be helpful. But I don't think that this is going to be implemented in\nJSCS.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/201#issuecomment-33651436\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. Does the .jscsrc support comments?\n2014-02-11 20:55 GMT+01:00 Mike Sherov notifications@github.com:\n\nClosed #201 https://github.com/mdevils/node-jscs/issues/201.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/201\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. Nice.\n. My settings are https://github.com/ZDroid/percent/blob/master/.jscs.json.\n2014/1/22 Marat Dulin notifications@github.com\n\nI'm agree. We need a warning first. For all operators except ? and :(ternary operator is not yet covered with the other rules).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/205#issuecomment-33016645\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. Hm. Can you give me the complete config which you think that solves this?\n2014/1/22 Mike Sherov notifications@github.com\n\nRemove disallowLeftStickedOperators -. We're deprecating that. Use the\nsame settings for binaryExpressions.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/205#issuecomment-33053856\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. @mikesherov That fixes it. Thanks.\n. What is the line, I can find that?\n. Fixed.\n. ;)\n2014-01-27 Famlam notifications@github.com\n\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/pull/216#issuecomment-33423710\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. :smile:\n. Yea, it's like that, but I don't want that form.\n2014-01-27 Nick Schonning notifications@github.com\n\nPossible dupe of #136 https://github.com/mdevils/node-jscs/issues/136\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/217#issuecomment-33415156\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. @markelog This is the format, but yes, this is the duplicate. :)\n. I want to use \"disallowBlaBlaBla\": true without the need for \"disallowBlaBlaBla: [\",\", \".\", \"!\"].\n. Yes, for specific rule, but not only for one.\n. I agree.\n2014-06-10 15:30 GMT+02:00 Mike Sherov notifications@github.com:\n\nSeems like true and \"all\" cover most cases, but would still be nice to\nspecify:\n\"disallowBlaBla\": { \"allExcept\": [\",\"] }\nWhich is the same as true except for the tokens specified.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/218#issuecomment-45613128.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. It's fixed. ;)\n2014-05-06 14:28 GMT+02:00 Mike Sherov notifications@github.com:\n\nClosed #263 https://github.com/mdevils/node-jscs/issues/263.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/263#event-118208507\n.\n\n\nZlatan Vasovi\u0107 - ZDroid\n. They don't work? :o: \nAlso, I cannot resubmit this because you closed the pull request.\nFirst discuss, then close.\n. This must be some kind of Vow problem. I'm leaving it for now.\n. ",
    "Druotic": "@mikesherov Sorry for the late repsonse.  I plan to implement it eventually, but it will be some time...possible a couple of weeks from now due to various life events :(     If you have time to (or already have) implemented this, be sure to mention this issue so it can be closed.  Otherwise, I'll get around to it eventually. \n. Wow, I had completely forgotten about this...  At this point, probably not.  But, if I change my mind, I'll just check back and see if anyone has added it yet.\n. ",
    "justinanastos": "+1\n. ",
    "ava-dylang": ":+1: To quote my colleges \"How is this not supported yet\". I guess people who write multiple var declarations don't overlap that much with people who like to use linters, or write linters anyway. Anyways glad I found something, anything on this topic.\n. I install jscs via node and I got version 1.10.0. What version was this fixed in?\nOh My bad, looks like the first var statement had a semicolon instead of a comma! \n. ",
    "oredi": "Any preference for the rule name, I will try to take a look into this.\nIf anyone has any idea about an existing rule that can act as a start it will be a time saver.\nOr else I would dig into the existing rules for implementation.\n. Think I found the requireMultipleVarDecl that might be applicable for this. I am thinking about names like requireVarDeclAtTop with the only option value of true unless someone else has better suggestions.\n. @mrjoelkemp  and @markelog  Thanks I will use that and and look into that sample implementation.\n. Sorry I found an issue with the usage of an int counter for the Do Loop opened reference. I am testing a different implementation. I will squash the commits into a single commit and create a new PR when I am done.\n. This will not have any impact on requirePaddingNewlinesBeforeKeywords: [\"while\"], this is the nice thing I like about node-jscs. At least from my initial look into sections of the code all the rules are create using SOLID principles. So changes in 1 rule should not impact other rules. Please correct me if I am wrong here.\nThe change occurred on the disallowKeywordsOnNewLine rule so it does not impact other rules. Saying this I took a look requirePaddingNewlinesBeforeKeywords I do think there is something incorrect when you have do-while loop. It does not handle the situation while you have a } before while. So the following code will fail for requirePaddingNewlinesBeforeKeywords \n``` javascript\nvar i = 0;\ndo {\n        i++;\n} while (i < 10);\n```\nI hope I am answering you correctly. If there is a particular piece of code you use to run against this PR. Do let me know I can try it out for you.\n. I think this will be a special case for requirePaddingNewlinesBeforeKeywords. To keep this thread clean you might want to create a new issue for it. Then we will see if the core developers agree to implement this special case. I can take up the job since I think it will be similar to what I did for disallowKeywordsOnNewLine. But I did to see if what I have done here for disallowKeywordsOnNewLinefits into the direction of the core developers.\n. Thanks let's wait for the feedback of the others on  this.\n. Hi @mikesherov,\nI will take a further look at this in my morning (JST) and let you know.\n. Hi @mikesherov, \nI was exploring the js-file object today and I notice there is a loc.start property on both the node and token objects. I am thinking that these properties could be the key building the array for the search that you are mentioning.  \nAs I am pretty new to this I am not sure if I am hitting in the correct direction of what you require for getNodesByFirstToken. I will continue exploring the code to try to figure what is required here but if you do have someone who can implement this logic faster. I will be willing to volunteer looking into the existing rules referencing an example implementation if you need help working on it.\n. Hi @mikesherov,\nSorry for the repeated comments, I got an idea on how to write getNodesByFirstToken but I wish to check with you about my thoughts to see if what I am doing fits your idea. As I feel there are a lot of changes to js-file object although not in a breaking way. I would like to see if the changes listed below fits into what you envision for getNodesByFirstToken. Thanks\nChanges\n- _buildNodeIndex will be modified to be similar to _buildTokenIndex, instead of _buildNodeIndex  returning just a class with the current index by node type will be modified from \n``` javascript\n_buildNodeIndex: function() {\n  var index = {};\n  this.iterate(function(node, parentNode, parentCollection) {\n    var type = node.type;\nnode.parentNode = parentNode;\nnode.parentCollection = parentCollection;\n(index[type] || (index[type] = [])).push(node);\n\n});\n  return index;\n}\n```\nto\n``` javascript\n_buildNodeIndex: function() {\n  var nodesByType = {};\n  var nodesByStartRange = {};\n  this.iterate(function(node, parentNode, parentCollection) {\n    var type = node.type;\nnode.parentNode = parentNode;\nnode.parentCollection = parentCollection;\n(nodesByType [type] || (nodesByType [type] = [])).push(node);\n\nvar startRange = node.range[0];\n(nodesByStartRange[startRange] || (nodesByStartRange[startRange] = [])).push(node);\n\n});\nreturn {\n    nodesByType: nodesByType,\n    nodesByStartRange: nodesByStartRange\n  };\n}\n```\n- line 39 of js-file.js will be modified from \njavascript\nthis._index = this._buildNodeIndex();\nto \njavascript\nvar nodeIndexes = this._buildNodeIndex();\nthis._index = nodeIndexes.nodesByType;\nthis._nodesByStartRange= nodeIndexes.nodesByStartRange;\n- New function getNodesByFirstToken will be as follows\njavascript\ngetNodesByFirstToken : function(token) { \n  var result = [];\n  if(token.range && token.range[0]) {\n    var nodes = this._nodesByStartRange[token.range[0]];\n    if(nodes) {\n      result = result.concat(nodes);\n    }\n  }\n  return result;\n}\n. @mikesherov Thanks cc @mdevils \nI have modified my PR to include this code and also change the implementation of disallowKeywordsOnNewLine to use it. The changes have been squash into a single commit after merging the latest from jscs-dev:master.\n. Might be related to #1141. I think all the recent PRs will failing\n. @zxqfox Thanks. I see that PR merged and rebased this PR with the latest Master and the build is working now. \n. @mikesherov @mdevils \nI have rebase my PR based on the latest master. While working on the conflict I realized that the spec is starting to get a lot of repeated code. This is just a suggestion, but if this PR is suitable for merging. I could look into re-factoring the spec to make it DRY. I am not doing that now since I am introducing what I think is a fair amount of changes here. So I wanted to keep the tests as original as possible\n. @markelog just for your information reliance on getNodeByRange has been removed and a new method getNodesByFirstToken has been introduced in jsFile. The rule was also modified to use the new method. Thanks\n. @mikesherov should I look into this as well?\n. @mikesherov  Sorry I got held up by my main job lately. It might be a couple of weeks before I can look into this. If it is still open then I will pick it up.\n. @mikesherov I took a look into the code for this rule today and I not sure about using new names since that will involve using a method other that iterateTokensByTypeAndValue. But I am toying with an implementation along this lines.  Please let me know the thoughts on this?\nCurrent\n```\ncheck: function(file, errors) {\n    var excludedTokens = [':', ',', '(', '='];\nfile.iterateTokensByTypeAndValue('Keyword', this._keywords, function(token) {\n        var prevToken = file.getPrevToken(token);\n\n        // Handle special case of 'else if' construct.\n        if (token.value === 'if' && prevToken && prevToken.value === 'else') {\n                return;\n        // Handling for special cases.\n        } else if (prevToken && excludedTokens.indexOf(prevToken.value) > -1) {\n                return;\n        }\n\n```\nProposed\n```\ncheck: function(file, errors) {\n    var excludedTokens = [':', ',', '(', '='];\n    var specialCases = {  'if': 'else', 'default': 'export' }\nfile.iterateTokensByTypeAndValue('Keyword', this._keywords, function(token) {\n        var prevToken = file.getPrevToken(token);\n\n        // Handle special case constructs.\n        if (prevToken && prevToken.value === specialCases[token.value]) {\n                return;\n        // Handling for do special cases.\n        } else if (token.value === 'while' && file.getNodesByFirstToken(token).length === 0  && prevToken.value === '}') {\n            return;\n        // Handling for special cases.\n        } else if (prevToken && excludedTokens.indexOf(prevToken.value) > -1) {\n                return;\n        }\n\n```\n. @mikesherov \nI was trying out the implementation for this and I found that once implemented it will break the string-checker test for the crockford. I extracted a portion of the crockford code below that fail the tests. For backward compatibility I was wondering if it might be a better idea to add a third option for this rule that takes an object with the a boolean flag property to indicate checking comments and an integer value for specifying the min statements\nobj = {\n    method: function () { // requireSpaceBeforeObjectValues\n        return this.datum; // requireDotNotation\n    },\n    datum: 0\n};\n. @stevemao  The PR that was merged included the exception that allows you to place comments between the if closing brace and the else keyword. So the code that you listed is now allowed even if you activated the disallowKeywordsOnNewLine for the \"else\" keyword\n. @stevemao oh sorry I misunderstood your message. The new implementation create an exception on the current option rather create a new one. So there is no way to enforce the code segment you listed as an error now.\n. So the preferred implementation will be a new option and remove the exception on the original implementation? I can work on that if it is preferred\n. @mrjoelkemp related to this I think the description for \"Disabling All Rules\" is misleading. I would think the following might be a little clearer\nDisabling All Rules\nThe placement of the special comments // jscs:disable and // jscs:enable will disable or enable the checking of all rules against the code that appears the comment\n. Sure I will put in one tomorrow with the Doc change for the entire file as well.\n. no problem\n. @markelog \nSorry for not being clear in the PR description. The main issue that this PR fixes is the request to add an object option {open:(boolean), close: (boolean)} to the rule requirePaddingNewlinesInBlocks.\nBut when working on it I found the following:\n    1. Similar tests had to be duplicated for each option supported. For example: \"should report missing padding newline after opening brace\"\n    2. Some tests applied to value true but not the value 1\nSo I refactored the tests to do the following:\n    1. applied to all options except for special cases \"should not report single statement functions\" that is applicable to only the number option\n    2. reuse same code by making the test statement \"abc();\" or \"abc();abc();\" dynamic.\nI wonder if this makes the PR too complex?\n. @markelog . Sure to make this cleaner I am thinking of doing the following:\n1. Create a new issue for refactoring the tests for requirePaddingNewlinesInBlocks.\n2. Create a new PR to for the fix of the new issue\n3. Rework this change after PR in 2 is merged\nFYI the issue for the new option is 529, it was dated sometime back\n. @markelog I have created #1485 for tracking the change for the unit test. I will break the single commit into 2, first for refactoring the unit tests than another for the addition of a new option and update this PR.\n. Hi @markelog,\nI have separated the changes in the PR into 2 commits, I did a rebase to clean up the changes as well. The new option and its usage has been added in the rule file as well.\n. @markelog I think #601 is doing a more detailed report than this. I could change the name if required\nThe reporter implemented by this PR will only show the list of file names with the error count for files with errors found by the rules. The following shows a sample of the output\nfile.js: 1 error found.\nfile2.js: 2 errors found.\nI will do a screenshot of a run when I get back on my PC in another 8 hours.\n. @markelog  I can look into that I believe we could implement this reporter to cover both. I see cli-table as one of the project dependencies so I will use that to create 2 tables showing different summaries. I will update this PR with the new code but it might take some time though.\n. @markelog I have modified the PR making 2 commits for fixing #453 and #1047.\nThis report will now contain 2 tables as shown below, I did not style the tables but it can be done if required.\n\n. Hi @markelog,\nI have merged the 2 commits into a single one since the relevance to the old issue is no longer there. \nStyling to the table has also been applied and I made the widths of both tables similar as well. Please take note that the wow factor introduces an unwanted side effect. In order to make the tables align I had to make the columns fixed width summing to a total of 80 characters (taking 80 characters as the default for terminals)). For error count columns they are usually fine but the rule (49) and path (62) columns might be truncated as shown in the image.  \nBy checking the length of the rule filenames, I think the longest rule in jscs is now 45 characters so unless someone comes up with a very long rule the path column might be the one with a higher chance of being truncated.\n\nI have written the original tests to mimic the output since this is a test suite for a reporter so I thought have the formatted output might make it clearer about what the reporter does. But as per your comments and while working on the styling I found that it make the tests brittle and easily broken as it needs a fair amount of inside knowledge on cli-table. So I have also modified the tests to use regular expressions to reduce the correlation of the tests with cli-table.\nPlease let me know if you feel that more changes are required. \n. For the styling I actually copied from the original code of #601, I have made the easy change and I have also modified the headers to make more space for the path or rule column\n\nFor the tests I was testing out the use of the indexOf and found that the console output actually contains a lot of unicode use for styling so the checking of value for \"Errors\" or \"No of Files\" becomes very tricky.\nAs an alternative I found in package.json the rewire module, with that I was able to access the raw data used in cli-table to test the values rather than messing with the formatting and console related output. It has some drawbacks listed below although I think it is better as the tests are more accurate as only the data is tested instead of data meshed up with display content.\nDrawbacks\n    1. Introduces variables outside the exported module function (I think this is fine as the file is meant to be used in node\n    2. Test file needs to know inners of cli-table and also internal variables of the reporter. \n. @mrjoelkemp Thanks for the pointer and sorry for the newbie mistake :blush:.  The tests and coverage ran fine now\n. @markelog sorry could not look into the comments yet. I will try to put them in before you start your monday. Although while working on this I have to say the rule was more complex then most of what I have work on so far. \n. @markelog  and @mrjoelkemp, I will need some time to look into the changes. I have found some bugs today as well. I will update the PR again when I can get the fixes in and hopefully make the implementation clearer\n. @markelog @mrjoelkemp\nI restructured the tests and code, hopefully this version is clearer. Please let me know if further edits are required\n. @markelog Thanks I missed that scenario, I have put in the fix with the update to the tests.\n@jacksonrayhamilton Support for Directive Prologue 'use strict' has been added to the latest commit, now the rule allows the placement of 'use strict' as the first statement of the Program, Function Declaration or Function Expression scope. I am keeping this as a separated commit as it is a special condition. If everyone agrees I combine them into a single commit. If you have scenarios for other Directive Prologues we will need to add that with additional scenarios.\nI am keeping the name for now but if the others agree with the name change I will do that.\n. @markelog  Thanks and I believe the following code will not cause any issue as the code handles that condition as well. Btw shall I put in another PR to add the rule to the presets for Crockford, Wikimedia and WordPess. And if yes do I need to create an issue for it or just the PR will do?\n    // Example\n    var i;\n@mrjoelkemp Thanks. And the truth is I like this way of coding more. It literally allows me to KISS the code. :)\n. @markelog  sorry looks like you added the presets. Thanks\n. @mrjoelkemp I added the tests for Single comment and removed the regex. I was having issues initially with single line comments as I did not place a line break after the comment. So that commented out the test code after the single line comment. After looking into the other rules for comments, I think I got it right now.\n. @markelog how about minLinesOfCode?\n. @markelog Had some free time today so I updated the PR to use minLinesOfCode instead of minStatements. \n. I will fix the line comments to become block comments before the closing braces and also restructure the options to follow the referenced documentation. As for the name I will wait for more feedback\n. I am good with minLines as well but any suggestions the word statements in the documentation as well\n\"specifies a minimum number of statements in the block before validating\"\n. I will try elements, I am away from my PC. Will get to updating the PR in my Day. :)\n. Updated with changes from the comments\n. @markelog Once this PR is done. I am thinking of going through the other rules to do the same. \nShould I follow what we did there and create an issue/PR for every 4-5 rules I am going to update?\nOr shall I do 1 issue and multiple PRs  for all the rules tobe updated?\n. @markelog Updated with latest comments. Thanks for the commit message, I was trying to look for something like that as the generic format in the documentation did not cover cases with multiple rules in a single commit like this. \n. Replaced validateQuoteMarks with safeContextKeyword as validateQuoteMarks  is already using the new format.\n. No problem anything to make the code better :)\n. @hzoo Sorry for the typo and thanks for the extra pair of eyes to capture it. I have updated the PR.\nCheers. :)\n. @markelog when requireVarDeclFirst  was implemented I did not consider ES6 at that time. I think I could look into allowing let to have block scope. This might take sometime though, is it a time critical requirement or can we let #1069 get released without the requireVarDeclFirst  rule and add that to the preset once I can swing around to fix it. I am looking into a 3-4 weeks time frame as the past 2 weeks will be tight for me to look into this. :)\n. I will look into that when my schedule frees up.\nSomething out of topic but I love the new reporting for npm test \n\n. I might have sometime next week, I will try looking into this. :)\n. Sure. Sorry I had to delay on this as I just let my company and had a little cleaning up to do on the day job.\n. @markelog Sad to see JSCS go away. Anyway sorry for being away for so long, I hope to get some time to look back here now that I am done with relocation. Are we still fixing issues that are open.\n. These were removed to keep the comments DRY. They were there because in the old documentation we do not explain the options parameter. With the new form of documentation, the values section actually provides a more descriptive version of this information. I think it looks better this way and is more consistent with all other rules that had only 1 example listed\n. ",
    "sindresorhus": ":+1: \n. Woooo!\n. Relevant JSHint feature: https://github.com/jshint/jshint/pull/1314\n. > How would one differentiate between real node module and built-in preset config? How about check for the built-in first?\nSure, you shouldn't name your own preset the same as the built-in ones anyway.\n\nAlso not sure about the first step, we could easily check it presence through require method itself.\n\nSure, was just a quick braindump.\n. Real-world usage here: https://github.com/sindresorhus/gulp-jscs/blob/master/index.js#L9\n. :+1: \n. I'm gonna shamelessly suggest switching to Chalk.\nColors is bad since it extends the String.prototype, which affects all loaded modules.\nChalk is able to detect color support and TTY and includes support for overriding with the --color and --no-color flags, so you don't have to care.\n. @mikesherov yes, it checks tty.\n. > which mean it would have a side effect which it did not have before, since it would change state of chalk module.\nWhat side-effect? Sorry I'm not aware of how jscs works internally at all.\n\nis that possible to disable auto-detection of tty?\n\nWhy would you need that when you have chalk.enabled?\n. :+1: This would make JSCS a lot more approachable. And it would open up the possibility of running JSCS on a codebase without a .jscs.json config file and have inconsistencies reported because the style is automatically detected. With this and #516 I think JSCS is on good way on making us not ever having to think about code style in JS again. That's huge!\n. :+1: This would be incredible! There are formatters like esformatter/fixmyjs, but JSCS has the absolute best rules and momentum. With #341 and this, JSCS is going to be the tool I've always longed for since I started with JS.\n. > Is there a reason why the esnext flag is being deleted from the config in the first place?\nNah, just for clarity as it's not a config option, but rather for the constructor.\nThe \"why\" is irrelevant though. JSCS shouldn't interfere with the supplied object.\n. > Neither should the gulp plugin ;-)\nBurn :P That's very true.\n. @UltCombo We're not going to directly re-export it as we need to handle the reporter initiation. But yeah. JSCS could expose a getReporter (clearer than reporter) function.\n. Don't use peerDependencies. They're to be deprecated.\n. I don't know what the officially recommended solution is, just that peerDependencies is not the solution to anything. Dedupe is a good candidate. npm 3.0, which I think is shipping in the near time, is going to dedupe by default on install, which will make deduping a lot more useful.\n. I think JSCS should go with the ESLint approach of shareable config. A preset can then just be a published node module (optionally with the keyword jscs-config for discovery), npm linked module, or just a config file somewhere on the file-system.\nI want to be able to just:\n$ npm install --save-dev jscs-config-foo\njs\n{\n  \"extends\": \"foo\"\n}\nAnd be done with it.\n\nI noticed https://github.com/jscs-dev/node-jscs/commit/72464525fd5804c6bfa5115fc087887265ef1c28, but I couldn't find any docs for it.\n\nI also honestly don't see the point of the built-in presets. Why can't they just be extendable configs on npm?\n. From reading the docs you linked to, I still have no idea how to structure my node module, how to export the config, what keyword to use in package.json, etc. How do I make this a reusable preset?\nThis is IMHO how it should be documented: http://eslint.org/docs/developer-guide/shareable-configs Separate page. Clear instruction on how to structure the module and how to use it.\nCan I make a preset that extends another one? I do that with ESLint.\nExample: eslint-config-xo-space extends eslint-config-xo.\n. > How about i will make a pull to jscs-config-xo repo and based on that pull we will try to create extendable wiki page on how to use those presets?\nSounds good. Happy to review and improve docs when I learn how it works :)\n\njscs-config-xo should be renamed to jscs-xo, right?\n. @markelog Ok, I renamed it to jscs-xo regardless, as that's shorter and nicer.\n. Shouldn't this be in the API and not just the CLI? So every consumer don't have to reimplement it. Re: https://github.com/jscs-dev/gulp-jscs/pull/93#issuecomment-144929578\n. ",
    "doberkofler": "+1\n. +1 for JSHint's approach and +2 for comments and allowing to set an option to false.\n(This would be a great help to comment your setup)\n. Yes it does work! Thank you.\n. +1\n. ",
    "passy": "That's fantastic! :cake:\n. ",
    "MoOx": "This is just awesome. Thanks for you works guys !\n. My example is just invalid.\njson\n\"requireLeftStickedOperators\": [\n      \",\"\n  ]\nValid\njs\nvar x = [1, 2], y = 32\nInvalid\njs\nvar x = [1, 2]\n  , y = 32\nIn the last example, there is nothing before the comma so it should be skipped (like if there is a \\n between the last char & the \"LeftStickedOperator\".\n. Maybe this issue should remain open until esprima 2.0 is integrated here ?\nSo people can track status of jscs + es6 (I've some es6 project I would love to \"validate\" with jscs)\n. Boom https://github.com/mdevils/node-jscs/issues/561\n. Just got this with 1.10.0\n```\nIllegal space before closing round bracket at ./src/components/iconsvg/index.js :\n    35 |\n    36 |  render() {\n    37 |    if (!this.props.svg.trim().match(/^\\s* with  file\")\n    39 |    }\nIllegal space before closing round bracket at ./src/components/iconsvg/index.js :\n    35 |\n    36 |  render() {\n    37 |    if (!this.props.svg.trim().match(/^\\s* with  file\")\n    39 |    }\n```\n. Forget what I said, I werent using that. jsxcs is stuck with ~1.7 :(\nSorry!\n. I don't use .jsx extension & have errors on every jsx line :(\n. This config works for me. Thanks man.\n. Getting the same issue (even with esprima-fb).\n. OH MY.\nThis is a jshint issue.\n. ",
    "valueof": "I don't remember why I kept it. I'll re-visit it and will let you know asap.\n. JSHint\u2014as of 2.5.0\u2014now warns when semicolon is omitted but may cause problems even when asi:true. Unfortunately, I had to remove some checks from the original patch because they generated false positives. I'm definitely open to more improvements though. ASI option should ideally be allow ASI but only when it's not breaking stuff.\n. @mikesherov No.\n. ",
    "popomore": "Great!\n. Actually, esprima has a harmony branch, we can release a harmony version using esprima-harmony\n. Should use esprima-harmony instead of esprima\u2014\nSent from Mailbox for iPhone\nOn Wed, Oct 8, 2014 at 5:02 AM, Eric Clemmons notifications@github.com\nwrote:\n\n@popomore That would be fantastic!  I was just trying to write a rule to resolve this, but apparently that won't work :)\nReply to this email directly or view it on GitHub:\nhttps://github.com/jscs-dev/node-jscs/issues/561#issuecomment-58261452\n. Why not use https://www.npmjs.org/package/esprima-harmony\n\nDownload from github will slow in some bad network.\n. ",
    "phanect": "@markelog Is this function implemented?\nAnd available on latest release?\n. @markelog OK, thanks.\nThen we can get this feature on next major release.\n. Thanks. I will try creating plugin.\nHowever, it is a little bit tough to create a plugin. If import is implemented, it is much easier to separate .jscsrc to another repo.\n. @markelog Oh, sorry, I misunderstood discussion in #109.\nOK, then this issue is duplicate of #109.\n. ",
    "foiseworth": "@mikesherov - was an aim of jscs to maintain compatibility with jslint (when it had this functionality)?\nI'm trying to upgrade to a newer version of jshint and jscs but finding that the trailing option is quite different because it throws an error when there is an empty line with whitespace characters (#719).\n. ",
    "ameyms": ":+1: for this enhancement (and also #92 )\n. ",
    "mgol": "@mdevils Because it's impossible otherwise to silence errors. An 'if', 'else' etc. with an empty body can always be removed but the 'try' block is impossible without 'catch' or 'finally'.\n. Doh, it seems I was wrong, those keys are OK.\n. I'm not convinced. After all, if you decide to enforce this rule, you already have to write things like:\njs\nvar o = {\n    abc: 1,\n   'def-ghi': 2,\n};\nthe same as with numbers. If you want to be extremely consistent here, the only way is to always quote keys.\n. > @mzgol It's a code style preference.\nSure but you can think of many weird style preferences. Someone might e.g. want to quote all the keys with numbers in it (i.e. \"ab1\" instead of ab1) but not ones that are letters-only, etc. etc. It's impossible to support all such ideas so any included ones should look consistent. This IMO doesn't.\n\nI know one guy. He used double-quotes for each keys and values in Objects, except true/false/null and numbers in values. http://json.org/\n\nYou don't have a choice whether to quote values or not. \"null\" is a string and null is null. It's only a question about keys, values can be written in one way only.\n. What do you need the full file for? I extracted a minimal example so that you don't have to hunt for specific problems.\nThe same applies to config - {\"validateIndentation\": 4} is enough to reproduce the issue\n. Anyway, the actual part of the code I mentioned was:\njs\n$httpBackend\n    .expect('GET', cbnBackendConfig.apiUrl + 'tiles/?batch_size=' +\n        cbnResponsiveBatchSize(cbnFrontTileDistributor.calculateBaseColumnCount(assumedWidth)))\n    .respond(testUnitMocksInlinedFrontTiles);\n. I use 1.3.0, the latest version published on npm. Running:\njscs --config .jscs.json test.js\nwhere .jscs.json is as follows:\njson\n{\"validateIndentation\": 4}\nand test.js:\njs\nobject\n    .method('a',\n        'b');\ngives an error:\n```\nExpected indentation of 4 characters at test/unit/spec/worlds/front-world.js :\n     1 |object\n     2 |    .method('a',\n     3 |        'b');\n------------^\n1 code style error found.\n```\nI've retried it on a version from master by removing jscs and installing it via npm i jscs@mdevils/node-jscs and the output is exactly the same.\nThat's a complete example, not sure why you don't see the error.\n. I've just hit that as well, exactly for the reason you specified, @mikesherov, e.g. sth like:\njs\nvar result = function (/* callback */) {\n    // Temporarily commented out.\n//    callback();\n};\nI don't have time to work on it now so just subscribing but if it's not going to be fixed soon, I might try to fix it later.\n. @mikesherov If you have time now, go for it. Otherwise I'll try to find time for it.\n. ?w=1 doesn't solve breaking git blame that will inevitably happen if such indentation changes are introduced from time to time.\nI'll keep an eye on this issue, I can't promise I'll find time to work on it any time soon, though.\n. It also stopped catching \"app/vendor/**\" etc.\n. The first bad commit is d1c72677a17d55c3362fd23145929cf12eda9dde. @markelog, can you have a look?\n. Will do.\n. Works fine with #477!\n. Heh. :/ Such a bad idea.\n. > Basically, you wanted to be able to ignore the rule when the literal is a single line, right?\nMy rule is slightly more complicated, e.g. the following:\njs\nvar a = ['a', 'b', 'c',\n    'd', 'e', 'f'];\nis still considered a \"collapsed\" literal. Basically, if the closing ] or } is in the same line as the last item then it's considered collapsed, otherwise expanded.\nThis is mostly because me and my colleagues consider putting a trailing comma in sth like:\njs\nvar o = ['a', 'b', 'c', 'd',\n    'e', 'f',];\na little ugly and the comma doesn't help with Git diffs in such a case; it helps mostly when each item is in a separate line and closing braces/brackets are in their own lines as well.\nIf you think it's too vague to include, I can still work on a single line case (just not before Wednesday); that would cover the vast majority of my use cases anyway.\n. > @mzgol that's a good rule, although I think it would be a bit more robust to say that collapsed is last element on same line as closing brace AND more than one element per line.\nSeems good to me!\n. > @mzgol that's a good rule, although I think it would be a bit more robust to say that collapsed is last element on same line as closing brace AND more than one element per line. Thoughts?\n@mikesherov I thought about it a little more; by \"more than one element per line\" do you mean that all lines have more than one element? It might be surprising if you change the following code:\njs\nvar a = ['a', 'b',\n    'c', 'd',\n    'e', 'f',];\ninto:\njs\nvar a = ['a', 'b',\n    'c', 'd',\n    'd0',\n    'e', 'f',];\nand suddenly JSCS would complain about the trailing comma...\n. > In terms of short term I think maybe we should remove ',' from the defaults at least for this config variable and maybe others.\nAny news about that? As it stands, the default value of this option is useless.\n. OK, I got confused as I knew we used const inside switch blocks even without enabling esnext. Turns out we had it wrapped in curlies which makes the error go away:\njs\nswitch (x) {\n  case 1: {\n    const a = 2;\n    break;\n  }\n  default:\n    break;\n}\nIs this an intended behavior with esnext disabled? Seems weird.\n. @mikesherov Thanks, that works.\n. Yes, I'm sure, I've checked this in both libsass & Sass. What's invalid here?\nBTW, I've seen this bug for a loooong time, I just didn't have time to create a minimal example before.\n. Oh, crap, wrong repo :dizzy_face: \n. Ah, crap, sorry\n. Apply is not everything; I'd like to have the following:\njs\nfunction f() {\n    return arguments[0];\n}\nbanned as well so that there is no single arguments in my code (maybe except when it's used as a regular, non-special variable but I don't care too much about it).\nBut since this example should be replaced by:\njs\nfunction f(a) {\n    return a;\n}\n& there is no spread there, maybe it's not sth meant for this rule.\n. Indeed, thanks!\n. When is it planned to switch to a newer Esprima by default?\n. I tried both esprima@2.2.0 & esprima-fb@15001.1.0-dev-harmony-fb and both fail on this code.\n. @hzoo thanks for the info\n. @hzoo BTW, the Esprima playground uses Esprima 2.2.0 and it handles such things just fine:\nhttp://esprima.org/demo/parse.html?code=%2F%2F%20Life%2C%20Universe%2C%20and%20Everything%0Avar%20answer%20%3D%20%5B%0A%20%20%20%20...a%2C%0A%20%20%20%20'creatorDetails.creatorCore'%2C%0A%20%20%20%20'titleDetails.titleCore'%2C%0A%20%20%20%20...leftColumn%2C%0A%20%20%20%20...rightColumn%2C%0A%5D%3B%0A%0Avar%20b%20%3D%20%7B%0A%20%20%20%20f()%20%7B%7D%0A%7D%3B\nand yet JSCS with Esprima 2.2.0 installed and:\njson\n{\n  \"esprima\": \"esprima\",\n  \"esnext\": true\n}\nrecongizes neither spread nor shorthand method definitions. Perhaps JSCS invokes Esprima with options that don't support ES6?\n. @hzoo I still can't get it to work with regular JSCS 1.13.1 & Esprima 2.2.0 with \"esprima\": \"./node_modules/esprima\":\n$ ./node_modules/grunt-jscs/node_modules/jscs/bin/jscs .\nError: Unknown node type RestElement.\n    at Controller.traverse (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/node_modules/estraverse/estraverse.js:517:31)\n    at Object.traverse (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/node_modules/estraverse/estraverse.js:709:27)\n    at Object.iterate (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/tree-iterator.js:9:20)\n    at Object.JsFile.iterate (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/js-file.js:359:29)\n    at Object.JsFile._buildNodeIndex (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/js-file.js:752:14)\n    at Object.JsFile (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/js-file.js:39:28)\n    at StringChecker._createJsFileInstance (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/string-checker.js:202:16)\n    at StringChecker.checkString (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/string-checker.js:104:25)\n    at null.<anonymous> (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/jscs/lib/checker.js:43:21)\n    at Array.<anonymous> (/Users/mgol/Documents/projects/bn/cbn/repo/polona-gui/node_modules/grunt-jscs/node_modules/vow/lib/vow.js:711:39)\nThis is happening both with \"esnext\": true and without it.\n. @hzoo I'd love to try babel-jscs but I use grunt-jscs and it doesn't seem to be possible to swap the JSCS package used.\n. @hzoo Ah, thanks, I assumed it's JSCS replacement, not Esprima one as technically speaking Esprima 2.2.0 supports the constructs I care about.\nI found 2 blocker issues after the switch: one is an already-reported non-working validateQuoteMarks, another one is https://github.com/jscs-dev/babel-jscs/issues/4.\n. > f() {} is sugar for f: function() {}. f() is part of the function signature (as you'd define params like f(foo, bar)), so it should adhere to the rules.\nI disagree. While it's true desugaring happens as you described, for me the rules was always about two things:\n1. Do I want a space before ( in function ()?\n2. Do I want a space before ( in function f()?\nIn my projects I'm answering \"yes\" to (1) and \"no\" to (2). The rule for me is - always a space between the function keyword and a paren, never a space between a name and a paren, no matter if the function is anonymous or not. So this:\njs\nconst o = {\n    f() {},\n};\nis for me closer (spacing-wise) to:\njs\nfunction f() {}\nthan to:\njs\nconst f = function () {};\nAfter 1662163 I'm unable to enforce this; to not get linting errors I'd have to drop the disallowSpacesInAnonymousFunctionExpression rule completely.\nIf you want to treat named function expressions and method shorthand separately (which I can understand), please treat method shorthands and anonymous function expressions separately as well. Or at least add an option that allows such a treatment.\nAs it stands, I'm no longer able to update JSCS in my projects.\n. > For this particular request, sounds like we only need to support allExcept:\n\n['shorthandMethod'].\n\nThat would work for me.\n. IMO it should say \"4\", not \"4.0\". You'll miss minor updates to the v4 line which will arrive soon for sure. Only the newest 4.x release is supported by upstream so it doesn't make sense to test specifically on 4.0. Node now follows semver so no breaking changes are allowed to land before Node 5.0.0.\n. LGTM\n. @markelog Could it also auto-close all issues/PRs?\n. Also, maybe coveralls could be disabled to reduce noise on potential new issues. But that's a minor issue. :)\n. > That's exactly what I asked before implementing it :) - no it can't, this bot works only on PRs too.\nIs it not possible to make it work on issues and/or auto-close issues? Is this a restriction of the GitHub API or sth else?\n. @mikesherov IMO there should be tests checking for ' inside \" & vice versa, like:\njs\nvar x = \"'x'\";\nwith validateQuoteMarks: '\"'\n. io.js will most likely receive a minor update or two but no major ones so it will die soon anyway.\nYou may keep it for now but in a month or two no one will use it. :) Few devs switched from Node anyway and those who did will surely switch to Node 4 quickly.\n. ",
    "cvrebert": "Where is it documented that disallowLeftStickedOperators is deprecated?\n. Yes, it does! Hadn't thought to try it. Would be nice if that was documented more clearly.\nThanks!\n. Looks like I was on crack when filing this, as I couldn't repro when trying to put together a nice testcase. My apologies for the trouble!\n. @mikesherov Cool, I'll add docs. Please LMK when the new esprima-harmony is ready.\n. Added docs to the Overview. Let me know if more need to be added somewhere else.\n. Note to self: The method extraction was done in 0253717989b475999e2deea19f124ff1cbb502fd\n. @mikesherov Addressed your feedback.\n. @mikesherov Addressed 2nd round of feedback.\n. @mikesherov Added config tests.\n. Well, yes, the transpiler can be permissive like this because the CJS module system (and probably UMD too) don't impose any such constraint, and those are what it uses when transpiling to ES5.\n. Thanks! I look forward to re-enabling the next release of JSCS on my ES6 project :smile: \n. I'd need to conduct further testing to be sure, but combined with the existing tolerant: true change, this appears to be sufficient to fix #952.\n. @mikesherov Yup, have confirmed that this finishes fixing #952.\n. Any estimate of when the next JSCS release will happen?\n. Yep.\n. Fine, changed & rebased.\n. You just need something that supports Java 8 and lets you run a daily cronjob (or equivalent). (No Carrier isn't a daemon.) I'm not familiar enough with Heroku to say whether it'd be suitable.\nWe happen to run Bootstrap's No Carrier instance on the cheapest DigitalOcean VM (and we have other stuff also running on that same VM).\n. @zxqfox That error is non-fatal and can be safely ignored.\n. If you add it to the wiki, I'd be happy to add a link in the README :-)\n. Looks good :-) I tweaked the phrasing a little and added the README link.\nI'd also love to add JSCS to the list of users, if y'all would be okay with that.\nHope y'all enjoy your new tooling :smile: \n. Okay, made it the default.\n. But then the test doesn't properly test anything..\n. Can't use configure; it only accepts strings, not functions.\n. Can you just make that tweak as part of your rebase when you merge this?\n. ",
    "zz85": "what about disallowKeywordsOnNewLineAfterLineBlock rule for  the else?\neg.\n``` javascript\n// valid\nif (bla) bla;\nelse bla;\n// valid\nif (bla) {\n  bla\n} else bla\n// invalid\nif (bla) {\n  bla\n}\nelse bla\n``\n. :+1: i would find this really useful\n. it looks likerequirePaddingNewlinesInBlocks` requires an identifier to be exact to 2 lines away from the opening and closing braces. can we relax this rule to 2 lines or more?\neg. also valid\n``` js\nif (test) {\ndoSomething();\n}\n```\nif needed, a user can use with disallowMultipleLineBreaks for exactly new lines. i can make a pull request for this.\n. Also, this PR will support this.\ninvalid\n``` js\nif (hi) {\n    // fail\n    hey();\n}\n```\nvalid\n``` js\nif (hi) {\n// ok\nhey();\n\n}\n``\n. i extendedrequirePaddingNewlinesInBlocksto support comments in #371. since this is just the opposite, would you like me to make a pull request?\n. PR made.\n. :+1: \n. yes, I guess we can, with the exception of empty blocks.\n. Sorry I just got to this. @mikesherov thanks for taking over! The new code is much shorter and cleaner!\n. It is common to have!! reversewith the space after!!but not! ! reverse`\n. :+1: \n. oops 1 test is failing, looks like i'll have to update test/data/options/preset/mdcs.js\nwhich actually means the preset is working. is there also tests which catch whether the presents aren't catching styles which should be enforced?\n. updated test data, now passing.\n. Some comments with regards to the autofixing trailing spacing rule in this PR and #1480.\n- this is an example where it's interesting the code handling ASTs has increased complexity compared to a solution which uses only regex\n- approach here seems decent and this is similar to the approach I first took working on this issue. The difference between this PR and #1480 is that there's a little of backtracing here while it's a slightly simpler loop with no backtracking in other PR. \n- I've looked at instance._fix() and errors.cast(). If errors.add() from this PR which takes in an fixed flag, then maybe _fix isn't required for this rule (it's also nice that this could be used instead of errors.assert.emit()). I would understand having fixes and error checking in different passes might be more performant, however to use _fix for implementing for trailing space might be additional overheads (unless we do quick regex for checking errors, then token parsing in _fix) \n- It is not clear whether we should target 2.0 or master branch, and since github doesn't allow switch of branches after opening a PR, might have to open another\n- This PR does not take into account trailing spaces in block comments, therefore the following these would fail here\n``` js\nreportAndFix({\n    name: 'should fix trailing space in block comments',\n    rules: { disallowTrailingWhitespace: true },\n    input: '/\\nbla\\n\\t\\n/',\n    output: '/\\nbla\\n\\n/'\n});\nreportAndFix({\n    name: 'should ignore empty lines in block comments',\n    rules: { disallowTrailingWhitespace: 'ignoreEmptyLines' },\n    input: '/ \\nbla\\n\\t\\n/',\n    output: '/\\nbla\\n\\t\\n/'\n});\n```\n- apart from this, other tests from the other PR passes here and so all tests in this PR passes in other PR.\n- I think the jscs team should pick an implementation they find works the best, I'll be happy autofix for trailing spaces lands quickly so I could close https://github.com/zz85/mrdoobapproves/issues/38\n. :+1: if this gets cleaned up.\n. Just realize that there is also another PR on trailing spaces https://github.com/jscs-dev/node-jscs/pull/1479\n. looks like I've some code coverage to fix. i should also add some autofixing tests, but i'm not where that would go...\n\n. @markelog thanks. will try to add the tests\n. Updated with tests.\n. oops clumsy fingers\n. @markelog do you mean that we should use _fix and target 2.0 instead master?\n. added comments to #1479. also, this travis build seems to be broken only because i closed and re-opened this PR? \n. not sure caps or not is better...\n. think you might have an extra line here according to jscs code style\n. what is fixed use for?\n. shouldn't it be sufficient to do precendingToken === 'undefined'?\n. ok, just saw its use below...\n. .split().join() could be replaced with replace()\n. should file.getLineBreakStyle() be used instead of \\n?\n. is precendingToken.loc.start.line <= (i + 1) &&  precendingToken.loc.end.line >= (i + 1) essentially precendingToken.type === 'Block'?\n. this could be set at where var precendingToken is.\n. this can be rewritten as for (var j = 0, whitespace ; whitespace = targetLine.charAt(j), whitespace.match(/\\s/); j++)\n. it is a matter of choice as well as being more succinct and generating less code\n. ",
    "SeriousM": "Any updates on this?\n. ",
    "Famlam": "Thanks for implementing this! Is it possible to check if the body of a case also exists? I think that in the example of #100, the case \"b\": case \"c\": {...} should not require braces for case \"b\": (for readability reasons, as well as 'empty block' warnings).\n. Sure. Filed as #131 . Thanks again!\n. Thanks! Can't wait until the next release, with all those new options :)\n. Probably this should be more like a feature request in a new issue, but can you disable this check for items that cannot be interrupted by a line break? The best (useful) example I can think of (except for var veryLongVariableNamesThatAreLongerThanTheMaximumLineLengthThatYouSpecified = true) are regexes defined as /regex/.\n. I can try :)\n. Well, I can at least fix number 2:\n``` js\n        function isCommentInRange(start, end) {\n            var comments = file.getComments();\n            return comments.some(function(comment) {\n                return start <= comment.range[0] && end >= comment.range[1];\n            });\n        }\n        file.iterateTokensByType('Punctuator', function(token, index, tokens) {\n            if (token.value === '(') {\n                var nextToken = tokens[index + 1];\n                if (token.range[1] !== nextToken.range[0] &&\n                        token.loc.end.line === nextToken.loc.start.line &&\n                        !isCommentInRange(token.range[1], nextToken.range[0])) {\n                    errors.add('Illegal space after opening round bracket', token.loc.end);\n                }\n            }\n        if (token.value === ')') {\n            var prevToken = tokens[index - 1];\n            if (prevToken.range[1] !== token.range[0] &&\n                    prevToken.loc.end.line === token.loc.start.line &&\n                    !isCommentInRange(prevToken.range[1], token.range[0])) {\n                errors.add('Illegal space before closing round bracket', prevToken.loc.end);\n            }\n        }\n    });\n\n```\nHaven't tried the actual feature request yet as I'm not sure if I can fork jscs while having another pull request opened, and I already have one open.\n. Please make that a separate issue. I'll have a look at this issue in two weeks I guess.\n. Sorry, I got busy lately. I expect to have some time at the end of the month. \nAny suggestion on how to name the rules?\n. @mikesherov @markelog Does any of you have any idea on how to obtain the recently removed jscs-browser.js file? I don't use npm and don't think it's worth the effort of installing npm just to generate that file. If that's not possible, then someone else has to fix this issue and I'll just stick to my old version of jscs-browser.js.\n. @mikesherov do you also have an answer to my last comment please?\n. This was fixed in 1.2.2. Thanks!\n. js\nvar fn2 = function() {\n  \"abcd\"\n    .replace(/a/, \"a\")\n    .replace(/bc?/, function(match) {\n      return \"b\" + (match.length === 2 ? \"c\" : \"f\");\n    })\n    .replace(/d/, \"d\");\n};\nconfig:\njs\n\"validateIndentation\": 2\n. I wouldn't call it 'all' or 'strict mode'.\nStrict mode would suggest to be the implementation of onevar of JSHint, which would also trigger for\njavascript\nfunction main() {\n  var a=5;\n  a += a;\n  var b=5;\n}\nwhich is unfortunately not implemented (hmm, perhaps I should point to this in #102 ).\nInstead, I would keep the current behavior as 'true' (and thus allow either true or \"skipWithEmptyLine\" after your commit).\n. [if I understand you correctly]\nIn that case I would split it up like this:\nrequireMultipleVarDecl:\n-  true: behaves like 'skipWithEmptyLine'\n-  \"strict\": behaves like the current behavior\nrequireVarDeclOnTop:\n-  true: requires all var declarations on top (of the current function, in case of nested functions)\n  (And the combinations of true for the latter and \"strict\" for requireMultipleVarDecl would equal onevar)\n. Ah, right about onevar.\n(as a sidenote: honestly, the name requireMultipleVarDecl is confusing; I had to read your 'true...behavior' line at least three times, with the name of the option in my head...)\nWith consecutive you mean the proposed skipWithEmptyLine option I think? I like your suggestion :)\n. @twoRoger you mean? It's not my branch, is it?\n. Thanks! Please note that the same issue exists for requireMultipleVarDecl :)\n. line 280 (30 lines below your current change)\n. Thanks!\n. @markelog \nHmm, I don't know if the rebase thing went well, but if so, it is ready.\n. Anything else I have to do?\n. @markelog Thanks, I've addressed your comment.\n. Already fixed (and in the next version): https://github.com/mdevils/node-jscs/commit/b2f27670604871d097a90a0c1b039bafe14345d7 ;)\n. Thanks for the quick fix!\n. 'true' => 'smart'?\n. ",
    "jrsinclair": "Would really love to see documentation on how to write a new rule and how to use the API in node.\n. ",
    "Delapouite": "I've started a preliminary overview of the 52 current rules (the yoda's one is currently missing) in a table format :\nhttp://delapouite.com/ramblings/jscs-rules-overview.html\n. You're right.\nWith the current version released on NPM (1.2.4), JSCS  does not recursively search for a config file up to the ~ (home) dir, does it?\nIf that was the case, a simple workaround would be to create a fallback .jscsrc file in my ~ dir and the error would be gone.\n. ",
    "just-boris": "I've successfully generated html-version documentation from readme. Here is generator: https://github.com/jscs-checker/jscs-checker.github.io\nIt's is good temporary solution, but would be better if it can collect information directly from the source. To do that i suggest to add JSDoc description to each rule and generate docs from it.\nIt allow to bind description and implementation of rules and avoid of much work to support docs page.\n. remove unused console.log\n. @markelog you are right, I thought about it.\nBut now I just reworked the existing information from readme. The new format allow to add many features for documentation in future:\n- separate articles with useful information (getting started, jshint migration guide, special page with friendly extensions and other)\n- add some keywords for each rule for better search and grouping\n- add links to related rules (most obvious \u2014 links between require/disallow rule pairs)\nMy approach allows to do it much easier, but now the pull-request contains a lot of changes and will be hard to include here a more.\n. So, you want perfect docs before merging it to the master? I can go on to work, but I have some questions:\n- what do you think about current rule interface? Method getOptionName actually used as property, so it can be converted to it.\n- what attributes of rule description are required? Now rule require title and description, then you can optionally add examples. I've experimented with a special field for the required value in rule config, but this values are too inconsistent and it was hard to support. Add special @jshint annotation with link to related rule in JSHint seems to be easy.\n- what you would see in a special articles (getting started, how to write additional rule, etc)? Now you hasn't something like, and I can't do it alone with your help.\nI'm sure, that you have a plans about it and it would be better if you let me know them.\n. So, you want perfect docs before merging it to the master? I can go on to work, but I have some questions:\n- what do you think about current rule interface? Method getOptionName actually used as property, so it can be converted to it.\n- what attributes of rule description are required? Now rule require title and description, then you can optionally add examples. I've experimented with a special field for the required value in rule config, but this values are too inconsistent and it was hard to support. Add special @jshint annotation with link to related rule in JSHint seems to be easy.\n- what you would see in a special articles (getting started, how to write additional rule, etc)? Now you hasn't something like, and I can't do it alone with your help.\nI'm sure, that you have a plans about it and it would be better if you let me know them.\n. As I understand, you want a single page with all rules something like a page in Bootstrap doc?\n. I've created a separate page with list of all rules. Updated gh-pages\nDo I think in right direction?\n. rebased onto latest master. Add codestyle checks and capitalize titles. Am I missing something?\n. @markelog, your turn\n. Just found that gh-pages of my fork quite popular, because it has been indexed by search engines and my site has top positions. For example:\nhttps://www.google.ru/#q=iife+jscs (1st place)\nhttps://www.google.com/#q=.jscs.json+examples (3rd place)\nhttps://www.google.ru/#q=jscs:+invalid+dangling+underscore+found (1st place)\nIt means that users need better documentation and look for it in google, so my version quite popular because there is no another options. I can provide some data from my Yandex.Metrika counter as a proof.\n. ok, what am need to do?\n. Do it if you want. I was glad to help and provide the proof of concept\n. Hello, glad to see it!\n1. Why are you are parse rules through Regexp instead of JSDoc? It may cause some issues in future when rules will become more complicated.\n2. You still have a very long page with whole rules list. What about short rules index for faster navigation?\nBut I like general direction, and I guess it can be made later\n. @zxqfox it is the easiest way to keep docs and code in sync\n. It was installed by npm install jsdoc --save-dev.\nI've tried 3.2.2 (previous stable), it doesn't use nodejs, but runs embedded rhino through java. I think that is overhead.\n. ",
    "SgtPooki": ":+1:\nThough I would prefer an explicit\n{\n    \"SpaceBeforePostfixUnaryOperators\": {\n        \"require\": [\n            \"++\"\n        ],\n        \"disallow\": [\n            \"--\"\n        ],\n    }\n}\ninstead of \n{\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\n        \"--\"\n    ],\n    \"requireSpaceBeforePostfixUnaryOperators\": [\n        \"++\"\n    ],\n}\n. +1 for generating .jscsrc with all options via CLI (composer, vagrant and other libs generate default config files too, though not with all options)\n. Are there any issues open or talks or plans for doing some sort of summarized report?\nI would love to be able to just get a general consensus of how my code is looking, without actually seeing the specifics. Something like: \ndisallowNewlineBeforeBlockStatements: 45 errors in 5 files\ndisallowTrailingComma: 200 errors in 20 files\nvalidateIndentation: 12,345 errors in 678 files\netc..\n. @zxqfox Thanks but that reporter seems to output each error for each line for each file, the same as all other reporters. I did attempt to use that one before commenting here. It's output was quite ugly tbh.\nWould we just need to create an additional \"summary\" reporter, or is there a way to pass options to reporters?\nEDIT: Disregard, i'm going to write up a quick summary reporter.. it looks fairly simple.\n. No time to submit it in a PR right this moment, but https://gist.github.com/SgtPooki/f13f24517b7a69b93017\nhttp://imgur.com/FBX0C75\n. I sure will. I will get it done tonight.. Finally got the wheel hub pried off my car last night, so tonight is free for a todo item of my choosing. I chose you. :)\n. PR = #601\n. I believe tabs should be used for alignment (or should be allowed to), because simply tabbing to a certain point is much easier than using a spacebar multiple times to align things, only to have a small change impact your whole column's left alignment.\nPlus, some people force tabs in their code style guides, which means not supporting tabs for this rule is going to push all of those people away. And when half of them have already come running from jshint looking for someone to help, shouldn't we step in? \nmaximumLineLength already has a tabSize child, why don't we add a tabSize child to this rule as well?\nI just put together a fix for this and will be submitting a PR.\n. I am fond of both spaces and tabs for alignment.. either way you go though, you need to be able to enforce consistency with an awesome tool such as jscs :smile: \n. @mikesherov so that does mean that the objects wouldn't be aligned in git.. but is that the goal when you're trying to enforce coding style? Or is the goal for everyone in their IDEs and editors to view code the same way?\nbtw, if you want to view a file at a certain tab size, you can always append ts=4 or whatever size you want.\n. But if their tab config is different, jscs will tell them (hey, your stuff isn't lined up) and they would be able to figure out their tab settings were not up to snuff as far as the coding standards for the project goes..\nIf neither jshint nor jscs can help a project lead define their coding standards as far as whitespace goes, what is the solution then? Maybe I'm missing the goal of this project, but isn't Jscs supposed to help people standardize \"javascript code style\" for a project? You don't force people to use google/jquery/yandex code standards, so why force them to use yours?\nI completely see what you're saying, and yes, if people use tabs for alignment its going to look weird in some places. That's why I have my default config set to replace tabs with spaces.. it just makes things more simple.. but not everyone does that (my current client does not). If someone does not follow that standard, is this something where you want to put your foot down to the community and say that jscs does not support using tabs for alignment? \nThis is a huge holy war that has been around for a very long time and imho it is much easier to allow both (i've already submitted a PR that resolves this..) and maybe just warn people who are using tabs for alignment that there is another potentially better option.\n. Looking into this\n. @markelog @mikesherov Do you want me to add the rule and deprecate it or would that also have to wait until 2.0?\nAlso, when are you planning to have 2.0 out? I will continue trying to help with help-wanted labelled bugs and 2.0 milestones, so let me know if there are any issues you specifically want me to work on.\n. @mikesherov I can appreciate an effort of trying to reduce monolithic config options... but I do have to say (i've deleted about 5 different rants now so im going to try to keep this short) that jscs seems like it could be much more DRY by grouping like options... I believe there are a few issues open for that already though.\nOn topic: Would you propose one option per property I have in the above? I don't see any guides for contributing to JSCS, can I just submit a pull request with the multiple options?\n. @zxqfox thanks for that, I did not see that contributing markdown. @mikesherov I can do that. I will try to work on this and some of your help-wanted flagged items sometime this week.\n. Running npm test gives the following output on a fresh clone of this repo (after running npm install):\n```\n\njscs@1.5.9 test D:\\code\\node-jscs-original\nnpm run lint && mocha\njscs@1.5.9 lint D:\\code\\node-jscs-original\njshint . && node bin/jscs lib test bin publish\n\nInvalid line break at lib/checker.js :\n     1 |var vowFs = require('vow-fs');\n--------------------------------------^\n     2 |var Vow = require('vow');\n     3 |var StringChecker = require('./string-checker');\nInvalid line break at lib/cli-config.js :\n     1 |/**\n-----------^\n     2 | * Command line config file finder for JSCS.\n     3 | *\nInvalid line break at lib/cli.js :\n     1 |/**\n-----------^\n     2 | * Command line implementation for JSCS.\n     3 | *\nInvalid line break at lib/comment-helper.js :\n     1 |/**\n-----------^\n     2 | * Returns the lines from a file with comments removed. Will report erroneous\n     3 | * trailing tokens in multiline comments if an error reporter is provided.\nInvalid line break at lib/errors.js :\n     1 |var colors = require('colors');\n---------------------------------------^\n     2 |\n     3 |/**\nInvalid line break at lib/js-file.js :\n     1 |var treeIterator = require('./tree-iterator');\n------------------------------------------------------^\n     2 |\n     3 |/**\nInvalid line break at lib/options/additional-rules.js :\n     1 |var path = require('path');\n-----------------------------------^\n     2 |var glob = require('glob');\n     3 |\nInvalid line break at lib/options/exclude-files.js :\n     1 |var path = require('path');\n-----------------------------------^\n     2 |var minimatch = require('minimatch');\n     3 |\nInvalid line break at lib/options/file-extensions.js :\n     1 |var DEFAULT_FILE_EXTENSIONS = ['.js'];\n----------------------------------------------^\n     2 |\n     3 |module.exports = function(config, instance) {\nInvalid line break at lib/options/preset.js :\n     1 |var presets = {\n-----------------------^\n     2 |    // http://javascript.crockford.com/code.html\n     3 |    crockford: require('../../presets/crockford.json'),\nInvalid line break at lib/reporters/checkstyle.js :\n     1 |function escapeAttrValue(attrValue) {\n---------------------------------------------^\n     2 |    return (attrValue || '')\n     3 |        .replace(/&/g, '&')\nInvalid line break at lib/reporters/console.js :\n     1 |/*\n-----------^\n     2 | * @param {Errors[]} errorsCollection\n     3 | /\nInvalid line break at lib/reporters/inline.js :\n     1 |var util = require('util');\n-----------------------------------^\n     2 |/**\n     3 | * @param {Errors[]} errorsCollection\nInvalid line break at lib/reporters/inlinesingle.js :\n     1 |/**\n-----------^\n     2 | * inlinesingle solves an issue that Windows (7+) users have been\n     3 | * experiencing using SublimeLinter-jscs. It appears this is due to\nInvalid line break at lib/reporters/junit.js :\n     1 |var xml = require('xmlbuilder');\n----------------------------------------^\n     2 |\n     3 |module.exports = function(errorCollection) {\nInvalid line break at lib/reporters/text.js :\n     1 |/*\n-----------^\n     2 | * @param {Errors[]} errorsCollection\n     3 | /\nInvalid line break at lib/rules/disallow-anonymous-functions.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-comma-before-line-break.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-dangling-underscores.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-empty-blocks.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-implicit-type-conversion.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-keywords-on-new-line.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-keywords.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-left-sticked-operators.js :\n     1 |module.exports = function() {};\n---------------------------------------^\n     2 |\n     3 |module.exports.prototype = {\nInvalid line break at lib/rules/disallow-mixed-spaces-and-tabs.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-multiple-line-breaks.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-multiple-line-strings.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-multiple-var-decl.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-newline-before-block-statements.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-padding-newlines-in-blocks.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-quoted-keys-in-objects.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var utils = require('../utils');\n     3 |\nInvalid line break at lib/rules/disallow-right-sticked-operators.js :\n     1 |module.exports = function() {};\n---------------------------------------^\n     2 |\n     3 |module.exports.prototype = {\nInvalid line break at lib/rules/disallow-space-after-binary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var tokenHelper = require('../token-helper');\n     3 |var allOperators = require('../utils').binaryOperators;\nInvalid line break at lib/rules/disallow-space-after-keywords.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-space-after-line-comment.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-space-after-object-keys.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-space-after-prefix-unary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var defaultOperators = require('../utils').unaryOperators;\n     3 |\nInvalid line break at lib/rules/disallow-space-before-binary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var tokenHelper = require('../token-helper');\n     3 |var allOperators = require('../utils').binaryOperators;\nInvalid line break at lib/rules/disallow-space-before-block-statements.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-space-before-postfix-unary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var defaultOperators = require('../utils').incrementAndDecrementOperators;\n     3 |\nInvalid line break at lib/rules/disallow-spaces-in-anonymous-function-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-in-conditional-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-in-function-declaration.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-in-function-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-in-function.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-in-named-function-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-inside-array-brackets.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-inside-object-brackets.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-spaces-inside-parentheses.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-trailing-comma.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-trailing-whitespace.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/disallow-yoda-conditions.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/maximum-line-length.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var commentHelper = require('../comment-helper');\n     3 |\nInvalid line break at lib/rules/require-aligned-object-values.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-anonymous-functions.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-blocks-on-newline.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-camelcase-or-uppercase-identifiers.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-capitalized-constructors.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-comma-before-line-break.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-curly-braces.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-dot-notation.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var utils = require('../utils');\n     3 |\nInvalid line break at lib/rules/require-keywords-on-new-line.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-left-sticked-operators.js :\n     1 |module.exports = function() {};\n---------------------------------------^\n     2 |\n     3 |module.exports.prototype = {\nInvalid line break at lib/rules/require-line-feed-at-file-end.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-multiple-var-decl.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |function consecutive(file, errors) {\nInvalid line break at lib/rules/require-newline-before-block-statements.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-operator-before-line-break.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var tokenHelper = require('../token-helper');\n     3 |var defaultOperators = require('../utils').binaryOperators.slice();\nInvalid line break at lib/rules/require-padding-newlines-in-blocks.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-parentheses-around-iife.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-right-sticked-operators.js :\n     1 |module.exports = function() {};\n---------------------------------------^\n     2 |\n     3 |module.exports.prototype = {\nInvalid line break at lib/rules/require-space-after-binary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var tokenHelper = require('../token-helper');\n     3 |var allOperators = require('../utils').binaryOperators;\nInvalid line break at lib/rules/require-space-after-keywords.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var util = require('util');\n     3 |var texts = [\nInvalid line break at lib/rules/require-space-after-line-comment.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-space-after-object-keys.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-space-after-prefix-unary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var defaultOperators = require('../utils').unaryOperators;\n     3 |\nInvalid line break at lib/rules/require-space-before-binary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var tokenHelper = require('../token-helper');\n     3 |var allOperators = require('../../lib/utils').binaryOperators.filter(function(operator) {\nInvalid line break at lib/rules/require-space-before-block-statements.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-space-before-postfix-unary-operators.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var defaultOperators = require('../utils').incrementAndDecrementOperators;\n     3 |\nInvalid line break at lib/rules/require-spaces-in-anonymous-function-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-in-conditional-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-in-function-declaration.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-in-function-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-in-function.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-in-named-function-expression.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-inside-array-brackets.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-inside-object-brackets.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-spaces-inside-parentheses.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/require-trailing-comma.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var tokenHelper = require('../token-helper');\n     3 |\nInvalid line break at lib/rules/require-yoda-conditions.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/safe-context-keyword.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/validate-indentation.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var commentHelper = require('../comment-helper');\n     3 |\nInvalid line break at lib/rules/validate-jsdoc.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/validate-line-breaks.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/rules/validate-quote-marks.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |\n     3 |module.exports = function() {};\nInvalid line break at lib/string-checker.js :\n     1 |var esprima = require('esprima');\n-----------------------------------------^\n     2 |var Errors = require('./errors');\n     3 |var JsFile = require('./js-file');\nInvalid line break at lib/token-helper.js :\n     1 |/**\n-----------^\n     2 | * Returns token by range start. Ignores ()\n     3 | *\nInvalid line break at lib/tree-iterator.js :\n     1 |module.exports = {\n--------------------------^\n     2 |    iterate: iterate\n     3 |};\nInvalid line break at lib/utils.js :\n     1 |// 7.5.2 Keywords\n-------------------------^\n     2 |var ES3_KEYWORDS = {\n     3 |    'break': true,\nInvalid line break at test/checker.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var sinon = require('sinon');\n     3 |var Checker = require('../lib/checker');\nInvalid line break at test/cli-config.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var configFile = require('../lib/cli-config');\n     3 |\nInvalid line break at test/cli.js :\n     1 |var hooker = require('hooker');\n---------------------------------------^\n     2 |var sinon = require('sinon');\n     3 |var glob = require('glob');\nInvalid line break at test/errors.js :\n     1 |var Checker = require('../lib/checker');\n------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/js-file.js :\n     1 |var assert = require('assert');\n---------------------------------------^\n     2 |var esprima = require('esprima');\n     3 |var JsFile = require('../lib/js-file');\nInvalid line break at test/options/additional-rules.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var configFile = require('../../lib/cli-config');\n     3 |var assert = require('assert');\nInvalid line break at test/options/exclude-files.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var configFile = require('../../lib/cli-config');\n     3 |var assert = require('assert');\nInvalid line break at test/options/file-extensions.js :\n     1 |var path = require('path');\n-----------------------------------^\n     2 |var fs = require('fs');\n     3 |\nInvalid line break at test/options/preset.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/reporters/junit.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var junit = require('../../lib/reporters/junit');\nInvalid line break at test/rules/disallow-anonymous-funtions.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-comma-before-line-break.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-dangling-underscores.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-empty-blocks.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-implicit-type-conversion.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-keywords-on-new-line.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-keywords.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-left-sticked-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-mixed-spaces-and-tabs.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-multiple-line-breaks.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-multiple-line-strings.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-multiple-var-decl.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-newline-before-block-statements.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-padding-newlines-in-blocks.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-quoted-keys-in-objects.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-right-sticked-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-space-after-binary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').binaryOperators;\nInvalid line break at test/rules/disallow-space-after-keywords.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-space-after-line-comment.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-space-after-object-keys.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-space-after-prefix-unary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').unaryOperators;\nInvalid line break at test/rules/disallow-space-before-binary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').binaryOperators;\nInvalid line break at test/rules/disallow-space-before-block-statements.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-space-before-postfix-unary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').incrementAndDecrementOperators;\nInvalid line break at test/rules/disallow-spaces-in-anonymous-function-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-in-conditional-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-in-function-declaration.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-in-function-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-in-function.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-in-named-function-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-inside-array-brackets.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-inside-object-brackets.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-spaces-inside-parentheses.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-trailing-comma.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-trailing-whitespace.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/disallow-yoda-conditions.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/maximum-line-length.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-aligned-object-values.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-anonymous-functions.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-blocks-on-newline.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-camelcase-or-uppercase-identifiers.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-capitalized-constructors.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-comma-before-line-break.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-curly-braces.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-dot-notation.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-keywords-on-new-line.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-left-sticked-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-line-feed-at-file-end.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-multiple-var-decl.js :\n     1 |/ jshint -W098 /\n--------------------------^\n     2 |/ jshint -W030 /\n     3 |\nInvalid line break at test/rules/require-newline-before-block-statements.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-operator-before-line-break.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').binaryOperators.slice();\nInvalid line break at test/rules/require-padding-newlines-in-blocks.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-parentheses-around-iife.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-right-sticked-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-space-after-binary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').binaryOperators;\nInvalid line break at test/rules/require-space-after-keywords.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-space-after-line-comment.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-space-after-object-keys.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-space-after-prefix-unary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').unaryOperators;\nInvalid line break at test/rules/require-space-before-binary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').binaryOperators.filter(function(operator) {\nInvalid line break at test/rules/require-space-before-block-statements.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-space-before-postfix-unary-operators.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var operators = require('../../lib/utils').incrementAndDecrementOperators;\nInvalid line break at test/rules/require-spaces-in-anonymous-function-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-in-conditional-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-in-function-declaration.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-in-function-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-in-function.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-in-named-function-expression.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-inside-array-brackets.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-inside-object-brackets.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-spaces-inside-parentheses.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-trailing-comma.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/require-yoda-conditions.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/safe-context-keyword.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/validate-indentation.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |var fs = require('fs');\nInvalid line break at test/rules/validate-jsdoc.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/validate-line-breaks.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/rules/validate-quote-marks.js :\n     1 |var Checker = require('../../lib/checker');\n---------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at test/string-checker.js :\n     1 |var Checker = require('../lib/checker');\n------------------------------------------------^\n     2 |var assert = require('assert');\n     3 |\nInvalid line break at bin/jscs :\n     1 |\n     2 |var cli = require('../lib/cli');\n----------------------------------------^\n     3 |\n     4 |/**\nInvalid line break at publish/helpers/browserification.js :\n     1 |var fs = require('fs');\n-------------------------------^\n     2 |var path = require('path');\n     3 |\nInvalid line break at publish/helpers/readme.js :\n     1 |var fs = require('fs');\n-------------------------------^\n     2 |var path = require('path');\n     3 |\nInvalid line break at publish/postpublish.js :\n     1 |require('./helpers/browserification').remove();\n-------------------------------------------------------^\n     2 |require('./helpers/readme').restore();\n     3 |\nInvalid line break at publish/prepublish.js :\n     1 |require('./helpers/browserification').create();\n-------------------------------------------------------^\n     2 |require('./helpers/readme').replace();\n     3 |\n192 code style errors found.\nnpm ERR! jscs@1.5.9 lint: jshint . && node bin/jscs lib test bin publish\nnpm ERR! Exit status 2\nnpm ERR! \nnpm ERR! Failed at the jscs@1.5.9 lint script.\nnpm ERR! This is most likely a problem with the jscs package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     jshint . && node bin/jscs lib test bin publish\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls jscs\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.2.9200\nnpm ERR! command \"C:\\nodejs\\\\node.exe\" \"C:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"lint\"\nnpm ERR! cwd D:\\code\\node-jscs-original\nnpm ERR! node -v v0.10.29\nnpm ERR! npm -v 1.4.14\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     D:\\code\\node-jscs-original\\npm-debug.log\nnpm ERR! not ok code 0\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n```\n. haha... autocrlf was set to true on my work box.. \nI've got it working. good call @mikesherov and thanks @mrjoelkemp .\n. @mikesherov Mocha is passing, but 4 tests are pending, is this normal?\n2251 passing (8s)\n  4 pending\n. Thanks @mrjoelkemp .\n. The majority of project tests are failing for me, so I didn't add tests for my code. Are you guys doing anything special for your tests? I didn't look into it too far.\n. @zxqfox  It seems to be giving me sporadic results.\nnpm version: 1.4.14\nnode version: 0.10.29\nand the mocha version I have installed globally and locally is 1.21.4.\nrunning node_modules/.bin/mocha or just mocha gives \n```\n  ..........................................................................Illegal keyword: with at test/data/cli/error.js :\n     1 |with (x) { y++; }\n--------^\n     2 |\nInvalid line break at test/data/cli/error.js :\n     1 |with (x) { y++; }\n-------------------------^\n     2 |\n```\nbut also, sometimes it gives just\n......................................................\nIf I run npm test I was getting sporadic results as well.. but for some reason they've seemed to settle on the following:\n187 code style errors found.\n|\nnpm ERR! jscs@1.5.9 lint: `jshint . && node bin/jscs lib test bin publish`\nnpm ERR! Exit status 2\nnpm ERR!\nnpm ERR! Failed at the jscs@1.5.9 lint script.\nnpm ERR! This is most likely a problem with the jscs package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     jshint . && node bin/jscs lib test bin publish\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls jscs\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"lint\"\nnpm ERR! cwd D:\\code\\node-jscs\nnpm ERR! node -v v0.10.29\nnpm ERR! npm -v 1.4.14\nnpm ERR! code ELIFECYCLE\nnpm ERR!\nnpm ERR! Additional logging details can be found in:\nnpm ERR!     D:\\code\\node-jscs\\npm-debug.log\nnpm ERR! not ok code 0\nnpm ERR! Test failed.  See above for more details.\nnpm ERR! not ok code 0\n. @mikesherov please see #600\n. I almost have the tests complete; I should have them done before Saturday night.\n. @mikesherov let me know if you need anything else with this.\n. @mikesherov jshint may have changed but forin is an enforcing option which means forin:true means that a hasOwnProperty() filter inside each forin is required. I added that filter.\nI also attempted to consolidate my whitespace in as similar manner as i could determine from the rest of the files.. but without those awesome whitespace proposal enhancements or really specific instruction, I am not sure I will be able to get the exact whitespace you're wanting.\n. @mikesherov @mdevils @markelog \nCan one of you look at this PR?\n. @markelog yea I'll get on it this weekend\n. I can do that. This one wasn't quite ready to be reviewed yet, I ran out of time last night.. had to get some sleep!\n. :+1: to all of this\n. :+1: to all of this\n. Yes. SummaryRawResults would produce a row [0] value of 'All' on the last iteration. That iteration would produce an undefined value for brokenRulesObj. If I didn't check for that the test would throw an error.\n. I can remove that.. though it does make for clean IDE editing. my IDE was throwing require/module undefined errors. A ton of your files are throwing the same errors.\nideally you should add these globals to your .jshintrc.. but i'm sure you know that.\nIf you still want this removed, can you explain why?\n. You want me not to abstract out separate logic into separate functions...? I can do that.. but it's odd.\n. Good catch.\n. I can change this.\n. I am used to working on projects with multiple people where additional tests may be added/edited at any time. It is then up to the writer of the tests to ensure that the tests are future proof, otherwise you're editing n*2 files for every n change.\nIf another file was added to the test/data/reporters/summary folder to address another testing concern, this test would still pass (assuming no other broken rules were added)\nAre you sure you want me to hardcode that value?\n. to prevent jshint errors, since jshint cannot recognize that I am asserting that the object does hasOwnProperty, instead of cluttering the code by adding an if clause... \nI can do it either way you like though.\n. Are you talking about keeping configure but moving configureTabSize and configureMode into configure? I guess that's not so bad.\n. I have a super strict jshint file at the root of my code directory that my IDE will fall back to if no jshint is found. I will double check this.\n. @mikesherov can you clarify exactly what whitespace you would approve of? Or would you rather I just remove all empty lines? That has always looked so ugly to me, but I guess I can increase line spacing for your project.\n. @zxqfox I totally agree with separating style commits from code changes. I did not realize that is what he was talking about, or that I had even done it. That is why I asked for clarification.\n. ",
    "hzoo": "Yeah I'm forgetting to update all the function rules - there's (require|disallow)spacesIn functionExpression, anonymousFunctionExpression, namedFunctionExpression, functionDeclaration, function\nfunctionExpression, anonymousFunctionExpression, namedFunctionExpression are basically the same code except for the node.id check\n. We can close this or #698 right?\n. Just closing this in favor of #698 for less duplication.\n. You should be able to use the exnext option or use a different esprima parser (either with --esnext or --esprima='esprima-fb' in cli or in your.jscsrc`\njs\n{\n  \"esnext\": true // uses jscs-dev/esprima-harmony\n  \"esprima\": \"./node_modules/esprima\" // need to npm install esprima or esprima-fb, etc\n}\n. How about you make another issue since it's for blocks with only comments rather than functions? Should be ok\n. Anyone want to summarize what is wanted here? Sounds like we can make an option allExcept`: ['ReturnStatement', 'BreakStatement', 'ContinueStatement']\n. Ok need to change it a bit more since the original option was an array so something like\njs\n\"requireCurlyBraces\": {\n  \"keywords\": [\"if\", \"else\"], \n  \"allExcept\" : ['ReturnStatement', 'BreakStatement', 'ContinueStatement']`\n}\n. What do you mean by this? combine them into a single list or either keywords or allExcept?\n. Oh ok you mean like \"return\", \"break\", \"continue\"\n. #1115 originally was a request for the same rule except for objects. I was confused and suggested ignoreSingleLine option because it was for the requirePaddingNewLinesInObjects (which I suppose we might do anyway). So another rule for objects as well?\n. We're planning on 2.0.0 very soon (I heard monday but that's past :smile: )\n. Moving to #1812.\n. How should we change the options after supporting this? I don't think we have many rules that are numbers since most default to true\nvalidateIndentation: 2 to \nvalidateIndetation: { allExcept: 'module', indentation: 2 }\nvalidateIndetation: { allExcept: 'module', number: 2 }\nvalidateIndetation: { allExcept: 'iife', number: 2 }\n. are we keeping backwards compatibility with the strict option or using allExcept?\n. Any updates on this?\n. Cleaning up some older/inactive issues: going to close and mark as orphaned so we can reopen again at a later time if anyone has PR\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Do we have a strategy for disallowMixedSpacesAndTabs or disallowTrailingWhitespace? Also whitespace related to alignment like requireAlignedObjectValues.\nOther whitespace rules (should be the last ones)\n- [ ] disallowMultipleLineBreaks\n- [ ] disallowSpaceAfterLineComment, requireSpaceAfterLineComment\n- [ ] requireLineFeedAtFileEnd\n. Been awhile for this particular issue, so going to close for now - if we get another PR later we can reopen/review.\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Do we want to close this for now? @mdevils \n. This can be closed now right?\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on.\n. @sylouuu try just\njs\n{\n    validateIndentation: 4\n}\n. I can work on this\n. Can move this to 1.9 or someone else take it - I haven't been able to work on it.\n. Since it uses errors.assert then it should (and it does with errors.assert.linesBetween)!\n. We do have requireSemicolons and disallowSemicolons rules now so see if that can help?http://jscs.info/rules.html#requiresemicolons.\n. Cleaning up some older/inactive issues: going to close and mark as orphaned so we can reopen again at a later time if anyone has PR\n. Cleaning up some older/inactive issues: going to close and mark as orphaned so we can reopen again at a later time if anyone has PR\n. For this rule, can we do file.iterateTokensByType('Line', function(comment) { and then just check comment.loc.start.column === 0 for above and !== 0 for beside?\nI guess there could be other potential rule options related to maximum line length and how short the comment is.\n. oh ok file.getFirstTokenOnLine - what a nice helper\n. Maybe we can change the doc's valid and invalid examples for function expressions to be more specific since the examples for disallowSpacesInFunction are the same in disallowSpacesInFunctionDeclaration and disallowSpacesInNamedFunctionExpression\n. Yeah\n. Awesome. Yeah I should of checked that out earlier but didn't notice it.\n. json\n{\n  \"esnext\": true,\n  \"esprima\": \"./node_modules/esprima-fb\",\n  \"fileExtensions\": [\".js\", \".jsx\"],\n}\nis working for me (after running npm install esprima-fb) with jscs 1.10.0\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. is it #516? Auto formatting API\n. Ok good point - I don't think so.\nAuto formatting seems to mean it will actually correct the code style errors of rules already specified/known. Automatic configuration is changing the jscsrc file to match a specified file or determine code style rules automatically?\n. For new/modified rules now, is it still\n* \"disallowDanglingUnderscores\": { allExcept: [\"_exception\"] }\nbecause some rules like requireSpacesInsideParentheses are using\n* \"requireSpacesInsideParentheses\": {\n *     \"all\": true,\n *     \"except\": [ \"{\", \"}\" ]\n * }\n. Yeah ok!\n. Ok, i'm getting a different error for disallowSpacesInAnonymousFunctionExpression for \"beforeOpeningRoundBrace\": true with es6 class.\nSo it's only when it's a single line. (with esnext and esprima-fb).\nComponent = class {\n  render() { return <div />; }\n------------^\n};\nComponent = class {\n  render() { return func(); }\n};\nThis is fine (like above example https://github.com/jscs-dev/node-jscs/issues/706#issuecomment-61667628)\nComponent = class {\n  render() {\n    return <div />;\n  }\n};\n. Sure! I should probably figure out how to use git better - but got it. But yeah, we should use the requirePaddingNewlinesBeforeKeywords rule to enforce that spacing in tests haha but I guess that's only for keywords now\n. @mikesherov this good?\n. There's a lot of stuff ^ there so I'm not sure what you're issue is @joshjung - if it's too different feel free to just make a new issue. I would be helpful to get an output of what error you get, what rule is wrong (use --verbose), a short code snippet that fails, and relevant .jscsrc config (also what version you are using)\n. Maybe we leave the current exceptions as added to the default array?\n. Ok added in __proto__ and changed to disallowDanglingUnderscores: { allExcept: [] }\n. @mikedfunk If you want jsx support you can use esprima-fb as the esprima parser or babel-jscs\n. Can checkout https://docs.npmjs.com/files/package.json#git-urls-as-dependencies\nif your package.json\n\"jscs\": \"git://github.com/jscs-dev/node-jscs.git#master\",\nor if you have npm > 1.1.65\n\"dependencies\": {\n  \"jscs\": \"jscs-dev/node-jscs\"\n}\n. Where are we with this?\n. Did you use \"disallowDanglingUnderscores\": { allExcept: [\"_exception\"] }?\nYeah the option to allow exceptions hasn't be pushed to the next version (1.8.0 I think?). However the documentation has already been updated.\nSorry, you will have to wait until another version is pushed. For now you'll have to use true\n. https://github.com/altercation/solarized/issues/220#comments - Yeah been like that for a while - maybe try changing the value for that color?\n. Should we close this specific issue since we're talking about a CST now?\n. K added your suggestions: removed 2 extraneous tests, cleaned up hasDefinedVariables var, and also the boolean condition\n. Should I be making changes in multiple commits or just force push the same one again?\n. I guess it's just because of the outdated comments since looking at what changed again might be weird but ok cool.\n. added list format to readme, reorder comments in https://github.com/jscs-dev/node-jscs/pull/749/files#diff-b6e5523d8d2184da7a33a74a9162fc95R34\n. Great!\n. And so this can go in now?\n. Yeah since requireSpacesInFunction seems to only allow the true value, it doesn't let you override the preset which isn't good. Could define a separate preset or maybe change the rules to allow a null value?\n. Ok I guess it's just the warning you get Warning: requireSpacesInFunctionExpression.beforeOpeningCurlyBrace property requires true value or should be removed Use --force to continue. if you use null\n. @markelog - oh ok that makes sense.\n. @stephanebachelier Maybe just null the ones in the google preset and add the ones you need?\nYou didn't null disallowSpacesInAnonymousFunctionExpression rather disallowSpacesInFunctionExpression\n{\n  \"preset\": \"google\",\n  \"maximumLineLength\": null,\n  \"requireSpacesInFunctionExpression\": null,\n  \"disallowSpacesInAnonymousFunctionExpression\": null,\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true, // (2)\n    \"beforeOpeningRoundBrace\": true\n  },\n  \"requireSpacesInNamedFunctionExpression\": { // (3)\n    \"beforeOpeningCurlyBrace\": true\n  }\n}\n. I got no errors on grunt-usemin with\n{\n  \"preset\": \"google\",\n  \"maximumLineLength\": null,\n  \"disallowMultipleLineBreaks\": null,\n  \"disallowSpacesInAnonymousFunctionExpression\": null,\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n  }\n}\n. Since most of the test cases are like .getErrorCount() === 1 or .isEmpty().\nDoes that mean there currently isn't a way to easily test for the positioning?\n. What are we going to do for a demo/repl/sandbox - would be cool if we could integrate with http://astexplorer.net/ somehow instead then\n. ^ looks helpful to me\n. ~~Ok I'l try it~~\n. I think we add another new rule value so you can specify what you need. So an object Although we want to be backwards compatible until 2.0?\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks\n. Moving to https://github.com/jscs-dev/node-jscs/issues/1866\n. I guess that change I added messed it up for multiple lines? I meant to only change it so you couldn't have multiple spaces between parameters. We didn't have any test cases for newlines at the time.\nMaybe we can support newlines by default in 1.8.0 since it was working before in 1.7.0 to be backwards compatible since the config changes from a string to an array?\nMaybe we ignore the check if nextParamToken.loc.start.line = punctuatorToken.loc.start.line + 1\n. Yeah that sounds better\n. Ok updated rule to allow newlines\n. @mikesherov yeah it caused issues with newlines when I updated to 1.8.0 in angular\n. Looking at the source - it was never implemented for case/default so they aren't valid options atm. If you want you can create a new issue to add them.\nAlthough looking now they are valid in requireCurlyBraces (funny). If you want to make a PR for this go ahead! https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-curly-braces.js\n. Moving to https://github.com/jscs-dev/node-jscs/issues/1866\n. requireInitializedVariablesFirst: airbnb, wikimedia.\nrequireInitializedVariablesLast: jquery\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Did we already do these?\n. We can just leave a note in the #807 issue that jquery requires the rule and close this?\n. Closing this in favor of #807\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks\n. Is this closed now?\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks :smiley: !\n. +1 for more Googelability\n. Just make a new entry in the json - the value is an array of strings\n\"keywords\": [\"keywords\", \"go\", \"here\"],\nwords from other packages: jscs, code style, lint, style, validate, check, checker, styleguide, formatter, code quality\n. Is this the only thing left in terms of issues/prs for 2.0?\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks\n. How would we go about checking this?\nThe rule is using value = nextToken.value.\njs\nfoo(\"bar\"); // value = \"bar\"\nfoo('bar'); // value = 'bar'\nquote is single quote, double quote, es6 template\nand then something like if (nextToken.type === 'Literal' && value[0] === quote) { return; }\nunless we have helper method to determine if a token's value is a string\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. You can use babel-jacks now as the esprima parser. https://github.com/jscs-dev/babel-jscs/releases\n. Ok fixed jscs-dev/babel-jscs#1 in babel-jscs 1.0.3\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later. Thanks\n. You can add jscs.info from #873 then right?\n. Yeah sounds good\n. Looks awesome! Small thing but the JSCS icon links to https://jscs-dev.github.io/ which is a 404 now.\n. Definitely don't need that many - but you can also add (ones that are known):\n- Ionic (http://ionicframework.com/)\n- Moment.js (http://momentjs.com/)\n- Ember (http://www.emberjs.com/)\n- TodoMVC (http://todomvc.com/)\n- Famous (http://famo.us/)\nCan add also add jscs.info to the description of the repo once its ready\n. More projects\nFlight: https://flightjs.github.io/\nRxJS: https://reactive-extensions.github.io/RxJS/\nh5bp: http://html5boilerplate.com/\nGhost: https://ghost.org/\n. I think that would be cool! There is browserify setup already so that could work?\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks :smiley: !\n. If i'm not mistaken, I think you can make a new branch for every new feature/PR (and remove when merged), and track/update your master branch with upstream master using something like git pull --ff upstream master since changes are rebased into one history? Maybe should be added to docs?\n. @mikesherov I didn't change much from requireCurlyBraces but it's a good time to refactor/use the new functions we added if possible. I'l also fix the stuff you noted.\n. Fixed the docs, used forEach, moved else check, removed check for case and default and associated tests, and made a isBlockStatement function\n. Oops - yeah that's important! added a check for multilines and tests\n. Ok I see you meant report an error whenever there is a single statement  - you would want them to change it so its a single line if it takes up multiple like with the array one.\n. Ok cool\n. Ok yeah I need to get more familiar with the API. We could also clean up requireCurlyBraces later\n. Came across\n- https://github.com/arasatasaygin/is.js\n- https://github.com/philbooth/check-types.js\n- https://facebook.github.io/react/docs/reusable-components.html#prop-validation - maybe even something similar to React.propTypes?\n. Some stuff on a declarative format:\n``` js\nvalues: [\n    // true,\n    // number,\n    // string\n    // one of the strings in an array\n    // object with properties 'beforeOpeningRoundBrace' and 'beforeOpeningCurlyBrace' which are both true\n];\n// markelog's original one\nvalues: [{\n    type: \"boolean\",\n    value: true\n}, {\n    type: \"number\" // maybe no value?\n}, {\n    type: \"string\"\n}, {\n    type: \"string\",\n    value: ['a', 'b', 'c']\n}, {\n    type: \"object\",\n    value: [ // not sure how this would work\n        { \n            type: \"string\",\n            value: \"beforeOpeningCurlyBrace\"\n        },\n        { \n            type: \"string\",\n            value: \"beforeOpeningRoundBrace\"\n        },\n    ]\n}, ];\n// use constructor functions? (js-schema)\nvalues: [\n    true,\n    Number,\n    ['a', 'b', 'c'],\n    {\n        beforeOpeningCurlyBrace: [String] \n        beforeOpeningRoundBrace: [String] \n    }\n];\n// react type (namespaces to represent things)\nvalues: [\n    Types.true,\n    Types.number,\n    Types.oneOf(['a', 'b', 'c']),\n    Types.object({\n        beforeOpeningCurlyBrace: Types.arrayOf(Types.String)\n        beforeOpeningRoundBrace: Types.arrayOf(Types.String)\n    })\n];\n```\nI do like the 2nd one if something like that is possible?\n. Looks like ESLint has an issue about notifying on config options using a declarative approach too! There's also https://github.com/mafintosh/is-my-json-valid and https://github.com/hapijs/joi.\n. Do we know if we're going to use another tool to validate or make our own?\n. Yeah that's the one ESLint is planning on using as well - https://github.com/eslint/eslint/pull/2179\n. similar to https://github.com/jscs-dev/node-jscs/pull/822?\n. looks great\n. :+1: for 2nd one too\n. This probably isn't as relevant anymore - especially after the cst changes right?\n. Ok closing\n. Yeah although for (var i = 0; !reachEnd && i < elementsToMove; i++) { seems to work though. You can make an issue for it if you want.\n. You should be able to use http://jscs.info/rule/disallowNodeTypes.html with ConditionalExpression for this.\nUnless we want a separate rule for this I think we can close?\n. Going to close this in favor of using \"disallowNodeTypes\": [\"ConditionalExpression\"]. If someone wants to make a new rule/PR we can open again.\n. Oh I see. That specific case is pretty different.\nThere could be another rule for that - I guess you can just check if the node.parent.type === 'ExpressionStatement' and iterating over all ConditionalExpression. People are always free to implement it themselves (as their own separate rule or a PR).\n. Some more help would be looking at the AST for the different types of snippets you want to test for (although you may need to look for more - and unit tests can help with that). You can paste it into http://astexplorer.net/\n``` js\na ? 1 : 0\nvar a = a ? 1 : 0\n``\n. This would be a simple change now:exactly: 1toatLeast: 1?\n. This would be a simple change now:exactly: 1toatLeast: 1`?\n. Do you also need to require spaces? You should be able to just null it.\n{\n  \"preset\": \"airbnb\",\n  \"disallowSpacesInFunctionExpression\": null\n}\nor\n{\n  \"preset\": \"airbnb\",\n  \"disallowSpacesInFunctionExpression\": null,\n  \"requireSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n  }\n}\n. Oh this is the same issue as https://github.com/jscs-dev/node-jscs/issues/927.\nI guess there must be a few places we should change the error message - for rules starting with requireSpaces and are using errors.assert.whitespaceBetween\nor we use the default message?\n. Seems like http://jscs.info/rule/requirePaddingNewLineAfterVariableDeclaration covers it although maybe there should be some more examples \n. Ok I added some more for (disallow|require)SpacesIn* rules. I'l fix the stuff you said too.\n. added some other files that I missed before\n. Made the suggested changes\n. Ok rebased and changed the last commit (requireSpaces) to match the disallow one\n. You can always just add to your .jscsrc file (if you didn't already do that) since everyone has their own changes to make - if the preset doesn't change or won't change soon.\njs\n{\n    \"preset\": \"google\",\n    \"disallowMultipleVarDecl\": null\n}\n. Oh ok different issue (more of a practical thing). I don't seem to see any multiple var dec in the style guide - https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml right? It is true it doesn't mention it explicitly but I can't seem to find examples of var a, b, c but see mostly\njs\nvar userInfo = eval(feed);\nvar email = userInfo['email'];\n. Also :-1: for the default preset for me. We could make the error message with no config better like explaining autoconfigure or using the preset flag.\nESLint has many default rules setup and they are actually planning on moving to have no rules turned on by default (many complaints about what should be in by default, etc). They just added a feature to extend other people's configs (can publish eslint-config-x) http://eslint.org/docs/developer-guide/shareable-configs which is pretty cool (like our presets, except it's by the user rather than ESLint itself).\n. > Our docs should have a big hero banner at the top:\n\nnpm install -g jscs && jscs --init\n\nI would like that to be on the main homepage too - related to https://github.com/jscs-dev/node-jscs/issues/1286 as well.\n. Lets orphan this as well? I think the majority of us disagree on doing this at the moment anyway\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Do we still need to do this?\n. Since you're already doing\nlib/rules/require-padding-newlines-in-blocks.js, you also could go ahead and do the disallow rule as well? Same with lib/rules/require-spaces-inside-parenteheses.js and the test!\n. Ok checking and I got\n- [x] lib/rules/disallow-padding-newlines-in-objects.js\n- [ ] lib/rules/require-padding-newlines-in-objects.js\n- [x] lib/rules/require-padding-newlines-in-blocks.js\n- [ ] lib/rules/disallow-padding-newlines-in-blocks.js\n- [x] lib/rules/require-spaces-inside-parenteheses.js\n- [ ] lib/rules/disallow-spaces-inside-parenteheses.js\nI got requireSpaceAfterKeywords in a PR already (#1061)\n. Yeah\n. Yeah I noticed that when cleaning up some of the rules to use the newer token methods :+1: \n. Yeah we will need a relax/strict option for some of the whitespace rules for alignment. So most likely \nrequireSpaceBetweenArguments and validateParameterSeperator? Similar to #927\nRight now errors.assert.whitespaceBetween with the spaces: 1 option is strictly 1 space for some rules.\n. I think it's https://github.com/jscs-dev/node-jscs/pull/1031\n. looks good!\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Yeah I'l look at the docs.\nI guess I'm not familiar with the term - is it normally file masks? Does file extension work as well?\n. Truly :tada: \n. I guess I can just force push again unless you can rerun the build?\n. Sorry. I've been forgetting haha - more work for you\n. We can also allow failures if needed\nenvironment:\n  matrix:\n  - nodejs_version: \"0.10\"\n  - nodejs_version: \"0.11\"\n  allow_failures:\n  - nodejs_version: \"0.12\"\n  # io.js\n  - nodejs_version: \"1.0\"\n. haha yeah ok\n. Ok went ahead and removed the extraneous spaces option as well - simple fix!\n. Wow this is awesome! I just tried a simple test\n``` js\n// var test = function(options){\n//     for (var i=0;i<asdf.length;i++)\n//         asdf();\n//     x+ y;\n// }\nvar test = function(options) {\n    for (var i = 0; i < asdf.length; i++)\n        asdf();\n    x + y;\n}\n```\nFixes all whitespace errors and prints unfixed ones (indentation, curly braces)\n. Oh I guess https://github.com/jscs-dev/node-jscs/commit/9f09ee0b5389e2f4db4fe83175653b8e9f5306cf closes this? Didn't see this before.\n. Looks like an npm install issue with esvalidate.cmd?\n. Oh okay there's a lot of rules there! - but I don't see require-space-after-keywords in the files changed? So shouldn't be a dupe\n. Hmm this is failing 2 tests: modules/checker fixing fixFile should fix specified file: @mdevils?\nassert.equal(errors.getErrorCount(), 1); \nOh I see, the error count is 0 now since this updates to use token assert so the rule gets fixed.\nShould we modify the tests to either report 0 errors or pick another rule that will give an error?\n. Will this change with the cst integration?\n. I think would be also cool to somehow notify people of new rules/options they can add to their .jscsrc after updating jscs - like a cmd command prompt for them to fix errors/add the new rule or null the rule. Of course they can check the patch notes but this would be easier. \nSo it would be similar to the auto-generation of a config file but this would be if they already have a config and want to easily see what new things they would add to it.\n. I'l give it a shot - although it doesn't seem to have a preference over some things like spaces/tabs and single quote/double quote - just that it should be consistent.\nDon't know if the preset data should just be 5. Practical Style or a lot more.\n. Yeah this errors as well \"esnext\": true, and without esprima-fb\nvar Component = class {\n  render() { return 'asdf'; }\n------------^\n};\nnew Component();\n. This could be for all 3 functionExpression rules then (named, anon, both)\nI looks like the FunctionExpression is { return 'asdf'; }\nso functionToken = { and file.getNextToken(functionToken) = return\nSo it's checking assert whitespace of { and return\nSo I don't know if it means return if parent is MethodDefinition or something - or we need to get the prevTokens to get to render()\n. Oh failing because of requirePaddingNewLinesBeforeLineComments in jQuery\n. Yeah I was just updating the PRs since I forgot to update 2 files\n. Yeah I'l take a look\n. Yeah on #836. Need an exception for foo(\"bar\") - requireSpacesInsideParentheses but except string literals so I guess for\njs\n\", ', `\n. I guess I can finish this now? Never mind still need foo(\"bar\") case\n. Yeah we could land it now if we want (and make an issue for the other rules that need to be created) @markelog \n. @markelog Do we want to release the new preset now and update it later when #836 is done?\n. Ok I can add requireVarDeclFirst.\nJSDoc style is good, but requires a significant time investment - don't think we need to make a rule to prevent jsdoc style unless the rule would be disallowBlockComments.\nEnd of line comments are prohibited!\nThat would be https://github.com/jscs-dev/node-jscs/issues/651 - validateCommentPosition: { position: \"above\" }\n. Getting an error with requireVarDeclFirst on \n``` js\n// Good\nfunction foo() {\n  let foo;\n  if ( condition ) {\n    let bar = \"\";\n}\n}\n```\n. Ok updating with\njs\n   \"requireSpacesInsideParentheses\": {\n        \"all\": true,\n        \"ignoreParenthesizedExpression\": true,\n        \"except\": [ \"\\\"\" ]\n    },\n. Getting\n``` js\nIllegal space after opening grouping parenthesis at 1.js :\n   208 |\n   209 |  Ctor.prototype.setFoo = function( val ) {\n   210 |    return ( this.foo = val );\n--------------------^\n   211 |  };\n   212 |\nIllegal space before closing grouping parenthesis at 1.js :\n   208 |\n   209 |  Ctor.prototype.setFoo = function( val ) {\n   210 |    return ( this.foo = val );\n-----------------------------------^\n   211 |  };\n   212 |\n```\nfor disallowSpacesInsideParenthesizedExpression - adding validatecomment\n. Yeah only requireVarDeclFirst is left? (and we have an issue for that already)\n. It was kind of annoying to depend on a preset (jquery) though - since if you update the jquery preset, then the tests will fail (validateIdentation errors in that case) so I just removed that?\n. Can merge - there's only some rules we haven't implemented yet.\n. So :+1: for this?\n. Ok finally merged - my longest lasting PR! :tada: \n. Can help - Is there going to be a gulp preset or node-style-guide preset as well?\n. Ok just wrote up the specific rules so far. Can start a PR later since this is really long...\n| Node Style Guide | .jscsrc |\n| --- | --- |\n| 2 Spaces for indention | \"validateIndentation\": 2, |\n| never mix tabs and spaces | \"disallowMixedSpacesAndTabs\": true, |\n| UNIX-style newlines | \"validateLineBreaks\": \"LF\" |\n| No trailing whitespace | \"disallowTrailingWhitespace\": true, |\n| Use Semicolons | \"disallowSemicolons\": null (or no rule) |\n| 80 characters per line | \"maximumLineLength\": 80 (any exceptions?) |\n| Use single quotes (except JSON) | \"validateQuoteMarks\": \"'\", |\n| Opening braces go on the same line | \"disallowNewlineBeforeBlockStatements\": true, |\n| whitespace before and after the condition statement | \"requireSpaceAfterKeywords\": true,  \"requireSpaceBeforeBlockStatements\": true, |\n| Method chaining (one per line, indent once) | validateIndentation? #511? |\n| Declare one variable per var statement | \"disallowMultipleVarDecl\": true, |\n| Use lowerCamelCase for variables, properties and function names | \"requireCamelCaseOrUpperCaseIdentifiers\": true, |\n| Use UpperCamelCase for class names | \"requireCapitalizedConstructors\": true, |\n| Use UPPERCASE for Constants | new: \"requireUppercaseConstants\" or extend other rule |\n| Use trailing commas | \"requireTrailingComma\": { \"ignoreSingleLine\": true } |\n| short declarations on a single line |  |\n| Only quote keys when your interpreter complains | \"disallowQuotedKeysInObjects\": true, |\n| Use the === operator | jshint/eslint eqeqeq* |\n| Use multi-line ternary operator | new: \"requireMultiLineConditional\" |\n| Do not extend built-in prototypes | jshint \"freeze\": true |\n| Any non-trivial conditions should be assigned to a var/func | new: \"maxConditionalLength\" |\n| Write small functions | jshint \"maxstatements\": 15 |\n| Return early from functions |  |\n| Name your closures | \"disallowAnonymousFunctions\": true ? |\n| No nested closures | jshint \"maxdepth\": 3 |\n| Use slashes for both single line and multi line comments | new: \"disallowMultiLineComments\" |\n| Don't use Object.freeze, Object.preventExtensions, Object.seal, with, eval, setters | \"disallowKeywords\": [\"with\"] |\n| From Code | JSCS |\n| --- | --- |\n| if (a === '') {} | \"disallowSpacesInsideParentheses\": true, \"requireCurlyBraces\": true |\n| // This function has a .. | \"requireCapitalizedComments\": true |\n| setTimeout(function() { | \"disallowSpacesInFunction\": { \"beforeOpeningRoundBrace\": true }, |\n| function loadUser(id, cb) {} | \"requireSpacesInFunction\": { \"beforeOpeningCurlyBrace\": true }, |\n| if (!a.length) { | disallowSpaceAfterPrefixUnaryOperators |\n| } else { return false; } | \"disallowKeywordsOnNewLine\": [\"else\"], |\n| var foo = 'bar'; var SECOND = 1 * 1000; if (val < 0) { | \"requireSpaceAfterBinaryOperators\": true, \"requireSpaceBeforeBinaryOperators\": true, |\n| var b = {good: 'code', | \"disallowSpaceAfterObjectKeys\": true, \"requireSpaceBeforeObjectValues\": true, |\n| .findOne({ name: 'foo' }) | \"disallowSpacesInsideParentheses\": true? |\nNo opinion?\n- [ ] \"requireLineFeedAtFileEnd\": true,\n- [ ] \"requireSpacesInForStatement\": true,\n- [ ] \"disallowMultipleLineStrings\": true,\n- [ ] \"requireOperatorBeforeLineBreak\": true,\n. We do have disallowKeywords so that's similar in some sense to \"Don't use\" - but yeah not really code style.\njshint \"maxstatements\" is already an option for Write small functions so that's fine.\n. I don't think we will include complexity checks as that's that that much of a style thing - I think you'll have to go with JSHint or ESLint for that (like the maxstatements rule in JSHint). I think we could think about a rule for returning early.\nAlso you can always extend the preset yourself if rules aren't added\njs\n{\n    \"preset\": \"node-style-guide\",\n    \"other-rule\": true\n}\n. Oh ok - yeah presets are meant to be a starting point for your own ruleset so you don't have to read through a bunch of rules. But you might change it to fit your or your team's style more. You can also disable a rule using null.\n{\n    \"preset\": \"jquery\",\n    \"requireCurlyBraces\": null\n}\nYou can even check the .jscsrc for the project: https://github.com/jscs-dev/node-jscs/blob/master/.jscsrc\n. I can't reproduce this on master and can reproduce using 1.10.\nMaybe try updating jscs to a later version or checkout the master branch.\n. I tried\n```\nexport default function startApp(attrs) {\n  var application;\n}\n```\nI did ./bin/jscs ./test.js --esnext and got the error\nbut I added \"esnext\": true to your .jscsrc and got no error...?\nMaybe the cli and config are doing something different? @mikesherov \n. Oh also this is a duplicate of #947. Almost same code snippet haha\n. Hmm yeah this rule needs an exception for function since the previous token is default, and previous to that is export.\n. I think it's similar to #1035\n. Hmm I'm using version 1.11.3 and both jscs ./lib and jscs ./lib/**/*.js is working.\n\noh and just jscs lib/ too.\n. Ok I created the same files in lib/config/temp/ and lib/config/temp/temp2\n\nYeah not sure.. but at least lib/ works at the moment then\n. Maybe it's the package that handles the glob? Or OS specific thing?\n. Added to 3.0 - should be close or leave this open?\n. Yeah it doesn't get closed until a ref commit is merged to master. This is just something to keep in mind when doing 3.0 for semver/adding docs for APIs so people can make rules more easily. \n. Ok I added some the implied ones like function spacing but there's probably a few rules I didn't see to add based on the style.\nWe can also think about adding some of the new rules at a later point like multi line conditionals.\n. rebased - I didn't add anything\n. Ok I realized I didn't add to the overview or add a line to run the test for the preset so I added that and rebased. We should update CONTRIBUTING.md https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md#proposing-additional-presets on that stuff. Can do another commit/PR later if no one else will take it.\n. Is this is the same as https://github.com/jscs-dev/node-jscs/issues/511? If so, there are plans!\nrule looks like it's: disallowOperatorBeforeLineBreak\": [\"+\", \".\"]\n. I don't think we are regarding . as a operator the rule?\nRelated to #511: https://github.com/jscs-dev/node-jscs/issues/511#issuecomment-48851189\n. Right now the Idiomatic (referenced in the wordpress style guide) preset i'm working on is also based on jquery. Shouldn't be too hard to start working on an initial wordpress config if we want to do this. @tommcfarlin, @ntwb? \n. Some rules to start: can do a another PR later\n| Wordpress | JSCS |\n| --- | --- |\n| base styles | jquery preset |\n| single quotes | \"validateQuoteMarks\": \"'\" |\n| 100 char limit is not strictly enforced | \"maximumLineLength\": null? |\n| Any ! negation operator should have a following space | requireSpaceAfterPrefixUnaryOperators: [\"!\"] |\n| Unary operators have no space around them (except !) | \"disallowSpaceAfterPrefixUnaryOperators\": true, \"disallowSpaceBeforePostfixUnaryOperators\": true |\nupdate jquery preset?\n| jQuery | JSCS |\n| --- | --- |\n| indentation with tabs | \"validateIndentation\": \"\\t\" |\n| if/else/for/while/try blocks should always use braces, and always go on multiple lines | \"requireBlocksOnNewline\": true |\n| Any , and ; must not have preceding space. | maybe validateParameterSeparator? Not sure if we have the semicolon rule |\n. Yeah @paulschreiber I'l begin a PR soon so we can start figuring out more rules. \n. @westonruter Should this preset be wordpress-core, wordpress, or something else?\n. Right now I've only started with https://make.wordpress.org/core/handbook/coding-standards/javascript/ since that was the original link that was given. I think we're open to whatever is needed - although I guess wordpress-core since it applies to more people?\n. Great! I started a PR: #1105.\n. If you guys do add it to wordpress core (or even just run it on the codebase) - there will probably be a lot of changes needed to the preset (added and removed). Like https://github.com/jscs-dev/node-jscs/issues/1187.\nSo you can create an issue/PR about it so we can get it in.\nAnd if there's differences in rules because of jquery changes we could move the original jquery rules into wordpress so it doesn't depend on another preset (if needed).\nMaybe it would be interesting to not have to depend on jscs itself for the preset definitions (but that's probably a different thing altogether and maybe already discussed?).\n. This is fixed now from https://github.com/jscs-dev/node-jscs/commit/7d5696af9114db1dcd45585f0b559c3614f231b9\n. @paulschreiber thoughts?\n. Hmm that shouldn't be the case though because there aren't an rules for that (no validateIndentation rule in this or in the jquery preset). I tried with tabs and have no issues?\n. Oh ok I didn't add that rule (forgot).\nAlthough even if I didn't add the rule it shouldn't expect anything with indentation at all.\n(I ran the file with the same jscsrc and also used -p wordpress in cli\n\nAfter adding the rule, it will enforce tabs but otherwise it shouldn't have complained about it.\nhttp://contribute.jquery.org/style-guide/js/#spacing looks like jquery encourages using tabs - do we want to add that to the jquery preset instead?\n. I was wondering if we wanted \"validateIndentation\": \"\\t\" in jquery or this? @mikesherov?\n. Ok rebased + converted to tabs so it won't fail when jquery requires tabs.\n. @paulschreiber. Should be soon, but if you need it now you can pin the package.json to the commit that has the change.\njs\n{\n \"jscs\": \"jscs-dev/node-jscs#4f6115185485706022ba5c71efbca31ce7b21801\"\n}\n. Oh ok. Although (I'm not completely sure, maybe it depends on npm -v) I think that you can install jscs at the root project (for this specific version) and any other pacakges (like grunt-jscs) wouldn't download jscs as a dependency in node_modules and actually use the one you specified yourself. Seems to work after testing it myself. If not you can manually remove the jscs from node_modules in grunt-jscs so that it will use the root one.\njs\n\"dependencies\": {\n    \"grunt-jscs\": \"^1.5.0\",\n    \"jscs\": \"jscs-dev/node-jscs#4f6115185485706022ba5c71efbca31ce7b21801\"\n  }\n\n. @sindresorhus Thanks for the report - I had some trouble as well with setting one up and had to do \"preset\": \"./node_modules/jscs-preset-asdf/jscs.json\". Looks like @zxqfox made https://github.com/jscs-dev/jscs-dev.github.io/issues/40 for this issue.\n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks :smiley: !\n. I think it's not on the website since there hasn't been a release (the rule is only in master now)\n. I think a ignoreSingleLine value would be ok for this then - similar to requireTrailingComma or disallowSpaceAfterObjectKeys.\nAlso I think the array equivalent is https://github.com/jscs-dev/node-jscs/pull/798 - we need to think about consistent names though.\n. Yeah doesn't look like it. Although looking at it again - requirePaddingNewLinesInObjects is a different rule because it requires newlines for each curly brace (so nested objects). Here you are asking for newlines between the elements (I got confused) - which is similar to the current PR for arrays. So it seems like your previous request for an integer config makes more sense.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. JSCS does have inline comments http://jscs.info/overview.html#inline-comments with // jscs:disable - ~~don't know if it's just not working in your case~~.\nWe're still adding support for ES6 ~~so it might be a bug in the rule, although~~ if it says unexpected token then it's probable esprima doesn't support it yet.\nOk I tested and getting the same issue. You are using destructing and default args which doesn't seemed to be supported yet - https://github.com/jquery/esprima/issues/1028. Same with esprima-fb.\n. Just for consistency with https://github.com/jscs-dev/node-jscs/commit/28ba35b23ca70a767f7e03fbb9e56617f74203a4 and https://github.com/jscs-dev/node-jscs/commit/41d250251b7ab75e476b75666bbb1db93bcd4551\n. I ctrl-f'd for if (token.value and .value ===. This was the only other instance left. But I can look through all rules to see.\n. Ok actually found a few more after some searching. I also went ahead to use this.getOptionName() as well.\n. Looks like Travis was down. Should be good now - @mikesherov \n. I think this is the same as #875 if I'm not mistaken?\n. I guess you can check the 3 you finished in #1128!\n. Updated with more rules\n. This is similar to #1116. From the research I did at the time, it seems like it's an issue with esprima not supporting the syntax at the moment. So hopefully soon!\n. Yeah - got it\n. I'l look into it - but yeah there hasn't been a release since 1.11.3 was a while ago so you'll have to run it against master or the commit from the PR.\n. I don't see any errors using the commit d6fcbc or master. You can try \njs\n  \"devDependencies\": {\n    \"esprima-fb\": \"~13001.1.0-dev-harmony-fb\",\n    \"jscs\": \"jscs-dev/node-jscs#master\"\n}\nor \"jscs\": \"jscs-dev/node-jscs#d6fcbc48ab4b09bd1f966a4b9495cd6bf2f9631e\",\n. Right now I'm just using the commit. I think we're planning on releasing tomorrow though?\njs\n\"jscs\": \"jscs-dev/node-jscs#d6fcbc48ab4b09bd1f966a4b9495cd6bf2f9631e\",\n. I saw we had a few errors in docs since we were typing the rule names over and over and sometimes spelling it wrong. Sometimes its because we just copy/paste from another rule and end up with the wrong name. \nWould be interesting if we could get the option name from the file name but maybe that would be weird?\nYeah I think a declarative config would be great.\n. Haha.. maybe we have a few on the front page and another page with everyone? Or we could do logos/pictures instead to fill up the width. Also do we want to give a link to their actual .jscsrc file if it's on github?\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Going to close this issue in favor of https://github.com/jscs-dev/node-jscs/issues/1655 since it's the same?\n. Adding it to more-about-jscs sounds good to me since it'll be in the repo readme if no one see's it on the website.\n. Sounds good to me - JSHint also lets you do jshint . --exclude-path .gitignore\n. This is really old now, but I can't reproduce on jscs 2.2.1 with the rule/snippet anymore. Going to close - let me know if you can still reproduce @Reinmar \n. Yeah it's ignoring the comment so the whitespace > 1.\nif we do\njs\nvar beforeClose = file.getPrevToken(closeBracket);\n// to\nvar beforeClose = file.getPrevToken(closeBracket, {includeComments: true});\nbeforeClose will be a comment with type Block it that case and it passes.\nSounds like a good amount of rules may need includeComments additions?\n. Oh looks like I need ForStatement, ForInStatement, and ForOfStatement?\n. Does it run on a specific file/folder? like jscs ./file.js. It's hard to know the issue since . gets all files in the folder.\nIf you are using ES6 you need \"esnext\": true in the jscs file. You might want to exclude folders like node_modules or something.\n. Ok can reproduce! Yeah looks like an issue with the rule (which I think needs updating for a few other issues as well). \njs\nvar sibling = node.parentCollection[pos + 1];\nif (sibling.type ...\nCannot read property 'type' of undefined: so sibling is undefined.\n. I don't think there's currently anything like that so it would be a new rule. We don't currently have a lot of alignment rules yet - I think the only one so far is requireAlignedObjectValues.\nso maybe the name could be requireAlignedFunctionParameters: true? and probably an option for the minimum number of parameters to check for alignment (maybe you think its ok to have < 2 parameters on a single line so\njs\n// good\nfunction(a, b)\nfunction(\n  a,\n  b,\n  c\n)\n// bad\nfunction(a, b, c)\n. Yeah ok an option for the maximumLineLength (or using the value from the maximumLineLength rule itself if that's possible) could be used instead.\n. Hmm this shouldn't be an issue since the rule is checking for an ObjectExpression. If esnext is enabled esprima should parse it as a TemplateLiteral (and I see it is enabled in the ember .jscsrc. ~~Can you try testing on master or a later release of jscs?~~\nGoing to look into it more.\nEDIT: oh I didn't see the jscs package but it looks like it's in emberjs-build, which uses \"broccoli-jscs\": \"0.0.14\" and is \"jscs\": \"^1.10.0\" which would be the latest?\nOk can reproduce. For some reason in\njs\nvar closingBracket = file.getLastNodeToken(node); // = }\nvar prevToken = file.getPrevToken(closingBracket); // doesn't see the template string and thus = }\nthe prevToken = the } in the template string. I think it's an esprima issue and related to https://github.com/jscs-dev/node-jscs/issues/748 possibly?\n. Hmm this shouldn't be an issue since the rule is checking for an ObjectExpression. If esnext is enabled esprima should parse it as a TemplateLiteral (and I see it is enabled in the ember .jscsrc. ~~Can you try testing on master or a later release of jscs?~~\nGoing to look into it more.\nEDIT: oh I didn't see the jscs package but it looks like it's in emberjs-build, which uses \"broccoli-jscs\": \"0.0.14\" and is \"jscs\": \"^1.10.0\" which would be the latest?\nOk can reproduce. For some reason in\njs\nvar closingBracket = file.getLastNodeToken(node); // = }\nvar prevToken = file.getPrevToken(closingBracket); // doesn't see the template string and thus = }\nthe prevToken = the } in the template string. I think it's an esprima issue and related to https://github.com/jscs-dev/node-jscs/issues/748 possibly?\n. yeah as per @nevir\npackage.json\njs\n\"esprima\": \"mikesherov/esprima#templateStrings\"\n.jscsrc\njs\n\"esprima\": \"node_modules/esprima\"\nbut I dono if that works that easily since its broccoli-jscs?\n. Can close this now?\n. Should this be a bunch of new rules like requireSpacesInGeneratorFunctionExpression? Something similar would be to check the location of the * for\nfunction * ()\nfunction* ()\nfunction *()\nfunction*()\nOh ok there's a similar rule in ESLint http://eslint.org/docs/rules/generator-star-spacing.html\n. Going to at least fix the function spacing rules - we can add the generator spacing rule later.\nI guess it since we check beforeRoundBrace then instead of checking function( vs function ( we check *( vs * (\nSorry this could of been done a lot earlier\n. If its the playground - it's probably because the playground doesn't have an option for esnext. With \"esnext\": true or --esnext it looks like it works fine locally.\n. Thanks for the feedback @adambuczynski - maybe we can just exclude .json by default then?\n. Should we close this and move this issue to the website repo?\n. Or we can do it like Babel https://babeljs.io/users/\n. http://eslint.org/ has a cool/similar thing to babel as well - Can just make an issue asking for company/project name, homepage, license, logo (svg?) and broadcast it.\n. This could be moved to the website repo\n. Ok moving to the other repo: https://github.com/jscs-dev/jscs-dev.github.io/issues/44\n. I think it was because you commented on the commit that I rebased and I guess it got removed... yeah that's still weird though.\n. Oh is requirePaddingNewLinesBeforeLineComments only jquery? I can do a PR to null it (or you can go ahead of you want). Don't know when it be available unless we do a 0.12.1 to fix presets? Otherwise users would need to tag to the specific commit.\n. @paulschreiber Ok added the change, although I was looking at the wordpress handbook - https://make.wordpress.org/core/handbook/coding-standards/javascript/#comments.\nIn the comments section - it says Comments come before the code to which they refer, and should always be preceded by a blank line.\n. Is this an autofix issue? Or if its a rule - then you can use --verbose to check the rule name and we can look at it.\n. Ok great our first auto fix issue! We will need to figure out a minimal test case (which could be difficult). Maybe some of the rules are having issues with not taking into account comments?\n. Yeah sounds good to me. Also any other rules if they are checking kind === 'var' (and looking there don't seem to be any others yet)\n. --auto-configure is kind of documented already in OVERVIEW.md - probably need a longer explanation of what it does. And we can remove the (experimental) part.\n~~And looking at that - I need to fix the bullet for wordpress preset in OVERVIEW.md (there's an extra space)~~\n. :+1:\n. :+1:\n. There's https://github.com/jscs-dev/node-jscs/issues/651 validateCommentPosition\n. Since you're already fixing docs - can you also fix\nhttps://github.com/jscs-dev/node-jscs/commit/4f6115185485706022ba5c71efbca31ce7b21801#diff-9d58844b5d2a3f2d6b78e14720a9d46aR13?\nremove the extra space from the wordpress entry preset in OVERVIEW.md\n. I think this was part of this discussion: https://github.com/jscs-dev/node-jscs/issues/923; requireSpacesInsideArrayBrackets is only on arrays and disallowSpacesInsideBrackets is for all []? \n. This would be fixed with CST as well?\n. That's interesting... so disallowedIdentifiers is an object and the loop adds properties to the object based on the array you pass (so with [ ] it's an empty object).\nSince we check if (disallowedIdentifiers[node.name]) then it becomes disallowedIdentifiers['toString'] and becomes a property access of the object and then becomes the actual function of obj.toString which is truthy and results in the error.\nWe can explicity check for true === true and it should work. Can do a PR for this.\n. Ok makes sense, will update the PR. Do we have any other rules that use this._options = {}; in the same way? I guess it would apply to ones that require a list of strings where someone might put those identifiers?\n. Changed to check with hasOwnProperty.\n. @ljharb Made the change. Should I write a test for this? (configure with [\"hasOwnProperty\"])\n. So this would just check for the presence of the not operator in an if with an else?\n. And only with a single boolean? Would it throw for (a && !b) and (!(a && b))?\n. Ok cool. I'm not sure about a good rule name... disallowNegation... or disallowFalsyCheckInIfStatement..\nUnrelated: It might be interesting to check if a expression can be simplified !(!a || !b) -> a && b.\n. Can work on a PR for this.\n. Well just picked a name to do an initial commit. disallowInvertedConditionalsWithElse sounds good. Or maybe negative\n. I think you can @jscs-dev\n. Go for it! Let us you if you need help suggestions - you can always do a wip PR for feedback\n. Sounds similar to the for loop exception for requireLineBreakAfterVariableAssignment https://github.com/jscs-dev/node-jscs/issues/1157. I can take this.\n. Will this be fixed when we integrate CST?\n. Ok with that the rule name/docs should change as well. disallowNotOperatorsInConditionals to cover both?\n. As of now, we will be checking for !==, !=, !a (need to remind myself about != actually)\nin if() and ternary (a ? b : c)\n. Yeah I just have to change the rule name to disallowNotOperatorsInConditionals and add a check for ternary statement and != which I can do soon.\n. Updated the rule name to disallowNotOperatorsInConditionals, fixed examples/tests - added check for != and ternaries.\n. I still like disallowNotOperatorsInConditionals\n. Oh I didn't add it to the commit - #1205.\n. There was an issue about this - I think https://github.com/jscs-dev/node-jscs/issues/1084? Sorry about that.\n. In the first example, you can't make a function declaration without naming it.\nSo there is an error because it isn't valid js.\njs\nfunction() {\n    var MY_Test = 'hello';\n    return MY_Test;\n}\nYou could do var a = function() {} (function expression) or (function(){})(); (IIFE).\nI don't think I added a rule to check for unnamed function in the preset: https://github.com/jscs-dev/node-jscs/blob/master/presets/node-style-guide.json.\nAre you referring to https://github.com/felixge/node-style-guide#name-your-closures?\n. Unexpected token usually means that esprima doesn't currently support spread or destructuring in that way yet. Yeah esnext would be required as well.\nYou can try esprima-fb maybe? npm install it and either do --esprima=esprima-fb_path or add it to your .jscsrc with \"esprima\": \"path_to_esprima-fb\"\n. Yeah you can refer to what https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-aligned-object-values.js has.\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/token-assert.js.\n. I see.. are you talking about the indentation of all the parameters?\nIt doesn't look like requireAlignedObjectValues is checking for that. So maybe this rule doesn't need to check it since it should be covered by validateIndentation. If so, differentLine is good enough.\nIf not, you could add that in by using errors.assert.indentation like in that rule https://github.com/jscs-dev/node-jscs/blob/f55bbae8bfbd8d57a4f756193d824e6f398ff7a7/lib/rules/validate-indentation.js#L271?\n. Oh haha good point.\n. Oh I missed this, thanks! You can add wordpress too then.\n. I can do another commit now for the shorten flags. Should we add another one for --auto-configure? possibly -a?\n. Ok I don't think it's needed like you said - was more for consistency.\n. Looks like https://github.com/jscs-dev/node-jscs/issues/1237 is a similar issue?\nWe are checking for nextToken.value === } and ) so what about also checking for ,when there are multiple function calls in a list?\njs\na(b => {\n  c();\n}, (d) => {\n  e();\n});\n. Looks good - similar to #1191. Thought I didn't see any others but maybe we should look for === 'var'.\n. Oh @markelog I think we need to add this one since it's the same fix applied to another rule. #1191 was for requireLineBreakAfterVariableAssignment and this seems to be the same issue for requirePaddingNewLineAfterVariableDeclaration?\nLooks like the only other rule it would apply to is requireMultipleVarDecl.\n. What rule is this for? requireNewlineBeforeBlockStatements or something else ? @justin808 if you run jscs with jscs --verbose the error output will give you the rule name.\n. @justin808 I think you need to add the --verbose to the jscs script in package.json because it looks like you are running npm run jscs --verbose instead of npm run jscs which calls jscs --verbose. Because when you look at the output it says > jscs .\n. Ok cool so the rule is requirePaddingNewLinesAfterBlocks.\nYou shouldn't have to use npm run jscs. (I thought npm run meant that you had to have an entry in scripts). Are you not able to do jscs --verbose . from cmd line? If not then you need to do /node_modules/.bin/jscs --verbose . or install jscs globally with npm install jscs -g.\n. Ok socd client && npm run jscs . Can you try cd client && jscs --verbose .?\nOk can reproduce with\njs\na(b => {\n  c();\n}, (d) => {\n  e();\n});\nSo it doesn't look like it's necessarily an esnext issue since arrow functions have a BlockStatement inside.\n. @mikesherov I was suggesting check nextToken.value === ',' as well if that works? I think that is the issue for #1237.\n. Yeah #1237 passes with that change.\n. Yeah ok basically #317, validateNewlineAfterArrayElements for objects - maybe validateNewlineAfterObjectKeys? I'm also suggesting it for destructuring/module imports.\nLooking at the rule, requirePaddingNewLinesInObjects actually only checks for the first/last newline in an object - not for each object key.\n. So the label for this should be new rule instead of bug?\n. Yeah looks like it!\n. This is from http://catatron.com/node-jscs/rules/disallow-padding-newlines-in-blocks/?\nIf you go to http://jscs.info/rules.html it doesn't seem to have this issue (jscs.info is the official site).\n. We should get this in if it's simple to do\n. You should be able to null any rule. Not sure if its clear enough but in the docs it says you can do so in your .jscsrc\njs\n{\n    \"preset\": \"jquery\",\n    \"requireCurlyBraces\": null\n}\n. Yeah currently we only support being able to passing in a different esprima version (such as esprima-fb or harmony). I didn't know about the deprecation, but I see that was recent!\nHave we already talked about supporting other parsers like acorn?\n\nThere may come a day soon where all of the ASTs are completely interchangeable.\n\nFrom that I would say probably since there would be no differences after some time?\n@mikesherov would have a better idea since he is working on esprima/ESTree.\n. I don't think there's any reason to move away from Esprima. One question is if we want to support another parser (Babel/acorn) if they want to use JSX or features that esprima doesn't current support at the moment (ES7) since esprima-fb is being deprecated later.\n. So I think I've got jscs working with babel (by modifying babel-eslint for jscs a bit). Haven't tested that much or anything - works with some es7, etc. But it's getting some errors on rules after running it on larger codebase, babel-core.\nSo you could use a modified version of that and do in your .jscsrc: \"esprima\": \"./node_modules/babel-jscs\", assuming it's called babel-jscs.\n. Yeah we could if anyone thinks it could be an option. @sebmck?\nAfter a lot of tinkering I ended up just having to change it so that it would patch estraverse like babel-eslint does. Oh also added more types to be 'Punctuator' to fix some errors since some node.type ends up as TokenType instead.\n. Thanks @mikesherov. I'm thinking it would just be another parser option. To use it we can just plug it in as another \"esprima\" so no JSCS changes should be necessary. babel-eslint has a acorn-to-esprima.js.\n. Thanks @mikesherov. I'm thinking it would just be another parser option. To use it we can just plug it in as another \"esprima\" so no JSCS changes should be necessary. babel-eslint has a acorn-to-esprima.js.\n. > Also, we should be working to have JSCS take in a serialized AST or an AST in memory as input so that JSCS doesn't even have to do parsing if another tool has already done it.\nSounds good. That could work if using babel + jscs or eslint + jscs as well?\nAnd I guess we can close this in favor of #1353?\n. Looks good? \n. Going to be closing older/inactive issues and labeling with orphaned to track anything we might want to reopen again later (if we want to add it again or something has a PR). Thanks :smiley: !\n. Great!\n. You can \"override the default\" by nulling the preset's rule. Looking at the airbnb preset the rule is actually disallowing. So you would do in your .jscsrc\njs\n{\n  disallowSpacesInAnonymousFunctionExpression: null\n}\nAnd if you want to require it as well then add requireSpacesInAnonymousFunctionExpression as well. In the docs at http://jscs.info/overview.html#preset.\nI think we might want to add that comment about nulling presets in more than once place in the docs since this comes up every once in a while.\n. You can \"override the default\" by nulling the preset's rule. Looking at the airbnb preset the rule is actually disallowing. So you would do in your .jscsrc\njs\n{\n  disallowSpacesInAnonymousFunctionExpression: null\n}\nAnd if you want to require it as well then add requireSpacesInAnonymousFunctionExpression as well. In the docs at http://jscs.info/overview.html#preset.\nI think we might want to add that comment about nulling presets in more than once place in the docs since this comes up every once in a while.\n. Ok I will just make a separate issue for this.\n. Ok I will just make a separate issue for this.\n. Ok I just assumed what the rule was. Yeah I think we could add something like that. And I think we said --verbose should be default in 2.0.\n. Ok nulling rules was also in #971, so that covers the first suggestion.\n. Ok nulling rules was also in #971, so that covers the first suggestion.\n. Changed issue to be about the 2nd issue if we want to do something like that.\n. Although I guess this could be an issue in the website repo instead?\n. Did you run jscs with the esnext flag? you can either do jscs --esnext or put { esnext: true } in your .jscsrc.\nMaybe we could give an error message for the common unexpected identifiers in ES6 and mention you can check using ES6 with esnext.\n. Yeah it's true we wouldn't need it when we add it to be the default.\n. Should we close this then?\n. I was! But now if were just going to remove it anyway a bit later probably better to just to add some more es6 rules.\n. I like alphabetizing the rules although I don't think that's consistently done.\nI did see an ES6 style guide for mozilla/addon-sdk.\n. Since it's saying unexpected token, then it's most likely an esprima issue? We'll have to wait on a change there if so.\n. Yeah ~~, I guess just check if they are already working on supporting it or if it's a bug?~~\n. Ok then maybe the esprima used in jscs for esnext isn't the latest? @markelog \njs\n    \"esprima\": \"^1.2.5\",\n    \"esprima-harmony-jscs\": \"1.1.0-bin\",\nI think we are planning on updating to 2.2 if we didn't already and eventually making esnext default in 2.0. One option is to use the esprima option - you would need esprima as a dependency and use that instead of the one in jscs.\nin package.json\njs\n\"esprima\": \"~2.2.0\",\nin .jscsrc\njs\n\"esprima\": \"./node_modules/esprima\",\n. > Also, is there an issue in JSCS-land for tracking the move\nIssues are jscs-dev/node-jscs#1382 (update esprima), jscs-dev/node-jscs#1353 (support babel)\n. Thanks for contributing! This should be fixed in master already (https://github.com/jscs-dev/node-jscs/commit/ec2f2a24fecf32a97b950ccbc97501bbe353bab0). Similar to #1232.\nThere hasn't been another release yet though so if you want you can add the commit to your package.json or wait.\njs\n\"jscs\": \"jscs-dev/node-jscs#ec2f2a2\"\n// or \n\"jscs\": \"jscs-dev/node-jscs#master\"\n. Looks like it was added 11 hours ago so you'll need to update to #ab17e8 or #latest like you said.\n. Looks like this was added and we never closed this?\n. Maybe the PR would help clarify?\nI think its because the first example is different? Since people usually requireTrailingComma to help with diff reading... I think it's that the comma would seem unnecessary like }, ]);\n``` js\nfoo([{\n    bar: 'baz',\n}, {\n    qux: 'quux',\n}, ]); // the comma isn't the last token on that line\nfoo({\n    bar: 'baz',\n    qux: 'quux', // comma is the last token\n});\n// or you do this\nfoo([\n{\n    bar: 'baz',\n},\n{\n    qux: 'quux',\n},\n]);\n```\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Yeah I know it seemed like it to me but from the comments at the bottom.\n\"In ES6 modules, you don\u2019t technically use destructuring: the syntax is similar, but you are importing bindings, not values.\" @rauschma?\nAnd the AST is different as well. So I don't know if we want the same rule or different rules for naming purposes. Maybe we want a separate rule just for newlines when using destructuring since this issue is specifically for when you require.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Hmm my initial thoughts were just to check for the presence of an identifier called arguments in a function and error on that? No idea for autofix. And looking at the now I meant rest haha.\n. I guess we already have disallowIdentifierNames - which checks for identifiers + properties.\n. Yeah so this should be covered already - I guess we can close it? The preset is interesting though because that rule would only be turned on for ES6. I don't know if we want to have 2 presets, one for ES6/ES5...\nFor later, I think it might be nice to allow people to use presets that aren't in jscs itself. Depends on if we want to maintain or allow others to maintain it.\n. Yeah we could do that for a bunch of rules but it seems messy.\nMaybe it's simpler to make another preset called airbnb-es6 or something. If it only adds rules, then it could just extend airbnb and add more rules?\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Are you not using esnext: true and what version of jscs?\nCan you run with --verbose to get the exact rule?\nI don't think the parser supports async/es7 yet so it probably isn't an issue with that. \n. Oh ok. We just added verbose: true in the config in master (so for now you would need to run it from cli). \nBut looking at the message I assume the rule is for disallowSpaceBeforeBinaryOperators?\n. @respectTheCode this still an issue?\n. @jscs-dev Should I keep adding more ES6 rules as seperate issues or make a issue for ES6 in general so we can discuss and eventually make separate ones? Also do we have a roadmap for what we want to do next?\n. Ok most of these are from airbnb - any other rules are just potential styles I notice from looking at the es6 features. Yeah it would be cool to use es6 features in jscs (template strings for tests instead of string concat and newlines).\nRoadmap: #1318\n. Yeah I'l keep it in mind - I thought of validateNewlineInModuleImports because it was similar to another rule already.\n. Moved to https://github.com/jscs-dev/node-jscs/issues/1390\n. Haha good point. Then\njs\ndisallowKeywords: {\n  es6: ['var']\n}\n. Thanks for the info - in this case we aren't making any new rules since disallowKeywords and disallowIdentifiers already covers those kinds of cases.\n. I think we were going to add a new rule option for disallowKeywords and disallowIdentifiers (#1305) but we could make a new issue for that.\n. The issue would be for #768 (for tracking). Thanks!\n. Well in that case I guess we might want the opposite haha; not required or anything but would be nice.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Should this be closed then?\n. Ok since I wasn't sure if we wanted one anymore since there's 2.0 issues and milestones already. (But I would like one anyway)\n. I think it's an issue with esnext as a cli option.\nI tested with putting esnext: true in a .jscsrc and it works (and doesn't with --esnext, so any esnext features don't work).\n. Great! And using --esnext in cli will be fixed in the next release as well.\n. Yeah looking at the rule, it current only accepts a single string. We could allow it to accept an array or an object with both of those as properties.\njs\nrequireAlignedObjectValues: {\n  \"ignoreFunction\": true,\n  \"ignoreLineBreak\": true\n}\nWould you like to take this? Should be a few examples from the other rules that allow something like this.\n. It's because of the if (file.getDialect() !== 'es6') { which we were discussing might not be needed?\n. Ok squashed and removed getDialect check.\n. Thanks - sounds good.\n. I think that could be covered in #1305 with disallowIdentifierNames: ['arguments']. Although if we somehow want to do autofixing then maybe we could do a separate rule not sure.\n. Yeah that sounds good to me.\nIn requireSpaceBeforeBlockStatements, disallowNewlineBeforeBlockStatements we do\njs\nfile.iterateNodesByType('BlockStatement', function(node) {\nI guess we could check the node.parent and it's type?\njs\nif (node.parentNode.type === 'BlockStatement' || node.parentNode.type === 'Program') {\n  return;\n}\nDon't know if we have a utility method to check for bare blocks? There's about 10 block related rules now.\n. Sorry for the late reply - I tested this again and cannot reproduce with \njs\n{\n  \"requireSpaceBeforeBlockStatements\": true,\n  \"disallowNewlineBeforeBlockStatements\": true\n}\nIf that's the correct config\n. Closing since it seems to be fixed (at least on the latest version / 2.0) since I see jsdom is using 1.x\n. Oh sorry I tested it and thought it was still a block :disappointed: so I thought it passed. Will make a fix later.\nI guess requireSpaceBeforeBlockStatements is passing but disallowNewlineBeforeBlockStatements is not\n1913\n. Workaround is to not use the parens () since it's not needed but we should fix this.\nNot sure why the test is passing\njs\n        it('should not report with spaces with parenthesizedExpression #1332', function() {\n            var parenthesizedExpression = 'for (var i = 0; (!reachEnd && (i < elementsToMove)); i++) {}';\n            expect(checker.checkString(parenthesizedExpression)).to.have.no.errors();\n        });\nso file.getFirstNodeToken doesn't account for parenthesizedExpression?\n. @mzgol It's a good suggestion - I made an issue for disallowing arguments in favor for rest in #1305 and .apply for spread in #1326 and the suggestion is the same as here - except to possibly make an option for es6/es5.\n. Ok testing on other code.. \njs\n// Identifer, Literal\nval + 1\nval + true\nval + 'a'\nval + \"a\"\n// Identifer, TemplateLiteral\nval + `a`\nWill need to actually check the value of the literal to prevent errors on val + 1 when it's intended to add numbers, so I guess add a check for typeof value !== 'number'?\n. Yeah another implementation from ember-suave here: https://github.com/dockyard/ember-suave/blob/4303e94782cb18f70f072fe4e211619e11a2e42a/lib/rules/require-template-strings-for-concatenation.js.\nShould the rule be renamed to: requireTemplateStringsForConcatenation?\n. Ok I just rebased it and moved the rules together\n. Ok messed up the rebase so your commit only has the changes in the rule if that's ok. Or are we going to rebase into to 1 commit anyway? (I added a test for coverage).\n. Yeah it should be. Add fileExtensions: true in your config. http://jscs.info/overview.html#fileextensions\nAlso -c is the config option so you need to pass a path for that. http://jscs.info/overview.html#cli\n. I think this either needs to only error for a single line or have the option?\nAirbnb\n\nIf the function body fits on one line and there is only a single argument, feel free to omit the braces and parentheses, and use the implicit return. Otherwise, add the parentheses, braces, and use a return statement.\n\nSince you can return a single object/array but it's multi-line.\njs\na.map(b => {\n  return {\n    a: 1,\n    b: 2,\n    c: 2,\n  };\n});\na.map(b => ({ a: 1, b: 2, c: 2, });\n. I don't remember if I made an issue for false already. I think we should rename this issue to be general or make a new one if we are going to allow false instead of nulling the options.\n. @TheSavior\n. I would like something to help add new rules to your .jscsrc. http://csscomb.com/config is pretty cool (although it doesn't allow an existing config and you can't go back).\n. I think anyone would appreciate something to help adding new rules/options whenever there is a new version?\n. You can use esprima-fb as the parser if it supports that syntax.\n. Yes you would use both. You can also just put it in your .jscsrc: \njs\n{\n  \"esnext\": true,\n  \"esprima\": \"./node_modules/esprima-fb\",\n}\nesnext by default uses https://github.com/jscs-dev/esprima-harmony unless you change esprima (like to esprima-fb).\n. Ok wasn't sure if it supported it so I gave the suggestion: if it supports that syntax. But yeah it seems that it's not - https://github.com/facebook/esprima/issues/63 and is in es7?\n. Did a PR - Ok so\njs\nif(x){} else if(x){} else{}\nis giving an error for \"disallowSpaceAfterKeywords\": [ \"else\" ] right?\n. I forgot what we said about esprima - I'm assuming leave it for now?\nI know updating estraverse > 2.0.0 will break because of ExportDeclaration changing.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. So are we planning on removing all the deprecated options/values (can probably grep for deprecated) as well this release?\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. I suggested requireShorthandArrowFunctions because for the 2 examples for the rules both are still arrow functions right? The other one just doesn't have the block and return statements.\nAnd also I was thinking we could do another rule called requireArrowFunctions which would ask for an arrow function when possible instead of resassigning this or bind (basically figure out whenever it's a possible replacement which should be all anon functions / function expressions I think).\n. Thanks for the request - this is similar to #1344. #1270. I got it working with babel by passing a version of it (modified babel-eslint) into the custom esprima parser option but it still has errors from what I've found so maybe soon?\n. Ok #1353\n. @moroshko, @olanod, @ben-ng - If you want to try it out, I created https://github.com/hzoo/babel-jscs for testing (no npm package yet).\nWill wait for the next release and then move to https://github.com/jscs-dev/babel-jscs - (or should I just do that now?).\nYou'll need to update package.json and your .jscsrc to \"esprima\": \"./node_modules/babel-jscs\"\njs\n{\n  \"node-jscs\": \"jscs-dev/node-jscs#master\",\n  \"babel-jscs\": \"hzoo/babel-jscs#master\"\n}\n. I still have to figure out how to run the tests (git submodule?) not sure yet. I ran it manually before and got a few issues regarding cli, and quotes (babel infers the quotes will always output the same one).\n. Yeah it will parse anything babel supports itself since it will be an option for esprima - \"esprima\": \"babel-jscs\" (es6, es7, jsx, flow) - mostly through acorn-to-esprima transformation and some other stuff\n. For me it would be that it hasn't been tested as much yet and not all the tests pass (at the moment) but that shouldn't be too hard to fix.\n. What would I need to do for the pr?\n. @deezahyn Um yeah just file it at https://github.com/hzoo/babel-jscs there until I move it to https://github.com/jscs-dev/babel-jscs. I guess we can just do it whenever.\nHowever for that particular issue about quote marks I documented in the readme already. Not sure what we can do about it @sebmck?\n\nRules related to quotes won't work: validateQuoteMarks (Babel infers and transforms quotes to be consistent so you'll need to find another way to enforce this or turn off the parser and run it.)\n. @sebmck Ah ok. I didn't do enough research then xd.\n\n@deezahyn Yeah you can make an issue for it in the repo or I'l do it later (added in hzoo/babel-jscs/issues/1)\n@markelog Ok shouldn't be too hard to just replace the parser for esnext.\nSeems like it's just\njs\nthis._esprima = options.esprima || (options.esnext ? babelJscs : defaultEsprima);\n. Sounds like a good idea (would be good so people can test and find any big issues). I think we're going to release \"soon\" though :smile: \n. Could you also post a code snippet (preferably as minimal as possible to reproduce this) and which version of jscs?\nAlthough based on the error message it looks like this is due to the firstToken and lastToken being the same..\n. Ok I just tested myself and made an empty file and can reproduce. So we need to just make an exception for that?\n. Ok simplest thing would be to just do this? (EOF token)\njs\nif (firstToken === lastToken) { return; }\n. haha what a better idea.\n. Ok added an comment for this and extra test.\n. Ok only updating minor versions.\n. Not sure if one of the tests isn't calling done correctly or just an issue with travis.\n. Well I can't write the tests for the added code since no code will run that\npart of the code until we update esprima.\nOn Thursday, May 14, 2015, Alexej Yaroshevich notifications@github.com\nwrote:\n\nCoverage decreased (-0.06%) to 99.23%\nI'm aware of this. ;-(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1369#issuecomment-102095468.\n\n\n-Henry Zhu\nGeorgia Institute of Technology\nIndustrial Engineering '14\nComputer Science Minor\n. Well I can't write the tests for the added code since no code will run that\npart of the code until we update esprima.\nOn Thursday, May 14, 2015, Alexej Yaroshevich notifications@github.com\nwrote:\n\nCoverage decreased (-0.06%) to 99.23%\nI'm aware of this. ;-(\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1369#issuecomment-102095468.\n\n\n-Henry Zhu\nGeorgia Institute of Technology\nIndustrial Engineering '14\nComputer Science Minor\n. Sounds good! Yeah even the tests now aren't being tested correctly because of the same issue - but the missing tests would be checking for an error so I just left them out (instead of skipping).\n. Sounds good! Yeah even the tests now aren't being tested correctly because of the same issue - but the missing tests would be checking for an error so I just left them out (instead of skipping).\n. Can merge - we have an issue to add a test for coverage in #1377 for after esprima is updated to return FunctionDeclaration with a null id. Esprima issue is https://github.com/jquery/esprima/issues/311\n. Actually looking at it now - I think I should add the same check to disallowSpacesInFunction and disallowAnonymousFunctions (and for require) since those are checking for node.id under file.iterateNodesByType(['FunctionExpression', 'FunctionDeclaration']\n. jscs.info got updated! We haven't updated the demo so it's not there at the moment. The 'Development Team' link could be removed since it's on the homepage now.\n. Could you also post a code snippet and jscs version? From the stack trace the rule is requireDollarBeforejQueryAssignment and varName is undefined.\n. Could you post the actual code that leads to the error if possible? Although based on ObjectPattern it looks like you are using es6? It's possible this rule doesn't account for that so we'll have to change it.\nI'm assuming it's something like var { a } = b; In that case left.name would be undefined.\nhttp://esprima.org/demo/parse.html?code=var%20%7B%20a%20%7D%20%3D%20b%3B%0A\nI think in that case we would modify the rule to check id.type === 'ObjectPattern' and do something different?\n. Ok great it's probably let {subsystem, data} = value;. So this rule will need to handle destructuring (and multiple values). Since your code isn't really related to jQuery at all - maybe it would be better to check the presence of the $ token before the other checks? @TheSavior\n. If this is because of Unexpected token then it probably means you need to use a different parser. Did you try esprima-fb or the latest esprima@2.2.0?\n. Yeah it's the esprima option in cli or config - should be in the docs: http://jscs.info/overview.html#cli.\njscs ./ --esprima=esprima-fb if installed globally\njs\n// .jscsrc\n// npm install esprima-fb\n{\n  \"esprima\": \"./node_modules/esprima-fb\"\n}\nAlso I think it doesn't work because esnext turns on jscs' custom esprima branch (https://github.com/jscs-dev/esprima-harmony) which hasn't been updated to the latest yet. This is assuming the latest esprima does support this (and copying into http://esprima.org/demo/parse.html it does).\n. If you aren't using JSX/etc, you can using esprima@2.2.0 as a dependency or wait for our release. I'm also working on https://github.com/jscs-dev/babel-jscs which will use babel as the parser for ES6+, which I'm thinking can just be released when the next jscs is released?\n. Well the project has to convert acorn -> esprima so there will be a lot more bugs/issues initially, so it depends on if you are using newer features that aren't covered in esprima.\n. Maybe when esprima 2.3 is released - not sure yet?\n. @mzgol - If you need it now you can use https://github.com/hzoo/babel-jscs. (Not on npm yet and will be when I move to https://github.com/jscs-dev/babel-jscs\njson\n{\n  \"node-jscs\": \"jscs-dev/node-jscs#master\",\n  \"babel-jscs\": \"hzoo/babel-jscs#master\"\n}\n. @mzgol It should work - it's working fine for me?\nOh (I am still confused about this), but I'm using \"esprima\": \"./node_modules/esprima\",. Also you don't need \"esnext\": true if you use the esprima option I think.\nAlso \"esprima\": \"babel-jscs\", works now if you npm install.\n. Ok can reproduce @mzgol it's because it doesn't know about the new node types in the newer esprima (estraverse needs to be updated). So I guess you can't really use the latest esprima at the moment unless we updated that.\nIn the meantime you can try https://github.com/jscs-dev/babel-jscs and see if that works for you (seems to work for me).\nKind of related to https://github.com/jscs-dev/babel-jscs/issues/3 @mrjoelkemp - if we patch the new types in for estraverse from babel or just update estraverse version.\n. Yeah @mzgol babel-jscs is a esprima parser option (just like esprima)\nIn the readme it does say\njs\n// .jscsrc\n{\n  \"esprima\": \"esprima\", // instead of this\n  \"esprima\": \"babel-jscs\", // global\n  \"esprima\": \"./node_modules/babel-jscs\", // local\n}\nIt's the same for grunt right? I see\njs\n// Gruntfile.js\njscs: {\n    src: \"path/to/files/*.js\",\n    options: {\n        config: \".jscsrc\"\n   }\n}\n. Can close this now.\n. Can close this now\n. :+1: Thanks!\n. :+1: At some point (2.0) we should look at the consistency of all rules in enforcing exactly 1 or atLeast 1.\nI think the reason why we did this was because of people putting comments in between but now we have that helper method for that - file.getPrevToken(lastToken, {includeComments: true});.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. This is specifically for returning a single object. \nAlthough it's related to #1340 - requireShorthandArrowFunctions - I think this would be the latter of the two you mentioned @alawatthe \njs\n// good\nevens.map(v => v + 1);\n// bad\nevens.map(v => { return v + 1; });\nActually maybe we should just merge it into a single rule.\n. Could some of those options could become their own rules? Or only apply within arrow functions?\nMaybe we should have a disallowLabelStatments rule.. - (had to look at up haha).\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Will make a PR to fix\n. Ok nice @mrjoelkemp, based on your comments I added tests for getter/setters, shorthand object methods which failed so will have to add some logic for those.\n. Ok made the changes and removed the temp variables since I think its fine without them.\n. Yeah that's true. However, we do have disallowIdentifierNames, and disallowKeywords that are used with the intent to disallow parts as well (with, certain methods like eval or something) so this rule is created with a similar purpose?\n. @markelog was from https://github.com/jscs-dev/node-jscs/issues/1385#issuecomment-102881542 - originally to disallow LabeledStatements\n. Yeah that's definitely true, since you have to know what node types are/esprima/ASTs. \n. I don't think there's any reason - we just didn't catch that. we're planning on fixing these consistency issues in 2.0\n. We can also change it to be consistent now if its still backwards compatible but we'll have to do cleanup in 2.0. And I don't think we know about the 2.0 release yet - at least one more release before that?\n. :+1: \n. Thanks for the report! Yeah a lot of rules haven't been remade to account for ES6 yet (working on a lot of them now). Yeah you can do a separate issue for the other rule.\n. I guess it doesn't affect anything but yeah.\n. @zxqfox what do you mean by our custom rules?\n. Not sure if this is a new rule value or just a bug and should be added in by default? Basically there is an issue with using arrow functions in the top module level (when this is used in the body somewhere). If no this is used it's fine. Same with prototype since arrow functions don't have one. It could be an option.\nAnd thanks for adding the shortlink @markelog?\n. I think it might be too complicated to search for this in a function so maybe it should just skip all Properties and AssignmentExpressions (even if technically it could still be an arrow function)?\n. Maybe we can check string + string as well then? 'a' + 'b'  -> ab\n. I think it's better for most if not all rules to be independent of each other.\nI'm not sure I understand what you're asking for - do you just want the last code snippet when both rules are true? Although maybe we could just change requireAlignedObjectValues to have that last version by default (a more stricter check)?\n. I think we can make an exception for if/else and I guess do/while as well (without a new option).\n. I guess there's no reason not to - at first I was specifically checking for string and identifier. It would certainly be simpler!\n. Do we want to make an exception for a multi-line concatenation if we do string + string?\njs\nlet reallyLong = 'asdfadfdsfasdfadfadfasdf' +\n      'adsfasdf';\n. Not sure why the coverage on this decreased (I removed lines but it's still 100%)\n. Yeah not sure the problem with coverage but should be good now.\n. Is there anything I need to do for this?\n. I'l try a new commit, and if that doesn't work a new PR\n. Yep I must of did all that wrong.. \n. Oh the test that failed is the 2 string literal one - do we want to report for this? (I think so)\nchecker.checkString('\"a\" + \"a\"')\n. Wait never mind that was a duplicated test that was wrong anyway.\n. Ok back to the old coveralls issue Coverage decreased (-0.0%) to 98.65%\n. :tada: yay\n. Yeah the best test was to take the rule and run it through some code to find these issues!\n. I don't know if we wanted this as part of JSCS but it would be awesome to have! And an easy rule name - could also do validateFilenames since we have a few of those. Would be nice to do it for different file types to be general but kind of outside our scope? If we only need one option then it can just be different strings like suggested above.\n. This would be so awesome to have :smile:!\n. Just so you know, right now we have the disallowIdentifierNames rule and also https://github.com/jscs-dev/jscs-spellcheck now (for rules related to naming).\nI guess what you're asking for is more of a validate/requireIdentifierForX for different types of things. I think we'll have to see some examples of regexes to see how this would work in practice?\n. . was removed as a binary operator so var defaultOperators = require('../utils').binaryOperators.slice(); doesn't include it in the rule\n. @christophehurpeau You'll need to fix the corresponding example js file for airbnb https://github.com/jscs-dev/node-jscs/blob/master/test/data/options/preset/airbnb.js to make the tests / travis pass (npm test)\n. I was just thinking disallowFunctionDeclarations could be covered by disallowNodeTypes, but if we want exceptions/options then that fails. Sounds ok\n. @nicolo-ribaudo \nAdd the esprima option to your .jscsrc and pick a different parser (esprima, esprima-fb, babel-jscs)\n(you will need to npm install it)\njs\n//.jscsrc\n{\n    \"esprima\": \"./node_modules/esprima\", // or\n    \"esprima\": \"./node_modules/esprima-fb\", // or\n    \"esprima\": \"./node_modules/babel-jscs\",\n    ...\n}\n. Yeah update is tracked in #1382, #1353\n. We can close this then right?\n. Looks good.\nAlso do we want to make a helper for functions (FunctionDeclaration, FunctionExpression, ArrowFunctionExpression)? Maybe some other rules need to be updated with ArrowFunctionExpression\n. @jakezatecky If it's not hard to add we might as well include it here too (the other rules), otherwise we can just do another PR later (if you want to, or I'l do it).\n. If we think this could be a rule - what would the name be: requireBlockComments? I guess there could be the opposite rule as well.\n. We know the rule seems to be require-padding-newlines-before-line-comments, but other than that, there isn't that much info - like what version of jscs (maybe older than when you added that @zxqfox). \n. @kover If you don't want to show the whole file then we just need a minimal code snippet that causes the error you mentioned (that would be better).\n. @matoilic Do you want to do the fix as well? Also new MyClass is a NewExpression not a CallExpression so we would need to add another option (I guess inNewExpression) for that.\n. Yeah I think I need to modify the whole monkeypatch module thing (replace estraverse.VisitorKeys) to work correctly. jscsLoc = Module._resolveFilename(\"jscs\", module.parent.parent); I'm just confused since it works when you use babel-jscs in a project.\n@markelog Not sure - if I look at babel-jscs/node_modules/babel-core it's 18.8 mb?\n. Yeah - I can't figure out why it can't find jscs or babel-jscs to make the tests fail path though - some path issue\n. I wasn't able to fix the tests (even though it works) - and it looks like it's still failing (on master) @markelog?\n. Also do we want to keep the option as esnext or use a different name?\n. Was just thinking about how esnext isn't really a thing anymore but it's not a big deal or anything\n. Ok I'd go with 2 then for now. Right now babel-jscs is slow because of some of the transforms needed (not that the babel parsing itself is slow but the added stuff makes it slower)\n. It's just slow enough people will ask about it (with babel-eslint which is basically the same). It's only for people who want to lint on keystroke/save very often. It's not that big of a problem or else we would of gotten a lot of issues for it already. https://github.com/mdevils/cst/pull/8#issuecomment-116091494 - for cst we ended up just using the babel parser + toToken method.\n. dockyard/ember-suave has the semicolon one done. https://github.com/dockyard/ember-suave/blob/master/lib/rules/disallow-space-before-semicolon.js if we want to use that.\nAnd regarding commas I think there was an issue about that\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. This should be covered with requireDollarBeforejQueryAssignment now http://jscs.info/rule/requireDollarBeforejQueryAssignment.html\n. @lpommers Sounds good!\nFor now, I would check out previous PRs (commit's start with New Rule: x) or current rules/tests to see what is needed. we have labels for new rule and new rule option (difficulty varies though). Also https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md\n. Yeah it could imply it's difficult to do\n. :+1: although it looks like it was merged in 2.0 branch\n. So we can close (since Closes only works when merging into master right)\n. haha good point.\n. Unless I'm mistaken isn't this working as intended? Do you need the opposite rule disallowSpaceAfterObjectKeys?\nhttp://jscs.info/rule/requireSpaceAfterObjectKeys.html\n``` js\n// Valid\nvar x = {a : 1};\n// Invalid\nvar x = {a: 1};\n``\n. Ah yeah http://jscs.info/rule/requireSpaceAfterObjectKeys.html\n. Oops put the same thing - it's http://jscs.info/rule/rule/requireSpaceBeforeObjectValues.html\n. You mean the commit message? You can just reference it (Ref #1447) instead of fixFixes #1447`)\nHowever I think that issue should be about the semicolon spacing anyway since the comma discussion should of already been talked about in another issue.\n. Yeah I don't see anyone asking for the opposite rule - I would be in favor of leaving it out\n. I think you can add a test for var a = 1; (no errors) as well.\n. @rimunroe LGTM - will need to squash/rebase your commits. Nice job!\n. Sorry yeah you would rebase into a single commit and force push the branch.\nIt's ok since it's your own pr branch and not on master and you have to\nrewrite the history\nOn Tuesday, June 16, 2015, Richard Munroe notifications@github.com wrote:\n\n@hzoo https://github.com/hzoo What's the procedure for doing that at\nthis point? Am I supposed to force push to my branch or is there some nicer\nway of doing it?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1457#issuecomment-112549204.\n\n\nHenry Zhu\n. Don't think so - just wait on @markelog or someone else.\n. Oh yeah it has requireSpaceBeforeSemicolon and no configuration file change\n. Ok but it looks like the default for maxErrors is Infinity, so otherwise we need a number if they don't specify it.\n. This is similar to #1471 so we can close one of them\n. Only way would be if you could plug in parser for it for the esprima option or babel-jscs just happens to support the typescript features being used.\n. Well I don't know haha - I'm not sure if we would want to support it in that way. Might have to modify a lot of stuff if there are any typescript specific features used.\n. For now I would say try https://github.com/jscs-dev/babel-jscs (but don't expect too much).\n. Not really sure how this would work at the moment since all our stuff is the esprima/ESTree format. I don't know enough about typescript to say so if it works now it is because the features are the same as the ones supported by babel. Going to close for now.\n. Can probably try using https://github.com/eslint/typescript-eslint-parser at some point similar to babel-eslint/babel-jscs since it will be compatible with estree - @nzakas.\n. Thanks for the contribution! Yeah it's a known issue (hasn't been ported over to the new site yet, PR welcome)\nSimilar to #1370. We should remove it (or better just put a message to explain)\n. Thanks for the contribution! Yeah it's a known issue (hasn't been ported over to the new site yet, PR welcome)\nSimilar to #1370. We should remove it (or better just put a message to explain)\n. looks good!\n. Hey thanks for contributing - I think your request is covered with https://github.com/jscs-dev/node-jscs/issues/1215.\n. Would this be on master or 2.0 branch, I thought it would be harder for core since we are changing things in 2.0?\n. I guess some could be - effort/time to convert all current code to es6 and asking all PRs to be es6, potentially a higher barrier to entry for more contrbutors, harder debugging like @rimunroe mentioned (although I don't really like this is an issue and there's always sourcemaps - babel itself has been written in es6 for a while now).\nI think adding/using es6 rules is the main benefit other than whatever benefits es6 gives like less code. Also I noticed you were using es6 in your talk @mikesherov (nice job btw)!\n. Should probably fix this..\n@jscs-dev/owners So do we want to ignore shorthand methods for requireSpacesInAnonymousFunctionExpression? @mzgol is saying we should since it's not an anon function. However in the parser all of these are anonymous because they are FunctionExpression with no node.id\nLike I said in https://github.com/jscs-dev/babel-jscs/issues/4#issuecomment-116100716 we would need to make requireSpaceinX for shorthand, class methods, etc?\n. I guess it's true we were already ignoring getters/setters (so the spacing for that wasn't enforced) https://github.com/hzoo/node-jscs/blob/b4084d7d4e1fbcb2033aa0c0bcb584fa839434df/lib/rules/disallow-spaces-in-anonymous-function-expression.js#L88\nOk so we would need to add requireSpacesInClassMethod, requireSpacesInGetter, requireSpacesInSetter, requireSpacesInMethodShorthand or something (seems like too many if it's separate rules) - and when we change the config make a single rule for all function types with options?\n. I think we should try to have less rules - so requireSpaceAroundBinaryOperators could have an option for before/after/both. This would be similar to trying to combine the function spacing rules to not duplicate all the code/tests\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Since an object literal isn't a block I guess this should be a separate rule?\n. If we already have a similar rule then a new rule option is definitely what we want.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Nice!\n. Just making sure the examples should error? And actually the other comment I made isn't there (about how to detect).\nWe want to make sure a.apply(a, args) - a and a are the same?\nThe code now is callee.object && callee.object.name === firstParameter.name was based on just a.apply and not for a.b.apply https://github.com/jscs-dev/node-jscs/blob/6bbf56983c4a9f447c1616bbe3d91b8eef5d6478/lib/rules/require-spread.js#L55\n. Initially just tried implementing what you commented - https://github.com/jscs-dev/node-jscs/issues/1326#issuecomment-98174053 (why I pinged you as well :smile:) \n. You can currently use http://jscs.info/rule/disallowKeywords.html with var which should cover your use case. Otherwise should be similar to https://github.com/jscs-dev/node-jscs/issues/1309.\n. Ok fixed although getting the coveralls issue again\n. Don't know how we can check the scope (don't think we have any other rules doing this)\njs\n// Example with an object (VariableDeclaration, VariableDeclarator, ObjectExpression, Property, FunctionExpression)\nvar a = {\n  b: 1,\n  normalFunction: function() { return this.b; },\n  arrowFunc: () => { return this.b; }, // undefined\n  methodShorthand() { return this.b; },\n  arrowFuncInsideFunc() {\n    return () => { return this.b; } // not undefined\n  }\n};\nWe can't just check node.parent is Program because it could be like node.parent.parent.parent... - or maybe there's a way\n. > They don't, that is an interesting part :-).\nGood point haha. Although maybe we should land this first (only because currently it's erroring when it shouldn't) and then see if we want to do that later?\n. Should we make a different issue for scope tracking if we want to do that?\n. :+1: - will the folder test/rules be removed?\n. @markelog You can add images to github from the clipboard - and lol I noticed that's what the message below says (although maybe you knew that already)\n. I think you would just make an option for requireAlignedObjectValues to align by the key or colon since some people would like either?\n. I would want to land this and #1494 (esnext fixes) for the next release too @mrjoelkemp \n. Haven't even had to do those yet haha - done.\n. https://github.com/jscs-dev/node-jscs/pull/1494 left on the actual 1.14 milestone but I'm assuming there might be a few more?\n. looks good\n. Not really sure what your asking about - looks like there is http://jscs.info/rule/requireSpaceAfterPrefixUnaryOperators.html and http://jscs.info/rule/disallowSpaceAfterPrefixUnaryOperators.html already\n. Ok the rule has code in it related to this - https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-prefix-unary-operators.js#L66 and related issue https://github.com/jscs-dev/node-jscs/issues/405\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Ok wow it's all passing now - @markelog @zxqfox @mrjoelkemp \n. I can merge https://github.com/jscs-dev/babel-jscs/pull/10/files so we can change jscs-dev/babel-jscs#remove-monkeypatch. Would that be a major version so 2.0.0 or just 1.0.4?\n. I was thinking that although I put in the readme to use master for jscs anyway since no release yet - ok thanks major then.\n. Also @markelog - can we update estraverse now?\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/tree-iterator.js#L65 So when you remove add handler as well some tests fail.\nWe won't need https://github.com/jscs-dev/node-jscs/blob/master/lib/tree-iterator.js#L39-L49 since it would be covered in babel keys already. I don't know if we need the XJS ones since that's deprecated.\n. Do we want to try another code coverage service if there is one?\n. @jamestalmage Yeah like @zxqfox said you can nullify the whole rule (I don't think it ever supported nulling sub parts of of the config looking at the code I linked below). It's only plain from the code snippet you posted that it wouldn't work. However if you know about the internals there's a check for null to not load the rule.\nhttps://github.com/jscs-dev/node-jscs/blob/8b0ac2c9a82fa2138bc862acf9683f0c685c6312/lib/config/configuration.js#L490-L495\nIn the docs http://jscs.info/overview.html#presets\n\nYou can specifically disable any preset rule by creating a .jscsrc config file and assigning it to null.\n\nWe should probably change the error messages to add null (since you would only remove it if it wasn't a preset rule)\n. I have to find it but I remember talking about it\n. Oh it was a comment from @mikesherov so don't know if we did then https://github.com/jscs-dev/node-jscs/issues/1241#issuecomment-90202014\n. Oh and the other reason is when reporting a bug for a rule\n. Let's do this\n. We could make it not do anything? Is there other information we could be telling the user?\n. If we do this - 3.0 change?\n. Imports are really different from objects, destructuring (although they are all using {})\nWe should either split into different rules, or have options for each (probably better)\n. We can cover imports with https://github.com/jscs-dev/node-jscs/issues/2151, PR https://github.com/jscs-dev/node-jscs/pull/2164\n@markelog then we can remove describe.skip('import (#1524)', function() {\n. It looks like this is the same as #1444 although doesn't seem like we can reproduce on either?\n. ~~Ok can reproduce - not sure why it's giving an internal error.~~ I'l try to make a fix but in the meantime you can remove the first blank line (unless that's intended)\nOk we check if the comment is on the first line and exit out - if it's the another line we assume there's tokens before the comment so it gives undefined.\n. Can you post your jscs version/config, and a short code snippet that results in that error?\n. This is the same as #1393 as well?\n. That sounds good to me. Do we want to continue maintaining presets or allow certain orgs to maintain them as well - like for airbnb?\n. Yeah module.exports = require('jscs-jsdoc/lib/rules/validate-jsdoc');\nhttps://github.com/jscs-dev/node-jscs/commit/e553d4bcc03cfef232f21a8d3138d3057600151e#diff-23d81634c6375c34edb4ecf95a7beaaeR799\nhttps://github.com/jscs-dev/node-jscs/blob/master/package.json#L87 - we need to move it to dependency not devDependency right? @markelog \nThis shouldn't be an error for 1.13.1 - it would be for master though?\n. @Andre-487 you want to null a preset rule http://jscs.info/overview.html#presets\n\"requireSemicolons\": null\n. Babel moved comment attachment to the parser instead of estraverse to allow for comments in empty blocks - check out the recent babel-eslint changes - nvm I see CST changed to a fixed version of babel\n. Yeah in the docs - http://jscs.info/overview.html#presets.\nThis seems to come up a lot - maybe we can change the error message if someone puts false to ask them to put null or change the assert messages?\n. Would be good since it seems everyone wants to do it!\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Will check it out tomorrow - babel changed how comments are attached (through parser instead of estraverse) so will have to change babel-jscs like in babel-eslint - temp fix would be to pin the babel version\n. Ok try again - babel-jscs@2.0.1 - if not will to try fix in the morning\n. If we are doing this somehow we should let the user know it's the airbnb preset right Checking against the airbnb preset and/or docs change?\n. :-1: from me I guess (said the same in the issue)\n. Moving to #1834 - let me know/change it if it's moved over incorrectly.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Not sure I get what this is referring to\n. Hopefully very soon :smile: \n. Thanks for contributing! - In http://jscs.info/rules.html there's http://jscs.info/rule/disallowAnonymousFunctions.html although it would error for all of them.\nIn your example\n``` js\n// bad\nvar foo = function() {};\n// good\nfunction foo() {};\n```\nthe good example would be a FunctionDeclaration\njs\nvar foo = function() {}; // function expression (no name)\nvar foo = function foo2() {}; // named function expression\nSo I think you want function declarations to be used but still allow callbacks?\nAlso if you have multiple issues I would make a separate one to help with discussion.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. What do we need to do now to use this? I'm ok with manually tweaking the changelog after running npm run changelog now like in the past few releases so it's not too big for me\n. Not at the moment, just closing things that we can come back to\n. Would this be an issue for https://github.com/jscs-dev/jscs-jsdoc?\n. Should be able to close this now with babel-jscs 2.0.2 and 2.0.3\n. Basically the esnext option uses \"esprima\": \"babel-jscs\" so you need to remove the other esprima options. I guess your other issue is probably https://github.com/jscs-dev/babel-jscs/issues/12\n. This would related to changing airbnb to have es5 and es6 presets\n. @kevinburkeshyp yeah the babel dependency was just added last release (2.0) - if we want to support using esnext with babel-jscs it needs to be a dependency (it uses babel-core) or we remove that. Or something weird would be to install the dependency later if they use esnext somehow.\nInternet at the place I'm at doesn't really work and I'll probably be too busy the next few days to work on anything :(\n. Yeah I think it's possible? - it's only recently that the parser was split from acorn and in its own package\n. index.js uses var parse          = require(\"babel-core\").parse; which we could inline. But it's not the parse problem that is the problem\njs\nvar traverse = require(\"babel-core\").traverse;\nvar tt       = require(\"babel-core\").acorn.tokTypes;\nvar t        = require(\"babel-core\").types;\nin acorn-to-esprima (the file that's needed to convert from the acorn/babel format to esprima) uses some more methods/data also in babel-core. Yeah I don't think we can reduce the babel packages needed in babel-jscs\n. It might be possible to split it since it since looks like @sebmck is splitting babel-core - I'm guessing we would use babel-types and babel-traverse at least - although in the end not sure it would do that much.\n. Just a heads up that we will be able to just use babylon when we integrate with cst (which uses that) in 3.0\n. $.jscs is probably from gulp-load-plugins.\nWhich is used like var plugins = require('gulp-load-plugins')();, probably named it to $ instead\n. I'd just like to note we have the disallowNodeTypes (http://jscs.info/rule/disallowNodeTypes.html) rule which could be used instead of the disallowArrowFunctions rule but doesn't mean we can't have both.\n. So we need to make the changes (and previous ones) for inNamedFunctionExpression and inFunction right\n. @markelog is saying the issue is in #1513 so follow that for the new option\n. :+1: \n. Can this be merged? I think we need the same fix for SpacesInFunctionExpression - can do it here or I'l do another PR. Need to fix https://github.com/jscs-dev/babel-jscs/issues/21 which is similar\n. Never mind looks like I already it did before in https://github.com/jscs-dev/node-jscs/pull/1388 and forgot to do it for inAnonymousFunctionExpression? Managing all these function rules is kind of annoying :stuck_out_tongue_closed_eyes: \n. In the issue I mentioned string + string but left it in https://github.com/jscs-dev/node-jscs/pull/1422#issuecomment-107425306 so I had originally intended for allowing it.\n\nI would say no, we always can wait for the community response on that. - @markelog \n. Since it's not obvious everyone wants it, I think the allExcept option would be ok.\n. Yeah, I guess all the allExcept options should be an array to allow for multiple of them so the older rules should be changed as well but that's another issue. Otherwise looks good\n. :tada: yeah and thanks for all the updates! \n. @faceleg Yeah I think it would be empty - although comments aren't aren't in the tree in that way - maybe look at some other rules dealing with comments (like https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newlines-before-line-comments.js which iterates over comments or https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/maximum-line-length.js#L117 which checks if an option is there to iterate over comments)\n\nIn babel/eslint the comments are added in the parser as innerComments/leadingComments\n. Ok I guess this can move to a 2.1.0 milestone\n. The isWrapped function doesn't account for rest param since it just does getPrevToken once - probably can do a helper or something but I guess this PR works in the meantime. Can add to 2.0.1\n. Yeah we need to check if the identifier is a param somehow. And yeah probably needs to error for === and !== and the other cases I mentioned before\n. Going to revisit later\n. This just checks if the type is of RestElement and gets the prevToken which should be (\n. Ok there's no need to check for disallow since it's a different ast without the parens.\n. Going to revisit later\n. I guess similar to https://github.com/jscs-dev/babel-jscs/issues/13\n. For anyone who is confused about ._babelType, I added that as a private prop to check type since we replaced it in other cases https://github.com/jscs-dev/babel-jscs/blob/1d15f1afa7dc7af24726187fcfb58cf9cdc4ff38/acorn-to-esprima.js#L185\nThis still brings up the issue about whether we will support babel in jscs itself or if we need to make a custom repo/rules for es7+ features. I'm ok with either.\n. :+1: thanks!\n. Thanks for reporting @verkholantsev. You can specify jscs . --verbose to see the rule that causes the error. I think we have an issue for this already but not sure.\n. Ok closing in favor of #1513.\n. Thanks for reporting! I think it's the same as https://github.com/jscs-dev/node-jscs/issues/1373\n. Should be per file unless you just disable the rule - you should also be able to do inline comments now too if that's better in some way.\n. :+1: \n. What do we think about getting Docs commits to add [ci skip] to the commit message?\n. Ok after https://github.com/jscs-dev/babel-jscs/pull/22 we can use node.type === \"SpreadProperty\" instead.\n. We can do ^ now.\n. If we have esnext using babel-jscs then users are going to report many es7+ issues - with async, await, generators, object rest, spread - looks like a few already.\n. So we would fix issues like #1637 and https://github.com/jscs-dev/babel-jscs/issues/13? I'm ok with doing it\n. I guess we already started on doing this then?\n. Well the object spread stuff is es7\nOn Wed, Aug 19, 2015, 7:34 PM Joel Kemp notifications@github.com wrote:\n\nClosed #1634 https://github.com/jscs-dev/node-jscs/issues/1634.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1634#event-387135830.\n. Another es7 fix\n. Yeah this is an issue - I originally checked for more but removed it when we had to check for this so I just changed it to callbacks. We could try importing a utility to check scope/this - we already have the babel-core dependency if we could uses that.\n. What's the simplest way to set this up (I'm not familiar with any of this stuff)? Something like heroku? @cvrebert \n. Looks like there's this on heroku https://devcenter.heroku.com/articles/scheduler - if there is a way to run the jar on heroku through a that/cron..\n. Don't know how far we got to doing this but I guess we aren't getting that many issues (nothing compared to bootstrap) so we can revisit this later\n. It's mostly a speed thing if another tool is already doing the parsing - https://github.com/jscs-dev/node-jscs/issues/1270#issuecomment-99816879. Lets us potentially interop better with another tool?\n\n@thejameskyle talks about this stuff in a talk https://www.youtube.com/watch?v=Ku3AWp_-Qzs&feature=youtu.be&t=9m22s\n. Looks like this is the same as https://github.com/jscs-dev/node-jscs/issues/1601?\n. Can you try testing on the master branch (since that fix doesn't have a release yet) to see if that fixes it?\nIf there's still an issue, if you can reduce the code snippet that would be helpful!\n. @avishnyak Ok I can reproduce with 2.0.0 but cannot in master so it looks like it's fixed to me. When you get a chance try it on master or wait for the next release (next week maybe?). I'm going to close for now, if not feel free to reopen.\n. You mean like parent.type === 'Property' && (parent.kind === 'get' || parent.kind === 'set') could be a util.isGetterMethod (naming is hard).\nOnly other one is parent.method || parent.type === 'MethodDefinition' which checks for shorthand or class method.\nNot sure if it needs to be an util\n. or should this error by default?\n. good to merge?\n. It's in MAINTAIN.md which I don't think is linked anywhere or read https://github.com/jscs-dev/node-jscs/blob/master/MAINTAIN.md#maintaining-validation-rules - But would be nice to rewrite that or do it step by step if it makes it easier/clearer.\n. @ShashankaNataraj if you still want to make the wiki page that would be cool - or we could link the maintain/contributing docs better in places.\n. Ok I finished up a few things in https://github.com/jscs-dev/node-jscs/wiki/Creating-a-New-Rule - so we can close for now and continue adding to it.\n. > If you use the json reporter and you get more errors then the limit then this code https://github.com/jscs-dev/node-jscs/blob/master/lib/cli.js#L164 will make your JSON unparsable.\n\nThe outputting of this error message should be either moved to the reporter code so that each reporter could display it in its own format or we should have a setting/cli argument to disable it.\n\n@danechitoaie \n. Looks like this needs to be change all any of the errors in cli.js actually\n. I can we can close either this or #1156 since it's the same. @markelog \n. Hmm weird, you should always be able to disable any rule (if it's already in a preset) - otherwise just remove the rule from your config. Can you post what you're doing with the config?\nhttp://jscs.info/overview.html#preset\nAlso if you have an issue with the rule not supporting something then feel free to make an issue for that\n. Yeah posting what you tried would help - \"disallowSpacesInFunctionExpression\": null should work.\n. Going to close, can't reproduce with\njs\n// .jscsrc\n{\n  \"preset\": \"airbnb\",\n  \"disallowSpacesInFunctionExpression\": null\n}\nLet us know if you still have an issue!\n. Yeah it checks node.parentNode.type === 'CallExpression' only and that is a MemberExpression - would we only error if it's .bind?\n. :+1: \n. This is the same as https://github.com/jscs-dev/node-jscs/issues/1640 right\n. But you can update the labels/title!\n. Are you using esnext?\n. what version are you using, 2.0?\n. If you are using the esnext option then you need to remove the esprima option since esprima doesn't support :: - esnext uses babel which does. - Can you post your config?\n. As an aside: I think the jscs disable comment only disables rules - if the parser dosn't support it it won't run.\nAre you sure the error isn't from jshint then (although I guess that's what the comment is for?)\nI can't reproduce with jscs itself and esnext in config\n. I'm using jscs cli - can you try it with that? Although I don't see why it would be an issue only with the plugin. \nWhat about\njs\ngulp.task ('code-check', function () {\n  return gulp\n  .src('./src/js/**/*')\n  //.pipe(jshint())\n  //.pipe(jshint.reporter('jshint-stylish'))\n  .pipe(jscs({esnext: true}));\n});\nwhat happens when it's jscs by itself or jshint by itself?\n. and jscs -V is 2.0.0? maybe your global jscs is different? It definitely shouldn't be erroring with 2.0.0 and --esnext\n. Yeah since that's the latest version which is fine. Ok I downloaded gulp-jscs to reproduce. I can reproduce the error with .pipe(jscs({esnext: true})); because I had a .jscsrc file already.\nSo I would just do .pipe(jscs()); if you already have a config (or use the option to set the config path)\n. Going to close this for now then? let me know if it should be reopened\n. Do we still want this?\n. We have a few of these types of rules - disallowKeywords, disallowNodeTypes,disallowIdentifiers - http://jscs.info/rule/disallowIdentifierNames.html. That rule could use some more options though\n. Refactored to used variables in the if statement\n. Don't know how to do it yet - Although I'm assuming it's to rebase it and then add \"Closes gh-1675\" and maybe it's easier with hub?\n. Thanks for the in depth steps and explanation! Was mostly what I thought - add the Closes statement and fast forward merge it.\n. @SimenB I can't reproduce with jscs@2.1.1\n{\n  \"esnext\": true,\n  \"disallowParenthesesAroundArrowParam\": true\n}\n`import a from 'a';\n. Ok thanks will make a fix.\n. Looks like we forgot to do the same for the disallow rule? @ksheedlo If you don't have time to do it I can\n. You can pass it in the .jscsrc config file - also not sure you can pass null but you can pass Infinity (searching in the codebase)\njs\n{\n  \"maxErrors\": Infinity\n}\n. This was fixed right? https://github.com/jscs-dev/node-jscs/commit/57bc29ecf57fe2d4005b0a9aaf354cec5874d435\n. This is probably the same as #1654 except for json reporter but would probably be fixed in the same way?\n. Going to close in favor of that then \n. :+1: \n. Or we can just finish up the changes?\n. We can still wait since it's only for the cli\n. same as #1373 right? (or similar in the rewrite of it)\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Not able to reproduce with only the comment - can you post the smallest reproducible code snippet? I see it's an error with validateIndentation, and are you using esnext?\n. I guess the other error is overriding the disallowEmptyBlocks one. But yeah that is an issue - and actually searching it's the same as https://github.com/jscs-dev/node-jscs/issues/1393, https://github.com/jscs-dev/node-jscs/issues/1528. Thanks for reporting! (Check out #1393 for more updates) - I'l fix this soon\n. I can't reproduce with jscs cli with 2.1.0 with just the js. But yeah if you have <dom-module ...> it's going to error out. You would have to write your script in a seperate file and run jscs with that (jscs only will work on javascript, not html with js inside it)\nThere is https://github.com/jscs-dev/node-jscs/issues/764 open\n. So do we just have to change this line\njs\n    if (program.fix || program.autoConfigure) {\n        program.maxErrors = Infinity;\n    }\n. Yeah I think so. Showing it like \"excludeFiles\": [\"node_modules/**\"] was kind of weird since it makes it sound like you still have to do it yourself?\n. DId you want me to change something with this?\n. Ok updated\n. I guess we decided at that time to remove , from that list of operators since it was confusing to people? If the presets aren't doing what you need you can do the workaround mentioned for now. It's hard to say since someone else could think that true shouldn't include ,. Someone is going to have to be explicit about all the operators - so I wouldn't think this is a bug per se?\nWe could add , back in for this rule but we'll have to get everyone's opinion.\ncan add it in this line https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-space-after-binary-operators.js#L55\n. Yeah we can either change requireSpaceAfterBinaryOperators to add commas back (specifically for this rule) or make a new rule for commas in arrays/objects on a single line.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. I'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in core). We can all check back on this list for future rule ideas/options.\nWe released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Ignore all dot directories or .git specifically?\n. I changed the docs so one these will conflict https://github.com/jscs-dev/node-jscs/pull/1697\n. We can just finish it up as well\n. So are we just excluding .git then?\n. I can fix this PR and include it in 2.2.0 if we want - if we want to exclude other dot folders we can discuss that later too\n. Ok added in https://github.com/jscs-dev/node-jscs/commit/b8c1972aeef26f9a037e0f97872701dbbeaeb05a (only .git)\n. K made updates\n. If they use a preset then the option maybe should say to allow null to disable (or we allow false eventually which I think we talked about a bit)\n. We can add a new issue to discuss adding false as an option.\n. Sorry I had meant supporting false in all rules in general\n. What can we do to measure performance for JsFile and rules? I guess there's #1043\n. :+1: Thanks for contributing! - And if you want can you change the commit message to be like disallowCurlyBraces: support for of statement?\n. Yep looks like this PR works! \"preset\": \"preset-x\" and \"preset\": \"jscs-preset-x\" works with global npm install of jscs. (There were some issues with presets and sublimelinter since it uses global jscs)\n. Hey there! If you go to the docs or rule itself, it looks like we have an option to allow exceptions \nhttp://jscs.info/rule/requireCapitalizedConstructors.html\njs\n\"requireCapitalizedConstructors\": {\n    \"allExcept\": [\"somethingNative\", \"webkitSpeechRecognition\"]\n}\n. Are you sure this is the case?\nMaybe it's showing errors it can't fix? I just did function a () {} 51 times and tried autofixing and it fixed all of them to function a() {}\n. Hmm ok the code is in https://github.com/jscs-dev/node-jscs/blob/b5da623613bc81d8e92eaa3037cb8375d2909eca/lib/cli.js#L96-L98 @markelog \n. Closing since #1686 is fixed?\n. Thanks for the PR anyway.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in core). We can all check back on this list for future rule ideas/options.\nWe released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Yeah feel free to make PR's for any docs/typos - although that particular one is probably https://github.com/jscs-dev/node-jscs/commit/7c2d0dd9d848cf0de4eeabb52a2514b480179956 which was fixed (I think the website isn't updated yet)\n. You can use --verbose to see which rules are erroring. When I run the code I get\njs\ndisallowSpaceAfterObjectKeys: Illegal space after key at a.js :\n     6 |\n     7 |var bar = {\n     8 |  baz: function() {\n-------------^\n     9 |    return true;\n    10 |  },\nso the thing that's getting autofixed is from that rule and aligning to the quuux\nI tried \"disallowSpaceAfterObjectKeys\": true, and it fixed to what you wanted?\n. Can't reproduce on jscs 2.1.0 - are you using a global/local jscs?\nI made a new directory with a js file and ran jscs --auto-configure a.js with my global jscs and a node_modules one and both worked for me. Can you try reinstalling? (maybe just a npm cache issue)\n. @fsbdev Were you able to reproduce?\n. :+1: - @jscs-dev/core?\n. ESLint uses https://github.com/nodeca/js-yaml\n. Looks good (doesn't seem too bad) other than maybe adding some tests to see if the config works like a regular file- so a yaml file with some rules/options to see it working correctly.\n. Not sure either right now :stuck_out_tongue: - https://github.com/jscs-dev/node-jscs/tree/master/test/data/configs looks ok - maybe a folder for yaml.\nOr maybe the test could be that it should produce the same json/result after parsing both with the same rule/config?\n. I'd be ok with removing the comment but I added one\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. The next release should be soon?\nSomewhat relevant to this - do we want to have a discussion/issue about allowing owners to manage the preset config in separate repos? We would need to add them to our package.json and other users would need to manage the version themselves. (Saying this since there's the ability to create your own preset in 2.0) - could be done for jquery, airbnb, google? @jscs-dev\n. Ok done. Thanks @samthor \n. Do you want to submit a PR?\n. Made https://github.com/jscs-dev/node-jscs/pull/1765\n. Would this also cause some issues - seems like we still have a few bugs with this but not sure?\n. Made a fix before that obviously didn't work :stuck_out_tongue: https://github.com/jscs-dev/node-jscs/pull/1481/files. Will do a PR\n. https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-space-after-object-keys.js#L143\nI just did var keyToken = file.getLastNodeToken(property.key); for your particular case but I think I want to create more test cases? Although I think it should work.\n. Could have other options. If any field requires quotes - all must require, or require as needed.\n. I'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in core). We can all check back on this list for future rule ideas/options.\nWe released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Looks good \nI think we'll need to fix any errors with async, generator, arrow functions soon. Don't know if that needs to happen in this PR\n. Looks like 2 tests are failing?\n```\n1) rules/disallow-spaces-in-function-expression beforeOpeningRoundBrace should not report missing space before round brace in FunctionExpression:\n      AssertionError: false == true\n      + expected - actual\n      -false\n      +true\n  at Context.<anonymous> (test/specs/rules/disallow-spaces-in-function-expression.js:39:13)\n\n2) rules/require-spaces-in-function-expression beforeOpeningRoundBrace should report missing space before round brace in FunctionExpression:\n      AssertionError: false == true\n      + expected - actual\n      -false\n      +true\n  at Context.<anonymous> (test/specs/rules/require-spaces-in-function-expression.js:39:13)\n\n``\n. Yeah it passes locally so should be good.\n. We'll need to add the same changes toSpacesInNamedFunctionExpression,SpacesInAnonymousFunctionExpression, andSpacesInFunctionbut we can go ahead and merge then?\n. cc @dreef3 \n. @bengourley Can you check if https://github.com/jscs-dev/node-jscs/commit/6571ebbbf29e5b96be45ade585e4676de3c2817d fixes it? We'll try to release 2.3.0 tomorrow.\n. Always weird to have a rule using tokens. Also odd to have added that and no tests fail\n. I can make a simple fix for function params but I think we need this rule is really brittle after addingerrors.assert.differentLine({and counting oncanSkip` @dreef3 \nSorry for the wait @bengourley \n. Shouldn't of been an issue in the first place :stuck_out_tongue: \n. More rules that need includeComments :+1:\n. Sorry, worded that badly - just noting a lot of rules might need it and this is one of them. It's good you reported/fixed it.\n. Looks good - I guess all new rules will have to be added to a group to pass the test!\n. Thanks for the report - I just fixed this in masterin https://github.com/jscs-dev/node-jscs/commit/5448a1fb71452c80f997cc1ed6cbb5e03cf987f9. Same as https://github.com/jscs-dev/node-jscs/issues/1747 - Should be releasing a new version soon?\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Is this still an issue for you on master branch?\n. I guess you can see the changes after running git diffbut to your point it would be cool/nice to see how how fixes were made for each rule in summary?\n. Oops - https://github.com/jscs-dev/node-jscs/pull/1769\n. Yeah would you like to make a PR? Most of the team will be busy working on 3.0 issues instead of adding new rules/options so help would be greatly appreciated!\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. or just comment/comments?\n. Yeah looks like it was fixed thanks\n. @markelog this good?\n. I think jscs-preset-wikimedia would be good (easy to search for on npm/github) https://www.npmjs.com/search?q=jscs-preset-\n. Not sure exactly what should be done but :+1: for better integration of tools at least.\nESLint can consume/pass ASTs http://eslint.org/blog/2015/08/eslint-v1.3.0-released/#using-asts-with-the-nodejs-api\n. Duplicate of #789, moving to https://github.com/jscs-dev/node-jscs/issues/1866\n. Duplicate of #806, moving to #1866\n. This should be added to the idiomatic preset.\n. If people want it, I can create a change now that ignores let/const and release another patch version\n. Interesting so we're adding escope\n. The .jscsrc file itself looks fine - maybe your path to the .jscsrc is wrong?\n. Should be easy to include this with tests\n. That sounds ok\n. Oh this should of been closed (fixed in master / https://github.com/jscs-dev/node-jscs/commit/39fae978298daf820042291ff57bf6afb03c7f5a)\n. I guess we can close this since it was rewritten in 3.0 anyway?\n. Thanks @dsine-de! Yeah it was probably copied from functionExpression or just a typo.\n. Looks good thanks @marian-r \n. Does \n```\nValid for mode `{\n```\nwork? If not I would just change all of those to be \"``javascript\"\n. Thanks I just finished up the modifications.\n. Nice! Didn't seem too bad haha\n. Yep I'm been using it a lot as well (and some contributions). Also you can use astexplorer.net as the link now.\n. looks good not sure why travis fails\n. Ok cool. If you can, squash your commits, otherwise we can do it.\n. You will need to put it in every configure or put it in thebeforeEachchecker.configure({ disallowSpaceAfterBinaryOperators: value, esnext: true });`\nAnd some rules do this\n``` js\ndescribe('rules/disallow-comma-before-line-break', function() {\n    var rules = { disallowCommaBeforeLineBreak: true };\n    var checker;\nbeforeEach(function() {\n    checker = new Checker();\n    checker.registerDefaultRules();\n    checker.configure(rules);\n});\n\n``\n. :+1: after movingesnextconfig stuff up a level\n. Yeah now it's technically not tested withesnext: falseanymore but yeah should be ok.\n. @alawatthe Ok so we noticednpm test` was taking long and travis was taking much longer so we're going to revert this for now.\nWas getting 14.92s before this PR and 66.93s after for npm test and travis was like 40 min to 3 hours.\n. Ok merging then\n. @markelog Probably just have to update the wiki then right?\n. Ok we can add it to 2.2.0 if you get to it today/tomorrow\n. Thanks for the help @rutinerad - I just fixed up the commit message.\n. Thanks for the report @CrshOverride! This is the same as https://github.com/jscs-dev/node-jscs/issues/1754. I have a fix in master.\nSorry we haven't released yet, should be soon.\n. My guess is it's not taking into account the comment and takes the */ as spaces? \n. \"allExcept\": [\"shorthandMethods\"]\nYeah this should be fixed - although I just found https://github.com/jscs-dev/node-jscs/issues/1513 - we actually have a option for shorthand methods now - http://jscs.info/rule/requireSpacesInAnonymousFunctionExpression\nWe should an example to the docs though\n. Although maybe this should be by default\n. Nice job @bjdixon - the rule doesn't seem to bad with the new assert methods haha!\nMaybe a test for nested ternaries? What should happen there?\n. Yeah that makes sense to me. :+1: after nested tests\nMaybe we should also make a separate rule to disallowNestedTernaries\n. We can just merge it since it's ok on travis and the error message is a timeout (something is taking too long) - just need another review\n. Thanks @bjdixon! Will release soon\n. @markelog was this not fixed before?\n. If you find it is a jscs problem later we can reopen - I guess close for now?\n. Yeah the esprima-fb parser itself is deprecated. FB isn't maintaining it anymore and are using babel (which esnext uses).\n. Going to close this - will have to figure out #1804 \n. When you return an object in an arrow function you have to wrap it in parens - otherwise it looks like a block\n. Another idea I had is that we make presets their own npm packages either in different repos, or in this repo (thinking of babel) so we can independently version them. \n. @paulschreiber Ok cool - can make one with https://github.com/jscs-dev/node-jscs/wiki/Creating-a-Custom-Preset-or-Config and then we can use that in own package.json\n. Less categories is good - just shouting out possibilities.\nGeneral: Docs, Fix, Chore, Misc\nJSCS: New Rule, Update Rule, Preset\n. Similar to https://github.com/jscs-dev/node-jscs/issues/407 so goina close that one again.\nhttps://github.com/jzaefferer/commitplease, http://gitcop.com/, etc\n. I've been using Fix, Misc, Docs so far - New Rule, Update Rule, Preset sound good.\nIf we want a flag then we can do it like angular fix(rule-here): description, chore(package-here): description. I'l just close for now\n. Releasing 2.2.0 today so just wait a bit :smile: \n. :+1: \n. Thanks for the report - yeah please add a snippet to reproduce and your config. If you run with --verbose then we can see what rule is erroring\n. Ok shouldn't of closed that - @danielstjules can you check if that PR/commit (https://github.com/jscs-dev/node-jscs/commit/f12830a469959f3543c51bfc632fe37292ea6d09) fixes it?\n. 2.2.1 is released! Hopefully fixes it?\n. So if you look at the rule options examples  - http://jscs.info/rule/disallowSpaceAfterObjectKeys,\nIt looks like what is valid is\njs\nvar y = {\n    abc: 1,\n    d  : 2\n}\nso that it's always checking that colons are 'aligned'\n@dreef3 \n. No, yeah I totally agree just wondering about the original implemented of aligned https://github.com/jscs-dev/node-jscs/issues/1420 for reference\n. although what happens after you add validateIdentation - since that's a separate rule\n. Are you getting a specific error? If it's the same as https://github.com/jscs-dev/node-jscs/issues/1816, then I think https://github.com/jscs-dev/node-jscs/commit/f12830a469959f3543c51bfc632fe37292ea6d09 should fix it - we will release a patch version since it was a regression if so.\n. Ok released 2.2.1\n. Ok I think https://github.com/jscs-dev/node-jscs/issues/1084 is similar - so at least those, but yeah that's certainly something that should be added.\n. Nice looks pretty good - with extra tests for newlines/etc. We should probably update disallowSpaceBeforeComma too later (only has 2 tests)\n. :stuck_out_tongue: Thanks @craigklem! will merge\n. Go ahead!\n. We should probably at least leave a note about it in the rule docs or even in the rule error message since I remember this or similar issues coming up a few times?\n. What should we put? Maybe suggesting not using the rule if it's only windows users? Or should we be checking .gitconfig like suggested\n. I think we can merge this idea with #1811 and close this?\n. Closing in favor of #1811\n. Although thinking about it now it's probably not worth the effort haha.. unless someone else wants to implement this?\n. If you could post a code snippet, config, jscs version that would be helpful (run with --verbose to be sure it's disallowTabs). Hmm I don't see a .replace in the file but we can keep looking?\n. @yekver friendly ping\n. Do you mean you aren't getting the error anymore or you can't paste the code that is erroring?\n. ./500.html? That shouldn't be linting unless you are using the extract option http://jscs.info/overview#extract?\n. Yeah but that's with the extract option - are you using it?\n. Yeah - except I don't see TypeError: Cannot call method 'replace' of undefined - just that jscs is linting the javascript in the script tags of the html file.\nSo it's not related to disallowTabs? This is only a surprise when you use . as the path instead of specifying folders but I don't think we should be linting html by default? @lahmatiy @markelog \nUnrelated, but is there a particular reason why you are doing -c ./.jscsrc? It will do it automatically.\n. Ok lines is an array that is something like [ 'html-here' ] and lineNumber is 1 so lines[1] becomes undefined\n. I don't think any of us have resources to implement the rule ourselves right now - if you want to submit a PR or just just a plugin rule to submit yourself, free feel though! \n. We would like to stay from rules depending on one another if possible\n. . isn't a binary operator I don't think doing what you did will work - It's a MemberExpression in that case. I'm not sure if we have a rule for spaces around . - I thought we did for new lines or something. http://jscs.info/rule/disallowOperatorBeforeLineBreak\nYeah maybe we need a new rule for that\n. If you are going to name it that then maybe? Or you could create an option to turn it on for a.b and/or a['b'].Maybe true does it for both?\n\"disallowSpaceBeforeMemberExpression\": {\n  \"allExcept\": \"\" // not sure how we want to name either type\n}\n. But yeah definitely encourage you to try sending in a PR. Most of the team will be busy working on 3.0 issues instead of adding new rules/options so help would be greatly appreciated!\n. Thought I checked for that :cry: - looks like I only added it for the require rule lol - https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-parentheses-around-arrow-param.js#L51\n. We can do the aliases and then remove in next version yeah.\n. Thanks for the report! If needed a PR would be great. Also, can you try if you haven't already if jscs src/**/*.js or just src works? We have http://jscs.info/overview#fileextensions which does .js files by default.\n. Yeah don't worry about the time out ones - either flaky or we have a perf issue - we should figure that out / increase the timeout.\n. Don't want to leave this PR hanging but I think someone else should review since I don't know much about it - although tests look good\n. Nice work (That issue has been open for a while)!\n. I'm assuming it is only for the plugin?\n. Ok great - thanks for the report anyway!\n. If you use --verbose you can see the particular rule that is erroring. Operator should stick tokens there's an extra space between the string and the comma if I'm not mistaken?\n. I guess first, is there any particular reason you have to use \"esprima\": \"esprima-fb\", (It's being deprecated) - see if that changes anything. I can't reproduce with your config/code snippet.\nIf that doesn't work, there's also a http://jscs.info/rule/disallowSpaceBeforeComma rule another that doesn't solve the bug.\n. Do we want to start warning people to remove that now?\n. Ok great. (By the way if you use just \"esnext\": true, it will use babel which also lints react components, with jscs > 2.0)\n. If it is then it might be the same as https://github.com/jscs-dev/node-jscs/issues/1746? @dreef3 \nCan you post a code snippet that would result in the error? Thanks for the report!\n. Ok we're going to release 2.3.0 soon\n. Thanks for the report @ptarjan! - this is the same as https://github.com/jscs-dev/node-jscs/issues/1831 - I have a fix in master already https://github.com/jscs-dev/node-jscs/commit/bcfaa5192b09391bdec31adecab14d3861817c8a. Just need to make a release later\n. Tomorrow sounds good!\n. sorry, releasing 2.3.0 now\n. Wow awesome - looks pretty good! Nice idea to have a param for a max level of nesting. I guess you could also change it to maybe skip ConditionalExpressions that have already been visited due to nesting but it's probably not necessary as people don't normally nest that much\n. Yeah I figured maybe the complexity isn't worth it? Or, maybe it should exit early based on maxLevels so you don't need to check? Not sure\n. ok nice @markelog?\n. Awesome stuff again @bjdixon!\n. No tests are passing now so I think I'm good\n. If anyone can review first? @jscs-dev/core \n. Ok merging then\n. Cool thanks for the report/fix @ValYouW!\n. @ValYouW maybe paste some code and play around with http://astexplorer.net/ if you want to make a PR for it later\n. Looks good - squash commits?\n. Ok that sounds fine and we were about to release a new version anyway. Do you want to make that quick PR?\nAlso did you see https://github.com/jscs-dev/node-jscs/issues/1811?\n. I think we have http://jscs.info/rule/requireNamedUnassignedFunctions - does that cover it?\n. yeah we need to work on naming. Also it would be nice if http://jscs.info/rules had fuzzy search\n. Is this good to close then?\n. Thanks for the report! Do you want to make a PR for it? Otherwise @markelog should be able to - I guess he forgot https://github.com/jscs-dev/node-jscs/commit/cd3473bee7ee864e099f5f94262f78d76c3ac953\n. Looks like your use case is function test( /* \\n option */ ) {} for in a parameter list of a function?\n. so maybe an inlined comment - basically it's between some code?\n. not really - \"allExcept\": \"inlined\"\n. Can check the 3.0 milestone for anything else we want to do or postpone. I think we can also do RC versions to allow users (and ourselves) to test it out (rc for rule rename, rc for config rewrite, rc for cst integration, etc)\n. Even if we don't get to the new format structure soon - we can try to combine rules that are similar - like maybe the function spacing rules? Clarified some of the options\n. Added deprecations, and documenting what is a public API\n. Thanks a lot for the report! This is for http://jscs.info/rule/requireSpaceAfterKeywords right? You can use --verbose to verify. Let us know if you want to make a PR - otherwise I can take this\n. since catch will be a keyword when checking by tokens - do we just need to check if the node is a method?\n. Will be fixed in 2.3.1\n. Awesome work again @bjdixon!\n. Looks good to me. @davidrapin @avdv - does this PR work for yall?\n. Going to release today - if you want to refactor @dreef3 /@avdv to be clearer later send another PR if we haven't already merged! Thanks\n. Thanks @dreef3! Although crap, when I squashed it took the other account as the author\n. We have node 4 in travis https://github.com/jscs-dev/node-jscs/blob/master/.travis.yml - If it doesn't do anything we can remove it to cleanup package.json\n. Thanks @SimenB!\n. Hmm can reproduce. @mrjoelkemp \nLooking at the docs (http://jscs.info/overview#cli), the cli format is jscs --auto-configure path so jscs  --auto-configure app_vilebrequin_assets/cartridge/static/default/_assets/js/global.js should work for you.\nThat can be a workaround but maybe we should change it so it allows jscs path --auto-configure?\n. Is https://github.com/jscs-dev/node-jscs/issues/1011 similar?\n. Yeah I would think so\n. We released 3.0! We also wrote a post about how 3.0 will be our last major release and that we are merging with ESLint.\nSo we won't be working on any new features moving forward including new rules/options. We will continue to fix bugs and work on CST and better autofixing for current rules in the upcoming months.\nI'm putting an orphaned label to note this isn't being worked on.\n. Thanks for reporting! What version of jscs are you using? @markelog \n. https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-line-break-after-variable-assignment.js#L72 is using errors.assert so it should be fixing it. What version are you using/what's your config?\n. Weird - definitely a bug - will check it out\n. Using spread in an object is not es6 and isn't destructuring if that's what you mean. I think you mean a spread property right? https://github.com/sebmarkbage/ecmascript-rest-spread#spread-properties, https://github.com/tc39/ecma262#current-proposals\nThat is experimental and in Stage 2 so you will need to use esnext: true if you aren't already in JSCS (which uses babel in the background) which supports this.\nLet me know if that doesn't work for you. So either add esnext: true to your .jscsrc or add --esnext in the cli\n. Would doing this work for now? @lahmatiy (Other than failing tests)\n. Oh ok I guess I'l close this then\n. Although I'd think it would be better to release a patch since we don't want people getting random linting errors from html files when updating? It wouldn't fix #1828 specifically but it would fix the issue of linting html when it wasn't intended\n. @lahmatiy turns off extract by default and removes boolean option.\n. If they specify an array at all - would we want to add .html?\nAlthough If we only support html anyway might as well only allow true\n. @lahmatiy ok made changes\n. @lahmatiy ok changes made\n. Thanks a lot @wachunga - we can always use the help!\n. This is on latest right? Also what rules do you have on? Probably (disallow|require)SpacesInFunctionExpression - seems similar to https://github.com/jscs-dev/node-jscs/issues/1637\n. Ok but in https://github.com/jscs-dev/node-jscs/pull/1745#issuecomment-137537924 - that PR didn't apply the fixes to the other rules - only FunctionExpression so that's probably what happened.\nSo we just need to apply the https://github.com/jscs-dev/node-jscs/pull/1745 fixes to the other rules I mentioned (I want to merge those rules, hopefully in 3.0)\n. Yeah there's so much duplication in those rules @mrjoelkemp. SpacesInNamedFunctionExpression, SpacesInAnonymousFunctionExpression, and SpacesInFunction, SpacesInFunctionExpression, SpacesInFunctionDeclaration\nI highly doubt anyone is using SpacesInNamedFunctionExpression, SpacesInAnonymousFunctionExpression\n. Might as well fix it now - should be fixed in 2.3.3. Thanks for the report @jaredly!\n. Thanks for the report/PR!\n. AssertionError: ImportDeclaration should appear when the mode is ES6 and in the module context. is an interesting error message.\nWhat version of jscs are you using and are you using esnext: true in your config?\n. Ok looking into it. Oh I see its an escope issue?\n. Ok its a simple fix - need to add an option to escope to allow es6 and modules, not necessarily related to esnext\n. I'l try to do another quick patch release but otherwise you'll have to use the commit to version \"jscs\": \"jscs-dev/node-jscs#63526b73\"\n. The irony is that the PR failed so that means 3500 isn't enough\n. Something with autofixing is taking a long time\n. Ok I didn't know about https://mochajs.org/#suite-level - we should add that for autofixing tests if we can\n. There's so many..@mrjoelkemp \n. Yeah sounds good. Would probably be allExcept: \"comments\" to be consistent with the others. Would you want to make a PR? The core team is going to be mainly working on 3.0 issues\n. Feel free to make PR or comment here if you need help (or ask on gitter)\n. Sounds like a (known) issue with the color scheme you are using (probably solarized). You can change the contrast in iTerm as a workaround or change your theme to use a modified version for now. Thanks! Also https://github.com/jscs-dev/node-jscs/issues/746\n. Don't have to curse :stuck_out_tongue:.\nMaybe we can just make exported variables an exception? Either by default or an option \"allExcept\": \"exports\" or something.\n. Looking at the original issue https://github.com/jscs-dev/node-jscs/issues/1107- it seems to be a padding between variable declarations and other statements, not variable declarations themselves. Sounds like it could be ok by default then?\nAlso the example in the docs is not very clear. http://jscs.info/rule/requirePaddingNewLineAfterVariableDeclaration\n. export const a = 1\n\n. http://astexplorer.net/ - Really helps with debugging the rules and stuff. Just use the esprima parser unless you are using es7 stuff (otherwise bablyon).\nDo you want to make the PR - doesn't seem too bad? otherwise I can\nLooks like gota change something here: https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-padding-newline-after-variable-declaration.js#L62-L64\nto either check the next token (since it's export) instead of var, let, const.\nI would probably check if nextToken.value === 'export' and then check if the next token after was a var, let, const and then return;\nWe should add some better examples to the doc for that rule\n. Do you think this should be a new rule value or by default?\n. Sounds it if it is the only statement in a block? I wonder if we have a helper\n. FYI, we're goina switch master to be the 3.0 branch and move the current master to be 2.x after we release 2.9.0 (soon).\n. Thanks for reporting the issue - yeah we need to improve the docs more. If you want to make a PR for some rules go ahead!\nIn the particular example you gave, the reason for naming a function would be to have a better stack trace when there's an error - however it doesn't help when you decide to use arrow functions (ES6) which are always anonymous so that would be on the browers/node to provide better errors I think.\n. Yep thanks for the report (actually surprised this wasn't caught earlier)! I guess it's because we are using that list for a bunch of rules and usually people use the opposite rule of disallowSpaceAfterKeywords. This should definitely be fixed - the list is from https://github.com/jscs-dev/node-jscs/blob/master/lib/utils.js#L14. The example array in the docs looks alright http://jscs.info/rule/disallowSpaceAfterKeywords\n. Yeah we should change that too\n. not sure why the example isn't just the opposite of the invalid one lol\n. @gibson042 what do you think after removing that snippet?, and @markelog \n. We can just add the rule if it's not there.\n. Do you want to do that PR? Otherwise I will\n. We would need to add a method shorthand exception similar to https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-in-anonymous-function-expression.js#L139, and a iife exception\nOptions would look like\njs\n\"disallowAnonymousFunctions\": {\n  \"allExcept\": [\"shorthand\", \"IIFE\"]\n}\nI kind of want to let the shorthand be an exception by default since erroring on a method seems weird/unintuitive\n. That's what I was mentioning - in the AST itself it is a MethodDefinition that contains a value that is a FunctionExpression with no id (anonymous) - so it's confusing to users. We could just check if the parent is a MethodDefinition and return;\n. @mrjoelkemp \n. Will have to check it out later - we will probably release monday (I think every 2 weeks for a minor version so 2.4.0) and patch fixes like 2.3.5 whenever. Looks good on first glance\n. Thanks for the PR @sivakumar-kailasam!\n. The closest we have is: http://jscs.info/rule/validateAlignedFunctionParameters - although you are talking about indentation we have an issue for most of those - https://github.com/jscs-dev/node-jscs/issues/1866\n. Well if you already have a PR then that's cool. I'm not sure about the different options\nI think could think of a style like this as well\njs\nfunction addThreeNumbers(\n  a,\n  b,\n  c\n) {\n  return a + b + c;\n}\n. I think this should of been asked in the other rules - but can you add a test for new lines between commas instead of a space? We could also have a comment in between. Otherwise looks good\n. Yeah just checks that it doesn't error or something\n. Yeah we just want to cover as many cases as we can think of to catch any potential bugs - looks good. I'm probably going to wait on merging new rules but this should be part of 2.4.0 which we should release before next monday at least.\n. Check out our https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md and other rules if you want to understand how JSCS works - it's usually pretty simple to add rules. I usually use astexplorer.net to check the code's AST\n. Thanks again!\n. Thanks!\n. Thanks again! - just changing the commit messages\n. I just put docs since it's a docs change but I can see how it could be fix - I'm just using Fix for code fixes\n. I was going to say it would be a new option but it just sounds weird if the rule is requireObjectKeysOnNewLine? Maybe it should be a new rule?\nCould be an option \"allExcept\": \"sameLine\". Would you like to make a PR? Most of the team will be busy working on 3.0 issues instead of adding new rules/options.\n. Most of the team will be busy working on 3.0 issues instead of adding new rules/options. Sounds like you want a new option to ignore if the block is a single line. maybe allExcept: \"singleLine\" or something. Would you like to make a PR?\n. If you need to add it to your own preset you can override the rule yourself http://jscs.info/overview#preset - with a value of null or false to disable the rule completely, or choose a different value.\nAs a separate issue, it seems like you are proposing another option - how would we determine what should or should not be allowed? Might as well add a list of exceptions.\n. As a workaround you can use the ignoreProperties option would looks like would work in your case?\n. That could be a new option. We would need to check all variable declarations / use escope type api. Would you like to try making a PR for it? Most of the team will be busy working on 3.0 issues instead of adding new rules/options.\n. Yeah I think having to check for all declared variables is more involved than most rules.  You can check https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-unused-params.js for the use of escope.\nOtherwise I would check out other rules, check out our CONTRIBUTING.md, and use http://astexplorer.net/ to view the AST.\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. @bturk Not sure why you think we are abandoning the project and have been ignoring issues - both teams decided to merge for the benefit of the community as a whole since we are doing the same things.\nI don't think you have to read the post to understand that everyone here and most people in open source do this in their free time. I'm just closing most requests for new rules/options so we can focus on bug fixes and helping people move to ESLint. If you think this is a bug I can reopen. \n. Looks good maybe someone else can look at it\n. Do we want to increase the timeout for that test and/or look into it again (appveyor)\n1) modules/config/node-configuration load error filter should accept `errorFilter` from node_modules:\n     Error: timeout of 3000ms exceeded. Ensure the done() callback is being called in this test.\n. Yeah I can't repro either actually. @jamietre Can you check again? And what version are you using?\n. I think we would want to keep rules mostly independent of each other.\nAlthough with 3.0 we should combine require/disallow like in https://github.com/jscs-dev/node-jscs/issues/698 so this won't be an issue.\nIt's a general issue but the point is that normally you disable the rules in a preset so I would do \"requireTrailingComma\": false like you mentioned. http://jscs.info/overview#preset\nBasically when using a preset you would first run the preset, and disable the rules in the preset and then add the required rules (at least for now)\nThanks for pointing it out though.\n. Looks like a fix was only needed for disallow space. Also I don't think it's an issue for disallowCommaBeforeLineBreak or requireCommaBeforeLineBreak so we can close this still\n. I didn't test it I just assumed. ok :+1: \n. Done with https://github.com/jscs-dev/node-jscs/pull/1942\n. Check out the corresponding test file: https://github.com/jscs-dev/node-jscs/blob/master/test/specs/rules/require-padding-newlines-in-blocks.js\nBasically you add more code snippets and test if it passes or fails\n. Can you be more specific about the issue? Is this an autofix issue or an issue with a specific rule? It sounds like you mean an indentation issue.\n. It says https://github.com/jscs-dev/node-jscs/pull/1913/files#diff-04405089acfc36b61502d0c5f5a54f83R236 was not covered anymore for some reason\n. removed that line - it's not needed right? Also added arrowfunctionexpression\n. @cybermerlin could you add your tests / this commit to the PR you already made?\n. Mostly likely requireSpaceAfterComma needs an exception if it's a trailing comma cc @bjdixon if you want to look at it or I can\n. I'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in core). We can all check back on this list for future rule ideas/options.\nWe released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Whoo! Thanks @duliodenis :smile:!\n. Awesome! Thanks for this awesome contribution! It was really fun being a part of the open source meetup and hope yall learned something! Happy to see more contributions!\n. Because in async function * () {}, async is the first node token and we\nwant to skip that and check star spacing (it's what we do in function spacing too)\nOn Sun, Oct 25, 2015, 4:32 PM Joel Kemp notifications@github.com wrote:\n\nWhy does this skip async?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1922#issuecomment-150966745.\n. https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md#setting-up-your-environment\n. If there is something missing from CONTRIBUTING.md then let us know but check that out first. Thanks!\n. I think you have more changes than you intended in this PR? or should this be closed in favor of the other one you already made? I see it has the same changes so will close this\n. Or the link https://coveralls.io/builds/3958392/source?filename=lib%2Frules%2Frequire-matching-function-name.js\n. Thanks!\n. Thanks again!\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\n\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Thanks for the report! We have --verbose mode for this already (either in the cli or verbose: true in your config). We are also planning on turning this on by default in 3.0\n. Adding the link to the rule could be interesting though (or more info in general)\n. > We are also planning on turning this on by default in 3.0\nis done\n. Code coverage decrease is for the new methods setWhitespaceBefore, getWhitespaceBefore, _getNextTokenFromIndex, _getPrevTokenFromIndex. Looks good but I guess it can be harder to read through because of changes that don't seem immediately relevant do the whitespace chane\n. Nice job @mdevils!\nI guess I don't care that much anymore @markelog haha. We rewrite the changelog anyway but if we want to do it still ok.\n. What version are you using?\n. I made an issue for it https://github.com/jscs-dev/node-jscs/issues/1909. What should be allowed then instead of [1, ,2], like [1,,2]?\n. If you mean the CST change then no since that is specifically added for v3 (hopefully we can push an alpha or something soon)\n. Yeah we would need a different fix for v2\n. Thanks!\n. Thanks for the report - looks like we just aren't checking if node.parentNode.parentNode is there or not \n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. Well that's weird since it's saying Error running rule disallowUnusedParams even though it's not in your config?\nHmm also realized the rule name should be requireSpacesAroundGenerator\n. No I have the PR for requireSpacesInGenerator since it's a bug - see if that works for you. \n. We want rules to be independent of each other - I think its fine to make it as an exception. Basically in the test part of the IfStatement or anything like that is multiline, then the brace should be on a new line\n. I don't think so other than https://github.com/jscs-dev/node-jscs/issues/1223\n. Looks to be intentional: // Don't check empty object\nhttps://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-spaces-inside-object-brackets.js#L105-L108\n. Thanks!\n. There are breaking changes so it won't just work. JSCS only uses babel for the parser so its fine just using babel 5 for now. Also we are switching to using cst which will just use babylon.\n. Similar to https://github.com/jscs-dev/babel-jscs/issues/24. We should be able to remove babel-core and replace it for now.\n. We should just inline the types again instead of var types = require('babel-core').types;\n. Yes if it could understand the token then it wouldn't need to error in teh first place\nSimilar to https://github.com/jscs-dev/node-jscs/issues/1655, https://github.com/jscs-dev/node-jscs/issues/1156\n. Not sure if there is a solution right now\n. > Would it make sense to condense converse rules (e.g. requireAnonymousFunctions/disallowAnonymousFunctions) into one rule which can be set to true, false, or default (null)?\nThis would require a breaking change to the config (or we support both at the same time and deprecate the old one) and would be in 3.0 - covered in \"new structure\" in https://github.com/jscs-dev/node-jscs/issues/1854. Creating a new, consistent format can take a while.\nAnd yes it would be a good idea to organize the website rules - we have a repo for that https://github.com/jscs-dev/jscs-dev.github.io/issues. Right now we have https://github.com/jscs-dev/node-jscs/blob/master/grouping.json but we haven't done anything with it on the website yet. We would definitely like the help!\n. I guess we just need to decide what we want to do while we move to eventually use the CST to check/fix in 3.0 https://github.com/jscs-dev/node-jscs/issues/1854\n. I updated your comment for formatting. I don't think having issues with a tool has anything to do with being smart - if its not working or not intuitive we need to fix that either if it is a bug or the docs are bad.\nWhat is your .jscsrc file? It says that the config file is not an object so its possible it isn't formatted correctly (it's a json file)\n. it shouldn't be in the node_modules directory. Are you using a preset? JSCS shouldn't be running anything if you don't specify a configuration or preset.\nWould be like in our own repo: https://github.com/jscs-dev/node-jscs/blob/master/.jscsrc\njs\n{\n    \"preset\": \"jquery\",\n    \"requireCurlyBraces\": null // or false\n}\n. I don't know any module that would create a file for you when you npm install it.\nAlso when you run jscs without a config file it will tell you to do so. I don't know why you wouldn't be seeing No configuration found. Add a .jscsrc file to your project root or use the -c option. when running jscs file without a .jscsrc\nYou would run jscs --autoconfigure files or use a preset jscs --preset=google to start out. \n. We need to figure out how to reproduce your issue to fix the error but yes when you run jscs without a config file it should say No configuration found. Add a .jscsrc file to your project root or use the -c option (which it does for me).\nYeah it shouldn't be saying TypeError: Object.keys called on non-object at Function.keys (native)\n. We might want to think about splitting the rule into 2 separate rules later\n. Nice!\n. Thanks!\n. I think npm3 should help if the issue is checking node_modules (nested dependencies?)\n. I think its related to multiple version of escope/estraverse (the same issue in eslint/babel-eslint). https://github.com/babel/babel-eslint/pull/209, https://github.com/eslint/eslint/issues/4485, some others? I haven't updated babel-jscs at all so need to port over babel-eslint changes\n. There are underscored properties like _paths which could do that (info on scopes, parent/child, etc)\n. Makes sense - the logic for this rule is using tokens which makes this annoying - https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-parentheses-around-arrow-param.js.\n. What's the error say?\n. Ok requireEnhancedObjectLiterals just needs to account for computed properties\n. To start dissallowTrailingComma is spelled wrong - disallowTrailingComma http://jscs.info/rule/disallowTrailingComma\nMaybe we could make a better error message but we don't know if you spelled a rule wrong or not (although we could probably add that in by checking edit distance\n. If its like \"closed this pull request in\" its because the way this project does merges is by doing rebase instead of the github merge button (check the commits history)\n. I think merging as is should be fine at this point @markelog?  \n. Also no merge conflicts so it would just work - It would make it easy to compare whats autofixable in eslint/jscs given that's how they have it\n. Yes unless anyone is going to actually do that work, we should just merge (my point is that it's already done)\n. Why does it have to be reevaluated in four months? we aren't adding more anytime soon, but if you really don't want to ok.\n. k\n. We don't have to do it since we'll be using cst later anyway but if we want to\n. Ok forgot the Closes - Closed with https://github.com/jscs-dev/node-jscs/commit/04b3274b324bbe76902d257bceb66f1ec609548e\n. Awesome job @Nargonath! Hope to see you more around here!\n. Thanks @markelog but I made this is for sorting object shorthand alphabetically - requireObjectShorthandFirst?\nWe already have requireObjectShorthand from the ember-suave port https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/require-enhanced-object-literals.js\n. Oh in the pictures? Yeah its a solarized dark theme for the terminal.\n. For sure! Your other suggestion can be a separate rule. Also would you like to give it a shot?\n. This could be for es6 imports or commonjs requires?\n. Thanks again!\n. Thanks!\n. Well when that happens it sounds like a good first bug/beginner friendly issue to me! :smile: \n. Sorry for the delay! Thanks!\n. Not a big deal but we've been using https://github.com/jscs-dev/node-jscs/blob/master/CONTRIBUTING.md#commit-message-format\nsomething like disallowUnusedParams: refactor to use CST\n. Thanks again\n. Looking at the source for the rule - https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/validate-newline-after-array-elements.js it doesn't look like a bug because it doesn't look like autofix is implemented for that specific rule.\nAutofix applies for all the rules in your config so the requireTrailingComma rule was autofixed.\n. It's certainly a valid request (we would want to have autofix for every possible rule)\n. I would think we want separate indentation rules then? https://github.com/jscs-dev/node-jscs/issues/1866 and not put indentation in validateNewlineAfterArrayElements. This particular can be standalone right?\n. Yeah :+1: - Thanks @redoPop!\n. I can do this today so don't worry about it\n. Ok added tests in https://github.com/jscs-dev/node-jscs/commit/b86c8c28a8d5a0b95f12c85da260174a0f3b9922\n. @joerideg Thanks so much for your PR (and first contribution)!\nAh I would recommend that (in the future) you create a branch \n\ninstead of sending a PR from your master branch.\nThen you can just delete that branch (or leave it there). You don't really want to remove your fork (unless you aren't planning on contributing to the repo ever again).\nSending your PR's through separate branches allows you to have multiple PR's at the same time if that becomes necessary (and it's the recommended way to do so).\n\n. Maybe a better name is disallowArrayDestructuringReturn or preferObjectDestructuringReturn\n. Maybe add an example in the test/data/options/preset/airbnb.js?\n. No, we don't have a rule for that yet - there is http://jscs.info/rule/disallowUnusedParams.\n. Can you give the rule name for this? jscs . --verbose should print out the exact rule for this issue\n. They are valid options not rules. Check out overview: http://jscs.info/overview#options.\n. Yeah that could be a new rule if anyone wants to give it a shot\n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. If you get a parseError, it is due to an error in the parser not jscs itself. If you are using flow then it's using babel so its a babel 5 issue. It looks like it's fixed in babel 6 so we'll need to update babel-jscs to use babel 6 to do so.\n. This should be fixed in 3.0\n. Yeah I wrote that comment if the airbnb/javascript repo wanted to host the preset instead of us but I'm not sure that it's happening anytime soon. I just added those in https://github.com/airbnb/javascript/pull/682 but yeah we can update the preset here.\n. We should do an autofix helper for sorting (talking to the core team)\n. Then it sounds like we need to change the docs to say an object with a maxLevel property that takes an integer (like in other rules), would you like to do a PR?\n. Ok it's running autofix and somehow some rules are conflicting? we would need to isolate which rules are creating this problem (post your .jscsrc)\n. There isn't enough information here - what version of jscs are you running? If it passes locally it might be something to do with node_modules either locally or on CI (maybe clear the cache). A code snippet that causes this would help (if this is a bug)\n. Ok great! All that's necessary is the version, the code that errors, and the rule.\ncc @markelog we should modify the https://github.com/jscs-dev/node-jscs/issues/new url to pre-fill with an issue template.\nExample https://github.com/jscs-dev/node-jscs/issues/new?title=foo&body=bar (version, minimal code, rule/s affected, etc)\nAnother idea: jscs issue or jscs --issue which prompts you for stuff and creates an issue\n. We've been doing these changes for a while though https://github.com/jscs-dev/node-jscs/blob/master/OVERVIEW.md#versioning--semver\nThis is probably the best reason for why presets should be moved out of the repo / just versioned independently since every rule change is breaking/major right?\n. Yeah it's weird and I certainly see how it's breaking - @markelog. Also would https://github.com/airbnb/javascript be willing to host/maintain the airbnb preset? https://github.com/jscs-dev/node-jscs/issues/1811 I know you guys are using eslint so probably not but I figured I should ask.\n. There's an option for shorthand http://jscs.info/rule/requireSpacesInAnonymousFunctionExpression\njs\n\"requireSpacesInAnonymousFunctionExpression\" : {\n    \"allExcept\" : [\"shorthand\"],\n}\nYeah it's true its not 'anonymousbut it is that way in the AST/ESTree http://astexplorer.net/#/f7rzQ9dHCc (FunctionExpression with id null)\n. Will just merge https://github.com/jscs-dev/node-jscs/pull/2104\n. Maybe git fetch/rebase to the latest \n. Added in https://github.com/jscs-dev/node-jscs/commit/b492de717ef1faeaac31b49965839015d4608ae3 \n. Yeah you can use the requireSemicolons rule for this.\n. Did you update to jscs 2.9.0? It was added in that version\n. You should be able to reinstall that package and it would have the latest dependency right? It's using^` https://github.com/AtomLinter/linter-jscs/blob/master/package.json#L18\nEither way you should be good to go when they update so goina close\n. This should be simple to do but I don't think we want to make a rule just to disable the operator (should be a bit more general). Could be a disallowOperators or modify http://jscs.info/rule/disallowNodeTypes to pass in certain parameters.\n. Also we are open to PRs if you're willing to give it a shot! https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-node-types.js is actually very simple with no options. I suppose disallowOperators would be ok.\n. I don't think you can switch branches in github so closing (make the new PR to master instead of 3.0) :smile: \n. Thanks for the report! This looks to be the same as https://github.com/jscs-dev/node-jscs/issues/2118. Goina close as a dup\n. Oops I meant #2094 (just searched in the issues for that)\n. I think we can do this but it's usually better if you define the folder's you are linting more explicitly instead of jscs . (if you are actually doing that).\nLike jscs folders/*/src or something?\n. Ah don't worry about that (yeah it's not related). Also i'm not sure why travis isn't running (it was down before)\n. We're starting 3.0 so I moved 3.x to be master (and we're skipping a bunch of tests atm since we need to fix those). Sounds like a refactor would be needed to fix, so hopefully this can be addressed in 3.0 anyway.\nMaybe @markelog, @mdevils has a better idea\n. Probably 2.9.0 since I'm not sure when 3.0 will be out (and we can apply the same idea to 3.0)?\n. Maybe try it with only esnext and that rule (if it only works then, then there might be a conflict)\n. Cool, thanks @rwjblue!\n. Ah yeah. I figured we would spend more time on 3.x and not do any more 2.x changes so we switched it\n. Ok that is really weird.. I haven't checked all the commits so will look through. @markelog \n. Yeah definitely needs a fix.\n. Ok probably https://github.com/jscs-dev/node-jscs/pull/2063\n. Was busy, I think we were making sure it was correct\n. Yeah\n. This is fixed right?\n. If we want to cover all cases (although rare), you can do destructuring like ({a: asdf, b: asdf2} = {a:1, b:2}); as well\n. @markelog Need to account for null parent? https://github.com/jscs-dev/node-jscs/blob/2.x/lib/rules/validate-quote-marks.js#L118\n. I think ObjectBrackets could be ObjectBraces or CurlyBraces or just Braces, since brackets are usually [], braces {}? like array brackets and curly braces? Not sure\nFor requireSpacesBeforeImportDestructuredValues, I think http://jscs.info/rule/requireSpaceAfterComma works?\n. :+1: But I think if you ctrl f for browser there's probably more\nlike jscs-browser.js in gitignore, jshintignore, deleting from comments\nDoes that mean we can remove this.registerRule(require...?\n. Do you want to fix it?\n. It's just a comment I had - we can merge this right?\n. Hmm I guess this is just how the rule was written so not a bug but not people expect. If you look at the source, it's pretty simple. We're just checking for a BlockStatement (use of {}) and then whether the only statement in the body is a return statement.\nNot exactly sure what we should do here (we should be more lax about it somehow).\nYeah you could make a variable, or you could probably do\njs\ngulp.task('js', () => \n  browserify(config.src.root + '/' + config.src.js + '/script.js')\n    .transform(babelify, { presets: ['es2015', 'react'] })\n    .bundle()\n    .pipe(source('script.js'))\n    .pipe(gulp.dest(config.dist.root + '/' + config.dist.js))\n);\n. Oh, part of the thing with the shorthand syntax is that it does automatically return the thing that's passed in.\narr.map((a) => a);\njs\narr.map(function (a) {\n  return a;\n});\nso your code should still return browserify... etc\n. We released 3.0! We also wrote a post about how 3.0 will be our last major release and that we are merging with ESLint.\nSo we won't be working on any new features moving forward including new rules/options. We will continue to fix bugs and work on CST and better autofixing for current rules in the upcoming months.\nI'm putting an orphaned label to note this won't be worked on.\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are pretty similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. We released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. I didn't figure out why it was failing on the cst side so I looked at the original file\n. Yeah although we can leave an issue open in cst\n. return \\n function() {} is invalid since it results in return undefined due to the newline, so merging\n. Yeah only for those tests I guess\nOn Fri, Mar 18, 2016, 9:39 AM Oleg Gaidarenko notifications@github.com\nwrote:\n\nJudging by the travis log, it seems we need to increase the test timeout?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/2181#issuecomment-198364388\n. Interesting it timeouted more than 15sec on node4/5\n. Yep seems to be fixed - I would follow https://github.com/azer/left-pad/issues/4 for more updates.\n\n(new babel version published for babel5/6 and package was restored - and package is restored\n. Hey @tconroy, there's always the ability to set null or false for any rule. It's not the doc for each individual rule since you can do it for all of them.\nSee http://jscs.info/overview#presets\n. false should work too (added in later, so maybe update your version)\n. Looking at http://jscs.info/rule/requireTemplateStrings the stringConcatenation option is actually for a string + a string. For a +b``, its a variable and a string and we would probably want that to be a template string\n. Sounds similar to http://eslint.org/docs/rules/no-undef\nWe released 3.0 recently! We also wrote a post about how 3.0 will be our last major release (since we are deprecating the project) and that we are merging with ESLint!\nThus we won't be working on any new features moving forward which includes new rules/options. We will continue to fix bugs and work on CST/better autofixing for current rules in the upcoming months both to help JSCS users and to gain experience that we can hopefully use in ESLint. But otherwise we both teams will be working on getting ESLint feature parity with JSCS and just a nice transition for our users.\nI'm putting an orphaned label to note this issue isn't planned to be worked on, but might be a good contribution as a custom rule (not in JSCS core itself).\nI would encourage anyone who wants the rule to try writing it themselves: I would either write a custom rule or submit an issue to ESLint and if accepted a PR. Otherwise a custom rule that won't be in core repo itself.\nJSCS rules are also very similar to ESLint rules: here are some resources to get started: \n- Project-specific Lint Rules with ESLint\n- Creating Custom Rules for ESLint\n- Maintaining JavaScript Code Quality with ESLint \n. @ljharb right now it's disallowQuotedKeysInObjects: { allExcept: ['reserved'] }\n@TheSavior right now it's an object with the ignoreProperties property. requireCamelCaseOrUpperCaseIdentifiers: {ignoreProperties: true}\nSorry, yeah we need to add these to the changelog   \n. Yeah I know, just didn't get to finish it up in time for the release (was my intention to add all that in). And what do you know I just remembered I already did that work https://github.com/jscs-dev/node-jscs/pull/2110#issue-130002352.\nI think maybe we should just revert that at this point so upgrading shouldn't need any changes at all. https://github.com/jscs-dev/node-jscs/pull/2217\n. Ok reverting that https://github.com/jscs-dev/node-jscs/pull/2217 and will release 3.0.2 soon\n- https://github.com/jscs-dev/node-jscs/releases/tag/v3.0.2\n. For this one, I think it's http://jscs.info/rule/requireImportAlphabetized\n. Yeah I fixed this on the releases page, but not the changelog - fixed on master.\n. I thought we fixed this one @mdevils? \n. Thanks for reporting. I updated the changelog to clarify. We removed options that we going to be on by default.\nI already reverted the rule deprecations in https://github.com/jscs-dev/node-jscs/commit/baede85f7f09de98dae22bf1b7b8b8e25fa3c0b2 which would of caused other config changes.\nI also have a PR open (not done) to add a message about those specifically https://github.com/jscs-dev/node-jscs/pull/2208. Or we should just ignore them and leave it on by default\n. Ah yeah I threw an error.\nIt wasn't warning before either but we could change it to a warning instead good point.. might have to refactor the rule logic since it was erroring multiple times\n. Hm interesting since we had already excluded node_modules before... And this is only an issue when you do jscs . rather than specifying the folders\nOh I see https://github.com/jscs-dev/node-jscs/commit/908bd20654723eac98949f994710c9ea902fe671 which changed node_modules/** to */node_modules/**. Maybe we need both.. globs are confusing @kirbysayshi  \nWe were ignoring the top level node_modules by default but we made a change to ignore sub node_module folders. It seems like now it only ignores sub node_modules.\nESLint discussion: https://github.com/eslint/eslint/issues/1163#issuecomment-58378266\n. Reverting in https://github.com/jscs-dev/node-jscs/issues/2222. Will release soon\n. @kirbysayshi Ok I think we are going to revert to previous behavior in 2.x and users will have to specify nested node_modules themselves since that isn't as common of a use case. \n. @zxqfox brought it up - it could be. I guess it depends \ud83d\ude04. It would be cool if the error reporter could give multiple locs - like start/end for a string  \n. There is also http://jscs.info/rule/requireObjectKeysOnNewLine, so it looks like the message just needs to be changed here\n. It's fine \ud83d\ude04 (cuze I canceled the build and forgot to put ci skip)\n. What do you think about making 1.0 so we can use ^\n. Oh yeah, cst itself doesn't support flow atm\n. It's a CST change, so it depends on if anyone wants to make a PR for it (I don't think there needs to much change in JSCS itself if at all). It could definetely happen if anyone is up to do a PR in that repo.\nhttps://github.com/cst/cst/issues/120\n. @mattgrande it didn't remove support yet - the package didn't publish a lib directory so there were no files https://github.com/cst/cst/issues/151\n. Should we still keep this line (L30) since L26 is the same?\n. like this?\nif (_this._ignoreSingleValue && entities.length === 1 ||\n    _this._ignoreSingleLine && node.loc.start.line === node.loc.end.line) {\n    return;\n}\n. Actually I did have a duplicate for each rule at the end so I removed it (and you can't see it anymore)\nit('should report multiple var decl with assignment', function() {\n  assert(checker.checkString('var x = 1, y = 2;').getErrorCount() === 1);\n});\nand \nit('should report multiple var decl with all assignment', function() {\n  assert(checker.checkString('var x = 1, y = 2;').getErrorCount() === 1);\n});\n. oh it's probably the .only\n. Look's like there is only iterateTokensByType but needs to check the value as well\nhttps://github.com/jscs-dev/node-jscs/blob/fb984e320ba5be6bf1325a4a7dc130f35b870091/lib/js-file.js#L121\n. Oh don't need this test?\n. What did you mean by \"for notation here\"? dot notation?\n. And this rule only applies to single line statements since you are required to have braces otherwise right? Yeah most people don't put curly's in their case/default anyway - Oh and that was what the original issue was about.. he wanted to remove curly's for case/default - so yeah we should just remove it.\n. js\nassert(checker.checkString([\n        'if (a) {',\n            'a = [',\n                '\\'b\\'',\n            '];',\n        '}'\n        ].join('\\n')).isEmpty());\npassed for me - node.loc.end.line - node.loc.start.line > 2\n\nI wasn't sure what the method was to count statements - is it node.body.length? Ok using that didn't pass for me actually.\n. I should probably change the other commit as well then https://github.com/jscs-dev/node-jscs/commit/f02aa48c5c6f5b12d6bc71356c7cc354dfe23f9b#diff-e64981daea06ee3997fe34d106961f0eR79 to remove spaces\n. && node.alternate.type !== 'IfStatement' is kept b/c otherwise some of the tests regarding presets failed\nmodules/string-checker presets preset crockford should not report any errors from the sam\nple file:\n     AssertionError: false == true\nNot sure if it means we need to add that to disallow\n. Oh ok that makes sense\n. The punctuatorToken.value === ',' is important\nOk I should just rename to this then.\njs\nvar nextToken = file.getFirstNodeToken(param);\n                var punctuatorToken = file.getPrevToken(nextToken);\n                if (punctuatorToken.value === ',') {\n                    errors.assert.noWhitespaceBetween({\n                        token: punctuatorToken,\n                        nextToken: file.getNextToken(punctuatorToken)\n                    });\n                }\n. How are we solving this for all other rules - maybe that should be part of the whitespaceBetween method? I don't know how common it is to have comments in for loop statements\n. Wasn't sure if we wanted to just use the default messages or not\n. there's an extra != here\n. wrong rule name here\n. wrong rule name here too\n. No, yeah it doesn't mean anything for noWhitespaceBetween, only for whitespaceBetween.\n. Ok it's good - I was testing on the wrong config or something at the time. Updated the OP\n. So for disallowPaddingNewlinesInBlocks I'm using linesBetween.\nLooks like I need atMost: 1, to make the tests pass. At first I used exactly: 0 but I was confusing myself or something\n. Error message should be \"Missing line feed at file end\" still haha?\n. don't need this now\n. maybe move this section above Invalid? I think that's how we do it\n. You can just use one ```js for the Example\n. I don't think you need the double quotes here\n. Should I change to if (node.parentNode.type &&  node.parentNode.type === ...)?\n. A few of the rules are checking both boolean and true - we should probably remove those so no one gets confused\n. thanks\n. Maybe it could say: Please file an issue (with the stack trace below) at\\n https://github.com/jscs-dev/node-jscs/issues/new\nOr about it with the stack trace below in our tracker:\n. Not sure what @mikesherov meant in https://github.com/jscs-dev/node-jscs/issues/1081#issuecomment-74891074.\n. Yeah I think it would be ok to put it in utils then?\n. Maybe just ES6: Requires parentheses... or we add another category like Version: ES6 similar to Type, Version\n. Yeah I was thinking that too - I forgot to add esnext to the test file and the nodes of course didn't return anything. And I guess if we are using esnext by default later..\n. isWrapped is using file so I would need to add that to the method signature like\nexports.isWrapped = function(file, node) {. How would I write the test for this since normally we do checker.checkString?\n. Oh I just don't know the method to create a file instance? Otherwise yeah it's straightforward.\n. Should I remove this check? Otherwise I think I'm good with this (and then do the isWrapped PR)\n. I guess not because it won't error anyway... I can remove it from the new rules.\nYou can assume that if someone is using an es6 rule they would have esnext enabled but it's always nice to have things that help the user experience - don't know if we could have an error if someone enables an es6 rule without esnext.\n. It will just ignore it since file.iterateNodesByType('ArrowFunctionExpression' is empty. Ok will remove\n. We'll need to change the message to include: an object allExcept or something.\n. So we would want to keep exceptUndefined for backward compatibility but not add exceptRequire and use allExcept for 2.0 purposes?\n. Not a big deal, but you can just do definedVariables.length === requireStatements.length here right?\n. I wasn't sure if I needed this example but it's just to show it doesn't error when the function has multiple statements in it since you need the braces and return in that case.\n. Do you mean this specific example or the rule? I can remove this example if it's confusing.\n. Well what I'm thinking is:\nOne form is v => v + 1.\nThe other is { return v => v + 1 }.\nThe shorter form is only allowed when you return a single statement/expression - it becomes a implicit return.\nSo the point of the rule would be for you to always use the shorter form when possible?\n. No I think you're right about it being confusing. I'm not sure what the best wording should be. I think it's since arrow functions are actually the shorthand of normal functions anyway.\nOne distinction is that one way is an expression body and the one with braces is a statement body (block)\njs\n// Expression bodies\nvar odds = evens.map(v => v + 1);\n// Statement bodies\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\nMaybe even the rule name should be changed but I'm not sure.\n. Yeah since arrow functions are just a shorter syntax for function expressions + lexical binding of this. This is copied from airbnb styleguide. Although that isn't exactly the point of the example so \njs\n// expression body (single expression so don't need curly braces and can do implicit return)\nnums.map(v => v + 1);\n// statement body (two statement requires curly braces + return statement\nnums.map(v => {\n  v = v + 1;\n  return v;\n});\n. Ah, so something like if (nextToken.type === 'Keyword') { return; }?\n. man.. I keep forgetting this\n. It seemed to be missing this previously so I added it where needed.\n. Related to process:\n\nThe \u2018process\u2019 dependency was updated to ~0.11.0, this module is inserted into bundles as the \u2018process\u2019 global/dependency. Previously, an unhandled error thrown in a \u2018process.nextTick\u2019 task would prevent any subsequent tasks from running, forever. The task queue now recovers from this condition, but may do so on a future browser tick. As part of this update, \u2018process.nextTick\u2019 now accepts variadic arguments, passed to the task, added to io.js in 1.8.1.\n\nOr just update to 9.0.8.\n. Lol so I thought of that too since it's annoying but forgot that we could\njust use the rule!\nOn Tuesday, May 12, 2015, Mike Sherov notifications@github.com wrote:\n\nIn test/specs/rules/disallow-space-after-keywords.js\nhttps://github.com/jscs-dev/node-jscs/pull/1364#discussion_r30147217:\n\n@@ -1,7 +1,7 @@\n var Checker = require('../../../lib/checker');\n var assert = require('assert');\n-describe('rules/disallow-space-after-keywords', function() {\n+describe.only('rules/disallow-space-after-keywords', function() {\n\nBy the way, perhaps we should disallow this identifier name... If only we\nknew of a linter that provided this functionality.... ;-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1364/files#r30147217.\n\n\n-Henry Zhu\nGeorgia Institute of Technology\nIndustrial Engineering '14\nComputer Science Minor\n. I don't think we currently have a way to support disallow describe.only together - only describe and .only. That would be an enhancement?\n. Ok makes sense - made the issue.\n. Should I keep the skipped tests?\n. I guess this is just a return early check since you can have many CallExpressions like a(), a(b), a(b,c,d) - it's not specifically needed but we do need to know at least 2 exist. Should I just put something like that there?\n. Sorry that is a bad example - I think it's because I'm checking that the first argument is a string and in that case it's not but will become a string anyway so that should error. I should remove the typeof stringArg.value === 'string' check then.\nIt would be simplier to just disallow parseInt but I guess when I was thinking of the rule I was thinking it would only discourage use when it could be a binary, hex, octal literal instead (so it wouldn't error for different radix?\n. Disallowing parseInt could actually just be done with disallowIdentifiers\n. No I was just saying that as a solution to your point before. I think this rule is still valid to enforce the literal style rather than parseInt.\n. Example of rule using allExcept: https://github.com/jscs-dev/node-jscs/blob/f55bbae8bfbd8d57a4f756193d824e6f398ff7a7/lib/rules/require-space-after-line-comment.js#L10\n. Yeah don't know why anyone would but we can report for that too.\n. Yeah its different so have to do both.\n. > Also, can you add tests that have more than just two operands being concatenated?\nI guess that would be what @markelog added before https://github.com/hzoo/node-jscs/blob/i-1416/test/specs/rules/require-template-strings.js#L21-L31\n``` js\nit('should report the use of string concatenation with right handed binary expression',\n        function() {\n            assert(checker.checkString('\"test\" + (a + b)').getErrorCount() === 1);\n        }\n    );\nit('should report the use of string concatenation with left handed binary expression',\n    function() {\n        assert(checker.checkString('(a + b) + \"test\"').getErrorCount() === 1);\n    }\n);\n\n``\n. Do we need this? I think there's already the same test below.\n. Will that fix the coverage issue? We still need the curly braces since we have that rule on.\n. I think @markelog means//jscs:in that it doesn't have a space after the//like in// jscs: ignore validateQuoteMarks. Yeah it's!` so not empty.\nBut to be consistent I guess it should be changed to .getErrorCount() === 1) like the other tests @rimunroe \n(Since !.isEmpty() could be an error count of 2, 3, 4, we should check it's exactly 1 error)\n. Maybe it's old, but I think it makes sense to be specific when possible (even though I guess it's not a big deal)? It doesn't seem to be used that often and only when there is a large group of tests. Maybe we should change all those? \nDon't know the reason other than it's easier to type haha.\n. just going to early return like the disallow rule.\nThe below is just tabbed over.\n. I just left it in since its comment and we'll prob have more deprecated stuff\n. Sorry wasn't sure what the link should be (the previous release or previous\nminor release) but yeah I guess its not that useful\nOn Jul 12, 2015 9:59 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nIn CHANGELOG.md\nhttps://github.com/jscs-dev/node-jscs/pull/1516#discussion_r34429358:\n\n@@ -1,4 +1,4 @@\n-## Version 1.13.1\n+## Version 1.13.1\n\nYep, feel free to fix this\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1516/files#r34429358.\n. Yeah right now adding it to the end is fine - maybe someone can do a separate PR to sort it at some point.\n. Yeah that sounds good to me.\n. What's the best way to go about doing that? - I see we have findPrevToken helper which can have a type. Like check if the previous node is a VariableDeclarator with init.type === ObjectExpression\n. This is done because in babel-jscs we change the SpreadProperty node type https://github.com/jscs-dev/babel-jscs/blob/1d15f1afa7dc7af24726187fcfb58cf9cdc4ff38/acorn-to-esprima.js#L181-L189\n. There was this issue https://github.com/babel/babel-eslint/issues/142\n\nI changed it to node.type = \"SpreadProperty\"; in https://github.com/babel/babel-eslint/pull/143/files\nBut it caused another issue in https://github.com/babel/babel-eslint/issues/142#issuecomment-118707124 so had to keep node.type === 'Property' and make a new property to keep info about SpreadProperty.\nBut maybe it's only tied to eslint and not jscs?\nBasically the issue is whether keeping it as type SpreadProperty (instead of Property) makes some rules that iterate over Property not work correctly.\n. Maybe something else should be done - it just returns if prevToken is undefined\n. So what happened with eslint was they weren't supporting anything not in spec so we have babel-eslint and also eslint-plugin-babel which rewrites eslint rules to incorporate es7 stuff like decorators etc. However in ESLint 1.0 (http://eslint.org/blog/2015/07/eslint-1.0.0-released/#new-language-features) ExperimentalRestProperty and ExperimentalSpreadProperty which are both es7 are supported in espree because of all the react users so they wouldn't need to use babel-eslint.\n. No it would - yeah that's a bad description\n. Yeah me too - had to console.log some stuff - Kind of wish there was a utility that showed the ast and then allowed logging/programming around it very easily (so it's easy to debug jscs) - like prevToken, nextToken etc.\nBut yeah it doesn't make sense. I mean't to check for ...\nDoing an update now - also adding disallow rule since I forgot.\n. I think it's because there is 2 parens (( so it would have the same result if you prevToken.\n. We just pushed it for babel-eslint and someone reported a bug, so we'll have to test it for jscs. Would be cool to find some projects (es5 and esnext) to test on and add to tests.\n. Yeah I don't know if we have a helper to check for function params.\n. Ok what do you think it should be called? utils.getBabelType, utils.getType?\n. Ok pushed\n. Ok wasn't sure the best way to test but this should work.\n. Ok - should fail first because of node.params.length !== 1 ||\n. Yeah I was just going to include both in the quote\n. I do git commit --amend is that the same?\n. I think it was https://github.com/jscs-dev/node-jscs/issues/698#issuecomment-61195949.\n() - parentheses, [] - square brackets/brackets, {} - braces, <> - angle brackets\nhttps://github.com/jscs-dev/node-jscs/issues/538\n. Small thing but I added http://jscs.info/rule/requireNumericLiterals.html as a es6 rule since it involves binary/octal literals\n. Yeah it won't be supported anymore - dono\n. oops fixed\n. Yeah it's pretty cool - you can live edit babel plugins. Would be cool to do the same for jscs rules https://github.com/fkling/esprima_ast_explorer/issues/26. Just added support for a lot more parsers too.\n. On this current PR iojs -> Now using io.js v3.3.0\n. extra space between of and tokens?\n. Right if people are using iojs they are definitely switching to node 4 asap\n. Yeah it is kind of annoying writing out all that for each test - maybe assertOne/assertEmpty can be a helper like reportAndFix? Then we change all the rules to that\n. Thought it was for\n```\nif ( !(\"foo\" in obj) ) {\n}\n```\nbut I guess not\n. you could set file -> you can set the file\n. could set -> can set\nif needed -> if necessary\n. you could you one of -> you can use a.\nShortcut values cannot be combined with file masks\nAlso comma after auto\n. Currently, only the html format is supported (JavaScript inside <script> will be checked) and extracted code cannot be auto fixed.\n. Sorry I updated my comment - set file mask -> set the file mask.\nActually the use of from which should probably be changed. Maybe This option checks javascript style in the specified file extensions (currently only html) or something like that.\n. Do we want to just say Checks?\n. Is there another word for tag or is that the correct jsdoc terminology? Maybe By default, it allows for any combination of tags?\nto select preset -> to select a preset? \n. Checks for differences between the jsdoc and actual return types if both exist.\n. In strictNativeCase mode -> The strictNativeCase mode\n. In capitalizedNativeCase mode -> The capitalizedNativeCase mode\nthat first letter -> that the first letter\n. extra comments?\n. alternative -> alternate\n. I guess I didn't understand what mixed set meant.\n. I guess you are just saying it allows all the tags from the preset you picked as well as any you add in the extra field?\n. jshint\ntest/specs/grouping.js: line 9, col 9, 'optionNames' is defined but never used.\nalso other styling errors from jscs\n. can remove .only \n. Maybe it would be easier to just check if the first param is not an identifier (and return) instead of all the checks?\n. So you're saying we should only use the defaults for value true?\n. yeah otherwise looks confusing\n. The previous fix for else if was adding nextToken.type === 'Keyword'\nI was going to check nextToken.type == 'Identifier' but I figured maybe this could be better?\n@mikesherov \n. Oops actually I mean't to remove this after changing nextToken.type !== 'Punctuator' below - so good catch either way\n. Yeah this one is for require-trailing-comma since I figure we might as well update both - the other one is here\n. Otherwise, you think it looks good? Will merge if so\n. Although actually - maybe it shouldn't check function since we have different rules to check function spacing - and other stuff like function * which should be a rule. Although I don't think we can change until 3.0 since its breaking change\n. Yeah even in the example it only has a few keywords (the ones that initially make sense) - not every single keyword. if, else, for, while, do, switch, try, catch, finally sound good\n. Yeah good point it would be FunctionDeclaration I guess I can add something like || node.parentNode.body && node.parentNode.body.type === 'BlockStatement';? Will need to write some more tests\n. Ok that actually broke a lot of tests - we need to also add something like && Array.isArray(parentNode.body) since even FunctionDeclaration has a set body property that is a BlockStatement but it's an object as compared to the IfStatement body which is an array that can contain multiple statements. \n. Don't think you need to do the ([named](#requirespacesinnamedfunctionexpression) part\n. the object to an object\n. Yeah true - will make the change in master.\n. I don't think it was necessary to move all the functions into the object. You could just call this in the https://github.com/jscs-dev/node-jscs/pull/1927/files#diff-105ac0edfe6913192922933858c13d7fR82 so you wouldn't have to create _this right?\n. If you don't remove it then it's the same code snippet as the one above right?\n. I feel like we almost always want to add includeComments or something?\n. More like we forget\n. this returns a string right?\n. Not a big deal but I don't really like the direction1- forward or-1- backwards\nsince you can't tell what it means from looking at this._getTokenFromIndex(this._tokens.length - 1, -1, options); Oh but I see it's an internal method anyway\n. basically don't want to use node.id since that makes the first token start and the function name\n. Sounds like we should remove this as well right?\n. Regarding https://github.com/jscs-dev/node-jscs/issues/2135, I think this should of been in the if statement above?\n. Ah, yeah just need to account for true value\n. yeah I saw haha\n. Need to figure out how token.parentElement is being output as Literal\n. Ok I am confused why I thought this was needed before but it works now\n. also esprimaOptions, esprima\n. Ok I guess we could move it up\n. ",
    "feross": ":+1: to this feature.\n. In node.js, it is valid to return like this because the node module system wraps files in a self-executing function.\nhttps://nodejs.org/api/modules.html#modules_exports_alias\n. Esprima bug filed: https://code.google.com/p/esprima/issues/detail?id=630&thanks=630&ts=1422662287\nPlease star it.\n. Yep, I agree. This is definitely a major version bump.\nThough, you could publish this as 2.0.0 immediately, if you're so inclined. Bumping the major version isn't that big of a deal :) Browserify is already on 8.x.x. Not to mention the version Chrome is on! :p\n. Just confirmed the issue exists on master.\n. ```\n$ cat code\nfunction a (x) {\n  switch (x) {\n    case 1:\n      return 1\n    default:\n      return 2\n  }\n}\n$ cat config\n{\n  \"disallowSemicolons\": true,\n  \"validateIndentation\": 2\n}\n$ ./bin/jscs code --config config\nExpected indentation of 6 characters at code :\n     3 |    case 1:\n     4 |      return 1\n     5 |    default:\n--------------^\n     6 |      return 2\n     7 |  }\nExpected indentation of 8 characters at code :\n     4 |      return 1\n     5 |    default:\n     6 |      return 2\n----------------^\n     7 |  }\n     8 |}\nExpected indentation of 6 characters at code :\n     5 |    default:\n     6 |      return 2\n     7 |  }\n--------------^\n     8 |}\n     9 |\n3 code style errors found.\n```\n. With semicolons there are no errors found.\nOn Tue, Jan 27, 2015 at 5:00 AM Mike Sherov notifications@github.com\nwrote:\n\nAnd if you use semicolons? Still busted?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/964#issuecomment-71643933.\n. @mikesherov Wow, that commit was merged 6 months ago but it hasn't landed in a stable version of esprima yet. I just left a comment asking when it will be merged. https://github.com/jquery/esprima/pull/272#issuecomment-71915861\n. Excellent!\n. Oh, somehow I thought it was released in 1.10. Thanks!\n. Could you do an npm release so we can start using the new JSX support?\n. Thanks.\n. \n",
    "benbernard": "@NickHeiner FYI, Your space after // rule, I added in https://github.com/mdevils/node-jscs/pull/401 landed in f11e42f and 3e5d3bd\n. Can do, might be a day or two\n. Added disallowSpaceAfterLineComment\nLet me know if you prefer changes to be squashed, or if you want any other fixes.\n. ",
    "landau": "Good to know. Thanks.\n. Nice. Thanks.\n. ",
    "aik099": "I've contributed to https://github.com/squizlabs/PHP_CodeSniffer project, which uses tokenizer to locate style errors more efficiently. Over time the fixer module was used, that used same parser to replaced bad tokens with correct ones. Style list is composed of sniff classes, that each is responsible for finding an error and fixing it.\n. :+1: \n. I'm PHP developer myself and pretty new to NodeJS world. If JS files are parsed on assumption that inside is 100% JS, then I guess there is no HTML parser involved at all.\n. :+1: Please also do the squash.\n. Maybe you should also rebase, because GitHub showing that PR can't be merged due conflicts.\n. > jscs codebase changes too fast\nThat is something each open source project can wish for. As long as no BC breaks are introduced.\n. :+1: for checking type attribute.\nI saw some tempting languages that use <script type=\"text/template\">...</script> to store some HTML in hopes that browser will render script tags with unknown type attribute as invisible to user.\n. See there is | in there, so we're catching any wild \\n or \\r.\n. \\r isn't used on Mac since ages :wink: To deal with files, where mixed line endings exists I usually do this:\n1. replace \\r\\n with \\n\n2. replace \\r with \\n\n3. split by \\n\n. ",
    "ryanki1": "It appears given the following jscs configuration in gruntfile.js:\njavascript\n    ..\n    jscs: {\n      options: {\n        fix: true\n      },\n      src: 'client/app/**/*.js'\n    },\n    githooks: {\n      all: {\n        'pre-commit': 'jscsSpin'\n      }\n    },\n    ..\n    grunt.registerTask('jscsSpin', ['jscs']);\n    ..\nthat commit takes place first and then fix applied. This means that sloppy indentation for example initially gets committed to repository, and only on subsequent commit, following auto-fix, is correct code style applied.\nThis suggests there to be a problem with jscs rather than grunt-git-hooks. \n. ",
    "shannonmoeller": "This is still broken if the var block starts with a function:\njs\nvar foo = function () {\n    },\n    bar = function () {\n    };\nThis passes, but var on its own line is ugly, imho:\njs\nvar\n    foo = function () {\n    },\n    bar = function () {\n    };\n. Was on 1.3.x. How embarrassing. Thank you, sir.\n. @markelog I agree that it would be cool, which is why I'm campaigning for it. :)\nBasically, I'm recommending that the .config/ directory be added to the list of default locations to check for configuration files for some of the most-used Node.js CLI tools. The idea here is to foster the use of XDG Base Directory Specification where $HOME is a module's root directory to declutter module repos.\nSo the search would look like this where X is the current directory:\n1. If X/file.ext exists, load it. STOP\n2. If X/.config/file.ext exists, load it. STOP\n3. Change X to parent directory. GO TO 1\nSome modules allow the path to be configured in package.json, but that's replacing file noise with config noise and requires additional effort in every project.\n. ",
    "ljharb": "Similarly, I have \"disallowQuotedKeysInObjects\" set to \"allButReserved\", but when adding \"requireDotNotation\" set to \"true\", jscs complains about 'undefined' and 'arguments', both of which are reserved words in ES3.\n. Sure, anything that lets me set the base of a project as es3, es5, or es6 would probably work well as a modifier to a number of rules' defaults.\n. +1 on both settings. I never want to see blocks without curly braces, but I heartily support the both mine and the OP's right to configure it.\n. Updated with tests; npm test passes in node 0.10 and 0.8; the tests crash in 0.6 (filed #388)\n. huh, you're right - I could have sworn it was both, but I just verified in IE 8. Fixing now.\n. Looks like this was manually cherry-picked in via https://github.com/mdevils/node-jscs/commit/d4d6bb49e751813ae3c90bd2d8d49024cbe011de rather than merged\n. I'll submit the patch upstream to jshint itself; it seems unfortunate that a developer tool wouldn't support as many versions of node as possible.\n. If I test my module in Travis, and I test it in node 0.6, and I lint my code as part of tests, then my linter needs to work in the same environment that my tests and code do.\n. @mikesherov Thanks, I'll update once/if I've managed to do that.\n@gustavohenke / @zxqfox: that's added complexity that it'd be nice to avoid. Obviously a dev can do anything, the point is they shouldn't have to :-)\n. If I never want to upgrade to v2.0, there's certainly a point. Please don't assume everyone wants to, or is able to, upgrade - any version you release will be around forever.\nThanks, I'll use null from now on, but I still think that's a poor substitute.\n. It's hard to convince people sometimes that updating is a good thing - I simply meant, please don't assume everyone will be able to upgrade to the next major version.\nAs for this particular \"feature\" - this is the only linter I've ever encountered with this restriction, so I'm actually asking for a feature to be opt-out/removed :-)\n. Not supporting 0.8 doesn't mean a module needs to be actively hostile towards somebody who might use it (I run tests on my modules that use jscs all the way back to 0.4 and it works perfectly, so I don't know why you'd drop support for 1 stable version back when there's no work required to support all the way down).\nnode 0.10.26 is the oldest node version that supported the ^ out of the box.\n. When I write a module, I use travis-ci to run its tests in all versions of node. I use jscs to lint my code as part of tests, so that pull requests will be marked failed if they don't comply with my preferred style.\n. @markelog touch\u00e9, obviously there's some work, just possibly minimal. You're right that I'm not running jscs's tests themselves, so I'm not aware of how much work might be required. Thanks for agreeing to use the tilde though - once 0.12 comes out, this might be a different discussion.\n@zxqfox That's a good idea, but is really difficult to code for since I want npm test to run linting, and i don't want to specify node versions in package.json. If you have ideas I'm open.\n. Oops, nvm, this is done already\n. Gotcha, that makes sense.\n. The eslint rule applies to places where it'd be a syntax error. The jscs rule applies to a style thing.\nI've never seen \"IIFE\" apply to anything but \"function () {}()\" - why would the jscs rule apply to immediate \".call\" and \".apply\" calls? I could also do Function.prototype.iife = Function.prototype.call and then jscs wouldn't catch it. It seems like jscs is overreaching here by detecting .call and .apply. Is that not special-case logic in jscs?\n(Also, function () {}() is absolutely a syntax error - !function () {}() or (function () {}()) or (function () {})() is a style choice, but one of them is required to make the function declaration be moved to an expression position, which is why there's a style question in the first place)\n. Gotcha, I didn't realize that this was a legacy rule - when I run jshint on the same file, it doesn't complain, and http://jshint.com doesn't complain about var a = function () {}.call(); either.\nHowever, wrapping the entire thing in parens solves my issue. I'll close this for now. Thanks!\n. Hmm - if they're not in the spec, then they're not keywords. However, IE 6-8 (almost the only ES3 browsers left) will throw a syntax error if I do foo.arguments = \u2026 or foo.undefined = \u2026, which is the reason I quoted them in the first place.\n. OK, I'm fine making that change.\n. Updated.\n. OK, now I'm confused then - if it wasn't IE 8, perhaps it's just IE 6 or 7? I must have added https://github.com/enricomarino/is/commit/e5bdceaf for a reason :-) I'll check in some VMs and update here.\nCertainly if this PR ends up not being needed, I'll close it.\n. Looks like it works fine. Not sure why I thought it was a problem - I'll close this PR.\n. Turns out this is absolutely a jscs issue - esprima and esprima-harmony-jscs both publish a binary named esparse, and as such, are incompatible as sibling dependencies.\nUnless one of them renames their binary, jscs must not depend directly on both.\n/@markelog\n. Not as often as I used to, but yes, still occasionally.\n. That's a bit tricky - is it something that couldn't be released in a patch version? (I'm waiting for one for another fix anyways)\n. Just to close the loop; this hasn't happened for me in months, so the problem is solved for me. Thanks!\n. This is basically a breaking change in a minor bump, so hopefully it can get resolved very soon.\n. Or better, Object.keys(obj).forEach(function (key) { obj[key] }) - loops are silly :-)\n. Thank you!!! I'll wait quietly for the publish :-)\n. @hzoo any chance of fixing my comment? I'd love to see this merged and released asap :-)\n. @hzoo that's up to @mrjoelkemp and the collaborators. I don't typically write a test for this case, because one would also have to test for propertyIsEnumerable, constructor, and a number of others, but I don't think anyone would complain if you had a test covering it.\n@mrjoelkemp any chance this could be merged and published soon? :-)\n. @mikesherov hooray, thanks! I've got lots of repos I want to bump jscs on\n. @mikesherov np, any chance for today?\n. @mikesherov :-) ping again? (please stop me if this form of a reminder isn't helpful, not trying to be a bother)\n. Thank you!!! I'll wait quietly for the publish :-)\n. Whatever you end up with, I'd want to be able to configure rules so that I could:\n- allow implicit return of non-object-literals\n- disallow implicit return of paren-wrapped object literals\n- disallow implicit return of blocks with labelled statements\nand, potentially, disallow implicit return entirely, or, allow implicit return entirely. (in case that helps make \"picking a rule name\" harder :-) )\n. We absolutely should. Those should only be used intentionally imo, and that's what linters should catch :-)\n. Sure, I like that.\n. ( \uff9f\u25e1\uff9f)/ \ud83d\udc4d\n. Awesome, that sounds great! I don't have an opinion on the peerDep, I just want 1.3.0 or higher :-D\n. preset changes are likely to be major but don't have to be.\nIt's not new rules that are breaking - it's defaulting them to \"on\". Adding a new rule is always a minor, and fixing a bug is always a patch. I realize it's tricky specifically with linter rules.\n. Absolutely - let's have an off-github discussion about what's involved first :-)\n. Thanks, ideally changelogs and readmes should be cherry-picked to master (or, \"master\" should be the same as \"latest\", and unreleased majors should be what's in a separate branch)\n. I do note in the changelog that this rule was changed - perhaps it's an unintended consequence?\n. commented on the line responsible, hopefully the fix includes a regression test ;-)\n. Thanks, any idea how long before a v2.10.1?\n. Sounds good, just looking for a timeline :-) thanks for the fast responses everyone!\n. Looks like this can be closed with @markelog's 594a4eed93fd51baec4c5f4f581c13ad348efa83?\n. also v2.11.0 now :-(\n. Certainly deciding to not be fearful since releases are cheap, and just releasing 3.x and fixing bugs as they come, is a totally valid option :-)\n. master branches where all tests aren't passing make me sad\n. @hzoo yes but disallowQuotedKeysInObjects: \"allButReserved\" worked in v2, thus it's an undocumented breaking change - the issue is just for the changelog.\n. if it's singular, then the changelog is wrong\n. see https://github.com/jscs-dev/node-jscs/commit/096b6bf0bebc34e8a028a722d584a70af1168c2a#diff-4ac32a78649ca5bdd8e0ba38b7006a1eR29\n. Thanks!\n. Confirmed fixed\n. I'm not sure why it would be better to return an object (with potentially infinite keys) rather than a single Promise value?\nEither way, would it be OK to change this in a followup, or do you want me to make the change here?\n. Actually this will cause a problem if a hasOwnProperty key exists on the object. You want Object.prototype.hasOwnProperty.call(disallowedIdentifiers, node.name)\n. perhaps this should be (keywords === true ? defaultKeywords : keywords).filter? #2135\n. ah, since isValidObject won't be true if it's an array (unless the array has an allExcept property, but since config is json that shouldn't be possible). Yes, that seems like the right approach.\n. this will work but @hzoo pointed out that instead, this statement should instead be moved into the preceding \"if\" block.\n. ",
    "knownasilya": ":+1: for getting this fixed.\n. So I guess this is an issue to raise with esprima.\nOn Jan 14, 2014 7:10 AM, \"\u041c\u0430\u0440\u0430\u0442 \u0414\u0443\u043b\u0438\u043d\" notifications@github.com wrote:\n\n@gustavohenke https://github.com/gustavohenke ))))\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/165#issuecomment-32259524\n.\n. This is related to #160 and #162. Basically indentation needs some love.\n. Or it shouldn't warn if there is a comment in the empty block.\n. Ah, thanks, wasn't aware of those.\nOn Jan 19, 2014 10:36 AM, \"Mike Sherov\" notifications@github.com wrote:\nUntil this is fixed, bluebird provides .caught and .lastly as pseudonyms.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/180#issuecomment-32710969\n.\n. \n",
    "andywillis": "@mikesherov, can you confirm that disabling the rules for import, export etc doesn't have any effect?\nI've tried:\njavascript\n// jscs:disable\nimport merge from '../modules/utilities/merge';\n// jscs:enable\nbut that doesn't seem to prevent the error from occurring.\n. > Of course, I would love for this to be fixed in ST3. Can you file a bug with them as well?\nSure.\nWRT the code, I've tested it and it works fine. Good call on using map.\n. Similarly, this is failing on //# which is used by Google in the dev tools to capture names of anonymous functions.\n//# sourceURL=filename.js\nIt would be nice to have a way to configure jscs to allow this too.\n. ",
    "tnguyen14": "The Esprima issue is fixed. Is this issue also resolved? I am running into this error today while using the import syntax in ES6.\n. I wasn't aware of the esnext option/ flag. Sorry, just saw that now. Thanks!\n. ",
    "makishvili": "Hello, Roman Dvornov, Ostrovok :hand:\n. ",
    "lahmatiy": "Hi! :)\nYep, that's duplicate. I searched for similar issue before, don't know how I missed that :(\n. I've made a PR for functions.\nNot sure about empty blocks with comments, because in tests this case treats as error.\nI suppose it's not hard to implement. But maintainers decision required.\n. Fixed\n. Looks much simpler for now.\nI'm not sure about search performance. Will need to use binary search for token lookup in future.\n. Any news?\n. jscs behave like JSHint with asi option now.\ndisallowSemicolon is more complicated than requireSemicolon. We can't warn on every semicolon, in some cases it still required:\n- function declaration or expression and following expression in brackets\n- sequence of IIFE\n- in the begining and/or in the end of file to avoid previous problems on file concatenation\nmaybe something else...\n. That's not enough, for example:\n``` js\nvar foo = function(){};   // use semicolon\n(123)\n// foo -> [function]\nvar foo = function(){}   // don't use semicolon\n(123)\n// foo -> undefined\n. Strange decision.\nI believe features (rules) should be implemented one by one. I'm not sure that I can implement opposite rule properly, and also I have no time for that now. Opposite rule isn't just comparison operator invertion, it's more complicated as I mentioned above.\nBut requireSemicolon rule would be useful for many developers right now. Maybe somebody else implement opposite rule later. There are many rules in jscs with no opposite rule, and I think it's ok.\ncc @mdevils \n. jshint requires semicolon by default, [asi](http://www.jshint.com/docs/options/#asi) is relaxing option.\nSemicolon at the end of expressions is code style related thing. JSCS checks code style. That's really strange that I should use other tools with JSCS to check my code style completely...\n. As `disallowSemicolon` has landed in 1.9 (#732) it would be great to land `requireSemicolon` too.\nI already use this implementation all this time via `additionalRules` and it's works fine.\n/cc @mdevils @markelog @mrjoelkemp @christophercliff\n. Sorry for delay.\nI've made a new PR #951 \n. My PR solves the problem by adding configPath into config object as non-enumerable property (to avoid exception on unsupported rule). This property also could be used by `test.cli-config.js`.\n. Done. #234\n. js\nnew require('xmldom').DOMParser();\n```\nAny JS engine understand this expression as:\njs\n(new require('xmldom')).DOMParser();\nSo jscs is correct at this point, the class name is require.\nI believe you mean:\njs\nvar xmldom = require('xmldom');\nnew xmldom.DOMParser();\nLooks like your expression shouldn't work as expected.\n. You also could use parentheses, to make your example works:\njs\nnew (require('xmldom').DOMParser)();\nIn this case jscs doesn't warn, even if a class name starts with lower case. So that is valid either:\njs\nnew (bar().baz)();\nThat's probably a bug. But I'm not sure it's really matter.\n. Hi, all! I almost done on this feature.\nBut something strange with code coverage, looks like new test file doesn't apply. Please see PR https://github.com/jscs-dev/node-jscs/pull/1038.\nLooking forward for feedback.\n. @mikesherov Thanks for your explanations. I fixed tests. And looks everything fine now.\n. Yep, after refactoring additionalRules doesn't accept file mask anymore, but expects Rule instances instead.\nBefore 1.8 adittionalRules processing by this code: https://github.com/jscs-dev/node-jscs/blob/v1.7.3/lib/options/additional-rules.js#L6-L9\nAnd also test by this test suite https://github.com/jscs-dev/node-jscs/blob/v1.7.3/test/options/additional-rules.js\n. @mikesherov \nI thought comments are better here as it.skip too hard to find. I decided do not remove those test as they were before and were successful. Probably those tests should be removed at all.\nI've read about Esprima changes about semicolon, but I can't found it for now. Actually it behaves better than before, as semicolon on next line is not an error here (previously it produces empty expression with single semicolon). Also you could format your code in this way:\njs\nvar foo = 1\n  , bar = 2\n  , baz = 3\n  ;\nI saw this sort of formatting.\nFirst implementation fails on it (returns error). But now it's ok. And it looks reasonable, as rule should just checks semicolon is not missed.\nShould I remove those tests than?\n// cc @mdevils \n. @mdevils \nDone.\nBut I moved commented tests to valid. I think rule should has an opinion about edge cases. It could be changed in future, and those test will a reminder about those cases.\n. @mikesherov @mdevils is there any chance for merge?\n. @mrjoelkemp rebased and fixed. Looking forward for merge.\n. @zxqfox @mrjoelkemp Believe it's ok now?\n. > @mdevils I like the current behaviour.\nI agree with Marat, current behaviour is better choice. Explicit better than implicit here. When no config found tool should warn about it, but doesn't silently check against default code style. Last one may be really confusing, especially if something wrong with your config location.\n. @mrjoelkemp Thank you. I'll fix PR asap.\nI read your comments. And I would like to notice that I tried write the code as close as possible to original codebase. I prefer code consistency even when I see that some code could be written better. Otherwise other similar code fragments should be changed too, but it's out of bounds of this PR.\nI also worrying about default value for extract. JSHint has auto by default. But the same setting for jscs might break build of projects that using jscs, as jscs will start checking something that didn't check before. Probably never should be better for backward capability. In this case extract will be opt-in.\n. @aik099 jscs codebase changes too fast, that PRs becomes broken all the time :( Sure I'll rebase, when return to work on feature.\n@mdevils I believe your should take a look on this PR. As I know you're refactoring JsFile class. For this feature we need some common File abstraction. Because we need to parse fragments of some file and it isn't a JavaScript file. I've made a simple mock class HtmlFile for this purposes (temporary solution). But I'm sure there should be better solution.\n. @zxqfox How it could help to parse html, find out js fragments and aggregate fragment errors in one error list mapped on original file?\n. @zxqfox It's not a working solution. We need text of correct <script> tags only. And we should know where fragment starts and ends. It requires for normalization, as rules check indentation, empty lines, trailing whitespaces, trailing new line, var position and count etc.\n. @mikesherov @zxqfox\nI'm not sure that custom parser could strip markup correctly. There are many cases for wrong matches if you don't process source as html, but js with possible markup inside.\nWe can't merge all scripts in single one. We should process scripts independantly (as separate files, as browsers do). Otherwise one broken script may broke others, or fix it, or change sematic of next script, for example:\nhtml\n<script>\n  (function(){ /* I'm IIFE */ })()\n</script>\n<script>\n  (function(){ /* I'm IIFE */ })()\n</script>\nIndentations may vary from <script> to <script>, so fixing validateIndentation rule couldn't help here.\nAnd there are some rules that could find an errors, because of script merge and no normalization:\n- disallowPaddingNewlinesBeforeKeywords\n- disallowSemicolons\n- disallowTrailingWhitespace\n- requireMultipleVarDecl\n- requireParenthesesAroundIIFE\n- requireSemicolons (PR)\n- validateIndentation\n- validateQuoteMarks: true\netc.\n. @zxqfox @mdevils Checking code inside jsdocs in @example section would be useful too ;)\n. @mdevils any news about new abstractions for code fragments? Maybe we could merge this feature for html only with future improvements (js fragments in any content type) when ready?\n/cc @mikesherov @markelog\n. Ok, I will rebase pr and fix review notes then.\nWhen do you plan next release?\n. Mostly done.\nIf everything is ok I'm squash commits then.\n. @markelog \n\nSo this is not a cli flag? What about documentation?\n\nNo requests before, but I could add both if needed. But we need to determine your interest first. PR is 7 months old already, but owners opinion about feature is still not clear to me.\n\nDo we really needed? JSHint has it, but i wonder if it is redundant?\n\nYes, it's needed. I saw feature requests before. And one day I needed this feature too. That's why I implemented it and thought it might be helpful for others too. You can see some attached issues here. I don't understand why you think it might be redundant?\nMost strange part to me, that you ask those questions after your own proposition recently to continue work on it (and proposition about merge in june) and when I fixed known problems once again :-/\n. Oh, I see. Thank you for your clarifications.\nI implementing cli option and array of masks support then. But I'm not sure about documentation, should I add it here https://github.com/jscs-dev/jscs-dev.github.io/blob/master/overview.html?\n. OK. Will be done.\n. I have some problems with merge now. Even after merge conflict resolving, some tests are failed because of changes in master :( I tried to fix it today but no success yet.\nI afraid I have no time till Sunday. But on Sunday I would continue to work on it (maybe earlier but I'm not sure).\n. Sorry for delay.\nPlanning to continue work later today.\n. Looks done.\nAwaiting for review.\n. For now I'm not sure we need for special values, i.e. always, auto and never. It looks odd. Maybe I should remove it?\n. Ok, I'm going to remove always/auto/never. It's simplify implementation.\n. Well, I may be wrong about file masks. Actually I mean glob patterns as I can see in excludeFiles.\n. Done! No more always/auto/never :)\n. Feature looks completed.\nShould I do anything else?\n /cc @markelog @mikesherov\n. Done\n. \\o/ it's finally merged :)\n. PR https://github.com/jscs-dev/node-jscs/pull/1518\n. All tests passed but something wrong with build process :(\n. > do we need these checks with //; at the end of line?\n@zxqfox Yeah, I think those test should be removed as more parser relevant tests. It would be great if somebody do it (I have no time right now).\n. @zxqfox I removed some redundant tests.\n. > According to our traffic stat and stars of that repo this is a most popular javascript code style out there.\nLooks like there is some hype around airbnb code style. It's great for airbnb, but jscs shouldn't care about it. If any preset will be by default it isn't fair for any others.\n. Some numbers. Before changes it creates 21189 regexps for our code base, and now ~200. Just calling new RegExp('[^' + ' ' + ']') for 20k times takes about 1-2% of overall checking time :)\n. File count is not important, but lines count matter. In my case there are 20k+ lines marked for indentation check.\nTruly speaking it's not a huge performance bust. But still creating RegExp for every line is not so great, even it's saves just ~30ms for me.\nAnother thing is memory. 20k new RegExp('[^' + ' ' + ']') allocate 3680000 bytes (3,5MB) RAM for V8. And as they are immediately destroying it's trashing GC as well.\nAnyway, moving just one line of code to proper place will make jscs a little bit better ;)\n. @mrjoelkemp @markelog Yeah, I saw it in release notes and happy about it. But nothing found in documentation and went to see something about it in source code. But still nothing found in config/configuration.js and decided it was a mistake in release notes. Didn't know it placed in config/node-configuration.js.\nAnyway it doesn't work as expected. When I use .jscsrc like this:\njson\n{\n    \"preset\": \"./test.json\"\n}\nI get warning: Preset \"test\" does not extist.\nI see some progress on issue in #1597. But it has a restriction that path should has .jscsrc extension. I guess it isn't intuitive. And nothing about it in documentation :(\n. > Just checked, this should work, if issue persist would you mind create test repo?\nI figured out what the problem is. In my case test.json contains comments (as jscs allowed it in .jscsrc) and I suppose there is JSON parse error somewhere internal. But instead of related warning jscs outputs Preset \"test\" does not extist.\n. It's because loadExternal used to load preset content. And loadExternal uses require, which doesn't strip comments from JSON.\n. Done\n. I'm not sure we need to test it. Otherwise all messages should be tested.\nAnd actually I don't know how to get printed message. Believe console patching is not good aproach.  Any ideas?\n. > That shouldn't be linting unless you are using the extract option\nActually we did one bad thing. Extract option is used by default. If you use --extract option for cli, it's just override default setting. I thought about several times, but have no time to fill an issue.\nI think extract should be opt-in by default.\nAnyway, in this case looks like something wrong with line position in html.\n\na file that contains one-string obfuscated html-code.\n\nProbably there is an edge case:\nhtml\n<script> /* some wrong style js here*/ </script>\nAnd we have no test for it :-/\n. > Ok lines is an array that is something like [ 'html-here' ] and lineNumber is 1 so lines[1] becomes undefined\nextract convert line number in js to line number in html. Looks like in this edge case (a file that contains one-string ... html-code) it fails.\nI think we should fix it.\n. Actually it's not fix #1828, since issue is in wrong line position.\nBut, yeah, we should disable extract by default (make it opt-in). Will try do it later.\n. Agree\n. > Default value is [\"*/.+(htm|html|xhtml)\"]\nAlso should be removed from docs\n. > Although If we only support html anyway might as well only allow true\nNope. For example your project can has templates or other html file with extensions other than defaults.\n. > we only support html\nIt's for now. But I believe someday it will be expanded for other formats.\n. Looks good :+1: \n. You should specify html file masks in extract option. But for now extract option check file names that in src subtrees. I'm not sure, but this might work:\njs\njscs: {\n    src: [\"src/*.js\", \"tests\"],\n    options: {\n        config: \".jscsrc\",\n        esnext: false,\n        verbose: true,\n        fix: false,\n        extract: [\"tests/*.html\"]\n    }\n}\n@markelog Yep, extract option is a little bit confuse. But it's by design, since it's an additional for regular checking. If you want to check exact file, you should use something like this:\njscs *.* --extract index.html\nBut you couldn't disable default file checking (i.e. .js files), since no cli option for that.\nOriginal issue is not connected with extract itself. It's about no check for fileExtensions when matching for filename. In other words .html file is processing as .js because its filename matches to src pattern, but shouldn't as extension isn't in fileExtensions list.\nI thought about future feature extension. Believe it should be more extensible, predictable, that applies for any files which extension not in fileExtensions list, with nesting support (for example, js in markdown that in jsdocs that in js that in html file). And as we can see, there is should be some way to set some path for extracting and avoid regular js file checking.\n. @aemonge  I'm not sure, but probably it's a html parse error. Could you provide complete source of the problem file?\n. I added ForOfStatement support and basic ES6 support as well (tests for let and const was added). But I'm not sure ES6 is fully supported still (even by Esprima).\n. I'm not sure about this. jshint does the same as I remember\n. You mean HtmlFile.prototype.getFilename = function() { .. } should be here?\nI wrote this code as close as possible to JsFile style.\n. It doesn't work as you expected https://github.com/jscs-dev/node-jscs/blob/master/lib/errors.js#L34\nI'll be happy if it does\n. I had an issue when reporter crashes for somehow. So I'd add this test.\nBut I don't remember details. Probably this could be removed...\n. Ah... I just remembered! Reporter crashes as we use custom file class (HtmlFile) in errors. So error details should be compatible with console reporter (other reporters ok, but console reporter not, because do additional formatting). Something like that.\n. Well, I expect that if some lines has tabs offset but others spaces offset \u2013 warning should be shown. For now nothing happen. So, here is we will see 2 warnings:\n\\s\\t\n\\t\\s\nBut in this case no warnings:\n\\s\\s\n\\t\\t\nBut probably it's a feature, not a bug ;)\n. I know, but still valid and may be used in sources.\nThis condition checks that <script> has no type other than text/javascript.\nhtml\n<script></script>  <!-- process -->\n<script type=\"text/javascript\"></script>  <!-- process -->\n<script type=\"some/template\"></script>    <!-- ignore -->\n. HtmlFile is just a helper for extract option, because we can't use JsFile, but errors must has a reference to some file.\n. We could use never as default value for extract option as JSHint has. I believe we should do initial solution as simple as possible. Additional options (and other improvement) could be added later.\nIf somebody runs jscs . it's not a problem I guess. never for extract by default should does no any performance impact.\n. I suppose values other than text/javascript is really rare used. If you insist, I can add check for all of those values. But I thought it's good idea to start with text/javascript and add new values if needed depending on users feedback.\n. Should I add checkPath and checkFile versions for every single test?\n. Maybe add support for array of minimatch masks in additional of never, auto and always? And set ['*.html', '*.htm', '*.xhtml'] or ['*.(html?|xhtml)'] by default?\n{\n  \"extract\": ['*.html', '*.htm', '*.xhtml']\n}\njscs . --extract *.html *.xhtml\n. Just align to style in other methods.\n. We discussed about extracting js from markdown or jsdocs, as example.\n. I don't how to describe it right :-/\nIt's not about file extensions, but glob patterns, I guess.\n. this test should be ok, just remove checker.configure\n. It's wrong. Should pass options.extract as is, with no extra. \n. Moreover, this mask stores in _defaultExtractFileMasks\n. I think should be possible to pass true value to use default mask for html files.\n. Looks strange. extract: true would be better\n. You still concat default masks. It's not a good idea. Left users to specify exact set of masks.\n. It's not correct. By default it doesn't extract anything.\nArray contains file masks, not extensions.\ntrue value is use default html mask.\n. Yes, exactly.\n. shouldExtractFile always returns boolean, maybe remove !! and !?\n. ",
    "ptarjan": "What ever happened to this? I'd like to to allow comments in if blocks\nif (foo) {\n  // Clearly foo is ok\n} else {\n  ...\n}\n. @hzoo https://github.com/jscs-dev/node-jscs/issues/1767\n. yay, thanks\n. Fixed by 9a9b1db9 ?\n. :ship: \n. I probably won't send the PR, sorry. But yes, it is contextual keyword so you have to check the node type to know if it is a keyword. I don't know what parser you use under the covers but on HHVM (the only parser I've written) we would annotate the nodes differently based on context.\n. ",
    "leobalter": "@markelog: it's already possible to reopen/merge this one?\n. Thanks :)\n:shipit: \n. ",
    "pickhardt": "+1 for getting this into JSCS.\nJSHint version 3 is planning to remove all style warnings:\nhttp://www.jshint.com/blog/jshint-3-plans/\n\"Remove all style-related options and warnings. If it makes sense they should be moved into optional plugins.\"\nThey are planning the following:\n\"JSCS enforces style conventions e.g. whether to put a space in between function keyword and a parenthesis or not. JSHint looks for potential problems and bugs: using undefined variables, leaking variables into the global scope, using constructs that don't work in all environments and so on.\"\nIt's unclear to me whether JSHint will still require semicolons or not. Since there's automatic semicolon insertion, it isn't technically a bug.\nI'm probably a typical user of JSHint and/or JSCS and/or Closure... we just want one tool and one config file to maintain.  The goal is to get a good code quality tool to enforce quality code. It doesn't matter whether it is a bug or bad style, what matters is code quality, which is inclusive of both.\n. I get that it's your decision (and JSHint's) to focus on different topics. It's just going to less useful than a combined project would be. For instance, is a missing semicolon bad style, a bug, both, or neither? There's almost definitely going to be cases where JSCS says something's a bug and out of scope, and JSHint says something's a style and out of scope, and as a result neither will cover it.\nIn any case, the real issue for this PR is whether or not to include semicolons. I hope you guys do.\n. +1 for this, reason being comments. I want to explain things in my config file, and also comment things out if needed.\n. Even better: use error codes, like Closure. https://code.google.com/p/closure-linter/source/browse/trunk/closure_linter/errors.py\nThen have a command to map from error codes to responsible rule(s).\nExample:\n\"jscs explain E101\"\n. One reason this is better is that you can do things with specific error codes. For instance, if E101 = Line too long, then you could have a comment to allow a really long regex line:\nvar x = /myreallyreallylongregexgoeshere/; // jscs ignore E101\n. One reason this is better is that you can do things with specific error codes. For instance, if E101 = Line too long, then you could have a comment to allow a really long regex line:\nvar x = /myreallyreallylongregexgoeshere/; // jscs ignore E101\n. ",
    "edwardsmit": "As JSHint removed Style-Checking, our team (and we're not the only ones I suppose) are looking for an alternative because \"All code in any code-base should look like a single person typed it, no matter how many people contributed.\" (https://github.com/rwaldron/idiomatic.js/)\nTherefore I would really like to upvote this rule.\n. ",
    "adius": "+1. Totally support @pickhardt on this topic. I think requireSemicolon and disallowSemicolon are an absolute must for jscs. Actually that's the main reason I was checking out jshint, jslint and jscs in the first place, as the use of semicolons is really inconsistent in a project I'm currently working on. We eventually decided to go for a no-semicolon policy.\n\u2026and now neither of the tools supports it. Great. -.-\n. JSHint only supports \"automatic semicolon insertion should be tolerated\" but I want \"disallowSemicolon\"  which translates to \"semicolons must not be used unless they are absolutely necessary\".\n. You better should. There are a lot of projects which have this style. They should be able to check documents for conformity as well!\n. ",
    "kaleb": "I am evaluating node-jscs to use in my development processes.  Although I prefer using semicolons, let's pretend that I hate them.  It seems like it can be a code-style issue. In twbs/bootstrap#3057, for example, there are many reasons against using semicolons (mainly for stylistic reasons) and other reasons for using semicolons.\nIf the following is parsed with jshint:\nfunction hi(name) {\n  console.log('Hello, %s!', name);\n}\nhi('World')\nThere is one warning: \"4: missing semicolon\".  But if I don't like semicolons, and I want my code style to have them as little as possible, I can tell jshint that I would like some ASI:\n/* jshint asi: true */\nfunction hi(name) {\n  console.log('Hello, %s!', name);\n}\nhi('World')\nThat's all fine and dandy, but I don't want any unnecessary semicolons.  I want something to tell me that there is an unnecessary semicolon on line 3.  This desire of mine is a stylistic desire.\nBut we need to be careful. Because, let's say that I want to also say hello to a couple of awesome JS projects:\n/* jshint asi: true */\nfunction hi(name) {\n  console.log('Hello, %s!', name);\n}\nhi('World')\n['jscs', 'jshint'].forEach(hi)\njshint now correctly tells me that this is wrong with the following:\n\nSeven warnings\n- 6   ['jscs'] is better written in dot notation.\n- 6   Expected ']' to match '[' from line 6 and instead saw ','.\n- 6   Expected an assignment or function call and instead saw an expression.\n- 6   Expected an assignment or function call and instead saw an expression.\n- 6   Expected an identifier and instead saw ']'.\n- 6   Expected an operator and instead saw '.'.\n- 6   Expected an assignment or function call and instead saw an expression.\nOne undefined variable\n- 6   forEach\n\nIt would also be nice if I were to have a tool that told me that I also had an unnecessary semicolon on line 3.\nI however prefer to use semicolons, though, so I personally will never run into this problem.\n. ",
    "sudowork": "Whoops. Thanks for letting me know - I had searched through open tickets, but not closed ones.\n. ",
    "jamesallardice": "I agree this would be a good addition. It matches what JSLint requires if whitespace linting is turned on.\n. This has now been updated to further separate named function expressions from anonymous function expressions. This is necessary because JSLint by default expects the following convention:\njavascript\nfunction a() {}\nvar b = function () {};\nvar c = function c() {};\n. @mdevils Yeah I wanted to but not sure of the best approach to do so (other than changing the name of the updated (disallow|require)SpacesInFunctionExpression rules to something else and replacing them with the originals).\nIf that's the best option what would you suggest we call the new rules? The obvious choice would be (disallow|require)SpacesInAnonymousFunctionExpression seeing as there's a new rule specific to named function expressions.\n. @mdevils I've updated the PR. The original function spacing rule has been restored, along with its tests and docs, and the new rule has been renamed.\n. Ok thanks, I'll try get a PR in over the weekend.\nOn 28 Mar 2014 20:05, \"Mike Sherov\" notifications@github.com wrote:\n\nNot yet, but we'd gladly accept a valid PR on this!\n\nReply to this email directly or view it on GitHubhttps://github.com/mdevils/node-jscs/issues/304#issuecomment-38962311\n.\n. I've just been looking at a rule for this. How do people think it should work? What I currently have:\n\n``` js\n// requireSpacesBetweenFunctionParameters: true\nfunction demo1(a,b) {}     // Missing space before function parameter 'b'\nfunction demo2(a ,b) {}    // Missing space before function parameter 'b'\nfunction demo3(a, b) {}    // No error\n// disallowSpacesBetweenFunctionParameters: true\nfunction demo3(a, b) {}    // Illegal space before function parameter 'b'\nfunction demo4(a ,b) {}    // No error\nfunction demo5(a,b) {}     // No error\n```\nThe examples I'm concerned about are demo2 and demo4. How do we think they should behave?\n. I've got most of this done now so I'll open a PR as soon as I've finished it off within the next day or two. Thanks.\n. Sorry, I hadn't noticed all this. Looks good to me, thanks for noticing and fixing @davidchambers!\n. From this commit it looks like this was intentional?\n. I think adding a new rule is probably the best approach then. Probably something like validateArgumentSeparator.\n. Ok, new rule it is then. I'll work on this and try to get a PR open soon.\n. @indexzero This rule validates the separation of arguments in call expressions. The validateParameterSeparators validates the separation of parameters in function signatures:\njs\nfunction a(b, c, d) {} // validateParameterSeparators\na(1, 2, 3); // requireSpaceBetweenArguments\nSee #771.\nThe code is largely similar between the two (only difference is the error message itself) but I couldn't see a way to DRY it easily (doesn't seem to be anywhere to put code relevant to multiple rules). Open to suggestions if I've overlooked something.\n. No problem. Yeah I believe so. At least that's what I took this to mean:\n\nwe're trying to unify rule names and values.\n\nRule naming seems a lot more consistent that the last time I contributed which was a good few months ago. Most rules are now disallow-* or require-*.\n. @mrjoelkemp Sorry, GitHub failed to notify me about half of your comments! Yes, I agree, I will remove the ',' option and add a separate rule for disallowing spaces.\n. @markelog I think that's a good idea. I based this rule off the validateParameterSeparator rule which is why it has the values it does. Since we've already established that we'll need to opposite rule I think it would be good to just have a boolean value... I guess the question is does anyone write code like this:\njs\ndoStuff(a , b , c);  // I doubt it\ndoStuff(a ,b ,c);    // Maybe\nSo I also guess it depends on how flexible we want to be. Allow people to define their own separators, or just cater for a, b, c and a,b,c.\n. I think the solution now follows what we discussed. There are 2 rules, requireSpaceBetweenArguments and disallowSpaceBetweenArguments. This allows validation of the two common cases, a(b, c) and a(b,c).\nShould the commits be squashed so it appears as it was done this way first time around or do you prefer to keep the history?\n. @mrjoelkemp I think it probably should be. I'm sure there are are people who write that way. I can remove it if you think it's not very useful or I can add it to the readme.\n. @mrjoelkemp Sorry, to clarify that, it is a valid separator. It just isn't mentioned in the list of acceptable values. I will add it to the list.\n. ",
    "minj": "Why do both child properties have to be true o.0?\nI still see no way to force this:\njs\nvar foo = function() {};\nfunction foo() {}\n. Pros:\n- no redundant braces\n- easier to spot\n- similar to python\n- easier to convert to a block statement and add more statements*\n* at least my IDE adds the second brace automatically\n. @markelog not at this point, no. I have no knowledge of the internals of jscs. I'll start overviewing any contributing information one of these days.\n. @markelog it seems to be fixed in master. \nBisecting it.. \nfbe9bf4ad5ab3e2645affee07a5fc5ff19cea35f seems to be first good revision\nI guess this is a dupe of #2174\n. ",
    "shobhitg": "There is still issue after the change.\nThis produces no errors:\nsomeFunction(\n    param1,\n    param2,\n    {\n    clickHandler : function() {}\n}\n);\nBut ideally we expect this:\nsomeFunction(\n    param1,\n    param2,\n    {\n        clickHandler : function() {}\n    }\n);\nhowever, this produces the following errors:\nline 5, col 4, Expected indentation of 4 characters\nline 6, col 0, Expected indentation of 0 characters\n. I found another related issue:\nThis is valid:\nsomeFunction(\n    param1,\n    param2,\n    {\n        clickHandler : function() {}\n    }\n);\nSame code in different style should be valid:\nsomeFunction(\n    param1,\n    param2, {\n        clickHandler : function() {}\n    }\n);\nBut produces these error:\nline 4, col 4, Expected indentation of 4 characters\nline 5, col 0, Expected indentation of 0 characters\nSorry for being the guy who is only pointing out issues. I discovered JSCS last week, and really liked this project. Hopefully, In a few weeks, I will be able to contribute fixes to the issues I see.\n. While I agree what Mike said that the last example is inconsistent, but nevertheless its a common practice to begin curly braces in the end of whatever line we are on and being coding in new block from next line.\n. disallowSpaceAfterObjectKeys can solve #316. It seems a conditional expression spacing rule isn't needed.\n. ",
    "BenoitZugmeyer": "Thanks for the comments, I'll try to fix/implement those as well.\n. Please review this new implementation. I added your two examples to the test data.\n. Done\n. ",
    "wachunga": "Naming sounds good. I wasn't planning to submit a pull request this time; would be a nice addition if you have the time.\n. Completely agree that the regex is gross. I didn't see the existing dependency on regenerate... I'll give it a whirl.\n. I can't repro that build failure on node 0.10.40 or 4.1.2. I assume it's a flaky test that times out sometimes.\n. ",
    "am11": "Another flavor of this style may be a comma-first conjugate:\njavascript\nif (x < 0) {\n    x++;\n    func1 ( foo );\n    func2 (\n        foo\n      , bar\n    );\n} else {\n    x--;\n}\n. @mikesherov, I will give it a try. :)\nSeperately, would it make sense to rename the rules, where if and else with single statements are allowed to drop curlies and similar mustache-related peculiar styling rules be named after K&R (indentation styling)? Source: http://en.wikipedia.org/wiki/Indent_style#K.26R_style.\n. Copy https://github.com/mdevils/node-jscs/issues/222\nGuys, wouldn't it be extremely natural and awfully familiar for users to disable a rule on false instead? Nullable Boolean is a separate (yet complex) data-type in some languages.\nOr is value false reserved for something else here?\nCMIIW. Thanks.\n. Thanks for clarification and pointing out the reflexive property!\n. Makes sense. The JsHint way is much flexible. But it would break the existing implementation unless we allow all three of the following:\n- --reporter reporterName.js\n- --reporter reporterName (current implementation; if we drop it, that would be a breaking change which isn't a big issue: we can put a note in README)\n- --reporter /path/to/custom-reporter-dir/reporterName.js\nWith TsLint way, we can introduce a new switch without changing the current implementation to allow:\n- --reporter reporterName --reporter-dir /path/to/custom-reporter-dir/\n. @markelog, actually the difference is the way they pass parameter name:\nJsHint:\n--reporter=jsonReporter.js\nJSCS\n--reporter json (without Reporter.js part)\nTsLint:\n--format json (without Reporter.js part)\n. @markelog, you are right; I must have overlooked the option for predefined reporter at first glance. :)\n. Thanks.\n@markelog, when is the next release scheduled?\n. Thanks. Hopefully this issue will also be resolved in the next release https://github.com/mdevils/node-jscs/issues/211 \n. Thanks. Hopefully this issue will also be resolved in the next release https://github.com/mdevils/node-jscs/issues/211 \n. Cc: @markelog.\n@nschonni, thanks for the input. Logically when the type is Boolean, shouldn't false be regarded as disabled (equals to non-existence in this case)? This behavior is present in both JsHint's and TsLint's configuration files; .jshintrc and .tslintrc.\n. This was fixed by https://github.com/mdevils/node-jscs/commit/67ba75b8d80fc604030f1bb3f290fb727c7958c0. You would probably have to wait for next release, which is scheduled any day now.\n. @markelog, (pardon me for sound pushy) can we get the approval from @mdevils today, so we can fix it before the tomorrow's release? :)\n. @markelog, I have added tests.\nI suppose instead of having if-else or switch-break, the nested try-catch is in fact keeping the flow of code smoother.\nIs there any specific case you have in mind where this code may break?\nBTW, the color logic is same as before:\nOld way:\n\nIf program.reporter is set, require './reporters/' + program.reporter.\nElse if program.colors is set, require './reporters/console'.\nElse require './reporters/text'.\n\nNew (proposed) way:\n\nTry requiring program.reporter (assuming its a relative or absolute path).\nIf unsuccessful try requiring './reporters/' + program.reporter.\nIf still unsuccessful AND program.reporter was set, then its an invalid name; reject promise.\nFinally test if color is set, require './reporters/console'.\nOtherwise require './reporters/text'.\n\nI have rebased with master. Please let me know, if there are more tests cases you want me to add. Also, I have tested web-essentials reporter at custom location and it worked well. However, I had to refactor that code to fix jshint errors and yet to pass tests:\n``` javascript\n/ jshint node: true /\n'use strict';\nmodule.exports = function (fileCollection) {\n    var fileName = fileCollection[0].getFilename();\n    var errorItems = fileCollection[0].getErrorList().map(function (error) {\n        return {\n            Line: error.line,\n            Column: error.column + 1,\n            Message: 'JSCS: ' + error.message,\n            FileName: fileName\n        };\n    });\n    process.stdout.write(JSON.stringify(errorItems));\n};\n```\n. @mdevils, thanks. :)\n. Nice. I was about to do a similar thing with node-jscs code. :)\nIn case of JsHint, TsLint  and CoffeeLint, the configuration files (.jshintrc, tslint.json and cofeelint.json respectively) get located by searching in the entire ancestry of the current directory (till drive's root). If none is found, the global configuration present in user's folder root is used as a fallback.\nWith JSCS, if jscs.json (or .jscsrc) is not found, neither it searches in the folder hierarchy nor it look in user profile folder. For that reason, we explicitly searched for configuration file in WE's JSCS executor.\n. Fixed by 77b9e01.\n. > It does not fixes #258\nCan you explain which scenario does it fail? I tested it with all built in reporters, relative and absolute paths; with or without.js extension and it passed. \n. Ok. Should I close this PR?\nIf that's the case, please pull up the CLI options and change this condition to:\njavascript\nif (!fs.existsSync(reporterPath) && !fs.existsSync(reporterPath + '.js' )) {\nto allow reporter name without .js extension.\nThanks.\n. Cc: @markelog \n. @markelog ping.\n. and thank you! :+1: \n. @mikesherov, \nSure, I will submit a PR.\nSo far we have this default file https://github.com/madskristensen/WebEssentials2013/blob/master/EditorExtensions/Resources/settings-defaults/.jscsrc\nCan you please point out if its missing any supported rule?\n. Its added by f9971ab via #432.\nI captured the list of options by the file names in node-jscs\\test\\rules directory. In PowerShell, ran this command:\npowershell\nls . | %{ write-host \"\"\"$($_.Basename[0])$((Get-Culture).TextInfo.ToTitleCase($_.BaseName).Replace('-', '').substring(1))\"\": true,\" }\nfixed some name and referred to docs for values.\nLet me know if there is something missing.\n@madskristensen, I think schema is missing some of these values. We should use this complete list for Web Essentials too.\n. Nice idea! Perhaps a CLI switch to generate the example config file? \nFor instance:\nbash\nnode node-jscs --gen-config ../../config-dir\nto generate .jscsrc in the target directory with default values and:\nbash\nnode node-jscs --gen-config ../../config-dir --disallowMultipleLineStrings \"false\" \\\n--disallowKeywords \"[ 'with' ]\"\nto provide keys which have different values than the default ones (imo the switches including the keys should be case-insensitive and module should throw if there is a typo in any key name). \nTo get the list of default values:\nbash\nnode node-jscs --list-config-defaults\nOn this note, I am not sure about the significance of this additional functionality. Can you give an example of a workflow where this automation will come handy?\n. :+1: \n@mikesherov, would we have to do meta-programming to achieve this? One way to go about it is by querying rules directory and strip the names to collect supported rules. But then we would have to look at some other place to find the possible/default values (would be nice if we are able to gather all possible values and enclose them in inline comment /**/ next to each rule's default value in the generated .jshintrc).\nThe switch name for this may be --build-config. :)\n. Actually I was thinking about automating the elicitation process, so no extra work is performed when adding new rules. Or one common place where rules are defined and all adapters will look there for supported rules.\n. I just realized that CoffeeScript has a similar switch: coffeelint --makeconfig > coffeelint.json.  See http://www.coffeelint.org/#usage. Now we have a reference point as well. :)\n. @mikesherov, its actually just this one line which makes the compiler throw:\n(the minimal code in c:\\temp\\file.js)\njavascript\nbar(){}\nRan the command: node tools\\node_modules\\jscs\\bin\\jscs c:\\temp\\file.js\nOutput:\n``` cmd\n\nnode tools\\node_modules\\jscs\\bin\\jscs c:\\temp\\file.js\nError: Syntax error at c:\\temp\\file.js: Line 1: Unexpected token {\n    at StringChecker.checkString (c:\\Users\\Sony\\Source\\Repos\\WebEssentials2013\\E\nditorExtensions\\Resources\\nodejs\\tools\\node_modules\\jscs\\lib\\string-checker.js:2\n21:19)\n    at c:\\Users\\Sony\\Source\\Repos\\WebEssentials2013\\EditorExtensions\\Resources\\n\nodejs\\tools\\node_modules\\jscs\\lib\\checker.js:48:26\n    at Array.0 (c:\\Users\\Sony\\Source\\Repos\\WebEssentials2013\\EditorExtensions\\Re\nsources\\nodejs\\tools\\node_modules\\vow\\lib\\vow.js:555:56)\n    at Object.callFns [as _onImmediate] (c:\\Users\\Sony\\Source\\Repos\\WebEssential\ns2013\\EditorExtensions\\Resources\\nodejs\\tools\\node_modules\\vow\\lib\\vow.js:1148:3\n5)\n    at processImmediate [as _immediateCallback] (timers.js:336:15)\n```\n\nVersion (node tools\\node_modules\\jscs\\bin\\jscs -v): 1.5.7\nWorks fine if we instead have:\njavascript\nbar()\nOutput:\n``` cmd\n\nnode tools\\node_modules\\jscs\\bin\\jscs c:\\temp\\file.js\nMissing line feed at file end at c:\\temp\\file.js :\n     1 |bar()\n--------^\n``\n. Probably something [like this](https://github.com/madskristensen/WebEssentials2013/blob/a1fca489181e99acb4056bbcfe8fb0a31e20820a/EditorExtensions/Resources/server/services/srv-jscs.js#L65-L74)?\n. Thank you @mikesherov  so very much ! :+1: \n. Actually, the condition is looking for first non-null value. Unfortunately, Windows doesn't abide by this mutually exclusive rule: bothprocess.env.HOMEandprocess.env.USERPROFILEare non-null and we are interested in user-profile (which is the reason it should come first in case of Windows). In case of *nix, the user-profile will always null, so we are safe withprocess.env.HOME`. I guess with OSX, that will suffice as well.\n\n@mikesherov, should we find a wrapper npm for locating correct home (taking care of this disparity among various OSes)?\n. Ok, I have fixed and rebased it.\n. Its done, please see 6524b35. :)\nI didn't knew that the requirement is to look for all environment vars (which is new, as no other linter service supports it atm). For instance I have 52 variables on my system.\nBut nonetheless, it does make sense for the fallback.\n. Alright. I thought you are referring to testing paths, not the unit tests. I have added the tests now. :smile: \nThanks.\n. @mikesherov, in tslint, the object passed to the custom formatter has a getRuleName() (see their verbose formatter example). Would it be possible to have something similar in object passed to node-jscs custom reporter? This way we (the downstreamers) would be able to emit which rule has been violated.\nRelated: https://github.com/madskristensen/WebEssentials2013/issues/1717.\n. @mikesherov, thanks alot! Its being a while I am out of sync with node-jscs and web-essentials project (been busy with node-sass and other things).\nI tried to debug it via web-essentials and apparently out script is broken. My fork's master was 299 commits behind the current master. Seems like a lot has changed, which is exciting! :)\nI changed this to var jscs = require(\"jscs\"), and apparently vow (here) is terminating the script (and try-catch is not helping either). Will dig deeper. Any quick pointers would be much appreciated. :)\n. Alright. jshint repo has it, I thought it might be a good idea to configure appveyor for jscs as well (especially for curious contributors, who are not using Windows machine). \n. @mdevils I have enabled the tests. Here are some notes:\n- We have now three targets in our matrix: njs v0.10, njs v0.11 and io.js v1.0 based on http://www.appveyor.com/docs/lang/nodejs-iojs.\n- Node.js v0.10 has an issue with piping on Windows which causes the process to terminate as soon as there is some delay in test. This was fixed in njs v0.11. Meanwhile mocha also provides a workaround for v0.10: https://github.com/mochajs/mocha/issues/333#issuecomment-70276442 (which is unreleased as of this moment).\n- Locally these five tests are failing on Windows.\nMeanwhile I have marked allow_faliure for v0.10 branch until mocha next build is release. For rest of matrix (njs v0.11 and io.js v1.0), IMO those tests should be fixed before removing those versions under allow_faliure block. Currently, all three of them are allowed to fail.\nhttps://ci.appveyor.com/project/am11/node-jscs/build/20\n@dougwilson, @FeodorFitsner, is it normal to get Command exited with code 4 (for instance in io.js turn also njs v0.11)? AFAICT, after running all the tests, it should exit with code 0 since the process has completed successfully (although some tests failed). Please CMIIW.\n. @dougwilson, thanks for the insights. With --no-exit at least v0.10 target is executing all the tests. But now all three targets are reporting Command exited with code 4. See https://ci.appveyor.com/project/am11/node-jscs/build/21.\nAlso, notice that the (five) tests which are failing locally for me are different than those are failing on AppVeyor CI (but all three targets on CI are failing exact same four tests). Hence the weirdness.\n. The root cause is the set of conditions in supports-color package.\n@sindresorhus, would it make sense to have another rule for CI before this line? Something like:\njavascript\nif ('CI' in process.env) { \n  return true; \n}\nBoth AppVeyor and Travis CI define CI env var.\nAppVeyor: http://www.appveyor.com/docs/environment-variables\nTravis CI: http://docs.travis-ci.com/user/ci-environment/#Environment-variables\n. @mikesherov, should the test modification be part of this PR?\n. @dougwilson thanks. But ICYMI, without changing the test spec, there is a simple way to fix it by passing --color argument.\nAll tests are passing for the entire matrix:\nhttps://ci.appveyor.com/project/am11/node-jscs/build/22/\n. Actually the arguments are also parsed by supports-color code and the good thing is mocha just ignores the arguments which it does not understand (as opposed to throwing error like: invalid argument). \nI have removed the allow_faliure block from latest commit.\n@mikesherov, @mdevils, this PR is ready. After merging, please follow the Next Steps from aforementioned comment to setup account.\n. @markelog I have made zero changes in the code.\n. @zxqfox \n\nbtw. we can get rid of  --no-exit  and just left  --color  option\n\nNode v0.10 has a bug which was fixed in v0.11 and mocha vNext provides a fix for v0.10 (which is unreleased): https://github.com/jscs-dev/node-jscs/pull/937#issuecomment-72208342. That is why we cannot get rid of --no-exit yet.\n. @markelog \nnpm test does not work when jshint is not globally installed on Windows, even with dev dependencies.\n. @zxqfox, \nThanks for the env var tip, npm test is working now. Also, I have removed --no-exit and it is working as well (I don't know how and why)! :stuck_out_tongue_winking_eye: \nThe default runtime in AppVeyor is cmd, so let it follow the natural course without explicitly specifying it. Moreover, there is a separate task in package.json test-appveyor.\n@markelog, I have removed v0.11 and io.js from the test matrix, for those being non-production-ready. Although node.js community is very touchy about this particular subject: regardless of how Joyent chooses to label that branch as \"unstable\". :smiley: \n. @mikesherov, done. :)\n. Not really; just to make it consistent with SublimeLiner. Also, I watched this video a while back, I guess it was one of the tip. :)\n. @markelog, Thanks. Fixed by e5bdcdf. Imvho, I don't think we need fs; especially when try-catch is serving the purpose.\n. @nschonni, thanks. Its fixed by cabdbe5.\n. Fixed by 669d427. Thanks.\n. With this check, we can entertain the files without extension (complying with the CLI usage example).\nWe are letting users both jscs --reporter checkstyle and jscs --reporter checkstyle.js.\nHow can we handle this in bin/jscs?\n. Got it. Thanks again.\nSee b4ed278 (amended).\n. Yep. See 2c2ee57.\n. \\n clutters the indentation. It takes the caret to the start of next line.\nEmpty option, however, takes care of indentation.\n. @mikesherov, can't find a suitable example which uses multi-line. Can you point one out?\nEven \\t doesn't work properly for indentation, unless monospaced font is set in cmd / terminal.\n. Is io.js not production-ready?\n. Copy https://github.com/jscs-dev/node-jscs/pull/937#issuecomment-72307626.\nsupports-color code has this isTTY condition, which satisfies for AppVeyor as teletyping is not supported in AppVeyor. On Travis CI, it does not satisfies this condition as stdout has isTTY set to true.\nI made this test commit to verify it. appveyor result and here is travis-ci result. I will rebase it out now.\n. Nops, just did it in a separate commit. All is working fine though.\n. Just output the path as per @zxqfox's suggestion.\n. Nops. Removed.\nAlso removed the environment matrix below. The build is successful. https://ci.appveyor.com/project/am11/node-jscs/build/38 with latest commit: ee2bb1dc5cfaf6f46f55a81f84070b20ef6dfbb7. :tada: \n. @mikesherov, yeah that was both CRLF and BOM. Fixed by 3477d8a76b2d3dfeee16d0e2c6610f169791f12c.\n. Sure: http://www.appveyor.com/docs/appveyor-yml (Ctrl+F, search for: '174')\n. They use build slug for msbuild systems (mostly Visual Studio projects).\n. ",
    "Baptouuuu": "Oops thought I was on the grunt task repo, sorry.\n. Well the error is on the declaration of bar\n. ",
    "cesarandreu": "A .jscs.json that is pre-configured with Google's style guide. If no one has done one I can do it myself, but I figured I'd ask first. \n. ",
    "Gerst20051": ":+1: \n. ",
    "qubyte": "I can take a look at this tomorrow. If it works, I'll pull this branch into mine to make sure that everyone gets into the commit history. How does that sound?\n. If the move of configuration to package.json was too aggressive a change, please let me know and I can put them back.\n. This pull request now integrates the commits from #199. In theory, merging this should automatically close that pull request too.\n. I can rebase it on top of master for you.\n. I'll get onto the additional tests and making this merge-able this evening.\n. I think I've managed to cover everything noted.\n. Maybe spoke too soon. Tests are failing on 0.8 for some reason.\n. @tivac Would you mind looking at the new tests in test.cli.js please? It's probably something dumb, but I'm not seeing where the problem is.\n. Nice one. Thanks! :D\n. Hmm. I really don't like using this outside of the constructor+prototype pattern if I can help it. How about an aliased function?\n``` javascript\nfunction getCwd(cwd) {\n    return cwd || process.cwd(); \n}\nexports.getCwd = getCwd;\n```\nThat way I can just use\njavascript\nvar directory = getCwd(cwd);\nThis is sort of a legacy from previous commits in this pull request. If the test for this function is not too important for you, then exports.getCwd can be dropped altogether. Another option that I favour for larger objects with lots of private functions would be to turn cli-config.js into a directory, and move private functions to their own module within the directory. This allows us to hide the function with respect to the module API, but it can still be required in by the testing suite.\n. ",
    "blowsie": "+1\n. ",
    "sorccu": "1.2.4, the latest version on NPM.\n. ",
    "janraasch": "This is not related to the functions.\nI have a similar problem with\njs\nLog\n    .find({\n        level: 1\n    })\n    .filter('some')\nOutput is\n``` bash\nExpected indentation of 4 characters at test.js :\n     1 |Log\n     2 |    .find({\n     3 |        level: 1\n------------^\n     4 |    })\n     5 |    .filter('some')\nExpected indentation of 0 characters at test.js :\n     2 |    .find({\n     3 |        level: 1\n     4 |    })\n--------^\n     5 |    .filter('some')\n     6 |\n```\nand validateIndention: 4 on v1.2.4.\nSurely,\njs\nLog\n    .find({\n    level: 1\n})\n    .filter('some')\ndoes not look right.\n. ",
    "XhmikosR": "Any news on this?\n. It's currently the only issue I'm having with JSCS and prevents us from switching to it in Bootstrap. As soon as this is fixed, I will make the switch.\n. @mikesherov: I just tried the latest master; we use jscs via grunt-jscs-checker btw.\nI replaced grunt-jscs-checker jscs with the latest master and it seems I keep getting the warnings.\nExample output:\n```\n   231 |\n   232 |    $target\nExpected indentation of 12 characters at js/modal.js :\n   230 |    if ($this.is('a')) e.preventDefault()\n   231 |\n   232 |    $target\n--------------------^\n   233 |      .modal(option, this)\n   234 |      .one('hide', function () {\nExpected indentation of 10 characters at js/modal.js :\n   235 |        $this.is(':visible') && $this.focus()\n   236 |      })\n   237 |  })\n------------------^\n   238 |\n   239 |  $(document)\nExpected indentation of 12 characters at js/modal.js :\n   237 |  })\n   238 |\n   239 |  $(document)\n--------------------^\n   240 |    .on('show.bs.modal', '.modal', function () { $(document.body).addClass('modal-open') })\n   241 |    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })\nExpected indentation of 10 characters at js/modal.js :\n   241 |    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })\n   242 |\n   243 |}(jQuery);\n------------------^\n   244 |\n\n\n181 code style errors found!\nWarning: Task \"jscs:src\" failed. Use --force to continue.\n\n\nAborted due to warnings.\nC:\\Users\\xmr\\Desktop\\bootstrap>\n```\njs/modal.js line 239\njs\n  $(document)\n    .on('show.bs.modal', '.modal', function () { $(document.body).addClass('modal-open') })\n    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })\n. No problem, thanks for your work!\n. Unfortunately, It still fails :/\nhttps://gist.github.com/XhmikosR/9edffc9de843289c716c\n. I just pushed my WIP branch here  https://github.com/twbs/bootstrap/compare/jscs\nDoing npm install && grunt jscs you should be able to reproduce the warnings better.\n. Someone should update vow and vow-fs after this is merged. I kept those due to their API changes.\n. I split the PR into smaller PRs.\n. I split the PR into smaller PRs.\n. Thanks for looking into this!\nAlmost there :)\nDid you check out the jscs branch I pushed in Bootstrap? I replaced jscs with the latest master and I keep getting some ident warnings when we use one line statements.\nExample:\njs\n      if ($input.prop('type') == 'radio') {\n        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false\n        else $parent.find('.active').removeClass('active')\n      }\n. Yeah I know the style is weird but it's not my choice :)\nThanks in advance!\n. jscs:src passes now, gj!\nNow I get warnings for this case\njs\n  test('should show tooltip with delegate selector on click', function () {\n    var div = $('<div><a href=\"#\" rel=\"tooltip\" title=\"Another tooltip\"></a></div>')\n    var tooltip = div.appendTo('#qunit-fixture')\n                     .tooltip({ selector: 'a[rel=tooltip]',\n                                trigger: 'click' })  // <-- HERE\n    div.find('a').trigger('click')\n    ok($('.tooltip').is('.fade.in'), 'tooltip is faded in')\n  })\n. Hmm indeed. I already fixed a couple like those and everything passes now.\nhttps://github.com/twbs/bootstrap/compare/jscs\n. Thanks for the fast patches :)\nAre there any plans for a new release? After that I'll make a PR and merge it.\n. Awesome, thanks! I will take care of this first thing tomorrow.\nPS. Maybe you could have a look at my other 2 PRs?\n\n\nFrom: Mike Sherov notifications@github.com\nTo: mdevils/node-jscs node-jscs@noreply.github.com \nCc: XhmikosR xhmikosr@yahoo.com \nSent: Wednesday, February 26, 2014 12:12 AM\nSubject: Re: [node-jscs] ValidateIndentation: validate indentation on all else statements that are block statements. (#271)\n@XhmikosR released. also, there's a pending PR to update gustavohenke/grunt-jscs-checker#35\n\u2014\nReply to this email directly or view it on GitHub.\n. NP, glad I could help. :)\n. I included it because the browserify dependency has changed and thus the generated file is different.\n. Done. Would be nice if someone could update vow and vow-fs too :)\n. Apparently node.js 0.8 is not supported anymore from many deps...\n. I can try later to spot which ones drop support for 0.8 and keep them to their old version.\n\nOr, the easy one would be to drop support for 0.8 too.\nWhich one do you prefer?\n. It seems most people agree to drop 0.8 support so I just did that for now. As long as the next version is like 1.4.0, this seems fine :)\n. I also tried to update vow and vow-fs but promises is something I'm not very familiar with, so I didn't succeed :/\n. There's already the engines property which I used to bump to 0.10 :)\n. PR rebased against the latest master.\n. PR rebased against the latest master.\n. bump\n. Because it's in package.json. https://github.com/mdevils/node-jscs/pull/266/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2R54\n. Because without it an error is thrown. The property needs to be quoted.\nOn Apr 29, 2015 9:57 PM, \"Eli White\" notifications@github.com wrote:\n\nIn lib/rules/require-capitalized-comments.js\nhttps://github.com/jscs-dev/node-jscs/pull/1322#discussion_r29368414:\n\n@@ -52,7 +52,7 @@\n- *\n-js\n  - * \"requireCapitalizedComments\": { allExcept: [\"jshint\"] }\n  - * \"requireCapitalizedComments\": { \"allExcept\": [\"jshint\"] }\n\nWhy is this necessary?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1322/files#r29368414.\n. No worries, it took me a while to spot it myself just to realize it was a\nbad copy paste from the docs.\nOn Apr 29, 2015 10:07 PM, \"Eli White\" notifications@github.com wrote:\nIn lib/rules/require-capitalized-comments.js\nhttps://github.com/jscs-dev/node-jscs/pull/1322#discussion_r29369324:\n\n@@ -52,7 +52,7 @@\n- *\n-js\n  - * \"requireCapitalizedComments\": { allExcept: [\"jshint\"] }\n  - * \"requireCapitalizedComments\": { \"allExcept\": [\"jshint\"] }\n\nAh yes, json, not js. Ignore me. ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1322/files#r29369324.\n. Isn't this exact comment used for the rules page? I looked at the website\nsource and came to the conclusion this file was used.\nOn Apr 30, 2015 1:13 PM, \"Oleg Gaidarenko\" notifications@github.com wrote:\nIn lib/rules/require-capitalized-comments.js\nhttps://github.com/jscs-dev/node-jscs/pull/1322#discussion_r29417745:\n\n@@ -52,7 +52,7 @@\n- *\n-js\n  - * \"requireCapitalizedComments\": { allExcept: [\"jshint\"] }\n  - * \"requireCapitalizedComments\": { \"allExcept\": [\"jshint\"] }\n\nAlthough it is not fully documented but we can accept config declared\nthrough js format\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1322/files#r29417745.\n. \n",
    "jifeon": "Yes, I would, but I have not enough time now..\n. Oh, sorry, its my fault of cause. The names should be without any question marks.\n. ",
    "soswow": "But what if it's defined in one of the presets I use as base and I want this not to be used? =\\ Looks like I have to copy paste preset ... =\\\n. ",
    "there4": "+1\n. ",
    "Mithgol": "Why is this issue labeled cli?\n. ",
    "jimthedev": "@mikesherov Did this make it in? \n. Thanks! Was searching for 'ignore' when I should have been searching for 'disable'. Appreciate it.\n. ",
    "Diokuz": "PS: \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 qwe: 'qwe' 4 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\n. ",
    "dwick": "Any idea when this will be merged?\n. +1 \n. ",
    "ChrisTorng": "I don't understand the content of https://github.com/isaacs/minimatch.\nI have test\n\"Scripts/**\"\n\"Scripts/*\"\n\"*\"\n\"**\"\n\"***\"\n\"*.js\"\n\"x.js\"\n\"Scripts\\*\"\n\"Scripts\\\\*\"\n\"Scripts\\\\**\"\nall without luck.\nI think the JSCS excludeFiles should be ok, I guess the problem is the integration piece of Web Essentials.\n. JSJint has maxerr http://jshint.com/docs/options/#maxerr, just hope to work as it. I think this is a common feature, for any linters... Don't understand what you don't understand?\n. ",
    "danielchatfield": ":+1: \n. ",
    "martinambrus": "+1 to this, I ran out of memory on a 2GB Continuous Integration Ubuntu machine while accidentally scanning external libraries (jquery and the such), which kept killing the machine completely\n. ",
    "tkellen": "Heya Mike!  I'm still planning on sending a PR but I've been busy on other projects this week.\n. Just posted a PR for this, #254\n. I am currently adding a feature to liftoff which supports automatically falling back to a home directory.  I'll try to update this PR in the next few days so it is actually functional.\n. Also, in case there is any confusion, this configuration will search for:\n.jscsrc, .jscs.js, .jscs.json, .jscs.node\nThe latter three are there by default, as node knows how to require those extensions.\n. ping!\n. @mdevils I'm aware the build is failing--the implementation is incomplete.  I was opening this for discussion.\n@markelog The pattern of having a global installation which defers to a local installation (if available) has been battle tested by thousands of users of Grunt for the past two years.  There are numerous other tools which do the same; some off the top of my head include: Gulp, Broccoli & Plato.\nI can make Liftoff support locating multiple configuration files easily, but before I do that work, can one of you confirm if you'd still like to continue with this PR?\n. @markelog I think you misunderstood the intent of my last comment.  I wasn't saying the implementation we're discussing here is exactly the same as those tools.  I was stating that global modules which defer to locally installed modules is not uncommon or untested.\nGiven that jscs doesn't currently consume plugins (that I am aware of), you have the luxury of using a global installation as a fallback, whereas Grunt/Gulp/etc don't (without hacking the semantics of require, anyway).\nThat said, Liftoff doesn't prescribe any particular type of invocation.  Its job is to simplify assembling an environment where the data you care about is easily accessible.  Intelligently locating a path to your config, finding a local version of your module (if any), standard hooks for specifying a cwd or explicit config path, automated pre-loading of modules from the local environment (if end-users want to author their config files in JS variants that you don't want to support), etc.\nI opened this PR to discuss what makes the most sense for jscs.  If you don't think Liftoff is a good fit for this project, that's fine!  If you do, can we focus on what the ideal launch steps are for jscs?\n. @markelog sounds good.  ping me whenever.\n. ",
    "Raynos": "I would want to use requireCurlyBraces that does not have this exception.\nThis exception should not be hardcoded but should be togglable\n. ",
    "rwaldron": "@Raynos +1 \n. ",
    "bajtos": "Is there any solution yet?\nI'd like to require curly braces in general, but allow else if without extra braces. The following code is rejected at the moment:\njs\nif (...) {\n} else if (...) {\n} else {\n}\n. @mikesherov IMO that is not a bug, as it was printed when my config included \"requireCurlyBraces\": [ \"else\"]. Removing else from the list fixed the warning.\nI find the behaviour perfectly correct in the context of the current implementation: else keyword requires curly braces, therefore the correct version is this:\njs\nif (...) {\n} else {\n  if (...) {\n  } else {\n  }\n}\nThe problem will go away once we allow keywords to bypass the CurlyBraces and include \"if\" in the list of white-listed keywords. That is exactly the point of this GH issue if I understand the discussion here correctly.\nHowever, if you think that else if should be treated differently and always bypass requireCurlyBraces, then I can fill a new issue for that, perhaps even submit a pull request.\n. @mikesherov done: https://github.com/jscs-dev/node-jscs/issues/799\nAs I was trying to reproduce the problem, I have found that if else is handled correctly indeed. However, the error message printed for a missing curly brace after else includes wrong line number, which confused me. See #799 for more details.\n. I commented-out the if-else block:\njs\n// index.js\nfunction foo(a) {\n  if (a == 1)\n    return 1;\n  // else if (a == 2)\n  //   return 2;\n  else\n    return 3;\n}\nThe issue is still present and the error message is IMO even more misleading.\nElse statement without curly braces at index.js :\n     1 |function foo(a) {\n     2 |  if (a == 1)\n----------^\n     3 |    return 1;\n     4 |  // else if (a == 2)\n. @markelog I would like to, unfortunately I have already too many tasks on my plate and this one is not important enough.\nIf there is anybody else willing to contribute the fix, then go for it!\n. ",
    "LukeGT": "I would like to see the \"require curly braces only if the statement spans multiple lines\" approach taken on board. The \"requireTrailingComma\" option has a similar behaviour, where you can ask only to require a trailing comma if the expression spans more than one line (or has more than one value). \nIn combination with a horizontal character limit, I feel like this is good enough to stop the absence of curly braces being abused while still allowing for it to make simple statements clearer and more concise. \n. ",
    "Droogans": "Duplicate of https://github.com/mdevils/node-jscs/pull/31\n. ",
    "tchak": "@markelog the dupe issue is closed, this is why I have not found it. Would it make sense to have one issue open to track the progress and to avoid dupes in the future?\n. ",
    "vohtaski": "sorry, my bad of course :)\n. ",
    "tenorok": "Similarly requireSpacesInNamedFunctionExpression disallowSpacesInNamedFunctionExpression and requireSpacesInFunctionDeclaration, disallowSpacesInFunctionDeclaration.\n. What i should write in my case?\n. Ok, but readme confuse.\n. ",
    "rnveach": "Sorry, apparently I want \"dsheiko / jscodesniffer\". It's executable's name is \"jscs\" so I confused this project with it. My bad.\n. ",
    "vtambourine": "What makes you think so?\nThat option can be very useful in various CI log outputs.\n. I have the same annoying problem...\nIs the source of the problem lies in esprima or in the jscs-rules?\n. ",
    "joshuaspence": "-1, --no-colors is useful.\n. +1\n. I would prefer if JSCS could (optionally) lint all files passed to it, regardless of the file extension.\n. Thanks, this works for me.\n. ",
    "necolas": "Will you be removing the \"Will be removed\" statement in the docs for --no-colors?\n. Fast! :)\n. OK thanks. I will probably wait for the WIP stuff to land.\n. I like the scope of the project. Are you saying that since ASI can affect program correctness it's doesn't fall under the umbrella of \"pure style\"? That seems fair. Thanks\n. TBH, this is going to be esprima and probably shouldn't run this over shell scripts\n. oh right! looks like a relatively easy fix then. thanks :)\n. Already using 1.6.1, that patch doesn't account for when you have a blank line between the shebang and the following code.\n. Patched in #635\n. Thanks!\n. I suppose you'd have to check the case of the string. Or be able to list libraries with properties that should be excluded from certain checks?\n. > To use dotted format lib.snake_method() you can disable and reenable requireCamelCaseOrUpperCaseIdentifiers rule\nYeah that's what we're having to do. Not the end of the world.\n\ndoes the ignoreProperties setting for requireCamelCaseOrUppercaseIdentifiers satisfy your use case?\n\nThat's a bit too general, because we wouldn't want to have code we author accept any case on properties.\n. Thanks :)\n. > if you are still going to use caret, this situation will happen again\nDo you plan on changing rule behaviour for minor releases?\n. I understand. Happy for that to happen if it catches issues :)\n. Thanks for the helpful suggestions and clarification.\n. Try putting something in lib/config/temp/.\njscs lib/ seems to work with several nested subdirs, just not the glob pattern.\n. Hmm, interesting.\n. ",
    "jbnicolai": "@markelog @sindresorhus `Chalk 1.0.0 has just been released.\n\nis that possible to disable auto-detection of tty? Would you accept a PR for that?\n\nThis is now possible. See this line from the release notes:\n\n\nAdd ability to force color by setting the FORCE_COLOR environment variable.\n\n\nAnd the second, previous, issue:\n\nBut in order to preserve current logic, we would need to change chalk.enabled value every time explainError method is called to the value of that argument, which mean it would have a side effect which it did not have before, since it would change state of chalk module.\n\nThis too has now been fixed! Rather than globally enabling and disabling the chalk module, it can now be set on a per-instance basis:\n\n\nAbility to disable/enable colors on a per instance basis, rather than globally.\n\n\nWould you be interested in picking up the move to chalk again?\n. @mikesherov I'll see what I can do :) \n. Updated.\n. Anything I can do to get this merged? :)\n. Heh, I'll stop nagging ;-)\n. \n. Fixed and --amended\n. ",
    "rxin": "But that turns on a bunch of other checks including more reserved keywords and parseInt, etc. It would be great to have a check in jscs ...\n. Actually if you believe it is not about correctness (since more modern browsers / non-es3 accept that) makes it more a matter of style than correctness, so it should go into the style checker rather than a linter\n. I sent a PR anyway. Don't think it would hurt to have this rule.\n. I would be happy to implement this, if you can suggest a good name or scope for the rule(s). \n. @mikesherov any suggestions on the scope & naming of this? I can submit a patch once it is clear what to expect here.\n. yup - will do it next week\n. Ok I just pushed a change that added require-trailing-comma and also improved the test coverage for the previous one.\n. Ok done.\n. Thanks for the comment. The Allman style should be tested already in test cases where there are \"\\n\"s. \n. ",
    "thelinuxlich": "Anything, just to make the developer write something about the function\n. ",
    "pigulla": "Actually, I think enforcing numeric keys to be quoted is a sensible option:\njavascript\nvar o = {\n    1: 'foo',\n    0: 'bar',\n    -1: 'baz'\n};\nIn this case, -1 needs to be quoted, but 1 doesn't. For consistency's sake it'd be nice to add an option to disallowQuotedKeysInObjects that enforces numeric keys to always be quoted.\n. As a matter of practicality most people aren't \"extremely consistent\" :-)\nI still think it would be a nice addition, but it's not an opinion I hold particularly strongly, I can certainly live without it.\n. Allow me to chime in since I just came across the same issue.\nConsider the following source:\njavascript\nfunction g() {\n}\nAnd this JSCS configuration:\njavascript\n{\n    \"requireSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInFunctionDeclaration\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": true\n    }\n}\nOne would think that the requireSpacesInFunctionExpression setting has no effect since the source only contains a function declaration. However, JSCS reports the following error:\njavascript\nMissing space before opening round brace at ./test.js :\n     1 |function g() {\n------------------^\n     2 |}\n     3 |\n. ",
    "hlubek": "Thanks for the reply, I didn't check the master version ;)\n. ",
    "gabrielf": ":+1: \n. ",
    "c0bra": ":thumbsup: \n. ",
    "incrop": "Hello, I have some thoughts about option names.\nThere is quite common naming agreement that [] called (square) brackets, {} \u2014 (curly) braces, () \u2014 parentheses or parens.\nConsidering this, several option names confuses me a little:\n- for parens: disallowSpacesInsideParentheses, requireParenthesesAroundIIFE,  but beforeOpeningRoundBrace\n- for braces: requireCurlyBraces, beforeOpeningCurlyBrace,  but disallowSpacesInsideObjectBrackets\nWouldn't it be simpler if glyphs in option names were called just brackets, braces or parens/parentheses according to this agreement (maybe also without curly/round/square prefix)?\n. ",
    "davidchambers": "This rule would be useful.\n. There are three sensible formats:\njavascript\nfunction f(a,b,c) {}\nfunction f(a, b, c) {}\nfunction f(a , b , c) {}\nI've never seen anyone do this:\njavascript\nfunction f(a ,b ,c) {}\nSince there are more than two sensible formats, perhaps we should allow the separator to be specified:\njson\n{\n  \"functionParameterSeparator\": \", \"\n}\njavascript\nfunction demo1(a,b) {}     // Invalid function parameter separator ','\nfunction demo2(a ,b) {}    // Invalid function parameter separator ' ,'\nfunction demo3(a, b) {}    // No error\nIt should still be possible to wrap parameters without triggering an error:\njavascript\nfunction AbstractSingletonProxyFactoryBean(abstractSingleton,\n                                           proxy, factory, bean) {\n}\n. What say you, @jamesallardice? :)\n. You forgot the anchors. Right now, \"foo,bar\" is a valid separator. The pattern should be /^ ?, ?$/. For readability, I suggest /^[ ]?,[ ]?$/.\n. #633\n. ",
    "wurmr": "@markelog That is an option, but this project already had reporters in it so I figured that could be a good spot.  If you think it the wrong use/direction for this project I will create a standalone npm package.\n. To finish this loop, I've published this as a standalone npm module called jscs-teamcity-reporter.\nInstall by running:\nnpm install jscs-teamcity-reporter --save-dev\n. ",
    "dayAlone": "I have this problem again with \"validateIndentation\": \"\\t\"\njavascript\nvar exports = function(req, res) {\n    res.end('Hello');\n};\nExpected indentation of 1 characters at line 2 col 2\n\n. ",
    "ankushdharkar": "I have a problem with \"\\t\" too\n. ",
    "prigara": "WebStorm 9 brings JSCS support out of the box (see Preferences | Languages & Frameworks | JavaScript | Code quality tools | JSCS).\n. ",
    "hatroman": "I have not exactly the same file. I have a big file with the tests for my app with different cases involving this one.\n. ",
    "Rantanen": "Please consider globally installed plugins when implementing this, ie:\nnpm install jscs-jsdoc -g\nCurrent additionalRules implementation checks for rules relative to jscs config or process working directory which prevents global rules from being useful. I admit global rules have limited applications. Normally you'd just have these as project dependencies to make sure everyone followed them, but this doesn't work as well when jscs is used as a company-wide style checker in (especially multiple) projects not using node.\n. For what it's worth...\nFrom plugin perspective:\nIt would make sense to allow plugins read the default configuration options such as requireCurlyBraces, etc. This would require either v2 or v3.\nIf plugins can use global configuration options (v2) there's little reason to support plugin specific options (v3).\nFrom JSCS perspective:\nIf plugins rely on global rules (again requireCurlyBraces as an example), this would prevent JSCS from changing their values without breaking plugins. If at some point JSCS would accept a new value (say exceptOneLine), this would break plugins that aren't expecting this.\nOn the other hand.. If JSCS was to go with v1, this would force users to (annoyingly) copy paste rules to plugins, but also prevent plugins from breaking if the default options change.\n\nSo for what my opinion's worth.. either go with v2 for simplicity and try to not change rule format in future (this includes #136) or go with v1 and force users to copy paste rules if they are shared between plugins but at least then plugins aren't tied to the rule format of other plugins. If I had to make the decision, I think I'd prefer v1 for greater compatibility.\n. > this rule should either not notice them or check them, as far as i remember, esprima does not give that ability, which is why this rule is a challenge, this why i can't merge this as is.\nI feel that if the rule name is requireSpacesInsideParentheses (or requireSpacesInsideRoundBrackets), it shouldn't care whether the parentheses are used for function declaration, function call or grouping. It should demand the spaces in all the cases.\nOn the other hand, if the rule was named requireSpacesInsideFunctionDeclarationBrackets, requireSpacesInsideFunctionCallBrackets or requireSpacesInsideKeywordBrackets then the grouping parentheses shouldn't be included - but as long as the rule is a generic all-parentheses rule, then it shouldn't differentiate based on what the parentheses are used for.\nWhat comes to naming, JSCS already has disallowSpacesInsideObjectBrackets, disallowSpacesInsideArrayBrackets and disallowSpacesInsideParentheses. When naming the require-variant with Parentheses, I mirrored the naming of the disallow- options. The implementation also mirrors the disallowSpacesInsideParentheses functionality closely when it comes to the abovementioned grouping parentheses. (Also to a fault, when it comes to missing the column info in the error reporting.)\nFinally I admit I was doubtful of the nested-exception as well. While I stand by my choice to include special cases for [] and {} in this rule, as they are still special cases for \"spaces after parentheses\", I understand similar special cases are not included in the other rules and for consistency you might want to omit it in this one as well.\n. I'm all for increasing the amount of options to allow more people to configure JSCS the way they like.\nThe problems I see is that if a rule disallows spaces within brackets, the rule should be a disallowSpacesInside... rule. Currently the allButNested option of requireSpacesInsideObjectBrackets rule has this side effect for nested brackets, which is the confusing bit.\nIf you want all the options, I feel the following would be needed for the rules to be logical:\n- requireSpacesInside*\n  - all: Requires spaces inside brackets\n  - allButNested: requires spaces inside brackets in all the cases where the brackets are not nested\n- disallowSpacesInside*\n  - true (backwards compatible) or all: Never allow spaces inside brackets\n  - nested: Never allow spaces inside brackets when they are nested within others.\nThis would mean...\n```\nrequireSpaces    disallowSpaces    valid    \n\n\n\n\n...           - Anything goes. No rule checks\nall              -                 ( ( 1 + 2 ) ) - Spaces required everywhere\nallButNested     -                 ( ( 1 + 2 ))  - Non-nested required. Nested don't care\nallButNested     nested            (( 1 + 2 ))   - Nested spaces disallowed. Non-nested required\n\n\nnested            (( 1 + 2))    - Nested spaces disallowed. Non-nested don't care\nall               ((1 + 2))     - No spaces disallowed everywhere\nall              all               Illegal - results in unsolvable style errors\nall              nested            Illegal - results in unsolvable style errors\nallButNested     all               Illegal - results in unsolvable style errors\n```\n\nIn this case even some of the valid combinations are a bit weird (-/nested for example), but at least the rules themselves make more sense.\nAs long as the current disallowSpacesInside...: true is considered the same as all, this should be backwards compatible (save for the requireSpacesInsideObjectBrackets option)\n. A bit delayed due to easter holidays.\n\nLoving this discussion, in other words you propose to soften allButNested option for the requireSpacesInsideObjectBrackets and add new option for the disallowSpacesInside rules, right?\n\nYes.\n\nSince we're talking about parentheses what is your thoughts about #92?\n\nHaving finished this message, you'll regret you brought this up. Sorry for the length! :)\nLet's see... below are all code examples from that issue.\n\narray = [ a, b ];\nfoo( options, object[ property ] );\n- [x] requireSpacesInsideArrayBrackets: all\n- [x] requireSpacesInsideParentheses: all\n- [ ] requireSpacesInsideIndexBrackets: Rule not implemented.1\n\n// Function with a callback, object, or array as the sole argument:\n// No space on either side of the argument\nfoo({\n    a: \"alpha\",\n    b: \"beta\"\n});\n- [ ] requireSpacesInsideParentheses: (original) allButNested2\n\n// Function with a callback, object, or array as the first argument:\n// No space before the first argument\nfoo(function() {\n    // Do stuff\n}, options );\n- [ ] requireSpacesInsideParentheses: No option for foo(function exception.3\n\n// Function with a callback, object, or array as the last argument:\n// No space after after the last argument\nfoo( data, function() {\n    // Do stuff\n});\n- [ ] requireSpacesInsideParentheses: (original) allButNested2\n\nfor ( ; (elem = elems[ i ]) != null; i++ ) {\n- [ ] requireSpacesInsideParentheses: No option.4\n\n[1]: This is speculation, but based on the *ArrayBrackets implementation, that rule does not care for [] used for indexing: object[ property ]. A rule for square brackets in this context is completely missing. Same goes for {} in functions: function() {return a;} is valid even with requireSpacesInsideObjectBrackets: \"all\". This relates to the first comment in #303. Doing a straight replacement of ArrayBrackets -> (squre) Brackets would change the meaning of the existing rule. In some styles foo[0] might be valid, even if spaces are required in var x = [ 1, 2, 3 ];\n[2]: The original allButNested implementation (I'll call this allButAnyNested in future to prevent confusion) in this PR tried to take care of this by allowing nesting any brackets ({} and []) inside the parens. The downside is that with that implementation enabling the allButAnyNested would have allowed great range of other (unwanted) behavior as well:\n- func( indexing[ nestedOnRight ]);\n- func( innerCall());\nThis feels like a big downside just to make an exception for allowing ({ and }).\n[3]: Not sure how it should be written. I would say this almost calls for ability to define exceptions for rules as separate rules/plugins. I'll open a new issue on this and continue that discussion in there. (Done: #342)\n[4]: The grouping parens case remains difficult. It kind of falls to the same exception behavior as [3] above but has a lot less straight forward implementation given esprima doesn't tell us which parens are used for grouping and which ones are required.\nConclusion:\nWhat comes to the current rules (requireSpacesInside ... ArrayBrackets, ObjectBrackets, Parentheses) the general cases of #92 are covered. There are some nasty exceptions that would make generic rules difficult.\nOh and the nitpicks.. sorry for those. I'm trying my best to fight against the habit of linebreaks at 80 cols and spaces inside parens, but every now and then some get through. I'll take care of those. :)\n. Yes, but these rules shouldn't prevent you from using JSCS completely.\nJSHint contains a decent compromise: Report bad rules as errors just like any other error:\nSelectionList.js: line 0, col 0, Bad option: 'inndent'.\nSelectionList.js: line 15, col 10, 'x' is defined but never used.\n. Comments should be already supported. At least with /* */ which I used yesterday unless I'm completely mistaken.\nI'm guessing the false rules would be part of the planned 2.0 release which I've heard aims to combine certain rules:\nrequireSpacesInsideArrayBrackets: true-> spacesInsideArrayBrackets: true, disallowSpacesInsideArrayBrackets: true -> spacesInsideArrayBrackets: false,\nunspecified: spacesInsideArrayBrackets: null\n. Looking at that code style:\n- Spaces inside object braces?\n- ! operator isn't shown. Does this stick or not?\n- No IIFEs\n- Type conversions\n- ...\n- maximumLineLength of 30 or so?\nIt's a problem of how much can be interpreted from that file. In one extreme an empty ruleset is valid for that file whereas on the other extreme it will result in conflicting rules being enabled, just because the example file doesn't contain cases for them.\nAlso with such example code style, new rules added to jscs might get enabled automatically and result in the existing code being against style. Say in future there will be a rule to disallow the use of undefined. The current code style file doesn't mention it -> The rule goes active automatically and rejects any real files which use undefined.\nThe only sane way to handle the rules is specifying them one by one... Now generating the initial .jsonconfig based on an example code style would make sense. But in the end rely on the json for the actual configuration.\n. > This code is just a brief example of .codestyle.js to illustrate the idea.\nSo the real .codestyle.js would need to be few hundred lines?\n\nContributors don't read .jscsrc they fix issues reported by checker. But every time they ready .jscsrc they browse example for each rule. Eg:\n\nWith a configuration file of 100+ lines, finding the spot that specifies a rule (and thus has an example of it) becomes equally cumbersome.\n\nBut this destroys .codestyle.js idea.\n\nWhich is.. ?\n- Easier configuration? No it doesn't. You can create the initial .json file from code.\n- Contributors having concrete example of the required style? Arguably. While they get an example the example might be overly verbose and ambiguous.\nConfiguration needs to be:\n- Forwards compatible: When JSCS is modified, (real) rules aren't added/modified automatically without explicit changes to the configuration.\n- Unambiguous: Everything that needs to be specified should be specified. Everything that isn't specified should be ignored.\n- Easy to modify: With .codestyle.js changing a single rule might require changes in several places.\n- Resistant to errors: There should be little risk in wrong errors. With .codestyle.js, accidental space at the end of one line (in 100+ line file) would disable disallowTrailingWhitespace rule for the whole project.\nWhat if the two options were combined?\nSupport .codestyle.js, but instead of deducing the rules from the code, include them in comments. Partial example:\n``` javascript\n/ jscs: validateIndentation: 2 /\n/ jscs: disallowSpacesInFunctionExpression: {\n    beforeOpeningRoundBrace: true,\n    beforeOpeningCurlyBrace: false\n} /\nfunction a() {\n  // No space before '(', space after '{'\n/ jscs: requireKeywordsOnNewLine: else /\n  / jscs: requireSpaceAfterKeywords: if, else /\n  if (true) {\n     //\n  }\n  else {\n     //\n  }\n}\n// Other options\n/ jscs: disallowTrailingWhitespace /\n```\nThis would be...\n- Forwards compatible: Just like with .json, rules must be explicitly specified.\n- Unambiguous: Every rule is specified.\n- Easy to modify: Changing a rule requires changes to one comment.\n- Resistant to errors: Accidental typoes or mistakes in the code do not affect the jscs options.\n- Self validating: The actual .codestyle.js could be used against itself to validate the contained JavaScript example code.\nThe main downside is using this format for quickly checking the wanted code style. The jscs comments reduce the actual code readability. But on the other hand, this format better highlights the enforced rules at glance.\n. ",
    "zaggino": "well, for me it's a style error because it does the same thing, it's just about the style how you write it ...\n. also, I already have a grunt task for a project... so developing an extension and creating another grunt task that will run my extension and all code around that is just too much trouble for a simple feature\n. thanks\nthis solution sounds interesting -> seems like i missed additionalRules before, i'll investigate and comment/close this little later\n. works - thanks ;-)\n. btw is there any good doc on esprima? i wanted to iterate over tokens but i wasn't even able to find what types of tokens exist and this didn't really help http://esprima.org/doc/index.html\ni solved it by iterating over lines instead ...\n. :+1: thanks!\n. ",
    "alexilyaev": "In the command line:\njscs --version\n1.3.0\nAnd running npm update jscs -g doesn't do anything.\n. Thanks, I'll wait :-)\n. I've got the same issue:\njson\n{\n    \"requireMultipleVarDecl\": true\n}\n```\n\u03bb jscs .jscsrc\nUnexpected token : at .jscsrc :\n     1 |{\n     2 |    \"requireMultipleVarDecl\": true\n-------------------------------------^\n     3 |}\n     4 |\n1 code style error found.\n```\n\"version\": \"1.8.1\",\nI'm also seeing this in the code when using Sublime\u200bLinter-jscs.\nAdding \"excludeFiles\": [\".jscsrc\"], fixes the error in the command line, but not with Sublime\u200bLinter-jscs.\n. ",
    "tybenz": "I have version 1.4.5 installed and I get\n/usr/local/lib/node_modules/jscs/lib/string-checker.js:153\n            throw new Error('Unsupported rules: ' + configRules.join(', '));\n                  ^\nError: Unsupported rules: requireSpacesInsideParentheses\n    at StringChecker.configure (/usr/local/lib/node_modules/jscs/lib/string-checker.js:153:19)\n    at Checker.configure (/usr/local/lib/node_modules/jscs/lib/checker.js:32:39)\n    at module.exports (/usr/local/lib/node_modules/jscs/lib/cli.js:74:13)\n    at Object.<anonymous> (/usr/local/lib/node_modules/jscs/bin/jscs:28:1)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\nAny ideas?\nHere is my config file:\njavascript\n{\n    \"requireCurlyBraces\": [ \"if\", \"else\", \"for\", \"while\", \"do\" ],\n    \"requireSpaceAfterKeywords\": [ \"if\", \"else\", \"for\", \"while\", \"do\", \"switch\", \"return\" ],\n    \"requireSpacesInFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowMultipleVarDecl\": true,\n    \"requireSpacesInsideParentheses\": \"all\",\n    \"requireSpacesInsideObjectBrackets\": \"all\",\n    \"requireSpacesInsideArrayBrackets\": \"all\",\n    \"disallowLeftStickedOperators\": [ \"?\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\" ],\n    \"disallowRightStickedOperators\": [ \"?\", \"/\", \"*\", \":\", \"=\", \"==\", \"===\", \"!=\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n    \"requireSpaceBeforeBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n    \"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\"],\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n    \"disallowKeywords\": [ \"with\" ],\n    \"disallowMultipleLineBreaks\": true,\n    \"disallowKeywordsOnNewLine\": [ \"else\" ],\n    \"requireLineFeedAtFileEnd\": true,\n    \"disallowSpaceAfterObjectKeys\": true,\n    \"disallowQuotedKeysInObjects\": \"allButReserved\",\n    \"requireCommaBeforeLineBreak\": true,\n    \"validateLineBreaks\": \"LF\",\n    \"excludeFiles\": [\"node_modules/**\"]\n}\n. Looking at lib/rules/require-spaces-inside-parentheses.js and trying to add a mode named something like allButSolitaryPunctuators. I want to be able to detect when a paren is preceded by nothing more than whitespace and other punctuators (delimiters). Can anyone provide some tips for how the DSL works to be able to detect this case?\n. Where are we at on this? Is there I can do/change to get this through?\n. So these tests were passing except the for, the while (which had a duplicate), and the try/catch.\nTurns out, it's because of a generic parse error (they're not valid JavaScript):\nThis:\njavascript\nfor (var i = 0; i < 100; i++)\nShould be:\njavascript\nfor (var i = 0; i < 100; i++) {}\nGot those tests added and (now) passing. We should be good to go! :thumbsup: \nWhoops... forgot to mention @markelog \n. Not sure why Travis is failing. As I said, npm test is working on my branch:\n\n. Bah! It was a code style issue. Oh the irony! Let's hope it passes now!\n. @markelog @mikesherov Sorry. Should've clarified that this is isn't exactly what the jQuery styleguide says. Is this still an acceptable PR to get merged in? I would like to use this on my company's projects.\n. @mikesherov sure. I can take a crack at that today if you guys haven't gotten to it yet. It's almost identical to my new rule only it specifies no space between open parentheses and function declaration, right?\n. @markelog does this solve the trailing delimiters issue?\njavascript\nfoo({ // <- no space required between ( and {\n    bar: true\n}); // <- no space required between } and )\njavascript\nfoo( function() { // <- requires space between ( and function\n    return true;\n}); // <- no space required between } and )\n. @markelog when will this be available? When is 1.6 being released?\nAlso, what about this?\n``` javascript\nfoo({ // <- no spaces between ( and {\n    bar: true,\n    second: 'value'\n}); // <- no space between } and )\nfoo( { bar: true } ); // <- space should be required between ( and { and between } and )\n// I believe even the jQuery styleguide says this is how it should be handled.\n```\nShould've clarified this earlier. The rule I want is there are always spaces inside parentheses, unless there are nothing but delimiters between it and the next newline, and unless there are nothing but delimiters between the beginning of the line and it.\n. :+1: \n. ",
    "lawnsea": "As I mentioned above, we have a pre-commit hook that runs JSCS against staged files only. That part works just fine.\nThe problem is this: suppose I have a file foo/bar.js, which is 100 lines of JS. There are pre-existing style errors on lines 1, 2, 23, and 99. I make a stylistically correct edit to line 42 and then do git add foo/bar.js and git commit.\nThe commit will fail when the pre-commit hook runs, because JSCS will report four style errors. What we want to do is ignore errors on lines that are not added or modified in the staged commit.\nIn the example, it would be easy to fix the other errors and try the commit again. Unfortunately, in some files there are literally hundreds of existing style errors. We are working to clean them up, but in the interim we don't want to spam developers with a ton of style errors unrelated to their changes.\nI've implemented a reporter that accomplishes the above by splicing the unrelated errors out of the errorCollection error arrays. It then passes the mutated collection to the console reporter:\n``` javascript\nmodule.exports = function (errorsCollection) {\n  errorsCollection.forEach(function (errors) {\n    if (!errors.isEmpty()) {\n      var errorList = errors.getErrorList();\n      var i = 0;\n  while (i < errorList.length) {\n    // is this line modified in the currently staged changes?\n    if (!isModified(errors.getFilename(), errorList[i].line)) {\n      errorList.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n}\n\n});\n// delegate to the console reporter\n  require('jscs/lib/reporters/console')(errorsCollection);\n};\n```\nThis works, but it seems hacky to me, since it depends on the implementation detail that reporters receive the same errorCollection that is used by lib/cli.js to determine whether to exit with an error.\nSo, my question is: do you plan to keep this implementation detail in future versions of JSCS, and, if not, would you accept a pull request that adds a filter hook to lib/cli.js to support this use case?\n. I'm not sure that an autoformatter would exactly fix our use case, as we would want to do any autoformatting in a separate PR. That said, we have the solution I originally outlined in place now, so we're in no rush.\nI have, however, received several inquiries about implementing my hack in other codebases, so there may be more need for this feature than is apparent from this thread.\n. ",
    "angryzor": "I intend to post another pull request implementing specific rules for setters and getters soon.\n. Pong! Sorry, I had a busy week and forgot about this. I'll rebase it as soon as I can.\n. Rebased onto master.\n. ",
    "SevInf": "@mdevils @markelog can you guys give an ETA when this fix will be released? Thanks.\n. ",
    "wayneseymour": "patiently waiting\n. As *nix guy! I'm sad to say I'd not thought of that...I was forking the prj\nand adding a quiet reporter.\nUr solution is better, I'll try it now.\nOn Friday, June 6, 2014, Alex Yaroshevich notifications@github.com wrote:\n\nworkaround for unixes:\njscs file.js --preset google | grep -v 'No code style errors found.'\n\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/425#issuecomment-45331168.\n\n\n--\nW.K. Seymour III\nSoftware Engineer - JavaScript, Intel's High Performance Data Division\nconsole.log((function() {return function(lang) {return lang + ' &\nEcmaScript 5 rock'}})()('Node.js'))\nshameless plug: http://blog.wayneseymour.com/\n. Darn it, not gonna work unless I mod our python commit hook.\nI could, but I'd rather code in js.  We'll see, I may change my mind.\nThanks though!  :)\n--\nW.K. Seymour III\nSoftware Engineer - JavaScript, Intel's High Performance Data Division\nconsole.log((function() {return function(lang) {return lang + ' &\nEcmaScript 5 rock'}})()('Node.js'))\nshameless plug: http://blog.wayneseymour.com/\nOn Fri, Jun 6, 2014 at 9:06 AM, Wayne K. Seymour III <wayneseymour@gmail.com\n\nwrote:\nAs *nix guy! I'm sad to say I'd not thought of that...I was forking the\nprj and adding a quiet reporter.\nUr solution is better, I'll try it now.\nOn Friday, June 6, 2014, Alex Yaroshevich notifications@github.com\nwrote:\n\nworkaround for unixes:\njscs file.js --preset google | grep -v 'No code style errors found.'\n\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/425#issuecomment-45331168.\n\n\n--\nW.K. Seymour III\nSoftware Engineer - JavaScript, Intel's High Performance Data Division\nconsole.log((function() {return function(lang) {return lang + ' &\nEcmaScript 5 rock'}})()('Node.js'))\nshameless plug: http://blog.wayneseymour.com/\n. thanks guys, but after forking and not being lazy (lol), I realized that the -r inline option does the trick.\nThanks @zxqfox and @mikesherov for chiming in!\n:+1: \n. THIS IS DRIVING ME NUTS...please let me transpile in peace!  :8ball: \n. \n",
    "CMTegner": "No problem, happy to help!\n. ",
    "lijunle": "I have the same problem, and navigate to here after some search. I think setting a rule to false is much more intuitive than null. I feel sad that, it is marked as WONT FIX. :(\n. For example, jquery preset defines\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n}\nIt is intuitive to disable by\n// THIS DOES NOT WORK\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": false\n}\nActually, I need to set the whole disallowSpacesInFunctionExpression setting to null:\n\"disallowSpacesInFunctionExpression\": null\nIn my opinion, this makes the rule hard to understand.\n. ",
    "ianjmacintosh": "Glad I found this issue, I was thrown for a loop also.\nIt looks like the folks maintaining this project have made a decision to make it this way. But as a casual user, I'll say null is not an intuitive override to true; when reading the options casually, I imagine appropriate responses to \"Do you disallow dangling underscores?\" to be true or false\nI don't understand how else false would be interpreted, but I think the argument is that null makes more sense to not do anything than explicitly saying \"false.\"\nAlso, when looking at the documentation for why false wasn't doing what I wanted, I looked at the documentation for the option I was trying to override, not the documentation for presets. When I saw the only documented value was true, I scratched my head, went to Google, and found this thread before I found the part of the documentation this quirk is explained.\nI understand \"RTFM,\" but +1 for folks who are saying it's a confusing approach to dealing with boolean parameters.\n. @mikesherov Thanks for the quick and thoughtful response!\nSounds like this is tracked by https://github.com/jscs-dev/node-jscs/issues/971\n. ",
    "langdonx": "Funny... I thought jslint/jshint would throw a fit if I did that, but apparently not.\nI must have started doing it because of WebStorm, because I can't get the Reformat Code option to preserve the line break.\nThanks for the quick reply.\n. Just updated JSCS and encountered this.\n\n231 code style errors found!\n\nA lot of IDE shortcuts (WebStorm in particular) throw comments at the beginning of the line, which is why this has become an issue for me.\n. ",
    "azproduction": "Contributors don't read .jscsrc they fix issues reported by checker. But every time they ready .jscsrc they browse example for each rule. Eg:\nExample\njs\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\nValid\njs\nfunction a(){}\nInvalid\njs\nfunction a () {}\nfunction a (){}\nIn other words they translate rule for robots to a valid example for humans. But we can have such example from the very beginning.\n. And if you are creating the brand new Code style. The only thing you need is to manually format code reference. It is much easier than look up for suitable rules.\n. This code is just a brief example of .codestyle.js to illustrate the idea.\n\nThe current code style file doesn't mention it -> The rule goes active automatically and rejects any real files which use undefined\n\nAs example. We can have function declaration for each rule:\njs\nfunction undefinedExample (a) {\n    return typeof a === 'undefined';\n}\nWe can discuss this.\n\nBut in the end rely on the json for the actual configuration.\n\nBut this destroys .codestyle.js idea.\n. > So the real .codestyle.js would need to be few hundred lines?\nWe can use ES6 imports to import rules:\njs\nimport {beforeOpeningRoundBrace} from 'http://jscs.org/rules/v1.3.4/common.js';\nI like your example of .codestyle.js. And we can also increase readability:\n``` js\n// validate indentation: 2 spaes\n// disallow spaces in function expression: before opening round brace\nfunction a() {\n  // require keywords on new line: else\n  // require space after keywords: if, else\n  if (true) {\n  }\n  else {\n  }\n}\n// disallow trailing whitespace\n```\n. ",
    "ericclemmons": "Just stumbled upon this discussion, and not quite sure where I stand.  the .jcsrc is the best for configuring the tool, but even after setting it all up, it's still a bit costly for newcomers to configure their own standards or to even adjust existing configs.\nI had planned on taking a stab at resolving this dilemma, but didn't consider the .codestyle.js idea...\n. @popomore That would be fantastic!  I was just trying to write a rule to resolve this, but apparently that won't work :)\n. ",
    "benjamine": "what seems to be behind this idea is each rule having it's own method to detect it's setting value based on sample code.\nIf you have that, then you can not only use a .codestyle.js but also (as @sindresorhus suggest) go forward and use jscs only to detect inconsistencies, something you could run against any js codebase.\njs\nprocessNextJsFile(filename, code) {\n   rules.forEach(function(rule) {\n      if (rule.isSet) {\n         // current behavior\n         rule.validate(code);\n      } else if (rule.checkConsistency) {\n         if (!rule.tryToGuessFromSample) {\n           throw new Error('sorry this rule doesn\\'t support auto detection: ' + rule.name);\n         }\n         rule.tryToGuessFromSample(code);\n         // if successful, now rule.isSet===true\n      }\n   });\n}\nthis would allow auto-detection to be gradually (and optionally) added to each rule.\n. something like this would be nice: http://browsenpm.org/package.json\n. ",
    "evill": "The same behaviour for while and switch. \n. ",
    "samjohnb": "Thanks for your help. This certainly looks useful, but I don't think jscs-jsdoc enforces the use of JSDoc. My use case would be that, this would pass\n/**\n* This function returns something\n*\n* @param {string} b An argument\n* @returns {string} Something to return\n*/\nfunction a(b) {\n   return \"something\";\n}\nbut, this would fail (because there's no documentation):\nfunction a(b) {\n   return \"something\";\n}\n. Wow, fantastic, thanks! It would be great if this could work for all function declarations, i.e.\nfunction a(b) {}\nthing = function() {}\nanotherthing(function() {})\nThe last one is particularly important as we are developing in AngularJS, so we have a lot of code that looks like this:\napp.controller('mainController', [ '$scope', 'dataFactory', '$filter',\n    function($scope, dataFactory, $filter) {\n...\nand it's important that we document what the controller is for, so this would be fine:\n```\napp.controller('mainController', [ '$scope', 'dataFactory', '$filter',\n/**\n* Controller for foo\n* @param {scope} scope The scope\n* @param {dataFactory} datafactory The data factory\n* @param {filter} filter The filter\n/*\nfunction($scope, dataFactory, $filter) {\n\n...\n```\n. ",
    "mattmarcum": "I'd really like to see this merged\n. ",
    "madskristensen": "I've written a JSON Schema for it here https://github.com/madskristensen/SchemaStore/blob/master/SchemaStore/schemas/json/jshintrc.json\n. I think it would be better to generate the JSON Schema instead. \n. Cool :)\n. ",
    "gnarf": "Forgot to mention, I tested this originally in 1.3, and updated to 1.4 just to make sure it wasn't already fixed, still seeing the same error here.\n. Actually, nevermind my theory on how to get around it, it still doesn't recognize it.\nWhat I find strange is that the .module is correctly indented, but the .controller isn't\n. Chatted briefly with @mikesherov about how something like this might be implemented, he had some good wisdom:\n\nYeah, it's basically any call expression whose callee is a member expression whose object is a call expression.\nThose should be indented the same...\nContinue traversing up until the member expressions object is not a call expression... That object should be indented -1 times.\nCan be traversed downward or upward. Both strategies should work.\n\nThis seems to solve the requireChainMethods: true part of the proposal, and with a minor tweak I thikn we could solve my \"list of methods that must be on a newline\" case.\n- For any call expression who's callee is a member expression:\n  - If (requireChainMethods: true OR requireChainMethods.contains(true)) AND the object is a call expression\n  - If requireChainMethods.contains( memberExpressionIdentifier ) (the object of the member expression does not matter)\nThis handles my \"forced chain\" case on my example promise in the OP, as well as arbitrary chains as requested by #1448\n. Awesome, thanks J\u00f6rn.  Any chance one of you with the knowledge in this\ncode could take a stab at this?\nOn Aug 30, 2015 18:33, \"J\u00f6rn Zaefferer\" notifications@github.com wrote:\n\nI've implemented something similar as a esformatter plugin for formatting\njQuery method chains, might come in handy as a reference for the AST\ntraversal: https://github.com/jzaefferer/esformatter-jquery-chain. I\nthink the relevant code would be here:\nhttps://github.com/jzaefferer/esformatter-jquery-chain/blob/master/plugin.js#L13-L57\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1736#issuecomment-136210820\n.\n. Yeah, sorry I didn't reply to the previous message. I'm actually more interested in the specific identifiers mode myself.\n\nI don't think any of your 'invalid' examples are actually invalid... Chain should be limited to methods only, just forced for methods, I would think the only invalid examples would have two chained method calls on the same line, the dot placement seems unimportant also, the call () and the identifier before it should not share a line with the object it is being called on.\n. Also, I'm not sure about the 'method().foo.bar.method() ' case.\nI think as long as the method() aren't on the same line its passing case for the rule\n. Same line as the trailing parents on the previous call in the chain\n. not on the same line... I should stop GitHub commenting from my phone now... Sorry\n. ",
    "fakewaffle": "Yes, requireQuotedKeysInObjects is a much better name!\n. I like this rule!\n. Yeah. Haven't had the time this last week. Was looking at how things are done. Making a little progress! :)\n. Is that an existing rule? I don't see any results when searching.\n. Good idea.\nWould that rule work for functions inside of objects?\n. ",
    "QuentinFchx": "Duplicate of https://github.com/mdevils/node-jscs/pull/362\n. ",
    "cschuller": "thanks a lot.\n. ",
    "Aintaer": "Presumably without a .jscsrc file, jscs will just exit with status code 0.\nThe reasoning is that without any limitations on what styles could be, all styles are allowed. This way integrated workflows won't have to deal with a non-zero exit status when the project doesn't have defined code styles.\n. ",
    "anddoutoi": "This makes sense. No config equals all allowed, nothing required.\n. ",
    "gavacho": "How does one specify that var x = a + b; is valid but var x = a+b; is not without using the *stickedOperators?\n. I swear I searched for that.  Thanks!\n. ",
    "Hanzig": "Hi! I am also having an issue related to that. \"validateIndentation\": \"\\t\", still gives me \"Expected indentation of X characters\" when using AirBnB preset. Any clue? A simple example below. Thanks in advance!\njavascript\n    var config = require('./config-grunt.json');\n. Ok, I could figure out that it was a misconfiguration in Atom. \"validateIndentation\": \"\\t\" works perfectly fine. If you are using linter-jscs, make sure \"Only Config\" is checked. Else it will still use the Preset selected in linter-jscs.\n. ",
    "Pictor13": "Yes, I just figured out later.\nThank you for answering.\n. ",
    "rubenv": "Is this documented somewhere? I built this config recently based on the README file in the master branch (which still lists them).\nWhich rules are meant to replace these?\n. Cool, thanks a lot!\n. ",
    "tcoopman": "Well it looks like esprima has partial ES6 support: http://esprima.org/doc/es6.html\n. Does this mean I should be able to use Arrow functions?\nAt the moment I get after running jscs\n'jscs' errored after 656 ms Syntax error at Alert.react.js: Line 8: Unexpected token >\n. Oh, didn't see that. Thanks\n. ",
    "rambo-panda": "hope soon\n. ",
    "MikeKlemarewski": "Is this change going to be released soon?  It's breaking https://github.com/gustavohenke/grunt-jscs-checker because of they specify ~1.4.3 for node-jscs.\n. Is this change going to be released soon?  It's breaking https://github.com/gustavohenke/grunt-jscs-checker because of they specify ~1.4.3 for node-jscs.\n. @markelog Thanks for the swift action!\n. @gustavohenke Thanks! Might be good to be more strict on dependencies to avoid these kind of breakages.\n. ",
    "sylvain-hamel": "Thanks for the fast turnaroud\n. ",
    "paulschreiber": "Glad this is fixed! When can I expect to see a new release of jscs containing this feature? @lahmatiy @hzoo \n. Is this ready to be integrated? It'd be very helpful for me.\n. @hzoo Thanks! I'm happy to help with this \u2014 let me know if I should start a new branch or if you have one already.\n. @markelog WordPress VIP is the paid-hosting version of WordPress. For PHP, the WordPress VIP coding standards add some additional rules to the WordPress coding standards. \nhttps://vip.wordpress.com/documentation/code-review-what-we-look-for/\nhttps://vip.wordpress.com/documentation/code-and-theme-review-process/\nhttps://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards\nFor JavaScript, I don't think there are additional rules; we can refer to this as the \"WordPress\" preset.\n@westonruter and/or @joshbetz can confirm if this is the case.\n. @mrjoelkemp The preset would be useful to all WordPress theme and plugin developers, not just folks who work on WordPress core, and would be a great addition to jscs core.\n. Thanks! Just tried this out. I've found one problem \u2014 it's not allowing me to indent with tabs. When it sees one tab, it gives a Expected indentation of 4 characters error.\n. It should require tabs for indentation (\"validateIndentation\": \"\\t\"?).\nHere's what I see:\n```\n$ ./bin/jscs -p wordpress  /Users/paul/video.js \nExpected indentation of 4 characters at /Users/paul/video.js :\n     1 |(function( window, $ ) {\n     2 | function setVideoHeight() {\n------------^\n     3 |  $( this ).height( $( this ).width() / ( 16 / 9 ) );\n     4 | }\nExpected indentation of 8 characters at /Users/paul/video.js :\n     1 |(function( window, $ ) {\n     2 | function setVideoHeight() {\n     3 |  $( this ).height( $( this ).width() / ( 16 / 9 ) );\n----------------^\n     4 | }\n     5 |\n...snip...\n```\nAnd the file:\n```\n(function( window, $ ) {\n    function setVideoHeight() {\n        $( this ).height( $( this ).width() / ( 16 / 9 ) );\n    }\n$( '.video-placeholder' ).each( setVideoHeight );\n$( window ).on( 'resize', function() {\n    $( '.video-placeholder' ).each( setVideoHeight );\n});\n\n})( window, jQuery );\n``\n. @mrjoelkemp When will the next version of jscs be released?\n. I'm able to install jscs trunk withnpm install\u2014 butgrunt-jscs` is tied to 1.5.0, which is what I'd like to update. \"Soon\" is fine.\n. @hzoo \n. Hmm. Maybe this is a (different) JSCS bug, then. The problem I had was lines with trailing comments:\n$foo = 1; // comment\n...would have their comments moved elsewhere.\n. Yes \u2014 autofix (-x) was causing this.\n. @TheSavior That does sound right.\n. I'm happy to help out with the WordPress preset if you'd like.\n. ",
    "alkawryk": "Nevermind, I had imported the google preset - I thought I would be able to override the options I wanted to. Is this not the case?\n. ",
    "flftfqwxf": "very good!!! Really looking forward to IT\n. ",
    "PinkyJie": "@mikesherov Is there an option to config this? Actually I think\ndoSth('This is a terribly long description you'll ' +\n    'have to read', function () {\n        doSth1();\n        doSth2();\n        /* lots of code */\n    });\nis better. ^_^\n. ",
    "alxgnon": "Should they be marked as deprecated in the README?\n. Great, thank you!\n. ",
    "jhiesey": "Thanks.\nWhere does it say it's deprecated? I don't see that anywhere.\n. ",
    "joelrbrandt": "@mikesherov Thanks for the review! I made the recommended changes in 57836e1 (which was rebased to current master).\n. @mikesherov good catch, refactored configurations into a beforeEach in dc71128\nBack at ya!\n. @mikesherov ping. Anything else you want me to do here? Thanks again for the review.\n. @mikesherov No worries, I completely understand.\nNot to add more work to your plate, but... it would be great if this could be pushed out under an incremented version number to npm. Then, I'll begin the process of getting grunt-jscs-checker to include the new version. Then all will be well with the world.\n. No. However, there aren't really any defaults listed anywhere in the README. It seemed to me that this particular option needed defaults explicitly stated.\nI'm more than happy to present this information differently in the README. (And, you won't hurt my feelings at all if you just change it to whatever you want rather than kicking the PR back to me :smile: )\n. ",
    "avanderhoorn": "Thanks!\n. ",
    "anaran": "@markelog I was just reporting what @mikesherov explained the fix for.\n. But array are often passed in function calls, just like literal option object.\nUsually these argument lists are just broken somewhere before column 80.\nHaving arrays flush right would look pretty awkward.\n. I was mistaken. Both jquery and gecko-dev use a newline after [ when the the whole array does not fit in that line.\nI would also not consider indentation like\n\ntest(\n  [1, 2,\n\nat all.\nThanks for your ~~swift (TM)~~ quick responses.\n. ",
    "mosbth": "@mikesherov, still, it would be handy to have a --quiet option that is completely silent upon success. CSSLint is another tool that has such option.\nI did not want to use the -r inline option, I'd prefer the more verbose report mode as default is. So that did not do the trick for me.\nI tried the grep variant like this:\njscs  code.js | grep -v \"No code style errors found.\"\nMy problem was that the exit-code was from grep and not from jscs. So I got a exit code of 1 from grep while I expected an exitcode  of 0 from jscs. \nI sorted it out using PIPESTATUS (bash) as below shows. It works for me so I can use it like that. \njscs  code.js | grep -v \"No code style errors found.\" ; echo ${PIPESTATUS[0]}\nBut a --quiet option would perhaps be a more solid solution.\n. ",
    "chee": "sure is\n. ",
    "spocke": "Ok missed that it was for the dev version. Closing.\n. ",
    "nwhite89": ":+1: \n. @goloroden I've looked at doing this, I've made it so it checks multiple spaces across the entire file and shows the error. It does as well allow multiple spaces within quotes (so for Strings).\n. @mikesherov ah yes good point  I didn't think about  RegEx  I think currently it won't allow it so I'll need to amend the  RegEx I'm using. Shouldn't be too much of a hassle I'll try and get something done perhaps today.\nAmend to omit selecting double spaces when between / /?\n. @mikesherov sorry can I just clarify that you want to allow multiple spaces with RegEx yes? & also if you could give me a couple of examples that be great (just so I know I'm exactly sure on what you want and don't have to keep going back and forth) cheers :+1: \nAlso I have been thinking about the user case for double spaces within Strings @mikesherov should this prevent when within strings as well?\n. @markelog I can try and give it a go I'm not entirely sure when I will be able to get to it nor whether I'd be able to work it out but like I said I can give it ago. \nI have noticed actually (in the last 12 minutes I made this) if you do\njs\nvar x = 'something',\ny = 'another',\n    u = null;\nIt does actually report an error already so I'm not sure if it's actually a bug if that is already what is supposed to happen?\n. Sure just pasted in to a comment?\n. Test cases\nPasses\njs\nvar builder = function () {\n    this.get = function () {\n        browser.get('/app/builder');\n    };\n},\navailableMetrics = [\n    'Lorem', 'Ipsum', 'Alpha', 'Beta'\n],\navailableBreakdowns = [\n    {name: 'First build', group: 'Alpha'},\n    {name: 'Second build', group: 'Alpha'},\n    {name: 'Third build', group: 'Alpha'},\n    {name: 'Forth build', group: 'Beta'}\n];\nPasses\nvar builder = function () {\n        this.get = function () {\n            browser.get('/app/reports/builder');\n        };\n    },\n    availableMetrics = [\n        'Lorem', 'Ipsum', 'Alpha', 'Beta'\n    ],\n    availableBreakdowns = [\n        {name: 'First build', group: 'Alpha'},\n        {name: 'Second build', group: 'Alpha'},\n        {name: 'Third build', group: 'Alpha'},\n        {name: 'Forth build', group: 'Beta'}\n    ];\nFails\njs\nvar builder = function () {\n    this.get = function () {\n        browser.get('/app/reports/builder');\n    };\n},\n    availableMetrics = [\n        'Lorem', 'Ipsum', 'Alpha', 'Beta'\n    ],\n    availableBreakdowns = [\n        {name: 'First build', group: 'Alpha'},\n        {name: 'Second build', group: 'Alpha'},\n        {name: 'Third build', group: 'Alpha'},\n        {name: 'Forth build', group: 'Beta'}\n    ];\nJSCS Config\n{\n    \"requireCurlyBraces\": [\n        \"if\",\n        \"else\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"try\",\n        \"catch\",\n        \"case\",\n        \"default\"\n    ],\n    \"requireSpaceAfterKeywords\": [\n        \"if\",\n        \"else\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"switch\",\n        \"return\",\n        \"try\",\n        \"catch\"\n    ],\n    \"requireSpaceBeforeBlockStatements\": true,\n    \"requireSpacesInConditionalExpression\": {\n        \"afterTest\": true,\n        \"beforeConsequent\": true,\n        \"afterConsequent\": true,\n        \"beforeAlternate\": true\n    },\n    \"requireSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInNamedFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireMultipleVarDecl\": true,\n    \"requireBlocksOnNewline\": 1,\n    \"disallowEmptyBlocks\": true,\n    \"disallowSpacesInsideObjectBrackets\": true,\n    \"disallowSpacesInsideArrayBrackets\": true,\n    \"disallowSpacesInsideParentheses\": true,\n    \"disallowDanglingUnderscores\": true,\n    \"disallowSpaceAfterObjectKeys\": true,\n    \"requireCommaBeforeLineBreak\": true,\n    \"requireOperatorBeforeLineBreak\": [\n        \"?\",\n        \"=\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\"\n    ],\n    \"disallowLeftStickedOperators\": [\n        \"?\",\n        \"=\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\"\n    ],\n    \"disallowRightStickedOperators\": [\n        \"?\",\n        \"=\",\n        \"+\",\n        \"/\",\n        \"*\",\n        \":\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\"\n    ],\n    \"requireLeftStickedOperators\": [\",\"],\n    \"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"],\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n    \"requireSpaceBeforeBinaryOperators\": [\n        \"=\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\"\n    ],\n    \"requireSpaceAfterBinaryOperators\": [\n        \"=\",\n        \",\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\"\n    ],\n    \"disallowImplicitTypeConversion\": [\n        \"numeric\",\n        \"boolean\",\n        \"binary\",\n        \"string\"\n    ],\n    \"requireCamelCaseOrUpperCaseIdentifiers\": true,\n    \"disallowKeywords\": [\"with\"],\n    \"disallowMultipleLineBreaks\": true,\n    \"validateLineBreaks\": \"LF\",\n    \"validateQuoteMarks\": \"'\",\n    \"validateIndentation\": 4,\n    \"disallowMixedSpacesAndTabs\": true,\n    \"disallowTrailingWhitespace\": true,\n    \"disallowTrailingComma\": true,\n    \"disallowKeywordsOnNewLine\": [\"else\"],\n    \"maximumLineLength\": 80,\n    \"safeContextKeyword\": [\"$this\"],\n    \"disallowYodaConditions\": true,\n    \"validateJSDoc\": {\n        \"checkParamNames\": true,\n        \"checkRedundantParams\": true,\n        \"requireParamTypes\": true\n    }\n}\n. So I'm not 100% sure if it is a bug or a red herring, I understand why the one fails and I expect it to, although technically I would expect the second one which passes to fail also...?\n. @mikesherov ok cool cheers, I wasn't sure if it was a bug once I saw that's fine pure feature request I shall try and see what I can do to try and get this done. Would you see it as an extra option? Or an add on to indents?\n. > This should be a separate rule that has nothing to do with validateIndentation. Thanks!\nCool, completely agree just wanted to check before I actually give it a go :+1: \n. @mikesherov no problem I shall try and give this a go using token's\n. No problem I've been pretty busy hopefully pick it up again so. \n. ",
    "tlvince": ":+1:\nAlso on the right hand side of the assignment (e.g. var x =\u2002\u20023).\n. ",
    "twolfson": "I saw the help-wanted tag for this issue in the 1.12 milestone. I have a working proof of concept based on tokens. I should be formalizing it into a PR shortly.\n. @ItsCosmo According to the CONTRIBUTING.md, you should open a new issue for that functionality =/\nhttps://github.com/jscs-dev/node-jscs/blob/v1.13.1/CONTRIBUTING.md#proposing-features\n. Nope, sometimes it is useful to have (e.g. in before blocks) where there is no description:\njs\nbefore(function createServer () {\n  this.app = express();\n  this.app.listen(2000);\n});\nafter(function destroyServer (done) {\n  this.app.close(done);\n});\n. I have completed a rough draft here:\nhttps://github.com/twolfson/node-jscs/compare/65516da\nI am not confident in putting MemberExpression and Identifier under the same option key. However, the gist of detecting the CallExpression name is there.\n. I don't see the use case for it but we could add it in. I am thinking that maybe we want to namespace each of these different flavors?\njs\n{\n  all: true,\n  paramExcept: {\n    identifiers: ['it']\n    memberExpressions: ['suite.it']\n  },\n  assignmentExcept: {\n    identifiers: ['x'],\n    memberExpressions: ['x.y']\n  }\n}\nBut now we get into a slippery slope of dynamic member expressions. Maybe it's best to stick with identifiers only or decide not to implement this feature =/\n. I am now re-reading disallowAnonymousFunctions and realizing it does not cover my desired result entirely. I am pretty sure this should be created in a separate issue now but I will leave it here for now.\nFor me, I want the stack trace to always have a name (except for certain exceptions in the test suite). A function will have a name if:\n- It has a left hand assignment\n  - var foo = function () {}; // foo in error.stack\n  - var bar = {baz: function () {}}; // bar.baz in error.stack\n  - var x = {}; x.y = function () {}; // x.y in error.stack\n- It has an inline name\n  - [1].forEach(function iterateItems (item, i) {}); // iterateItems in error.stack\nCode pen demo: http://codepen.io/twolfson/pen/ByLRwP\nI would like a rule (or configuration in an existing rule) that allows for:\nValid:\n``` js\nvar foo = function () {};\nvar bar = {baz: function () {}};\nbar.baz = function () {};\n[1].forEach(function iterateItems (item, i) {});\n// Valid after exception\ndescribe('An apple', function () {});\n```\nInvalid:\n``` js\n[1].forEach(function (item, i) {});\nbefore(function () {});\n``\n. @markelog Can you elaborate on your previous comment? I am not sure what you mean byallExceptFunctors. What are the plans for object properties and whatnot?\n. Yep, it looks like @Nijikokun and I are on the same page about the rule we want. I want to close this issue as a duplicate but it looks like the thread has shifted over here instead of stayed on #655 =/\n. I am down for submitting a PR. However, I would really like the exceptions to the rule we are creating (e.g.it`). I am having trouble nailing down a good API signature though; it should support exceptions for:\njs\nit(function () {\nit.skip(function () {\n. I will probably call the rule requireStackNamedFunctions since that is our use case.\n. I think I am going to solve this by ignoring dynamic key identifiers for now. I think that is an edge case that we will have to deal with when we get there.\n``` js\n\"requireStackNamedFunctions\": true\n\"requireStackNamedFunctions\": {\n  \"allExcept\": [\"it\", \"it.skip\"]\n}\n``\n. Choosing a different name,requireNamedInlineFunctions, since the negation ofStackNamedFunctions` would prevent usage of any left hand assignment which is far from the intent.\n. I have created a PR for to fix this issue and #655. It is #891.\nI decided to rename the rule once more to requireNamedUnassignedFunctions since the BDD descriptions were getting confusing when negating.\n. Ah sweet, noticing the 1.12 milestone. I am going to update this PR to fix those merge conflicts. I will comment when it's updated.\n. I have pushed an updated copy. The merge conflict was out of the addition for pathval as a dependency.\n. Yea, I noticed that. I am busy at the moment but will take a look by the end of Sunday.\n. I have fixed up the coverage issues and pushed the latest version.\n. I have adjusted the code structure and added more comments as requested.\n. Based on my work in #1059, it might take me a bit of time to sort out the merge conflicts. I will rebase/sort it out by the end of the next weekend.\n. @mikesherov I have rebased to the latest master. Notable changes are:\n- Relocated test files to test/specs for consistency\n- Added documentation comments to rules for consistency\n- Updated configure parameter to be named options for consistency\n. I mentioned this in #1163 but I should mention it here as well. I believe #916 (this issue) and #1163 are duplicates. I have opened a PR to solve the problem at its root:\n1243\n. Ah, I forgot to test multiple lines. I will add that shortly.\n. @zxqfox I have added in the comment tests and fix for iterating with comments. The file.getNextToken method requires inputting a seed token. Unfortunately, there is no way to get the first token of a file without accessing _tokens. As a result, I I chose to replace our getTokens with a direct iterator on _tokens.\n. I have added the case for EOL comments and renamed to atMost. After the rename, I did a git grep and saw that we are using maximumLineLength as a rule and not using atMost anywhere else. That might have a factor on naming.\n. @mikesherov I am not sure I follow. Do you mean adding atLeast/atMost/exactly support to every requireSpace* rule?\n. @mrjoelkemp I will take a shot at rebasing by the end of this weekend. It looks like there are some merge conflicts as well =/\n. I have merged/squashed on top of the latest master. Notable changes:\n- Relocated test files/changes for consistency\n- Renamed configure parameter to options for consistency\n- Moved to file.getTokens over file._tokens to stop relying on internals\n. This seems to be a duplicate of #916. Since this is on the 0.12 milestone and has the \"help wanted\" label on it, I am going to take a shot at it.\n. That problem was a lot deeper than I expected but I found the cause and submitted the PR. The issue is best explained in the PR itself:\n1243\n. Ah, I almost forgot. I have skipped adding regression tests to tree-iterator as it seems tree-iterator lacks any in-depth tests at all =/\nhttps://github.com/jscs-dev/node-jscs/blob/v1.12.0/test/specs/tree-iterator.js\nLet me know if you want me to add these/what they should contain besides the regression tests.\n. Sure thing. I was trying to keep comments light, inline with the rest of the code but I will switch it up to your recommendations.\n. Sure thing, more tests coming right up.\n. Ah, didn't realize we were missing those tokens. Good catch. Do you think there would be a reuse value in an iterateTokens with options for including comment tokens?\n. We should probably clarify that those are about lines. It will be confusing to have them and maximumSpaces. We can rename to atMostSpaces for consistency.\n. Ah, nvm. Fell into the same trap. That is a different function entirely. I will still rename to atLeastSpaces for semi-consistency but whitespace isn't necessarily spaces only.\n. Yep, definitely. I will add a new option:\njs\ndisallowMultipleSpace: {\n  allowEOLComments: true\n}\n. There is a possible trap if we ever start to use tabs inside of whitespaceBetween but I will move to atMost for now. I am going to add a comment on the other PR about renaming exactly to lines for consistency with whitespaceBetween.\n. Should we rename exactly to lines for consistency with whitespaceBetween (which uses spaces)?\n. I saw https://github.com/jscs-dev/node-jscs/pull/1014#discussion_r24298315 which used lines and see that the current PR uses exactly. But I can't seem to find when the discussion about moving to exactly``/atLeast/atMost. Can you link me?\n. For reference, I am coming from a PR about disallowing multiple spaces and added in a similar atMost option. We noticed the discrepency and figured we should comment.\n1059\n. ",
    "ItsCosmo": "It would be appreciated if this option could have an exception for single line comment, e.g\nvar obj = {\n     foo: \"f\",            // abbreviation for foo\n     long_bar: \"b\",       // abbrevition for bar\n}\n. ",
    "SimenB": "Or search. #1360 \n. Hmm, true enough. I'd like it here though.\njavascript\nfunction doMagic() {\n    return 'hey';\n}\nfunction doEvenMoreMagic() {\n    return 'hey you!';\n}\nAnd assigning them to variables makes the warning go away anyways.\nI'll just remove the function key from it, thanks for the swift response :smile: \n. Yeah, either just negating, or ==!.\n. In my mind, if you have a single wrapped expression, that you then negate, it should throw.\nSo from your last 2 examples, the first is fine, the second should throw.\nIf you think of it as if you removed the negation, and could then just switch the bodies of the if and the else and have the same result, then it should throw.\n. (related to boolean-expressions)\nWhat about a rule about maximum number of expressions? Like if you have maximum 2, then (a || b) is fine, but (a || b || c) would throw, and you should split it and extract it to a variable or something.\nOr what about missing clarifying parentheses? e.g. (a && b || c && b) can be confusing. It's much easier to read and reason about if it's written as ((a && b) || (c && d))\n. @somebody this was closed in today's release \nHaha, somebody is actually a user :laughing: \n. I started to look into making a PR for this, but I ended up more confused. In true TDD fashion, I wrote the test first. So this test fails when added to specs/rules/require-padding-newline-after-variable-declaration.js\njavascript\nit('should not report if no extra newline is present when assigning to objects', function() {\n    assert(checker.checkString('function (opts) {\\nthis.a = opts.a;\\nthis.b = opts.b;\\n}').isEmpty());\n});\nWhat's weird, is that if I name the function, the test doesn't fail.\njavascript\nit('should not report if no extra newline is present when assigning to objects', function() {\n    assert(checker.checkString('function f(opts) {\\nthis.a = opts.a;\\nthis.b = opts.b;\\n}').isEmpty());\n});\nThe only difference being function (opts) vs function f(opts). Does anybody have any idea why naming the function should matter?\n. @mikesherov Oh, yeah, made an error there. But if you look at the OP, you'll see valid valid JS, which this rule reports as a error. That's a copy from our source code, so it works. To get it to work in Chrome console, just wrap it in an object.\nHere's a failing test on working code.\njavascript\n    it('should not report if no extra newline is present when assigning to objects', function() {\n        assert(checker.checkString(\n            'var o = {\\nf: function (opts) {\\nthis.a = opts.a;\\nthis.b = opts.b;\\n}\\n}'\n        ).isEmpty());\n    });\nEspecially the third one from the OP I find weird, as it fails on one line, but not another.\nThe full snippet from them btw, would be\njavascript\nBackbone.View.extend({\n    initialize: function(opts) {\n        this.a = opts.a;\n        this.b = opts.b;\n    }\n});\n. > Also, assigning to a property of an object is not a variable declaration, it's an assignment statement. There is a difference, and this rule respects that difference.\nThe original point of this bug was a false positive (before I tried to write a failing test for it :laughing:), so obviously this rule doesn't respect it. requirePaddingNewLineAfterVariableDeclaration reports a violation on the assignment.\n. @mikesherov minimal test case: https://gist.github.com/SimenB/ac2fe5db1f43ae8ec7a7\n. @hzoo Could you cover ternaries as well?\nError\ndate = !_.isEmpty(date) ? moment(date, 'DD-MM-YYYY') : null;\nCorrect\ndate = _.isEmpty(date) ? null : moment(date, 'DD-MM-YYYY');\n. Yeah, sounds good :+1: \n. validateNegationInConditionals? validateNoNegationInConditionals?\nOn Mon, 27 Apr 2015 07:56 Oleg Gaidarenko notifications@github.com wrote:\n\n@hzoo https://github.com/hzoo ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1210#issuecomment-96514481.\n. This is probably related #1208\n. @markelog I'm not sure where to find good examples of real code. https://github.com/mozilla/metrics-graphics/ seems to be amongst the most popular JS repos Mozilla's got, but they use single quotes, even though the style guide says not too, as a quick example.\nOr https://github.com/mozilla/pdf.js (11k+ stars, wow), also use single-quote\n\n@jrburke Could you, or someone else from Mozilla, give the rules a look, and maybe provide a project with some source that can be used to verify the rules against?\n. @hzoo That style guide also says to use double quotes, while the source files in the same repo use single. Just a small example of course, but I don't know how \"reliable\" that code is to check when such an obvious thing is \"wrong\".\nAnd they say it's \"acceptable\" as long as it's not mixed, so I suppose I could find a file using double in there. It's all ES6, though.\nEDIT: https://github.com/mozilla/localForage actually uses JSCS, but different rules than the style guide (at least concering quotation mark and indentation).\n. This can probably just be closed then :smile: \n. Well sure, but if nobody really uses it at Mozilla, nobody else will probably use it either. Just bloats the presets. Right?\n. Maybe related to #1198?\n. @markelog Should requireSpacesInsideArrayBrackets be deprecated? string.split returns an array, so it's at least deceptively named. requireSpacesInsideLiteralArrayBrackets?\n. Ah, okay. Thanks!\nEDIT: @markelog Maybe add a note here http://jscs.info/rules.html\n. I agree that single line exclusion would be sweet, but you can almost achieve this now.\njs\nvar x = 1\n// jscs:disable requireSemicolons\nvar y = 2\n// jscs:enable requireSemicolons\nvar z = 3\nOr just // jscs:disable & // jscs:enable  to hit all rules.\nMaybe support // jscs:disable [requireSemicolons] as a trailing comment, instead of requiring that we wrap the line?\n. I threw together #1636 real quick. Doesn't do anything except add a failing test for now, but you know... :laughing: \n. This broke the Travis build. Doesn't seem related, but who knows...\nhttps://travis-ci.org/jscs-dev/node-jscs/builds/74514915\n. The error only occurs if I have an object destructuring further down const { hprnummer, hprrolletekst } = auth.toJSON();. The code is in a closed source project, so can't post the full thing...\n. Yup, probably. 3 months old...\nDoing // jscs:disable requireDollarBeforejQueryAssignment at the top of the file works for now.\n. @hzoo Do I have to enable the rule again at the bottom of the file to re-enable it, or is such configuration on a per-file basis?\n. I tried inline, didn't fix the exception. But this is a dupe of #1373 as noted, so I'll close this.\n. That I can do! I'll do it after work\n. @mrjoelkemp How about now? :smile: \n. Oh, that one I forgot, I just squashed away. I'll give the msg a whack.\nEDIT: Closer at least :smile: \nThanks for the help, and this awesome tool!\n. Eslint has the same rule, but does not suggest using arrow if this is used. Maybe take a look at their implementation?\nhttps://github.com/eslint/eslint/blob/master/lib/rules/prefer-arrow-callback.js\n. Ah, thanks! Still new to ES6 :smile: \n. Eslint also has a prefer-arrow-callback-rule, which sees that thisis used within, so it does not warn. Maybe take a look at their implementation?.\nWe should just migrate to using a let at the scope over, avoiding magical this...\n. Doesn't work. It doesn't trigger on properties in objects.\nIt doesn't trigger on anything bound either\n. js\n    _.each(lenker, function (lenke) {\n      this.meep(lenke)\n    }.bind(this));\nDoesn't trigger error. If I remove bind it triggers.\n. Something about this (I think) broke jscs completely for us. jscs@2.1.0 works fine, jscs@2.1.1 explodes spectacularly on any js file...\n\n. @hzoo This piece of code triggers the error: \nwindow.onerror = () => {};\nHappens with zero parameters. Adding a parameter, with or without parentheses, works fine\n. That was quick!\n. Ah, good question.\n. @hzoo It works correctly with code from master. Thanks!\nAny timeline on 2.1.2?\n. Yup, it warns with this change, but not without it. Thanks!\n. This works for my code :smile: \nNo comment on the implementation, I don't know AST enough\n. :grinning: \nYeah, an option like that was what I was expecting to find when I looked up the docs, would be perfect :smile: \n. Is export considered a declaration? In my mind it's just shorthand for exposing a declaration, so I'm with you on making it default to not reporting. As long as an option to enforce spaces are added, it should be fine as default, right?\n. Ah, well there you go! :smile: \nOT: What tool are you using to inspect the AST? I've been trying to understand it for a couple of weeks, it's left me mostly confused :laughing: \n. I think it should be default. I assume you enable that rule (at least we do) because we want the exports grouped by itself to make them more visible. But if they're the only thing in their scope, that's void. Right?\n. Aye, I meant block, not scope.\n. I'm not, go for it :smile: \n. Not sure if linking directly to #JavaScript_practices is necessary, as most rules comes from the #Naming_and_Formatting_code-part\n. I could return maybe, you don't use destructuring for jQuery assignments, do you?\n. ",
    "goloroden": "IMHO this is not a stylistic issue: Having too much indentation is just a symptom, the actual cause is too complex code, hence I'd rather address this using metrics.\nIf you improve the metrics, your indentation will automatically get better.\nJust my 2 cents.\n. ",
    "ahmedelgabri": "Ok, thanks \n. ",
    "tadatuta": "And also take a look at https://github.com/mdevils/node-jscs/blob/master/lib/checker.js#L70\n. ",
    "sebv": "https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/UsingtheAutomationInstrument/UsingtheAutomationInstrument.html\nIt's uses javascript syntax, but the import are different.\n. ",
    "mathieumg": "@mikesherov I am, although I'm very busy these days. If you were asking because you want to work on it, go ahead!\n. ",
    "mrak": "We use this style for variable declarations as well :+1: \n. ",
    "jdlrobson": "Also interested in this...\n. We also need this for MediaWiki development.\n. @markelog @joakin I took a first stab at this regardless of whether it's being worked on since I'm keen to understand the code better. I'm not sure if I'm on the right track though, there was a lot of reverse engineering trying to get my head round how best to do this :-).\nI'd appreciate some input on my attempt so far for #511 before going for requireOperatorBeforeLineBreak and also applying the rules to other operators like +,*,- etc..\nAlso what order are the entries in the README in? Should I add this new one to the bottom or elsewhere?\nApologies if I'm going down completely the wrong solution path and sorry to @rachelnicole if you are already working on this, I will happily abandon my code if that's the case! :)\n. If I get time and no one beats me to it I'll submit a test capturing the problem.\n. This doesn't work as the test doesn't work on call expressions only 'BinaryExpression', 'AssignmentExpression' and 'LogicalExpression'\nThe above patch adds a test but I'm not sure how to fix this yet (someone should feel to fork the patch if they can work out what's going on)\n. Hey @mikesherov I'm super interested in this too. Is there any branch I should be watching where this is happening? I would be interested to see how you are thinking about this and see if I can help out!\n. I have a similar problem. I started a patch - https://github.com/jdlrobson/node-jscs/tree/upstream/require-line-break-after-variable-assignment which I'm planning to get finished. Let me see if it applies to your rule.\nPS. I'm terrible at naming things. Is this a good name for the config option?\n. @cowwoc this should meet your needs. Feel free to identify any test cases it doesn't work with. I also see @airbnb might benefit from this preset (cc @hshoff)\n. Thanks for the edge cases. I hadn't come against any of these knowingly in my project, it has been working as expected for me.\nI'll add test cases and fixes for 1 and 2. Fix to 1 is easy will investigate fix to 2\nAs for 3 @Krinkle  this is the correct behaviour. c = 1 is a variable declaration/assignment so should be followed by a newline.\n. There we go. That was an easy obvious fix.\n. @markelog is there a specific issue open for that? It's on my to do list and will get to it when I can if no one beats me to it!\n. Since I am iterating keyword tokens already ideally I'd do something akin to \"Is token part of function declaration'. Is there a way to do this? Seems bad to do two iterations - one of keywords and one of nodes...\n. This would mean I would have to completely rewrite file.iterateTokensByType('Keyword' to avoid code duplication (I need to prevent that iteration from adding errors)... I'm not 100% confident about doing this quite yet as I'm still quite new to this codebase.\n. Anything I need to do to this to get it merged? I'm keen to see it in the next release!\n. Preset can come later. Most Wikimedia based projects are running a slighter new version of the preset anyhow.\n. @markelog can you give me any estimate when this patch will be merged? Sorry for impatience but I'm getting poked my work colleagues :-)\n. I might look at former case if others do not beat me to it. Is latter actually a convention used anywhere?\n. I might look at former case if others do not beat me to it. Is latter actually a convention used anywhere?\n. FYI in mean time @indexzero require-line-break-after-variable-assignment actually encourages you to put the non initialised variables first since it makes your life a lot easier :).\n. Is this good to go or not?\n. Thanks for the update @mikesherov I wasn't 100% sure how merging works here. Let me know if you need any other changes here or follow ups and I'll add them to by ever growing to do list :-)\n. The whole '.' and ',' as sometimes being a binary operator issue is a weird bug. Have we got a bug open to rethink that?\nIn terms of short term I think maybe we should remove ',' from the defaults at least for this config variable and maybe others. Is it maybe worth having another config variable other than binaryOperators - maybe one for tokens that are only ever operators?\n. Sure.\n. Let me know what you think... all these seem possible, although not quite sure how to do 2\n. Note I could just remove the addition. Via the config I can actually specify '.' as an operator, but since I'm using tokens here that may be a bit weird.\n. Hey @markelog how do you want me to proceed with this?\n. So do you want me to alter my pull request to put '.' in binaryOperators?\nOnce clarified I'll have that amended by the end of the day.\n(yup adding to wikimedia preset is on my to do list :-))\n. Any idea when this will happen? I'm keen to start using this and work on another one of your open issues :-)\n. I'm not sure... there is already line breaks, carriage returns and new lines in the existing rules. @markelog do you have a preferred name for this rule?\n. ",
    "ichernev": "@mikesherov sorry about the delay. I'll try to do this in the next few days.\n. About 2) it looks like the logic is much different -- there is no check for single line blocks. I guess this falls into the case of very few statements in a block. So my fix should be sufficient :)\n. Thank you!\n. Thank you!\n. ",
    "KidsKilla": "Now I should copy-paste contents of checkString method to use AST that I got from SpiderMonkey. \nI'd like to do it simplier.\n. @mikesherov thanks!\nI'll do some tests and will update PR.\nThere was an idea to parse source with different engines, but sm doesn't have tokenizer and a lot of checkers uses it, so this idea has failed.\nNow it seems like this PR is quite minor. \nAnyway, there still can be some use cases.\n. ",
    "LaurentGoderre": "Thanks! I fixed the issue\n. Granted it's not a typical scenario but when using grunt-jscs-checker (which uses checkPath) with a .jscsrc, the ignore files are processed anyways\n. https://github.com/wet-boew/wet-boew/blob/master/Gruntfile.coffee#L1054\nhttps://github.com/wet-boew/wet-boew/blob/master/.jscsrc#L10\nGranted we could do the exclude through grunt but i just lost half a day trying to figure out why it wouldn't honor the .jscsrc\n. It's all about developers expectations \n. No problem ! Thanks for being open to it. Can you let me know when it's published to npm ? \n@pjackson28 @nschonni this will fix our build automatically \n. ",
    "TheSavior": "If we are considering auto generating doc blocks as well to be consistent with the specified options, how do we plan on handling good/bad examples? Seems unlikely that we'd be successful at choosing good options for those in code.\n. @mikesherov, is referencing lines by index a problem? There are also a few rules that are using _operatorIndex (I'm not sure what this is).\n. Can you give an example of a reasonable non whitespace thing we could fix?\n. My intuition says that all of the iterative solutions we are considering are the easy first approach, but won't be robust long term for all possible 'fixes' rules might want. I would think we need a way to have some sort of engine that understands what the rules are doing and could know if any of the rules conflict. \nAt that point, we would be able to take in a parse tree of a file and step through it applying the applicable rules and convert it step by step into actual code.\n. :+1:\n. @millermedeiros Not to speak for the rest of the team, but I really appreciate you coming to provide us this context. Having built esformatter, you definitely have some specific understanding that we may not have.\nThe assertions we use and having that add whitespaceBefore, as you say, seems pretty consistent with how you have things outlined in the file you linked.\nSomething I didn't quite get from your document explaining how esformatter tokenizes and how you guys transform, are specific examples.\nI'd love to get some more understanding and specific examples that you've run into issues with once we try to tackle indentation. I don't believe we have taken any steps in that direction yet.\n. I just put up a sublime plugin that uses the globally installed JSCS version to autoformat your code. \nhttps://github.com/TheSavior/Sublime-JSCS-Formatter\nI'm going through the process to get it added to Sublime's Package Manager right now: https://github.com/wbond/package_control_channel/pull/4148\n. @mikesherov Sure thing. This is my first sublime plugin and I really have no idea what I'm doing, so I wanted to jump through the hoops now to get things cleaned up.\nIf any of you use sublime and know python or want to explore the world of plugins, I would really appreciate any pull requests people have time for. :)\n. @mikesherov Are changing those 4 rules all that is left before releasing 1.13?\n. This would be awesome. :+1: \n. I also want to throw in that there should be some sort of support for being able to test these custom plugins against the framework that we have for JSCS. \n. This was tagged with 1.12, were we planning on landing this?\n. Somewhat unrelated, but I don't think I agree with the name of this rule. It seems like it should be something like (require|disallow)NewlineBeforeOpeningCurly since it isn't a newline before the block. \n. Awesome, looking forward to being able to fix all the rules that do this:\nvar nextToken = file.getCommentAfterToken(token) || file.getNextToken(token);\n. This PR updated differentLine in tokenAssert. Most of the whitespace only rules that will need to be updated to accomplish the next step in #516 will require an even more robust differentLine function. \nI don't want to update those until after this is merged, otherwise there will be conflicts or two barely related PRs relying on each other.\n. Updated and squashed.\n. Updated to fix naming / usage of 'options.lines'. I think all of these TokenAssert whitespace functions will need to be changed anyways once we update all of the whitespace rules to use them.\n. What do we need to land this?\n. Cool.\nThat rule kind of exists already, but it obviously has to be very different logic. There is this rule: requireNewLineBeforeBlockStatements\n. I've gone ahead and taken this opportunity to set up differentLine for us to be able to use it when porting the other whitespace rules to use it. I didn't particularly want to land this with an incompatible version of differentLine. \n. Rebasing from master\n. This rule has been added to the Airbnb style guide: https://github.com/airbnb/javascript#whitespace\n. @mdevils or @markelog bump :+1: \n. @mdevils or @markelog bump :+1: \nWe're still looking for some more concrete thoughts about the change to the differentLine assertion here. \n. So we will have sameLine, differentLine, and blankLinesBetween. BlankLinesBetween will take a number of lines and lessThan, greaterThan, and exactly. Are we good with that? \nThere is definitely some cases where you want to say that there should be exactly one line between them. disallowMultipleLineBreaks(3) is an example that would want to say at most 3 line breaks, and then most other cases would want greaterThan so that it doesn't conflict with disallowMultipleLineBreak.\n. Agreed that it should be mutually exclusive with exactly. I'll plan on throwing an Error if exactly and (lessThan or greaterThan) are set.\nI should be able to get to this in the next two days. I'm really excited to move forward on these PRs. \n. To be consistent with whitespaceBetween, I'm going to call it linesBetween instead of blankLinesBetween. Any issues with that?\n. @mdevils @mikesherov, can you guys take a look at the new assertion? I want to make sure that is something we agree on before I go through the merge conflicts (adding whitespace fixing to the assertions) \n. @mdevils There are no tests for the functionality of adding the whitespace prefixed data in the assertions. Since this required changing a bunch of that logic for the differentLine assertions and then dealing with that part of the merge conflicts, this PR currently doesn't have autofixing for lines. \nCan you add tests (at least 1 or two) in the style that you would want to see those tests for token-assert and then we can get these assertions adding whitespace properly.\n. Rebased from master\n. @hzoo I thought I got all of them, so if there are any others that are still not using the iterators add them as comments here and I'll put them in this PR. Thanks!\n. Rebased but clearly rebased wrong due to tests failing on differentLine. I'll fix in a few hours, running out now.\n. Thanks for finding a bunch of the broken pieces. Looks like the tests are passing.\n. This is part of the Airbnb style guide: https://github.com/airbnb/javascript#comments\n. @mdevils I don't see any tests that were added that tried iterating by comments when the logic was added.\nI haven't been able to figure out what the Type of Line comments are. I have tried iterating Tokens/Nodes by type with 'Comment', 'LineComment', 'Block', and 'Line' to no avail.\nI ran this:\n```\nfile.iterateTokensByType('Punctuator', function(token) {\n            var nextToken = file.getNextToken(token, {\n                includeComments: true\n            });\n        console.log(nextToken);\n    });\n\n```\nAnd found some next tokens in this form:\n```\n{ type: 'Block',\n  value: ' comment ',\n  range: [ 11, 24 ],\n  loc: { start: { line: 2, column: 0 }, end: { line: 2, column: 13 } },\n  isComment: true,\n  whitespaceBefore: '\\n',\n  _tokenIndex: 5 }\n{ type: 'Line',\n  value: ' comment',\n  range: [ 13, 23 ],\n  loc: { start: { line: 4, column: 0 }, end: { line: 4, column: 10 } },\n  isComment: true,\n  whitespaceBefore: '\\n\\n\\n',\n  _tokenIndex: 5 }\n```\nBut when I iterate over type being 'Line' or 'Block', I don't get anything.\nAny ideas?\n. Agreed, there should be a test for it. Once we know it works we can write a test.\n. Currently, everything appears to be iterating on getTokens(). There looks like there is both getTokens and getComments.\n```\n/\n     * Returns token list, built using esprima.\n     \n     * @returns {Object[]}\n     /\n    getTokens: function() {\n        return this._tree.tokens;\n    },\n/**\n * Returns comment token list, built using esprima.\n */\ngetComments: function() {\n    return this._tree.comments;\n},\n\n```\nI'd like us to consider having getTokens iterate over both tokens and comments, and remove the getComments call because everything that was using getComments should be using the iterators anyways.\n. This has been rebased on top of #1082 to get access to the new iterators and assertions.\n. @mikesherov I went into a bit more detail on this (with a fix) in #1082, that is probably a better place to have this conversation. It still does need help though.\n. It's been a while since I started this, but I remember having extreme trouble doing this with nodes and started going down this path. I would absolutely love to be able to use nodes here if that solves my problems.\nGoing down this path has since become way more pain. I'm running this through a really large codebase and there are way more things that I missed as tests.\n. Guessing that coveralls only runs on things that have attached issues.\nFixes #1049\n. Yeah, I'm about to push up a new version with a ton more tests\n. Hmm. Still no Coveralls.\n. O hai coveralls. Pleasure to see you.\n. I believe this is a duplicate of part of #1023 \n. This actually has a bit more nuance to it.\n@mdevils In js-file lines ~28 now has this._tree.tokens and this._tokens\njavascript\nthis._tree.tokens = this._fixEs6Tokens(this._tree.tokens);\nthis._tokens = this._buildTokenList(this._tree.tokens, this._tree.comments);\ngetTokens was returning only this._tree.tokens, but should probably now return this._tokens. Since we are now adding the EOF token as well, that means the tests for js-file need to be updated if we make this switch. It seems like the right switch to be making. Is there something I'm missing, or should I go ahead with this?\n. @mdevils. Combined being this._tokens or this._tree.tokens.concat(this._tree.comments)? It seems like it should be this._tokens\n. There is actually one other difference, which is what breaks tests currently. this._tokens has EOF:\nthis._tokens:\n['var', 'a', '// com1', 'var', 'b', '// com2', EOF]\nthis._tree.tokens.concat(this._tree.comments):\n['var', 'a', 'var', 'b', '// com1', '// com2']\n. Alright, I think this is good for a final review.\n. @mikesherov, Have you looked at the tests for esformatter to see if there are things that we should also be testing for? If we could pass their testsuite, that would be awesome. :)\n. I can take a look into this. Do we have an example test in our repo yet taking input and testing indentation? It seems like it won't be rule based like the rest of our fix tests are.\n. :+1: \n. I've apparently been rebasing from origin/master instead of upstream/master. Since I've been keeping my fork up to date, I've ended up with a bunch of merges from upstream into origin. Perhaps there is a better way for me to be managing my fork.\nI've rebased this from upstream/master.\n. This should be good to go now.\n. I did a search through for == undefined (to also catch === and !==) and didn't find any other comparisons like this.\n. Still nope.\nThere are some if (!token || !nextToken) { checks, but those are in the assertions and belong.\nThere are a couple of rules that use if(!prevToken), but since they are only iterating backwards, we wouldn't have to add a check that stops it when it is EOF instead of on undefined.\nIt looks like we are all good on adding the EOF token, once we roll out we will definitely want to watch for error reports just in case though.\n. Bump?\n. Alrighty. An additional configuration option has been added. Can you guys review my doc block? I copied it from another rule but I want to make sure that it will be parsed correctly and is in the correct style. \n. \n. Bump?\n. Ah, gotcha. The flow of when things get merged in on JSCS is just a bit different than what I would expect. Still getting used to it. :)\nI was figuring that I would update #1103 after this and #1101 were merged, perhaps I should update it now so it will be ready for you to merge them all at the same time.\n. Any idea why the appveyor builds on all of these PRs are failing?\n. So are we holding off on merging these PRs until we fix master?\n. Rebased and ready. Thanks for fixing master :)\n. What's the status on this? It seems like there was some work done to enable loading from node_modules in this commit.\n. What's the status on this? It seems like there was some work done to enable loading from node_modules in this commit.\n. @sindresorhus We've been doing this for a while at the root of our apps:\n{\n  \"plugins\": [\"wealthfront-javascript\"],\n  \"preset\": \"wealthfront-javascript\"\n}\nWealthfront-javascript being this package on npm\nWe've still had to manually extend things inside our directory tree though\n. Any update on this?\n. I'd like to see this as well. :+1: \n. I'd like to see this as well. :+1: \n. It should probably take an integer to be consistent with http://jscs.info/rule/requireBlocksOnNewline.html\nI would also only want this to be for basic types. Primitives or variables. For example, if I set the number to 1, I would not want this to pass:\nvar a = { foo: function() { return { obj: 'foo' } } };\n. sigh...manually. \nI didn't think it would be that many so I kept being like...oh, I'm almost done. And then I got from disallow to require, and was like \"shit, guess I can't stop here\".\n. Good call! Look at that progress! ;)\n. @mikesherov I totally agree. Once I got these tests written there is a definite pattern. \nSome tests have an assert that the number of errors is 3 while most verify only 1. It seems like other than an integration test, tests should only ever be asserting one error. Does that seem like a reasonable general rule? Are there obvious cases I'm not thinking of?\n. Can you elaborate a bit more on why that example should pass?\nAlso, perhaps it's time to have indenting rules beyond just the simple all or nothing validateIndentation. I'm thinking about arrays specifically here since as you say, everyone is doing them differently.\n. Good to hear. FWIW, this has almost been a big enough thorn in my side to go back to another sublime formatter plugin. I hope we can figure out the right way to fix it. It seems to be an issue for all blocks split on multiple lines.\n. Is there a potential stop gap fix that just causes the autoformatting to format these blocks properly, but doesn't necessarily validate them properly?\nFor example this code\njavascript\nvar x = {\n  a: 'foo',\nb: {\n  c: 'bar'\n}\n}\nwhen autoformatted, is turned into this:\njavascript\nvar x = {\n  a: 'foo',\n  b: {\n  c: 'bar'\n}\n}\nIt seems like it could theoretically detect the block and indent the entire thing and then revalidate the indentation. Perhaps I'm missing how this is implemented though. \n. So...there is a mailing list? :P\nedit\nFound it. For anyone else looking and stumbling across this post: https://groups.google.com/forum/#!forum/jscs-dev\n. This rule needs tests that verify that it fixes properly. Using assertHelpers.reportAndFix is probably the best choice.\n. It seems like It should be value if there is only one choice, and values if there is more.\n. And as a side note, is this something that we could automate ourselves for the future? Anything that can be enforced by linters or tests is better than manual checking and enforcing down the line.\n. Not necessarily. I could see us trying to generate those doc blocks automatically, but I could also imagine us trying to figure out what a custom jscs rule (or another system if there was a better way) to validate the contents of docblocks.\n. Do you feel differently about linesBetween?\n. Just out of curiosity, I've been seeing it a bunch. What is BC in this context?\n. It sounds like this is #1194 \n. I figured that is how I would check if allExcept: \"inlineComments\" was set. You are saying that we should just change the default behavior?\nI could see changing the default being okay if used in conjunction with a rule like requireLineCommentsOnNewLine`. Do we have a rule like that?\n. I believe this should still be open. The default for this rule should be changed so that it doesn't error on any line comment that isn't on it's own line. \nThis can then be used in conjunction with #651 \n. :+1: \n. Done\n. I would love to have this!\nHowever, this is something that should definitely have a lot of tests. I could see it running into issues with strings with/without escape chars for the opposite quote type. I could also see it being an issue with multiple concatenated strings with different quote types. Multi line strings would be another good thing to check.\n. I really want this, so I'm going to try to jump in and help move this forward.\n. @markelog @mikesherov: Are we guaranteed that if there are no errors reported by checkString then fixString will never change anything?\n. @hzoo, I believe this is the case where you would use hasOwnProperty which just doesn't check the prototype.\n. LGTM\n. When I was at Google, this was ingrained into my coding habits. I would love a rule for this.\n. @mkanat: IIRC, you had a name for this.\n. I could imagine a rule that requires parenthesis for any expression with more than one operator of different importances. That would encompass var a = 2 + 4 / 8 > 6 && 2 - 4 * 2 < 3 as well as requiring parens for boolean conditionals. Can you make a new issue describing that?\n. disallowInvertedConditionalsWithElse? (my preferred) \ndisallowIfNotWithElse?\n. I would imagine this should be okay:\njavascript\nif (!foo || bar) {\n} else {\n}\nWhat about:\njavascript\nif (!foo) {\n} else if (bar) {\n}\n. @markelog exactly.\n@zxqfox exactly.\nThe reason I think it should look like your second example is because there is no error on the line with var a = 2; The error is that the semicolon has too many blank lines above it. You could also say that there are too many blank lines (and that those lines themselves are the error). \nEither way though, there is nothing wrong on line 2 IMO. :P\n. I'm impressed with the level of work you put into this. Thank you for contributing!\nFWIW, I'm against having these dictionary lists in JSCS. If we are really going to have this rule, I don't think we should have to version bump JSCS every time some new property gets added to a generic javascript object. \nAlso, if we are really going to have this rule, I don't think we should error every time an identifier is found that doesn't match a dictionary. I would think it should only be on definitions and assignments. \nIn general, I think a rule like this is beyond the scope of JSCS. A spellchecker like this seems like it could be a completely standalone project with it's own scope of plugins. I worry that this will add a lot of bloat and maintenance cost to JSCS.\n. These changes are much better. I don't think we should define any peer dependency by default for this rule. I'd be happier if it just gave a message when the user tried to use it and needed to install a word list.\n@markelog Someone else on the project should probably weigh in here with their thoughts. \nNow that everything is externalized I don't have nearly the same level of problem I had with it previously, however I'm still not totally happy that it requires us adding an additional npm install command to our test suite. \n. Hmm, perhaps I wasn't communicating well what I was thinking. \nI don't think we should list any word list in any dependency. I think this rule should try to load the request word list, and if it doesn't exist then it prints a message saying that the user needs to install a word list.\n. @zxqfox, Is there a discussion somewhere about the plugin api? I hadn't seen it until you linked it, but my concern is that it doesn't enable people to have a node_module that is there style guide that might contain more than just jscs but also jshint, editor_config, etc. \n. @markelog @mikesherov Can one of you restart the appveyor build? Looks like a flaky failure.\n. I agree, here is another case that occurs pretty often:\nfun(\n  arr.map(function() {\n  })\n);\n. @markelog, if your PR passes the added tests in this PR I'm okay with your solution. From an initial glance, I am guessing that it won't.\n. Also referencing #1237 here. \n. It is the same issue with arrays though\njavascript\nvar a = [\n2,\n3,\nfunction() {\n} // this will expect a blank line after it.\n]\n. I guess I'm not really sure what the issue with the fix in this PR is. Is it that you don't want any exclude options at all, only true or false? Or is it that you think we should change the defaults?\n. I'm not so much concerned about having to throw code away, but mostly the support of arrays. I was the original author of the rule, and discovered when running this that it was breaking in a bunch of places in our codebase that it shouldn't have been. I repeatedly stated on both of our PRs, that this rule needed to pass the tests I added and for some reason arrays were punted as not important enough for the hotfix. \nFrankly, I still can't use this rule until the array fix is in there, and that is what makes me annoyed. Especially as the original author of the rule.\n(Obviously I can use a custom rule in our project for the time being, but that is awfully disappointing). \n. Alright, I added the isException helper into this branch and added an option for object properties as mentioned in #1260. \n@markelog, @zxqfox would you like to reopen this PR so it grabs the new commit, or should I create a new PR?\n. Sorry for taking so long to get to updating this PR. @markelog I fixed the things you mentioned.\nI need to look into why this build is failing more. When I run npm test on my computer I don't get any errors. \n. @mikesherov, even with my comment I still don't think this is the right solution. I don't believe this passes the tests that I added for my solution. @mikesherov please look at #1239 for comparison.\n. Duplicate of #1144 \n. It's an exact duplicate in the sense that I investigated enough to know that it was valiadateIndentation and added some tests that were failing that reproduced the problem for you to fix.\n. I don't think this is an autofix bug. \nvar a = {\n    b: 1, c: 2\n};\nstill passes JSCS, which means I am just missing an additional rule to put each key on its own line. \n. This rule doesn't use the assertions because it is manually parsing the comment string which includes the // since // isn't a token on its own. \nIt manually calls errors.add which can't specify that the error is fixed. \n@markelog, this seems like a space where our assertions and errors library are lacking. How do you recommend we progress on this issue?\n. What do we want the solution to look like? Always allow _ before the $? Have a config option of allowed prefixes for jquery elements that defaults to $ but can be specified: [\"_$\", \"$\"]?\n. It would be enough for me, but I could imagine it not being expected for other people.\nSince requireCamelCaseOrUpperCaseIdentifiers always allows leading underscores, it would be fine to do the same here. So yeah, lets roll with Always allow _ before the $.\n. Misread the docs. My bad.\n. :+1: Thanks\n. I disagree with the change to this rule that doesn't enforce the extra line in objects. That was one of the key things I needed when I wrote this rule. Airbnb's style guide agreed and approved that. Why was it removed here?\n. I'm fine with that. When you say merge the two together, what do you mean? Does this PR provide any other behavior? Or should we just add the third option to #1239 and merge that one?\n. Also, I have run this on our large code base and didn't find any unintended consequences. \n. @mikesherov, that comment is applicable to #1264. I'll move it there and rebase this. That PR should be merged first.\n. Alright, rebased off master.\n. There we go. I just cleaned it up and squashed it all down to one.\n. phew. Builds passed.\n. @zxqfox @mikesherov marked it as reviewed-once before the rebase.\n. @zxqfox @mikesherov marked it as reviewed-once before the rebase.\n. For reference, the discussion about how to modify errors to enable this behavior started here: https://github.com/jscs-dev/node-jscs/pull/1202\n. Unfortunately we are unable to know whether you are passing it to an object that you control or a 3rd party library. Could you use a jscs disable flag to ignore the line?\n. With the support from the community and large companies really rallying behind acorn / babel as the forward looking parser for es6, es7, and jsx I'm concerned about sticking with esprima / espree\n. IIRC, there is a fix out for the specific issue mentioned.\nHowever, I totally agree that we should never be throwing errors to the user from inside the Java code base. Hopefully unit tests avoid these cases but this is a good example of where that was not the case.\nIt's a fine line though. From the users side, we should wrap JSCS completely in a try catch to be able to say \"an error occurred when running JSCS\". However, we would then lose all of the debugging information. Perhaps the debugging information would be printed as part of a verbose flag that was mentioned in another issue.\n. That is a great point about disabling the rule and continuing running with the others.\n. Frankly, I'm surprised this works. Mostly because I would think we shouldn't return if ignoreProperties is true, but only if we are inside of an object and ignoreProperties is true. \nHowever, I couldn't find a test that previously had an error, that should still have an error with this relaxing modification, so maybe it is okay.\n. Duplicate of #1144 \n. This was added in #1239 I believe.\n. I'm sure Airbnb would want this one. It was the same case with firstAfterCurly.\n. By relevant statement, do you mean confirmation that someone actually wants this rule value? I know we want this rule value at Wealthfront, @hshoff, any gut feeling as to how Airbnb feels?\n. I would love if someone else could take this one. I'm a little bit swamped right now to jump into this issue. \nTo whoever does: We should also support lines for jshint which probably means we need to have an option that takes an array of words: startWords, making the actual code change this:\njavascript\nvar trimmed = comment.trim();\nif (startWords.any(function(startWord) {\n   return trimmed.indexOf(startWord) === 0;\n}) {\n   return;\n}\n. @mikesherov @markelog @zxqfox  Can I get a review? Also, are we able to do a patch release to include this?\n. @mikesherov Bump. We never did get this into a patch version\n. Bump...again. We seem to be way past a patch version and other PRs have been merged. What should I be waiting for on this one?\n. I don't believe it is a problem with the opposite rule because it inherently disallows the blank line, so there is no invalid error message to be fixing.\n. Changing the inverse rule hasn't been on my priority list since we don't need it for work. :-/\n. Thanks guys\n. Bump?\n. @markelog @mikesherov @hzoo \nBump...again. We seem to be way past a patch version and other PRs have been merged. What should I be waiting for on this one?\n. Does this issue come up when you ignore the rule in line in a file? Can you create a test case that fails? I understand that the usage of global state in the rule is likely bad, I just can't think of an example of how you'd be running different configurations on a single nodejs run.\n. I believe auto-configure only chooses the preset that matches best, not individual rules which it looks like jscsrc-guesser does.\n. Can you guys take the conversation about the validity of his tool out of this issue? This is a real bug. I'd love for ideas as to how to write a failing test though.\nEdit figured it out.\n. It looks like we should add above this line: https://github.com/jscs-dev/node-jscs/blob/8cc2ba0b33175132ca83b3aa3d95be385805eadc/lib/rules/require-dollar-before-jquery-assignment.js#L79\nA check for token.id.type which would branch as it is now for identifier and add a new branch for ObjectPattern. Happy to receive pull requests. :)\n. Agreed. :)\n. I would think we should ignore everything in the .gitignore by default as well. Users don't want to check those files in, are not part of their project, and most likely vendor files. \n. If you are specifying these in a .jscsrc file, how would you pull them out into a variable? My understanding is that file is just JSON.\nWe also already do shorthands like this. For example disallowSpacesInFunction is shorthand for disallowSpacesInNamedFunctionExpression and disallowSpacesInAnonymousFunctionExpression\n. Link to the .js form documentation?\n. Yeah, looks good. Thanks guys\n. This seems to be what ESLint wrote: https://github.com/eslint/eslint/blob/11f7c712fcec57e8a8cb6feea597e55c6c83348e/lib/util/traverse.js\nIt seems like they manually walk the directory tree instead of using glob and check if a file matches the exclusion and if it does it stops going down that tree. That seems like it is going to limit the possibilities of glob / minimatch though.\nI'm really not sure what the best course of action is. As things stand now though, the option of searching at root is pretty useless. For us it takes over a minute while looking for files if at the root, I had to cancel it and be more specific.\n. Something interesting I came across the other day:\nPer node-glob's documentation:\n\nComments and Negation\nNote: In version 5 of this module, negation and comments are disabled by default. You can explicitly set nonegate:false or nocomment:false to re-enable them. They are going away entirely in version 6.\n. I seem to be hitting this on mac too. If I use **/*.js, everything is dandy. If I use src/**/*.js, I get Error: Path src/**/js was not found.\n. If anyone comes across this in the future, the solution I used is what @hzoo stated. To just use src and not specify the glob on the end.\n. Processes typically do a lot of work in node_modules because they require a bunch of stuff and the system has to read and access those files to start. If there are files being accessed that aren't part of the JSCS dep tree, that would be a sign of a problem.\n\nAlso, are you running jscs-babel? Babel has a lot of requires itself and might be doing a lot of work to start up.\nIf you can run \nstrace -e trace=open,close,read,write,connect,accept YOUR_COMMAND > output.txt\nAnd post a gist with that text file (make sure to scrub it first!) we can probably get a better idea of what file access is happening during startup.\n. I don't currently have the bandwidth to do so. :-/\n. It looks like he merged your PR in commit 95dc04b\n. I'm also getting an error on requireCamelCaseOrUpperCaseIdentifiers when upgrading from 2.11. It apparently no longer accepts ignoreProperties\nrequireCamelCaseOrUpperCaseIdentifiers option requires a true value or Object`\n. It looks like the change made the error show up sooner, but it isn't a warning, it actually causes a build failure. \nConfig values to remove in 3.0:\nThe `esnext` option is enabled by default.\nhttps://travis-ci.org/TheSavior/clean-git-ref/jobs/123588553\n. I don't think we should have magic booleans. I think I'd much prefer this taking an options object.\n. Yeah, I didn't have this originally but its tests were assuming that differentLine wasn't strict and only guaranteed that they were in fact on different lines, not that they were on touching lines.\n. :+1: \n. Is there a test you can think of that I'm missing? require-newline-block-statements had tests for both and I made sure those worked. I also have tests for token-assert differentLine that tests allowing extra, as well as requiring strict. :-)\n. :+1: \n. It seems weird to be messaging about the end of the file in a generic helper like this.\n. Should this also say jscs?\n. Oh, gotcha. Super confusing. This isn't the name of the preset itself, this is a case of presets extending each other.\n. What if the rule in configuration files was extendPreset instead of preset? Just like you can extend by path. Or in some other way merge those two options.\n. Nope, I copied this from another rule.\nAre you telling me that this is wrong, or actually asking what it should be? haha. \n. value === true is probably reasonable here\n. atLeast or exactly could be 0 in which case !0 wouldn't really give us the logic we are looking for. I agree that this set of if/elses could be cleaned up, I'm not convinced a switch(true) is the best way to do it. :-)\n. Also, I'm not completely convinced on atLeast, atMost, and exactly as options either. The other option is to have multiple functions. Any opinions?\n. Check out #1014. We have talked about the redesign of the API there.\n. :+1: \n. Since TryStatement is in there twice, if I make it into an object I would have to have this:\nvar excludes = {\n    'IfStatement': ['else'],\n    'DoWhileStatement': ['while'],\n    'TryStatement': ['catch', 'finally'],\n    'CatchClause': ['finally'],\n    'FunctionExpression': ['.'],\n};\nand then my check would be:\nvar excludeValues = excludes[parentNode.type];\nif (excludeValues && excludeValues.indexOf(nextToken.value) !== -1) {\n    return;\n}\nI'm okay with this, are you?\n. It wouldn't be linesBetween then, it would be lineDifference...right?\n. merge conflict. I'll fix. (ha pun!) \nI'll remove this line.\n. FWIW, I don't think I agree with this.\n``` javascript\nvar x = 2;\nvar y = 3;\n```\nI think if we asked people how many lines are between those two lines, the answer we would get is 1. However, if we asked how many new line characters there are, I'm sure we'd get two. I do agree though that specifying -1 linesBetween is weird for sameLine, but I believe counting the actual lines between the two tokens makes more sense if we are going to call the assertion linesBetween. I'd be okay if we changed it to lineDifference or newLineCharactersBetween\n@mdevils @zxqfox What do you guys think?\n. @zxqfox :+1: \n. It definitely feels weird to iterate by the types Line and Block and expect only comments. This should be renamed to LineComments and BlockComments but it appears that the code that is doing that is deeper than our project. At least, I couldn't find where those were being set in JSCS.\n. I think that a rename change to how these tokens are typed should be a separate standalone PR.\n. That is definitely a valid case. It makes me sad though that we are adding a space on rules that only care about lines. :-/\nI'll change this back.\n. How do we actually do this? I don't see where the types for those tokens are being defined.\n. It's weird, but lets just be consistent with esprima. \n. Great question. I didn't read the tests. :P\n. I'm thinking that since we haven't rolled this rule out yet, we aren't breaking backwards compatibility. I don't think I've met anyone who would expect this rule to force:\n``` javascript\nif (true) {\n// comment\n}\n```\nWhile I could totally see it being optional in the future and adding more options, I think it is fine to leave it like this for the initial release.\n. Hmm, your comment on the other PR implies that jQuery would expect the form I put on my last comment. Interesting...\n. How do we decide on the default behavior here? \nIt seems like if this rule is used 99% of the time with allExcept: 'firstInBlock'then that should be the default. But it would be speculation on both of our sides to try to guess which would be the 'more common' case. \n. @hshoff: Can you weigh in here? Would Airbnb want an override that wouldn't require a blank line before a comment if it is the first in the block? \nAka, should this be an option at all or just always require a blank line?\n. Yup. :)\n. I know this is existing logic, but I've wondered before if these should be returning out like they are, or throwing an exception.\n. var emiterror = or function emitError(...?\nI normally avoid function expressions like this and prefer function declarations but I'm not sure what the coding style for JSCS says.\n. It looks like these are still used down on 312, did some other logic change that I'm not noticing that makes this work?\n. It seems like spacesBetween and linesBetween should have extremely similar tests. Perhaps not in logic, but definitely in structure. For example. Verify error messages, verify exactly logic, verify atLeast logic, etc. I think the structure of the tests should be made to match. It looks like this is missing tests for missing other options that linesBetween has.\n. Should there be a test for should error and fix whitespace between tokens without a comment\n. linesBetween has checks that the right whitespaceBefore was added for the exactly, atLeast, and atMost cases. We probably want those here too.\n. :+1: \n. These lines could be defined in the specific rule that uses it, right? \n. This doc should probably describe how to install third party word lists, correct?\n. You commented that there was a nice error message for people trying to use a word list that wasn't installed. There should probably be a test that verifies that.\n. Could use it('should not report real words in es6');\n. Hah. Good catch. Fixed.\n. See https://github.com/jscs-dev/node-jscs/pull/1239/files#diff-3c958cdc2aa18d8507669afbc4372ee5R154\n. My solution also handles arrays, I'm happy to remove the configuration options.\n. @markelog Can you make a case why we wouldn't want this to be handled in arrays?\n. Is this meant to be an unclosed block comment?\n. I'm not sure why this was removed. This seems like exact test that this rule is supposed to fail.\n. if (firstToken !== comment)? \n. Why do we need to check for undefined and EOF? It seems like we could just check if the first token on the line IS the comment. If the comment ISN'T the first token on the line, return out.\n. ah /* */ but without a space. Gotcha. For some reason this confused me. All is well, ignore me. :P \n. If we are going to alert the user to the error here, I'd think we should get more specific.\n\nError running rule 'thrower'. This is an issue with JSCS and not your codebase. \n\nand then if in verbose, provide the actual error information and stack trace.\n. Yeah, seems weird to me too. However, it matches our other rules:\ndisallowPaddingNewLinesAfterBlocks\ndisallowPaddingNewLinesBeforeLineComments\ndisallowPaddingNewLinesInObjects\nrequirePaddingNewLinesBeforeLineComments\nrequirePaddingNewLinesInObjects\netc.\n. What do you feel like the expected behavior here? I would expect a blank line between the shebang and comment.\n. Fixing these rules should be done in a separate PR then and will likely need to deprecate these ones so we don't break backwards compatibility, right?\n. Yeah, came from #1202 that I pulled into this one. It seems to work and pass the tests, so I'm not super worried about it. It might need to change if we try to fix multi line strings, but I wouldn't bother changing it until that comes up. We shouldn't be scared of regex just because it is regex. Even though we both seemed to have the same reaction :P\n. I'm accepting Pull Requests. ;) I didn't write the logic on this one, I pulled it from another PR and updated #1201 and #1202 here.\n. Why is this necessary? \n. Ah yes, json, not js. Ignore me. ;)\n. why are we turning off a test?\n. ",
    "bcherny": "+1 yes please!\n. ",
    "caillou": "+1\n. ",
    "gasolin": "worth to mention that jshint also support such kind of file-wide configuration to allow exclude some policy for legacy code http://www.jshint.com/docs/options/#freeze\n. ",
    "gero3": "Anything holding this PR back, otherwise I can adapt the MDCS PR.\n. I've updated the pull request and added a testcase to errors.\nPS: Sorry that  you had to edit every line for review\n. Fixed the problem\n. updated the PR\n. @mikesherov I've added the better test.\n. Is there anything holding this PR back??\n. Can this be merged??\n. I've updated the formatter to make it useable.\nTo test it, I used a minified build of three.js and used the MDCS configuration.\nThis is the result: I have file that complies with that standard. \nhttps://gist.github.com/gero3/a787fe2023a17ffd6ea8\nHow does it work:\n- Get the errors by checking the file.\n- For each error,  check with the source what needs to be changed and create a change request with what need to be removed or what needs to be added as strings.\n- apply the change requests\n- until there are no errors (or retry 10 times) repeat this cycle.\nIt is a fairly easy scheme which is fast enough for small changes and normal files.\n. @markelog\nIt is used to get the exact option that goes wrong without  the need to parse the message.\nfor instance: \ncode: var x = a?b:c\nconfig: requireSpacesInConditionalExpression: true\nthrows 4 errors: 2 which point to the b location.\nSo without this PR, it is hard to detect which is which.\nPS: I also fixed the issue\n. any updates on this one??\n. Wouldn't it be easier if you only need edit source, token list or AST  and regenerate the other 2?? It would be a lot easier to get all edge cases correct. Also this would make the rules simple for formatting. Another advantage is that we only need to keep in mind what whitespace does in one of them.\nAs for the API, I would assume a new command:\n- jscsformat path[ path[...]] --config=./.config.json\n- jscsformat path[ path[...]] --preset=jquery\n- jscsformat path[ path[...]] --verbose\n- jscsformat --help\n- jscsformat --version\nThe rules itself would get an extra function 'format' that has as parameters a file and an error.\nThe formatting should be done after checking the source. That way, the errors are a great way to communciate between the formatting and checking. It also makes sure that there is a  seperation of those 2 jobs.\nThe reason I'm against only considering  rules that don't change the ast because that would make it hard to add it later. it would seem like a hack.\nThat is why the following scheme is (I think) a good choice because of its simplicity and its ease of use.\n- The first thing is to get the errors of the files.\n- For each  of these rule we call the format method of the corresponding rule:\n  - This format function creates change requests based on the original source code and the error.\n  - These  change requests consists of 3 properties: \n    - A startIndex: to indicate where the change requests should start based on the original source code.\n    - A removeCharCount: to Indicate how many characters should be removed after the startIndex of the changerequest:\n    - A  charsToAdd: to indicate which character should be added after the removal.\n  - These change requests should always be centered around the original source code. \n- After getting every change request, it is time to generate the source code.\n  - To do this, we sort the change requests from the lowest start index to the highest.\n  - for each of these change requests, the result each time increases with:\n    - The original source code that is in between the previous startindex + removedchars and the start index of the change request.\n    - the charsToAdd from the change request.\n- After all of this we check again for errors:\n  - If there are errors repeat the same cycle (we should really limit this to make sure we don't get in an endless loop)\n  - If there aren't any errors any more, we've succeeded.\n  - If we run against an esprima error, then we should reverse to the original source code and end.\nThe main reasons I prefer this method is:\n- The source code is easier to work with:\n  - The token list has 4 different actions, adding, removing, lengthen and shorten a token while source code only has 2 actions removing and adding.\n  - The Ast has even more actions and would have a lot of edge cases.\n- I first started with editing directly on the source code starting from the errors with the highest line,column, but this wasn't the best indicator to see what needed to change in what position. Mainly when an error meant adding 2 things like the require-parentheses-around-iife rule.\n- The rules don't even need to know what the other rules changed.  \nPS: sorry for the long comment. But I wanted to jump start the discussion with what i had already made in the previous pull request. For an example of the code, https://github.com/gero3/node-jscs/tree/formatter. \n. @mrjoelkemp \nI've also been thinking about separating this functionality. But I had some reservation about it.\n- Mostly the formatting is dependent on the checks. If a check changed, the formatting has to be updated.\n- Seperated, The AST needs to be generated twice if we want to keep it completely seperate.\n- Enforcing that formatting is needed, was also not my intention. If formatting for a rule isn't provided, then we shouldn't try to format it. The reason for not enforcing formatting in a rule is simply  because not every rule can be autoformatted. For instance, a rule that checks that eval can't be autoformatted.\n. @mikesherov\nDo you mind If I take a stab at this?? I need it anyways for the MDCS formatter becuase the rule now gives problems with if else formats like\nif (choice1) {\n      action1();\n } else if (choice2) {\n      action2();\n else \n      action3();\nand I wasn't able to fix the current system.\n. I like the general approach of using assertion but it seems to not address 1 of the key points necessary for autoformatting. It doesn't show which assertion failed for a certain error.\n. I needed it for format rules in the old formatting code I have.\n. This project uses the formatter:\nhttps://github.com/zz85/mrdoobapproves\nand the formatter itself is specified in\nhttps://github.com/gero3/node-jscs/tree/formatter\n. Yep, it is just updated to be in sync with the new version and still conforms with npm test. \nAltough it is starting to show some things that need fixing before it is really reusable.\n- Like using the error message to know with certainty what it needs to do is ugly\n- not knowing the position of an error \n- etc.\n. It works. We already use it in http://zz85.github.io/mrdoobapproves/.\n. I already have written such a rule that requires spaces.\nrequire-spaces-in-computed-memberExpression\nI should  be able to adapt that code to make it work for a PR\n. Next commit will add the disallow rule.\nI also added the rule to the specified presets and to MDCS.\n. https://github.com/mrdoob/three.js/wiki/Mr.doob%27s-Code-Style%E2%84%A2#for \nAltough it is not very clear it does mention the space behind the semicolon.\n. Also added the disallow.\n. https://github.com/gero3/three.js/commit/20267dcac018384f35937ae54e0d120d4024058e?diff=split#diff-85fecdb9ce320722ba628969997a333bR233\nThere seems to be a problem here. This is code after run through the autofix. Line 235 should be indented as much as line 232.\n. Commit is run on the master of three.js with following config.\njavascript\n{\"validateIndentation\": \"\\t\",\n    excludeFiles: [\n        \"build/*\",\n        \"docs/*\",\n        \"editor/js/libs/*\",\n        \"examples/fonts/*\",\n        \"examples/js/libs/*\",\n        \"examples/models/*\",\n        \"examples/obj/*\",\n        \"examples/scenes/*\",\n        \"test/*\",\n        \"utils/*\"]}\nShouldn't this need to be the same Indentation as the line above it \nShould this curly brace be indented??\n. Not really, the library source itself is quite structured but the examples are a mess now and there are a lot of example files. Which is why we want a autofixer of course.\n. There is a problem in the fact that whitespacebefore always gets deleted.\nFile to be autofixed\nAutofixed file\nAs you can see, it removed the linefeeds.\n. Next test:\ncommit\nI think there is only 1 problem left:\nshouldn't stop be on the same indetation as the brace\n. Sorry, tests are added.\n. It kept saying there was an error while there was already 1 space between the comment and the bracket. So It fixed the error but kept reporting it as an error.\n. Is there something wrong with this pull because appveyor failed??\n. Fixed.\n. FIxed.\n. Fixed.\n. Fixed\n. Fixed\n. Fixed\n. When this fail, It throws an error which makes it so that done doesn't get called and a timeout occurs.\n. Not yet, I'll write a wiki page once I get around to fix this pull request. \n. It doesn't make sense to test for new lines specifically because newlines are also 1 character wide \n. Shouldn't this  acoount for new lines??\n. updated\n. no problem\n. now with extra info\n. copy past error\n. fixed this\n. 5 is just about right I think. I already had runs that took 3 times to fix it when using it on the MDCS preset and that took 3 different rules in my autofixer. But mine doesn't fix the string at the same time of checking it, so this will need a lot of less runs. \n. fixed\n. fixed\n. It throws an exception if I don't listen to the event. That is why I'm simply adding the function.\n\nTypeError: Uncaught, unspecified \"error\" event.\n. fixed\n. \n",
    "peterjmag": "Looks like this was fixed in 06e7dd579b95d4397f3213b97d915d545ec57ec0.\nThis was previously causing false positives when requireSpaceBeforeBinaryOperators was set to true. For the benefit of future Googlers, here's an example of the error I was getting:\nOperator : should not stick to preceding expression at javascript/lib/yui3/node-base/node-base.js :\n   139 |     * @return {Node} A Node instance bound to a DOM node or fragment\n   140 |     */\n   141 |    create: Y_Node.create,\n------------------^\n   142 |\n   143 |    /**\n. ",
    "wnr": "Sorry about the dupe. Yes my bad, In my tests I do have \\t and not \\n. I'll update the issue.\n. ",
    "dstroot": "Yep - I'll try it - was getting some other strange errors on my box so could be something strange with my setup but I am also seeing it in another repo.  I appreciate that you tried to reproduce it.  I noticed you are running via command line instead of via gulp though.  \nI run via npm install and then gulp.  For reference I also reported this to the gulp-jscs repository.\nOK - just tried and am still seeing this error:\n\u276f gulp            \n[23:41:50] Using gulpfile ~/Code/jscs/gulpfile.js\n[23:41:50] Starting 'jscs'...\n[23:41:50] 'jscs' errored after 106 ms\n[23:41:50] Error: Unsupported rules: disallowTrailingComma, requireSpaceAfterLineComment, requireSpacesInConditionalExpression\n    at StringChecker.configure (/Users/Dan/Code/node_modules/gulp-jscs/node_modules/jscs/lib/string-checker.js:143:19)\n    at Checker.configure (/Users/Dan/Code/node_modules/gulp-jscs/node_modules/jscs/lib/checker.js:48:39)\n    at Object.module.exports (/Users/Dan/Code/node_modules/gulp-jscs/index.js:13:10)\n    at Gulp.<anonymous> (/Users/Dan/Code/jscs/gulpfile.js:20:13)\n    at module.exports (/Users/Dan/Code/jscs/node_modules/gulp/node_modules/orchestrator/lib/runTask.js:33:7)\n    at Gulp.Orchestrator._runTask (/Users/Dan/Code/jscs/node_modules/gulp/node_modules/orchestrator/index.js:273:3)\n    at Gulp.Orchestrator._runStep (/Users/Dan/Code/jscs/node_modules/gulp/node_modules/orchestrator/index.js:214:10)\n    at Gulp.Orchestrator.start (/Users/Dan/Code/jscs/node_modules/gulp/node_modules/orchestrator/index.js:134:8)\n    at /usr/local/lib/node_modules/gulp/bin/gulp.js:121:20\n    at process._tickCallback (node.js:419:13)\nWill play around with this more tomorrow.\n. Closing this - not able to reproduce on another machine.  Odd...\n. ",
    "cbabos": "@dstroot In my case the reason was, that I used a very old version of the gulp-jscs. Try updating (eg.: in your packages.json update the gulp-jscs version to 1.1.0) to the latest. \n. ",
    "danielbsig": "Great, thanks.\n. ",
    "rachelnicole": "I can take care of this.\n. ",
    "joakin": "@markelog We will have a stab at it soon, either @jdlrobson or me, unless @rachelnicole has already something going on.\n. @markelog @jdlrobson There is https://github.com/jscs-dev/node-jscs/pull/765 started, we need to keep it in mind if we start a new pull to not duplicate effort if the other one is being worked on (although it doesn't seem to be moving much)\n. There is now:\nhttps://github.com/jscs-dev/node-jscs/commit/75655d5cbcda76a39be2c3107936190cb2cab5d4\nJust in case it is useful here\n. @indexzero @markelog I think we have some kind of convention around this in wikimedia, I don't remember exactly if it is one way or the other, but yes, there is interest.\n. ",
    "mderazon": ":+1:  agree with @sindresorhus \n. Just realized that jscs uses minimatch for pattern matching,\nSo I can do something like this\n\"excludeFiles\": [\"node_modules/!(my-module)\"]\nMuch better than what i've suggested.\n. ",
    "addyosmani": "In case it would help, I (and I'm sure others) would be happy to back this through BountySource. If that's less useful, :+1:. There's huge value in having something more concrete than fixmyjs available.\n. ",
    "soliton4": "hi there\ni found this in my inbox:\nhttps://github.com/soliton4/nodeMirror/issues/18\nwould be a totally cool feature, but it looks like the formatting option is still under construction.\nis there any part of it usable and can you point me to a working piece of code?\ni basically need the option to input text and get formated text as output.\nthank you very much ;D\n. i dont know if this is any help to you but i post it anyway.\nnodeMirror has a early version of the formatter integrated now. jscs can also be selected as linter. that way its easy to see how well the formatter works.\nlet me know if this was helpful\nalso keep me updated if i should pull a new version of the formatter\n. i agree\nis there a api documentation available yet?\n. ",
    "millermedeiros": "so @jzaefferer just told me about the plan to add formatting to jscs. To be really honest, I would love to see someone else solve this problem for me since I'm not having that much time to work on esformatter and have other priorities in life at the moment... but for what I could see you guys are moving towards a dead end and underestimating the complexity of this problem.\nHandling white space is the easiest part of code formatting by far; adding/removing line breaks is tricky (child nodes affects the parent nodes structure) but indentation is the real challenge; specially if you want to support multiple code formats.\nThere are many reasons why esformatter works the way it does, and today I added some info describing how/why we transform and indent the code that way; it might be worth the read.\nI did not spend too much time looking at how you're implementing the autofix but it looks like most of the rules are line based, if that is really the case you will have a really hard time when you try to add/remove line breaks and implement proper indentation. There are so many edge cases that it's basically impossible to handle it all in a single step (indentation should always be the last step otherwise it will be wrong for sure).\nI would love if more people contributed to esformatter (fixing what is currently broken) and actually created a plugin to convert the jscs config file into a format that esformatter can understand. I honestly think it would save a lot of headaches to all the people involved.\nNowadays I would even implement esformatter in a different way but some changes would require so much work that it is definitely not worth doing (like building a proper CST instead of using an enhanced AST).\nUntil I find something that works better than esformatter, or stop using JavaScript, I'll keep developing it, even if I take forever to finish... - any help is highly appreciated, pull requests with reduced test cases and bug reports are extremely helpful (code is only as good as the tests).\nPS: using the assert is really the best abstraction that I could think about, it's very similar to how I handle it on esformatter with ws.limitBefore(token, tokenIdOrValue) and ws.limitAfter(token, tokenIdOrValue) - limiting line breaks is way more complex since you might have comments and white spaces in between but I also abstracted the logic the same way...\nPPS: I also think the responsibility of fixing the code should be handled by a separate lib (single responsibility FTW!) but there are definitely drawbacks for both approaches. \nGood luck!\n. @TheSavior there are a lot of edge cases related to indentation, specially for complex nodes like IfStatement, FunctionExpression and CallExpression\nThere is also the problem of chained member expressions and how they should be handled, specially if you think about the jQuery style guide when special methods cause negative indents...\nThere are some crazy rules about what should be start/end of the indentation in some cases, specially since we might have optional parenthesis and curly braces...\nI'm nailing down one bug at a time, but some problems are very hard to solve if all you have is the line number and/or a vague AST structure. In many cases you need to understand the actual code context and work around the AST limitations.\n. @TheSavior our token list is a LinkedList and not an Array, so it's very trivial to add/remove items (we don't use the context of indexes.. we just edit the LinkedList in place) - every token have a reference to the prev and next tokens, so to add/remove you just need to update the references to prev/next on the adjacent tokens. Every node on the AST also have a reference to the startToken and endToken to make it easier to traverse.\n. @mikesherov I feel glad for the invite to help on jscs and join forces but I will probably just keep working on esformatter instead. Time is a very limited resource and there are different user needs to be filled.\nThe design flaw I regret most on esformatter is that I should have built a real CST since the beginning with good helpers for code manipulation; making sure that the CST was as easy as possible to modify (giving more power to plugin authors) and with saner node boundaries - having to search for all the tokens is cumbersome and parenthesis makes things weirder. The main reason why I did this way was because I thought that the tool would only handle white spaces and line breaks, but current plugins are showing that people actually want it to fix other issues as well (quotes, braces, semicolon, rearrange the code, etc). - jscs structure is no different from that and while you implement code formatting it should become even more similar (eg. start using linked lists) - I should have also delegated more work to plugins and/or separate libs since the beginning.\nWe are basically approaching the problem starting from 2 opposite directions - I was initially thinking about writing a tool that does basic string diff between esformatter input/output to validate the code style, while jscs uses the validation to correct the differences...\nI'm confident you guys will find a solution to all the problems given enough time, just wanted to give a heads up; keep the good work!\nPS:  Maybe this idea of having a competitor will motivate me to move faster :D\n. FYI I resumed esformatter development and closed 20 issues this week (all the reported bugs that we had) and just published v0.5.0 to npm. v0.6 is coming soon with lots of improvements. I promise I won't spam in the next releases, just thought it was a good idea to share in case you guys change your minds and decide to reuse it (or at least decide to borrow some of the test cases). cheers.\n. The test cases and implementation might be useful: https://github.com/millermedeiros/esformatter-quotes\nI'm almost sure there was a npm package to change string quotes but couldn't find it the day I started esformatter-quotes... Would be good if we could all reuse some external/reliable lib.\n. ",
    "varemenos": "@TheSavior you truly are the savior :)\n. ",
    "difosfor": "Experimenting with this in our build tool and very excited about the possibilities! But now of course we want more ;)\nWhat about non-whitespace fixing? I imagine/hope it shouldn't be too hard to fix errors related to comma's and semi-colons. E.g: anything where the error message is already pointing exactly at where a certain character is missing or should not be.\nAre you guys working on this already and should we just add some bounty and/or how can I contribute?\nPS: Personally I disagree with people who would like to see this developed in a separate project. Fixing is a core feature. Having software tell you exactly what you did wrong and then subsequently not helping you save time by fixing it seems a bit masochistic to me. It's just like an annoying teacher who keeps hitting you on your fingers every time you make a mistake instead of an assistant that smoothes things out for you.\n. And how do you go about using another parser? Is there an option for that?\nShouldn't this just work when you enable esnext?\n. Will this be included in jscs anytime soon? We use jscs in several ways so I'd really rather not have to introduce another dependency besides it. Or are you waiting for another parser to provide better ES6 support?\nAlso, if I'm not interested in JSX and other React things, but just in ES6+ will using esprima-fb not get in my way?\n. Ah, just read in changelog (http://jscs.info/changelog.html) for v1.13.0:\n\"We eagerly wait for the Esprima 2.3 release, since soon after, esnext option will be set to true by default.\"\nHopefully then this will be supported out of the box.\nThanks for your pointers to help us out in the meanwhile hzoo!\n. Interesting, we're using Babel for the ES Next transpiling, so I guess it would make sense to use the same parser for jscs. Though theoretically at least in the end it should all be standard and not really matter.\n. PS: Note that when you also disable the rule for error B (making the file error free) that jscs --fix file.js will then leave the file alone as you would expect.\n. Did you also have disallowMultipleVarDecl in your .jscrc file? When you disable all errors this is not an issue. You need to disable one while still leaving the other.\n. ",
    "golyshevd": "Is it the first rule with this behavior? Sounds like requireLineBreakBeforeKeywords: ['return', 'throw', 'function']\n. No, i just was tried to generalize the idea. It might be so usable for me.\n``` js\n// invalid\nfunction a () {\n    return 42;\n}\n// valid\nfunction b () {\nreturn 42;\n\n}\n```\n. Why not? Guess yes. Not sure that these are really different cases. Simply just line break before any passed keyword. But not for cases where some the same keywords\n``` js\n// no extra line break between var-s but before first\nvar a = 5;\nvar b = 6;\n```\n. +1\n. guess no, but i think it is more optimal technique. On initialization you instantiate only rules which were configured. And then, when checker is running, you execute all of them, not looking at the configuration order. Just thoughts inspired by registerDefaultRules\n. +1 to @mocheng, this rule is strange\nES5 ignores trailing commas, but it is not feature IMO, just tolerating. You should not encourage this style\n. Yep, this is the same. Sorry for duplicate\n\nIf so, there are plans!\n\nGood news! =)\n. > Yes, there's excludeFiles: https://github.com/jscs-dev/node-jscs/blob/master/OVERVIEW.md#excludefiles.\nThink that excludeFiles should not be a part of .jscsrc. It causes some issues when copying/pasting .jscsrc from project to project. excludeFiles should be an argument of some internal checkFileList function, which should filter the list IMHO\n. ",
    "constantx": ":+1:\n. ",
    "turadg": "You got it. I amended the commit to keep it clean.\n. Honestly, I didn't have a great reason. I just wasn't sure whether to do\n\"nested\" or \"all\" and thought the less restrictive one would be a safer bet\nsince the existing preset had no constraint at all. Do you want it changed\nbefore this merges? Or can you just make that edit on master after?\nOn Tue, Jul 15, 2014 at 6:22 PM, Joel Kemp notifications@github.com wrote:\n\nThanks for the speedy turnaround!\nJust curious, why did you choose \"nested\" instead of \"all\"? That\ndocumentation that you linked has examples for flat objects, so I assume\nthe disallow rule should hold for nested as well. Hence, the value of\ndisallowSpacesInsideObjectBrackets and disallowSpacesInsideArrayBrackets\nshould be \"all\".\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/pull/526#issuecomment-49113418.\n. ping @mrjoelkemp, changed to \"all\"\n. \n",
    "lo1tuma": "I have the same problem.\n. ",
    "fmonsalvo": "Yeah sorry, this is what I'm getting:\n```\nExpected indentation of 6 characters at Gruntfile.js :\n    58 |      all: ['Gruntfile.js', PATH_ASSETS_JS + '//*.js',\n    59 |        '!' + PATH_ASSETS_JS + '/vendor//*.js',\n    60 |        '!' + PATH_ASSETS_JS + '/app/templates.js']\n--------------^\n    61 |    },\n    62 |\nExpected indentation of 8 characters at Gruntfile.js :\n    66 |        src: ['Gruntfile.js', PATH_ASSETS_JS + '//*.js',\n    67 |          '!' + PATH_ASSETS_JS + '/vendor//*.js',\n    68 |          '!' + PATH_ASSETS_JS + '/app/templates.js']\n----------------^\n    69 |      },\n    70 |      options: {\nExpected indentation of 2 characters at Gruntfile.js :\n   161 |\n   162 |  grunt.registerTask('build:prod', ['clean', 'bower', 'jshint:all', 'handlebars',\n   163 |    'csslint:lax', 'requirejs', 'concat', 'cssmin', 'imagemin']);\n----------^\n   164 |\n   165 |  grunt.registerTask('build:dev', ['clean', 'bower', 'jshint:all', 'handlebars',\nExpected indentation of 2 characters at Gruntfile.js :\n   164 |\n   165 |  grunt.registerTask('build:dev', ['clean', 'bower', 'jshint:all', 'handlebars',\n   166 |    'csslint:lax', 'copy', 'concat', 'cssmin']);\n----------^\n   167 |};\n   168 |\n```\nThis is the file I'm linting:\n```\nmodule.exports = function(grunt) {\n  'use strict';\nvar PATH_ASSETS = 'src',\n      PATH_ASSETS_JS = PATH_ASSETS + '/js',\n      PATH_ASSETS_CSS = PATH_ASSETS + '/css',\n      PATH_ASSETS_IMG = PATH_ASSETS + '/img',\n      PATH_DEPLOY_ASSETS = 'public';\n// ==========================================================================\n  // Project configuration\n  // ==========================================================================\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\nclean: [PATH_DEPLOY_ASSETS],\n\nbower: {\n  install: {\n    options: {\n      copy: false,\n      layout: 'byComponent',\n      install: true\n    }\n  }\n},\n\ncopy: {\n  main: {\n    expand: true,\n    cwd: PATH_ASSETS,\n    src: '**',\n    dest: PATH_DEPLOY_ASSETS\n  }\n},\n\nrequirejs: {\n  compile: {\n    options: {\n      appDir: PATH_ASSETS,\n      dir: PATH_DEPLOY_ASSETS,\n      baseUrl: './js',\n      mainConfigFile: PATH_ASSETS_JS + '/main.js',\n      optimize: 'uglify2',\n      optimizeCss: 'none',\n      modules: [\n        {\n          name: 'main'\n        }\n      ],\n      skipDirOptimize: true\n    }\n  }\n},\n\n// js linting options\njshint: {\n  all: ['Gruntfile.js', PATH_ASSETS_JS + '/**/*.js',\n    '!' + PATH_ASSETS_JS + '/vendor/**/*.js',\n    '!' + PATH_ASSETS_JS + '/app/templates.js']\n},\n\n//Code Convention checking\njscs: {\n  files: {\n    src: ['Gruntfile.js', PATH_ASSETS_JS + '/**/*.js',\n      '!' + PATH_ASSETS_JS + '/vendor/**/*.js',\n      '!' + PATH_ASSETS_JS + '/app/templates.js']\n  },\n  options: {\n    config: '.jscsrc'\n  }\n},\n\nhandlebars: {\n  compile: {\n    options: {\n      namespace: 'JST',\n      amd: true,\n      processName: function(filename) {\n        var pieces = filename.split('/');\n        return pieces[pieces.length - 1];\n      }\n    },\n    files: {\n      'src/js/app/templates.js': PATH_ASSETS_JS + '/**/*.hbs'\n    }\n  }\n},\n\nconcat: {\n  css: {\n    src: ['src/vendor/normalize-css/normalize.css', PATH_ASSETS_CSS + '/*.css'],\n    dest: PATH_DEPLOY_ASSETS +\n      '/css/<%= pkg.name %>-<%= pkg.version %>.concat.css'\n  }\n},\n\ncssmin: {\n  all: {\n    src: PATH_DEPLOY_ASSETS +\n      '/css/<%= pkg.name %>-<%= pkg.version %>.concat.css',\n    dest: PATH_DEPLOY_ASSETS +\n      '/css/<%= pkg.name %>.min-<%= pkg.version %>.css'\n  }\n},\n\ncsslint: {\n  lax: {\n    rules: {\n      'box-sizing': false,\n      'adjoining-classes': false\n    },\n    src: [PATH_ASSETS_CSS + '/*.css', '!' + PATH_ASSETS_CSS + '/normalize.css']\n  }\n},\n\nimagemin: {\n  png: {\n    options: {\n      optimizationLevel: 7\n    },\n    dynamic: [\n      {\n        expand: true,\n        cwd: PATH_ASSETS + '/img',\n        src: ['**/*.png'],\n        dest: PATH_DEPLOY_ASSETS + '/img'\n      }\n    ]\n  },\n  jpg: {\n    options: {\n      progressive: true\n    },\n    dynamic: [\n      {\n        expand: true,\n        cwd: PATH_ASSETS + '/img',\n        src: ['**/*.jpg'],\n        dest: PATH_DEPLOY_ASSETS + '/img'\n      }\n    ]\n  }\n}\n\n});\ngrunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-requirejs');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-csslint');\n  grunt.loadNpmTasks('grunt-css');\n  grunt.loadNpmTasks('grunt-contrib-imagemin');\n  grunt.loadNpmTasks('grunt-contrib-handlebars');\n  grunt.loadNpmTasks('grunt-bower-task');\n  grunt.loadNpmTasks('grunt-jscs');\ngrunt.registerTask('default', 'build:dev');\ngrunt.registerTask('build:prod', ['clean', 'bower', 'jshint:all', 'handlebars',\n    'csslint:lax', 'requirejs', 'concat', 'cssmin', 'imagemin']);\ngrunt.registerTask('build:dev', ['clean', 'bower', 'jshint:all', 'handlebars',\n    'csslint:lax', 'copy', 'concat', 'cssmin']);\n};\n```\nAs you can see, there's a new indentation after I break the line to improve readability, but JSCS is not allowing for that, is there a way to configure this?\nThanks for your help!\n. Sorry I did not reply before. At the moment I changed my code style to match the examples you gave me to be able to have this validation.\nThanks for the help!\n. ",
    "marapper": "Oh, thank you.\nBut there is a \"should should\" in tests' titles now. Probably its copypaste mistake.\n. ",
    "cipiripper": "Oooh, didn't know about that... Sorry!\nI'll follow your guide now... :) \n. Okay, thanks, will fix those shortly. :)\n. @cowwoc Hm true.\n. :+1: \n. @cowwoc  Do you need to have the ability to specify a number of lines required after ObjectExpression? Like in your example above, you'd specify value (2) to require at least 2 newlines after an ObjectExpression... \nOr you only want to be able to require them to end with a newline by specifying value (true)?\n. @cowwoc Also, how to go about this example:\nvar inTheWay = 1;   var obj = {\n   val: 2\n};\nShould this rule be extended to check the vertical location of the node that is infront of ObjectExpression \"obj\"? Meaning - \"require newline after object declaration/assignment (ObjectExpression), and before if previous node was not an ObjectExpression\".\n. ",
    "hshoff": ":+1: \n. Looks good!  Thanks @mrjoelkemp!\n:beers: \n. Took me a while, but added a link to this in the Airbnb style guide: https://github.com/airbnb/javascript/commit/e7c2997b3c662724eebb8425c2e6e1b76ce63974\nThanks again everyone!\n. :+1: \n. @TheSavior in Airbnb land:\n``` js\n// bad\nif (true) {\n// comment\n}\n// good\nif (true) {\n  // comment\n}\n```\n. ",
    "dbwhddn10": "@mikesherov how can I use right now?\n. @mikesherov thank you!\nI installed like this in console\nnpm install git+https://github.com/mikesherov/node-jscs.git#errorSuppress\n. @mikesherov \ni am using this.. but there is problem when using sublimetext3\n. OK. thanks.\n. ",
    "sylouuu": "I can't see any example which fits my needs. I have validateIndentation: 4 as I need 4 spaces.\nAny example with an object as a value? This is missing in the README.\n. Could you tell me when this is gonna be closed?\n. Hi, something new here?\nBests\n. Hi,\nJust updated my gulp-jscs and I have the latest version:\nnpm ls | grep jscs\n\u251c\u2500\u252c gulp-jscs@1.1.2\n\u2502 \u251c\u2500\u252c jscs@1.7.1\n\u2502 \u2502 \u251c\u2500\u2500 esprima-harmony-jscs@1.1.0-dev-harmony\nI had \"validateIndentation\": 4 in my .jscsrc.\nI tried:\njs\n\"validateIndentation\": {\n    \"indentSize\": 4,\n    \"allowBreakUnindented\": true\n},\nor even:\njs\n\"validateIndentation\": {\n    \"indentChar\": \"\\t\",\n    \"indentSize\": 4,\n    \"allowBreakUnindented\": true\n},\nBut I have a syntax error. How to use this feature?\nBests\n. That was my old config, and I have the error for break indentation.\nError: Expected indentation of 20 characters at file.js :\n  1069 |\n  1070 |                    this.props.plugin_status = type;\n  1071 |                break;\n----------------------------^\n. @mikesherov Done #689 \n. That's right, I had another indented break in my code. Glad to know there is an impact.\n. Using \"gulp-jscs\": \"~1.4.0\".\nI can give you the complete snippet:\n``` js\nInvoiceFactory.calculateTotal = function (deal, vat_rate) {\n    var total = 0;\nswitch (InvoiceFactory.model.invoice_type_id) {\n    case 1: // Advanced\n        if (deal.advanced_payment === true) {\n            total = deal.advanced_payment_amount;\n        }\n    break;\n    case 2: // Remainder\n        if (deal.advanced_payment === true) {\n            total = deal.amount - deal.advanced_payment_amount;\n        }\n    break;\n    case 3: // Full amount\n        total = deal.amount;\n    break;\n}\n\n// Add VAT if exists\ntotal = InvoiceFactory.addVAT(total, vat_rate);\n\nreturn total;\n\n};\n```\n.jscsrc:\njson\n{\n    \"requireCurlyBraces\": [\n        \"if\",\n        \"else\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"try\",\n        \"catch\"\n    ],\n    \"requireSpaceAfterKeywords\": [\n        \"if\",\n        \"else\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"switch\",\n        \"return\",\n        \"try\",\n        \"catch\"\n    ],\n    \"requireSpaceBeforeBlockStatements\": true,\n    \"requireParenthesesAroundIIFE\": true,\n    \"requireSpacesInConditionalExpression\": {\n        \"afterTest\": true,\n        \"beforeConsequent\": true,\n        \"afterConsequent\": true,\n        \"beforeAlternate\": true\n    },\n    \"requireSpacesInFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInNamedFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInFunction\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireMultipleVarDecl\": true,\n    \"requireBlocksOnNewline\": true,\n    \"disallowEmptyBlocks\": true,\n    \"disallowSpacesInsideArrayBrackets\": \"all\",\n    \"disallowSpacesInsideParentheses\": true,\n    \"requireSpacesInsideObjectBrackets\": \"all\",\n    \"disallowSpaceAfterObjectKeys\": true,\n    \"requireSpaceBeforeObjectValues\": true,\n    \"requireCommaBeforeLineBreak\": true,\n    \"requireOperatorBeforeLineBreak\": [\n        \"?\",\n        \"=\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\"\n    ],\n    \"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"],\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n    \"disallowImplicitTypeConversion\": [\"numeric\", \"boolean\", \"binary\", \"string\"],\n    \"disallowKeywords\": [\"with\"],\n    \"disallowMultipleLineStrings\": true,\n    \"disallowMultipleLineBreaks\": true,\n    \"validateQuoteMarks\": \"'\",\n    \"validateIndentation\": 4,\n    \"disallowMixedSpacesAndTabs\": true,\n    \"disallowTrailingWhitespace\": true,\n    \"disallowTrailingComma\": true,\n    \"disallowKeywordsOnNewLine\": [\"else\"],\n    \"requireLineFeedAtFileEnd\": true,\n    \"maximumLineLength\": {\n        \"value\": 600,\n        \"allowComments\": true,\n        \"allowUrlComments\": true,\n        \"allowRegex\": true\n    },\n    \"requireCapitalizedConstructors\": true,\n    \"safeContextKeyword\": [\"that\", \"self\"],\n    \"disallowYodaConditions\": true,\n    \"requireSpaceAfterLineComment\": true,\n    \"disallowNewlineBeforeBlockStatements\": true\n}\nbash\n~ npm ls | grep jscs\n\u251c\u2500\u252c gulp-jscs@1.4.0\n\u2502 \u251c\u2500\u252c jscs@1.10.0\n\u2502 \u2502 \u251c\u2500\u2500 esprima-harmony-jscs@1.1.0-regex-token-fix\n. @mikesherov I think I've found the \"mistake\". In another file I have something like this:\njs\nswitch (data.proposal) {\n    case 'IO':\n        return DealService.generateIO(deal.id);\n    case 'Price quote':\n        return DealService.generatePriceQuote(deal.id);\n}\nIf I add break; indented on the same column of case got this error:\nUnreachable 'break' after 'return'.\nAnd I also keep all break; errors.\nIf I comment this switch statement. All of my project is valid. What workaround can I use?\n. I don't understand what you say. Could you give me an explicit snippet?\n. ",
    "coveralls": "\nCoverage increased (+0.17%) when pulling 55e2a45d314d5955733838cf581485aae4a8984d on mdevils-2.x-navigation into 0f281cf60f2223e07c35423b21423381759b4de7 on 2.x.\n. \nCoverage increased (+1.12%) when pulling 2da98df11439dbd34dbe13be50c7b2a81f670864 on BryanDonovan:requireSpaceBeforeKeywords into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nChanges Unknown when pulling b88bb6090ab717cdb5c05dcf7faa4c1d3f7f4082 on separated-coverage into * on master*.\n. \nChanges Unknown when pulling b88bb6090ab717cdb5c05dcf7faa4c1d3f7f4082 on separated-coverage into * on master*.\n. \nChanges Unknown when pulling 0f281cf60f2223e07c35423b21423381759b4de7 on separated-coverage into * on master*.\n. \nCoverage increased (+0.14%) when pulling 59db652db0bd168f45845f32f9a78f87df47bb45 on tybenz:parentheses into d97aa5f340f70ad786a4e8865e6a98d694c84b7c on jscs-dev:master.\n. \nCoverage increased (+0.72%) when pulling a07d00aff79e135c1b12a8a16b04ee47503bd2a4 on kefniark:master into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling a38c4c33ec37c9f8422808829cff8663cd530c04 on kefniark:master into 467a170f26678bb895ca734e8feb6c8c30981c80 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling a7bd0ac63a25e0f0a8a943b1d8b6b7099e9590c9 on kilemensi:master into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.1%) when pulling 8e05b0ab8cfaf1886b4ffba6da53e87f4b1322ca on avishnyak:master into 467a170f26678bb895ca734e8feb6c8c30981c80 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling 48d5d083dff38db66da22058bdce5e2b1c208a06 on mrjoelkemp:stdin_refactor into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling 2c916dbff4c699d2cde65bea306a83ae8ab284e8 on mrjoelkemp:stdin_refactor into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.12%) when pulling 3a068c71bb4e4fa87bbfd14c6ce2be59f37c4f96 on mrjoelkemp:stdin_refactor into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.27%) when pulling 9a9eac4e60745103c2a838b3627efdf0b62193bd on mrjoelkemp:stdin_refactor into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.32%) when pulling 9f22a876e7fdab9a530d6d8f1cdc2ff30eb04812 on mrjoelkemp:stdin_refactor into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.32%) when pulling 674fc4aad3385cd4063748ac504ceccf88b1ecda on mrjoelkemp:stdin_refactor into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 6d6042ffc7235e1d983049b7469732acbf5e22d6 on zxqfox:hotfix/require-space-after-comment-line-triple-slashed into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling e5de62bfd02f1b1968b8a5b0085d6d3135ac3c55 on zxqfox:hotfix/require-space-after-comment-line-triple-slashed into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 29bb71badb1be9a132931e0c3b20782835a282da on zxqfox:hotfix/require-space-after-comment-line-triple-slashed into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.29%) when pulling 04329b226071a4965bc42b451cb0bc1c094d10b4 on mrjoelkemp:mock_stdin into 2fa147c4958fcc96e3ce2095cede8781b469664b on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling abffc7e2ad0e9039b479fbe40bd0f93d90bb043d on markelog:iterateTokenByValue into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling d76278173823b7416c75fb3d3d13264dfe99dbab on markelog:iterateTokenByValue into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling a33075641e079b89f1cd08132dad422f3d2d387f on markelog:iterateTokenByValue into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage decreased (-0.17%) when pulling a27fafcfa937043b470183c0309e3f5861662e26 on benjycui:feature-guard-clause into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage decreased (-0.13%) when pulling ab9f5a92fbe7dfe1f8764b552860023c44509e69 on benjycui:feature-guard-clause into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage decreased (-1.48%) when pulling 2e9afe7ee801c487b23294d639998c819eb05b53 on SgtPooki:feature/addSummaryReporter into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage decreased (-1.47%) when pulling 4af8fd791b1e76f628eab3b395f72ab43202765c on SgtPooki:feature/addSummaryReporter into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.16%) when pulling fe96746df7bae9e57df7a4547e6bdf9279d97f59 on SgtPooki:feature/addSummaryReporter into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.16%) when pulling 3c66c30b457ca52cdb46a302ae9c8855defc63d5 on SgtPooki:feature/addSummaryReporter into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.18%) when pulling ef12c82c030a5b1f957a4b4f8c64451989d49277 on SgtPooki:feature/addSummaryReporter into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.15%) when pulling e86e21cc75460bfcdeb125b09158a3f71196b119 on SgtPooki:feature/addSummaryReporter into 9f2ec59bd79728a79c07c05b32ce099edfe8b7ee on jscs-dev:master.\n. \nCoverage decreased (-0.79%) when pulling 49244bf4e87256b2124778d505614cf5df1899b8 on SgtPooki:feature/533 into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage remained the same when pulling b7e978ab9c5d053d256f90eecb8e0fa077143040 on ljharb:update_separated_coverage into ba562c46ad9ff74cd70d91157e899f40afca103d on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 37e655bc15ad320bfa0efa27630d38486531d1f5 on markelog:parens into 430e0fd103c9c9af0fb991a129e0814a51308cb7 on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 6ad876e3a90cd783e035adee5d6739e4bea64817 on markelog:parens into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling 944fd0d12522fb4d8c4bedc894c2211eea6e9007 on markelog:parens into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling 544f74514b0c997c4acfb6088142dd4fd5e4a7bf on markelog:parens into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on markelog:parens into 2643f3ee225bb05a073af99881e20582d2e0ddb1 on jscs-dev:master.\n. \nChanges Unknown when pulling eaa6594d1cbd593fab11d532c274f9bb623b50cd on mrjoelkemp:fix_tests into * on jscs-dev:master*.\n. \nCoverage remained the same when pulling 62c4da399f62240945961542d20bff26f56ab72a on mrjoelkemp:airbnb into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 046208deaeadd38b137e94ba92a9d4073f89b2da on mrjoelkemp:tighten_jscsrc into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 693b08f131cc81a2d7fab5ea02be844f8ff257eb on mrjoelkemp:tighten_jscsrc into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 4bacb06c5a997c02f076ef01992339496f8a89c2 on mrjoelkemp:tighten_jscsrc into 31f9632e7684559da31d4cb529a8b28eb2aa708e on jscs-dev:master.\n. \nCoverage remained the same when pulling bb69105a4565c662eb3ccd39920bbd11c2131f0f on vtintillier:crockford-no-check-for-LF into d703ae07ced636f6f4ba48407242a494f28df73e on jscs-dev:master.\n. \nCoverage remained the same when pulling da0f7543bc28229954cb36164f80784cac3fa50f on vtintillier:crockford-no-space-checks-in-array into d703ae07ced636f6f4ba48407242a494f28df73e on jscs-dev:master.\n. \nCoverage remained the same when pulling 0215c4101b7c47086ba7001ada58af3aa519bd15 on vtintillier:crockford-add-disallowNewlineBeforeBlockStatements into d703ae07ced636f6f4ba48407242a494f28df73e on jscs-dev:master.\n. \nCoverage remained the same when pulling 829be24b8d9b00968b7897f50418a387b94ed2f0 on vtintillier:crockford-no-check-for-yoda-conditions into d703ae07ced636f6f4ba48407242a494f28df73e on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 9eb80a43350b73405af47dd26a4cb20d5636bd3f on mrjoelkemp:fix_218_predefined_values into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 682760ff05ad6e2c6df9668d1ebe65ae20cdf98e on mrjoelkemp:fix_218_predefined_values into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 94edb4440ac96800676be432c31b2d8ded15dcef on mrjoelkemp:fix_218_predefined_values into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling a898e4e6c6229d1922c6a83f70e7d73cd7c564fb on mrjoelkemp:fix_218_predefined_values into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 2006c9864408cd56d3c71f0426721914d7becd1a on mrjoelkemp:fix_218_predefined_values into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.15%) when pulling 5068939538fc76cdcac925aebbb41acdc268cfb6 on avaly:feature/require-newline-inside-object-brackets into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage increased (+0.15%) when pulling 64d812ac9fd8edcc9bc6e349d9135687003ba7aa on avaly:feature/require-newline-inside-object-brackets into d7358999244bb4e347a46e916c6017ed8c4abb4c on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling bb57558d8759409b69560633c6306e05c4529e55 on doug:patch-1 into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling c64c039d8a466bf33ca77c42fe13fae22a1a55c1 on doug:patch-1 into 7bd0438489e8e1078a49d886082c0827ab92faa1 on jscs-dev:master.\n. \nCoverage remained the same when pulling 332a7e7ef1bb951b31b0eeec6d2d22411f29595d on mrjoelkemp:enhance_620 into 9f2ec59bd79728a79c07c05b32ce099edfe8b7ee on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling ca27224653c6f810e7f7107511d7d2711e6d5c77 on vtintillier:require-space-after-object-keys-colons into 9f2ec59bd79728a79c07c05b32ce099edfe8b7ee on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling 1e541a1ef72262cfc002895c528a739d9810903f on vtintillier:require-space-after-object-keys-colons into 9f2ec59bd79728a79c07c05b32ce099edfe8b7ee on jscs-dev:master.\n. \nCoverage remained the same when pulling d9c9bbe08211b75c3d65eab790f1ed84646d26cd on svetlyak40wt:patch-1 into 332a7e7ef1bb951b31b0eeec6d2d22411f29595d on jscs-dev:master.\n. \nCoverage remained the same when pulling 6243e9b8019cced04d5307fc3d4b0adc302cb964 on mrjoelkemp:fix_629 into 332a7e7ef1bb951b31b0eeec6d2d22411f29595d on jscs-dev:master.\n. \nCoverage remained the same when pulling d44abca08733c44a7db8756fe2737c6465cee9a4 on mrjoelkemp:fix_629 into 921ed5e55fdad886160e7e01ce54df43f1a3b330 on jscs-dev:master.\n. \nCoverage remained the same when pulling f954fd9a0cbded11e8ca4d164102bb5240f80386 on mrjoelkemp:fix_629 into 921ed5e55fdad886160e7e01ce54df43f1a3b330 on jscs-dev:master.\n. \nCoverage remained the same when pulling 06232c51dca17a4e4b5cd5a7ff41aae1ee306788 on idok:patch-1 into 332a7e7ef1bb951b31b0eeec6d2d22411f29595d on jscs-dev:master.\n. \nCoverage remained the same when pulling a59f72b26dfd3a04a5cb9212b95a5a70befc2393 on idok:patch-1 into 332a7e7ef1bb951b31b0eeec6d2d22411f29595d on jscs-dev:master.\n. \nCoverage remained the same when pulling ac9ac8afb77be9796bdf2cf4f132e760c4270adf on davidchambers:validate-parameter-separator into 921ed5e55fdad886160e7e01ce54df43f1a3b330 on jscs-dev:master.\n. \nCoverage remained the same when pulling 08460ed213d394e1d5f8b8f79561d5374f65963e on necolas:fix-shebang-disallowmultiline into 15dee233ee8f8bfcfca39b4054606f1ebcfa0273 on jscs-dev:master.\n. \nCoverage remained the same when pulling d9616896a7739129a37841d8f96fba0170f12ab3 on mrjoelkemp:fix_46 into b615bd79a809ba72b4dfcb00bebd039380c5e011 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 1d8830ea7b6f50797ce94ab2f4331b3de2175fc9 on mrjoelkemp:fix_46 into b0024a2bd852610996b51283e8f8bcc90ecf3cd5 on jscs-dev:master.\n. \nCoverage decreased (-0.12%) when pulling 5b5dbd85bed68f520cff4788b8416570039529a6 on mrjoelkemp:fix_59 into b615bd79a809ba72b4dfcb00bebd039380c5e011 on jscs-dev:master.\n. \nCoverage decreased (-0.12%) when pulling d4acdc3b3bf355812776a93a9d26fc5f4864801f on mrjoelkemp:fix_59 into b615bd79a809ba72b4dfcb00bebd039380c5e011 on jscs-dev:master.\n. \nCoverage remained the same when pulling 391f480173fd7f45b4eb276954e9b254561eb829 on mrjoelkemp:fix_59 into b615bd79a809ba72b4dfcb00bebd039380c5e011 on jscs-dev:master.\n. \nCoverage remained the same when pulling 391f480173fd7f45b4eb276954e9b254561eb829 on mrjoelkemp:fix_59 into b615bd79a809ba72b4dfcb00bebd039380c5e011 on jscs-dev:master.\n. \nCoverage remained the same when pulling 790fb152dace92bce1be1dbcda91d22e1c4ace31 on mrjoelkemp:fix_640 into b615bd79a809ba72b4dfcb00bebd039380c5e011 on jscs-dev:master.\n. \nCoverage remained the same when pulling d967d720100d87af2ac06d6dbb50ba02c8c9428f on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling 7caef227688c0e9a75bbc6f39f42ab1136df1d12 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling 332bde67e1f7283d33a6dfb49f99d0418b3b3350 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling a037ca332adb4369b98a8c79a5e98a4e56cec8b7 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling 3d21493807c21ce9fb881f990eeccfa5586a9a21 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling c2d9a0236c98e603e2aea007851075937fb14a98 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling 8263b4581b77767080db57914ec8a54da18d1d46 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage remained the same when pulling 8263b4581b77767080db57914ec8a54da18d1d46 on mrjoelkemp:contributing into 0b43820ca825177df60deb50abada8bdc38d44eb on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 8f3835511fc77955a82509d2b4b5ef9a8c55dccb on pomeh:fix-findXxxxToken-by-value into b0024a2bd852610996b51283e8f8bcc90ecf3cd5 on jscs-dev:master.\n. \nCoverage increased (+0.11%) when pulling 1db3f3dfd8c57bd401717c601b04e3095cb669f4 on pomeh:fix-findXxxxToken-by-value into b0024a2bd852610996b51283e8f8bcc90ecf3cd5 on jscs-dev:master.\n. \nCoverage remained the same when pulling 0f8b048fff3367ac152b40671c0c260b656beb39 on mrjoelkemp:tighten_jscsrc into 1d8830ea7b6f50797ce94ab2f4331b3de2175fc9 on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling e6eea1b95f7da4c783042db68957870a5cf01f88 on Skywalker13:spaces-call-expressions into d7358999244bb4e347a46e916c6017ed8c4abb4c on jscs-dev:master.\n. \nCoverage increased (+0.12%) when pulling 3e6c14faeddf5b128f30046373b50953accfdb0e on Skywalker13:spaces-call-expressions into d7358999244bb4e347a46e916c6017ed8c4abb4c on jscs-dev:master.\n. \nCoverage increased (+0.11%) when pulling b2ae64a519b6c470758f5f0981fc9c3776a769a3 on Skywalker13:spaces-call-expressions into 467a170f26678bb895ca734e8feb6c8c30981c80 on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 910d7fe4490de3121af67e0f0643288cc10dd96a on mrjoelkemp:comment_casing into d7358999244bb4e347a46e916c6017ed8c4abb4c on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 4726230b7a39e403f93669537d223ee3bc9a4410 on mrjoelkemp:comment_casing into d7358999244bb4e347a46e916c6017ed8c4abb4c on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 34eb2120072c75a9533d9ad605b4e6075598387b on mrjoelkemp:comment_casing into d7358999244bb4e347a46e916c6017ed8c4abb4c on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling 7c5ecc72be4293bea44761a2a1a0c3c55b5b9d52 on mrjoelkemp:comment_casing into 467a170f26678bb895ca734e8feb6c8c30981c80 on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 37cf0e8b70bd3ff2ae294292bfabf82ad5f2ab4c on mrjoelkemp:comment_casing into e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on jscs-dev:master.\n. \nCoverage increased (+0.52%) when pulling 13d35db220c6c4284367f90d75b38a94ba8363ed on mdevils.camel-case into 467a170f26678bb895ca734e8feb6c8c30981c80 on master.\n. \nCoverage increased (+0.01%) when pulling 74ebb6ba3b566554a7c3050440f5fa8a634cfb10 on jbesta:652_require_spaces_before_object_keys into e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling c5f433d3168eff0800489694b9e500fe3562633c on jbesta:652_require_spaces_before_object_keys into e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 235b29b7d7a95b973336e2246a5d07258ec7b960 on jbesta:652_require_spaces_before_object_keys into 37cf0e8b70bd3ff2ae294292bfabf82ad5f2ab4c on jscs-dev:master.\n. \nCoverage remained the same when pulling 39dba881fc334ae71f1f5f5db5e0cafa17fa553d on mrjoelkemp:fix_keywords into e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on jscs-dev:master.\n. \nCoverage remained the same when pulling bbe37d3f927f6ff252b946cc845cea186f04b914 on mrjoelkemp:fix_keywords into e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on jscs-dev:master.\n. \nCoverage remained the same when pulling ae7d845a2a299a19a665da7031803dd22df95380 on mrjoelkemp:fix_keywords into ecda8f66f091bc0e1842d490142c9d55e32a4dc5 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling f977d94cee40b9daa9adb2f5dcc0169dae43b0e5 on mrjoelkemp:add_with into e745ceb23c5f1587c3e43c0a9cfb05f5ad86b5ac on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling 55af33448cab3f891016491d79b35f1e1e4844f7 on mrjoelkemp:maxerr into 8b10a393f69ae884c7c666f693440deab5f30d35 on jscs-dev:master.\n. \nCoverage increased (+0.09%) when pulling de54830d431c12e81e90e0171b6ae970a7c4d18d on mrjoelkemp:maxerr into 8b10a393f69ae884c7c666f693440deab5f30d35 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) when pulling 900dc7ce1b31f7d96c0501856ab2e59177a957a1 on mrjoelkemp:maxerr into ae7d845a2a299a19a665da7031803dd22df95380 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) when pulling ef1407320a90dd98a4a822688711157a1551422c on mrjoelkemp:maxerr into ae7d845a2a299a19a665da7031803dd22df95380 on jscs-dev:master.\n. \nCoverage decreased (-0.2%) when pulling 098de855b30fed7449c52afb1fd17f41124f02bb on mrjoelkemp:maxerr into ae7d845a2a299a19a665da7031803dd22df95380 on jscs-dev:master.\n. \nCoverage decreased (-0.17%) when pulling 1b2b7a4ce03bd7d8b6698ce5cacc179deac2549c on mrjoelkemp:maxerr into ae7d845a2a299a19a665da7031803dd22df95380 on jscs-dev:master.\n. \nCoverage decreased (-0.17%) when pulling 238f38b149ece490020b4467029ebd26751caa18 on mrjoelkemp:maxerr into ae7d845a2a299a19a665da7031803dd22df95380 on jscs-dev:master.\n. \nCoverage decreased (-0.17%) when pulling 238f38b149ece490020b4467029ebd26751caa18 on mrjoelkemp:maxerr into ae7d845a2a299a19a665da7031803dd22df95380 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling b7e77dc661854601947270ae4658215f4eb0c8e7 on mrjoelkemp:maxerr into a16a694efc8b87108116d22a3caebc4d7b163644 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling 25cf02ce483cd3ea6048de7364abd4519ae23d90 on mrjoelkemp:maxerr into a16a694efc8b87108116d22a3caebc4d7b163644 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling 25cf02ce483cd3ea6048de7364abd4519ae23d90 on mrjoelkemp:maxerr into a16a694efc8b87108116d22a3caebc4d7b163644 on jscs-dev:master.\n. \nCoverage decreased (-3.32%) when pulling f0a525a208d96e55bc8fa37a6c855fa7b5fb9850 on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage decreased (-1.97%) when pulling 0a0989673a3aaf6bee34f411c95a10ddfe2bd3d8 on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage decreased (-0.48%) when pulling 0d6d62fb4dd953a573f5fdbc54dc0c56ebc35d12 on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage decreased (-0.27%) when pulling 2e9fafa31e389ed22794b947bc138428a6bfa811 on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage increased (+0.09%) when pulling 7891e18fba0a7b77ea89dd9a973286f05e3db8aa on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage increased (+0.14%) when pulling ea29ea5675080b076e94d9f6ff21e08cae18c351 on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage decreased (-5.4%) to 86.943% when pulling 5e8e4c8355d4d933c38e277eaf156c66c68e1b19 on mdevils.plugins into c70fec7216d5ec5f08c0451d428c6e8b04f778be on mdevils.camel-case.\n. \nCoverage increased (+0.02%) when pulling bbff037635ba886324774020669e3d83e6960e80 on mdevils.maxerr into bd62246b0ceb89f928c042fcd5c76ab4b3b517d9 on master.\n. \nCoverage increased (+0.02%) when pulling 44d0deba2aba221e08ba460b15fb9f456ba621c8 on mdevils.maxerr into bd62246b0ceb89f928c042fcd5c76ab4b3b517d9 on master.\n. \nCoverage increased (+0.06%) when pulling 8eee218929f5ebf5b011be45658e6b84afd5a189 on mdevils.maxerr into bd62246b0ceb89f928c042fcd5c76ab4b3b517d9 on master.\n. \nCoverage increased (+0.02%) when pulling d00b31c1994e56ceb41e0b7759d1084c2d1610b6 on mdevils.maxerr into d0150e09556422ea71b8e29fab8389d066da2e3d on master.\n. \nCoverage increased (+0.01%) when pulling 648981329b256a03b8300f89bdeabf073093925e on markelog:requireSpacesAroundFunctionArguments into d42dbab2f6b4bc6416fa604bb7500b5887f1fcfd on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling f7492c4571ac62a5ec26363e65634910cebbe0f3 on mikesherov:custom-esprima-version into d42dbab2f6b4bc6416fa604bb7500b5887f1fcfd on jscs-dev:master.\n. \nCoverage remained the same when pulling 6cde94e80f591ea8d0aadb4948c0e41816a53589 on yangsu:master into c80f5f2ffa22165fc8d6264f3e1ac4f51e450f3e on jscs-dev:master.\n. \nCoverage remained the same when pulling 861bd079971544e60dab04f57019c363048568be on gustavohenke:maxErrors-NaN into c80f5f2ffa22165fc8d6264f3e1ac4f51e450f3e on jscs-dev:master.\n. \nCoverage remained the same when pulling 8df522ebbbada8d7ed8e928b8ae71335bbb9a274 on mrjoelkemp:esnext_config into 1f4f8adabd0b21afbdb2fc0333575acfb6a2c666 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 987b10b446bccd19000db1b231e1875672239643 on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 987b10b446bccd19000db1b231e1875672239643 on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 987b10b446bccd19000db1b231e1875672239643 on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 782c991d150e5d7d5dd58383f876d6a81aafdc8d on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 2390da1f7bfef455e61a6d7ab771c6df0165703a on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.16%) when pulling 33f7a176b1f68a8e35acb0751e7f5cc557a8ab1e on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.17%) when pulling a13ea437a823b4352621870f42c662489325b0fa on zxqfox:feature/allow-strings-after-line-comment into 1f5d9f2b178f2772d2a9c876f8458f911a32e9be on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 5f7aaf378908976eeb65b1aaa1bd5baabb05588b on zxqfox:feature/allow-strings-after-line-comment into 9af1e27c4e44c2e7708b3e21f6b0c65329d44c46 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 4431eae998239ffcd8e1fb119b2dcd521443c1e0 on zxqfox:feature/allow-strings-after-line-comment into 9af1e27c4e44c2e7708b3e21f6b0c65329d44c46 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 90a1552c6e47c52c98c7c0fc5e819276ce5d3806 on zxqfox:feature/allow-strings-after-line-comment into 9af1e27c4e44c2e7708b3e21f6b0c65329d44c46 on jscs-dev:master.\n. \nCoverage remained the same when pulling 9e00a25e70a34fd4dc864a7a2da842eefb857a29 on mdevils.unit-coverage into 13d888b48a8f86428ff9c755ee7934a3b3333086 on master.\n. \nCoverage remained the same when pulling e35a63c7ef3afc4d13fcacbae0809fd610726456 on kellyselden:comment-typo into 9af1e27c4e44c2e7708b3e21f6b0c65329d44c46 on jscs-dev:master.\n. \nCoverage increased (+0.85%) when pulling 30efc2f189261483cebb10d4a3da0494d502e5da on eltacodeldiablo:fix-multiple-spaces-in-validate-parameter-seperator into d1a246bfb45cde2ede95d00becb075124e720bc6 on jscs-dev:master.\n. \nCoverage increased (+0.85%) when pulling 0194b1b47c628d97840d0852db0986aab1f79a8f on eltacodeldiablo:fix-multiple-spaces-in-validate-parameter-seperator into d1a246bfb45cde2ede95d00becb075124e720bc6 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 88d6497539e363fa71ec58164c43a34eeebef07a on mrjoelkemp:unsupported into d1a246bfb45cde2ede95d00becb075124e720bc6 on jscs-dev:master.\n. \nCoverage decreased (-0.08%) when pulling 3354eac74ee2ecb1b56fcc6cbc05e313f263b1fc on mrjoelkemp:unsupported into f68fb069106c6b478dde95ecf05ada03ed291bd7 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 2c884dfd0377c86114f8597c3194c5fa4e5bad52 on mrjoelkemp:unsupported into f68fb069106c6b478dde95ecf05ada03ed291bd7 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 25a06a45e22c077161cd4b08a2a2ac880f7a7c44 on mrjoelkemp:unsupported into 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling da794b58e1cfd99c91479bebf209566fbe79b428 on koistya:esprima into d1a246bfb45cde2ede95d00becb075124e720bc6 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling 4e3161b7b1c7d8f1693b23e83069e5c0e7dcd843 on koistya:esprima into 796527561f01a9ebfca1481cf9c08aa68752ec23 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling 46d0cc3c3d9bfedef1ff278999c24276620340da on koistya:esprima into 796527561f01a9ebfca1481cf9c08aa68752ec23 on jscs-dev:master.\n. \nCoverage decreased (-0.07%) when pulling 9b8cf69a0237139587b4c9c7c2d90d3fdc86e46b on koistya:esprima into 796527561f01a9ebfca1481cf9c08aa68752ec23 on jscs-dev:master.\n. \nCoverage decreased (-0.07%) when pulling 4ae0a5a324e964df3d2e5233146fd20c445e9a2e on koistya:esprima into 796527561f01a9ebfca1481cf9c08aa68752ec23 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling 1b160af82baa80f699244ddc028cf89105f666e5 on koistya:esprima into 796527561f01a9ebfca1481cf9c08aa68752ec23 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling bb18f214a549eeef79596578e0cdeb43605ccdf3 on koistya:esprima into 041d1ee4eefb87e777fbcc999310e97801614794 on jscs-dev:master.\n. \nCoverage decreased (-0.1%) when pulling b5309ccd3a91c9e8cea8b5ff6f9e6be3a78d58cf on koistya:esprima into 041d1ee4eefb87e777fbcc999310e97801614794 on jscs-dev:master.\n. \nCoverage remained the same when pulling 7ab402f73f8ce48b13a2ade1f1dd5b5fc39f491b on jfly:master into d1a246bfb45cde2ede95d00becb075124e720bc6 on jscs-dev:master.\n. \nCoverage remained the same when pulling 11d2420d3ae1d4941ce9ab885852404b698c1276 on yelworc:allow-super_ into 041d1ee4eefb87e777fbcc999310e97801614794 on jscs-dev:master.\n. \nCoverage remained the same when pulling 61eb74da612bd127ef9791f815a8b08528cd90f1 on yelworc:allow-super_ into 041d1ee4eefb87e777fbcc999310e97801614794 on jscs-dev:master.\n. \nCoverage remained the same when pulling dc4e8227264f0c11cd878b9af750e53456233d0f on hzoo:add-to-docs into d2206fd5947343c55e0bd2e84ed92076e6a9d3e0 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 57823a1ea053d9d8ecf4cfad90e9adf9ed0ae059 on hzoo:deprecreate-dangling-underscore-exceptions into d2206fd5947343c55e0bd2e84ed92076e6a9d3e0 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 1000eb2175dcea2e66cf2e81570927367a859682 on hzoo:deprecreate-dangling-underscore-exceptions into d2206fd5947343c55e0bd2e84ed92076e6a9d3e0 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) when pulling 519244989be1af2ee61a83f907df34c4c8b680ef on mrjoelkemp:error_filter into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) when pulling 55add2985d6ada515141a0e83ee9b5f3d7d0c44d on mrjoelkemp:error_filter into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) when pulling aa766f8214837dc224f865294c042a38926b0cbe on mrjoelkemp:error_filter into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage decreased (-0.38%) when pulling 3bb0b72339e1c1a4dde121a36a6e2771732cd993 on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage decreased (-0.38%) when pulling 3bb0b72339e1c1a4dde121a36a6e2771732cd993 on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 481718786ffac9933c0434b403c59b844ce82eec on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 481718786ffac9933c0434b403c59b844ce82eec on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 2908a9140973dc7d95eb9e6a01ef0d583efcc0e1 on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 2908a9140973dc7d95eb9e6a01ef0d583efcc0e1 on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 9dc81a216c9cbdb26c4662995f175b6a8bd555ed on mrjoelkemp:error_filter into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling e3f98e0c7bb1882859537e7f618093bae2ff890b on mrjoelkemp:error_filter into d270ac2ab4a11a78f795b9ed365e19f374e17921 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling cfb3229b78087cb0fbe461cfa6938a9fe346e316 on mrjoelkemp:error_filter into d270ac2ab4a11a78f795b9ed365e19f374e17921 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 11260f53a5d9e4c5de497d1f7eb98a6b0efbbae6 on mrjoelkemp:error_filter into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 7d6dc3d2bb31d1cb3606282c071ba77bd5977178 on mrjoelkemp:error_filter into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling 7556fdc724b7a7d06ef129a3740f76390d79e501 on mrjoelkemp:error_filter into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling 3957b9d9f86d68ee7e2fe18da3c8d7124028d671 on mrjoelkemp:error_filter into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling 34172b4192a17b7910153a54840cd2d14302c05d on mrjoelkemp:error_filter into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 2ca671be3d3de645417d4c565bda2e7251950f2f on mrjoelkemp:error_filter into b54645c67e1cdecf96a77a29a0db4c721aa197ae on jscs-dev:master.\n. \nCoverage increased (+0.57%) when pulling bbe3ed39f9c8a98a0368167228ed58dd3359854f on mdevils.plugins into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on master.\n. \nCoverage increased (+0.58%) when pulling 004a7979a27b7f1eb7ebee88bc5a7b8579ae1469 on mdevils.plugins into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on master.\n. \nCoverage increased (+0.02%) when pulling ae4ce8f1a65678134abdfd0591da6f8bd2c2bd39 on christophercliff:disallow-semicolons into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 96cfeff6db411b816db25f36e3a90153670d2175 on christophercliff:disallow-semicolons into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 96bddf2ea78d5f9d946165ac3a7935793cbdabb5 on christophercliff:disallow-semicolons into 99e330bfb7b0d06d669f6ac06e41a1a994c65b26 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 29856da91aced002a884464101da48c099120f46 on hzoo:add-ignore-single-line into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 6fc0a26bf9ec7d8e8e160160cfe5521527f39b51 on hzoo:add-ignore-single-line into 101eccb7f11ab6ef483d00ef4376ca1922f59ba7 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling ee4dfd67f79b29dbc8c8e41ed64b81867be31ff3 on zxqfox:hotfix/prevent-crashes-in-error-reporters into cda4d10f83b1999dc59e2dfc069da644cff48264 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling daded70d0aa2303a0f5f3dede249e8e69e397cd3 on zxqfox:hotfix/prevent-crashes-in-error-reporters into cda4d10f83b1999dc59e2dfc069da644cff48264 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 1fe887030842323e4933100e7016a4198b29d270 on zxqfox:hotfix/prevent-crashes-in-error-reporters into f68fb069106c6b478dde95ecf05ada03ed291bd7 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 4f1a14b8aff418d43c3687015910f5b3d2aa049b on zxqfox:hotfix/prevent-crashes-in-error-reporters into f68fb069106c6b478dde95ecf05ada03ed291bd7 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on zxqfox:hotfix/prevent-crashes-in-error-reporters into f68fb069106c6b478dde95ecf05ada03ed291bd7 on jscs-dev:master.\n. \nCoverage remained the same when pulling 8ca65a2098e01e71361e3d36ae6a406c2bb0ccdf on vtambourine:sample-payload into cda4d10f83b1999dc59e2dfc069da644cff48264 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 555e869d464a2dac5bcfa02a5bd39ba310491d0c on hzoo:add-except-undefined into 4b6eca045673ecafdaf8afe8df8264395038928f on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 08eb39f7e481d2d5027446c524c32f5f05bb493e on hzoo:add-except-undefined into 52dcc50965d0bc4649f77771687f3db6216f0c93 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling e272664af8037860f815f8d00807f2c002db3116 on hzoo:add-except-undefined into 199c2fffc1ddf471ecec6499aa55184d9b11a8f9 on jscs-dev:master.\n. \nChanges Unknown when pulling f68fb069106c6b478dde95ecf05ada03ed291bd7 on mrjoelkemp:fix_travis into * on jscs-dev:master*.\n. \nCoverage decreased (-0.16%) when pulling 3c302e65baa2742e119372c24fb5e0ddf9079bec on mdevils.assertions into f68fb069106c6b478dde95ecf05ada03ed291bd7 on master.\n. \nCoverage decreased (-0.16%) when pulling e7a45b21c29374d2ca66623e8c9c6063e16ac90c on mdevils.assertions into 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on master.\n. \nCoverage decreased (-0.19%) when pulling 67d433961c4be559055c47e74e8752748e9aa739 on mdevils.assertions into 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on master.\n. \nCoverage decreased (-0.19%) when pulling c88967253c88edb2e5a5c752c60c94685d96904d on mdevils.assertions into d270ac2ab4a11a78f795b9ed365e19f374e17921 on master.\n. \nCoverage decreased (-0.34%) when pulling e4913b754c8535cfb0afaab614e3243dc4b43660 on mdevils.assertions into d270ac2ab4a11a78f795b9ed365e19f374e17921 on master.\n. \nCoverage decreased (-0.45%) when pulling 61b039a56ad15922d678272bd02366563b00b65c on mdevils.assertions into d270ac2ab4a11a78f795b9ed365e19f374e17921 on master.\n. \nCoverage decreased (-1.29%) when pulling b56fe39502cb6037debb12de0c6a9465f5780a33 on mdevils.assertions into 99373a2f9071e2077b841d6e8c08b778c3901b6d on master.\n. \nCoverage decreased (-0.83%) when pulling dd516797c4a80047f934a3dca2b21fecf5ad7d1e on mdevils.assertions into 2ca671be3d3de645417d4c565bda2e7251950f2f on master.\n. \nCoverage decreased (-0.12%) when pulling a3c5596af66b40e1a3efe4955b9023991439f136 on mdevils.assertions into d931b4f3fb9f8217af025aaaea268fd6537b62cc on master.\n. \nCoverage decreased (-0.11%) when pulling 1d650820ae9c52d5c3b02ad5df5cdff9df72bb14 on mdevils.assertions into d931b4f3fb9f8217af025aaaea268fd6537b62cc on master.\n. \nCoverage decreased (-0.04%) when pulling 886c4b479275834d1aff7609eec8e75cd1c1a6ad on mdevils.assertions into c536c848c8e9aabe4cac8a920e6e5d4726ee42fc on master.\n. \nCoverage increased (+0.04%) when pulling a806d7dfbb2f91550c609d289a0f1a706b89b9b7 on mdevils.assertions into c536c848c8e9aabe4cac8a920e6e5d4726ee42fc on master.\n. \nCoverage increased (+0.08%) when pulling 7dbe54d07c5a6c25dfc66744135b80eecee02ab4 on mdevils.assertions into c536c848c8e9aabe4cac8a920e6e5d4726ee42fc on master.\n. \nCoverage increased (+0.08%) when pulling b2e6b05b58d77dc2ea454e6d0b1aa6b81330417f on mdevils.assertions into cda73198a72bc16d9d3dd6a5b4b7f053db92dd9f on master.\n. \nCoverage remained the same when pulling 81f802d8c93e171601b94e10d594b776d981c697 on mdevils.unit-coverage into 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on master.\n. \nCoverage increased (+0.04%) when pulling 82af6d9372cd9ca7a4bcaace0cf8987f70ffd824 on jdlrobson:disallowOperatorBeforeLineBreak into 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling 32c6c4d914aaee2f1676518ff0c541f2472ce138 on jdlrobson:disallowOperatorBeforeLineBreak into 1ac6e348f74c7a215873a81fb54e62d7a8f33fdd on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling 14e896eea5dde6f9e16138fec321630e56d3bcb2 on jdlrobson:disallowOperatorBeforeLineBreak into 199c2fffc1ddf471ecec6499aa55184d9b11a8f9 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 249d93866e6efe72d75c58232638fb9c97277772 on mrjoelkemp:grunt_preset into 199c2fffc1ddf471ecec6499aa55184d9b11a8f9 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling b500264f268fe4c83d0dae9ed6c24d81b57483cd on mrjoelkemp:grunt_preset into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 5bc4b76cb4a02e5a19ff598a5df1b18f9627a39a on mrjoelkemp:grunt_preset into 2ca671be3d3de645417d4c565bda2e7251950f2f on jscs-dev:master.\n. \nCoverage remained the same when pulling 65b11ba98efc09221a065ab21b9abdd6d58cfd4e on zxqfox:feature/plugin-api-link-in-readme into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage remained the same when pulling 4c7587c2b168e5b1b526f92ba9cdcbebaf153b5c on zxqfox:feature/plugin-api-link-in-readme into 573ef5a3e227a61a20a41a12d1bba95d022a7cff on jscs-dev:master.\n. \nCoverage remained the same when pulling 02cba95baef187c2795260d5cb0469d0a4f24954 on indexzero:doc-gh-762 into 99373a2f9071e2077b841d6e8c08b778c3901b6d on jscs-dev:master.\n. \nCoverage decreased (-93.2%) when pulling d9d7e1d23bda6f45cd4c8e8e59740600fce146d5 on indexzero:gh-767 into 32da4037735d7d72abe5dacdae224f13a72a2380 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 9703f96244568b588e38c446f6df149d748f208a on indexzero:gh-767 into 32da4037735d7d72abe5dacdae224f13a72a2380 on jscs-dev:master.\n. \nCoverage increased (+0.07%) when pulling 82d57441d4a0c7f135dc0ccb8e919ebcebe52bec on jamesallardice:argument-space-rule into 32da4037735d7d72abe5dacdae224f13a72a2380 on jscs-dev:master.\n. \nCoverage increased (+0.07%) when pulling d001e967f8ece33fcfa30d51fb3884bfbcb7053c on jamesallardice:argument-space-rule into 32da4037735d7d72abe5dacdae224f13a72a2380 on jscs-dev:master.\n. \nCoverage increased (+1.0%) when pulling 329f06e799b3595cfd21edcce536d596ebdec0cf on jamesallardice:argument-space-rule into d931b4f3fb9f8217af025aaaea268fd6537b62cc on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling becaff752f353ea80daf28f14d7e192492559aa1 on mrjoelkemp:fix_error_filter into 2ca671be3d3de645417d4c565bda2e7251950f2f on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling becaff752f353ea80daf28f14d7e192492559aa1 on mrjoelkemp:fix_error_filter into 2ca671be3d3de645417d4c565bda2e7251950f2f on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling b7b4b8cce81880577575f29edd7bb6bacba5f245 on mrjoelkemp:fix_error_filter into cea14d6d94be19123113164da95ab4b1ea0f5614 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling c536c848c8e9aabe4cac8a920e6e5d4726ee42fc on mrjoelkemp:fix_error_filter into cea14d6d94be19123113164da95ab4b1ea0f5614 on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling d25397d5281a1c72f910ee43653828025120b2cd on jdlrobson:upstream/require-line-break-after-variable-assignment into d931b4f3fb9f8217af025aaaea268fd6537b62cc on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 44e28853555d95e78fc30c2b542b43f06afeac90 on jdlrobson:upstream/require-line-break-after-variable-assignment into cea14d6d94be19123113164da95ab4b1ea0f5614 on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 3d79c03c1e72d173fc9180a9d8092dc4177cdf23 on jdlrobson:upstream/require-line-break-after-variable-assignment into b5c6dad7daf393eb68727e0617c9141efe35189b on jscs-dev:master.\n. \nCoverage increased (+0.05%) when pulling e9ec303181c03d4f7b1b410be883c983309ba53b on jdlrobson:upstream/require-line-break-after-variable-assignment into 99e330bfb7b0d06d669f6ac06e41a1a994c65b26 on jscs-dev:master.\n. \nCoverage remained the same when pulling b6eb00017ce10c80726892c9c535c4ff00a07a42 on mrjoelkemp:remove_validate_jsdoc into cea14d6d94be19123113164da95ab4b1ea0f5614 on jscs-dev:master.\n. \nCoverage remained the same when pulling 1fcfdffd9002d5e70638fa6c01713c9913e63c7a on twolfson:dev/add.finally.spaced.keyword.sqwished into cea14d6d94be19123113164da95ab4b1ea0f5614 on jscs-dev:master.\n. \nCoverage remained the same when pulling d3f73b821d49b759169cbf75354a277c487a5941 on twolfson:bug/test.false.positive.sqwished into cea14d6d94be19123113164da95ab4b1ea0f5614 on jscs-dev:master.\n. \nCoverage remained the same when pulling eacf4bb1bf6146eb230be3c9febd72ba8fe04d76 on snater:master into c536c848c8e9aabe4cac8a920e6e5d4726ee42fc on jscs-dev:master.\n. \nCoverage remained the same when pulling 2981dad034e23ac5d516190ccf4f8ac5809befd3 on mdevils.better-tests into 99e330bfb7b0d06d669f6ac06e41a1a994c65b26 on master.\n. \nCoverage increased (+0.73%) when pulling 0dd7e1f14e200e32a466f5157bd899ab792606b9 on mdevils.better-tests into 99e330bfb7b0d06d669f6ac06e41a1a994c65b26 on master.\n. \nCoverage increased (+1.38%) when pulling 6e1e3b9e536b1521148adaf72f3775e88f5b311b on mdevils.better-tests into 9c43db5e4b803a29f5f551e1e7a006a8046ff06e on master.\n. \nCoverage increased (+0.01%) when pulling 1b51a2e89862a4a5ea7b25958a90bbd1009a915b on hzoo:fix-validate-param-newlines into 9c43db5e4b803a29f5f551e1e7a006a8046ff06e on jscs-dev:master.\n. \nCoverage remained the same when pulling f3d7a50b68646ae5cd939e3499e586cf3ea13c9d on hzoo:fix-validate-param-newlines into 9c43db5e4b803a29f5f551e1e7a006a8046ff06e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling 96319d179ff403a5a87ed37647628521b7e6d487 on zxqfox:feature/new-rule-require-new-lines-in-array into 3e6800c4efe88aef2747b4538c13b21a05bf076e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling 2947e950fc4a7e3b09e471db4d4f6f4f496897e1 on zxqfox:feature/new-rule-require-new-lines-in-array into 3e6800c4efe88aef2747b4538c13b21a05bf076e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling 198fbdb9cba0b434dc796c5275e0d0f7d34dcd9a on zxqfox:feature/new-rule-require-new-lines-in-array into 3e6800c4efe88aef2747b4538c13b21a05bf076e on jscs-dev:master.\n. \nCoverage decreased (-0.05%) when pulling 484af417f0cf53f64699df13404815c7799ef184 on zxqfox:feature/new-rule-require-new-lines-in-array into 3e6800c4efe88aef2747b4538c13b21a05bf076e on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling a740904ca5576da495d7e774f934a5b85991b20f on zxqfox:feature/new-rule-require-new-lines-in-array into 31bbb584b9ed3e5d02e7b07783b1d0416a95eac7 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 13e15c4039703a542abddf420a894b97fab1b03d on zxqfox:feature/new-rule-require-new-lines-in-array into 31bbb584b9ed3e5d02e7b07783b1d0416a95eac7 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 87a0f5683c44280c85f1ee48b8542aa89e8f61a6 on zxqfox:feature/new-rule-require-new-lines-in-array into 31bbb584b9ed3e5d02e7b07783b1d0416a95eac7 on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling a65e80c974ba98f24c210ca5663f118b93c70403 on zxqfox:feature/new-rule-require-new-lines-in-array into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage remained the same when pulling 372feeedb711da96406cebd9336b585bfc780ed7 on callumacrae:patch-1 into 3e6800c4efe88aef2747b4538c13b21a05bf076e on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling c5f3d9fa3cbf39dbdc7de3ea1b3fe77583f404dd on mdevils.tree-iterator-tests into 31bbb584b9ed3e5d02e7b07783b1d0416a95eac7 on master.\n. \nCoverage increased (+0.1%) when pulling 6d6402cab459fb01cf028b4acf0922abd27279dd on mdevils.tree-iterator-tests into 31bbb584b9ed3e5d02e7b07783b1d0416a95eac7 on master.\n. \nCoverage increased (+0.02%) when pulling 32f2e24930c51839e8ce282396ba33d813f141e4 on mdevils.tree-iterator-tests into 25411029d1544d9ef7731c611cfdf3771d0cb69d on master.\n. \nCoverage increased (+0.02%) when pulling 31c66a3f0a20029cd537b702dca7d207cd0d0fd7 on mdevils.tree-iterator-tests into 25411029d1544d9ef7731c611cfdf3771d0cb69d on master.\n. \nCoverage remained the same when pulling 6021640b70c62ed2f2850592db4cda5740ef466f on jdlrobson:802 into 25411029d1544d9ef7731c611cfdf3771d0cb69d on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling b580e74216e8630211961e8f3082dd6c455fcf82 on jdlrobson:upstream/require-padding-newlines-before-keyword into 25411029d1544d9ef7731c611cfdf3771d0cb69d on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 3bd3e3f3ae821b951cfc2cf0633d765ed85ebbad on jdlrobson:upstream/require-padding-newlines-before-keyword into bcac4369501e3096a927933a408cd0da8112a07a on jscs-dev:master.\n. \nCoverage remained the same when pulling c461073b66a18e797f2f6e9399e110b3b1d5b663 on alt-j:master into 8a73682d96ed195f72d65a54e79ea3217d2d9fc7 on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling 573e2786ff4ac6a2823a4abf4c745f0831960a86 on mdevils.estraverse into c461073b66a18e797f2f6e9399e110b3b1d5b663 on master.\n. \nCoverage remained the same when pulling 81a58164df35feca4688375d9d27084a09120ea1 on ljharb:es3_arguments_undefined into c461073b66a18e797f2f6e9399e110b3b1d5b663 on jscs-dev:master.\n. \nCoverage remained the same when pulling 244ee262b6a97c50ec9a99602705b4acd519c351 on ljharb:es3_arguments_undefined into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage remained the same when pulling 170012ce5ffc26b27731c5b3e2f98ef0434faed3 on jacksonrayhamilton:master into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage increased (+0.2%) when pulling 4ac32f61c5a2aed7339b9ded942654543e7c7e78 on jacksonrayhamilton:master into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling d9b647113b3098ad09f919c7016889cc91043170 on mikesherov:fileConfig into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage remained the same when pulling 2c065c0fbb41be0e90dd7d885a456f99bb551bdf on avlasof:fix into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage remained the same when pulling 90c30c6020122233dd4163750c5199776db88a0c on mbohal:patch-1 into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 34a0356a66275a17a196d53cf9d5a57b5070b213 on mbohal:patch-1 into 573e2786ff4ac6a2823a4abf4c745f0831960a86 on jscs-dev:master.\n. \nCoverage decreased (-0.19%) when pulling 0d486188063d7ee9589f33a4f7376ada3af7a836 on mikesherov:fileConfig2 into ae69d9d289e692f50071a5e8b2ce26de1cf7f0ec on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling cab9f35eaac221265badaa1949a7d0dc45477d1f on mikesherov:fileConfig3 into bcac4369501e3096a927933a408cd0da8112a07a on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 520bfccf0a81eae1a31392934f43668fd52ae762 on mikesherov:fileConfig3 into 5d7bf3e5c6ade701f62fb7254d7ca9cd8c1dff6e on jscs-dev:master.\n. \nCoverage remained the same when pulling 345ace9a22b4f4f87ff00299976261589a7ceb00 on BlackVegetable:goobleability into d90644a0700483a7ce571cc6e95102b6b75669c5 on jscs-dev:master.\n. \nCoverage remained the same when pulling 4d8c8effbd7672ec71ef5e3a473ef03d3a5d98d7 on yannickcr:estraverse-jsx into 65f27dd44a62d15c12663b820a119243f1c0e801 on jscs-dev:master.\n. \nCoverage remained the same when pulling 2d82c36dd9e40d1880bc38ce7749414188afaab0 on yannickcr:estraverse-jsx into 65f27dd44a62d15c12663b820a119243f1c0e801 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling de5233f4ef6d3c17cda90ec6635876f7b89300c4 on beaugunderson:fix-space-before-block into 65f27dd44a62d15c12663b820a119243f1c0e801 on jscs-dev:master.\n. \nCoverage remained the same when pulling 702ed57d09f6b862dfe419b209eff9ef8630c009 on alawatthe:patch-1 into 37329e1adddfee41d5d7e8ae38a79de9439cbac3 on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 76530173cce9e7f3abf61e2bb910e5a25468e48b on mdevils.config-path-fix into 5eb154108d440f327dc15838ee277744dcb32b4b on master.\n. \nCoverage remained the same when pulling 280770dfb08bd38fdfb2216141956fa5893aeb9e on Krinkle:wikimedia into 5eb154108d440f327dc15838ee277744dcb32b4b on jscs-dev:master.\n. \nCoverage remained the same when pulling f8c9f6ed732d95a543bb7287ff536902997295a8 on alawatthe:master into 5eb154108d440f327dc15838ee277744dcb32b4b on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling e491f51c47540c199d03dd6106cb8e95f372d3c1 on xaka:require-function-name-match into 9aae17edb06606af1396461e7746c38be436dfad on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling b636959aa1463226d5fabef67686ea1910c8f1db on xaka:require-function-name-match into 9aae17edb06606af1396461e7746c38be436dfad on jscs-dev:master.\n. \nCoverage increased (+0.04%) when pulling 79a64996de17e6a53e68cdd7c35051118a1ec196 on xaka:require-function-name-match into 9aae17edb06606af1396461e7746c38be436dfad on jscs-dev:master.\n. \nCoverage increased (+0.05%) when pulling a2e650148c0b35bca7f418e8fd972f4d399bbabc on xaka:require-function-name-match into f2496f4f6009baddd1e2d0c4c09d3bdae6679b2b on jscs-dev:master.\n. \nCoverage increased (+0.05%) when pulling 86f85fbc59a7577750c49154d3726e4ac4e299db on xaka:require-function-name-match into f2496f4f6009baddd1e2d0c4c09d3bdae6679b2b on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.74% when pulling 2b52452b799c4ebdeda5ebbd82db19aacee961b2 on xaka:require-function-name-match into 87a382da28e49804424572623a1d8a1e5a7cbccb on jscs-dev:master.\n. \nCoverage remained the same when pulling fc19e0a027dcc9a46060ff3c6cc5cbe2371b351d on mrjoelkemp:stdin_maxerror_test into 9aae17edb06606af1396461e7746c38be436dfad on jscs-dev:master.\n. \nCoverage remained the same when pulling 1d10faea872e20cd6853c5a8a48f024135b25b7a on svetlyak40wt:patch-2 into c355997ca8fca9d022e67a5e916f5eda15d81798 on jscs-dev:master.\n. \nCoverage remained the same when pulling 7ef42466979eebe76fc5a4a4c1482664af319f46 on zxqfox:patch-1 into 04132c263997d4808ab63818ecef643759cee69e on jscs-dev:master.\n. \nCoverage remained the same when pulling 205b1859bdfc8d6f97507c9c0239f69d688c5653 on zxqfox:patch-1 into 04132c263997d4808ab63818ecef643759cee69e on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 10861e29fc8a24044af21dda09e5aa6de3652a93 on jdlrobson:540-fixes into 0c3887b92e8543220f428ac87b3a49053a564da5 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling a0935b92cca5893d301a87e61a6321141b897cd5 on zxqfox:issues/762 into d0eee8bdd0e42b8d912cdf1e67ede1903057745d on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling 69aab8a5a29e73119525dffb9c25a953403c265a on zxqfox:issues/762 into d0eee8bdd0e42b8d912cdf1e67ede1903057745d on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling 4f336effaf25f3e526321af1fb7bc3fc1f06a591 on zxqfox:issues/762 into d0eee8bdd0e42b8d912cdf1e67ede1903057745d on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 673fdf46e2c876c915e94046dc476ceaf874fb2a on efolio:master into 5344ad7293533314ab3355f1eab7c3791c13e67e on jscs-dev:master.\n. \nCoverage remained the same when pulling cce1ebc7f8c3367acad17ad8d1a8321ccbf8ac96 on gero3:getNodeByRange into 5d7bf3e5c6ade701f62fb7254d7ca9cd8c1dff6e on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling 83146c960b2ff25aec353cb3700cc9a83f6f8ddc on zxqfox:feature/require-dot-notation-snake-case into caa6d39694709da05421092a6b2ac40c3a814bc8 on jscs-dev:master.\n. \nCoverage decreased (-0.07%) when pulling 89440ede7967dc5740b4cd661b1adf795317186e on zxqfox:feature/require-dot-notation-snake-case into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling e20ba2aed58bde40719dadd5f4c8b8860a8211e4 on zxqfox:feature/require-dot-notation-snake-case into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling b4179c1fc8720f7e351b549a15ea4d9cc99b5f76 on zxqfox:feature/require-dot-notation-snake-case into 93f0944dd89ccb17d93f48271f5d728303cb968a on jscs-dev:master.\n. \nCoverage remained the same when pulling 2263efee90e081fa3470bd3cf01fcdb6cd46bff1 on zxqfox:hotfix/sinon-spy-on-process-stdin-on into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage remained the same when pulling 2263efee90e081fa3470bd3cf01fcdb6cd46bff1 on zxqfox:hotfix/sinon-spy-on-process-stdin-on into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage remained the same when pulling 04e40f3cb2dc59d667ffbe94651ef92cc3dc1053 on zxqfox:hotfix/coverage-growing into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling 065f1e041ceb5f08cf10ea9d10d409184c9f5dd1 on zxqfox:hotfix/coverage-growing into 93f0944dd89ccb17d93f48271f5d728303cb968a on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling 7504edec95bf432bcddba5d7885cf88f883ebb10 on zxqfox:hotfix/coverage-growing into 06fadf9d337d713178ce8c791e68090825075a2e on jscs-dev:master.\n. \nCoverage remained the same when pulling fa99836c3c9bd27c5fb7b3673be741acd10af229 on mdevils.website into 7125f4a20a4ae22edd6ce587b284a9d7d5a697b6 on master.\n. \nCoverage remained the same when pulling ac9a1b79145e744661792047b30fa16c61f344b4 on mdevils.website into 7125f4a20a4ae22edd6ce587b284a9d7d5a697b6 on master.\n. \nCoverage remained the same when pulling 4c31d9ee8039d87aa6db346b5efe7d5679551d21 on mdevils.website into 7125f4a20a4ae22edd6ce587b284a9d7d5a697b6 on master.\n. \nCoverage remained the same when pulling e2d87c7a3b9f2cdc630a0d11fed4929550ac6aad on jdforrester:patch-1 into 97f30d493c1b497275a5c6ea21aee3a42e5cd839 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling a6eb1cd115f4019f095ec3781da2fde97ff1ccc5 on hpshelton:master into 4c31d9ee8039d87aa6db346b5efe7d5679551d21 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 6d49cb739b14973b6a2ff5fb57de437e325456dc on hpshelton:master into 4c31d9ee8039d87aa6db346b5efe7d5679551d21 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling b0be5526b10687ffe184dc8d12bd46087264b191 on hpshelton:master into 4c31d9ee8039d87aa6db346b5efe7d5679551d21 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling b0be5526b10687ffe184dc8d12bd46087264b191 on hpshelton:master into 4c31d9ee8039d87aa6db346b5efe7d5679551d21 on jscs-dev:master.\n. \nCoverage remained the same when pulling 3ec56885fc86e1f96ecdb77b54c567435a33351a on hpshelton:requireSpaceBinaryOperatorsTests2 into 4c31d9ee8039d87aa6db346b5efe7d5679551d21 on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling b0f877acb7a30d1c7b9ef31baf2a32587a7d3088 on hpshelton:assertion into 93f0944dd89ccb17d93f48271f5d728303cb968a on jscs-dev:master.\n. \nCoverage increased (+0.08%) when pulling 934678b60b626171dc89e647e999c4465d8c6afe on hzoo:disallow-curly-braces into f53e30ab92e5d2a2d0ef0c70e823344d66ccfabd on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling 4ecc235a7edf47fe90fd3daca62d1e5f7c8f58c8 on hzoo:disallow-curly-braces into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.65% when pulling c76ecced456d61893ca8d9e95080a960afdd7b8e on hzoo:disallow-curly-braces into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.65% when pulling e9b52ac57b9bbd23d6bd01220428f24673652031 on hzoo:disallow-curly-braces into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage remained the same when pulling 731a938c5c50a67fde7159e376526d53fed478fa on cvrebert:patch-1 into f53e30ab92e5d2a2d0ef0c70e823344d66ccfabd on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 34325afe515388492cf008c2981d8387d02b4994 on hpshelton:assertion2 into 4d90c261c9323293e8098d01209cecb26ab4fa20 on jscs-dev:master.\n. \nCoverage remained the same when pulling a444937b5b5ffadb945384f136f8fb067da46632 on mdevils.demo-link into 4d90c261c9323293e8098d01209cecb26ab4fa20 on master.\n. \nCoverage remained the same when pulling 08b0b9b785a73801da7be90d3ae3021e297f36dc on tteltrab:fix-lone-block-statement-break into 4d90c261c9323293e8098d01209cecb26ab4fa20 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) when pulling 93e0352750f29928ead230efd23924dd8de61120 on tteltrab:fix-lone-block-statement-break into 4d90c261c9323293e8098d01209cecb26ab4fa20 on jscs-dev:master.\n. \nCoverage remained the same when pulling 6da56c1c5a4b927929511433993e4a5ad731ba92 on markelog:token-assert into 241accf81729228a97b239ce7726ab44371a7ab9 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 019c9f4f1ffd8ccd0ff9c5fd52dd6163d1ad294d on markelog:getReporter into 3fe2a921b7487b7bd01d2f5ec8fcf717cf7bf479 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling a9897ab0636498a5bf59f5c2eb4dbc85116071dc on markelog:getReporter into 3fe2a921b7487b7bd01d2f5ec8fcf717cf7bf479 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) when pulling 413c6b42962d2964f49302bcd723b72fbf8cf5fd on twolfson:dev/add.require.named.inline.sqwished into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage decreased (-0.08%) to 98.63% when pulling 112964b733a0ecddae2711cb054728f04fad68c7 on twolfson:dev/add.require.named.inline.sqwished into bb1f2e9214847dbf828cd4d5f8b4890e9e63d6ba on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling cbd280bdc75774ac52a0d7e25408336b2d41b14b on twolfson:dev/add.require.named.inline.sqwished into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.02% when pulling 0ff3da045f3062c0dca59f17f91143e2d3ed8b84 on twolfson:dev/add.require.named.inline.sqwished into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.11% when pulling 0a227494a30fd18948f931de637497314a2821e2 on twolfson:dev/add.require.named.inline.sqwished into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling 777014d0579201210eed03ebd4de5bcbccfa47b8 on markelog:SpacesInsideObjectBrackets into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage decreased (-0.02%) when pulling 53c76e6190c1eea417100414a34e30afda0b34dd on markelog:SpacesInsideArrayBrackets into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage decreased (-0.02%) when pulling 53c76e6190c1eea417100414a34e30afda0b34dd on markelog:SpacesInsideArrayBrackets into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage decreased (-0.02%) when pulling 85a7f29e53d9b4c617319758b5893a975dfc58f9 on markelog:SpacesInsideArrayBrackets into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage decreased (-0.02%) when pulling 462b9e3092d063edc8d854473ed0cf3294a4d71a on markelog:SpacesInsideArrayBrackets into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage remained the same when pulling bbe9883cf90e9f42d09eec91608c2e5e41d5495b on vkarpov15:fix-airbnb-preset into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 38427860aef52d5326e35b14631d7781b6293358 on JonathanGawrych:jag/indentation-on-empty-lines/719 into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 96.89% when pulling 4a0e67e9d67cfdfb8d92ce67357ad21e46c00219 on JonathanGawrych:jag/indentation-on-empty-lines/719 into 2268c75cbfb07c78bf86ad965454f226aaa15f72 on jscs-dev:master.\n. \nCoverage remained the same when pulling f1d3be4d17f83f880be92eeeb478845175b23185 on mikesherov:esnextRegex into 67f6e8dc6e05cc2fc22ccfa39ef1a7277a82acfe on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling dc8f01cc9822515dd92c50484fd32b6e76c18cf4 on markelog:SpaceBeforeBlockStatements into 21b40faecf9398104fd0e0a916e90682dbafa6d1 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) when pulling 4cf85d8ecab086e58b862d600c1165acff6289aa on markelog:KeywordsOnNewLine into 21b40faecf9398104fd0e0a916e90682dbafa6d1 on jscs-dev:master.\n. \nCoverage decreased (-2.21%) when pulling a10b03db984006d150c23a626ee3b93d3288c2be on mrjoelkemp:auto_configure into 21b40faecf9398104fd0e0a916e90682dbafa6d1 on jscs-dev:master.\n. \nCoverage decreased (-2.34%) when pulling fd4997c7d08ec0578015a44bb1ff7027d7b7c50b on mrjoelkemp:auto_configure into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage decreased (-1.3%) to 97.34% when pulling 15ee3e64a8751396d67b55757f672ca87bdc05e4 on mrjoelkemp:auto_configure into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage decreased (-1.12%) to 97.52% when pulling a0c59ecfc6d9a490afa99732ac4a87f7d3845fe5 on mrjoelkemp:auto_configure into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage decreased (-1.0%) to 97.74% when pulling c3543f0a929886923f9206252d061464b279a688 on mrjoelkemp:auto_configure into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.93%) to 97.82% when pulling 80fb779ee3ef42094b3f2ef75b62d0eb08634b27 on mrjoelkemp:auto_configure into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.78% when pulling cc9797c9f8849f4ebfbec167f8cf718e26a488bf on mrjoelkemp:auto_configure into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage increased (+0.1%) to 98.85% when pulling ae5e2beda05af7fcb21b64f01a9b2233ddb439d5 on mrjoelkemp:auto_configure into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.19%) to 98.71% when pulling 46704383b39ba7fbebcff144a6aff4b18392fdc1 on mrjoelkemp:auto_configure into b4532e38d2d6b7440ba89266e0f9751744956614 on jscs-dev:master.\n. \nCoverage decreased (-0.19%) to 98.71% when pulling 865732eb435ea1cc58d87fd7b4388241829973cd on mrjoelkemp:auto_configure into b4532e38d2d6b7440ba89266e0f9751744956614 on jscs-dev:master.\n. \nCoverage decreased (-0.19%) to 98.71% when pulling cff980589cd43db3cbe17a564cd6a5bc867b1289 on mrjoelkemp:auto_configure into b4532e38d2d6b7440ba89266e0f9751744956614 on jscs-dev:master.\n. \nCoverage decreased (-0.19%) to 98.71% when pulling b88a76c1de3631e3d1a2a37ea0a76ebaff59f2e2 on mrjoelkemp:auto_configure into 0f78baf08fba75aeba4575608aaa08c384875701 on jscs-dev:master.\n. \nCoverage remained the same when pulling b6d73e0964f4faf2df2ff6f7fc0c83831c630b47 on alawatthe:patch-1 into 21b40faecf9398104fd0e0a916e90682dbafa6d1 on jscs-dev:master.\n. \nCoverage increased (+0.03%) when pulling 8ac4743ff135bd403a3154d9e616728f994bc0b0 on gero3:requireSpacesInForStatement into 8bd2ffd7bd1fc53a49d017f06322b178124534fa on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 284455fa3d9e3071d1447e39ac5fc0bbdd2798bf on gero3:requireSpacesInForStatement into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 9c6b82a4302fea8a9b3f0b78f87d1c0b36232deb on gero3:requireSpacesInForStatement into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 53ca959d757eaef5c466eb2d98b36b661c8c773c on gero3:requireSpacesInForStatement into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.05%) when pulling f869ff341299c5d8bddc69f174188c7090d3dccc on gero3:requireSpacesInForStatement into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.05%) when pulling c2a9e874d564d28ccafe78b8e2d504799baaeb5e on gero3:requireSpacesInForStatement into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling b3e5d7013c420b91d5a3b584c05f0de1459190ec on mikesherov:indentation5 into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 733ab963fdfbd52a0ed0290316af71ef3df5d46e on mikesherov:indentation5 into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling 3a151be99778277cf4b72a969329f4776403ae19 on mikesherov:indentation5 into f69bed2f6e43c4fb92e3d068e5cebdc2e93d207d on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling df475455f2f0ef6d1c52ae71d350ca1d6df2e928 on mathiasbynens:unicode into 28ee7acd88accc88b1b8a0900e884a7f7bc6b1eb on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling b8f494fc21c77d2b88ee62dce9b1729ac83b9b97 on mathiasbynens:unicode into 28ee7acd88accc88b1b8a0900e884a7f7bc6b1eb on jscs-dev:master.\n. \nCoverage increased (+0.0%) when pulling cc9c332b5092507934c0e2f9aa9254af45c34839 on mathiasbynens:unicode into 28ee7acd88accc88b1b8a0900e884a7f7bc6b1eb on jscs-dev:master.\n. \nCoverage remained the same when pulling 8ea82e2aad4bc855e95913b1bb6b6fed6fe79608 on joesepi:rule-file-permissions-wrong into 28ee7acd88accc88b1b8a0900e884a7f7bc6b1eb on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling f0c5a40efa523581c02c4d1cc35d5109449013a9 on joesepi:disallow-keywords into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.02%) when pulling ffdbc65941a8fa08a3f313e189c15fac8cb8c10a on joesepi:disallow-keywords into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage decreased (-0.25%) to 94.89% when pulling a952d2ee4d25982356511017834c70410ceb9553 on joesepi:disallow-keywords into 30049c1da94b590b783c1ba948da1d639b8c06bc on jscs-dev:master.\n. \nCoverage decreased (-0.12%) to 95.02% when pulling 40f34a96c1c4a33f7e9f727828dd0c4b2f435505 on joesepi:disallow-keywords into 30049c1da94b590b783c1ba948da1d639b8c06bc on jscs-dev:master.\n. \nCoverage remained the same when pulling 070efb10e574fb5e240f742816bf18695efb2eae on zxqfox:hotfix/require-space-before-block-statement into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling b8f17797b648a53b7e3c5ce7552058b0f40deb0f on mikesherov:indentation6 into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.06%) when pulling 82caac8101c3b3c629b57450286dd77eaba2ad2f on mikesherov:indentation6 into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.07%) when pulling 3cb1de24a3d17d92338a6d15ee6cb9e5f94c27a5 on mikesherov:indentation6 into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.07%) when pulling 4d9109fd2307b7e5876cc38170f30f7dada740e1 on mikesherov:indentation6 into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage increased (+0.1%) to 95.2% when pulling b8200f9be57dc9c10729eaf65e10204335864f8f on mikesherov:indentation6 into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage remained the same when pulling d1ea328a711837800bdb8eefbcc257d5906f3714 on markelog:jquery.requireDotNotation into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage remained the same when pulling 6a70d8bce10d583ceb6551cf497c1d15a2b85f8b on am11:master into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage remained the same when pulling d4a849b53e6e928d183fbbe22b63f550f27221a1 on am11:master into b4ab2287c1cd0052bf13a69c61302b8e24933035 on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling c167c0a2edbfac2f7cd1cf1fc830d1e9ccdf6e8e on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 10c18134f864602151e115b05c0c335087aae968 on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 21cff41a15f96d39b04a0f24947f8bd3fa34ac6b on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 9d242399931d83017310856146c594bf439355ab on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 174ca2104a25cc5745384cb82f95c5a396398083 on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 10ce2a9babf34c1da5115898cca4a29f1473c2ef on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 02fc79c635bd427c9c707940909b7e8e48a00dc5 on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling 02fc79c635bd427c9c707940909b7e8e48a00dc5 on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling e4f2b077f2a3f5e3a1859bfff75aa4af2a06c2b3 on am11:master into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 3928a31c92eb72bb21b7453031e5d831e6f56e21 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling c8f5020731368590c2bf261e76ec53e607deac55 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 169f6c870aa0c51144d93588befca9ad9ea5d1e6 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 9a0c0929b57da47d2c996f81f164b68b0bcb0885 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 24f97714faf8db78f6084d91b446f733281c3c0c on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling c1c94db15ad2058cdd96413b333ad1afca6f866f on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 5a47c2c485068454961d0a1c48431c0b148418f3 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling bc518d41e1729f02aa4a30aa0ea27383d52f771c on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 3f901a0be98bd7f11ebcc2bfa0819745c67a13e2 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling a65fe4e3ba4cac74f8da33d05b35fb41dfbf5cc4 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 74c74e959f61800e4ceab219ee6a2eae0ef8edfc on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 2f591b837769fd7d1b9ac5b377d8740daf095547 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 2d7330644b44386e8556bef695939363fe355b46 on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.77% when pulling 3477d8a76b2d3dfeee16d0e2c6610f169791f12c on am11:master into ccff2178d35c785190eb5f62a75149a4ae6dd5a6 on jscs-dev:master.\n. \nCoverage remained the same at 98.71% when pulling 6811bd95029df84348f0da67fde56a7544d47b85 on am11:master into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage decreased (-0.01%) when pulling 73fad3244cfbf40aa81f570901a3ddae4a846d94 on markelog:938 into 7924d501200ebb81342000233faae53d28491519 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 84131306c20f7c703a7c20fd9d1dc8ee9995d1de on mikesherov:hashBangFix into 2fca14a5dc2ac1f8db29ed4864684f25bdd0f674 on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 77c57948a33caef4b3dd579325e8d4193bb7b8e8 on mikesherov:hashBangFix into 30049c1da94b590b783c1ba948da1d639b8c06bc on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling 95fc21ecc01e71563dca46ee04c02717f4cfec16 on samlecuyer:capitalized-constructors into 30049c1da94b590b783c1ba948da1d639b8c06bc on jscs-dev:master.\n. \nCoverage increased (+0.01%) when pulling d6192371a727174c0a26c30e37522c178a16cf50 on samlecuyer:capitalized-constructors into 30049c1da94b590b783c1ba948da1d639b8c06bc on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 95.15% when pulling 78dc2381286c9a38ec777a762d3f8c47be32ec80 on samlecuyer:capitalized-constructors into b370466323d40517edc6f86cfbf4e5f4435fb2f3 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.64% when pulling 129b792ae9dd338398b2113c13836b8937da58cd on samlecuyer:capitalized-constructors into 2dbc6744fe630195956ebe38582f0aa26d0ed2be on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 95.16% when pulling 4023da5fb397cf2bc960558f2f4d3121741ebbd4 on alawatthe:variableNames into b370466323d40517edc6f86cfbf4e5f4435fb2f3 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 95.16% when pulling 8e725106cfe9cdd6f5e7284c576f2a28b51c6485 on alawatthe:variableNames into b370466323d40517edc6f86cfbf4e5f4435fb2f3 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 96.89% when pulling 95aea0ff971ef45e617b71d3fa02bc266b5a9b9b on alawatthe:variableNames into 2268c75cbfb07c78bf86ad965454f226aaa15f72 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 96.89% when pulling 95aea0ff971ef45e617b71d3fa02bc266b5a9b9b on alawatthe:variableNames into 2268c75cbfb07c78bf86ad965454f226aaa15f72 on jscs-dev:master.\n. \nCoverage decreased (-0.12%) to 95.17% when pulling e42d0b1b01315af0a59a807ff2ae5cb9eaa33010 on cvrebert:esprima-options into cfe951136f950481414196d043f62547a8356485 on jscs-dev:master.\n. \nCoverage decreased (-0.12%) to 95.17% when pulling e42d0b1b01315af0a59a807ff2ae5cb9eaa33010 on cvrebert:esprima-options into cfe951136f950481414196d043f62547a8356485 on jscs-dev:master.\n. \nCoverage decreased (-0.13%) to 96.94% when pulling 48f01720a82b191ee9f059fb50b9977e035583ae on cvrebert:esprima-options into 601a8703c4d294e1e2d5f55cc05632b31ff37c6e on jscs-dev:master.\n. \nCoverage decreased (-0.13%) to 96.94% when pulling 6224639556e20d41c14d29441c4748a9d8409606 on cvrebert:esprima-options into 601a8703c4d294e1e2d5f55cc05632b31ff37c6e on jscs-dev:master.\n. \nCoverage decreased (-0.13%) to 96.94% when pulling 6224639556e20d41c14d29441c4748a9d8409606 on cvrebert:esprima-options into 601a8703c4d294e1e2d5f55cc05632b31ff37c6e on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.04% when pulling 74de5a8602a8407eab04b00d0b59a6b141c2a7e0 on cvrebert:esprima-options into 7711766f21e19f01c3d85bdb4147f4bbac7df8db on jscs-dev:master.\n. \nCoverage remained the same when pulling 83d903952d72e5a14ef36c28ab6f0e6cf7edd74b on gustavohenke:patch-1 into 30049c1da94b590b783c1ba948da1d639b8c06bc on jscs-dev:master.\n. \nCoverage remained the same at 95.14% when pulling 245dccb6aab684a49be903a8aed7a144a3be27e6 on hzoo:whitespace-message into b370466323d40517edc6f86cfbf4e5f4435fb2f3 on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 95.17% when pulling 3457c65cf603714bd150ab8036aa91cce0721264 on lahmatiy:semicolon into b370466323d40517edc6f86cfbf4e5f4435fb2f3 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.75% when pulling 5da8b93c05366340dc13ed456f90363279bb9c21 on lahmatiy:semicolon into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.29%) to 98.79% when pulling 124ada140bc234430cf455a5be671827bd1db321 on lahmatiy:semicolon into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling aee0595b470a4417f8eaae152496d971407bae59 on lahmatiy:semicolon into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling d02871c240e44aad7b25f8c506c694519bec7b76 on lahmatiy:semicolon into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling 6dda71f5065834df95ca208c2494c5cb66c3ac16 on lahmatiy:semicolon into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage remained the same at 95.29% when pulling 91cc001d0e004b64c41338914e0c3bf1d21c7f5a on mikesherov:forin into cfe951136f950481414196d043f62547a8356485 on jscs-dev:master.\n. \nCoverage increased (+1.74%) to 97.07% when pulling 9e9de1b40f8cc0a58f18098fa7a162502dab0603 on mikesherov:reportersCoverage into 42e55af260549e804270bd5d1586bb730eb8e6b7 on jscs-dev:master.\n. \nCoverage increased (+1.15%) to 98.03% when pulling 6c80b3851ca615f6eef352d524a54e3d0098749a on mikesherov:tokenHelper into 2268c75cbfb07c78bf86ad965454f226aaa15f72 on jscs-dev:master.\n. \nCoverage increased (+0.05%) to 96.93% when pulling 367c81cd67509ec0f5e43f056e85636c170a45f9 on mikesherov:brackets into 2268c75cbfb07c78bf86ad965454f226aaa15f72 on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.06% when pulling 69c483a65594cd8e59539ce1eaf3e62ceacf3e58 on mikesherov:brackets into 7711766f21e19f01c3d85bdb4147f4bbac7df8db on jscs-dev:master.\n. \nCoverage increased (+0.59%) to 98.63% when pulling 2aa66552892c2669f65c5e623b04d4ad13191741 on mikesherov:removeCommentHelper into 7711766f21e19f01c3d85bdb4147f4bbac7df8db on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.64% when pulling 5ffbdd7f08612dbe2f93b5af22586fdb8afb7456 on alawatthe:identifier-names into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.64% when pulling 24a4113d97dcdf07819afd16feb45fd8d01f36f9 on alawatthe:identifier-names into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage remained the same at 98.64% when pulling 7fbf9826823fe0d547bbddc57b2307337c5863d4 on cvrebert:patch-1 into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.64% when pulling 9bbcf6daa1f818476bdd2878cd3e924b52bd482c on feross:master into ca77989defdee0320f92fb029ca61fa062ed0f35 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.8% when pulling 337d0afd0cbf8e49d46977545d08831ee98c3bf6 on zhangyuheng:requireParenthesesAroundIIFE into 928cb15df247195096dba66a1a35721020dfbb5a on jscs-dev:master.\n. \nCoverage remained the same at 98.8% when pulling bdbac46f3ec4cd2ebf522d899da434179a7ee804 on xaka:docker-based-travis-ci into 928cb15df247195096dba66a1a35721020dfbb5a on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.8% when pulling cf459793dfb56f87500f3c0501e567155cfe239c on hzoo:use-token-assert into 928cb15df247195096dba66a1a35721020dfbb5a on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.79% when pulling 37e447afd2c16d6ba9002317182011abcb9d73a0 on hzoo:token-assert into 4429987a3e853fa5b744e1fce86912035b2bc285 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.79% when pulling ffa3113af6021e3c50fa9e799dc6d6a48fc31faf on hzoo:token-assert into 4429987a3e853fa5b744e1fce86912035b2bc285 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) to 98.75% when pulling dc89b3c1d450bfe727e78b838b489507c82546d6 on hzoo:token-assert into 4429987a3e853fa5b744e1fce86912035b2bc285 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) to 98.75% when pulling 9f46bc76c7dc7d2bb613485dc52194a07c576cdc on hzoo:token-assert into 124eac33672b5edde507ef0f4e774eca09180b62 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) to 98.75% when pulling 9f46bc76c7dc7d2bb613485dc52194a07c576cdc on hzoo:token-assert into 124eac33672b5edde507ef0f4e774eca09180b62 on jscs-dev:master.\n. \nCoverage remained the same at 98.8% when pulling c8ff983e6d170f2a57fe97959944f3a316ce848e on cvrebert:devdeps into 4429987a3e853fa5b744e1fce86912035b2bc285 on jscs-dev:master.\n. \nCoverage remained the same at 98.8% when pulling e98b84e35223d3688f63a4d04a07a3cc68fb1e93 on cvrebert:devdeps into 124eac33672b5edde507ef0f4e774eca09180b62 on jscs-dev:master.\n. \nCoverage remained the same at 98.8% when pulling ee0c03eda79a6ff295e021128b3487673d51104c on cvrebert:commander into 4429987a3e853fa5b744e1fce86912035b2bc285 on jscs-dev:master.\n. \nCoverage remained the same at 98.8% when pulling c6efa608a6ea010e0e5fdb84e1272962486b3a0e on cvrebert:commander into 124eac33672b5edde507ef0f4e774eca09180b62 on jscs-dev:master.\n. \nCoverage remained the same at 98.8% when pulling a8a06c5c2c2510bf84874c12844eee5e16c4cde6 on stefanosala:patch-1 into 124eac33672b5edde507ef0f4e774eca09180b62 on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling c2825ea6fad2509e48b1a7eb2407602d933c8ef6 on valorkin:patch-1 into df7474c1c3adc8ee501b82097f9e7a43f8c519a0 on jscs-dev:master.\n. \nCoverage remained the same at 98.75% when pulling b050c96e6cbb362f1f8351192229d681d52483e4 on zxqfox:hotfix/move-validate-jsdoc-out-of-presets into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.75% when pulling eacec69c1bc78657da4a9771e52a7a92e231acbc on hzoo:require-curly-cleanup into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.75% when pulling eacec69c1bc78657da4a9771e52a7a92e231acbc on hzoo:require-curly-cleanup into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.75% when pulling 0e77f5fb495a8ee7159945e77a7ffd837001bede on hzoo:require-curly-cleanup into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.75% when pulling 0e77f5fb495a8ee7159945e77a7ffd837001bede on hzoo:require-curly-cleanup into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.74% when pulling 1bb6d9c387152a95cf9b0ab297cf8009160b443a on hzoo:require-curly-cleanup into 476ada5dcaf92cb17dc34c46a652361837b56f3e on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.89% when pulling add77a6c927137fa47883e11037ea0a0d194cfed on hzoo:require-curly-cleanup into 933b4d92be383cb92c7dc56da6af007d6dd96915 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.9% when pulling d1176913d325e94e9eb9b5a8809323ca9624498c on mikesherov:fixExportDefault into 55178f2d7b32080f6bfc4c87f41fc0e42fc62521 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.89% when pulling be0571c59310ab7beedd7eaf50c79d2db4ba9bf8 on rexxars:rule-of-silence into 55178f2d7b32080f6bfc4c87f41fc0e42fc62521 on jscs-dev:master.\n. \nCoverage remained the same at 98.9% when pulling 73a0d64bddde46f6e01d6ab201bc4d1614703b43 on markelog:940 into b4532e38d2d6b7440ba89266e0f9751744956614 on jscs-dev:master.\n. \nCoverage remained the same at 98.9% when pulling bb0cb142422c063cdb5b62ac6fa55fd864a31bd5 on markelog:940 into 8ddbd46c893c2b86d30a738dd6f19386d4be2e31 on jscs-dev:master.\n. \nCoverage remained the same at 98.9% when pulling 0ab450f7287b0d895b9c72c7fac003f03e1cfafa on markelog:jquery into 8ddbd46c893c2b86d30a738dd6f19386d4be2e31 on jscs-dev:master.\n. \nCoverage decreased (-0.11%) to 98.6% when pulling d9560ebabf5623e0e5eb108ae8d006707490db10 on davejhilton:master into 990e9bc8710c83017a6aa82740b2729316abf441 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling 7e7b461f442cc7a5b0de881c796d92992796f307 on davejhilton:master into 990e9bc8710c83017a6aa82740b2729316abf441 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.72% when pulling e0360dccd6cfe2f061c307ebaff73e4f919da773 on davejhilton:master into 990e9bc8710c83017a6aa82740b2729316abf441 on jscs-dev:master.\n. \nCoverage decreased (-1.16%) to 97.55% when pulling 1c1b5e960afe45d9a3262f5c9c16929b2c9044f1 on mdevils.autofixing-token-data into 38459ea13a12a235d8e16e321d5f4a6677fc504e on master.\n. \nCoverage decreased (-0.91%) to 97.8% when pulling 4d27193f9fb5152704f0fcb420543f2b69fbe8ff on mdevils.autofixing-token-data into 38459ea13a12a235d8e16e321d5f4a6677fc504e on master.\n. \nCoverage decreased (-0.48%) to 98.23% when pulling 04e3b0f2637af358ba1af2748431b81692dddd71 on mdevils.autofixing-token-data into 394edc90eb6b012852c55ddd0868656455b8fec0 on master.\n. \nCoverage decreased (-0.2%) to 98.51% when pulling 711e56438eb7d6eb120db639597868d2ea1e4d22 on mdevils.autofixing-token-data into 394edc90eb6b012852c55ddd0868656455b8fec0 on master.\n. \nCoverage decreased (-0.48%) to 98.51% when pulling abf2138f75578e6877a5aa4033b7ad34a6842175 on mdevils.autofixing-token-data into a5bd1f3d8c5c30ecec501b1b40c1b784a77584ba on master.\n. \nCoverage decreased (-0.45%) to 98.55% when pulling 6446c97d8cbe1226a9df1f3a6f80774d7d526c55 on mdevils.autofixing-token-data into 3ab77f93677a020e3ebc65f39418cc589cab0e33 on master.\n. \nCoverage decreased (-0.02%) to 98.97% when pulling 13a9a8a1f91ade6a8e5c1a52e21b2627caa8e527 on mdevils.autofixing-token-data into e14988d51542ca9f27bd505abf6ee57636bebe18 on master.\n. \nCoverage decreased (-0.02%) to 98.97% when pulling 13a9a8a1f91ade6a8e5c1a52e21b2627caa8e527 on mdevils.autofixing-token-data into e14988d51542ca9f27bd505abf6ee57636bebe18 on master.\n. \nCoverage decreased (-0.02%) to 98.97% when pulling 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on mdevils.autofixing-token-data into 59f18a65d58d6963e9a45dbda4febe6c447caa9c on master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling e9f2ccf7224191058cfb109948a56ed7985e82e4 on TheSavior:require-padding-newlines-after-block-declarations into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling 9dcfbb289707aad6bfa9afcaf7a95404427f9155 on TheSavior:require-padding-newlines-after-block-declarations into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling da62cf341524b18b38f8ee48dbdcefd6c536392e on TheSavior:require-padding-newlines-after-block-declarations into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling a3b69bcee98125cf72c4888e55e86303347b6c6d on TheSavior:require-padding-newlines-after-block-declarations into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.73% when pulling bc8dff4c05c8ef3aa93e0930556275642634aeb4 on TheSavior:require-padding-newlines-after-block-declarations into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.3%) to 99.01% when pulling 82ca0d4eec9e5da535b7cc589f0d95c5a0724b39 on TheSavior:require-padding-newlines-after-block-declarations into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.31%) to 99.02% when pulling c1e93fd1068efeaba872a9f61d7643e3af34bae2 on TheSavior:require-padding-newlines-after-block-declarations into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.02% when pulling 96c86e8fcbf851e1d5712854a38c7c3b316f893e on TheSavior:require-padding-newlines-after-block-declarations into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.01% when pulling 16cc71ed14bb927a635e5b43157482eadab4911b on TheSavior:require-padding-newlines-after-block-declarations into 0feb327f1551ededd70489d2e2466f776ebe95e4 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.85% when pulling e3e7f63a805a95ec99679096e6d8b21d98a25882 on TheSavior:require-padding-newlines-after-block-declarations into 5fde02156012dd0438abb2793a05abfc871a4242 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.71% when pulling 3e9b05f029d0e8286c1d6dd2ddcc0bb695b89715 on mrjoelkemp:jscs_preset into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.71% when pulling bdddcfb42dcd245f391dc26b1f06210ee53788ad on mrjoelkemp:jscs_preset into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.71% when pulling b2224dbd42c92cf0e43cdd15fdd172f3f2b297ee on mrjoelkemp:jscs_preset into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.71% when pulling 6da8a748b43abe851e0db2fb45ebd768636b2551 on mrjoelkemp:jscs_preset into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.71% when pulling 22c8b38c73e5b952eb10a5428e0b87e732005c61 on TheSavior:fix/file-traversal into 38459ea13a12a235d8e16e321d5f4a6677fc504e on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.72% when pulling 97b1d647a0432bb0e473f0a11c91dac7b5271d3d on hzoo:require-aligned-exception into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.71% when pulling 6125dd2cecf7f01ca17f35c3a288f5366f3e44e0 on issues/1018 into 394edc90eb6b012852c55ddd0868656455b8fec0 on master.\n. \nCoverage remained the same at 99.0% when pulling 5373243210d00f5b9de93cfd8f93cb14579284fa on issues/1018 into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on master.\n. \nCoverage remained the same at 99.0% when pulling f76f1f7cd1841122e603816f70edc5dd385db8be on issues/1018 into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on master.\n. \nCoverage remained the same at 98.71% when pulling fef0212c254ade32a4e09e7ace87568668d7569a on issues/1013 into 394edc90eb6b012852c55ddd0868656455b8fec0 on master.\n. \nCoverage remained the same at 99.0% when pulling 4e70e4cf95b9c150213f091171dfb970ddfa4d56 on issues/1013 into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on master.\n. \nCoverage increased (+0.29%) to 99.0% when pulling 2798f0f255bdfbeebfb25ad42911dbd889cccac5 on mrjoelkemp:promisify_test into 394edc90eb6b012852c55ddd0868656455b8fec0 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.0% when pulling 09825e7dbb89a367c2e914b6f1b8d2c80d12886f on mrjoelkemp:auto_configure_es6 into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.0% when pulling 09825e7dbb89a367c2e914b6f1b8d2c80d12886f on mrjoelkemp:auto_configure_es6 into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 98.94% when pulling a1e6f218d81f0a5f31364b391ff196380a2f644a on TheSavior:fix/iterator-whitespace into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on jscs-dev:master.\n. \nCoverage increased (+0.05%) to 99.05% when pulling bc529be7c12351b13347c001f667c839bfcb15ee on TheSavior:fix/iterator-whitespace into fd405cd83849c8e5052a7dc0da5f07cde46e51ce on jscs-dev:master.\n. \nCoverage increased (+0.05%) to 99.04% when pulling ba3e2ade49ba884b584e96162eb88e923076285f on TheSavior:fix/iterator-whitespace into 0feb327f1551ededd70489d2e2466f776ebe95e4 on jscs-dev:master.\n. \nChanges Unknown when pulling 4b02b86d1ab16f3fb4f105065a86924325bd80e3 on TheSavior:fix/iterator-whitespace into * on jscs-dev:master*.\n. \nCoverage increased (+0.01%) to 99.0% when pulling 6dac01a3f825a6d3ea9b1f2f6e81e101119c6262 on TheSavior:require-padding-newlines-before-line-comments into 0feb327f1551ededd70489d2e2466f776ebe95e4 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.86% when pulling 51f06332aca0ccfd311d37cf060439d2827564f4 on TheSavior:require-padding-newlines-before-line-comments into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.0% when pulling ee117d391f2009e1288be46f3af4b2e5b8fb9ed2 on Slayer95:yoda-conditions-array into 0feb327f1551ededd70489d2e2466f776ebe95e4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.0% when pulling 3633159e45f4b2014c1e589b6cc1d06b5752135a on Slayer95:yoda-conditions-array into 0feb327f1551ededd70489d2e2466f776ebe95e4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.0% when pulling 6425ebdbca4f45f2c79676d84f47d711910787ef on Slayer95:yoda-conditions-array into 0feb327f1551ededd70489d2e2466f776ebe95e4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling ef4b343f792756e78b33f63bac3fa65b2f268e10 on Slayer95:yoda-conditions-array into 02bf7ac13d7082ea349ac5b9b77d41380dfdd110 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.17% when pulling 7034ae9d4222f3e87e9b234512139aa4abc669f8 on Slayer95:yoda-conditions-array into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage remained the same at 98.99% when pulling 37b6a39fb3dfcca979fa22a3f02982d024e594ec on yannickcr:fix-builtin-options into a5bd1f3d8c5c30ecec501b1b40c1b784a77584ba on jscs-dev:master.\n. \nCoverage remained the same at 98.99% when pulling a898f7b3ca1394c8dd63a2729ccbe69e04427e3f on yannickcr:fix-builtin-options into a5bd1f3d8c5c30ecec501b1b40c1b784a77584ba on jscs-dev:master.\n. \nCoverage decreased (-2.72%) to 96.28% when pulling 83eeac87ea3361e61542ab9ab0d419cac0add60e on lahmatiy:extract into a5bd1f3d8c5c30ecec501b1b40c1b784a77584ba on jscs-dev:master.\n. \nCoverage increased (+0.14%) to 99.13% when pulling d5fa151f0726a34cc4e8740dfa882591ff138a0d on lahmatiy:extract into a5bd1f3d8c5c30ecec501b1b40c1b784a77584ba on jscs-dev:master.\n. \nCoverage increased (+0.14%) to 99.13% when pulling cad51eb56c27ad38bfbd7b32b8c373ac987a4bc1 on lahmatiy:extract into a5bd1f3d8c5c30ecec501b1b40c1b784a77584ba on jscs-dev:master.\n. \nCoverage increased (+0.1%) to 98.92% when pulling 2a96eb72aace41374dfde7cd460864690ef71e60 on lahmatiy:extract into d567f914d2461635976d463abe22a13aa0becf5b on jscs-dev:master.\n. \nCoverage remained the same at 99.0% when pulling b78d9b1108cd2fbc812a9e47a239d49d5a23db3d on hzoo:require-spaces-docs into e14988d51542ca9f27bd505abf6ee57636bebe18 on jscs-dev:master.\n. \nCoverage remained the same at 99.0% when pulling b6b9eb83ebb4a26a017e0c16859f5a4b604fd0ff on zxqfox:issues/1041 into fb297c568e9889c04ae42a6540e44f0d9bca7f21 on jscs-dev:master.\n. \nCoverage remained the same at 99.0% when pulling 6674cd1305b78081ec3b5c9cc68dc061819d7922 on zxqfox:issues/1041 into fb297c568e9889c04ae42a6540e44f0d9bca7f21 on jscs-dev:master.\n. \nCoverage remained the same at 99.0% when pulling 291215b783d1935dd7416d59f8aae8de2b09db8d on bassjobsen:patch-1 into 57039a9f0e0e922fca1d46f1d90da55fddd01a65 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 98.94% when pulling 5838ae63bc7f50ec945967159ae91f82af93db75 on TheSavior:feature/dollar-before-jquery into 57039a9f0e0e922fca1d46f1d90da55fddd01a65 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.01% when pulling 829cc7bbf369f28d006a12c7e7bf1742a25a58f0 on TheSavior:feature/dollar-before-jquery into 57039a9f0e0e922fca1d46f1d90da55fddd01a65 on jscs-dev:master.\n. \nCoverage remained the same at 99.0% when pulling 32343e6eadfa58ab161814025469595481aca1b9 on jacksonrayhamilton:crockford.json into 69c1f72cf0d287118eb2f9edc98d3450376a820a on jscs-dev:master.\n. \nCoverage remained the same at 99.03% when pulling 79ef83206549b902f3e2ba25352c0a8675342812 on jacksonrayhamilton:ignore-missing-config into 69c1f72cf0d287118eb2f9edc98d3450376a820a on jscs-dev:master.\n. \nCoverage remained the same at 99.03% when pulling d5ba68ddd5748f1a2f066e36b2119b50b2b95be4 on jacksonrayhamilton:ignore-missing-config into 69c1f72cf0d287118eb2f9edc98d3450376a820a on jscs-dev:master.\n. \nCoverage remained the same at 99.03% when pulling d5ba68ddd5748f1a2f066e36b2119b50b2b95be4 on jacksonrayhamilton:ignore-missing-config into 69c1f72cf0d287118eb2f9edc98d3450376a820a on jscs-dev:master.\n. \nCoverage remained the same at 99.0% when pulling 571d5707b790adb185fc245767c389d87dcf51a1 on sanemat:docs/reporters into 69c1f72cf0d287118eb2f9edc98d3450376a820a on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.0% when pulling 2b69beebbd1aa00ac809fb6d8869707d312c30c3 on oredi:master into 786cd91d94e3bd806d6fed70289f2bf4f586d8f1 on jscs-dev:master.\n. \nCoverage remained the same at 98.97% when pulling a46edbf0ca6798fb4e3610c0f8cd4ddee3483fd6 on hzoo:patch-1 into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on jscs-dev:master.\n. \nCoverage decreased (-1.34%) to 97.64% when pulling b3fb19f891c48cf75e10aafe81801e9419436556 on mdevils.autofixing into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on master.\n. \nCoverage increased (+0.02%) to 98.99% when pulling 3468f65144e66871562280a4fcd3cd38f609a87a on mdevils.autofixing into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on master.\n. \nCoverage decreased (-0.15%) to 98.82% when pulling d567f914d2461635976d463abe22a13aa0becf5b on mdevils.autofixing into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on master.\n. \nCoverage decreased (-0.1%) to 98.87% when pulling cf5f243cf96a626c668d233659c6a83c2d0a99c6 on twolfson:dev/expore.multiple.spaces.sqwished into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.98% when pulling 686dd45a9792b8032f1292ca6b89bff77d24d984 on twolfson:dev/expore.multiple.spaces.sqwished into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.98% when pulling 2fc413d48d83ecc39321505665b301fb14941c80 on twolfson:dev/expore.multiple.spaces.sqwished into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.83% when pulling b69179c5234af59d7e5c106f7fc4dddfe074f88d on twolfson:dev/expore.multiple.spaces.sqwished into d567f914d2461635976d463abe22a13aa0becf5b on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling a6e4c4300563d2d198ba198a4bfbf435846e66ef on twolfson:dev/expore.multiple.spaces.sqwished into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.97% when pulling 8180aa089aba1a066b1df1f54718eed7c3a796e9 on hzoo:req-space-keyword-assert into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.82% when pulling 150edebc53544eeb1d017b7ee9676eac54453737 on hzoo:req-space-keyword-assert into d567f914d2461635976d463abe22a13aa0becf5b on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.98% when pulling 752c614757777c39f4c6ac421a58cf680d4b5cb7 on oredi:master into 845a6b2a8d78e25c038fcb981c0334fe6f9c2d30 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.09% when pulling 65de60ed27b312e0abc51fd598590d27effeb005 on oredi:master into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.83% when pulling c6bea2f5214d940c2925fa5db559ac5930092024 on mdevils.get-first-line-token into d567f914d2461635976d463abe22a13aa0becf5b on master.\n. \nCoverage increased (+0.01%) to 98.83% when pulling 7c4fec055cc3a81109d868f7da992600bc17939f on mdevils.get-first-line-token into d567f914d2461635976d463abe22a13aa0becf5b on master.\n. \nCoverage increased (+0.01%) to 98.83% when pulling 2e7ff96ddfab70b96f89e150a74b01df79b3fbd7 on mdevils.get-first-line-token into d567f914d2461635976d463abe22a13aa0becf5b on master.\n. \nCoverage increased (+0.0%) to 98.82% when pulling b3544b2d33b597fae5ad8e97e7e78b36e1400a7a on hzoo:add-idiomatic-preset into d567f914d2461635976d463abe22a13aa0becf5b on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.88% when pulling b018deeed18d91aab000b697b4b5658a331aacca on hzoo:add-idiomatic-preset into 9a999508b084106f4cdaaa6e73c16f71a15c0305 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.88% when pulling b018deeed18d91aab000b697b4b5658a331aacca on hzoo:add-idiomatic-preset into 9a999508b084106f4cdaaa6e73c16f71a15c0305 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.87% when pulling 712d53f8bc59effea9e5befdcc070eae570ffdd0 on hzoo:add-assertion into 9a999508b084106f4cdaaa6e73c16f71a15c0305 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.87% when pulling f23eb5072beeb16183e83de914ef3054ef4776b2 on mikesherov:removeGetComment into b6941a993059781cd35e8d35b56715b612a0bed4 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.86% when pulling 075b066b7acc64a261c400f311c6f94222afeeae on TheSavior:comment-iterators into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) to 98.82% when pulling fa6e774fac912a24111000bf0c49547c70df390d on TheSavior:comment-iterators into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.86% when pulling 4d9fa15687e7d0d1b6225eaef4007e2f7c6a9d23 on TheSavior:comment-iterators into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.86% when pulling b6b4f9610c341d05610d2ba58f7961e8214ca7e4 on TheSavior:comment-iterators into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.09%) to 98.77% when pulling 6e4e494cdee7e262f00d83a1d352af7bcc158bc2 on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.08%) to 98.78% when pulling bf2ea5b3d06ad2168d1fa059107bd222422c6e04 on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.84% when pulling 29b4dd7236974c644c455b7394337487307f73e1 on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-1.03%) to 97.82% when pulling 2f3e33ee63e28488ec33e00c6eec1f66772fe079 on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-1.03%) to 97.82% when pulling bef6ad7e5e2e5206648b29c0d7825ccc9fb64516 on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-1.43%) to 97.43% when pulling 826b70ce3544e76412219551018d7819ae7ab5a3 on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 98.88% when pulling 5f78b8044d0f3d2f8b2100d40f410160f6e14a2d on mikesherov:lineBreaks into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.95% when pulling 96b9e9c9e868711e34865dc0712743ff21a470ad on mikesherov:lineBreaks into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.96% when pulling f879d48fbe0a67b39cbc9ff6fc06c60cee1e0c13 on mikesherov:lineBreaks into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.96% when pulling 235867c9bc19d714de5a202f32b657251f98fc37 on mikesherov:lineBreaks into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.96% when pulling d1d6ff4de3132962f2a158a6ba165f4d1c835756 on mikesherov:lineBreaks into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling 4f3ccbb697bc0dccc266c32636d840450ebc928f on gero3:allowCommentsInDisallowSpaceBeforeBinaryOperators into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling 1054d3f7b67251676f2bfaeb26a2dbf067bcad24 on gero3:allowCommentsInDisallowSpaceBeforeBinaryOperators into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling c258ee0917b141004183f07cf611d22c4e3cb132 on TheSavior:fix/newline-fixes into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling 0623d6dd6c9cc00f0b2cc8d6b0fd08c53321c992 on TheSavior:fix/newline-fixes into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling d5c5ebc42b98fdc730c9aa0f5c921d4105498c5d on hzoo:node-style-guide-preset into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling 63ea39a5ea31859c8f038fc6e5062317354fb101 on gero3:allowComments into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling c8d285c7fbb910cede4eb3b987db4a51eb2547bf on gero3:FixStringNewlines into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling b410c2db0e2bf6dc7f38b5599cd6dfb29a9e51d4 on gero3:FixStringNewlines into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling b332bc827819d62219f1f4be5b07a48b4192f75a on gero3:FixStringNewlines into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling 994be9f2191b1c19515d38bc7d00e0485d5f3234 on gero3:FixStringNewlines into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.07%) to 98.79% when pulling 1b56e2fd76738e5427a26d22156fca9d12dba9ae on gero3:requireLineFeedAtFileEndAutoFix into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage decreased (-0.07%) to 98.79% when pulling 2d6cdac13aebdecf1c2c14d88a1133e9cacf9865 on gero3:requireLineFeedAtFileEndAutoFix into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling 3992d2377335bd2a38115a50e75c37d08e706896 on gero3:requireLineFeedAtFileEndAutoFix into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling c8ecb4e59848787c8b6f58715abda22ba6b3fdbd on gero3:requireLineFeedAtFileEndAutoFix into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling a34ca0561aa80194444e660e209b7a72c46a77be on gero3:requireLineFeedAtFileEndAutoFix into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling b0442d7229e97d957174af55b76271a071fcd97a on SimenB:patch-1 into 28ba35b23ca70a767f7e03fbb9e56617f74203a4 on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling 4da1a644dc58ddeca93d74fa65a7cd395b01a026 on TheSavior:fix/requirePaddingNewLinesAfterBlocks into a0c246122431fa2aa8f875d980ad6d5af32b39c2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling fa0024197af4ec1f67a5f6f5467515aa5dbc01bb on TheSavior:fix/newLinesBeforeComments into a0c246122431fa2aa8f875d980ad6d5af32b39c2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.87% when pulling 751436bb438d3ba55b2b1166a990ccec7b707bdc on TheSavior:fix/newLinesBeforeComments into a0c246122431fa2aa8f875d980ad6d5af32b39c2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.93% when pulling d6e8abcfe22efab1e3e53a99fa89d1cff0f6363e on TheSavior:fix/newLinesBeforeComments into c9265a1dfdf006b4aac8fbcfb6b57c640feadf23 on jscs-dev:master.\n. \nCoverage remained the same at 98.96% when pulling 9bab11b1146381e9dd2e2ac20231884bee40be97 on TheSavior:airbnb-rules into 89268e5a6e8cedd5157014a93fdaa8d11ecd5ffb on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.08% when pulling 80920c745395025ace9acc901b9b7b882fac30a9 on hzoo:add-wordpress-preset into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage increased (+0.07%) to 98.93% when pulling 7f54b48d3d80d5d224a6630916d3fd2e72491804 on mikesherov:sameLine into a0c246122431fa2aa8f875d980ad6d5af32b39c2 on jscs-dev:master.\n. \nCoverage increased (+0.07%) to 98.93% when pulling c9265a1dfdf006b4aac8fbcfb6b57c640feadf23 on mikesherov:sameLine into a0c246122431fa2aa8f875d980ad6d5af32b39c2 on jscs-dev:master.\n. \nCoverage remained the same at 98.93% when pulling b50244fb65539e5a0370067f2c712c0d135124d4 on jbnicolai:switch-to-chalk into c9265a1dfdf006b4aac8fbcfb6b57c640feadf23 on jscs-dev:master.\n. \nCoverage remained the same at 98.93% when pulling ec00244a7aeafee25559cbe4d6f405b15990268f on jbnicolai:switch-to-chalk into c9265a1dfdf006b4aac8fbcfb6b57c640feadf23 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.93% when pulling 17c4903a411976a1e55b23dff98fb323461e54be on hzoo:patch-2 into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 98.92% when pulling 76a55c6bc4456dd78c6d7bb8407057c9ba5385f2 on hzoo:patch-2 into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.93% when pulling 39303042d6410b357369991500d4f28119f2d774 on olegpesok:spaceChange into 3a88aaca2bf7204e1ab2bbb5391ac85499bf55bc on jscs-dev:master.\n. \nCoverage remained the same at 98.95% when pulling 16d8cf60d7b5b65a179cdc3a6c04c5728ea7aaad on fubu:auto-config-rule-count into 84ab5a3f2bcdc46c80eba5b17c00d5e01295be31 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.96% when pulling 8becf0228923d05c2f6e18eb37eb78aab2e6e031 on fubu:auto-config-rule-count into 84ab5a3f2bcdc46c80eba5b17c00d5e01295be31 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.96% when pulling e471650a73f89568bc1fa725df91f246746170c9 on fubu:auto-config-rule-count into 89268e5a6e8cedd5157014a93fdaa8d11ecd5ffb on jscs-dev:master.\n. \nCoverage remained the same at 98.95% when pulling ea9bd29feb5f936685545c9f9e25e3a965c1a1a5 on varemenos:master into 84ab5a3f2bcdc46c80eba5b17c00d5e01295be31 on jscs-dev:master.\n. \nCoverage remained the same at 98.95% when pulling 83a9804bc13c33a572178c2352df8afd42f4100b on hzoo:estraverse-jsx-update into 84ab5a3f2bcdc46c80eba5b17c00d5e01295be31 on jscs-dev:master.\n. \nCoverage remained the same at 98.96% when pulling e01bafb24b4d5774b5345219b5ae62d18b63974e on TheSavior:jquery-rules into 89268e5a6e8cedd5157014a93fdaa8d11ecd5ffb on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 97.7% when pulling a6944b48e32a51723e1eec50a85e47087bb7e038 on hzoo:require-line-break-exception into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 97.7% when pulling 07aa5cc1cfcc4d0cde2c76b50c795d821a4af36d on hzoo:require-line-break-exception into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage remained the same at 97.69% when pulling aad8755edd538ac7d643ff2cdee02c105af859fe on hzoo:add-include-comments into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage remained the same at 97.69% when pulling 96f1cc4acaed698be910ee2bef9180db8d229ece on jcchingithub:disallow-anonymous-functions into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 97.69% when pulling abc2c20ba5f1ff09ed07fa6fd04fe5c37798fb7c on jamesreggio:fix-1168 into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 97.69% when pulling abc2c20ba5f1ff09ed07fa6fd04fe5c37798fb7c on jamesreggio:fix-1168 into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage remained the same at 97.69% when pulling 6c517211a659ea7957f72e5fdba00a4678f78f2f on MunGell:fix/doc-types-descriptions into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage remained the same at 97.69% when pulling 62c34e4f966ce075c53716811d30492e1ac509a9 on MunGell:fix/doc-values-consistent into 038e20ff262cea691e513c9439b948bbbd80c151 on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 51c262649d69ca6aea04e99efe0e960fb1f460ae on MunGell:fix/doc-values-consistent into 8c8b856e3a91af6fa67775efd95d8e3775b09f29 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 99.08% when pulling fa0d6bc4c3939e9feb6b456e86d2191be5465457 on hzoo:remove-redundant-asserts into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 99.08% when pulling bbf6d4ab9b4050504642e92ac6d54fe356251c3d on hzoo:remove-redundant-asserts into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 99.08% when pulling cfe51ef6f870c84a0ae6f0d0d1f33bd94c546cff on hzoo:remove-redundant-asserts into 5503c334065f27d7ff227c33c5db2746db863dcd on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling cff6f0db732c957b256897a932db438a12902bc5 on ikokostya:req-semicolon-yandex into 876d012919aecf2a834f2b98a66e1ee2c6692f0b on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.09% when pulling b3f2516f1a5fbc60f2ca9cbb33b64564e85729b0 on mikesherov:spaces into f55bbae8bfbd8d57a4f756193d824e6f398ff7a7 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.09% when pulling 41042e989f13a894a66a24ec893fc4465a4dd558 on mikesherov:spaces into f55bbae8bfbd8d57a4f756193d824e6f398ff7a7 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.09% when pulling 51bd7a57796433372c5bb2199fed4f8ec81b6bf0 on mikesherov:spaces into f55bbae8bfbd8d57a4f756193d824e6f398ff7a7 on jscs-dev:master.\n. \nCoverage decreased (-98.87%) to 0.22% when pulling 2db5d6ecc5a3daba3d0ce3abc43efa32e9c7b5b8 on hzoo:maximum-file-length into f55bbae8bfbd8d57a4f756193d824e6f398ff7a7 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling 9133344c47c7dc5663894ec961f58c18b9717fad on hzoo:maximum-file-length into f55bbae8bfbd8d57a4f756193d824e6f398ff7a7 on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling a030bd1835a8eb045ab07f47207443570282e1a9 on SteveALee:issues/1185 into 02bf7ac13d7082ea349ac5b9b77d41380dfdd110 on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling f81e16cacfa1572f7ccd2601720df60d8a82fc8f on hzoo:var-dec-esnext into 0526e681c49662f3c6a41d1225e5ff52b0a730cb on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 6170b6131abb940aafbafff843573ff1adde3f22 on TheSavior:fix/doc-typos into 64afa279305d16df14c81da240a391fb08b5b9a0 on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling d5e515a66028f761da5c664a4b34ed83c6e32908 on TheSavior:fix/doc-typos into 64afa279305d16df14c81da240a391fb08b5b9a0 on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 0ac9f3cf1bf57a47292a2d8bfc7816430a7766dd on TheSavior:fix/doc-typos into 64afa279305d16df14c81da240a391fb08b5b9a0 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling 69d6ab4640ebe962d52f9d327ced2f1174d774ad on indexzero:gh-1201 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 6b2c360db7bf4712747c35f30a174e290cd03543 on hzoo:disallowIdentifierNames-fix into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 3bd61b31f317ccfec081373d352296363b736f3b on hzoo:disallowIdentifierNames-fix into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling 94102ae1f3a96fbc45a32567a8d40e95c1ac218e on hzoo:disallow-not-operators-in-if into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.13% when pulling 2a6868dc820b5bab7e1cc832dbac412d78983b31 on hzoo:disallow-not-operators-in-if into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling 307446859dd3673c91199050794ee171a2657987 on hzoo:req-padding-except into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling b2ddf113c8a7088ea0f67399d14857f5949336a2 on lahmatiy:fix-1196 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 99.09% when pulling 6c7690a1001782882590d1dd50f3771972343a51 on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.04%) to 99.05% when pulling 627f0f1c158b8946c1ced4633a2569172ef2e82f on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.12% when pulling 59d9821fe1b0264ebe68904538505f2189ea33b7 on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 99.09% when pulling c0ab8bf192e3c162a5e223c6625df24aa0cadffb on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 99.09% when pulling 1120436a3f1842f23ef5cb148ae01f2c88e64a25 on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.01%) to 99.09% when pulling 369ca8f22ac5478e8b2842e4cad8e231fe4f2c5f on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.12% when pulling d0926ee5713657a6effc185b962d6f7284fd648d on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.12% when pulling 1f71a0d6e4c32efc0b9c3c2794552a06594f6083 on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.02%) to 99.12% when pulling fa7d9e62b9ac71d1faec1935db30a17ed68a69d3 on jacksonrayhamilton:spelling into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 9d48723a2b45ff4203cb182ff6e21b25998d88a1 on TheSavior:feature/use-strict into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 862bf049b4c7356b3d761fac0c0c7489e7f5038b on bramcordie:gh-1164 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 166caa7a8e3986132531e6673ebdcb05b828e62c on bramcordie:gh-1164 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 99.07% when pulling 3265d71c1de99e809ebf3bbeddc622c060cdbdcb on bramcordie:gh-1164 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 37e51dc12d4ceccb07089bdd244e27364d8bedfa on hzoo:patch-3 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 1a143ade9953085df0144f26d9b5162ba69b3a8d on jedwood:patch-1 into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 0bffdecd522092b455c4b475bd4b20b6d3ba049d on hzoo:docs-updates into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 0c4cc669f0af343b1355c25b10e651faf56b7e86 on hzoo:docs-updates into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling 44b24942c1a5a7e355d6f43963c7c6e5963f962b on 1999:es3-reserved-words-truefalse into c668ff1be0b1cfa058866048944bad3df7ff7cbc on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling bb15f9cc218fa2d03eff675204504fd60239f56d on MartinKolarik:gh-1169 into 953eef8dfabfa1290d10295ba1cd2b52c21316b9 on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling c0a3bf57a2d66cc7784a94c014f075e35307a558 on MartinKolarik:requirePaddingNewLineAfterVariableDeclaration into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage remained the same at 99.09% when pulling abec68426c58f2cd4e497602d9e7f1f38512b475 on TheSavior:fix/accept-functions into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 88c0321b717199d1c831db7c3c95317863b51235 on TheSavior:fix/paddingBlockExpression into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 3c1d1726f044f3d63703e10ad637e09a127bb9de on TheSavior:fix/paddingBlockExpression into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 3c1d1726f044f3d63703e10ad637e09a127bb9de on TheSavior:fix/paddingBlockExpression into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.1% when pulling 33a70a13b36c2b74aa25a2770ac44aabab9e8326 on TheSavior:fix/paddingBlockExpression into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.09% when pulling 4736b16f93992495b42286b1152ded84f9ae7469 on twolfson:bug/require-multiple-var-decl.sqwished into 95d611e817bcfef613ae2b785167ac82ec6c309d on jscs-dev:master.\n. \nCoverage remained the same at 99.1% when pulling bcb049fd7f4c4d98c11a25185804ba62cbbdbab1 on markelog:1244 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling aa49db7ec2e3309f6e75cc666f3f8a0ed76b7696 on markelog:1244 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling 99fc9029c8eb753b62c1c21c29b1bf0033019480 on markelog:1244 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling 1faee16457e020d8ec211b0634a6cf41df2082fc on markelog:1232 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling 7cb9733d57a1f42e4d9f1e44dd4e3469bc525515 on markelog:1232 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling f5eb56a26a6e70d7116f772b7900c7313463568f on markelog:1232 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling 5078d35134f581a5afac1cd351c3ca16d6be6d30 on markelog:1232 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage remained the same at 99.1% when pulling a326ea5489cec552022623fcda3f1ba5d68a89d5 on hzoo:patch-4 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage decreased (-1.12%) to 97.97% when pulling 38bbab1feb697ee98ad00ef93037b5441ef8266e on gibson042:spaces-inside-parenthesized-expression into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage decreased (-1.07%) to 98.03% when pulling e04a4a92e24cd93a0cbf336cb41c780af4c98877 on gibson042:spaces-inside-parenthesized-expression into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.1% when pulling c90cf8b03101006bc52df13ab8af8b3e8c6f08aa on markelog:1194 into da3cb064ed561a72b6abbe06507b56228c53ead2 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.12% when pulling c9f0b493f6e6c73090942de6d7c4c2582f4d64e9 on markelog:1194 into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.12% when pulling 1755dd17e7986adf3d102e487bf5913df0860451 on markelog:1239-2 into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.13%) to 99.25% when pulling fd67b76ae702feb1a5d8fade31f816e62d3315b7 on markelog:1239-2 into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.25% when pulling b44bb72fbbc9e75bee773cbf1ffee0e2b8be5d84 on markelog:1239-2 into dfb3dbb608e759e7bd696acb2ceee59ed1547bf2 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 99.12% when pulling f6c6e616aacc3fbe2cb29a2fc06c56b43bf04553 on TheSavior:fix/firstlinecomment into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling ce5683a4faf4ff0002b253e123ca815ea5dd95e5 on TheSavior:fix/firstlinecomment into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling ce5683a4faf4ff0002b253e123ca815ea5dd95e5 on TheSavior:fix/firstlinecomment into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 99.06% when pulling bf8687a00a1a6cede7b4f876f0e5a4797d154579 on TheSavior:feature/newlinebeforeexport into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.13% when pulling 232712e85992aa6c9cc1bbf96a07b1e525ff947c on TheSavior:feature/newlinebeforeexport into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage remained the same at 99.12% when pulling 0d20754741fff7b1854260b06ea1531dff94bf01 on TheSavior:feature/test-fix into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage remained the same at 99.12% when pulling ee710e3520506a2f5f355ca1cc0f22be64a7e23c on TheSavior:feature/test-fix into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.12% when pulling fb380c80043aaf756371ea7b741e450d054a9d82 on TheSavior:gh-1201 into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 8e212af3ff985c780ec63e808885d7c82607a79c on TheSavior:gh-1201 into 93b748000f405660684ff7dde1579ab8d48517d6 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.12% when pulling 541cbdaf1371f5d1591c36b1d22e2315bde6fad3 on avdv:master into d651a78819680c6e9adc1c1330da09fe14d0be3d on jscs-dev:master.\n. \nCoverage remained the same at 99.12% when pulling 1474fff79f418bcaf095fb5545a8d667dddf2d41 on issues/1271-related into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.03%) to 99.15% when pulling ddb91c3c9439ed0059c45cb6007eab163a2a4224 on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage decreased (-0.09%) to 99.03% when pulling cac11ce8aba889712a3ae45d513be240d8fe4cce on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling 99344b33d0a9ca9c36e41b3196227b9b1c1f4258 on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling 8a92f7d09da304afcee4d790ba8755e63c5bf070 on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling f16c20c17aa81bfe3d4293fdf0ab58e54647fb4b on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling 79f85cc6a0dacaf43c93bd2690995507ee3948ad on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling 17fe5dfe7a463f066e604c3e41f8917323105e84 on issues/1271 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.16%) to 99.28% when pulling a3090f96eabe8b3163c97dfa0a0b6b1dda75ad67 on issues/1271 into 292358e3c5af845c2d00ef4dc9b2146732f70462 on master.\n. \nCoverage increased (+0.03%) to 99.28% when pulling 8bce7d2b2417100a4ced092c205254d3834806a4 on issues/1271 into dfb3dbb608e759e7bd696acb2ceee59ed1547bf2 on master.\n. \nCoverage increased (+0.03%) to 99.28% when pulling c7975012540697b71bca5455c7340876efc6c6ba on issues/1271 into dfb3dbb608e759e7bd696acb2ceee59ed1547bf2 on master.\n. \nCoverage remained the same at 99.12% when pulling 59e9bf4cf75ddd439d3432c7cb68b066474f731b on issues/1269 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage remained the same at 99.12% when pulling 919731a215eb5b79970b3635f5993b4fa13ee4a9 on issues/1269 into d651a78819680c6e9adc1c1330da09fe14d0be3d on master.\n. \nCoverage increased (+0.13%) to 99.25% when pulling dfb3dbb608e759e7bd696acb2ceee59ed1547bf2 on errors-coverage into 292358e3c5af845c2d00ef4dc9b2146732f70462 on master.\n. \nCoverage increased (+0.01%) to 99.28% when pulling d0236e2e74b9229fb2b182bf761ee127df96bbc0 on feature/new-rule-require-new-lines-in-array into 3a772d1b38b06960f066c198dcba9109360b8b08 on master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling b75f7529d7d72de69ff3970cbbe6bf7b5edf30ec on dollar-ignores into 93b748000f405660684ff7dde1579ab8d48517d6 on master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 4fbc6bb5ffd238c6acc9e20ab82ca265a313deae on issues/1242 into 3ec2c08b4cd36fc5925cacddad6c5537b4169c22 on master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling f3a5421fc526a61047c19b11a56ae960fe408b1c on markelog:verbose into 3ec2c08b4cd36fc5925cacddad6c5537b4169c22 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 34a13f6a14b2ad7e9d7ddf07ab7e73290be7c6a4 on markelog:verbose into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling fd24eaf601ca022651b05204a60c069272d89a22 on lencioni:overcommit into 3ec2c08b4cd36fc5925cacddad6c5537b4169c22 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.25% when pulling f13489e45a3d1ea74156fc266afafd4da50e9b77 on Medium:nick-lines into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.25% when pulling 70c50d5211ea8f94141e360b3ab4673e506d28c8 on Medium:nick-lines into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.25% when pulling b5c5f2b643354be761e533a2910cf443add0c745 on Medium:nick-lines into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 99.22% when pulling 06f6258a8cb03c81889ec93dc94a55f333a87bae on Medium:nick-lines into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage decreased (-0.04%) to 99.24% when pulling c0a92703c64f5e9eaa4eefb5123878a2ade8c66d on Medium:nick-lines into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling d38d43768474dc87a309558ba4588d3d78f17ba9 on SimenB:mozilla-preset into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling ff2c4211d697d372e32d5d849731d5fd591d601b on SimenB:mozilla-preset into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling 65aa31ea851497465e26f19859d5f9dbeb652b1d on hzoo:patch-5 into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling a7a99958cf2676d79e88868afdbe0f7ed37ff51e on hzoo:docs-update into 3f92418fa3af89dba132c45d9ca73dd035043f99 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling bb168a20b4f3363ee05d15d1ddf761f451a69636 on Receiptful:feature/except-require into 52083ffde676fa4ca35c7203d0284f3939dcf970 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 4d58d5d705daee9db869a944d1a6bc3127269ef1 on Receiptful:feature/except-require into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 51d3d0337b4bccdbb057f4cb95ac5193de0b7ee1 on Receiptful:feature/except-require into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling f0071ab3e5574493b1d441ddf46aecb717301cbe on Receiptful:feature/except-require into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling b6e6ac6043622c5907150f73ad50f03484ab096f on Receiptful:feature/except-require into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling b3cce8c9bf61944f8c349b75b265d0a41b20f5d0 on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling e41f3b2a7b6923af130bb4bf7ca2994c7c79c4b2 on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling e41f3b2a7b6923af130bb4bf7ca2994c7c79c4b2 on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 64f5734d0a0c0625bb5f646cdb97d64da86c7a8d on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 86bc9507f157d22eceabe2397f74cfb4a5e2de07 on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 5994c638b7c88e3888ad97ecf6f812ee5c3b3911 on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 19350050a75669dd7c119e99e7e14f58782fac34 on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 89f90f01a128693ae8c8cd1d7c0d31a4f2006bdf on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling fccdf2b0b278ed8bb0c561122a0e91cc3c80291a on Receiptful:feature/except-require into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling d29680ca5a02888666b5cf09db0537f091136ac6 on jasonkarns:patch-1 into 1e30a6434a85251c1bf0170f380c7041ce09ff30 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 1b07e06c450b14dce886beb6f4a710b51d158f24 on jasonkarns:patch-1 into 1e30a6434a85251c1bf0170f380c7041ce09ff30 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling f3395be8e56ada1cabff432cde0cc2c0b552940b on fluidsonic:patch-1 into 1e30a6434a85251c1bf0170f380c7041ce09ff30 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling 87eeaf8108b31530a7e2759128a89cade74cf826 on astorije:patch-1 into d738468b3cc51be303fc66934ddb64bbf0edb8d1 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling 094b23493f424630462bf0e8f2d42778ed1ce4ca on astorije:patch-2 into d738468b3cc51be303fc66934ddb64bbf0edb8d1 on jscs-dev:master.\n. \nChanges Unknown when pulling 0370776f02e1a11a35725400b77a681593c04fa9 on XhmikosR:patch-1 into * on jscs-dev:master*.\n. \nCoverage increased (+0.0%) to 99.29% when pulling a3228ec21bd164dd485744b289d7926223220636 on astorije:feature/paddingNewlinesInFiles into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling d07d185e69b6c1c87f809bc818f7ab3462431379 on astorije:feature/paddingNewlinesInFiles into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.26% when pulling 55b7dec10dc6c54dadf035649e9e5d2045a7671e on hzoo:requireParensArrow into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-82.12%) to 17.17% when pulling 1ae4aa61a6cce11fee41bdde8c4ef9ccda90b570 on hzoo:requireParensArrow into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) to 99.23% when pulling 6c642fc73e08c5ae22f5adc4ac56c5f1bcb5d55b on hzoo:requireParensArrow into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 99.26% when pulling 980d15e964e35addd3d8a5a5f219b2ce7a365f5a on hzoo:requireParensArrow into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.29% when pulling d152dea79edc3618d31ecc5286db8c05875688f0 on hzoo:requireParensArrow into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.29% when pulling a8ef2ddd7ed88b088fb6a1161b4270babb533d1a on hzoo:requireParensArrow into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling d1ee183df8b43b063ab7bb90b5d29d95ec61723f on TheSavior:lineafterblockfix into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling 3b0cb46ac84a1da6de377dd5721cf38934d4e144 on markelog:985 into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling 639f41951e338a36b5f214a8c7b91bc9b9fcc4ff on craigjennings11:master into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-83.02%) to 16.26% when pulling 5c99ab8d9e06fe0e84ebcbc216b8711153dd1e4e on hzoo:requireTemplateStrings into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 99.22% when pulling 5501e00c002fab459ea4719a5c73557264859ab9 on hzoo:requireTemplateStrings into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 99.22% when pulling 3357d1e693d33677aa63d0e594998de110b2b4a0 on hzoo:requireTemplateStrings into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.25% when pulling 91575de4d6698a5c240922ddd847b4ea3f2959ad on hzoo:requireTemplateStrings into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 98.83% when pulling 01f282fd893f8ac9954fb5e9ecc8e8956c204c44 on hzoo:requireTemplateStrings into 91be932523de0bde1b878a9f62ffe391bd6779f1 on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling a040ee636e739e5d706b3f30d6e1922c3e44bdad on issues/994 into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on master.\n. \nCoverage remained the same at 99.28% when pulling 138df389d44abc3e8fd0bd25efb983365ab53270 on issues/994 into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on master.\n. \nCoverage decreased (-0.2%) to 99.08% when pulling 958c3471e86faa086899ee882dc84632da2a968c on TheSavior:keys-on-line into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.25% when pulling b9d8fb1a949ab556678933c4c9270c292d051d19 on hzoo:requireSpread into ebf0a2dc080ae96072a3dc52f64957a851d66fd0 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 99.25% when pulling 8fa8ffb10c713acf90b1115727001f306b0ab39d on hzoo:requireSpread into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 35d6868e259d86e6e5279938fef77fa0eced0605 on hzoo:requireSpread into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage remained the same at 99.28% when pulling dd59cc9267ba347f9c6f989de2cbe2ccd74fe5b6 on adrianheine:patch-1 into 2740ac6c8743483270e4ceb346fef47f0356cd24 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.28% when pulling 0be9091cd9483ff6a8a381dc36a4d6008e617fb9 on TheSavior:changing-value into fb9ce4fe6f55c83c96fa311a0973dfa77e5740af on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 10ef78c8986caf2f6702705ee7ff9fb048a5d749 on hzoo:requireShorthandArrowFunctions into e6baf257d4b9a315f2dd08419633c6f3dd0e8188 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 10ef78c8986caf2f6702705ee7ff9fb048a5d749 on hzoo:requireShorthandArrowFunctions into e6baf257d4b9a315f2dd08419633c6f3dd0e8188 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 729d3ba8224536955fbf7a7909f37807fa2fc4fe on hzoo:requireShorthandArrowFunctions into e6baf257d4b9a315f2dd08419633c6f3dd0e8188 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling a54231b72e2649a95b33297985c834151c5fbd3f on markelog:1354 into e6baf257d4b9a315f2dd08419633c6f3dd0e8188 on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling ce723e4310a7c59fb50cbc5cf5f6a094bd17e6b3 on markelog:1351 into e6baf257d4b9a315f2dd08419633c6f3dd0e8188 on jscs-dev:master.\n. \nChanges Unknown when pulling 018a0f87ae63b75da91c15bac21fb084f1bc1aee on markelog:1086 into * on jscs-dev:master*.\n. \nChanges Unknown when pulling 3098907b89fcda9e7ecc686c10fa9b7b2e6c38e1 on markelog:1086 into * on jscs-dev:master*.\n. \nChanges Unknown when pulling 34282c3087a63dff1a40b4aea3ea9507ed902627 on markelog:1086 into * on jscs-dev:master*.\n. \nChanges Unknown when pulling 34282c3087a63dff1a40b4aea3ea9507ed902627 on markelog:1086 into * on jscs-dev:master*.\n. \nChanges Unknown when pulling dbe085917c28ced301714a759c18be7d7aed6d24 on issues/1358 into * on master*.\n. \nChanges Unknown when pulling 9293a0cda14e6f2a4f6d82416ee3fd33761f5f97 on hzoo:i-1346 into * on jscs-dev:master*.\n. \nCoverage increased (+0.0%) to 99.29% when pulling bb4fded747a7e1b153f9bc759e0acbcaa70d9499 on hzoo:i-1346 into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage decreased (-81.73%) to 17.56% when pulling 1ddce6e5ed44ebc1a685afd457aa1969ee8494a4 on hzoo:i-1346 into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling a14cbc9f0f35496fa31f6edc82cf37537f048bea on hzoo:i-1365 into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling f5147358eae94a253b03e46ddd37e9920e29dae7 on hzoo:i-1347 into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling 1511eab3f7e3b9bbeea161ba7534591784c1dda5 on hzoo:i-1347 into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 99.23% when pulling 4b5dff40cb5af270c7c7b51a171d469296aadb5a on hzoo:exportDefFunc into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 99.23% when pulling d13a6bb41be18c617d09c4ddc3f2ca585509511e on hzoo:exportDefFunc into e0bcbc6e1d94a4609842102e443f6399e7c0be34 on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling e0bcbc6e1d94a4609842102e443f6399e7c0be34 on hzoo:site-i-4 into ac2c02deacc16cdf3d8e9cf58252e6ad19eccd1e on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling b73f9bb6d68cec488626ddf50e914d56a0d8e261 on christophehurpeau:patch-1 into e0bcbc6e1d94a4609842102e443f6399e7c0be34 on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 98.86% when pulling f92e07be552fb79eaa982d8aff093888c0884ef8 on christophehurpeau:patch-1 into 4617c562b991c883d22d17bb93f5a10f0bba315d on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling bfd1efc4f82fdef5312addca4645f3acb2dbbbc1 on christophehurpeau:patch-2 into e0bcbc6e1d94a4609842102e443f6399e7c0be34 on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling e287882175e08e0817c0774fd8500ab1726378e1 on adrianheine:patch-2 into e0bcbc6e1d94a4609842102e443f6399e7c0be34 on jscs-dev:master.\n. \nCoverage remained the same at 99.29% when pulling 98e574bc647bbaf60f58940187f9cf2ac573d067 on gitter-link into e0bcbc6e1d94a4609842102e443f6399e7c0be34 on master.\n. \nCoverage increased (+0.0%) to 99.29% when pulling 2b188000cdc7c41f95cea9a535d954d75d5a4d3d on hzoo:i-1066 into 336077e909b34e1e5b83bcb15d23e1803eac559b on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 83ef76ef4b9c535fa84717b76e05c6d17dd29d88 on hzoo:i-1383 into 6284a69137885257b50def57bdb2fb95248c1de7 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 1c6f95bb808d2e4478e1797791503e32af740861 on hzoo:i-1383 into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 99.0% when pulling 42cec0eefb4f8e79a11f26fddc1fbd7ec53cff0d on hzoo:i-1386 into 6284a69137885257b50def57bdb2fb95248c1de7 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.03% when pulling 81b4984e7bf371956780fc2a0583c69d09aaf12b on hzoo:i-1386 into 6284a69137885257b50def57bdb2fb95248c1de7 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 0c0dd8e8bb43f881ddc166f70440b6bde8bfcd3d on hzoo:i-1386 into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 4bfecab39225a67a8c412132a05056656fbbb916 on hzoo:i-1386 into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 7e3177d2bc59404422748e1be8dfe6c5b0af0184 on hzoo:i-1389 into 6284a69137885257b50def57bdb2fb95248c1de7 on jscs-dev:master.\n. \nCoverage remained the same at 99.02% when pulling cdbf0a2b5849e9216dbe92bf683a9b6097cba8a1 on raimon49:fix-quote-at-overview into 6284a69137885257b50def57bdb2fb95248c1de7 on jscs-dev:master.\n. \nCoverage remained the same at 99.02% when pulling 00d8669e62b28be5fbc6ca39d88607706581dec3 on andreastt:machine_readable_inline into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 29c27fc0aeb1d2c71536b69ab683b144544462b5 on andreastt:unix_reporter into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 29c27fc0aeb1d2c71536b69ab683b144544462b5 on andreastt:unix_reporter into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.03% when pulling fd79c4c672f5fadd66b4a6b75d494cf6556e2659 on andreastt:unix_reporter into cae6105c1c166956e4d213889f4807ff5b70bd41 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling a9f81f8b344fc0937b34954417aa35d786c328d0 on aliosv:master into 00e28e4dc1dd4bd55514ff3cb43c7b2ef99b451c on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.02% when pulling 71fa3a60611f691cfae6327ad77521247433937a on hzoo:i-1404 into 527771d4bb5f10783e199a84c3beebeba7ad01d0 on jscs-dev:master.\n. \nCoverage remained the same at 99.02% when pulling 7d5a6fb7d6a0976475d0f8adde0c7f31e994fc70 on hzoo:rename into 527771d4bb5f10783e199a84c3beebeba7ad01d0 on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 98.81% when pulling 07f57c91f03b1958378f34c29095e7fea39281f3 on dreef3:requireCommaBeforeLineBreak-ignoreFunction into 3787c6fbfe18ebdb728fd68c9a03b8578dbad361 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.84% when pulling 9277cb2bfa98409dbf7f7dcc4bc7aab56f22fc50 on dreef3:requireCommaBeforeLineBreak-ignoreFunction into 3787c6fbfe18ebdb728fd68c9a03b8578dbad361 on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.18% when pulling 0dc84cda7715451b79c685d38981d23cfbafd569 on dreef3:requireCommaBeforeLineBreak-ignoreFunction into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling 6c6e932a9c42e3de2e3f181c33f3d150e75dd554 on hzoo:i-1411 into 00e28e4dc1dd4bd55514ff3cb43c7b2ef99b451c on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling e247f2d0585a9338be948c96f90b6c0f52e70715 on hzoo:i-1411 into 00e28e4dc1dd4bd55514ff3cb43c7b2ef99b451c on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling 0740e97776e01ee9ae0760b7ef4a65f691434fc2 on hzoo:i-1411 into 00e28e4dc1dd4bd55514ff3cb43c7b2ef99b451c on jscs-dev:master.\n. \nCoverage decreased (-0.05%) to 98.81% when pulling 98b80422a0cc40cb0ff6b68359cde31ec5055563 on clayreimann:maximum-line-length-new-value into 566d9e48e95b480e78217445b2bf3d102b2151b6 on jscs-dev:master.\n. \nCoverage decreased (-0.05%) to 98.81% when pulling 48af0a0574015dc4fc6a0b1e58d1ab5e10fc4d12 on clayreimann:maximum-line-length-new-value into 566d9e48e95b480e78217445b2bf3d102b2151b6 on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 98.87% when pulling a00ade20035678f8804e9e21651fc6592bfd2b18 on clayreimann:maximum-line-length-new-value into 566d9e48e95b480e78217445b2bf3d102b2151b6 on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.85% when pulling 0de6eed13a17ac1e1ee1ca74846a26f5ae2b9446 on hzoo:i-1416 into b0a55b5731bdf1752ea3abbd0d4ce5412ab1155a on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 98.85% when pulling a4229b9036fb2b6e1e2a78bbdf4719713cf32086 on hzoo:i-1416 into b0a55b5731bdf1752ea3abbd0d4ce5412ab1155a on jscs-dev:master.\n. \nCoverage decreased (-0.0%) to 99.17% when pulling 03a49c987d7e9f4d48a352b70e573bc7f461b819 on hzoo:i-1416 into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 98.86% when pulling 3926df09a4facb8bfdb027d9bc03cd4d7a3cadf4 on hzoo:i-1413 into b0a55b5731bdf1752ea3abbd0d4ce5412ab1155a on jscs-dev:master.\n. \nCoverage remained the same at 98.86% when pulling e4ed495a5f0ccec892791732566bf7ebcccc32de on hzoo:remove-extra-file into b0a55b5731bdf1752ea3abbd0d4ce5412ab1155a on jscs-dev:master.\n. \nCoverage increased (+0.31%) to 99.17% when pulling 16916b03e82bc6090a0b1887f8232185aa0ad4c5 on hzoo:inc-coverage into b0a55b5731bdf1752ea3abbd0d4ce5412ab1155a on jscs-dev:master.\n. \nCoverage decreased (-0.22%) to 98.63% when pulling 66890ba2adc692236e3abd3e1b3f7f422cd83484 on tonyganch:1374-grit-tags into b0a55b5731bdf1752ea3abbd0d4ce5412ab1155a on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.18% when pulling 7e294e864826280f79793ebb865438f68856d6e2 on dreef3:requireAlignedObjectValues into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.18% when pulling 9a1989a2d35a4122a3e6d98179939728e3ef0db5 on dreef3:requireAlignedObjectValues into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.18% when pulling 387c60f3cdd1311c4d7f5db8a6f7aa5dcea29fa1 on dreef3:requireAlignedObjectValues into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.18% when pulling 1c1afdeefa3e840942f6692f2e79c46c8ec5cbf1 on dreef3:requireAlignedObjectValues into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.01%) to 99.18% when pulling 7901095e9b2342ae62c8d49c7101fea6bf6c94a2 on dreef3:requireAlignedObjectValues into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 99.32% when pulling b158f856fafcdff418a657dac06de4e6fb1f8835 on markelog:fix into 4a0322b2acee08bc17ada687d33bb2b25ed181bb on jscs-dev:2.0.\n. \nCoverage increased (+0.0%) to 99.17% when pulling 4950f5d9b1710204e0e3e2ba390c159a01552523 on lpil:ignore-line into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.17% when pulling 426c929bf9373c4e3713ac6a0bba5b8b87097ce5 on lpil:ignore-line into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.17% when pulling 140b7ed2379f7718e6477776b89c6b306d252bc6 on lpil:ignore-line into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.0%) to 99.17% when pulling 8e183a41fd152d926f1b62eea0e0dd1c0a13b4b5 on lpil:ignore-line into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 99.2% when pulling 923c896981f11b63a6ea076ef9ec2102ce45fd9b on mdevils.jsfile-constructor into 0f73289c185cc8b8f4ba2748dcdde1ee2c59b4c4 on master.\n. \nCoverage remained the same at 99.17% when pulling 6142e4f2f41a1aaa1d166c872c5f7ce87888bb7a on mdevils.integration-tests into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on master.\n. \nCoverage remained the same at 99.17% when pulling 6142e4f2f41a1aaa1d166c872c5f7ce87888bb7a on mdevils.integration-tests into f963cd496d4e5d89bb8ffee9abc1c8114b69f41f on master.\n. \n\nChanges Unknown when pulling 82ac88833d71f7ae4d42f988ea658109c2086141 on kolomiichenko:master into  on jscs-dev:master.\n. \n\nCoverage increased (+0.002%) to 98.388% when pulling af4ced81ac5ac2c405348a6451d751d356e3c4c3 on Francisc:disallowSpaceAfterComma into c8b95b8176ebc1823e42a4494385204d48bc00bb on jscs-dev:master.\n. \nCoverage increased (+1.04%) to 97.488% when pulling 3a16cf08ac8e0f503dd60790f8b0e58f269780df on disallow-trailing-whitespace-fix into c86d078797a17fe8fa15d19051a0f920c7f6514f on master.\n. \nCoverage increased (+1.4%) to 96.426% when pulling bf7d1bf76735a5da6ae592f20b9a095ef800770b on hzoo:skipped-tests2 into 87c5daf26f4c02517121e8d7e969071057838958 on jscs-dev:master.\n. \nCoverage increased (+1.4%) to 96.426% when pulling dd1034bd24a1325a0cc5dd58d4c62cf54d6927e4 on hzoo:skipped-tests2 into 87c5daf26f4c02517121e8d7e969071057838958 on jscs-dev:master.\n. \nCoverage increased (+1.4%) to 96.426% when pulling 052ca0c8a5d076f919c1ffbfd3c9d182206d4df7 on hzoo:skipped-tests2 into 87c5daf26f4c02517121e8d7e969071057838958 on jscs-dev:master.\n. \nCoverage decreased (-95.9%) to 0.552% when pulling 1e0361d2554c37bbd9d26cd54c573aad01a3dfe4 on fixup-tests into 5a6fe27cb1c913456475e0ba9bcc772246cd735d on master.\n. \nCoverage increased (+0.02%) to 96.448% when pulling 95030f10ca81eb4b01b7167ae1b96152e38f182f on fixup-tests into 5a6fe27cb1c913456475e0ba9bcc772246cd735d on master.\n. \nCoverage increased (+0.02%) to 96.45% when pulling f661c3a7c08e53c4e9ac5cdde313a6a3aba6da1e on fixup-tests into 44e5187c53a262b79a85068979490a6a7101d11e on master.\n. \nCoverage increased (+0.02%) to 96.45% when pulling 9d1a298b2f24951e151393fd3d0937a6be9ba05c on fixup-tests into 4bb6aef5a541c8a469b3b9bbb31977009e93b03f on master.\n. \nCoverage increased (+0.02%) to 97.508% when pulling 9630a5ac71ed106dd9da6d276dd91978ab14ec43 on yomed:test-url-comment-block into c5d0bd59c451c7155ccfacf754ee1163259e4881 on jscs-dev:master.\n. \nCoverage remained the same at 96.151% when pulling 3b66948ef0e331e7e1a37805ad38547ca4648140 on kiwiupover:update-lodash into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 96.185% when pulling 2a4a4e9454da5468c26503deb11ac72f390bbb2f on schempy:pr-issue-2076 into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage increased (+0.03%) to 96.185% when pulling fbd4568d60cbadec75a342cc01295f3b5496048e on schempy:pr-issue-2076 into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage increased (+0.003%) to 96.154% when pulling 3e9b5662e5f2b60376e9cabda8c93c753ebcbb5b on ValYouW:master into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage decreased (-0.06%) to 96.089% when pulling 2c3ec9fde84628025329aafe0d6a3a2ed1f9815f on denim2x:jscsignore into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage remained the same at 96.151% when pulling d69f24e4acf792d951e6dc2acce1b10315dea25a on fernandopasik:eslint-disable-next-line into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage remained the same at 96.151% when pulling ef9098bbbec3861a929b2f850e53f918018e31d7 on andreyvolokitin:patch-1 into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage decreased (-0.4%) to 95.704% when pulling ef9098bbbec3861a929b2f850e53f918018e31d7 on andreyvolokitin:patch-1 into 99bdf4f7240110a30ff223fcebcca4868bcdb4e3 on jscs-dev:master.\n. \nCoverage increased (+0.008%) to 96.784% when pulling bda0b91e4482cdd507575b24f445cb669b585e8e on better-error into 4a935aa0bd8ad45595bcf0c57adfa232c6c0de07 on master.\n. \nChanges Unknown when pulling 6b8e17efc9f2a757b085c69ed164aafa818bfa35 on revert-dep into * on master*.\n. \nCoverage remained the same at 96.777% when pulling 675f9f2e727a61893f1dfadd5b671b5109817933 on revert-nested-node-modules into 9ce1c9bd58d9a860b4d49ea8bba7b794ba7a75ab on master.\n. \nCoverage increased (+0.001%) to 96.786% when pulling 68a77c0e393d66fc25134cf618e27583cf5bb7ea on issue2224 into be0734f765409ef0063d8dedfbaad44e6e6292fc on master.\n. \nCoverage remained the same at 96.784% when pulling cb7b653245ce7dad29db1b31d5b254ab1b93adb9 on jscs-eslint into 3c3c33f91607066ceeec7192454cbc09fc10a672 on master.\n. \nCoverage remained the same at 96.784% when pulling 39e5dd133cef1a68216fee6f0e1b2d400b5726e7 on thanks into f611d0cf8da7965d400ab2f9c4ff489d0c0f0598 on master.\n. \nCoverage decreased (-0.06%) to 96.723% when pulling ecd9396d4d8a6e8e6e08858d32ef62ad52fe4ba7 on kylepaulsen:kylepaulsen/indentation-consistent-option into 2cdb26d172fc8e19779dffcbab88ca8ab8f06fb9 on jscs-dev:master.\n. \nCoverage increased (+0.04%) to 96.821% when pulling 41ca94e4fb6ba182cae4ef09b8545a23804ff112 on kylepaulsen:kylepaulsen/indentation-consistent-option into 2cdb26d172fc8e19779dffcbab88ca8ab8f06fb9 on jscs-dev:master.\n. \nCoverage increased (+0.04%) to 96.786% when pulling ac9d7ff96e174363ca364802418e00d087eb5191 on kylepaulsen:kylepaulsen/indentation-consistent-option into 724b2df8e2fa1db75ff0fc61dab86ca7efc67a47 on jscs-dev:master.\n. \nCoverage decreased (-0.03%) to 96.747% when pulling cbf974c5ada76da254160b217d66490009731861 on markelog:2250 into 9eaa1f7c619a356b4d887c60760d2eb36543a59f on jscs-dev:master.\n. \nCoverage remained the same at 96.747% when pulling bd3115c2c72dbba7104637228888765ba97ed4db on sanderboom:typo into a215e672ad76270881bfc7252a954762119c48a3 on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 96.713% when pulling c3f051edb295c0d49d040fed81a52f5f588a3a6e on graingert:prevent-defaults-overriding-config into 5885239955167317593c0896420651c46114b135 on jscs-dev:master.\n. \nCoverage decreased (-0.02%) to 96.713% when pulling 1da372ca8c1372eef888a837cb57cd077bbf3796 on graingert:prevent-defaults-overriding-config into 5885239955167317593c0896420651c46114b135 on jscs-dev:master.\n. \nCoverage increased (+0.003%) to 96.733% when pulling 72a2aec092a72c198858b972f397ad6a3c351fbe on graingert:prevent-defaults-overriding-config into 5885239955167317593c0896420651c46114b135 on jscs-dev:master.\n. \nCoverage increased (+0.003%) to 96.733% when pulling 72a2aec092a72c198858b972f397ad6a3c351fbe on graingert:prevent-defaults-overriding-config into 5885239955167317593c0896420651c46114b135 on jscs-dev:master.\n. \nCoverage remained the same at 96.666% when pulling a9642443d370cd51d68089cd16b73e59afb3adca on AlexJuarez:facebookPreset into b419c66b593474b906e29cfd3ac44ad938391fec on jscs-dev:master.\n. \nCoverage remained the same at 96.666% when pulling 8526aaffb07dfedc5171d3795882ddb328a35f36 on markelog:master into 71e1b29c343583cb4c5dbdfaed43855bba214385 on jscs-dev:master.\n. \nChanges Unknown when pulling 1425cb367f3f97dd4bfeb8b8901d7b13b3683b4d on tomayac:patch-1 into * on jscs-dev:master*.\n. ",
    "michaelhogg": "I too was very surprised to discover that JSCS's error suppression directives don't have function scope. Their behaviour reminds me of C preprocessor directives (ie: they operate at file-level and have no knowledge of JS scope).\nI agree that this is not \"wrong\", but I think it's very unexpected for JS developers, who are used to the function scope of ECMAScript 5's \"use strict\" directive and JSHint's directives.\nJSHint's docs specifically mention the scope of the directives:\n\nThese comments are function scoped meaning that if you put them inside a function they will affect only this function's code.\n\nI think JSCS's docs need to make it clear that the directives don't have function scope.\n. ",
    "leeight": "+1\n. ",
    "jedireza": ":+1: I'd like this to travel all the way back to my home directory ... that way I could have ~/.jscsrc as a default.\n. ",
    "rwjblue": "Updated to add a couple tests.\n. @markelog - I am implementing automated style checking for Ember (which is completely ES6'ed), and would like to be able to use JSCS.  I have everything working with these changes (using a linked version) over in this branch:\nhttps://github.com/rwjblue/ember.js/compare/code-style-rules\nWe have quite a bit of code, so I am implementing the rules one at a time (it is a relatively massive effort).\n. A few points regarding the comments above:\n- It is not possible to ship with multiple esprima versions as far as I know, and you likely would never want to do that anyways. Therefore a flag would have to accept a custom path to Esprima. I think that instead of using --harmony (and locking ourselves in to all that the phrase harmony infers) we should use --esprima-path. This would end up as something like --esprima-path ./node_modules/esprima (or somesuch). Is that acceptable and what you intend?\n- On the subject of not extending the public API (and lock ourselves into SemVer commitments): in order to avoid changing the signature I am happy to remove the change to the constructor and simply set the private property directly. That way we do not have any external API changes, and we can remove this functionality if we want once Esprima 2.0 ships. Exposing changes to the command line seems to be a much larger change to the public API as nearly all consumers of JSCS seem to be using the command line.\n- Regarding the need for a custom script in the consuming codebase: it is highly likely that Ember would be using JSCS's programmatic API and not the command line interface (so changing the CLI is not a requirement for us).\nI am happy to do what is needed to land this, and definitely want to make sure we get the best implementation possible.\n. @mdevils - Just to confirm: you are saying that we should expose a CLI option that is like: --harmony some/path/to/esprima ?\n. > > It is not possible to ship with multiple esprima versions as far as I know\n\nWe can commit esprima#harmony to the repo, not good (although it's common practise for some devs), but better to leave it for user to deal with.\n\nAbsolutely, that would work (but it seems somewhat distasteful to have all of Esprima \"vendored\" in our repo). We could also fork Esprima, update package.json (perhaps to esprima-harmony), and use that package/module with a simple boolean flag.  This is essentially what esnext is doing with this repo.\n\n\nI am happy to remove the change to the constructor and simply set the private property directly\n\nIt might be better to pass a boolean value than a module object to the constructor. Would like other consumers to use that as well, like grunt, gulp and IDE plugins.\n\nI am not sure how this would help. We need to provide a specific Esprima version/module to ensure AST compatibility with other tools in the pipeline (this allows a build process to avoid parsing the same files multiple times). Currently, Esprima's harmony branch is not complete, and it is common for tools to use specific forks or SHAs to ensure the generated AST is correct. A couple examples:\nhttps://github.com/esnext/esnext/blob/master/package.json#L31\nhttps://github.com/stefanpenner/es3-safe-recast/blob/master/package.json#L22\n\n\nIt is highly likely that Ember would be using JSCS's programmatic API\n\nWhy?\n\nWe will be using it from a build tool (most likely a Broccoli plugin), and there is no need to force that tool to use spawn or exec when it could simply invoke the checker directly.\n. @mdevils - To my knowledge, there is no timeline for shipping a release with harmony baked in.\n. @mikesherov - Yes, absolutely.\n. @mikesherov - Thank you, sorry for going absent here... \n. @mikesherov - I am pretty swamped right now (much is going on in Ember-land), and if you have the time I would love to have this landed.\n. @markelog - Awesome!!! Thank you!  Any chance of a patch release for this?\n. @markelog - No worries!! Keep up the awesome work!\n. Also, the newer getFirstNodeToken method is much better/easier to use,  thank you for adding it.\n. @zxqfox - Yeah, that definitely works.\n@mikesherov - Thank you, that is very kind! I had updated Ember's custom rule to use the new API's before (or just after?) raising this issue.\nMy intent here was mostly to make sure y'all knew about the potential problem for rule authors, and so that you could collectively decide how to handle removal of methods from (possibly inadvertently) public classes.\n. @hzoo - Yeah, makes sense.  Should I close and reopen there?\n. This seems to parse properly with Esprima 2.2.0.  See this online demo  for an example.\n. @hzoo - Awesome, thank you for the work around!!\n. A little follow-up:\n- A more updated version of estraverse is needed to use with 2.2.0 of Esprima (which is easy to fix).\n- Esprima 2.2.0 (and master) do not support parsing spread arguments yet, but the custom fork that JSCS uses does (must have been manually worked around?).\n. @zxqfox - Yes, I completely agree. Unfortunately, we are in a weird position because some features that are needed (and are supported by other parsers) break parsing in both the custom fork that JSCS uses (let { get } = SomeThing;) and the main upstream Esprima version (someFunc(...someArray)) so we are forced to pick our poison (and decide what features are unsupported).\n. Also, is there an issue in JSCS-land for tracking the move to drop the custom fork of esprima-harmony in favor the main upstream version?\n. @mikesherov - That is awesome!  Thank you for your continued hard work both here, and in Esprima itself.\n. I could just be misunderstanding the diff/changes here, but it seems like input and output are swapped in this.\n. Ahhh!!! Thank you, sorry for the noise.\n. Yep, looks great.  I just got confused between the two different (and opposing) rules.\n. ",
    "ffesseler": "\nAnother AST processor isn't an easy switch because it doesn't have the same extras like the token and comment list that esprima provides.\n\nAre you sure about that ? Looking at the docs, it provides both token & comments.\nI've forked the project to see how far I can go. \n. ok thx. I'll stick with the //jscs: disable workaround for now :)\n. ",
    "qraynaud": ":+1: \n. ",
    "benesch": "Sweet, thanks!\nJSHint, for example, when invoked as\njshint -\nwill always read from stdin, even if stdin is marked as a TTY.\n. Yup works for me! Thanks!\n. @mrjoelkemp how's that? To use the function constructor, you'd need to write the string to a temporary file or you won't see the stream buffering\u2014and the buffer size varies based on the OS and resource utilization. This approach more directly tests the issue.\n. Oh, gotcha gotcha. I misunderstood. You're right.\n. Oh, I think this is ready to go as-is unless you have concerns about the test implementation?\nThe other approach of feeding jscs 64+ KB of data ends up taking ~5s to complete now that we don't introduce syntax errors.\n. Unless I've missed something in the docs, only spawn gives you access to the child process's stdin stream.\n. Huh, you learn something new every day. Rebased!\n. Why not extract https://github.com/mrjoelkemp/node-jscs/blob/3a82d8ee8a3227e7d01a68c30772b180e129ea0b/lib/cli.js#L112-L130 into a checker method checker.checkStdin()?\nThen you can just add a spy on checkStdin and avoid process.stdin entirely.\n. Sweet! Thanks a bunch, guys.\n. That's actually my preference too, but it's a harder linter to write. Would\na \"disallowFunctionAssignment\" work? That would allow passing functions as\narguments but disallow simple function assignments to variables.\nOn Saturday, August 30, 2014, Morgan Cheng notifications@github.com wrote:\n\nSome developers believe that function declaration should be favored over\nfunction expression, at least in root scope level.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/569#issuecomment-53974337.\n. @mikesherov what are call expressions?\n. @mikesherov I've added a requireFunctionDeclarations rule. It currently only disallows function expressions where they could reasonably be replaced with a function declaration\u2014i.e., the simple case of assigning a function to a variable or declaring a variable with an initial value of a function:\n\n``` js\nvar x = function () {\n}\n```\nSo assigning functions to object members, for example, is still allowed, because you can't use a function declaration there:\njs\nmodule.exports = function () { }\nWhat do you think?\n. Oh my bad. I forgot my branch was a month out of date. This should do it!\n. Ack. Travis failure seems to be an issue with the just-released version 2.5.6 of JSHint. I'll leave it for now since I don't know how you guys want to fix that.\n. Sure thing! Happy to help. Thanks for landing this!\n. ",
    "vtintillier": "I missed that issue when creating #623. See PR there.\n. Involving @Krinkle as original author.\n. Involving @Krinkle as original author.\n. Indeed I missed that part in http://javascript.crockford.com/code.html.\nThanks\n. Involving @Krinkle as original author.\n. @markelog How could I add a test? My understanding is that this file you points to must be a valid file with no jscs issues when used with the right preset.\nOr do you want me to add a \"fake\" commit where I add a new line before curly bracket, see it success, then add my real change and remove that added line break? Loos strange to me. Or is there an existing file that tests for reported issues instead? Could not find one.\n. Involving @Krinkle as original author.\n. Rule renamed.\n. ",
    "kefniark": "Ok, it seems more easier this way. So I will remove those parameters and let it work as you said for initialization.\nI just have one question about \"You should be able to do a similar technique with case vs. break\".\nFor case element, the style depend on the first case element, then the following code doesn't work :\njs\nswitch(value){\ncase '1':\n    break;\n    case '2':\n    break;\n}\nFor \"break\", do I need to consider the same things and have the same style for all \"break\" in the same switch statement ?\nThe following example is OK\njs\nswitch(value){\n    case '1':\n    break;\n    case '2':\n    break;\n}\nBut this one should not work\njs\nswitch(value){\n    case '1':\n    break;\n    case '2':\n        break;\n}\n. I think this should be OK\n. Hi Ronkorving,\nBy default, crockford style indentation is working fine (even before this issue).\nThis is what mikesherov said earlier by \n\nThe current validateIndentation, for example, allows both indented case vs. switch or not, depending on the style of the first case statement.\n\nIf you're looking for a way to be more strict, only accept this indentation style and refuse all others. Unfortunately there is no way to do this for the moment.\nEven with using --preset crockford, indentation checking will still be the same.\nA strict mode (with parameters) could easily added to the validateIndentation.js but this is another issue.\n. In #550 @mikesherov said 3 weeks ago :\n\nI plan on land a bunch of stuff tomorrow, if @markelog doesn't get to it first. \n\nbut after that nothing changed, this issue is still a \"new rule value\" and the #550 is still open.\nThis should be available soon\n. @mikesherov pong!\nThanks for this review, I'm sorry I don't have time to fix it now.\nBut I'll try to take care of it within 1 or 2 days\n. Ok, so I fixed most importants problems that you have noticed :\n- early returns\n- space between 'function' and '('\n\nthere a second iteration of SwitchStatement\n\nI replaced it with a BreakStatement iteration which doesn't need any foreach loop and which is more simple. I don't know why I directly did it like this last month :/\n. Yes I know, I tried to use a tool provided by phpstorm which should have rebase my forked repo. It seems that he have merged all the update since the fork.\n. ",
    "mocheng": "Some developers believe that function declaration should be favored over function expression, at least in root scope level.\n. IE6 & IE7 is not extinct yet. Due to this fact, some IDE editors emit warnings for trailing-comma.\n. @mrjoelkemp  The definition of \"naive\" might be project-specific. So, the regex of \"naive\" should be configurable in addition to a default value.\n. +1\nIt would be better to customize it.\na ? b : c sometimes is OK. But, nested conditional expression is hard to read. e.g. a ? b : c ? d : e\n. @mikesherov  @alawatthe  thanks for your direction.\n. ",
    "caitp": "Lets find out\n. Yeah this seems to be okay, all good this time.\n. ",
    "hesher": "Yes. \nI'll give it a try.\n. Jshint does that?\nOn Tuesday, August 19, 2014, Mike Sherov notifications@github.com wrote:\n\nJSCS currently doesn't implement a hoisting check because of JSHint, which\nis awesome at it. JSCS is currently intended to deal with style and not\nprogramming gotchas, and this allows us to be lazer focused at style guide\nenforcement.\nIf in the future we revisit this decision, we can reopen this issue then.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mdevils/node-jscs/issues/574#issuecomment-52668789.\n\n\nTyped on my mobile device keyboard.\n. ",
    "arthurschreiber": "This is mainly for an application of mine, where we check in the node_modules folder with all of it's contents. Unfortunately, the .gitignore file of node-jscs causes all of it's dependencies to be ignored. :cry: \nThis change fixes the issue I see, while still making sure that node_modules does not get checked into the node-jscs repository.\n. I'm working on a Node.js app, and we keep all the app's dependencies (so the whole node_modules folder and all it's contents) under version control in git. (I know this is not the \"favourite\" approach of handling dependencies in the Node community, but we need to ensure we can deploy even if the npm registry goes down.)\nI installed jscs through npm, and did something like git add --all node_modules/node-jscs. Unfortunately, the .gitignore file at node_modules/node-jscs/.gitignore specifies node_modules, so all of the node-jscs dependencies were ignored and not committed. I was able to work around this by passing --force to git add, but that's a shitty workaround.\nNow that node-jscs specifies /node_modules instead of node_modules, the node_modules folder of node-jscs is no longer ignored if node-jscs is bundled with some other app. I hope that explains this a bit better. :smile: \n. Right, but I installed it using npm install git+https://github.com/mdevils/node-jscs.git, as I need  https://github.com/mdevils/node-jscs/commit/bb3009180260e4b4319c21527fabc0c005f53ddf to be able to install jscs on windows.\nxmlbuilder <= 2.4.0 had dependencies on individual lodash modules, which created a crazy dependency tree, which in turn had longer paths than supported on windows.\nSo, all in all, a bunch of issues coming together, and this seemed the easiest fix. :)\n. Oh, sorry for opening a new issue! I tried searching through the issues list but did not find anything related. I hope this gets resolved soon.\nThanks!\n. ",
    "kayoub5": "@markelog done.\n. ",
    "kilemensi": "It's somewhat related but the requirements of #451 seem to be a bit outside the scope this PR. To me #451 looks like it requires ability to mix and match different var declaration styles. As of this PR, the var requirements are as follows:\n- \"disallowMultipleVarDecl\": true there can only be var declaration except for-loops\n- \"requireMultipleVarDecl\": \"onevar\": similar to disallowMultipleVarDecl but limited to function scope.\n- \"requireMultipleVarDecl\": \"nonconsecutive\": similar to \"requireMultipleVarDecl\": \"onevar\" but but only for consecutive declaration statements.\n- \"requireMultipleVarDecl\": \"onedecl\": each declared variable must have a separate var terminated by a semicolon i.e. two variables can not be declared using same var.\nLooking at #451, it requires both \"requireMultipleVarDecl\": \"nonconsecutive\" and \"requireMultipleVarDecl\": \"onedecl\".\n. Hey @markelog \nSorry for that. I had forgotten the two files (implementation and test). Hope all is OK now.\n. Hi @markelog\nI'm still using this in my project since the functionality provided by this pullrequest is stil missing even in the latest jscs for me, but, code-wise, I haven't kept up with recent jscs changes and may be a new pull request might be best at this point.\n. I've just had a quick look but I think changes made by @hzoo in #749, especially the strict optional kind of supersedes this PR.\n. @markelog \nThanks for the patience. I didn't notice there were some missing file(s) (I think I was stupid enough to create the PR on master instead of it's own branch).\nI've recreated the PR (Using @coveralls a7bd0ac) and I think it should be clear what I was trying to do and why #749 pretty much accomplishes the same thing\n. @markelog \nThe new strict option of `disallowMultipleVarDecl (new in a sense it was added later than this PR was first opened) does the same thing that this PR was trying to achieve. Since that one has already been accepted and pushed out, I think we should contrinue with it, unless I'm missing something.\nI've updated my project's .jscsrc to use the \"disallowMultipleVarDecl\": \"strict\" and so far so good.\n. ",
    "roebuk": "Any news on this ticket? I'd be hugely grateful for the \"onedecl\" option.\n. ",
    "chyld": "Yes, I'm pulling from NPM.\nThanks for the info.\n. ",
    "luanmuniz": "When the inline error suppression will be available?\n. ",
    "Moeriki": "I did try with the hyphen. Didn't work either indeed.\n. ",
    "avishnyak": "One interesting proposal from the conversation on Reddit:\nAdd a configuration for minimum block size before the rule kicks in.  This would prevent the rule from suggesting extra padding lines in very short functions/code blocks.\nExample:\njs\nWidget.prototype.exec = function(n) {\n    var method = n > 0 ? 'get' : 'set';\n    return this[method](n);\n};\nI'm open to thoughts/suggestions on this.\n. Hi Markelog,\nI have provided the opposite rule, fixed indentation and added a bunch of unit tests.  Hope that helps.\n. @markelog Should be good to go now.\n. There is one issue with the rule as implemented right now.  What is your opinion on the following case which is valid msjsdoc format?\n``` js\n    var jQuery = function (selector, context) {\n        /// \n        ///     1: Accepts a string containing a CSS selector which is then used to match a set of elements.\n        ///     \n    1.1 - $(selector, context) \n        ///     \n    1.2 - $(element) \n        ///     \n    1.3 - $(elementArray) \n        ///     \n    1.4 - $(object) \n        ///     \n    1.5 - $(jQuery object) \n        ///     \n    1.6 - $()\n        ///     \n2: Creates DOM elements on the fly from the provided string of raw HTML.\n        ///     \n    2.1 - $(html, ownerDocument) \n        ///     \n    2.2 - $(html, attributes)\n        ///     \n3: Binds a function to be executed when the DOM has finished loading.\n        ///     \n    3.1 - $(callback)\n        /// \n        /// \n        ///     A string containing a selector expression\n        /// \n        /// \n        ///     A DOM Element, Document, or jQuery to use as context\n        /// \n        /// \n    // The jQuery object is actually just the init constructor 'enhanced'\n    return new jQuery.fn.init(selector, context, rootjQuery);\n};\n\n```\nSpecifically, will the lines between the XML tags fail this rule? I guess if they have at least 1 space they won't which is good.\n. I don't think so.  After some testing, it seems to have a problem with the first character of the file no matter what is there.\nI added a blank line and still got the same error & stack trace.\nat angular-polyfill.js :\n     1 |\n--------^\n     2 |function minErr(module) {\n     3 |    return function () {\nI have tried changing encoding of the file in WebStorm and that seems to not have any effect.  I wonder if the error is somewhere else in the file but the pointer does not show where the error actually is?\n. Unfortunately, I'm under a tight deadline so I can't do that right now but I was able to narrow down the error to the following code:\n``` javascript\n            function instantiate(Type, locals) {\n                var Constructor, instance, returnedValue;\n            // jscs:disable requireFunctionDeclarations\n            Constructor = function () {};\n            // jscs:enable requireFunctionDeclarations\n\n            // Check if Type is annotated and use just the given function at n-1 as parameter\n            // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);\n            Constructor.prototype = (_.isArray(Type) ? Type[Type.length - 1] : Type).prototype;\n            instance = new Constructor();\n            returnedValue = invoke(Type, instance, locals);\n\n            return _.isObject(returnedValue) || _.isFunction(returnedValue) ? returnedValue : instance;\n        }\n\n```\nThere is still a bug in that JSCS does not get the line number correct when reporting the error, but for now I'll just turn off that rule using comments.\n. ",
    "takueof": "@markelog Thanks reply.\n\nwould like to send us a PR?\n\nNo. I don't intend the PR.\nThis is pure BUG report.\n\nYou basically did it anyways.\n\nI'm sorry, I couldn't understand the meaning of your remarks (I'm not native English speaker...).\n\nI found this problem when programming JSCS's rule for Flycheck (on-the-fly syntax checker for GNU Emacs).\nI wrote this bug report with the intent of the following points:\n- node.js 0.10.x process.exit() has a problem in MS Windows\n  - This probrem was fixed for node.js 0.12.x (joyent/node#3584)\n- But node.js STABLE version is 0.10.x (not patched)\n- So, please use \"Fix suggestion\" hack, I want to avoid problems\nThat I intended.\nDo you get what I want to say?\nBest regards.\n. @markelog\n\nMe neither :-), i meant you already proposed the fix and it doesn't require any tests since we can't make travis run on Windows and because node-exit would be a dependency and we don't test a dependencies.\n\nI understood (thanks a detailed description).\n\nSo all you would have to do is modify package.json and cli module, you can even do that through github interface, without cloning our repo on your system. It would take you a couple of seconds, i'm saying this because it might be more satisfying to do this yourself.\n\nUm...did you mean that:\n1. npm install jscs\n2. open node_modules/jscs/lib/cli.js\n3. edit cli.js (patched) and save\n4. use jscs (my local environment ONLY)\nIs my understanding about that correct?\n\nSure, i research the issue, if you don't have the time to make the fix, we will surely do it ourselves.\n\nI would really like to ask that of you.\nBecause my now computer environment can't use git push (company's system admin blocking...), so can't send Pull Request.\n. @markelog\n\nNo-no, of course not, i meant you could do everything for you to send us a pull request without leaving your browser, check this out \u2013 https://help.github.com/articles/editing-files-in-another-user-s-repository\n\nOh, I didn't know that. Thank you for your courteous reply.\nPlease wait. I'm trying send Pull Request...\n. @markelog\nI'm succeeded pull request #613.\nThank you for your very kind support.\n. Fail detail: 'should provide friendly error message if config is corrupted' in test/cli.js.\n'should provide friendly error message if config is corrupted' test is not completed if use exit instead of process.exit().\nNext and after tests are not run.\nBut #587 example executed success.\n. @markelog Thanks!\nYour support patch d703ae07ced636f6f4ba48407242a494f28df73e is also cool :)\n. ",
    "h4": "I use 1.5.9\nMy config: https://gist.github.com/h4/d0bfb59157c07b870e98\nIt's reproduced with version from current master.\n. ",
    "mattyurka": "Similarly, this is failing on //= require something, which is syntax used by sprockets. It would be nice to have a way to configure jscs to allow this.\n. ",
    "benjycui": "OK, and I also have no time to develop this rule recently, but I will try if I have time. Sorry and thanks. :)\n. ",
    "tregusti": "I got this too just now. I guess some more test coverage is needed, build is green =)\n. ",
    "koistya": "Any update on this issue? It seems like adding // jscs:disable doesn't make any difference in .jsx files, jscs still tries to validate everything.\nUnexpected token < at ./src/pages.jsx :\n    18 |    // jscs:disable\n    19 |    return (\n    20 |      <div className=\"container\">\n---------------^\n    21 |        <div className=\"row\">\n    22 |          <div className=\"col-sm-4\">\n. @mrjoelkemp the latest one (1.7.3 as of now). It seems like it doesn't work if a file contains JSX, see #709.\n. @gustavohenke is there a way to use a custom esprima parser (in order to make jscs to handle files with JSX)?\n. As far as I understand it uses either esprima or esprima-harmony-jscs:\nhttps://github.com/jscs-dev/node-jscs/blob/1f4f8adabd0b21afbdb2fc0333575acfb6a2c666/lib/string-checker.js#L29\n. Maybe checking if require('esprima-fb') is available and use that instead of esprima-harmony-jscs would be a quick fix? What do you think?\n. Illegal space before closing round bracket at ./config/preprocessor.js :\n     6 |  process: function(src, path) {\n     7 |    return ReactTools.transform(\n     8 |      path.match(/\\.jsx$/) ? '/**@jsx React.DOM*/' + src : src,\n--------------------------^\n     9 |      {harmony: true});\n    10 |  }\n. @mikesherov, @mdevils take a look now, is this something you would be willing to merge? If so, I will try to add tests.\n. Just have added a unit test for string-checker\n. I just have tested manually with both CLI and .jscsrc option, works fine.\n. I'm wondering, why does this unit test fail with Error: timeout of 2000ms exceeded\n``` js\nit('should use a custom esprima provided in the config file', function(done) {\n    var data = 'import { foo } from \"bar\";\\n';\nvar result = cli({\n    args: [],\n    'no-colors': true,\n    config: 'test/data/cli/esprima.json'\n});\n\nprocess.stdin.emit('data', data);\nprocess.stdin.emit('end');\n\nreturn result.promise.always(function() {\n    assert(console.log.getCall(0).args[0] === 'No code style errors found.');\n    rAfter();\n    done();\n});\n\n});\n``\n. RemovingisTTYdidn't make any difference.\n. @mikesherov I just copied a unit test from above and replaced the input string withimport { foo } from \"bar\";It fails with a timeout error. I checked the code manually, it works with both --esprima CLI flag and \"esprima\" setting in .jscsrc config file (valided JSX code by using 'esprima-fb' esprima setting). But I don't know how to make the unit test work.\n. I have the same issue in [react-starter-kit](https://github.com/kriasoft/react-starter-kit) after upgrading to3.0.2.3.0.3doesn't fix it, take a look https://travis-ci.org/kriasoft/react-starter-kit/builds/123586977\n. Just have copied from the existing test above.\n. Right, I guessconfigis always defined at this point.\n.lib/options/esprima.jsis called from string-checker.js but it shouldn't depend onrequire`, right? Because it is supposed to work in a Browser environment.\n. ",
    "scottgonzalez": "For the single argument case with objects and arrays, there is no space on either side (both the first and last argument exception apply, though the multiline requirement is dropped). jQuery LOVES exceptions.\n. @markelog I explained this in IRC this morning. The style guide doesn't cover every possible case. The wording alone is incorrect; you need to look at the code examples. I can update the style guide to cover every possible case if that would make you happy. But I can assure you that @mikesherov's most recent comment is what's intended.\n. > What code example? I don't see any func( a, { obj: 'whatever' } ); anywhere. I also don't remember that team has agreed on that code style.\nYou don't see it because there's no exception for it. The rules say \"Always include extra spaces around elements and arguments.\" This is then followed by exceptions. You'll notice that all of the exceptions show multiline code blocks. The case of a single argument of an object or array on a single line is the case that's not shown in which we remove the spaces.\n. The spaces are removed only in cases where there's absolutely no chance of confusion due to lack of spacing. A single argument means that there's nothing to be confused about with commas, so the spacing between the paren and the brace/bracket isn't necessary. On a multiline object or array, the newlines provide the clarity. I didn't create all these exceptions, but at least this one makes sense to me and doesn't seem obscure at all.\n. I think the point is that something && ( { a: \"alpha\", b: \"beta\" } ) would never occur, so there is no exception. Though I wonder about things like ({}).toString.\n. > > so there is no exception\n\nI think we would need to document that.\n\nWhy would we document code that would never exist? Can you provide a single valid example of an inline object in a group?\n\n\nThough I wonder about things like ({}).toString\n\nWhat is the use-case for that?\n\nIt's a fairly common alternative to Object.prototype.toString and without the parens it will generate a syntax error.\n. > > It's a fairly common alternative to Object.prototype.toString\n\nNot aware of that pattern, what is the meaning of getting [object Object] string?\n\nIt's a reference to the method, not the result of the invocation. There's even a module in jQuery core that does exactly this, but has a level of indirection that replaces the wrapping parens with an AMD module: https://github.com/jquery/jquery/blob/master/src/var/toString.js (class2type is {}).\n. Looks correct. Thanks.\n. ",
    "elsigh": "Just adding a vote to include a semicolon rule here. I get the argument, but only using jshint because of accidentally forgetting a semicolon seems like a bummer. There is otherwise a lot of overlap and overhead to run both tools on every change. \n. Oh awesome, that's exactly what I want.\n. ",
    "uglow": "@mikesherov, are you able to provide an example of a valid stylistic or functional reason for this rule?\n. OK, so this is a thing now? DDD, \"diff-driven design\"? Wow. I can understand making code easy for people to read, and by extension, making diffs easy to read. But this seems like people who would use this are exploiting an omission in the design of ECMAScript and hoping that every browser implements the VM in the same way. And that worked out well for everyone last time, didn't it. :unamused: \nFWIW, I wouldn't have built this rule. The only reason I knew it existed was I upgrade JSCS and had the Airbnb preset, which must turn this rule on by default.\n. Thanks for the patient explanation Mike. \n\nOn 19 Aug 2015, at 8:12 pm, Mike Sherov notifications@github.com wrote:\n@uglow, it's not an omission in the design of the language nor a VM quirk. It's a legitimate change made in ES5 specifically for the diff/minimal future change scenario.\nIt may seem weird, but reducing the noise in diffs is an important consideration for some code reviewers.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "pohutukawa": "I think blacklisting variable names is a possible solution, but prone to circumvention through \"inventiveness\" of other developers trickiness. However, together with a min length, this might actually already be quite helpful. In fact anything that helps to kerb \"silly\" variables and widely scoped \"short\" variables helps.\n. Too bad this has been closed. I have just sussed out some regexes:\nWhat I'd use for naming of ...\n- variables and functions: new RegExp('^_?[a-z][a-zA-Z0-9]{2,}$')\n  This will allow only stuff that starts with a lower case letter, and is at least three characters long, with an optional leading underscore _ (e. g. to indicate \"private\" attributes)\n- classes and types: new RegExp('^_?[A-Z][a-zA-Z0-9]{2,}$')\n  Similar as above, only starting with an upper case letter.\n- constants: new RegExp('^_?[A-Z][A-Z0-9_]{2,}$')\n  All upper-snake case, optional leading underscore _\n- namespaces: new RegExp('^_?[a-z][a-z0-9]{2,}$')\n  All lower-case, optional leading underscore\nI'd guess the rules would need some further tweaking over time, but this should give you already a general idea on what I'm looking for.\nThe option requireCamelCaseOrUpperCaseIdentifiers is too coarsely granular, and doesn't prevent our devs to enforce the rules, e. g. towards using single letter variables, or correct naming schemes specific for different \"things\". The dictionary option mentioned by @hzoo seems quite interesting, but strictly speaking only complementary to my desired outcome. So, still thanks for pointing that out, as that would be good to enable for sane naming as well (I know of sombody who's named a class in a technical application BrigitteBardot, which is not helpful ...).\n. @alawatthe & @mrjoelkemp You're probably right, it'll be hard to do for JavaScript. I must admit, I'm not the biggest fan of JavaScript, due to the fact that many things can be achieved, but one has to circumnavigate the absence of language features/keywords to achieve them, whereas it's simpler in other languages (even if they're dynamically -- but strictly -- typed like Python).\nAnyway, to get back to the questions:\n- With \"types\" I'm talking about things like classes through prototypes only (so far), that then can be used to create object instances (e. g. for declaring that something takes an object of a particular type with particular properties, as opposed to any object).\n- Strictly speaking \"namespaces\" in JavaScript are plain old objects as well, but they're used for scoping/segmenting code. I like this to be made clear through variable naming.\n- Constants through const seem to be an ES6 construct not available in browsers, yet. So for us, we're still using var for declaring them. However, (just like with the namespaces), we're indicating them by convention through variable naming.\nI know that some of these things are not clearly distinguishable in vanilla JavaScript code. So my initial question was more aiming at an ideal, however, I'd be fully satisfied with some kind of sub-set of this. I find it particularly important to have some way to keep the naming scheme consistent and to prohibit single-letter variables (besides the common exceptions as stated above).\nI'll certainly have a look at the suggestion from @hzoo on jscs-spellcheck, which will give me quite some mileage as well as complementary benefits already. But it just doesn't go far enough ... :-|\n. @alawatthe I've had a look at the source of disallowIdentifierNames. Maybe I can use this to come up with an easy implementation of a rule like restrictIdentifierNames only allowing for \"clean\" names that fit the naming scheme outlined above (configurable via RegExps). So it won't be necessarily possible to distinguish from context between the different identifier cases, but at least I can prevent them from being \"mix mashed\" and restricted from e. g. being single-letter.\n. ",
    "pomeh": "@mikesherov I would say at least this:\n- typeof someVar == 'undefined'\n- typeof someObj.property == 'undefined'\nPrinciples are:\n- both == and === should be treated equally\n- statement could be in an if, a while, a variable assignment and virtually anywhere\n- the order does not matters\nBut it become trickier when we have code like this:\njavascript\nif (foo.bar)\n     baz();\nHere, foo.bar could be a boolean (and the code is OK), or anything else (a function, whatever) and the code should be KO. I don't see any easy way, if it exists, to detect this.\n. @markelog if jscs's contributors like this feature, but can't implement it (for any reasons), I can't try to implement it on my own, then send a pull request. I don't want to create a PR now and see it be rejected because jscs's contributors don't like the feature I proposed. This if just in the \"idea\" stage for now :) But I'm glad you like it !\n. @mrjoelkemp ok thanks :)\nI'll try to have to look at it this week-end if I can get some free time. If anyone else wants to help or to do it don't hesitate to tell me ;)\nBTW I've not seen any detailled recommendations about PR in CONTRIBUTING.md. I'll use MAINTAIN.md as a starting point for now !\n. What are the step required to create a new feature, \"where are the files\", do we need to write test, how to write test, how to run tests, how not to submit a PR with failling tests, how to install dependencies... that kind of stuff. I'm quite confortable with JS so I can discover it on my own, but it's always helpful to have this kind of guide. Also, what about coding style you use ? Well I can run jscs againts jscs but it's nice to tell contributors to do so before creating a pull request.\nSome of this sounds like \"basic\" but it's great to have it write down somewhere I think :)\nHave a look at angularjs CONTRIBUTING.md file: https://github.com/angular/angular.js/blob/d1434c999a66c6bb915ee1a8b091e497d288d940/CONTRIBUTING.md (the most interesting parts when doing a PR are \"Submission Guidelines\", \"Coding Rules\" and \"Commit Message Guidelines\")\n. @mrjoelkemp I started to try to implement this rule (very early stage for now), but one thing I miss is info on Esprima: in a general way what's an AST and this kind of things (a link to Esprima doc should be good), and also how rules work:\n- how to easily test/debug your code (node is not the browser, it looks like less \"accessible\" at first)\n- what's the type of file and errors in check: function(file, errors) { (a pointer to lib\\js-file.js is a simple but nice start for me)\n- what's the difference between JsFile.getTree (Returns token tree) and JsFile.getTokens (Returns token list)\n- what's the difference between nodes and tokens\n- this demo helps me a lot to understand what's going on http://esprima.org/demo/parse.html\n- what is the list of \"type\" values for both nodes and token (values use with iterateNodesByType and iterateTokensByType methods), and show simple example of them (what's a LabeledStatement ?). Using this page http://esprima.org/test/coverage.html I got those lists:\n  - token types: Boolean, Identifier, Keyword, Null, Numeric, Punctuator, String, RegularExpression and \"\"\n  - node types: ArrayExpression, AssignmentExpression, BinaryExpression, BlockStatement, BreakStatement, CallExpression, CatchClause, ConditionalExpression, ContinueStatement, DebuggerStatement, DoWhileStatement, EmptyStatement, ExpressionStatement, ForInStatement, ForStatement, FunctionDeclaration, FunctionExpression, Identifier, IfStatement, LabeledStatement, Literal, LogicalExpression, MemberExpression, NewExpression, ObjectExpression, Program, Property, ReturnStatement, SequenceExpression, SwitchCase, SwitchStatement, ThisExpression, ThrowStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration, VariableDeclarator, WhileStatement, WithStatement\nAlso, one simple question: why is it possible to get all tokens via getTokens which returns this._tree.tokens and it's not possible to get all nodes ? I've seen the iterate method but I would like to access to this._index variable. I guess I'm doing something wrong , but I try to familiarize with the code base and it's API.\nI think some of my questions have their answer in Esprima documentation, but I didn't find anything suitable for me. I do know JavaScript a lot (at least browser's JS), node a little, Esprima & AST not at all. I find it quite hard to go and develop on node-jscs in those conditions, so any \"quick start guide\" would be really appreciated. But it's ok for me, I like to develop so I'll try, I'll learn, I'll fail and repeat until I get some result :)\nPlease not there's no offense in any of my remarks, I like this project and the work you do on it, all of this is my simple naive first-impression feedback on developing on this project :)\n. @mrjoelkemp yes you're right, there is always a learning curve to bypass. As I said, this page esprima.org/demo/parse.html is very very useful to me, because I can visualize my tree and my tokens, you I know exactly what I'm look for (mainly what type of node and token). I think it definitely should be indicated somewhere in the docs :)\nFor the \"starting guide\" I was thinking of how to implement a simple rule and one not so simple rule, allowing new contributors to familiarize with concepts, terms and API. What about reusing a existing rule and explaining it step by step ?\nMaybe all of this discussion should go on another thread :)\nI have solved my problem about the node list in another way. I was doing things in the wrong way.\nIn order to check for specific blocks type (if, try, etc), I had to rewrite the requireNewlineBeforeBlockStatements check function. I've added a bunch of tests too. All existing and new test are passing. For info, this commit does not resolves my initial problem for now (passing array to requireNewlineBeforeBlockStatements), it only prepare things for what I'll code later. I want to be sure it's ok for you now before going on.\nBut I have one question about this: I've found in lib\\utils.js a list of all keywords where curly braces are a stylistic choice, but in this list I don't see:\n- function\n- switch\n- finally\n- with (I know it's a bad practice to use it, but it still exists anyway)\nIs it normal they are missing from the list ? As far as I know, all of the following code snippets are valid, so I don't know why thoses keywords are not present in the list:\n``` javascript\nfunction foo() {}\nfunction foo()\n{}\nswitch(foo){}\nswitch(foo)\n{}\ntry {\n    foo();\n}\nfinally{}\ntry {\n    foo();\n}\nfinally\n{}\nwith(foo){}\nwith(foo)\n{}\n```\nAnother thing I don't understand is why both case and default are listed. Sure, the following code is valid:\n``` javascript\nswitch(foo)\n{\n    case \"bar\": {\n        baz();\n    }\n    break;\ncase \"bar\":\n    {\n        baz();\n    }\n    break;\n\ndefault:\n    {\n        baz();\n    }\n    break;\n\n}\n```\nbut this is as valid as this one:\n``` javascript\nif(foo)\n{\n    {\n        var bar;\n    }\n    {\n        baz();\n        baz();\n    }\n}\n{\n    while(foo)\n    {\n        {\n            bar();\n        }\n    }\n}\n{\n    foo();\n}\n```\nAs you can see, I've added blocks statements where they might not be exepected, but where they are perfectly valid. So IMHO, adding curly braces to switch and default is not required at all.\nIn my commit, I do check curly braces style for function, switch, finally and with keywords, while I do not for switch and default. Is it ok for you or should I add those two also ? And in general, what do you think about this algorithm for now ? Does it looks ok for you ? If yes, the next step for me will be to only test for desired value (only verify if statements if the user said requireNewlineBeforeBlockStatements: ['if']).\nAlso, whiling I was working on this feature, I've found a bug in JsFile.findNextToken and JsFile.findPrevToken, and I have made a PR to fix it. My current patch for requireNewlineBeforeBlockStatements is only valid if this PR is accepted.\n. > In regards to why the keywords you listed are missing, the list is used in the requireCurlyBraces rule. The stylistic choice is indicative of whether or not braces are included.\nI get your point but then why try and catch are listed ? They do require curly braces, they're not optional:\n``` javascript\ntry\n  whoa();\ncatch(e)\n  console.log('failed');\n// SyntaxError: missing { before try block\n```\nI think there should be 2 lists. This can be done in 2 ways:\n- one list with all curly braced keywords (with function, try, if, siwtch, etc..), and one with the subset where curly braces are optional (with if, case, ...),\n- one list with all keywords where curly braces are always required, and one where they are optional (this technique avoid some duplication, eg. the if is only listed once)\nIn any case, I'll add both case and default to the algorithm.\n. @mrjoelkemp this sounds great to me :+1: \n. @markelog I've done the correction, based on the simplification I proposed earlier. Is it ok for you now ?\nLet me know if anything else needs new modifications.\n. > I also think that this rule has the potential for a lot of false positives. This could be remedied with regexes, but 1) you're offloading the work to the end user and 2) the regexes would have to bank on positioning, casing, prefixed and/or postfixed characters to better guess what's an actual violation.\nI think we can have something strong using regexes, to match only comment like this // TODO: xxxx for example. It sound quietly simple to me atm.\nAnd the idea of the user supplied keywords/regexes list is also to \"bypass\" that false positives problem: if you get one of them, then you just have to edit the associated regex with no code modifications. And it brings a lot of power to end users. And we can propose some default values, like for TODO/FIXME-comment or whatever.\nThis way, the rule could be used with its default (\"disallowKeywordInComments\": true), or with user supplied values (\"disallowKeywordInComments\": [\"a\", \"b\"]).\n. Yes sure, I'll give it a try (when I'll get some free time!) :)\n. Yes yes for sure ! I'm just dying under the amount of work atm :/ So if you or someone else wants to implement it feel free to do it ! :)\nBTW, I've other ideas for JSCS, I need to create some new issues for them :)\n. Thanks @hzoo for this addition. I have a question: why the exceptions list is only used for if and else statements ? I think it should be possible to have code like this too:\njs\nfunction foo (bar) {\n    switch (bar)\n    {\n        case 'foo': return 'bar';\n        case 'baz':\n                var baz = 'qux';\n                // more statements\n                return baz;\n        default: return 0;\n    }\n}\nIn this case, the exceptions for case statement would make sense. What do you think ?\n. Sorry but I don't understand your question. What's your point ?\n. Ok. Does something like this ok for you instead ? I think its also more clear and simple (disclaimer: I didn't tested it right now)\njavascript\nif (nextToken.type === type && (value === undefined || nextToken.value === value)) {\n. ",
    "rxaviers": "\n@rxaviers to be clear, what specifically should be an error?\n- typeof variable === \"undefined\" if variable is local (expected variable === undefined); or\n- typeof object.prop === \"undefined\" for properties check (expected  object.prop === undefined);\n\nThanks\n. ",
    "dscape": "Thank you :) \n. ",
    "avaly": "Bump up! Would love to get this merged soon.\n. I will rebase and rename the rules and update the PR tomorrow. Thanks!\nOn Sep 23, 2014 2:26 PM, \"Mike Sherov\" notifications@github.com wrote:\n\n@avaly https://github.com/avaly ping!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/621#issuecomment-56518680.\n. Rebased and renamed.\n. @mikesherov bump\n. \n",
    "corykrug": "We can no longer enforce Crockford-style syntax. Doesn't this break syntax enforcement for a lot of people?\n. ",
    "kompot": "Seems like the problem is with my fork that uses esprima-fb to support React's JSX syntax.\nAs long as jscs is not based on esprima-fb (I wish it would someday) I think this is not a bug, closing this one.\n. ",
    "andreineculau": "That's fine, it's secondary, but can you list all options?\nIt's much easier to 1) see added options with each new release 2) get\nstarted with your own style (and then remove the noisy nulls).\nOn Thu, Sep 18, 2014 at 6:13 PM, Gustavo Henke notifications@github.com\nwrote:\n\nDefault value is null for every option, what means no lint will occur :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/636#issuecomment-56062897.\n\n\nandreineculau.com http://www.andreineculau.com\n. I agree. Searched for rules, not options\n. ",
    "Skywalker13": "Hello,\nThank you, I will look in order to implement the rule myself.\n. Thanks for the review and the ideas.\n. You're welcome, thanks for the merge.\n. :+1:\nThe problem appears with the validateQuoteMarks rule when ignoreJSX is true. For example:\n\"validateQuoteMarks\":                       { \"mark\": \"'\", \"escape\": true, \"ignoreJSX\": true },\nChange ignoreJSX to false, then it works for this case.\n. duplicate of #2141 \n. Arf.... it was a hack during the development...\n. Thanks\nI think that it's a good idea but it is not very efficient because it loops on all tokens. I've implemented something different. See f146c82 and 226c2d9.\n. Yes, but the message is not the same and you have already several rules with the same assert like:\n- (require|disallow)MultipleLineBreaks\n- (require|disallow)CommaBeforeLineBreak\n- (require|disallow)DotNotation\n  etc, ...\nThen, are you sure?\n. done\n. done\n. ",
    "joesepi": "I'll try to get this done soon, @mikesherov. Is there a cutoff date for 1.9?\n. I believe I have a new rule for this:\nhttps://github.com/jscs-dev/node-jscs/pull/930\n. I did a couple commit --amends after an initial style check fail. That's part of the reason why you see two coverall reports.\n. This fix is for this feature request:\nhttps://github.com/jscs-dev/node-jscs/issues/646\n. @mrjoelkemp and @mikesherov and whoever else is interested. I updated the rule and test. I moved the bit where the comment is broken up by lines (for better carat placement) out of the check itself. My intent, after discussing it with Joel earlier, is to move it to a comment util or somewhere similar. I thought this would be a good point to get feedback and if things are good, I can pull it out entirely. Thanks!!\n. @mikesherov and @mrjoelkemp and others: all good comments. Thank you. I have updated the code and ran npm test locally so Travis shouldn't complain. Please recheck and comment if need be.\n. You guys, these are all great comments. Thank you! The code has improved greatly. Check it out!\n@mrjoelkemp @mikesherov @zxqfox \n. Sorry folks. I wanted to wrap this up before I went on vacation but it didn't happen. I will try to finish it in the coming days. \n. ",
    "GrayedFox": "yes would also like to regulate this through our team! :+1: \n. Yes I think so :) I know it's minor, but you can't beat consistency right?\n. Hey there - sorry for the lack of updates/communication. I am a bit swamped right now with work, and as a junior QA come dev, this would be a good learning curve for me but would likely take a while. Regrettably passing the buck :disappointed: \n. Text copy of the exact console output:\nvalidateLineBreaks: Invalid line break at C:\\Users\\GrayedFox\\WebstormProjects\\QADR\\updateVersions.js :\n     1 |/**\n-----------^\n     2 | * Created by GrayedFox on 4/03/2015.\n     3 | * This script is called whenever the popup for the plugin is opened. It handles writing and restoring values to and from storage.\n1 code style error found.\n. validateLineBreaks is set to LF (which is not Windows friendly?) which is, as far as I know, the only thing that gets unhappy here. I make those comments my self - just a style choice really for descriptive comments present at the beginning of a file.\nWeird thing... If I indent the 3 lines that make up the comment, and then unindent them, or if I insert a new line character (press enter) at the end of the first line and then press backspace and delete the new line, the error goes away.\nSo I end up with the exact same comment lines and style, but with no error (until I reopen the file). Something to do with how JSCS reads the beginning of a file, which differs from how it reads a file which is edited/updated? \n\n. PS Sorry for long reply time, was on holiday in Palermo.\n. Ouch... \nRunning grep \"\\015\" on it outputs \n\n\nCreated by GrayedFox on 8/05/2015.\n\n\nSo there is a /r character there. Why on earth it only appears there and not anywhere else is beyond me. \n. Sorry guys - closing as the plugin is functioning as intended. Seems to be an issue with PhPStorm randomly injecting a /r character here.\n. Oh god... this is embarrassing. I thought I had enforced LF line endings a long time ago... turns out my projects were still running CRLF instead (I think I changed default settings after staring both these projects?)\nFor anyone troubleshooting this type of error in the future and running a Jetbrains IDE - check the bottom right hand corner to see if you are using LF, CRLF or CR line endings (you probably want LF - check within your team). Blergh. \nburies head in sand\n. ",
    "bjdixon": "Hi, I'd like to implement this please.\n. I'd like to implement this one please.\n. I guess I assumed this was for line comments. I'll add block comments if that's desired. Let me know.\nAlso, I had a question. For the 'beside' style this is fine:\n// jscs: disable \n1 + 1;\nbut should 'enable' trigger an error or pass?\n// jscs: enable\n1 + 1;\n. I've added some tests showing that block comments are ignored. I've also added an array to ultils.js to filter out inline configurations and an allExcept parameter to this rule. \n. @mrjoelkemp \nposition is a much better description than mode. I've made that change throughout.\nI've manually hoisted the variable declarations in the check function. Hopefully that's more readable now.\nI used trim and didn't use exceptions.some(...) because I wanted to skip comments that begin with the keywords (ignoring whitespace). trimmedComment.indexOf(exceptions[i]) >= 0 was a bug that I've corrected to trimmedComment.indexOf(exceptions[i]) === 0. All the eslint, jshint etc pragmas begin with the keywords listed. I think that skipping comments if they just contain keywords may be too permissive. eg. // I really like global warming isn't a valid pragma but // global var1, var2 is. Let me know if you disagree with this approach.\nI've made changes to the test descriptions to (hopefully) be in keeping with the style you suggested. I also added a test for stacked comments.\n. @markelog Yeah, I think having the pragma checker function in utils will remove some duplication.\n@alawatthe good point on words that begin comments that could be made up of keywords + other characters. I implemented using a small concatenation instead of the regex + extra special case check as it's faster and should be easier to maintain. If the consensus is to use regex though I'm happy to do that.\nOh, coveralls says I forgot to add tests for utils/isPragma(). I'll update the PR tomorrow with that. Okay, isPragma now has tests.\n. Good point @hzoo  I'll add some tests for nested ternaries. \nI assume disallowMultiLineTernary should be 1 line regardless of any nesting. \nvar foo = (a === b) ? (x > y) ? 1 : 2 : (c === d) ? 3 : 4\nFor requireMultiLineTernary I think each nested ternary should be a line per test, consequent and alternate, no?\nvar foo = (a === b)\n    ? (x > y) \n        ? 1\n        : 2\n    : (c === d)\n        ? 3\n        : 4\nI wouldn't usually use nested ternaries and requireMultiLineTernary is not a style I'd personally employ, so guidance would definitely be appreciated =)\n. @hzoo if you want to go ahead with the separate rule for disallowNestedTernaries I'd be happy to implement that.\nIs there something I need to do so that AppVeyor build doesn't fail?\n. I would like to implement this please.\n. @hzoo Maybe I should return a value from getLevel and cache that? I think that might reduce the redundant walking, but it would introduce a little more complexity. I'm probably missing a simpler strategy that you have in mind. I'm happy to implement this differently. Let me know.\n@markelog yeah, definitely ping me for any updates.\n. Agreed, returning early would be better. There's really no point in checking past the boundary. I'll update the PR.\n. Thanks for the review @mrjoelkemp! I've updated the PR to comply with most of your comments. However, I'm struggling in coming up with the conditions for the last test mentioned. Happy to update the PR again if you or anyone else can point me in the right direction.\n. These would accept the same values as validateIndentation except the deprecated value validateIndentation: { includeEmptyLines }, right?\n- Integer: A positive number of spaces\n- String: \"\\t\" for tab indentation\n- Object:\n  - \"value\": (required) the same effect as the non-object values\n  - \"allExcept\":\n    - \"comments\"\n    - \"emptyLines\"\n. @hzoo I will look at this. \nI think the default behavior of not excepting trailing commas should still be fine as this condition seems to appear when combining the 3 rules (requireSpaceAfterComma, requireTrailingComma, disallowSpacesInsideArrayBrackets).\nMy suggestion would be to add a configuration option to exceptTrailingCommas. eg: \"requireSpaceAfterComma\": \"exceptTrailingCommas\" Let me know if this isn't what you had in mind otherwise I'll submit a PR using this approach.\n. @markelog makes sense. That will be more consistent with disallowCommaBeforeLineBreak\n. As I was touching the files anyway I took the opportunity to add extra tests for disallowSpaceBeforeComma, requireSpaceBeforeComma, disallowSpaceAfterComma and requireSpaceAfterComma in keeping with a previous @hzoo comment\n. Hi @janpieterz , just my opinion but I think the docstring should have \n- Object added to the Types and Values sections\n- a note about the \"ignoreProperties\" being deprecated when used as a string \n- some examples showing the configuration object in the Example section or written out in full in the Valid/Invalid for mode sections would be helpful\nThere are some examples in the docstrings of requireSpaceAfterLineComment and disallowQuotedKeysInObjects\n. @ficristo to look at the parent if of the current else if you should be able to use node.parentNode\n. sorry I pushed before I saw this. I'll update the PR again.\n. There is one test already that should cover this case:\nit('should not report for loops', function() {\n    expect(checker.checkString('for (var prop in rawVars) {}')).to.have.no.errors();\n});\nBut I've added another that hopefully adds some clarity:\nit('should not report for var declaration without assignment', function() {\n    expect(checker.checkString('var x;')).to.have.no.errors();\n});\n. I can't think of a condition where it get's to this point with !nextToken being true. If you can give me a clue, I'm happy to add the test =)\n. ",
    "drublic": "We have the exact same error in our configuration. This seems to be a problem with the opening (.\nWe've had this case with IIFEs in objects. Workaround can be to store values within a function and call this function like so:\nvar foo = function () { \u2026 };\nvar bar = {\n    baz: foo()\n};\n. ",
    "jbesta": "You are right.\nThe problem comes from a fact that parentheses are only necessary to prioritize operations in expressions. ( is still present in tokenized version of the code but is not present in AST representation since it's not needed anymore.\nAnother possible workaround would be\n\nvar x = {\n    key: function() { return true; }()\n};\n\nbut it would fail on requireParenthesesAroundIIFE.\n. @pragmadash Not at all. It was stated that it's workaround - IMHO it is a solution but not preferred way to do this. But as you said, the bug has been fixed so there's no need for workarounds at all :-)\n. @mikesherov Could you provide example?\nYou may look at test strings at test/rules/disallow-space-before-object-values.js\n. @mikesherov I updated spec. It now contains test for two parentheses for both cases: positive and negative report.\n. Sorry, did not notice that.\nI also update rule disallowSpaceBeforeObjectKeys and added few test.\n. ",
    "pragmader": "@drublic @jbesta Are you sure we need to make our code ugly because of bug in tool that should help us to make code better? As I see this bug has been fixed in referenced pull request.\n. ",
    "ahmadnassri": "agreed, currently its an all-or-nothing flag, should be broken down to allow specifics.\n. ",
    "nijikokun": "Updated to remove hoisting notes, as function expressions get hoisted as well (body and name), and to differentiate between them by type.\n. Right now anonymous naming has to be on every function that appears anonymous, not simply on those that are truly anonymous, as it is I understand some people may not enjoy the drastic change of making the jump from one to the other (going from all to just those that are truly anonymous) so as a middle ground it would be great to have fine grain control over the type to determine whether the function requires a name or not (as seen above).\nThese rules specifically: (dis)allowAnonymousFunctions\n. Relevant to #655\n. ",
    "arian": ":+1:\n. ",
    "christianvuerings": "@gustavohenke thanks - would love to use the new rules. This issue to keep track of when the new version is released.\n. @hzoo & @mikesherov thanks!\n. ",
    "tbusser": "Thanks, that would be awesome!\n. @markelog I can try but I've never developed something to run on Node.js before. Let me see how far I can get on my own.\n. @markelog I can try but I've never developed something to run on Node.js before. Let me see how far I can get on my own.\n. ",
    "Bondza": "Absolutely,\nI use jscs from the root of my project. Like this:\n./node_modules/.bin/jscs --config ~/.jscs/config.jscs .\nAnd i try to exclude node_modules by using excludeFiles like the example:\n\"excludeFiles\": [\"node_modules/**\"]\nNow when I run jscs, the function exported from\nlib/options/exclude-files.js seems to get the directory specified by the\n--config option passed in as cwd.\nIn my case that is \"~/.jscs\" which is used by path.resolve() to find all\npaths that should be excluded. Therefore it resolves to\n\"~/.jscs/node_modules/**\"\nHence it will never exclude the node_modules folder located in my project,\nbecause the project is not located at \"~/.jscs\".\nI think the expected behaviour would be that the excludeFiles would be\nresolved each of the paths specified as inputs to jscs?\nOn 7 October 2014 20:41, Oleg Gaidarenko notifications@github.com wrote:\n\nWhich in turn makes it impossible to exclude files from the paths\nspecified to jscs\nCould clarify this?\nWhat would be an expected behaviour?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/669#issuecomment-58237103.\n. Yes, that would be one way to solve the issue. =)\n\nHowever it would mean that for each path provided through the command line\nto jscs, the configuration file would have to specify a relative path from\nthe configuration file directory to the specified path. Making it very\ntedious to use one common configuration file for multiple projects, because\nyou would then have to specify the relative path to each project that is\nusing the configuration file.\nAlso if one would move a project directory, the output from jscs would\nchange for that specific project since the excludeFiles path would no\nlonger match. In my opinion, that is an unexpected output. Do you not agree?\nWhy may that result in an unexpected output?\nOn 7 October 2014 21:24, Oleg Gaidarenko notifications@github.com wrote:\n\nHow about\n\"excludeFiles\": [\"../node_modules\"]\n? :-)\nI think the expected behaviour would be that the excludeFiles would be\nresolved each of the paths specified as inputs to jscs?\nThat might provide an unexpected output\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/669#issuecomment-58244779.\n. Okay, I am entirely sure that I understood your reply correctly. Do you think the behaviour I described would be unexpected behaviour in most cases?\n\nEither way I just want to know if you intend to fix this issue?\n. ",
    "ZeikJT": "My team stumbled upon this problem as well, just as @Bondza did. @markelog I can see how this default might be useful in certain cases but it feels like it is unexpected behavior in many cases.\n. @Bondza I can see how my response might have been confusing, I have edited it for clarity\n. ",
    "aliosv": "Same problem, want to use config from inner folder(external lib).\n. @mrjoelkemp, #1405\n. @markelog, pre-commit hook run this script https://github.com/bem/bem-components/blob/v2/.githooks/pre-commit/lint, but there is a problem: jscs will check all staged files, not taking into account own config.\n. excludeFiles and fileExtesions doesn't work for specified path, i.e. jscs <pathToFile> will check the file regardless of the config.\nI will add tests as soon as i can.\n. add new tests, and modify failed test.\n. @markelog, yes, but i do not see what to discuss. PR adds new feature: check specified path to file by config settings, it's broke backward compatibility, but you still have possibility to check any file using stdin. Maybe you know how to solve my issue in other way?\n. @markelog, https://github.com/bem/bem-components/blob/v2/.githooks/pre-commit/lint#L27\n\u043d\u0430 \u043f\u0440\u0435-\u043a\u043e\u043c\u043c\u0438\u0442 \u0445\u0443\u043a\u0435 jscs \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0444\u0430\u0439\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u044b \u0432 \u0435\u0433\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0435, \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0445\u043e\u0447\u0435\u0442\u0441\u044f.\n. @markelog, https://github.com/aliosv/node-jscs-test project to test. Also i find my error: each file is checked on excluding(https://github.com/jscs-dev/node-jscs/blob/master/lib/checker.js#L38), so problem only in cheking on allowed extension.\n\nSo can you add a falling test?\n\nfails the test that you commented(https://github.com/jscs-dev/node-jscs/pull/1405/files#diff-9511adab08ed83a63c8bb84eb0d54617R63).\n. @markelog,\n\nWe follow common practise here.\n\nnow understand, in this case there is no sense in this issue.\n@zxqfox, \n\nOur excludeFiles doesn't skip files if you pass them directly as arguments.\n\nin my test - skip(https://github.com/aliosv/node-jscs-test/tree/excludeFiles), check please.\n. ",
    "birkestroem": "Sorry for the late description.\nThe current indent calculation breaks on nested if conditions with inline functions spanning multiple lines.\nFollowing recommendations of the style checker makes your code look like this:\nfunction fn(done) {\n    if (Array.isArray(myArray) &&\n        myArray.some(function (n) {\n            return n % 2 === 0;\n        })) {\n            return done(null, {\n                result: true\n            });\n        }\n    }\nThis pull request would make your code look like this:\nfunction fn(done) {\n    if (\n        Array.isArray(myArray) &&\n        myArray.some(function (n) {\n            return n % 2 === 0;\n        })\n    ) {\n        return done(null, {\n            result: true\n        });\n    }\n}\n. No problem. I share your concern, but haven't found a solution yet.\nAs I see it, the rule would need to know a little more about context and rules (requireNewlineBeforeBlockStatements etc.). \nI will make a test when I have time to spare and see if it leads to a solution.\n. ",
    "pdehaan": "Yeah, sorry, I retested this with @hzoo's awesome .jscsrc snippet and everything works as expected!\n. @hzoo Here is a simple use case:\nindex.js\n``` js\n'use strict'\nif (!false) {\n  console.log(true)\n}\nif (! true) {\n  console.log(false)\n}\nif (!!'foo') {\n  console.log('foo')\n}\nif (!! 'bar') {\n  console.log('bar')\n}\n```\n.jscsrc\njson\n{\n  \"disallowSpaceAfterPrefixUnaryOperators\": [\"!!\"],\n  \"requireSpaceAfterPrefixUnaryOperators\": [\"!\"]\n}\nOutput:\n``` sh\n$ jscs --version # 1.9.0\n$ jscs .\nOperator ! should not stick to operand at ./index.js :\n     1 |'use strict'\n     2 |\n     3 |if (!false) {\n------------^\n     4 |  console.log(true)\n     5 |}\nOperator ! should not stick to operand at ./index.js :\n     9 |}\n    10 |\n    11 |if (!!'foo') {\n-------------^\n    12 |  console.log('foo')\n    13 |}\n2 code style errors found.\n```\nI think the first error is valid. I specified \"requireSpaceAfterPrefixUnaryOperators\": [\"!\"] so there should be an error and I should have typed if (! false) {...}.\nI think the second error is incorrect. I specified \"disallowSpaceAfterPrefixUnaryOperators\": [\"!!\"], so that should be valid syntax, and I would have expected an error on the other example since it does have a space after the !!: if (!! 'bar') { ... }.\n. Same results with v1.13.1...\nI think this pretty much sums it up though:\nOperator ! should not stick to operand at ./index.js :\n    11 |if (!!'foo') {\n-------------^\n    12 |  console.log('foo')\n    13 |}\nNote that the error message says \"Operator ! should not stick to operand at ./index.js : if (!!'foo') {...}\"\nIt says \"Operator ! but the actual operator is !!. I'm guessing that the requireSpaceAfterPrefixUnaryOperators rule needs an additional check to make sure that the ! operator it isn't actually an !! operator.\n. @markelog I'm pretty sure it's a bug in the requireSpaceAfterPrefixUnaryOperators rule.\nIf we specify that we want a space after a ! but not !!, it still parses !! and tries to enforce a space.\n. ",
    "maximal": "That\u2019s what I expected!\nHow about adding this to documentation?\nNeed help?\n. Hmm.\nMy JS config has comments and js extension and I\u2019m still getting an error:\nConfig source is corrupted - SyntaxError: /home/path/to/jscs/jscs-options.js:16\n        \"requireCurlyBraces\": [\n                            ^\nUnexpected token :\nRenaming it to *.jscsrc doesn\u2019t help too.\nI wouldn\u2019t open this issue, if my config was passed.\n. Here they are:\n- http://sijeko.ru/temp/jscs-options.js\n- http://sijeko.ru/temp/jscs-options.json\n. > jscs-options.json works fine for me\nI opened this issue on JS configs only, because json without any comments is inconvenient.\nmodule.exports = { in JS file worked out just fine.\nThanks.\n. I\u2019ve read the docs and didn\u2019t found any reference to js or jscsrc.\nOf course I didn't understand how to configure JSCS with comments.\nBut now, I know how to do it.\nSupport of JS is present.\nTherefore, this issue can be closed. But #675 (which is on documentation) not.\n(imho)\n. But, where is explained what jscsrc is?\n. Yes. That\u2018s why I closed this issue and leave pull request in #675 open.\n. Which order do we have?\n- package.json \u2192 .jscsrc \u2192 .jscs.json \u2192 .js\n- .js \u2192\u00a0package.json \u2192 .jscsrc \u2192 .jscs.json\nOr?..\n. > .js is not fully supported, would you like to change that?\nIn #674 it was said that it\u2019s supported.\nI\u2019m confused a little.\n. > If we gonna add this in i think we should re-do the previous paragraph too\nI don\u2019t think it\u2019s necessary. Espetially if .js files aren\u2019t involved in autosearch process (package.json \u2192 .jscsrc \u2192 .jscs.json).\n. Points in my editions are:\n- user can config this util not only in .json;\n- what .jscsrc is.\nIf support of js and jscsrc is not fully implemented yet, let\u2019s leave this issue until better times.\n. I\u2019m just not as good in English as I wanna be :-(\nHow to do a better phrasing?\n\nYou can write your config in plain .json, .js, or in a special .jscsrc format, which is JSON with comments. The recommended way is jscsrc.\n\n?\n. How to write a proper .jscsrc?\nI renamed my old .js and it didn\u2019t work out.\nConfig source is corrupted - SyntaxError: Unexpected token '\nHere\u2019s the file: http://sijeko.ru/temp/jscs-options.jscsrc\n\nAnyway, I don\u2019t think that inventing own config formats is good idea.\nAt least, .js and .json are highlighted well automatically in most of the editors, while for .jscsrc we need to manually set the language.\n. > look at possible values and i'm sure you will figure it out\nThanks!\nI think jscs could show a line where error ocured.\nAnd why does this error not show up in .js ans .json?\nThat, by the way, is just one more reason not to invent own config format.\n. > Would you like to fix that?\nI would like you to fix that :-)\nAnyway, I didn\u2019t develop npm packages before, but if you haven\u2019t enough time, I could try.\n\nit's a valid js, but not valid JSON.\n\nThat\u2019s my fault. I am extremely sorry.\n\nIf I were you I\u2019d leave only .js/.json and not invent my own format; just because of already known MIME type, parsing and highlighting in most of editors and systems.\nBut in any case, you decide :-)\n. How about this phrasing?\n. ?\n. Okay. I\u2019ve deleted branch already.\n. It\u2019s necessary to mention in docs that JS config object must be preceeded by module.exports = {.\nFor people which are not familiar with node.js system, and just want to write their codestyle.\nThanks.\n. ",
    "fengmk2": "I merged fb branch into https://www.npmjs.org/package/esprima-harmony just now.\n. ",
    "trevorparscal": "The \"esnext\" option doesn't seem to work in .jscsrc files, only on the command line.\n. ",
    "lukaszfiszer": "@mikesherov I have absolutely no preference. It's just that after updating to jscs 1.7.0 I suddenly got a few dozens of indentation errors in my codebase. So I've started digging to find the case. \nThe example I provided is taken from my angular code, so it's quite an edge case. But the following example, which also fails, is in my opinion quite common. Moreover it's puzzling and hard to debug, because the line causing the bug is way before the line indicated by jscs: \n``` javascript\n(function(window, $){\n$(function() {\n\n    var app = window.app;\n\n    app.bar = function() {\n        // to be implemented\n    };\n\n    app.foo = 'baz';\n\n});\n\n})(window, jQuery);\n```\n. ",
    "aaronmars": "Thanks!  @mikesherov \nShould I look out for 1.7.2?\n. ",
    "lencioni": "I just came across this problem with the following code:\njs\nthrow new Error(`foo ${'bar'}`);\nDo you think it is related or should I open a new issue?\n. https://github.com/jscs-dev/node-jscs/issues/748\n. I've run into this as well, but with ES6 object literals. Here's a simplified repro case.\n``` js\nvar foo = {\n  bar() {\n    return;\n  }\n};\nmodule.exports = foo;\n```\n``` json\n{\n  \"fileExtensions\": [\".js\"],\n  \"esnext\": true,\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n  },\n\"disallowSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n  },\n\"disallowSpacesInFunction\": {\n    \"beforeOpeningRoundBrace\": true\n  }\n}\n```\n. Sounds good, thanks for following up. When do you expect the next release?\n. @hzoo Thanks for the link, but in my case, the text is the exact same as the background color so changing the value for that color would change both. In the issue you linked, they are different colors (if you look closely, you can actually see the text in their screenshot, but not in mine).\n@mrjoelkemp I think an acceptable solution would be to take the approach that ack took by allowing people to specify which colors they want via switches or options in .ackrc:\n--[no]color                   Highlight the matching text (default: on unless\n                                output is redirected, or on Windows)\n  --[no]colour                  Same as --[no]color\n  --color-filename=COLOR\n  --color-match=COLOR\n  --color-lineno=COLOR          Set the color for filenames, matches, and line\n                                numbers.\nThis allows me to have configuration like:\n--color\n--color-filename=underline green\n--color-lineno=yellow\n--color-match=bold\n. It is unlikely that I will have time soon, but a quick description for anyone else who might want to pick it up might be nice.\n. Also, this code:\njs\nvar foo = [`bar ${baz}`];\nleads to an Illegal space before closing square brace error.\n. ESLint has a fork of Esprima that might be worth looking into.\n. Sorry!\n. I whittled it down to this case:\njavascript\nvar myobj = {\n  myfunc() {\n    return null;\n  }\n};\nIt seems to be related to the ES6 object literal property value shorthand syntax. Removing custom esprima and adding \"esprimaOptions\": { \"tolerant\": false }, had no effect.\n. ",
    "ashwell": "Can I pile on with what appears to be the same issue for me?\njavascript\nopts.moduleName = oldPath.replace( config.client + \"/\", \"\" ).replace( /\\.js$/, \"\" );\nresults in: (with \"esnext\": true in .jscsrc)\nOperator , should stick to previous expression at tasks/traceur-es6.js :\n    31 |    // set module name\n    32 |    opts.moduleName = oldPath.replace( config.client + \"/\", \"\" ).replace( /\\.js$/, \"\" );\n-----------------------------------------------------------------------------------^\n1 code style error found.\ncommenting out the esnext option in the rc makes for a happy jscs result. I'll use the disable/enable comments for now.\nEdit: Just fyi (I know it is not related) this is the rule failing (but not really failing) disallowSpaceBeforeBinaryOperators\n. ",
    "danez": "The issue was fixed in https://github.com/ariya/esprima/commit/fc79b9d827e4c5549ed845e5ecb27f2014e764c0\nBut no new release yet and esprima-fb needs merging.\n. You don't need to use jsxcs for jsx files. We also have jsx files and use jscs with configuration to use espeima-fb. That works perfectly.\n. ",
    "ruimarinho": "@mikesherov that is awesome, I was looking forward for this fix. Any chance of bumping to 1.9.1?\n. Thank you @mikesherov :raised_hands:\n. Sounds good to me.\n. @mrjoelkemp thank you :) happy to contribute!\n. @jacksonrayhamilton regarding your inline comment about underscores, the only thing that the custom sort does is to group what we usually consider symbols ($, _) together. Underscores are the exception because they are considered words. \nGiven the following object:\njs\nvar obj = {\n  A:1,\n  a:2,\n  _:3,\n  $:4\n}\nIs it expected to be considered sorted when it looks like this:\njs\nvar obj = {\n  A:1,\n  _:3,\n  $:4,\n  a:2\n}\nOr this:\njs\nvar obj = {\n  _:3,\n  $:4,\n  A:1,\n  a:2\n}\nPersonally, I think the last version is the natural one, but I'm ok with keeping the default sort algorithm if we agree it's the best option :)\n. The problem is that it enters the field of natural sorting in js. I'd rather use something like https://github.com/litejs/natural-compare-lite then and add natural-asc and natural-desc. Would it be ok to add this package or equivalent?\n. Added several new sort methods - it's now possible to choose between native, case-insensitive, locale and natural sorting.\n. @mrjoelkemp @hzoo thanks for the input - babel-jscs was indeed the culprit, but just found that localeCompare is broken on some versions of node. For that reason, unless we write specific tests for those versions, then it's best to leave (asc|desc)-locale sorting out for now.\n. @megawac just took underscore.string for a spin and found some issues with its implementation - for instance, an object with keys [ '$', 'A', '_', 'a' ] would be sorted to [ '$', 'A', '_', 'a' ] instead of [ '$', '_', 'A', 'a' ]. Obviously this is a subjective one, but the latter seems more natural to me.\nShall we stay with natural-compare?\n. @markelog the current implementation of underscore.string is based on Google Closure's Library and doesn't seem to be a good fit for symbols. Would it be ok to release with the current package and update it when/if we can get underscore.string's implementation improved later on?\n. In addition to @mrjoelkemp's comment, just tested the improvement from dependency flattening from npm@2 to npm@3 and that number gets reduced by ~330 lines. Not a huge improvement, but still nice.\n. Done, thanks.\n. Right, I understand that this layer (parsed configuration rules) may be too far away from this test. I wanted to avoid code repetition, but if you feel it's more inline with the general test model, it's fine by me.\n. Nice catch! Thank you.\n. Yep, removed, thanks.\n. The reason why a custom sort is needed (instead of [].sort() + [].sort().reverse()) is that underscores are considered words. This means that this object would be valid:\njs\nvar obj = {\n  A: 'foo',\n  _: 'qux'\n  a: 'bar'\n}\n...since 65 (A) < 95 (_) < 97 (a). Stylistically, I don't think this is interesting, as symbols are typically sorted at the top or bottom. I believe this opinionated change is acceptable since in future anyone can create other sort functions if they don't find the current one fitting (e.g. asc-native). What are your thoughts? \n. The best optimisation I see for now (but in my opinion in a different phase), would be to compare each property key name with the next one and immediately break out of the loop if a non-expected key is found instead of sorting all keys. I've thought about it before submitting the PR but I wasn't particularly enjoying the implementation I had.\n. @mrjoelkemp what about sorting these registerRule calls? I had some difficulty figuring out if I should just add the new rule to the bottom.\n. When will ES6 come to core so we can remove this \ud83d\ude07?\n. Indeed, I don't understand why the author chose to extend the native String object like this. The alternatives aren't that great and even this solution has its own set of \"bugs\". See https://github.com/javve/natural-sort/issues/7#issuecomment-57134825 for context. Any help here would be greatly appreciated!\n. @markelog unless I'm missing something, it looks like the natural-sort npm package is frontend only (https://github.com/studio-b12/natural-sort/blob/master/dist/natural-sort.js). The sort function is not exported.\nIf you meant https://github.com/javve/natural-sort, unfortunately it's not available on npm (only component). I've given https://www.npmjs.com/package/natural-compare a go and it seems to be exactly like the original module but without the native prototype intrusion. It doesn't look like it's actively maintained, but time will tell. Rebased with master.\n. ",
    "yangsu": "no problem! didn't get around to addressing your comments. Glad can be of help!\n. ",
    "mohsen1": "Thank you folks! \n. well, it's not complaining after I upgraded to ~1.7.2. I guess this bug is not valid then.\n. ",
    "UltCombo": "Test case:\n- Clone https://github.com/es6rocks/harmonic.git\n- In a Windows machine with Node 0.11.x installed, open the command prompt (cmd.exe), cd into the repository root and execute jscs .\nTested on Windows 7 x64 Ultimate, Node 0.11.14, jscs 1.7.3\n. @markelog seeing as Node 0.11 will be the base for 0.12, I believe it makes sense to test against it. Most packages I use work just fine on Node 0.11.\nMost of the time, it only takes very small changes in order to be compatible with 0.11. I can try to triage this issue when I have a bit more of free time.\n. It works fine when I add a -c .jscsrc parameter. Looks like the issue is with the implicit loading of the config file, it is not finding the .jscsrc file even though it is in the current working directory.\n. Weirdly enough, the .jscsrc is actually loaded correctly at this point in both paths (with and without the -c option), however, the checker._isExcluded logic is failing when the -c option is not provided.\n. Found the issue here.\npath.dirname() returns an uppercase drive letter while process.cwd() returns a lowercase drive letter. Then the path.resolve here keeps the original casing and minimatch does not play well with lowercase drive letters apparently.\nThis is probably a Node issue though, I recall seeing some discussion about drive letter casing, I'll have to check on their repository to see if there has been a consensus.\n. The issue could be worked around here by using Minimatch's nocase option on Windows platforms (as Windows paths are case-insensitive anyway).\nHowever, it looks like path.resolve() will be changed to always return lowercase drive letters (https://github.com/joyent/node/pull/8385), so I guess this issue should fix itself when Node 0.12 is released.\n. @markelog \n\nIf you want to run your code on .11 that is one thing (if your thing is doubling your work efforts)\n\nNot when you don't have a choice. There are quite a handful of projects which are only compatible with >= 0.11.\n\nbut you don't have to use jscs with .11 just use it with .10 for code your written for .11.\n\nSure thing, however, I believe it is rather cumbersome to setup tests to have jscs run on .10 and unit tests on .11, in both local development and Travis.\nAnyway, this issue is workable around on my end so no worries. I'll bring this topic to the Node repository which should be the proper place for this issue, and perhaps suggest an workaround on Minimatch.\n. (tested against latest master)\n. This may be a dupe of #729, can anyone link the Esprima bug regarding wrongly reported whitespace around RegExp?\n. Thanks for the link! :D\n. Like module.exports.reporter = getReporter; ? Then it can be re-exported by gulp-jscs. That'd be the closest to gulp-jshint, I think.\n. Oh yes, thought I was in the gulp-jscs repo when I suggested a reporter export. gulp-jscs exposing a reporter would be consistent with gulp-jshint then.\n. I believe so. Thanks @markelog :smile: \nI most likely won't have much free time this week to try it out, so I'm not 100% sure.\n. Though accepting a function as argument is not really necessary, a simple typeof check in the plugins would be enough.\n. :+1: \n. ",
    "Deathspike": "Using a regular expression with a ( or ) seems to confuse JSCS ES6, as well.\n/**\n * Parses the chapter and part to a number.\n * @param {string} chapter\n * @param {string} part\n * @returns {number}\n */\nfunction parseNumber(chapter, part) {\n    var match = chapter.match(/([a-u])$/);\n    var mutation = 0;\n    if (match) {\n        mutation = (match[1].charCodeAt(0) - 96) / 10;\n    } else if (part) {\n        mutation = parseFloat(part) / 10;\n    }\n    return parseFloat(chapter) + mutation;\n}\nIn this sample I would get (on the opening brace inside the regular expression):\n\nIllegal space before closing round bracket\n\nI presume this is related. Otherwise I'll be happy to open a new one.\n. ",
    "qmmr": "Here's my .jscsrc. I've tried a couple of configurations, didn't find a woking one.\n``` json\n{\n    \"esnext\": true,\n    \"disallowSpacesInNamedFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"requireSpacesInFunctionDeclaration\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n\"disallowEmptyBlocks\": true,\n\"disallowSpacesInsideArrayBrackets\": \"nested\",\n\"disallowSpacesInsideParentheses\": true,\n\"disallowQuotedKeysInObjects\": true,\n\"disallowSpaceAfterObjectKeys\": true,\n\"disallowSpaceAfterPrefixUnaryOperators\": true,\n\"disallowSpaceBeforePostfixUnaryOperators\": true,\n\"disallowSpaceBeforeBinaryOperators\": [\n    \",\"\n],\n\"disallowMixedSpacesAndTabs\": true,\n\"disallowTrailingWhitespace\": true,\n\"disallowTrailingComma\": true,\n\"disallowYodaConditions\": true,\n\"disallowKeywords\": [ \"with\" ],\n\"disallowMultipleLineBreaks\": true,\n\"requireSpaceBeforeBlockStatements\": true,\n\"requireParenthesesAroundIIFE\": true,\n\"requireSpacesInConditionalExpression\": true,\n\"requireBlocksOnNewline\": 1,\n\"requireCommaBeforeLineBreak\": true,\n\"requireSpaceBeforeBinaryOperators\": true,\n\"requireSpaceAfterBinaryOperators\": true,\n\"requireCamelCaseOrUpperCaseIdentifiers\": true,\n\"requireLineFeedAtFileEnd\": true,\n\"requireCapitalizedConstructors\": true,\n\"requireDotNotation\": true,\n\"requireCurlyBraces\": [\n    \"do\"\n],\n\"requireSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"case\",\n    \"return\",\n    \"try\",\n    \"catch\",\n    \"typeof\",\n    \"function\"\n],\n\"validateLineBreaks\": \"LF\",\n\"validateQuoteMarks\": \"'\",\n\"validateIndentation\": \"\\t\"\n\n}\n```\n. ",
    "yamalight": "have the same issues. any updates here?\n. ",
    "christophercliff": "If I'm not mistaken, newline () and [] are the only edge cases where you must have a semicolon, so I included them for completeness.\nIn practice, that doesn't come up very often.\n. I'll try to schedule some time for this. Any chance you could direct me to a similar rule I could use as a starting point?\n. Personally, I think it's perferable to let JSHint handle required semicolons. This rule will serve the \"jshintConfig\": { \"asi\": true }, \"jscsConfig\": { disallowSemicolons: true } crowd.\n. I'd appreciate if this landed ASAP because I have immediate need for it, but I understand if you want to wait.\n. Following up to see if we can get this merged. It's certainly useful as-is, and there may not be another semicolon pedant out there willing to implement the inverse.\n. @mikesherov Did a quick check and couldn't find a helper that filters tokens by type and value.\n. ",
    "cloakedninjas": "But my code is as I'd like it, and passed linting earlier on. I have requireSpacesInFunctionExpression.beforeOpeningRoundBrace set to true\nI've even added:\n\"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\nTo match requireSpacesInFunctionExpression but this still doesn't pass\n. ",
    "kilianc": "same here on 1.13.1 \n. +1 on this \n. Thanks @mikesherov ! I am not sure how did I miss that O_O\n. thanks!\n. ? http://jshint.com/docs/options/#strict it doesn't do that\n. oh actually it does!\n. ",
    "shellscape": "same here too, with a twist. I change the file to satisfy the complaint by jscs, and it complains about the opposite!\n```\n\njshint lib test && jscs lib test\n\nMissing space before opening round brace at lib/linters/hex_length.js :\n     9 |    lint: function hexLengthLinter (config, node) {\n    10 |\n    11 |        function canShorten(color) {\n-----------------------------------^\n    12 |            return color[1] === color[2] && color[3] === color[4] && color[5] === color[6];\n    13 |        }\n1 code style error found.\nnpm ERR! Test failed.  See above for more details.\ncomputer: /github/lesshint                                                                           +[git:linter-refactor]\n\u2192 npm test\n\nlesshint@0.9.1 pretest /Users//Code/github/lesshint\njshint lib test && jscs lib test\n\nIllegal space before opening round brace at lib/linters/hex_length.js :\n     9 |    lint: function hexLengthLinter (config, node) {\n    10 |\n    11 |        function canShorten (color) {\n-----------------------------------^\n    12 |            return color[1] === color[2] && color[3] === color[4] && color[5] === color[6];\n    13 |        }\n1 code style error found.\nnpm ERR! Test failed.  See above for more details.\n```\n. ",
    "joshjung": "Is there a resolution for this issue?\n. ",
    "JaKXz": "I'm seeing what @shellscape was seeing as well, I've got all the overrides I could find in my .jscsrc:\njson\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInFunctionDeclaration\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInNamedFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  }\n. ",
    "yelworc": "Sure :)\n. Excellent point! Will do.\n. ",
    "devdoc": "I looked into this a bit further and it seems a bit more complex than single vs double quotes.\nCrockford has (at least in the past) recommended using single quotes for internal strings, and double quotes for external strings. You can see the recommendation in this slide set (slide 51) which is linked to a talk he gave February 9th 2010.\nHowever, he seems to have deleted that recommendation from the slide he used when actually giving the that talk. You can see this if you watch the video at around 53 minutes. The slide set he uses on the video seems newer than the one which is downloadable - on the video he also has additional slides on ES5 stuff.\nCrockford himself seems to be following his earlier recommendation in his own code, he is using both single and double quotes.\n. ",
    "JonathanGawrych": "I would also like to have this option. At work we turn on invisibles in our editors.  When we trim the empty line's indentation, it makes the code on the same block indentation looks disjunct, especially if you are more than 1 indentation out. Because of this, we turn on \"ignore whitespace only lines\" so that the indentation is continual.\nIt's great that our editor (atom) supports the ability to do this, but we then incorporated jscs, and found it complaining everywhere. Currently, we are deciding whether we should disable disallowTrailingWhitespace, or refactor our code. Both options would be very easy and only take a minute, but it would be nice to instead have a third option to allow consistent indentation on empty lines.\nAs a simple example, here is a small section of our code (with \"invisible\" tabs shown):\nfunction ($scope, $location, API, Title, Settings) {\n\u00bb   this.applicant = {};\n\u00bb   this.showProfile = false;\n\u00bb   Title.title = 'Find Applicant';\n\u00bb   \n\u00bb   $scope.watchThis = {\n\u00bb   \u00bb   search: $location.search().search\n\u00bb   };\n\u00bb   \n\u00bb   function init() {\n\u00bb   \u00bb   if ($location.search().search) {\n\u00bb   \u00bb   \u00bb   $scope.applicants = API.Applicant.query({search: $location.search().search});\n\u00bb   \u00bb   }\n\u00bb   \u00bb   \n\u00bb   \u00bb   $scope.location = $location;\n\u00bb   }\n...\nHowever with trimming empty lines, in my opinion, it looks somewhat disjunct:\n```\nfunction ($scope, $location, API, Title, Settings) {\n\u00bb   this.applicant = {};\n\u00bb   this.showProfile = false;\n\u00bb   Title.title = 'Find Applicant';\n\u00bb   $scope.watchThis = {\n\u00bb   \u00bb   search: $location.search().search\n\u00bb   };\n\u00bb   function init() {\n\u00bb   \u00bb   if ($location.search().search) {\n\u00bb   \u00bb   \u00bb   $scope.applicants = API.Applicant.query({search: $location.search().search});\n\u00bb   \u00bb   }\n\u00bb   \u00bb   $scope.location = $location;\n\u00bb   }\n...\n```\nWould the maintainers be open to the idea of a PR that added this option?\n. Wow, that was one heck of a rebase. I believe there were 12 commits affecting validateIndention between when I branched and now.\n~~~Tests for disableTrailingWhitespace/validateIndention  are passing, but disallow-spaces-inside-parentheses is not. I found that this test is also failing on master, so I ignored it.~~~\nNvm. Forgot to do an npm update\n. updated to use forEach rather than for loop!\n. consolidated into one assert!\n. ",
    "danny-andrews": "https://github.com/jscs-dev/node-jscs/issues/726#issue-47036167 Does this rule work for this use-case? I wasn't able to get it to work for switch statements.\n. This doesn't work for me for switch statements.\n.jscsrc\njson\n{\n  \"disallowCurlyBraces\": [\"case\", \"default\"]\n}\nexample.js\njavascript\nswitch(a) {\n  case 1: {\n    console.log('you got one');\n  }\n  default: {\n    console.log('you got something other than one');\n  }\n}\nThis example passes with no errors from jscs.\n. Yeah, that's what threw me off, haha. I'll take a look and see what I can do.\n. @hzoo thanks for pointing me in the right direction! I'll check them out and see what's what.\n. Dupe of #2002.\n. Dupe of #2002.\n. Ah, bummer. So this is a known issue then?\n. I would like to implement it. Douglas Crackford makes a good case for using undefined in place of null (https://youtu.be/rhV6hlL_wMc?t=22m6s). I'll see if I can get a PR running sometime this week.\n. It means sorting your imports in alphabetical order. e.g. This rule would complain about this:\njavascript\nimport a from 'a';\nimport z from 'z';\nimport c from 'c';\nIt should be:\njavascript\nimport a from 'a';\nimport c from 'c';\nimport z from 'z';\n. Sweet!\n. ",
    "kruczy": "just wanted to add a minimal case, same thing happens for:\nfunction test(x) {\n    switch (x) {\n        case 1:\n            return function() {\n                var a = 5;\n                return a;\n            };\n    }\n}\n. ",
    "unindented": "Sorry for not specifying that detail... Yes, I'm using the esnext option.\nFull config:\n```\n{\n  \"excludeFiles\": [\"node_modules/**\"],\n  \"fileExtensions\": [\".js\", \".jsx\"],\n\"esnext\": true,\n\"requireCurlyBraces\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\"\n  ],\n  \"requireSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"case\",\n    \"return\",\n    \"try\",\n    \"catch\",\n    \"function\",\n    \"typeof\"\n  ],\n  \"requireSpaceBeforeBlockStatements\": true,\n  \"requireParenthesesAroundIIFE\": true,\n  \"requireSpacesInConditionalExpression\": true,\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"disallowSpacesInCallExpression\": true,\n  \"disallowMultipleVarDecl\": true,\n  \"requireBlocksOnNewline\": 1,\n  \"disallowEmptyBlocks\": true,\n  \"disallowSpacesInsideObjectBrackets\": true,\n  \"disallowSpacesInsideArrayBrackets\": true,\n  \"disallowSpacesInsideParentheses\": true,\n  \"disallowSpaceAfterObjectKeys\": true,\n  \"requireSpaceBeforeObjectValues\": true,\n  \"requireCommaBeforeLineBreak\": true,\n  \"requireOperatorBeforeLineBreak\": true,\n  \"disallowSpaceAfterPrefixUnaryOperators\": true,\n  \"disallowSpaceBeforePostfixUnaryOperators\": true,\n  \"requireSpaceBeforeBinaryOperators\": true,\n  \"requireSpaceAfterBinaryOperators\": true,\n  \"disallowImplicitTypeConversion\": [\n    \"numeric\",\n    \"boolean\",\n    \"binary\",\n    \"string\"\n  ],\n  \"requireCamelCaseOrUpperCaseIdentifiers\": \"ignoreProperties\",\n  \"disallowKeywords\": [\"with\"],\n  \"disallowMixedSpacesAndTabs\": true,\n  \"disallowTrailingWhitespace\": true,\n  \"disallowTrailingComma\": true,\n  \"requireKeywordsOnNewLine\": [\"else\"],\n  \"requireLineFeedAtFileEnd\": true,\n  \"maximumLineLength\": 100,\n  \"requireCapitalizedConstructors\": true,\n  \"disallowYodaConditions\": true,\n  \"requireSpaceAfterLineComment\": true,\n  \"disallowNewlineBeforeBlockStatements\": true,\n  \"validateLineBreaks\": \"LF\",\n  \"validateQuoteMarks\": \"'\",\n  \"validateIndentation\": 2,\n  \"validateParameterSeparator\": \", \",\n  \"requireCapitalizedComments\": true,\n  \"safeContextKeyword\": [\"that\"]\n}\n```\n. :thumbsup:\n. ",
    "ariya": "Before you pass it to the parser, can't you replace #! with //?\n. A similar example: https://github.com/ariya/esprima/blob/master/bin/esvalidate.js#L128.\n. What if that first comment is removed from the syntax tree?\n. Do you need to specialize it on that one rule? I was thinking of something like:\njavascript\ntry {\n    hashbang = (str[0] === '#' && str[1] === '!');\n    if (hashbang)\n        str = '//' + str.substr(2, str.length);\n    tree = esprima.parse(str, {loc: true, range: true, comment: true, tokens: true});\n    if (hashbang)\n        tree.comments = tree.comments.slice(1);\n} catch (e) {\n    parseError = e;\n}\n. Also, people easily confuse esprima-fb vs esprima. The former, what Facebook deprecated, is probably better characterized as jsxparser, i.e. an ES6+ parser that has some elements of Facebook's own JSX. \nAs for the latter, take a look at https://github.com/jquery/esprima/issues/1099 and Esprima 2.x is steadily covering those ES6 features.\n. @markelog  Still not supported, if you paste the sample code to http://esprima.org/demo/parse.html.\n. ",
    "jacksonrayhamilton": "This should definitely not be added.\n. > If there is a feature of a language that is sometimes problematic, and if it can be replaced with another feature that is more reliable, then always use the more reliable feature.\nAutomatic semicolon insertion is known to be problematic. Its tolerance deserves no place in any style guide nor any style checker.\n. I don't use yoda conditionals because they look weird, but they definitely have practical benefits. I don't think it is good logic to assume they should be banned just because he does not use them. He would probably appreciate the fact that they can reduce errors.\n. @Krinkle They help prevent accidental assignment. Putting a variable on the left side begs you to mistype a == or === as a =, which is an unfortunately-syntactically-legal C-ism we inherited. Yoda conditionals are good because they eliminate these potential bugs. By putting a keyword or constant on the left side, errors will be raised if you ever mistype something.\n``` js\n// Both are legal, both look similar, but are very different.\nwhile (a == null) { / ... / }\nwhile (a = null) { / ... / }\nwhile (null == a) { / ... / } // Equivalent to the first form.\nwhile (null = a) { / ... / }  // Uncaught ReferenceError: Invalid left-hand side in assignment\n```\nYou can't do tricky stuff like this anymore (IMO, for the better):\n``` js\nvar text = 'test test test test',\n    pattern = new RegExp(/t(e)(s)t/g),\n    match;\nwhile (match = pattern.exec(text)) {\n    console.log(match);\n}\n```\nFor some reason it just looks weird though:\n``` js\nif (value === undefined) {\n    // Do something.\n}\nif (undefined === value) {\n    // Do something.\n}\n```\nI don't know how to explain it. Any non-philosopher believes that 0.5 = 1/2 is the same as 1/2 = 0.5, it should not look weird, but for some reason it just does.\nThere is a benefit to allowing it / not explicitly forbidding it, which is withheld from anyone using this preset despite that Crockford has not (to my knowledge) commented on the matter.\nThen again: I suppose JSLint, and the extra equals sign in ===, each make this error less likely, so the unexplainable \"sacrifice in readability\" becomes less worthwhile. Additionally, I cannot find any instance of Crockford using a yoda conditional, so that implies what his style is.\nIf we're trying to create a definitive set of styles, now is the best time to be strict. JSCS should solve issues like this, not spark debates over them; so I will concede that it is probably better to make this decision than to leave it to the masses to bicker about, which would be especially ironic because this tool is supposed to resolve such issues.\nSo, I will re-forbid yoda conditionals.\n. Don't close this. Yoda conditionals aside, the current rules need to be updated.\nCrockford's own code does not pass under the rules currently in upstream; jscs jslint.js reports \"1148 code style errors found.\", jscs jscheck.js reports \"202 code style errors found.\", and jscs rq.js reports \"84 code style errors found.\"\nMy branch, on the other hand, reports \"7 code style errors found.\" for jslint.js (for interesting indentation decisions), and \"No code style errors found.\" for jscheck.js and rq.js. It is a huge improvement.\nAs for his response, perhaps you should follow up with him if you require greater clarity.\nBecause Crockford's programming style is influenced by JSLint, I contend that using Crockford's rules means you are influenced by JSLint's opinions by extension. JSLint's opinion is that assignment should not occur within conditional statements, thereby obsoleting yoda conditionals.\nIf it was possible to also \"forbid assignment within a conditional\", we could \"justify\" forbidding yoda conditionals. I cannot say whether it is the job of a style checker or a linter to handle such a thing, but in any case, that feature does appear to be implemented in JSCS yet.\nKeep in mind that he says \"there is no good reason to do this,\" but he does not say \"don't do this\" (though he could be implying that), and we are reminded that JSLint doesn't forbid them, and neither does his style guide, which in my mind strongly implied that the decision should be left open to the developer. But for the reasons I stated in my last comment, it would probably be better to just forbid them anyway.\n. Oh haha. Great :P\n. http://jslint.com/:\nTry this snippet:\njs\nvar a = {\n    a:5\n};\nAnd you get this:\nMissing space between ':' and '5'.\na:5\n. Such errors could certainly could be resolved by plugins, but in this particular case (and perhaps other cases, if they exist) it would be much easier to make JSCS more flexible.\nFlycheck does offer an API for parsing shell command output, so you'd imagine I could regex for your error message and ignore it as necessary. But even if I return an empty list of errors in the case of matching \"^No configuration found\\\\. Add a \\\\.jscsrc file to your project root or use the -c option\\\\.$\", Flycheck always finds it suspicious when a checker program exits non-zero without errors (as it probably should). (Source.)\nSo I actually have to add a new feature to Flycheck to get it to ignore the JSCS error:\n``` lisp\n(defconst flycheck-javascript-jscs-no-configuration-error-regexp\n  (concat \"^No configuration found\\. Add a \\.jscsrc file to your project \"\n          \"root or use the -c option\\.$\")\n  \"Match the dreaded jscs error.\")\n(defvar flycheck-ignorable-outputs\n  `((javascript-jscs . (,flycheck-javascript-jscs-no-configuration-error-regexp)))\n  \"Map checkers to regexps specifying ignorable outputs.\")\n(defun flycheck-determine-output-ignorability (output checker)\n  \"Determine if OUTPUT for CHECKER can be ignored.\"\n  (let ((regexps (cdr (assq checker flycheck-ignorable-outputs)))\n        regexp\n        ignorable)\n    (while (and regexps (not ignorable))\n      (setq regexp (car regexps))\n      (when (string-match regexp output)\n        (setq ignorable t))\n      (setq regexps (cdr regexps)))\n    ignorable))\n(defun flycheck-finish-checker-process\n    (checker exit-status files output callback)\n  \"Finish a checker process from CHECKER with EXIT-STATUS.\nFILES is a list of files given as input to the checker.  OUTPUT\nis the output of the syntax checker.  CALLBACK is the status\ncallback to use for reporting.\nParse the OUTPUT and report an appropriate error status.\"\n  (let ((errors (flycheck-parse-output output checker (current-buffer)))\n        (ignorable (flycheck-determine-output-ignorability output checker)))\n    (when (and (not ignorable) (/= exit-status 0) (not errors))\n      ;; Warn about a suspicious result from the syntax checker.  We do right\n      ;; after parsing the errors, before filtering, because a syntax checker\n      ;; might report errors from other files (e.g. includes) even if there\n      ;; are no errors in the file being checked.\n      (funcall callback 'suspicious\n               (format \"Checker %S returned non-zero exit code %s, but no errors from \\\noutput: %s\\nChecker definition probably flawed.\" checker exit-status output)))\n    (funcall callback 'finished\n             ;; Fix error file names, by substituting them backwards from the\n             ;; temporaries\n             (mapcar (lambda (e) (flycheck-fix-error-filename e files))\n                     errors))))\n```\nI could try to convince the author of Flycheck to add the above code, plus an API for specifying ignorable errors for checkers. But now I'm hopping between library authors, trying to get one person to make his program compatible with someone else's. Making JSCS more configurable in this regard seems to require a lot less JS than the alternative amount of LISP.\n. It's not as simple as just ignoring a non-zero exit code (which also requires modification of Flycheck). At least, it's not desirable, as I'd still like to know about other errors. e.g.:\nbash\n$ echo '{\"a\":,}' >> .jscsrc\n$ jscs foo.js\nConfig source is corrupted - SyntaxError: Unexpected token ,\nSo I'd still want my checker plugin to alert me, as it does:\n\nSo I do need to match some strings to determine which errors to ignore.\nBeing able to suppress the missing config error would eliminate this necessity.\nThis feature is probably useful outside of my particular case. The Atom JSCS plugin has actually added a feature to do nothing when a config file isn't found. (Though this doesn't do much more than suppress console.warn's in debugging mode, as the linter package normally silences all errors. Even important ones, like the malformed JSON one.)\nThe Sublime Text JSCS plugin also seems to swallow errors, though it does have a fast track for empty output, so you could speed things up for free by taking the fast track.\nEven though some linter plugins are generous enough to swallow all errors (even important errors), luckily some plugins are more suspicious. You should assist suspicious plugins in white-listing unimportant errors (unimportant in the context of blindly checking files with a \".js\" extension, that is) by providing this flag.\nThis addition is a meager and worthwhile price to pay to add another program to your \"Friendly packages\" list and to simplify plugin integration.\n. I have already hacked my way through this. Personally I could continue npm linking my fork and not have to deal with this error. I just thought other Flycheck users would find it valuable if they didn't need to google their way to my fork, or have to discover some blog post that instructs them to copy and paste that gigantic chunk of Elisp, just to get JSCS to work. Or to avoid a hack like \"sudo echo '{}' >> /.jcscrc\". IMO, we shouldn't have to resort to hacks, or have to reimplement features like config searching. The program should just work out of the box without giving us a hard time.\nI really think it would be a good thing to add this, because if you don't, and if I can't convince the Flycheck author to \"clutter\" his API with an \"error message whitelist\", then this problem will remain a barrier to entry for Emacs users.\n. I don't think exit codes would make things any better. I'd still need to add support to Flycheck to check for particular exit codes. All it does now is check for non-zero exit codes.\nI don't think 127 is a correct or good code to emit. \"command not found\" is different from \"config not found\". \"Command not found\" implies that you forgot to do npm install -g jscs.\nIf we had to choose some exit code, the closest would probably be 78, \"configuration error.\" But that is still ambiguous: Is it a \"configuration not found\" error, or a \"malformed JSON\" error? You are still going to need error messages when the standard set of error codes runs out.\n. Exit codes won't make things any better.\nAll linter plugins will need to be updated to support particular exit codes. None of the various linters, including Atom, Sublime, Webstorm and Emacs make any distinction between the type of errors thrown by a linter program. Most of them just try, catch, and ignore. Additionally, that error checking is usually handled at a lower level, and configuring new linters is often accomplished via inheritance or configuration. This increases the difficulty of adding particular exit code handling support across the board.\n78 is not sufficiently specific, especially in this particular case, because I don't want to be alerted about missing configs, but I do want to be alerted about malformed configs, and using 78 would seem to imply the code should be used for either both, or neither case.\nYou could start making up new exit codes, and you could certainly document them, but general-purpose linter programs are not going to support your arbitrarily-defined set of exit codes at a low level, because those arbitrarily-defined codes could vary from linter to linter. So they have to handled by the JSCS integration plugins, if that is even possible with the base linter plugin's API. If it was possible, that'd probably be a good thing, because the user could get more detailed feedback on issues, but it is also going to require more code.\nOn the other hand, Flycheck does not need to be updated to support a new CLI flag. In fact, no linter plugins need to update their logic to support this; all linter plugins are already capable of adding support for a new option simply by adding a new string to an array of command-line flags. Without modifying the source code of flycheck.el, I can already do this to get the behavior I want:\nlisp\n(flycheck-define-checker javascript-jscs\n  \"JSCS - JavaScript Code Style\"\n  :command (\"jscs\" \"--reporter=checkstyle\" \"--ignore-missing-config\" source-inplace)\n  :error-parser flycheck-parse-checkstyle\n  :modes (js-mode js2-mode js3-mode))\nSo it is not true that \"Flycheck would need to be updated to correctly support JSCS in either situation.\" Although it certainly might be convenient if the author of Flycheck added the above snippet so that JSCS support was built-in, any user can set up JSCS without any additional hacks with the above code.\n. I do think that exit codes would be good in principle, but currently they would only benefit a single linter out of the set of linter packages you support.\nHere's how they each handle errors:\n- Atom: console.warns all errors\n- Brackets: Doesn't use CLI\n- Grunt: Doesn't use CLI\n- Gulp: Doesn't use CLI\n- Sublime: Doesn't handle exit codes\n- Vim: Does handle exit codes\n- Visual Studio: Doesn't use CLI\n- IntelliJ et al: Exit code handling is commented-out\n- and Flycheck: Doesn't differentiate exit codes\nSo your Vim users might appreciate (3), but it won't have any impact on the other linter packages without significant additions to those packages' APIs. I probably sound like a broken record at this point, but unless you plan on submitting a lot of PRs to improve the above situation, I recommend against creating an exit code lexicon.\nI would be fine with (1), (2) or (4), since any of those solve my particular problem.\n. Yes, it should be possible to allow words not in the dictionary, and to disallow words in the dictionary, at your discretion.\nWe could create node packages providing dictionaries and the user could optionally install 1 or more of them if he wanted to use spellcheck. Then he could use whichever language(s) he wanted, and the download size of JSCS wouldn't necessarily need to be affected. (Though I don't see download size as much of an issue; you don't install packages often. I think it would be convenient and worthwhile to have some English dictionary bundled.) I don't know how to split words in non-Latin languages, but special support can be added for them if it is needed and desired.\nThis feature is optional, so it wouldn't really matter if it was slow. But it probably doesn't have to be. I expect we can use some well-known searching algorithm to find words quickly. It appears that checking for the existence of a word is fast:\n``` js\n'use strict';\n// v3.6.0\nvar _ = require('lodash'),\n// JSON array of 33,000 words (SCOWL English list size 70)\nwords = require('../english-words.json');\n\nsuite('wordlist', function () {\n    var subjectWords = .times(10, function () {\n        return words[.random(words.length)];\n    });\n    .forEach(subjectWords, function (word) {\n        bench(word, function () {\n            .indexOf(words, word, true);\n        });\n    });\n});\n```\nWhen I run the above benchmark with matcha I get\n```\n~/projects/wordlist \u03bb ./node_modules/.bin/matcha \n                  wordlist\n   1,352,018 op/s \u00bb hatcher\n   1,400,212 op/s \u00bb millruns\n   1,468,260 op/s \u00bb tentation\n   1,434,476 op/s \u00bb humoresques\n   1,383,501 op/s \u00bb unscaled\n   1,368,811 op/s \u00bb importuner\n   1,267,606 op/s \u00bb complotting\n   1,351,163 op/s \u00bb neonatologist\n   1,349,367 op/s \u00bb soymilks\n   1,302,093 op/s \u00bb subordinary\n\nSuites:  1\n  Benches: 10\n  Elapsed: 17,507.54 ms\n```\nas _.indexOf is doing a binary search on a pre-sorted wordlist. 0.0000007 seconds per word lookup seems pretty snappy.\ndisallowIdentifierNames helps a little bit, but not enough. There are many ways to misspell most words. I can try to cover all the cases I can think of, but the maintainers of the code will likely imagine new abbreviations, and the tool won't notice them until they are too deeply embedded in the codebase. The same could apply to false positives like \"temp\", though I imagine there are fewer false positives than there are possible contractions.\nIf there is configuration overhead, I imagine most of it will be paid early in a project's lifetime when most of its domain-specific words are discovered and added to the list. You will only have to add more exceptions as you bring in more 3rd-party libraries, which probably shouldn't happen often.\n. Took a stab at implementing this for #1217.\n. Implemented.\n. Thanks for the feedback Eli.\nI updated the branch to only error on definitions and assignments; that reduced the complexity quite a bit. I don't need those built-ins lists anymore because those objects and properties are always being accessed, and rarely if ever declared. Not having to blacklist as many accessed names allowed me to remove 19 of the formerly-55 additional dictionary words I had been using for a decent-sized (~100 file) test project.\nI also externalized the wordlists. The first (and only) one can be installed with npm install wordlist-english; if it isn't installed and you try to use spellcheck, JSCS will throw an informative error telling you to install it. Anyone can add a new wordlist by creating his own wordlist-* package, be it published or npm link'd.\nI hope we can scale this feature to a manageable and befitting size for JSCS. It looks like externalization has greatly simplified it. I really like the high level of granularity currently afforded, but the feature could be simplified further by removing some of that customization. But then again, based on the test coverage it looks like most of that work is already done anyway.\nI expect the majority of maintenance associated with this rule might come with:\n- comment / docblock support\n- non-Latin language word splitting\nif either of those are desired.\nThe quality of the wordlists (which is likely to be the most important issue for users) can be managed independently of JSCS.\nI do think JSCS is a good place for this; I need a command-line utility that points to exactly the line and column where I need to fix a stylistic mistake. Ensuring good naming conventions is something that I do at the same time as when I validate the spaces around my braces.\n. Removed the codependency package and just used require. Improved the error messages. Coverage is now at 100% for this rule.\nAdded wordlist-english as a regular dependency; maintainers and CI systems won't need to specially install it, and neither will most end-users. (Sorry to people from other countries who have to put up with this language.)\n. Okay. I guess for the tests we can mock an npm package by copying it into node_modules in beforeEach and deleting it in afterEach.\nIMO it would be kind of annoying for all our end users to have to add a special hook to their continuous integration scripts to cd and install a wordlist. I guess that is already theoretically true of other languages if anyone ever creates another wordlist-* package, but I'd like to think we cover the most common case by including this one.\nThe only advantages I see in not including an English wordlist are 1) reducing bias (though this particular language, and apparently the programming community, are already biased towards English, so we would be kind of ignoring reality), and 2) reducing npm install time. But you don't run npm install very often, and an occasionally-uncached ~1.5 MB isn't going to make you miss a deadline.\n. Oh look, there's a plugin API. Sure.\n. Created a repo. Can transfer ownership.\nI couldn't get coverage working; ReferenceError: __unitCoverage__ is not defined. If anyone could help with that, that'd be great. Would also like to get Travis / AppVeyor / Coveralls up and running too.\n. Okay. Just let me know when I have permission to transfer it and I'll send it over.\n. Thanks @markelog! Just committed.\nI would still like to get all the CI goodies (testing, coverage) set up. Then we can publish v1.0.0.\n. Still getting that coverage error and frankly have no idea how to fix it:\n``` bash\n~/projects/jscs-spellcheck (master) \u03bb npm run coverage\n\njscs-spellcheck@1.0.0 coverage /home/jackson/projects/jscs-spellcheck\nunit-coverage run -p common\n\n/home/jackson/projects/jscs-spellcheck/test/specs/rules/require-dictionary-words.js:375\n    before(unitCoverage.initialize);\n           ^\nReferenceError: unitCoverage is not defined\n    at Object. (/home/jackson/projects/jscs-spellcheck/test/specs/rules/require-dictionary-words.js:375:12)\n    at Module._compile (module.js:456:26)\n    at Object.require.extensions..js (/home/jackson/projects/jscs-spellcheck/node_modules/unit-coverage/lib/require-replacement.js:45:23)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:364:17)\n    at require (module.js:380:17)\n    at /home/jackson/projects/jscs-spellcheck/node_modules/mocha/lib/mocha.js:192:27\n    at Array.forEach (native)\n    at Mocha.loadFiles (/home/jackson/projects/jscs-spellcheck/node_modules/mocha/lib/mocha.js:189:14)\n    at Mocha.run (/home/jackson/projects/jscs-spellcheck/node_modules/mocha/lib/mocha.js:422:31)\n    at Object. (/home/jackson/projects/jscs-spellcheck/node_modules/mocha/bin/_mocha:398:16)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:935:3\n/home/jackson/projects/jscs-spellcheck/node_modules/unit-coverage/node_modules/vow/lib/vow.js:92\n            throw e;\n                  ^\nError: Command failed: node_modules/.bin/mocha --compilers js:/home/jackson/projects/jscs-spellcheck/node_modules/unit-coverage/lib/require-replacement.js\n/home/jackson/projects/jscs-spellcheck/test/specs/rules/require-dictionary-words.js:375\n    before(unitCoverage.initialize);\n           ^\nReferenceError: unitCoverage is not defined\n    at Object. (/home/jackson/projects/jscs-spellcheck/test/specs/rules/require-dictionary-words.js:375:12)\n    at Module._compile (module.js:456:26)\n    at Object.require.extensions..js (/home/jackson/projects/jscs-spellcheck/node_modules/unit-coverage/lib/require-replacement.js:45:23)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Module.require (module.js:364:17)\n    at require (module.js:380:17)\n    at /home/jackson/projects/jscs-spellcheck/node_modules/mocha/lib/mocha.js:192:27\n    at Array.forEach (native)\n    at Mocha.loadFiles (/home/jackson/projects/jscs-spellcheck/node_modules/mocha/lib/mocha.js:189:14)\n    at Mocha.run (/home/jackson/projects/jscs-spellcheck/node_modules/mocha/lib/mocha.js:422:31)\n    at Object. (/home/jackson/projects/jscs-spellcheck/node_modules/mocha/bin/_mocha:398:16)\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:935:3\nat ChildProcess.<anonymous> (/home/jackson/projects/jscs-spellcheck/node_modules/unit-coverage/lib/utils/subprocess.js:24:26)\nat ChildProcess.emit (events.js:98:17)\nat maybeClose (child_process.js:766:16)\nat Process.ChildProcess._handle.onexit (child_process.js:833:5)\n\nnpm ERR! jscs-spellcheck@1.0.0 coverage: unit-coverage run -p common\nnpm ERR! Exit status 8\nnpm ERR! \nnpm ERR! Failed at the jscs-spellcheck@1.0.0 coverage script.\nnpm ERR! This is most likely a problem with the jscs-spellcheck package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     unit-coverage run -p common\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls jscs-spellcheck\nnpm ERR! There is likely additional logging output above.\nnpm ERR! System Linux 3.13.0-24-generic\nnpm ERR! command \"/home/jackson/.nvm/v0.10.37/bin/node\" \"/home/jackson/.nvm/v0.10.37/bin/npm\" \"run\" \"coverage\"\nnpm ERR! cwd /home/jackson/projects/jscs-spellcheck\nnpm ERR! node -v v0.10.37\nnpm ERR! npm -v 1.4.28\nnpm ERR! code ELIFECYCLE\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /home/jackson/projects/jscs-spellcheck/npm-debug.log\nnpm ERR! not ok code 0\n```\nTried to parallel JSCS's setup as closely as possible but for some reason it just won't work. Help please?\n. Yep, I believe coverage was around 100%, and the plugin worked when used in a personal project.\nLong term I might want to make it possible to use top-level devDependency wordlists rather than having to manually npm install them in the jscs-spellcheck directory. I'd also like to make some programming acronym and programming-ism wordlists. But I don't think those issues are barring a release.\n. Thank you very much @mdevils! Back to 100% now.\n. v1.0.0 is published. Thanks again to the organization for its help.\n. Happy to see this rule being implemented. I'll try it out soon.\nI'd like to see a test case for (ignoring) the Directive Prologue (i.e., \"use strict\" directives); see 14.1.1.\n. Also, I think this rule should be called requireVariableDeclarationFirst, as \"declaration\" is spelled correctly in 5 other rules, and requireMultipleVarDecl should be renamed to requireMultipleVariableDeclarations with the old name as an obsolete alias.\n. I would be nice if there was a \"case-insensitive\" option for this.\n. I see, char codes 91-96 are sandwiched between the upper and lowercase letters. The 58-64 symbols are also kinda \"just there\". Maybe both of those ranges should be shifted down or up or something.\n. Of course, reorganizing ASCII could make this rule more confusing to users. In fact, enforcing this for anything other than the latin alphabet would confuse people. Who wants to get an error for putting a \">\" key before his \"<\" key in his AST parser?\nYou may want to just exclude any symbols from the sort order checking, or trim them off the front before comparing latin letters.\n. There shouldn't be a default preset. JSCS is an unopinionated style checker; it has to be, because the only style guide anyone likes is his own. Choosing a favorite style guide contradicts that quality.\n. This application shouldn't decide that one particular preset is more worthy of a default slot. There are numerous qualities which make for a \"good\" style guide, but the weight of those qualities is a matter of opinion. Even popularity has to be weighted. It happens to be quantifiable, but that doesn't mean \"1000 stars + no semi-colons > 500 stars + strict semi-colons;\" basing a decision like this on popularity, or any data point for that matter, requires some bias, which an unopinionated tool should be free of.\nBesides that fundamental issue, there will be others:\n1. A particular style guide receives favoritism from the premiere JavaScript style checker. This boosts the popularity of the style guide, whether or not the style guide \"deserves\" it.\n2. The favorite style guide of the year falls out of fashion the next. Unfortunately, it's a breaking change to choose a new favorite, so unless you're okay with breaking userland, you're stuck with it.\n3. Choosing default settings lets you run the tool without configuration, but as soon as you add configuration, those default settings go away. \"Where'd they go?\" Should they still be there even if the configuration is an empty object? If so, \"how do I get rid of that?\" Or the inverse, you use a checker plugin that checks files automatically, but now it wants code without a .jscsrc to look a certain way. \"Why'd it choose that way?\"\nConcerning Airbnb specifically (and hopefully not validating that it is worth discussing the merits of any style guide as a default), I would attribute its high number of hits due to its name starting with \"A,\" thus being sorted to the top of this list, which includes a link to the json file I think you are referencing. You could validate my prediction by checking if crockford.json and google.json have the 2nd and 3rd most hits respectively, if so I'd suspect a fluke.\nAs for making the tool easier to use \"out-of-the-box,\" you could automatically walk the user through the auto-configuration flow when he tries to use the tool without configuration, and then do a normal check afterwards. That would be nearly as easy for the user, and much more respectful, and less confusing considering the third point above.\n. Upgrades sound awesome. It's only slightly complicated by the fact that comments are allowed in the config files. Users might also want to preserve property order and indentation. To avoid possible frustration, rewriting would have to be handled delicately (not merely by mutating and stringifying the JSON, nor brazenly by regexp; parsing may be required).\nThough, having to change a rule at all (even by coercing the user to manually pass --upgrade-config) could be annoying for the user, which leads me to question the premise of that feature. It doesn't provide any benefit to the user, it just benefits the maintainers of this project. For maximum user happiness, probably better to just leave the names as aliases forever, rather than forcing an upgrade.\nStill, I did as you as asked in the PR. If you change your mind we can alias rather than deprecate.\n. Build failed due to \"Coveralls is in Read Only mode while we work on updating the system. Sorry for the inconvenience.\" We can try again soon but should be good to go.\n. @mrjoelkemp asked \"Would you like to submit a PR that renames the rules?\" So I do not understand your release schedule.\nIf you are worried about breakage, we can just silently alias indefinitely.\n. Well, I am confused. No one said not to do it. It sounded more like you guys wanted to delay a release to make more changes like this, actually.\n. Let's have other contributors weigh in; not because I am hoping for a different answer, but because it's possible either one of us misunderstood what was said.\n. Fair enough. It should be easy to rebase or do it over again anyway. I will make sure to double-check before submitting changes again.\n. I will gladly implement these rules.\n. It's the idea that matters, not the person.\nJSLint actually forbids the block (though for a similar reason, ambiguity):\n\nFinally, ES6 provides an even shorter form of function expression that leaves out the words function and return:\n(parameters) => expression\nJSLint requires the parens around the parameters, and forbids a { left brace after the => fart to avoid syntactic ambiguity.\n. Should I add the explanation to the documentation for the rules? A quick skim reveals other rules don't contain justifications. Or is there another document I could add it to?\n. Added justifications per this suggestion.\n. This doesn't have to be breaking; you could define aliases.\n. It really depends on how we want this option to behave. What it does currently is true to the option's name: It just ignores the fact that a config is missing, and everything else proceeds as normal.\n- This has the advantage that if you always expect an output (especially if you specified a reporter), you will still get an output, as opposed to getting nothing.\n- This has the disadvantage of being \"a waste of time,\" and arguably \"incorrect.\" As there are no rules, there is nothing to check, so why claim that we checked anything? (Though line 81 doesn't exactly support that argument.)\n\nWith exit(0), the behavior would be more consistent with what normally happens when you don't have a config file: The program doesn't do any checking. And with the option enabled, then it wouldn't print an error message either.\nIn that case, a more correct name would be --suppress-missing-config-error. That implies that there is no message, and that there is no erroneous exit code, but it does not imply that we \"skip over\" missing configs as \"ignore\" would suggest (rather, we still \"stop on them\").\n. How should we move forward? I am fine with either route.\n. (bump)\n. Added at the bottom.\n. There shouldn't be special cases for underscores. Some people use this as a convention for signifying \"private\" properties, but some people don't do that. Some people use e.g. \"$\" and \"$$\" (angular), others suffix with underscores (node, util.inherits). Others don't believe that publicly-accessible properties should even be treated as \"private\" (because it's not enforced at the language level).\nYou could instead add a special option for something like this, such as a way for users to specify their own regexp.\n. ",
    "jimmyhmiller": "Now that the esprisma issues is fixed, when should we see this working in jscs?\n. ",
    "mikedfunk": "I am currently getting this issue on version 0.2.1 of jscs\n. Oooh sorry I forgot I have jscs symlinked to jsxcs. Oops!\n. ",
    "soarez": "I'm using 1.7.3.\n. ",
    "wzrdtales": "Also happens when if, else are allowed to work without curly braces.\njs\nExpected indentation of 16 characters at lib/builder.js :\n   83317 |                    moved[ i ][ o ] = arr[ i ][ o - 1 ];\n   83318 |                else\n   83319 |                    moved[ i ][ o ] = arr[ i ][ o ];\n------------------------^\n   83320 |            }\n   83321 |        }\nVersion 1.8.1.\n. @mikesherov The indenting \"is wrong\" if you have an if, else clause. If you don't use a curly brace on the else branch but on the if branch this will happen. It does not happen with only an if clause.\nFurther example:\nEverything is ok here:\njs\nfor( var i = 0; i < 6; ++i )\n{\n    if ( i < some )\n    {\n        thing();\n    }\n}\nNow in this example it will complain about wrong indenting.\njs\nfor( var i = 0; i < 6; ++i )\n{\n    if ( i < some )\n    {\n        thing();\n    }\n    else\n        other();\n}\nMy current settings are the following:\njson\n{\n  \"requireCurlyBraces\": [\"for\",\"do\",\"try\",\"catch\"],\n  \"requireSpaceBeforeBlockStatements\": true,\n  \"requireSpacesInConditionalExpression\": {\n    \"afterTest\": true,\n    \"beforeConsequent\": true,\n    \"afterConsequent\": true,\n    \"beforeAlternate\": true\n  },\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInNamedFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireBlocksOnNewline\": true,\n  \"disallowEmptyBlocks\": true,\n  \"requireSpacesInsideObjectBrackets\": \"all\",\n  \"requireSpacesInsideArrayBrackets\": \"all\",\n  \"requireSpacesInsideParentheses\": \"all\",\n  \"disallowSpaceAfterObjectKeys\": true,\n  \"requireCommaBeforeLineBreak\": true,\n  \"requireOperatorBeforeLineBreak\": [\"?\",\"=\",\"+\",\"-\",\"/\",\"*\",\"==\",\"===\",\"!=\",\"!==\",\">\",\">=\",\"<\",\"<=\"],\n  \"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"],\n  \"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"],\n  \"requireSpaceBeforeBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n  \"requireSpaceAfterBinaryOperators\": [\"+\", \"-\", \"/\", \"*\", \"=\", \"==\", \"===\", \"!=\", \"!==\"],\n  \"disallowImplicitTypeConversion\": [\"numeric\", \"boolean\", \"binary\", \"string\"],\n  \"requireCamelCaseOrUpperCaseIdentifiers\": \"ignoreProperties\",\n  \"disallowKeywords\": [\"with\"],\n  \"disallowMultipleLineStrings\": true,\n  \"validateQuoteMarks\": \"'\",\n  \"validateIndentation\": 4,\n  \"disallowMixedSpacesAndTabs\": true,\n  \"disallowTrailingComma\": true,\n  \"requireCapitalizedConstructors\": true,\n  \"safeContextKeyword\": [\"self\"],\n  \"disallowYodaConditions\": true\n}\nIf you need more information, then just tell me.\n. ",
    "webdesserts": "Btw, thanks for the quick replies. Looking forward to the actual release.\n. ",
    "vladikoff": "@markelog Yeah we are planning on using it in contrib-plugins. I was wondering if there is a way to write custom presets without PRing node-jscs?\n. ",
    "kristerkari": "@mikesherov ping\nI see that nothing has happened here in a while, so what's the status of this bug? Is there anything that I could do to help it getting fixed? I'm using template strings a lot and this bug is annoying :)\n. ",
    "stefanpenner": "eta for 1.12?\n. @mrjoelkemp <3\n. ",
    "ghost": "Maybe it's better to create another module for autofixing, just it was done by jshint team? They provide new module fixmyjs instead of merging with linter.\n. It seems that auto-configure uses the default value from the /lib/config/configuration.js and doesn't deviate from it. I can change the value there to get rid of the limit.\n. % jscs --version\n2.1.0\n. Hi,\nIt was only a test for comments.\njson\nthe .jscsrc :\n{\n    \"preset\": \"node-style-guide\",\n        \"jsDoc\": {\n                \"checkAnnotations\": \"closurecompiler\",\n                \"checkTypes\": \"strictNativeCase\",\n                \"enforceExistence\": \"exceptExports\"\n    }\n}\n. The file is \"./subtitle.js\"\nIts code is here : https://github.com/avighier/subtitles/blob/develop/subtitle.js\n. Note that I am on Windows and I have not a well configuration. I have tabs instead of space and \\r\\n for line feed. The tool need, when it will be installed, to fail the build if there is that.\nFor the moment, the file is like that : \"'var assert = require(\\'assert\\');\\r\\n\\r\\n/**\\r\\n\\t@constructor\\r\\n\\t@\"\n. It seems to be that. I have replaced line feed in subtitle.js, now I have :\ninternalError: Error running rule jsDoc: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nTypeError: Cannot read property 'offset' of undefined\n    at Object.enforceExistence (D:\\devs\\subtitles\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc\\enforce-existence.js:116:65)\n    at D:\\devs\\subtitles\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:128:27\n    at Array.forEach (native)\n    at Object. (D:\\devs\\subtitles\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:127:32)\n    at Array.forEach (native)\n    at Object.JsFile.iterateNodesByType (D:\\devs\\subtitles\\node_modules\\jscs\\lib\\js-file.js:331:42)\n    at D:\\devs\\subtitles\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:120:18\n    at Array.forEach (native)\n    at Object.module.exports.check (D:\\devs\\subtitles\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:112:29)\n    at . (D:\\devs\\subtitles\\node_modules\\jscs\\lib\\string-checker.js:154:22) at ./subtitles.js :\n     1 |var Subtitle = require('./subtitle'),\n--------^\n     2 | assert = require('assert');\n     3 |\n. ",
    "stephanebachelier": "@mrjoelkemp We will need a release for jscs to add grunt preset in grunt plugins.\n. @mrjoelkemp the Yeoman has its own style as stated by @sindresorhus which main difference I found is about adding space before left parenthesis in function. \nSo I think I'll update my PR for the two grunt plugins the Yeoman team owns, to use the grunt preset but to adapt to the Yeoman style.\nAt least the yeoman style would be clear: still using the grunt preset but with a minor tweak. I think it's better as it would not require going over any existing branch or PR.\n/CC @sindresorhus \n. @mrjoelkemp I have an issue for the Yeoman style as it don't seems there is an easy way to override the disallowSpacesInAnonymousFunctionExpression rule defined in google.json preset:\nFrom the google preset\njson\n  \"requireSpacesInFunctionExpression\": {\n    beforeOpeningCurlyBrace: true\n  },\n  \"disallowSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n  }\nAnd now the Yeoman style about space which is different:\njson\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true,\n    \"beforeOpeningRoundBrace\": true\n  },\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInNamedFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true\n  }\nMy first idea was to use the following .jscsrc in grunt-usemin based on the discussion:\njson\n{\n  \"preset\": \"google\",\n  \"maximumLineLength\": null,\n  \"disallowSpacesInFunctionExpression\": null, // (1)\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true, // (2)\n    \"beforeOpeningRoundBrace\": true\n  },\n  \"requireSpacesInNamedFunctionExpression\": { // (3)\n    \"beforeOpeningCurlyBrace\": true\n  }\n}\nNotes:\n- 1 : this does not work\n- 2 : this should not be need as defined in \"requireSpacesInFunction\"\n- 3 : this should not be need as same as \"requireSpacesInFunction\"\nSo my question is why not defined a Yeoman preset ?\n. @hzoo at this point maybe define a separate preset is better.\n/CC @sindresorhus \n. My problem with the disallowSpacesInFunctionExpression: null is not about a warning. I set this rule to null as stated in documentation to ignore this rules.\nMy problem is that the configuration I give in my previous comment does not allow this kind of style:\njs\nmodule.exports = function (grunt) {\n                         ^  illegal space before opening round brace\nMaybe I've messed up the configuration. \n. @hzoo Thank you for your help\n. @mrjoelkemp Sorry I was far from my computer. \nGreat for the grunt preset!\nFrom what I've understood, the yeoman team have its own rules which is quite similar to the grunt preset. Maybe they will want their own preset.\n. @markelog in grunt-usemin there are some exceptions above 120 characters. Mainly about logging often in concatenating string. See below:\nin grunt-usemin : \n- 1 line is > 150 chars (184) about concatenating an error message\n- 2 lines are > 120 chars, same as above plus a commented line\nin grunt-filerev:\n- no line is more than 120 chars\nI've tested in 5-6 grunt-contrib-* plugins like grunt-contrib-handlebars, grunt-contrib-copy, grunt-contrib-uglify, and there was nearly no errors about a line being more than 120 characters. And it was only about concatenating strings for log output.\n. @mrjoelkemp I'm fine with inline comments. It's better to add a max line width in my opinion that nothing. 120 line width seems a common case.\nNeed others to review this point.\n/CC @sindresorhus @vladikoff\n. ",
    "hpshelton": "This seems to have been fixed by https://github.com/jscs-dev/node-jscs/commit/b5c6dad7daf393eb68727e0617c9141efe35189b on Nov 23. I'll add additional unit tests to prevent any future regressions here.\n. Fixed the issues and squashed the commits. \n. Closing this PR to fix the history in a new branch. Thanks @hzoo.\n. https://github.com/jscs-dev/node-jscs/pull/882\n. The examples are overkill? If there's no objection to being verbose, I'd prefer to leave them in.\n. Got it. Changed to just \"Valid\".\n. ",
    "ForbesLindesay": "Thanks\n. ",
    "dfilatov": "I'm almost sure that there's a bug, because the same code but without parenthetical is processed as expected, without any error:\njs\nvar KEYDOWN_EVENT = ua.opera && ua.version < 12.10? 'keypress' : 'keydown';\n. ",
    "narqo": ":+1: \n. Any progress here?\n. :+1: \n. ",
    "santagada": "same problem happening on travis-ci\n. ",
    "guilhemSoulas": "+1. Just happened to me with Wercker.\n. +1\n. ",
    "MiniXC": "Also happened to me on Travis CI.\n. ",
    "cjsmith": "Also happens to us on Bamboo several times a day. We also start with a with clean working tree/node_modules and we specify a clean dir for both npm cache and the TMPDIR process.\n```\nnpm ERR! error rolling back Error: Refusing to delete: /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/.bin/esparse not in /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/esprima-harmony-jscs\nnpm ERR! error rolling back     at clobberFail (/usr/lib/node_modules/npm/lib/utils/gently-rm.js:41:12)\nnpm ERR! error rolling back     at next (/usr/lib/node_modules/npm/lib/utils/gently-rm.js:27:14)\nnpm ERR! error rolling back     at /usr/lib/node_modules/npm/lib/utils/gently-rm.js:36:12\nnpm ERR! error rolling back     at Object.oncomplete (fs.js:107:15)\nnpm ERR! error rolling back  esprima-harmony-jscs@1.1.0-dev-harmony { [Error: Refusing to delete: /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/.bin/esparse not in /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/esprima-harmony-jscs]\nnpm ERR! error rolling back   code: 'EEXIST',\nnpm ERR! error rolling back   path: '/data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/.bin/esparse' }\nnpm ERR! error rolling back Error: ENOTEMPTY, rmdir '/data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/xmlbuilder/node_modules/lodash-node/compat'\nnpm ERR! error rolling back  jscs@1.8.1 { [Error: ENOTEMPTY, rmdir '/data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/xmlbuilder/node_modules/lodash-node/compat']\nnpm ERR! error rolling back   errno: 53,\nnpm ERR! error rolling back   code: 'ENOTEMPTY',\nnpm ERR! error rolling back   path: '/data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/xmlbuilder/node_modules/lodash-node/compat' }\nnpm ERR! Error: ENOENT, lstat '/data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/xmlbuilder/node_modules/lodash-node/compat/internals/baseIndexOf.js'\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! System Linux 2.6.32-358.11.1.el6.x86_64\nnpm ERR! command \"node\" \"/usr/bin/npm\" \"install\" \"-q\" \"--tmp\" \"/data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/temp\"\nnpm ERR! cwd /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp\nnpm ERR! node -v v0.10.26\nnpm ERR! npm -v 1.3.6\nnpm ERR! path /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/xmlbuilder/node_modules/lodash-node/compat/internals/baseIndexOf.js\nnpm ERR! fstream_path /data1/bamboo/xml-data/build-dir/MA-MASTER-JOB1/webapp/node_modules/grunt-jscs/node_modules/jscs/node_modules/xmlbuilder/node_modules/lodash-node/compat/internals/baseIndexOf.js\nnpm ERR! fstream_type File\nnpm ERR! fstream_class FileWriter\nnpm ERR! code ENOENT\nnpm ERR! errno 34\nnpm ERR! fstream_stack /usr/lib/node_modules/fstream/lib/writer.js:284:26\nnpm ERR! fstream_stack Object.oncomplete (fs.js:107:15)\nnpm ERR! EEXIST, symlink '../esprima-harmony-jscs/bin/esvalidate.js'\nFile exists: ../esprima-harmony-jscs/bin/esvalidate.js\nMove it away, and try again. \n``\n. Still seeing issues after upgrading to npm 2.5.0 :(  @othiym23, is this an npm bug?  Admittedly, I updated npm withsudo -g update npm` which generated some warnings.  \n```\n\nphantomjs@1.9.15 install /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/phantomjs\n13-Feb-2015 16:18:04    > node install.js\n13-Feb-2015 16:18:04  \n13-Feb-2015 16:18:05    Downloading https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.8-linux-x86_64.tar.bz2\n13-Feb-2015 16:18:05    Saving to /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/temp/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2\n13-Feb-2015 16:18:05    Receiving...\n13-Feb-2015 16:18:10  \n13-Feb-2015 16:18:10    Received 12854K total.\n13-Feb-2015 16:18:10    Extracting tar contents (via spawned process)\n13-Feb-2015 16:18:12    Removing /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/phantomjs/lib/phantom\n13-Feb-2015 16:18:12    Copying extracted folder /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/temp/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2-extract-1423873090388/phantomjs-1.9.8-linux-x86_64 -> /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/phantomjs/lib/phantom\n13-Feb-2015 16:18:12    Writing location.js file\n13-Feb-2015 16:18:12    Done. Phantomjs binary available at /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/phantomjs/lib/phantom/bin/phantomjs\n13-Feb-2015 16:18:12  \n13-Feb-2015 16:18:12    > phantomjs@1.9.12 install /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/grunt-sencha-dependencies/node_modules/phantomjs\n13-Feb-2015 16:18:12    > node install.js\n13-Feb-2015 16:18:12  \n13-Feb-2015 16:18:13    Download already available at /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/temp/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2\n13-Feb-2015 16:18:13    Extracting tar contents (via spawned process)\n13-Feb-2015 16:18:17    Removing /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/grunt-sencha-dependencies/node_modules/phantomjs/lib/phantom\n13-Feb-2015 16:18:17    Copying extracted folder /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/temp/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2-extract-1423873093200/phantomjs-1.9.8-linux-x86_64 -> /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/grunt-sencha-dependencies/node_modules/phantomjs/lib/phantom\n13-Feb-2015 16:18:17    Removing /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/temp/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2-extract-1423873093200\n13-Feb-2015 16:18:18    Writing location.js file\n13-Feb-2015 16:18:18    Done. Phantomjs binary available at /data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/node_modules/grunt-sencha-dependencies/node_modules/phantomjs/lib/phantom/bin/phantomjs\n13-Feb-2015 16:18:18    npm ERR! Linux 2.6.32-358.11.1.el6.x86_64\n13-Feb-2015 16:18:18    npm ERR! argv \"node\" \"/usr/bin/npm\" \"install\" \"-q\" \"--tmp\" \"/data1/bamboo/xml-data/build-dir/MARCH-CBLDDEP-CAPA2/capybara/capybara-service/temp\"\n13-Feb-2015 16:18:18    npm ERR! node v0.10.26\n13-Feb-2015 16:18:18    npm ERR! npm  v2.5.0\n13-Feb-2015 16:18:18    npm ERR! path ../esprima-harmony-jscs/bin/esparse.js\n13-Feb-2015 16:18:18    npm ERR! code EEXIST\n13-Feb-2015 16:18:18    npm ERR! errno 47\n13-Feb-2015 16:18:18  \n13-Feb-2015 16:18:18    npm ERR! EEXIST, symlink '../esprima-harmony-jscs/bin/esparse.js'\n13-Feb-2015 16:18:18    File exists: ../esprima-harmony-jscs/bin/esparse.js\n13-Feb-2015 16:18:18    Move it away, and try again.\n```\n. \n",
    "tyv": "same problem, node version update from 0.8.x to 0.10.x helped\n. ",
    "othiym23": "@markelog Looking at the stack traces here, everybody encountering this error is running a very old version of npm. Several of those errors look like race condition issues that we finally got around to addressing somewhere around npm@2.1.5, and the current version of npm is npm@2.5.0, so I suggest that everyone go ahead and upgrade to the latest stable and then file an issue on npm if you're still encountering this.\n. @zxqfox Please do not use sudo npm -g update npm to update npm. Use npm -g install npm instead. npm update has some issues that we're still working on fixing.\n. @cjsmith It looks like you may have two dependencies trying to create the same symbolic link. There's a broader discussion of this issue on npm/npm#7130, where we're trying to figure out the best way to deal with this. The problem is only partially in npm \u2013 in general, regardless of the strategy we decide upon, there's going to have to be a way to deal with conflicts between packages wanting to grab the same binary name, and it will probably at least partially devolve to package maintainers to play nice.\nUnless this is something else altogether! If you like, open an issue on npm and upload your npm-debug.log from one of these failures as a gist so one of us can take a deeper look into it.\n. ",
    "geraldglennon": "I was having the same issue, trying to install jscs through maven on jenkins using different versions of npm which all failed.  I solved it by adding to the npm, command \"npm jscs@(version) --no-bin-links ----no-optional\".\nnot really a solution but it worked for me on the jscs module. \n. ",
    "ottumm": "Would this catch the following case with \"validateIndentation\": 2 (note the tab preceding .baz)? If not, I can open a new issue.\njavascript\nvar foo = function() {\n  bar()\n    .baz();\n}\n. @markelog yeah, would it be better to extend validateIndentation to handle this? My use case is to completely disallow tabs. I was finding that validateIndentation wasn't doing that and in fact was exhibiting problems when tabs were present. \n@mikesherov you're referring to literal tabs within strings, right (not '\\t')? I was under the impression that tabs need to be escaped in JavaScript strings. \nRegarding comments, I could add an option to ignore tabs within comments. \n. I filed issue #1762 to track the validateIndentation issue I'm seeing.\n. Awesome, thanks!\n. I'm working on a fix for this.\n. Yes, gladly. Did you have something in mind?\n. Maybe \"Tab characters are not allowed\"?\n. Ah, gotcha, ok.\n. https://github.com/ottumm/node-jscs/commit/e0dad2ebd3c1089410e950febd76d2a7c17ea8af addresses this.\n. ",
    "craigjennings11": "For airbnb,\n- [x] \"disallowKeywordsOnNewLine\": [\"else\"] (https://github.com/airbnb/javascript#blocks)\n- [x] \"disallowMultipleLineStrings\": true (https://github.com/airbnb/javascript#strings)\n- [x] \"disallowSpacesInCallExpression\": true (https://github.com/airbnb/javascript#whitespace, \"Place no space before the argument list in function calls and declarations.\")\n- [x] \"requireSemicolons\": true (https://github.com/airbnb/javascript#semicolons)\n. Addressed in #1333 \n. ",
    "leigeber": "Sure, here are the relevant blocks...\n\"requirePaddingNewlinesBeforeKeywords\": [\n    \"do\",\n    \"for\",\n    \"if\",\n    \"switch\",\n    \"try\",\n    \"while\"\n]\nswitch (opt) {\n    case '$any':\n        // Logic\n        break;\n    case '$any:fire':\n        // Logic\n        break;\n    default:\n        if (seg === false) {\n            // Logic\n        }\n}\nHere it would complain about the if in the default block of the switch statement. I would have assumed a case or default block would be considered a block and not require the padded newline at the start similar to other control structures.\n. ",
    "BlackVegetable": "I'd be happy to.  I'll need to put it off for probably a day though; I've got some other projects that are rather urgent.  I'm not sure where in the package.json file \"keywords\" should be added. Is there some kind of specification for writing that particular JSON file?\n. I'll be sure to add \"Googleability\" too.  (Just kidding)\n. I've been very busy, but I'll handle this today.  Sorry for the delay.\n. ",
    "mbohal": "Since the pull request wont get merged any time soon, is there any solution for those like myself? I want to use the airbnb preset, but I don't want to rewrite all my js one way and then back when 2.0 gets released.\nThe overloading of preset rules in .jscsrc doesn't seem to work , but Im not sure if it is supposed to work.\nMy .jscsrc:\njson\n{\n    \"preset\": \"airbnb\",\n    \"disallowMultipleVarDecl\": true\n}\n. ",
    "adrianheine": "Is there currently any way to deactivate es3 support via cli?\n. I'm from Wikimedia Deutschland, not the foundation \u2013 we follow a slightly different coding style. However, the MediaWiki coding conventions suggests this rule, and the MediaWiki code base passes it. So yeah, I'd say the wikimedia preset should have it. @Krinkle do you agree?\n. The funny thing about this is that the rule alters the input and actually sets includeEmptyLines to false if unset.\n. I'm doing that in jscsrc-guesser, which is not the main use case for the rules, obviously. I'll check the inline config thing, though.\n. That's right. I think presets are fine if you actually decided to follow the coding style the preset tries to represent. I don't think it makes too much sense using a preset just because it happens to correspond roughly to what you are doing. Also, I plan on introducing a diff feature, which would allow you to check which rules you follow but have not configured \u2013 for example freshly introduced rules. That could also help in updating presets quickly.\n. Inline configuration does not run into this issue, since it does not allow you to change the configuration of a rule, it just allows you to disable and enable them. That happens by suppressing error output.\n. Thanks, looks great!\n. ",
    "yannickcr": "Hi,\nAs requested I added a test to check if tree-iterator does not fail when encounting some XJS nodes. But since I do not want to add esprima-fb as a dependency just for this test I added a pre-generated JSX AST in test/data/tree-iterator/jsx-ast.js. Hope this is good for you.\n. Thanks for your reply.\nI understand your reluctance to set up some special cases for a very new parser like Espree.\nAs said, another solution could be to expose the esprima options in the config file. For example:\njson\n\"esprima\": \"espree\",\n\"esprimaOptions\": {\n    \"ecmaFeatures\": {\n        \"regexYFlag\": true,\n        \"regexUFlag\": true,\n        \"binaryLiterals\": true\n    }\n}\n(and keep forcing loc, range, comment, tokens to true since jscs need them)\nI could allow anyone to configure the parser the way he want, without relying on a module with the hardcoded features.\nWhat's your thought about this ?\n. Great! Thanks.\n. @mikesherov I added a test to check that the rule is not added to the unsupportedRuleNames array\n. ",
    "beaugunderson": "@markelog Yes, I can try my hand at fixing requireSpaceBeforeBlockStatements as well. :sparkles:\n. yes, haven't had a chance--will have time in the next few days but if someone else wants to grab it before then I don't mind :)\n\nSent from my phone.\n\nOn Dec 24, 2014, at 10:54 AM, Oleg Gaidarenko notifications@github.com wrote:\nStill interested?\n\u2014\nReply to this email directly or view it on GitHub.\n. @markelog To make sure I understand: do you mean that this rule should ignore spacing for bare blocks? It's a side effect of the changes I made that a space before bare blocks is now an error, I'll have to figure out how to special-case it if they're to be ignored.\n. \n",
    "alawatthe": "Yes, I can take a look at it.\n. What's about requireFunctionNameMatch?\n. Sorry, that there where two bugs in the commit yesterday. I'm a bit confused, that my local testing did not find them... :-/\n. I think this looks like a duplicate of https://github.com/jscs-dev/node-jscs/issues/685.\n. Ahhh performance, thats one detail I didn't speed attention when I wrote this code a week ago.\nPerhaps, monitoring the performance is something we could look into in the future...\nSo thanks @efolio for fixing my code :-)\n. Nice job, I really like the website. I have just two remarks:\nWhat do you think about having a textarea like http://jshint.com or http://jslint.com to paste code and check it online? I would like it. (I not sure if jscs is currently working in the browser.)\nAnd to nitpick a little bit: the logo and the favicon aren't looking too good on retina displays. The logo can easily be created with SVG and for favicons I really like the http://realfavicongenerator.net/ . I'll create a pull request for this later.\n. Here is the new version of the logo. I took some artistic freedom (see below for a comparison). \nWhen I was done, I found the discussion about the logo and a high res version on the mailing list :-/\nBut since the SVG version is a lot smaller then the high res version, I think we should use the SVG version.\nList of changes:\n- everything is aligned to a square grid with 6x6 cells. See below for a screenshot with including the grid. Everything which appears to have the same size has the same size. This resulted in the changes:\n  - There is now the same amount of white space (or yellow space?) above and below the text. Addresses your wish @mrjoelkemp.\n  - This moves the letters a bit\n- The dashes under the J and S were a little bit to short in my opinion, so I made them longer\n- color changes (I aligned the colors with the high res version, not the one found on the web site)\n  - yellow from #eada5b to #ebdc50\n  - black from #00000 to #363633\nI hope are ok with my changes and you like it. If there are no further suggestions, I'll create a pull request.\n\nThe plot with the grid. The green boxes are used for kerning\n\nThe green letters are the SVG letters, the black ones are from the high res version. \n\nAdditionally I recreated the favicon in SVG. The shapes of the dashes and caret are the same as in the logo, just scaled by a factor of 2.\n\n. > Ask next time, we could have save you some time :-).\nI will :-) But for this time, I don't mind, I found some useful tools for working with SVG.\n\nNot gonna feel comfortable with this, until author of logo could check it out.\n\nI am completely open to suggestions, I just want to have a SVG version of the logo. The blurry png bugs bugs me every time I'm on jscs.info.\n\nThe font used in the original logo is \"Neutra Text Bold\", which is also used in logo.js as I know.\n\nYes, I know. The reason for not using the font's \"C\" and creating my own, was that Neutra Text Bold is a commercial font. And since JSCS doesn't own a license (I think, as they don't provide a way to use the fonts as webfonts) I didn't want to use the font. That said, Logo.js probably hasn't gotten any problems for using the font, so likely we won't get any either. But I am still not too comfortable about this.\n\nIt is used with the default optical kerning option in Photoshop and with increased spacing. And I think that it really asked for some custom grid arrangement.\n\nJust to make sure, if I understood you correctly: Are you fine with my kerning or do you prefer the Photoshop one?\nI don't have Photoshop right now, so if we what to use some specified kerning, someone else has to do it.\n\nThe colors at first stage are meant to be picked from the original logo.js SVG, but now it doesn't seem necessary.\n\nOh the colors, that was a pain :expressionless:. The Logo.js project is somewhat inconsistent in this point. Some of the colors I found are: \n- #f3df49 and #2e2e2c used by the original logo https://github.com/voodootikigod/logo.js/blob/master/registry.md\n- #f7df1e and #000000 used by the svg version of the original logo https://github.com/voodootikigod/logo.js/blob/master/js.svg\n-  #ebdc50 and #363633 the high res version of the jscs logo and the SVG version I did.\n- ...\nI am not a too big fan of using #000000, but apart from that, I don't care.\n\nAnd also there is an idea of inverted \"dark\" version of logo.\n\nIt's no problem to create a dark version. But, may I ask when we want to use the dark version?\n\nThe thing I disagree with is the dashes. You see, the first version of logo was made with the original \"Neutra Text\" dashes, which are pretty short by design. So the font itself is meant to have short dashes. It is designed that way. I reconstructed the proportions of the dashes and made the arrow so they are connected in the way shown on this schemes plus a little visual tuning.\n\nThis is interesting. I didn't know that. I'll change the dashes back.\nThanks for the feedback :-D\n. Ah I completely forgot this issue :-/\nYes, I am still interested. Unfortunately I don't have Internet right now (writing this on my mobile phone). So it will take a few days to create a pull request.\n. I updated the dashes, to use the original size, with the dashes aligned with the grid\n\nI'm my opinion, the dash below the J is to far to the left, so here is a version, where the dash is aligned with the J. (I like this version better but in the end I don't care.)\n\nThe circumflex is now using the properties @panoplied explained:\n\nI did not change the colors as well as the position of the letters. Furthermore, I compared the shape of the letters to the Neutra version and found out that it is an almost perfect match, so I did not change the shape either.\nAre there any other improvement suggestions?\nHope you like it :-D\n. @panoplied \"okay\" does not sound to convinced :-/  Please let me know if there is anything I can/should change :-)\nI created a pull request here: https://github.com/jscs-dev/jscs-dev.github.io/pull/20\n. I think such a rule belongs more to a tool like eslint or jshint. jscs is about the format of the code.\nIf you are only concerned about console, there is a rule in eslint addressing your needs.\n. So I gave this a second thought. I think a rule like\njs\ndisallowVariableNames: ['temp', 'foo', 'bar', 'baz', 'asdf']\ncould make sense, as this is a stylistic choice about the code.\n@janbaer This should fit your use case, too.\nI am just not a too big fan of a rule like\njs\ndisallowUseOfObject: ['console']\nSince it is impossible to completely prohibit the use of an object through static analysis.\n@mikesherov should we reopen this issue?\n. Thanks for your answer Mathias.\nI basically used the esprima way when I wrote the code for the first time, but I somehow missed that the unicode-data should be a devDependency an not a dependency. My bad :-/\nThis is also probably the reason, why we had the performance problems with regenerate in https://github.com/jscs-dev/node-jscs/pull/861.\nI'll write some code for this later.\n. Looks good to me. Thanks @mathiasbynens.\nI was also fixing #920. But let's merge yours and I will write a separate pull request for #920 once this here is merged.\n. It's all because of you :-D\nYou inspired me with your talk at jsconf.eu. I :heart: it.\n. There are rules in jshint and eslint for this:\nhttp://eslint.org/docs/rules/max-params.html\nhttp://jshint.com/docs/options/#maxparams\n. By my count, the line is 80 characters long. So everything is fine I guess...?\n. So here is a little longer description:\nThe issue of restricting the set of legal variable names has come up in the past several times, see #41, #612, #918.\nThe feedback in the discussions for such a rule was positive (I think), but no one created a pull request.\nTherefore I'm starting with a pull request.\nOne open point in the past (see #612) was, if (and if \"yes\" how?) single letter variable names should be handled differently depending on whether they occur in loops or not.\nIn my opinion this problem can't be solved in a general way.\nThis is the reason why my pull request does not include any special handling for single letter variable names.\nWhat do you think?\nP.S.: This is my first rule I implemented from ground up, so don't spare me with critic :-)\nFor example I did know if there is a specified order for all the registerRule functions.\n. @mrjoelkemp thank you for your feedback :-)\nI rebased, added the new lines and more tests. If you have more ideas for tests, I can add them, too.\n. Sorry for the noise on this bug :-/\nI have been thinking a bit about the name for this rule. Since it also prevents property names like obj.bad a better name for the rule would be disallowIndentifierNames, i think.\nI already changed the name and added tests on my local branch. So, if you agree with the name change I can upload the code in no time.\n. I screwed the rebase :weary:. Therefore I created a completely new pull request https://github.com/jscs-dev/node-jscs/pull/960.\nSorry for the inconvenience :confused:\n. This is a duplicate of https://github.com/jscs-dev/node-jscs/pull/822.\n. I can reproduce the bug with version 1.11.1 using the following .jscsrc\njs\n{\n    \"validateIndentation\": 4,\n    \"requireCapitalizedComments\": true\n}\nThe bug does however not occur, if I use any of these rules alone...\nWe actually have a test for comments like this, see require-capitalized-comments.js#L57-L61. But the test only sets requireCapitalizedComments and not validateIndentation in the config.\n. @ashclarke You can (temporarily) fix the problem yourself, by placing the validateIndentation rule after the requireCapitalizedComments rule in your jscsrc.\nI found the problem: The validate indentation rule reorders the lines of the comment. E.g.:\nConsider the comment\njs\n// A textblock may also have multiple lines.\n// Those lines can be uppercase as well to support\n// sentense breaks in textblocks\nThe file object, which goes into the  validateIndentation rule has a commentsproperty like this\njs\n\"comments\": [\n  {\n    \"type\": \"Line\",\n    \"value\": \" A textblock may also have multiple lines.\",\n    \"range\": [\n      // ...\n    ],\n    \"loc\": {\n      // ...\n    }\n  },\n  {\n    \"type\": \"Line\",\n    \"value\": \" Those lines can be uppercase as well to support\",\n    \"range\": [\n      // ...\n    ],\n    \"loc\": {\n      // ...\n    }\n  },\n  {\n    \"type\": \"Line\",\n    \"value\": \" sentense breaks in textblock\",\n    \"range\": [\n      // ...\n    ],\n    \"loc\": {\n      // ...\n    }\n  }\n],\nIt somehow modifies the object such that the object afterwards looks like this (the location and range info are still correct, just the ordering in the array is different):\njs\n\"comments\": [\n  {\n    \"type\": \"Line\",\n    \"value\": \" sentense breaks in textblock\",\n    \"range\": [\n      // ...\n    ],\n    \"loc\": {\n      // ...\n    }\n  },\n  {\n    \"type\": \"Line\",\n    \"value\": \" Those lines can be uppercase as well to support\",\n    \"range\": [\n      ..\n    ],\n    \"loc\": {\n      // ...\n    }\n  },\n  {\n    \"type\": \"Line\",\n    \"value\": \" A textblock may also have multiple lines.\",\n    \"range\": [\n      // ...\n    ],\n    \"loc\": {\n      // ...\n    }\n  }\n],\ni.e. requireCapitalizedComments thinks the comment looks like this:\njs\n// sentense breaks in textblocks\n// A textblock may also have multiple lines.\n// Those lines can be uppercase as well to support\nwhich should throw an error.\n@mikesherov you are the master of validateIndentation, would you like to have a look at this?\n. @mikesherov The Repro case:\njs\n// A textblock may also have multiple lines.\n// Those lines can be uppercase as well to support\n// sentense breaks in textblocks\nwith jscsrc:\njs\n{\n    \"validateIndentation\": 4, // or any other value here\n    \"requireCapitalizedComments\": true\n}\nThe ordering is important! The following jscsrc is working:\njs\n{\n    \"requireCapitalizedComments\": true,\n    \"validateIndentation\": 4\n}\n. That was quick, nice work :-D\nPerhaps we should (deep) freeze the file object, to prevent modifications or check if rules modify the file object...\n. I reported this feature in the past https://github.com/jscs-dev/node-jscs/issues/837, but completely forgot about it :-/\nI am against making jscs and jshint (or any other values) default exceptions. Why? Because I don't want use inline comments for these two tools and want to get notified, when I do.\n. @zxqfox I am probably not seeing something obvious, but what has this bug to do with presets?\n\nI'd say no.\n\n\"No\" to what? I'm a bit confused :-/\n. @zxqfox Ah, now I get it. No problem :-D \n. Crockford uses this style in a code example on his Code Conventions page. However, he does not mention whether one should use a space or not. \nIn his projects he uses the style throughout, e.g.:\nhttps://github.com/douglascrockford/JSLint/blob/master/jslint.js#L287-L537\nhttps://github.com/douglascrockford/JSON-js/blob/master/json.js#L388-L396\nhttps://github.com/douglascrockford/JSCheck/blob/master/jscheck.js#L455-L467\nI haven't found a single place in his code, where he is not using it. (But of course, I might have missed some.)\nTherefore I think we can include the rule.\n. Good point @zxqfox. However the related rules in jshint and eslint act on a function basis, meaning, a very long file with lots of simple functions would pass the check. Which is not really what I want.\n. Just repeating this (since my inline comment in the first commit somehow vanished):\nEverything in the pull request looks good to me. I would be happy to see it merged.\n. I agree, that abbreviations are a common source of errors and confusing code. However I don't think that checking the spelling of identifiers will work, because:\n- There are identifier names I what to disallow, although they are English words. For example bar, temp, ...\n- Sometimes I really want to use a identifier name, which isn't a real English word.\n  - For example, when using lodash, I want to call the variable lodash, but that's not an English word.\n  - An other example are for loops, where i, j, k, ... are more or less the standard variable names:\n``` js\nfor (let i = 0; i < 4; i++)  {\n  for (let j = 0; j < 5; j++)  {\n    doSomething();\n  }\n}\n```\n\n\nOften you don't have control over the identifier names. For example in configuration objects for third-party libraries. E.g.: I the case of jscs there are esnext, esprimaOptions, ...\nInternationalisation: Why should this be restricted to English? Why shouldn't I be allowed to use Russian, German or Greek for my variable names? Yes, the following is valid JavaScript:\n\njs\nvar \u03bc\u03b5\u03c4\u03b1\u03b2\u03bb\u03b7\u03c4\u03cc\u03c2 = 'variable';\n- It's a configuration nightmare. What word list should be used? This gets even more complicated if more than one language is used. What is done with false positives and false negatives?\n- Using several word lists will increase the download size of jscs a lot.\n- I doubt, that this can be implemented in an easy, performant way. We had a big performance problem  https://github.com/jscs-dev/node-jscs/pull/861 when doing something similar.\n\nI think normally it is enough, to black list identifier names which shouldn't be used. That's why I implemented disallow-identifier-names (https://github.com/jscs-dev/node-jscs/pull/960) some time ago. It is available in 1.12.0, however, due to a bug https://github.com/jscs-dev/node-jscs/issues/1203 you probably have to wait until 1.12.1 to use it.\n@jacksonrayhamilton: In your case, you can add something like \njs\n\"disallowIdentifierNames\": [ \"elem\", \"elm\", \"el\", \"err\", \"e\", \"dir\"]\nto your .jscsrc.\n. I agree with @mrjoelkemp that this should be a custom plugin, since it is a kind of special coding style. I don't want to criticize your (@smeijer) coding style in any way, I just never had problems, not knowing what this refers to. Furthermore, with the rise of arrow functions in ES6 the need to bind this or the use of a safe context keyword will decrease a lot, making the stuff around this a lot clearer. So requiring the use of a safe context keyword feels a bit weird.\nOn a site note: Not knowing what thisrefers to might be caused by code which is too complicated. So this might indicate the need for refactoring. In this light, requiring a save context keyword feels a bit like trying to fight the result (not knowing what this refers to) and not the cause (complicated code).\n. I think we already have what you want. See http://jscs.info/rules.html#disallowidentifiernames. (It is called disallowIdentifierNames and not disallowVariableNames, because it also checks the properties in objects.)\n. Do we have any policy on when to update dependencies? (E.g. every four weeks, before we release, on minor/major releases of dependencies, ...) \n. Do you only want to disallow the return statement when returning an object or in all single expression arrow functions? I.e something like\n``` js\n// bad\nx => {return 42;}\n// good\nx => 42\n```\nName suggestion for the second case: disallowReturnInSingleExpressionArrowFunctions Does this win the price of the longest rule name so far? ;-)\n. @pohutukawa like @mrjoelkemp said, it would be helpful to see some examples  what should be valid or invalid. Just looking at the RegExps I have a lot of questions: \n- What do you mean with \"types\"?\n- What do you mean with \"namespaces\"? Objects? Aren't they also variables?\n- What's about constant variables? (I assume with constants you mean variables declared with const) Are they validated with the constants RegExp or the variable RegExp?\n- Classes only in the ES6 way, or constructor functions as well? Then, what is with functions which act as normal functions and constructor functions?\nFurthermore I see a few problems with your approach:\nJSCS however uses static code analysis, to analyze the code. This means, that it is difficult to impossible to identify the type of a variable. Just consider:\njs\nvar variableName = Math.random() < 0.5 ? 'the answer' : 42;\n// We only know at runtime,\n// whether variableName will be a string or or a number...\nEven, if we leave such things away, we have problems like\n- Some variables are coming from external libraries, which then need to be checked, too.\n- We need to store the return types of all the functions implemented in all browsers/node.js/... \n- As far as I know none of this stuff is implemented in JSCS, which means there would be a lot to do.\nThat said, I like the idea of restricting the set of variable names (I built disallowIdentifierNames), however I don't think that your approach is easy to implement :-/\n. Thanks for the report @piotr-cz!\nCan you please post the exact code which is creating the error and your configuration?\nIn my quick tests everything worked and according to https://github.com/jscs-dev/jscs-jsdoc/blob/master/lib/tags/jsdoc3.json#L70 the @todo token should exist.\n. Hmm, why do we want to do this? Writing\njs\n\"requireCapitalizedComments\": { \"allExcept\": [\"jshint\"] }\ndoes not seem to be to complicated...\nHow would one then disable these default values?\nFurthermore, eshint sometimes uses the keyword global to start comments (see Specifying Globals). So should global then also be a default exception to requireCapitalizedComments? I can easily see comments starting with global which are not eslint comments and therefore should be capitalized.\n. For the record, I am not against these default values, I am just playing the devil's advocate here :-)\n\n\nHow would one then disable these default values?\n\n\"requireCapitalizedComments\": { \"allExcept\": [] }\n\nThis means, that setting the \"allExcept\" option overrides the default values, right? So the default values are only there for the\njs\n\"requireCapitalizedComments\": true\ncase. This feels a little inconsistent :-/\n. > With what?\nWith setting the \"allExcept\"option. Let me explain a little further:\nLet's say I am using the \"requireCapitalizedComments\": true way and also use these default values. Next I want to add one further value, like so \"requireCapitalizedComments\": { \"allExcept\": ['foobar'] } and now the default values are gone. This means, I now get errors for using the default values, as I (implicitely) overwrote them.\nI think our different opinions came from the fact that you saw the set of default values as one which can be overwritten and I saw it as a set, which can be extended by the user.\nBut ok, ok, you convinced me :-D\nShall I implement these changes?\n. I had a look at this. Right now the exceptions I identified are:\nhttp://eslint.org/docs/user-guide/configuring\njs\n/* eslint eqeqeq:0, curly: 2*/\n/* eslint-env node, mocha */\n/* global var1, var2*/\n/* eslint-disable */\n/* eslint-enable */\n// eslint-disable-line\nhttp://jshint.com/docs/#inline-configuration\njs\n/* jshint strict: true */\n/* exported EXPORTED_LIB */\n/* falls through */\nhttps://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md\njs\n/* istanbul ignore next */\nDid I miss any keywords/libraries? (jscs support is already there.)\n. Yep, I hope, I can leave work earlier today to create a pr. Sorry for the delay :-/\n. I implemented this. Here are a few comments/problems:\n1. I didn't include the /* falls through */-comments from jshint, as I think \"falls\" is more common in normal comments than in  /* falls through */-comments.\n2. In the current implementation \"jscs\" is always allowed (independent of setting the rule to trueor setting the allExcept-option). In the new implementation \"jscs\" is not allowed, when using the allExcept-option.\n3. Dumb question, but what does this have to do with #1729?\n. Hmm, yeah there is some similarity :smile:\nI'll update the pr\n. For the record: I updated the pull request on my machine to work with the changes made in https://github.com/jscs-dev/node-jscs/pull/1729. Once #1729 is merged, I'll upload my code.\n. Ok the way I wanted to implemt this (probably this weekend), is:\nFor\njs\nexport default {\n  field1: value1,\n  field2: value2\n};\nthe AST looks somewhat like\njs\n{\n  \"type\": \"ExportDefaultDeclaration\",\n  \"declaration\": {\n    \"type\": \"ObjectExpression\",\n    \"properties\": [/*...*/]\n  }\n}\nSo prohibiting this with disallowDefaultExportShorthand is basically only calling disallowNodeTypes with \"ExportDefaultDeclaration\".\n\nThe case of requireDefaultExportShorthand is only a little bit more complicated. Requiring the default export shorthand, means dissallowing code like\njs\nexport {myObject as default};\nFor this snippet the AST looks somewhat like\njs\n{\n  \"type\": \"ExportNamedDeclaration\",\n  \"declaration\": null,\n  \"specifiers\": [\n    {\n      \"type\": \"ExportSpecifier\",\n      \"local\": {\n        \"type\": \"Identifier\",\n        \"name\": \"myObject\"\n      },\n      \"exported\": {\n        \"type\": \"Identifier\",\n        \"name\": \"default\"\n      }\n    }\n  ],\n}\nSo, for the ExportSpecifier we need to disallow the use of \"default\" in the exported.name property.\n@markelog I hope, this answers your question. The rules for the imports can be handled accordingly.\n. Normally SublimeLinter is smart enough to extract the JavaScript parts from HTML files, so this shouldn't be the problem.\nBut I couldn't reproduce the problem with SublimeLinter either :-/\n. I really like the idea. :-)\nI would show all rules which are not enabled, not only the new rules from the last release. Since this is easier to maintain, and from a user perspective, it is weird if I missed a release.\nFurthermore I would list all the rules, independent of how many errors they produce. Because if a rule is not enforced, it is very likely that it fails a lot.\nFor some rules e.g. disallowSpaceAfterBinaryOperators it would be cool, if this could check if every operator is either in this rule or the dual rule.\n. I had a look at this pr while looking at https://github.com/jscs-dev/node-jscs/issues/1685. One thing I noted was, that you are checking, if the comment starts with one of the inlineConfigurationKeywords meaning, that a comment like\njs\n// globalize this function\nwill be recognized as pragma (since \"global\" is one of the inlineConfigurationKeywords), although it is not a pragma.\nI would suggest something like\njs\n if (trimmedComment.split(/( |:|-)/)[0] === exceptions[i]) {\nYes, I know, this does not work with \"falls through\", but for this we could introduce a special case.\n. I thought a little more on the extend vs. overwrite the defaults topic. I think it is way more common, that a user wants to extend the default set, than overwrite it. Therefore I decided to extend the default set. This also adds consistency with validateCommentPosition.\nIt looks like AppVeyor has some hiccups...\n<rant>\nYes, coveralls I know, that there is now one line less which is covered in the file.\nBut the file is still 100% covered. So why exactly are you failing my build? :-|\n</rant>\n. Yes, will do this later today.\nAnd I agree with the stage 2 plan.\n. You're right, it really wasn't too difficult :-D and since it was breaking our build I thought I fix it quickly.\nFor tasks like this, I really find Felix Kling's JS AST Explorer very helpful.\n. Thank you for reviewing :-D\nI put the configuration into the beforeEach. \nThe tests for require-space-before-binary-operators had an issue: it claimed that the option is set to valuebut it was set to [operator]. I fixed that, too.\nSame for require-space-after-binary-operators. This test furthermore had the 'should report sticky operator for ' + sticked + ' with true option' test, which is already covered by the (now) first test in the second call of [[operator], true].forEach(. I removed the obsolete test.\nI hope my chaotic explanations of this make sense :-)\n. No worries, I agree with reverting the commit. Any ideas how we can make these tests faster? The only one I have is to only enable esnext in those tests, where the operator is ** or **=. I'll update the pull request later today and we'll see if there is a speed up.\n. I'm a bit surprised, that we don't do this correctly already... So I think we should do this.\nBut I don't like to have the giant regexp in the code, as there is no way to check if it is correct and debugging would be a nightmare. We already have a dependency on regenerator, so it should be easy to do something like: https://gist.github.com/mathiasbynens/6334847\n. Sorry, I meant to review this sooner :-/\nThe getDialect method can return 'es3', 'es5' and 'es6', but you are only handling 'es5' and 'es6', see here. So I think we should also have an generateIdentifierRegexES3 method, which is generating the appropriate ES3 Regexes.\nApart from that, everything looks good to me.\n. Thanks for the report @ValYouW, do you want to send a pull request for this?\n. Thank you :-)\nBy the way, if you write something like \"fixes #1845\" in the commit message, the issue gets updated with a link to this pull request.\n. > The purpose of this rule is to ensure separation between the key and the colon : in property definitions\nUhm, well no, I think the purpose of requireSpaceAfterObjectKeys is to require a space after the keys in an object . Completely independent whether the key is followed by a colon or not.\nSo if you put a space after the doStuff like this:\njs\nconst foo = {\n    doStuff () {\n        console.log();\n    }\n};\nJSCS does not complain at all.\nThat said, I think the rule could have an option like:\njs\n{\n    \"requireSpaceAfterObjectKeys\" : {\n        allExcept: [\"shorthandMethods\"]\n    }\n}\n. I am in no way against the style and think it should be added to JSCS. Do you want to implement it? :-D\n. 1.foobar throws, because JavaScript thinks that the . is the decimal point and expects more numbers after it (and foobar is not a number). So you could say 1.foobar is an illegal numerical expression, which therefore throws.\nIf you add a second point like 1..foobar the second point ends the numerical expression and acts as \"property access point\" (is there an official word for this?). And since there is no .foobar on numbers it returns undefined.\n. My take on the uppercase/lowercase issue was, that one should be able to prohibit the use of foo but allow the use of Foo. If you want to prohibit the use of Foo, too, you can just add it to the array. Of course, this would still allow fOo and so on. And thus one could say this leads to exponential complexity...\nThat said, I can be persuaded on this one :-D\nAre there any other opinions on this?\nOn the object lookup: Yes, the object lookup is probably faster. But this feels a little bit premature opimization like. I am the last person to not improve the code performance wise, but then we should do it right and do performance testing as well. Let me do some experiments with this.\nBut depending on the uppercase/lowercase issue I can of course implement a object lookup.\n. I agree, that .*.swp belongs in the personal global .gitignore. But isn't this also true for .ideaand *.sublime-*? Just wondering...\n. I changed it an object lookup.\nJust for the record: I wasn't against the object lookup, I just think we can to do more performance wise. :-)\n. The rule currently does not prohibit object['foo'] (therefore, the foo should not have quotes in the example).\nThat said, I agree that we want to prohibit object['foo'], too. Let me implement it.\n. ",
    "izeau": "Workaround for the time being:\n\n.jscsrc\n\n{\n  // every operator but the comma (see https://github.com/jscs-dev/node-jscs/issues/845)\n  \"disallowOperatorBeforeLineBreak\": [\"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\", \"&=\", \"|=\", \"^=\", \"+\", \"-\", \"*\", \"/\", \"%\", \"<<\", \">>\", \">>>\", \"&\", \"|\", \"^\", \"&&\", \"||\", \"===\", \"==\", \">=\", \"<=\", \"<\", \">\", \"!=\", \"!==\"]\n}\n. ",
    "aarongeorge": "Any news on this?\n. ",
    "xaka": "I liked requireFunctionNameMatch rule name suggested by @alawatthe and decided to proceed with it.\n. 1. The problem with requireAnonymousFunctions and disallowAnonymousFunctions is that it's either everything or nothing, and there is no middle ground. For me personally there should be no anonymous functions allowed in function expressions, but at the same time I don't care much about anonymous functions for callbacks and events handling. I think the solution would be another rule like disallowAnonymousFunctionExpressions. Would you agree? I'll update the code and remove any checks for anonymous functions for now.\n2. requireMatchingFunctionName sounds even better, will do\n3. Good point about reserved words. What would be the appropriate solution here? Do we have a list of reserved words available at code level so when they are in use, we'll be less restrictive? If so, what about allowing to use $ as a prefix when reserved word is detected?\nThanks for constructive feedback!\n. I've updated the code. I wish I could change the branch name w/o opening another PR so for now it'll be the only mismatching place.\n. I've updated the code and documentation. So now when reserved work is detected, we just skip it. I've also added a suggestion to prefix such names with $ instead of enforcing it when the rule is on. Personally I'd enforce such change, but we can leave it for next iteration.\n. @mikesherov done, sir!\n. @mikesherov Done. Please double-check the documentation part as you changed the way it's generated and I did my best to follow the same path.\n. Houston, we've had a problem here. As it turned out, proposal conflicts with http://jscs.info/rule/disallowQuotedKeysInObjects and my understanding is that rules should know nothing about other rules and properties to keep things simple. What's interesting is that requireCamelCaseOrUpperCaseIdentifiers doesn't validate quoted keys/properties as of now, which one might consider as bug. In this case we have another option - change disallowQuotedKeysInObjects instead of changing requireCamelCaseOrUpperCaseIdentifiers. We'd add allButSnakeCased boolean property to control behavior more precisely. \n. Nope, these todos are more like a roadmap for this particular rule. I can remove it and we'll let the users to decide what should be done next by opening issues on GitHub.\n. ",
    "Hydrothermal": "Bizarrely enough, I've stopped getting the issue. It seems to be working fine now. I'll reopen this or create a new issue if it starts happening again.\n. ",
    "ivanvotti": "Having the same problem (\"esnext\": true):\nOperator , should stick to previous expression at app/controllers/order.js :\n    55 |    return this.get('status').replace(/_/g, ' ');\n-----------------------------------------------^\n. ",
    "jasonkarns": "Related to standardizing on line break, line feed, or newline since it seems that newline will be the standard; the capitalization needs to be standardized as well.\nPresently, there are 13 rules that capitalize newline as NewLine:\n(require/disallow)KeywordsOnNewLine\n(require/disallow)PaddingNewLinesAfterBlocks\n(require/disallow)PaddingNewLinesAfterUseStrict\n(require/disallow)PaddingNewLinesBeforeExport\n(require/disallow)PaddingNewLinesBeforeLineComments\n(require/disallow)PaddingNewLinesInObjects\nrequirePaddingNewLineAfterVariableDeclaration\nand 8 rules that caplitalize it as Newline:\n(require/disallow)NewlineBeforeBlockStatements\n(require/disallow)PaddingNewlinesBeforeKeywords\n(require/disallow)PaddingNewlinesInBlocks\nrequireBlocksOnNewline\nvalidateNewlineAfterArrayElements\nPersonally, I consider a newline to be a standalone noun these days so I would vote for Newline. As opposed to the adjective-noun phrase 'new line' which would lend itself to capitalizing each word in the phrase separately as NewLine. But having a consistent spelling is more important that which form is chosen.\n. I would add that as a user, I would expect a configuration option to this rule that allowed or disallowed mixing. For instance:\nvar {left, top: topper} = ...\nHaving this rule play nicely so that different combinations of the rule don't result in impossible-to-fix lint errors is important.\n. This seems related to #923 which was closed by 2df4009. But it doesn't look like the feature was added as described.\nSo I think the desire here is to have a separate rule for array literals/instantiation from array access. That way spaces can be required (for instance) when creating array literals, but disallowed when accessing/indexing. Which doesn't seem to have been added by  2df4009\n. looks like i missed the naming discussion but I would have preferred to see the term 'negation' used instead of 'not'.  IME, negation is the more language-agnostic (computer-sciency) term for the operator.\nMy vote is for disallowNegationOperatorsInConditionals\n. 2.5.0\nOn Thu, Oct 29, 2015 at 9:08 PM, Henry Zhu notifications@github.com wrote:\n\nWhat version are you using?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1943#issuecomment-152372239\n.\n. Here's a minimal test case that still demonstrates the issue:\n\nfunction foo(options) {\n    var a = options.a;\n    eval();\n}\nThe eval seems to be what's triggering it. Remove the eval, and it passes lint. And as shown, the eval doesn't even need to have an argument.\n. ",
    "svetlyak40wt": "@mrjoelkemp that wasn't \"nice catch\". I'm tracking jscs's changelog via http://allmychanges.com/p/javascript/jscs/ and it just broke on 1.9.0 version because of markup :)\n. You welcome. I'm a developer of Allmychanges feel free to contact me if you'll have any ideas.\n. ",
    "efolio": "I used node-tick-processor.\n. You're welcome :)\n. ",
    "mathiasbynens": "For future reference, regenerate is supposed to be used as part of a build script, not at runtime!\n. Might be useful:\n- https://mathiasbynens.be/notes/javascript-properties\n- https://mathiasbynens.be/notes/javascript-identifiers\n- https://gist.github.com/mathiasbynens/6334847\n. Quoting @alawatthe in https://github.com/mathiasbynens/node-unicode-data/issues/14#issuecomment-69985628:\n\nIs there any plan right now of publishing the categories (especially the different letter categories) as independent node modules?\nThe problem of the unicode-data being to big came up in issue #921 for jscs. It increased the size of jscs by a factor of 18...\n\nFor the use case in jscs, unicode-6.3.0 should really be a devDependency, not a dependency. The regular expression for identifiers should be generated at build time (just once) and saved to a file that is part of the npm-published tarball. Check out how Esprima handles it..\n(Btw, you may want to update to unicode-7.0.0.)\n. Awesome, thank you @alawatthe!\n. This is what I had in mind: #924.\n. @markelog Sounds good. Patch amended.\n. @alawatthe Alright. Thanks for working on improving Unicode support! :+1: \n. @alawatthe That comment just made my day. Thanks!\n. @mrjoelkemp FWIW, for my projects where I do similar things, I do check in the generated files. It\u2019s useful to see if there are any changes when updating from Unicode v7.0.0 to Unicode v8.0.0 (ETA Q2 2015), for example.\n@mrjoelkemp About jscs-browser.js, good catch \u2013\u00a0shall I add it to .gitignore? Update: done.\n. Instead of including Lu, Ll, Lt, Lm, and Lo separately, why not just use L?\n. Well, #YOLO and all that ;)\n. ",
    "okonet": "Can it at least be disabled by a comment?\n. Thanks but until this https://github.com/jscs-dev/babel-jscs/issues/1 is open, it's unusable for my setup.\n. \ud83c\udf89\ud83d\udc4f\n. +1 \nThis is quite annoying to not be able to disable it by inline comments.\n. ",
    "jdforrester": "Awesome, thanks.\n. I'd say that the comment should be considered content and so both those test cases would fail as I'd imagined it. Is there a wider setting to ignore comments for the purposes of whitespace validation? Should there be?\n. I'd say that the comment should be considered content and so both those test cases would fail as I'd imagined it. Is there a wider setting to ignore comments for the purposes of whitespace validation? Should there be?\n. /cc @Krinkle \n. > btw, would do think of creating your own npm preset package, if you would, we could just make it a dependency of jscs so you can update it independently?\nHappy to do so; is there a naming convention you like? wikimedia-jscs-preset?\n. Done: https://github.com/wikimedia/jscs-preset-wikimedia\n. ",
    "klaemo": "Sorry for the duplicate issue, I must have overlooked the other one.\nmaster fixes the issue indeed:\n```\ntime jscs index.js\nNo code style errors found.\nreal    0m0.367s\nuser    0m0.309s\nsys 0m0.051s\n```\nThanks for the quick reply. Looking forward to 1.9.1.\n. ",
    "tteltrab": "The pull request was #888, had it up for a day or so already.\n. ah, cool.  didn't know about those, but will do - could use an update.  And the strict type check is probably overkill, wasn't sure which way was preferred.\n. ",
    "vkarpov15": "Yep thanks - sorry I didn't search before I PR-ed, will do next time.\n. ",
    "panoplied": "It's cool that some of my arrangement bugs are fixed. And I would like to give some tips. The font used in the original logo is \"Neutra Text Bold\", which is also used in logo.js as I know. It is used with the default optical kerning option in Photoshop and with increased spacing. And I think that it really asked for some custom grid arrangement. The colors at first stage are meant to be picked from the original logo.js SVG, but now it doesn't seem necessary. And also there is an idea of inverted \"dark\" version of logo.\nThe thing I disagree with is the dashes. You see, the first version of logo was made with the original \"Neutra Text\" dashes, which are pretty short by design. So the font itself is meant to have short dashes. It is designed that way. I reconstructed the proportions of the dashes and made the arrow so they are connected in the way shown on this schemes plus a little visual tuning.\n\n\n. I think it's okay.\n. ",
    "ptomato": "Could reproduce in 1.9.0 as well.\n. ",
    "dimafeldman": "Seems like this statement breaks it:\nJavaScript\nfor (var i = 0; (!reachEnd && (i < elementsToMove)); i++) {\n. Thanks,\nopened an issue: https://github.com/jscs-dev/node-jscs/issues/1332\n. ",
    "schlueter": "Although effectively useless code, a simpler case that seems to fail with the same issue is:\njavascript\nswitch (a) {\ncase \"\":\n  var n;\n}\nshell\n$ jscs requireMultipleVarDecl-breaks-on-switch.js                                                                                                [22:09:06]\nTypeError: Cannot read property 'type' of undefined\n    at /usr/local/lib/node_modules/jscs/lib/rules/require-multiple-var-decl.js:41:24\n    at Array.forEach (native)\n    at Object.JsFile.iterateNodesByType (/usr/local/lib/node_modules/jscs/lib/js-file.js:328:42)\n    at Object.consecutive [as _check] (/usr/local/lib/node_modules/jscs/lib/rules/require-multiple-var-decl.js:37:10)\n    at Object.module.exports.check (/usr/local/lib/node_modules/jscs/lib/rules/require-multiple-var-decl.js:119:28)\n    at null.<anonymous> (/usr/local/lib/node_modules/jscs/lib/string-checker.js:121:22)\n    at Array.forEach (native)\n    at StringChecker.checkString (/usr/local/lib/node_modules/jscs/lib/string-checker.js:119:35)\n    at null.<anonymous> (/usr/local/lib/node_modules/jscs/lib/checker.js:40:25)\n    at Array.0 (/usr/local/lib/node_modules/jscs/node_modules/vow/lib/vow.js:699:39)\nI'm not sure why the specific line numbers are off, I am running this against master (f69bed2) though.\n. While debugging this I found that this rule doesn't see multiple variable declarations in switch cases, i.e:\nswitch (a) {\ncase \"\":\n  var n;\n  var m;\n}\ndoesn't get caught. This is probably related to the same thing that prevents it from functioning.\nIt can be made to not have an exception by checking that the sibling to test against is not undefined which is a result of the parentCollection being equal to  [ undefined ] which means that the index of the current token is -1 and it's sibling is the undefined value in parentCollection.\n. ",
    "kevincennis": "Different path to repro, but this also throws the same error:\nexport let foo = 'foo';\nexport let bar = 'bar';\nexport let baz = 'baz';\nTypeError: Cannot read property 'type' of undefined\n    at /usr/local/lib/node_modules/jscs/lib/rules/require-multiple-var-decl.js:41:24\n. ",
    "janbaer": "Thanks for the answer. We're using currently jshint but it's not really extendable with custom rules. So we decide to use additionally jscs to have more flexibility with code checks in a semantic way and with formatting. There is a rule that can check for forbidden keywords like debugger in the production code . Why not extend the jscs to check also the usage of some functions. The console was just an example. Before some weeks I used the jasmine function ddescribe to just run a specific test. But I forgot to change it back to describe. So for some days our ci just executed one test. With a check with jscs for example this wouldn't happen.\n. ",
    "creynders": ":facepalm: ah the --verbose flag, of course... \ud83d\ude0a\n. ",
    "noseglid": "+1.\nI'd really want to be able (e.g. enforce) my code like this:\njavascript\nvar a = [ 1 ];\nconsole.log(a[0]);\n. Yes, exactly as you described it. No need to distinguish between different subscripts (array or object). \n. One could argue that 1.10 broke compatibility  since it's now enforcing something it did not previously. (e.g. a[0]). It's not a huge issue though. I've temporarily disabled this rule in my projects so commits may or may not follow the convention now. I'll just clean them up once the rule is available.\n. ",
    "ilkkao": "My app build started to fail because this today. My config is like @zxqfox comment and code like @noseglid comment, :+1: for separating rules.\n. ",
    "codepunkt": "+1 for rules to enforce spaces here\njavascript\nvar a = [ 0 ];\nwhile disallowing them here\njavascript\nconsole.log(a[0]);\n. ",
    "joshcarr": "+1 for rules to enforce spaces here\njavascript\nvar a = [ 0 ];\nwhile disallowing them here\njavascript\nconsole.log(a[0]);\n. ",
    "micnic": "@mikesherov , I'll try to come with a PR later (if none does it  earlier) with a custom configuration for this rule, I just started using jscs, and I like it, have to check how to add new rules and set their configuration.\n. ",
    "GerHobbelt": "There are two different uses for ?:: as a conditional statement, e.g.\ncond1 ? a() : b();\ncond2 ? y = 1 : y = f(x);\nand as a conditional expression, e.g.\nx = cond1 ? a() : b();\ny = cond2 ? 1 : f(x);\nif (cond3 ? a() : b()) { c(); }\n(Note the different ways y is assigned a value conditionally in both examples.)\nIf possible, I'ld like to disallow the use as conditional statement, while any use as conditional (right hand) expression is fine with me. I don't know if the JSCS parser is smart enough to identify both uses, but if it is... ;-)\n. Hm, sorry to be a party pooper but upon closer inspection of Esprima again, that one doesn't see the difference between the two use cases I listed above: it only has the ConditionalExpression token, not any ConditionalStatement token, so the check whether its use case 1 or 2 requires some more logic to inspect the Esprima output AST.\nAnyway, not a high priority for me right now as I don't into use case 1 very often but it would be nice when we get the ability to weed those out.\n. Good enough for me right now. Let's keep this one closed and when I feel\nthe need that last bit should be enough hint to arrive at a working\nsolution then. Right now I have to pick my battles and this one is not top\npriority today.\nThanks for the idea.\nOn Oct 1, 2015 11:35 PM, \"Henry Zhu\" notifications@github.com wrote:\n\nOh I see. That specific case is pretty different.\nThere could be another rule for that - I guess you can just check if the node.parent.type\n=== 'ExpressionStatement' and iterating over all ConditionalExpression.\nPeople are always free to implement it themselves (as their own separate\nrule or a PR).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/925#issuecomment-144856737.\n. Super! Didn't know about astexplorer.net: very nice :-)\n\nFor future reference, the ?: constructs I inspected there:\n```\nvar x = 1;\nvar y = x ? 1 : 2;\ny = x ? 3 : 4;\nx ? log() : print();\nvar z = x ? log() : print();\nif (x ? checkA() : checkB()) {\n  z = 5;\n}\n(x ? log : print)();\n```\nwhere the 4th and 7th line are undesirable (my preferred styleguide), while\nthe others are more or less okay -- RL code situations like these often are\nway more complicated so it's hard to draw a clear and obvious line there.\nLines 4 is always a no-good in my book, while line 7 is very frowned upon\n(I can see the appeal to write something like that at some point). The\nother lines are good to average pass. Nothing a machine can decide to fail\nwith certainty.\nAnyway, astexplorer.net shows that I'ld need to check the parent of the\nConditionalExpression node to catch these: if the immediate parent is\neither an ExpressionStatement (line 4) or a CallExpression (line 7)\nthen the custom check should trigger a reject report.\n\nA bit of googling to see where I'ld have to go next leads to these:\n- https://github.com/jscs-dev/node-jscs/wiki/Plugin-API\n- https://github.com/jscs-dev/jscs-jsdoc\nafter hitting\nhttps://github.com/jscs-dev/node-jscs/issues/321\nWhen I work on this I'll have to check (no pun intended ;-) ) if the\n.check(node) plugin API method is fed AST nodes like that -- I assume it\nis, but haven't dug into the code there yet.\nMet vriendelijke groeten / Best regards,\nGer Hobbelt\n\nweb:    http://www.hobbelt.com/\n        http://www.hebbut.net/\nmail:   ger@hobbelt.com\nmobile: +31-6-11 120 978\nOn Fri, Oct 2, 2015 at 3:22 PM, Henry Zhu notifications@github.com wrote:\n\nSome more help would be looking at the AST for the different types of\nsnippets you want to test for (although you may need to look for more - and\nunit tests can help with that). You can paste it into\nhttp://astexplorer.net/\na ? 1 : 0\nvar a = a ? 1 : 0\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/925#issuecomment-145018990.\n. \n",
    "jaswilli": "Hi @mikesherov,\nNo, being notified that there are multiple spaces is actually a good thing :smile:.  My only issue is that the rule that's doing it is requireSpaceBeforeBlockStatements, which reads as though \"space\" is required, not \"one and only one space.\"\nAnyway, that confusion aside, I have no real complaint as the change in behavior works for my case.  I just raised the issue in case it was not intended or desired.\nedit:\nFeel free to close if there's nothing to be done here.\n. @zxqfox \nI don't need two spaces.  I was just surprised after upgrading that this rule produced an error on multiple spaces.\nI agree that it's probably an extreme edge case to want two or more spaces before an opening block.  I just raised this issue in case the change in behavior was accidental and not desired--personally, I'm perfectly happy to have JSCS throw an error in this case.\n. > Probably we should fix an error message here.\nYeah, that was the source of confusion.  I saw the error about missing a space, glanced at the code snippet and thought, \"Wait, there is a space... oh, it's not missing a space, it has multiple spaces.\"\n. ",
    "hawkrives": "Is there a way we could have a rule for requiring at least one space, instead of enforcing exactly one?\nMy case: I'm using multiple spaces to line up function bodies.\njs\nchangeName(studentId, ...args)          { this._change(studentId, 'changeName',          ...args) },\nchangeCreditsNeeded(studentId, ...args) { this._change(studentId, 'changeCreditsNeeded', ...args) }\n(Edit: Essentially, I'd like some way of opting in to what the rule used to do.)\n. @mikesherov thanks, filed #936.\n. ",
    "tunnckoCore": "Hmmm. Interesting. SublimeText3 shows 81 - mm yea cursor is on 81st column, lol\nSorry, lol, my fault. I guess too much vacantion. :D\nI was sure there's no logic for this, because other rules works.\n. ",
    "micky2be": "Arg, I need that fix :(\n. ",
    "zappan": "+1\n. ",
    "dougwilson": "The Command exited with code 4 is because there are failing tests. Because mocha tries to print all the failures at the end and then immediately exit, all the messages don't end up making it to the STDIO before Node.js exits (pending a new mocha release eventually). A work-around to at least see them is to add the --no-exit flag on mocha (assuming your test suite is not leaving something holding open the event loop).\nAnother option is to use the spec reporter. The error output at the end will still get cut off, but you'll be able to tell which tests failed based on if there is a check mark or it still has the number in front of the test name.\n. Oddly I didn't have any local test failures on Windows, though @am11 did.\n. But, with, for example, express-generator, I had a hard time getting that one on AppVeyor because the tests had always passed locally, but yet there were some failures on AppVeyor (due to it reading from the STDIO slowly). I think the best next step is to change the test command to node_modules/.bin/mocha --no-exit and see if it shows anything more (until there is a new mocha release).\n. > With --no-exit at least v0.10 target is executing all the tests. But now all three targets are reporting Command exited with code 4\nThe only difference with --no-exit wasn't that it would fix the failures, only that it would now print what they were :) Which I see is happening now. It was actually executing all the tests before, but the output was getting cut off because of the <= 0.10 Node.js bug.\nNow that I can see what tests are failing on AppVeyor, I may have time to look at the tests in this project and see why they fail.\n. So the reason the tests fail with text vs console is because your tests are fragile: they assume that this line works a certain way: https://github.com/jscs-dev/node-jscs/blob/master/lib/cli-config.js#L153\nWhen you run the tests on your local machine, it's in an environment that is detected as supporting colors; on AppVeyor it is correctly detected as an environment that does not support colors. Those tests need to be fixed so they are either not testing something influenced by the environment, duplicate the environment check to know what to expect, or control the environment completely.\n. There are two ways to support this.\n1) Make the environment adjust to the tests. I have a similar problem testing my depd module. This is what I did there:\nhttps://github.com/dougwilson/nodejs-depd/blob/v1.0.0/test/test.js#L657-L675\n2) Make the tests adjust to the environment:\n``` patch\nFrom a1c4d967b24537dfd0aa540e8bb91c7194d6b12e Mon Sep 17 00:00:00 2001\nFrom: Douglas Christopher Wilson doug@somethingdoug.com\nDate: Sat, 31 Jan 2015 13:11:47 -0500\nSubject: [PATCH] Example change for color tests\n\ntest/cli-config.js | 16 ++++++++++++----\n test/cli.js        | 16 ++++++++++++----\n 2 files changed, 24 insertions(+), 8 deletions(-)\ndiff --git a/test/cli-config.js b/test/cli-config.js\nindex 4275701..70ce76a 100644\n--- a/test/cli-config.js\n+++ b/test/cli-config.js\n@@ -2,6 +2,7 @@ var path = require('path');\nvar assert = require('assert');\n var sinon = require('sinon');\n+var supportsColor = require('supports-color');\n var rewire = require('rewire');\nvar configFile = rewire('../lib/cli-config');\n@@ -133,18 +134,25 @@ describe('modules/cli-config', function() {\n     });\n describe('getReporter method', function() {\n\n\nit('should get console reporter if called without arguments', function() {\nvar basicReporter;\n+\nbefore(function() {\n// The basic reporter varies on environment.\nbasicReporter = supportsColor ? 'console' : 'text';\n});\n+\n\nit('should get a basic reporter if called without arguments', function() {\n             var reporter = configFile.getReporter();\n     assert.equal(typeof reporter.writer, 'function');\n\n\nassert.equal(reporter.path, path.resolve('./lib/reporters/console'));\nassert.equal(reporter.path, path.resolve('./lib/reporters/', basicReporter));\n     });\n\n\n\nit('should get console reporter if called with arguments with default values', function() {\n\nit('should get a basic reporter if called with arguments with default values', function() {\n             var reporter = configFile.getReporter(undefined, true);     assert.equal(typeof reporter.writer, 'function');\n\n\nassert.equal(reporter.path, path.resolve('./lib/reporters/console'));\n\nassert.equal(reporter.path, path.resolve('./lib/reporters/', basicReporter));\n     });\nit('should get text reporter if called with colors = false', function() {\ndiff --git a/test/cli.js b/test/cli.js\nindex 314e366..56e0f45 100644\n--- a/test/cli.js\n+++ b/test/cli.js\n@@ -6,6 +6,7 @@ var assert = require('assert');\n var glob = require('glob');\n var hasAnsi = require('has-ansi');\n var rewire = require('rewire');\n+var supportsColor = require('supports-color');\n\n\n\n\nvar cli = rewire('../lib/cli');\n var startingDir = process.cwd();\n@@ -317,7 +318,14 @@ describe('modules/cli', function() {\n     });\n describe('reporter option', function() {\n\n\nit('should implicitly set console reporter', function() {\nvar basicReporter;\n+\nbefore(function() {\n// The basic reporter varies on environment.\nbasicReporter = supportsColor ? 'console' : 'text';\n});\n+\n\nit('should implicitly set a basic reporter', function() {\n             var result = cli({\n                 args: ['test/data/cli/error.js'],\n                 colors: true,\n@@ -325,7 +333,7 @@ describe('modules/cli', function() {\n             });\n     return result.promise.always(function() {\n\n\nassert.equal(path.basename(result.reporter), 'console');\nassert.equal(path.basename(result.reporter), basicReporter);\n             rAfter();\n         });\n     });\n@@ -492,7 +500,7 @@ describe('modules/cli', function() {\n         });\n     });\n\n\n\nit('should have colors output', function() {\n\nit('should ' + (supportsColor ? '' : 'not ') + 'have colors output', function() {\n             var result = cli({\n                 colors: true,\n                 args: ['test/data/cli/error.js'],\n@@ -500,7 +508,7 @@ describe('modules/cli', function() {\n             });     return result.promise.fail(function() {\n\n\nassert(hasAnsi(console.log.getCall(0).args[0]));\nassert(hasAnsi(console.log.getCall(0).args[0]) === supportsColor);\n         });\n     });\n });\n-- \n1.9.5.msysgit.0\n``\n. Oh, nice, I didn't know mocha had a--colorsargument and that it would force it on the tests. If it works, I agree it's the easiest change.\n. Sure, though the colors issue is in no way Windows-specific. Do the tests not fail on linux if you runnpm test > results.log`?\n. Though, as a user who uses jscs on Windows all the time, I appreciate the effort :)\n. Because git will check out text files with CRLF line endings by default. he code style checker that is part of the tests here will fail since the line endings won't be LF.\n. \n\n\n",
    "samlecuyer": "@mrjoelkemp I cleaned up the things you mentioned and squashed them into a single commit (sorry to rewrite the history :|)\n. @mikesherov fixed!\n. @mrjoelkemp would you mind taking a look?\n. @mikesherov thanks for the feedback!\n. Would something like\n\"requireCapitalizedConstructors\": { \n    'somethingNative': false, \n    'anotherNativeThing': false\n}\nwork for you?  I'm fine either way, I'm just brainstorming.\n. @mrjoelkemp thanks for the feedback, I've updated to follow the new format.\n. (true).allExcept returns undefined, the if (allExcept) one line down prevents an error.\n. @mrjoelkemp like @alawatthe said, it's a parsing error vs a type error issue.\n. ",
    "Nolski": "Ah, my mistake. I was a bit confused about the null property disabling a rule and having to explicitly set the require or disallow value depending if you want a specific rule or not. Thanks for the help! :)\n. ",
    "elidupuis": "Upon further inspection, this is only the case when esnext: true.\n. ",
    "ozten": "this is export default specifically. Removing default \"fixes\" the bug (but will break your single function module).\nMinimal test case:\n```\nexport default function() {\n}\n$ jscs --esnext -c js/.jscsrc js/foo.js\nIllegal space after opening round bracket at js/foo.js :\n 1 |export default function() {\n   --------------------------------^\n 2 |\n 3 |}\n1 code style error found.\n```\n. ",
    "domenic": "+1\n. This is still not fixed. I tried pulling in https://github.com/tmpvar/jsdom/pull/1266 and changing the offending line but I still get\nNewline before curly brace for block statement is disallowed at lib/jsdom/living/attributes.js :\n   106 |};\n   107 |\n   108 |exports.NamedNodeMap = NamedNodeMap;\n--------------------------------------------^\n   109 |\n   110 |{\ninside this code:\n``` js\nexports.NamedNodeMap = NamedNodeMap;\n{\n  let prototype = NamedNodeMap.prototype;\n  while (prototype) {\n    for (const name of Object.getOwnPropertyNames(prototype)) {\n      reservedNames.add(name);\n    }\n    prototype = Object.getPrototypeOf(prototype);\n  }\n}\nexports.createNamedNodeMap = function (element) {\n  const nnm = Object.create(NamedNodeMap.prototype);\n  nnm[INTERNAL] = {\n    element,\n    attributeList: [],\n    attributesByNameMap: new Map()\n  };\n  return nnm;\n};\n```\n. ",
    "bjrmatos": "Awesome!! Thanks for your feedback @mikesherov.\n. ",
    "mchandleraz": "Is this not the same result as require-padding-newline-after-variable-declaration ?\n. ",
    "stefanosala": "Ops, thanks :)\n. I'm not sure we would really need an opposite, but maybe I'm too focused on our internal workflow. If that's required, I can implement it easily, just let me know.\n. I'll add it in a separate PR.\n. @zxqfox news on this? :)\n. @mrjoelkemp makes sense! Is this what you mean? I didn't refactor too much the code, just added the allExcept option and kept the rest. How would you handle deprecation of the old parameters?\n. I already added the support for both styles (exceptUndefined or exceptRequired and allExcept: ['require', 'undefined'] :) I think this is the way to go, but I'm open to suggestions or requests.\n. @zxqfox thanks for the review, I just pushed a couple of commits that should solve all the issues. Please let me know if everything is ok and I'll be happy to squash the commits.\n. :+1: squashed!\n. Yay, thanks! I'll update #768 with similar changes.\n. Yes, sorry, it will take some days. I'm currently on vacation ;)\n. Same here, even without babel-jscs, since this commit: https://github.com/jscs-dev/node-jscs/commit/431b7231f3f456e856fc92e7ae1b885b9c6eda22\n. Good catch, there was a bug in the previous code.\n. Right! I updated it with the new syntax.\n. Well, you can still use it if you want, but the doc now says you can already start to use the new syntax. I'm open to changing it back anyway if you want :)\n. :+1: I got your concern and changed the doc accordingly.\n. ",
    "dbrinegar": "Sure understood that this is an interpretation of the guide.  While the style guide examples have places that do use one var per decl, I don't think they are documenting that as a requirement.  You can do that, or you can string them together, there's no point of view in the style guide or the body of code following this style guide as far as I can see.  Lots of instances both ways.\nReal issue: I was hoping preset=google to be something like a gjslint replacement, but on comparing a few of the gjslint test cases it looks like the gap is pretty wide.  Maybe a note in the docs \"this is our interpretation of the style guide and not meant to be compatible with gjslint\"  would clarify that for others.\n. @zxqfox click the expander arrow buttons to see the code samples.  I think they wrote the examples this way because it was more succinct.  Using one var per decl is obviously allowed, my point is that it isn't a rule to use it only this way.\n. Cool, thanks @cramforce for the clarification.\nSo while gjslint is stricter in some ways, jscs preset=google is stricter in other ways, such as multi var decl.  Got it!\n. ",
    "cramforce": "In Google code reviews var a, b, c; is typically not very appreciated :)\nI personally consider gjslint as more of a recommendation since it tends to have false positives.\n. ",
    "rubennorte": "Sorry guys for bringing this up again, but I think you should reconsider the usage of disallowMultipleVarDecl in this case. When we choose the Google code style we write code that fits the rules that are specified in its official documentation. For all other undocumented cases it's assumed that we can freely choose the way we want to solve them (being consistent in the project scope). If the \"google\" preset doesn't take this into account people may think the linter isn't working the way it should. Also, people who have been a long time adhering to the guide may be frustrated about it telling their code is wrong.\nIf you think Google style guide is too ambiguous about some things, you better create a new style guide called \"google-strict\" or similar. IMO applying arbitrary rules on top of the guide is a mistake and I think the \"google\" preset should adhere only to the official documentation.\nThanks for considering.\nEdit: At the very documentation of the style guide you can find examples of multiple var declarations, so I think that in case the \"google\" preset should be more concrete (which I don't) it should have an option like \"requireMultipleVarDecl\" set to true.\n. Thanks @hzoo, I know that but that's not the point. The point is: why should I overwrite a rule that is not in the style guide of the preset I'm using? Who and why said the google style guide doesn't allow multiple var declarations when in fact they are present in the official documentation?\n. Yeah, that's it and now I can't find any either... I'd swear I saw examples in there, but it must have been a long day for me, sorry.\n. Having specific configurations for inner directories (without extend) would also be great. Now only the root .jscsrc applies.\n. Maybe I didn't explain it very well.\nI think the main problem here is that the configuration is not scoped to the file being checked but to the working directory where the process was run. That way if I put a .jscsrc file inside any other directory of my project it's being ignored because the main .jscsrc is used.\nThe configuration in JSHint works the way I say and it's really flexibile, allowing us to apply different configurations for different directories with no need to run the command multiple times per configuration or target. The possibility to extend other configuration files is just something added on top of that.\nDo you understand what I mean?\n. ",
    "rexxars": "Just realized this is a duplicate of #963. Embarrassing.\n. ",
    "arschmitz": "LGTM\n. A couple more cases of this i ran into with jQuery UI are function arguments, comments that start with a number or symbol, urls, and commented out blocks of code.\n``` js\n// http://google.com\n// #3456 this does xxx\n// to yyy so that zzz.\nfunction( / option / ) {\n/*\ntest(  \"i dont want this to run\", function() { \n*/\n```\n. Yes reproduced repeatedly with this config on the jQuery ui repository\njs\njscs: {\n        all: {\n            options: {\n                requireCapitalizedComments: null,\n                fix: true,\n                config: \".jscsrc\"\n            },\n            files: {\n                src: [ \"demos/**/*.js\", \"build/**/*.js\", \"tests/**/*.js\", \"ui/**/*.js\" ]\n            }\n        }\n    }\nthe result is a passing status with no errors on each run\nbut running git status after each run shows an ever increasing number of changed files as it fixes 50 errors at a time.\nadding maxErrors: 500000 causes the whole lib to be fixed and 175 unfixable errors to be out put \n. @mikesherov ha ha your right it didnt get to jscs guess i should have had coffee before issue reporting this morning :-) \n. :+1: \n. +1 for this I actually just ran into some code today I wished I could have enforced this on\n. This should be fine now\n. ",
    "davejhilton": "Thanks,\nI've now addressed the stylistic and code-coverage concerns mentioned above.\n. Awesome. So what's left before it gets merged?\n. Sounds good, thanks!\n. ",
    "aju": "I'm using .jshintrc file and its located in C:/Projects/XXXXXXX/\n. .jscsrc :) sorry for mistake\n. I tired globally and locally (node node_modules/jscs/bin/jscs PATH). I tried with \"./\" at beginning no luck :(\n. 1.11.2 win7 :(\nSame files and same command on linux works as expected :/\n. Fixed. I was testing on node 0.11.X (unstable) updated to 0.12 (stable) and it works :)\nSorry for all the fuss.\n. Yeah - I think it was something wrong with cwd but haven't checked in details\n. ",
    "solderjs": "Likewise I would like to require yoda conditions for === and ==  because it prevents accidental assignment where comparison was intended.\nHowever, in the case of <, >, >= and <= it's more difficult to understand and there's no safety advantage (the safety there comes from always writing it so that the condition is true to prevent unchecked vars like null >= 3)\n. ",
    "wvankuipers": "@mikesherov Yep, worked fine in 1.10.0\nWill try disallowSpacesInsideParentheses: true, thank you!\n. ",
    "RoystonS": "Ah yes, #1013 - apologies!\n. ",
    "Slayer95": "I agree that yoda conditions are only useful to guard against that typo (i.e. requireYodaConditions can be limited to it. However, that's more easily dealt with other sort of rules, like JSHint's \"Expected a conditional expression and instead saw an assignment\".\nRegarding disallowYodaConditions, an argument based on aesthetics and backwards compatibility can be made to keep supporting the current behavior, but I wouldn't mind its getting restricted to ==.\nInterestingly, ESLint provides the option to forbid Yoda Conditions except for ranges, which is my exact use case.\n. Waiting for feedback / replies to @zxqfox with details regarding what we want as destination.\nI guess I should have used something like \"WFF\" rather than \"WIP\" -if that's a thing.\n. Updated tests as requested.\n. From README.md\nJSCS \u2014 JavaScript Code Style.\nJSX is not JavaScript :| If anything, it should be supported under a flag, not by default.\n. In that case, JS is Java o:\nDo we have actual numbers? As in relative to the total JSCS userbase?\n. That's because it requires Yoda's support for an array of operators, which is only merged in 2.0.\n. You should make it null\n. Removed it.\n. It wouldn't actually break anything though. That is, no failing builds on update.\n. Will look at it.\nUpdate: Oh, I see what you mean. Ok, will deal with it.\n. ",
    "mattgrande": "This is my current config:\n{\n  \"preset\": \"airbnb\",\n  \"disallowSpacesInsideParentheses\": null,\n  \"safeContextKeyword\": [\"me\", \"vm\"]\n}\nThere is only one var declaration in the function I posted (and several others that are now getting this message), unless you're saying you can only define one variable per function...\n. This reared it's head for me again today, since cst eliminated support for older versions of node again in v0.4.8 (and I'm still on Node 0.10.33...)\nFor anyone else coming here, I got around this by creating an npm-shrinkwrap.json file, and setting the cst version to 0.4.7:\n{\n  \"dependencies\": {\n    \"jscs\": {\n      \"version\": \"3.0.7\",\n      \"from\": \"jscs@3.0.7\",\n      \"dependencies\": {\n        \"cst\": {\n          \"version\": \"0.4.7\",\n          \"from\": \"cst@^0.4.3\"\n        }\n      }\n    }\n  }\n}\n(If you've never used shrinkwrap before, I recommend reading here: https://docs.npmjs.com/cli/shrinkwrap)\n. Oh! I just assumed it was the same issue, should've checked cst to be sure.\nLooks like they've released 0.4.9, so this is no longer needed!\n. ",
    "jfelchner": "Any news on this?\n. @markelog I have zero clue about how all this is set up so sorry, I'm not going to be much help. :(\n. @hzoo I'm on 1.11.3\n. @hzoo confirmed!  Adding \"esnext\": true to the .jscsrc fixes the problem.\nThanks!\n. Additionally the check that verifies whether there's a space after the object literal key (SpaceAfterObjectKeys) also throws an error because it sees the ].  Not sure if you want me to open up another ticket for that one.\n. FWIW, this functionality is similar to ESLint's consistent-as-needed option.\n. ",
    "ashclarke": "I also have this issue with do while statements, where the while keyword is on a new line.\ne.g.\n``\nKeywordwhile` should have an empty line above it :\n    90 |\n    91 |                        node = node.offsetParent;\n    92 |                    }\n-----------------------------^\n    93 |                    while (node);\nFROM:\ndo {\n    node = node.offsetParent;\n}\nwhile (node);\n```\nhowever:\n```\nthing = [];\nwhile (thing.length) {\n    // more code\n}\n```\nor:\n```\nif (!thing) {\n    thing = [];\n}\nwhile (thing.length) {\n    // more code\n}\n```\nis also valid.\n. Nice spot! I confirm I use 4 spaces for indentation.\n. Nice and quick! :smile: :+1:\nEDIT:\nInterestingly @alawatthe, My rules are alphabetically ordered, so validateIndentation is on line 130 of my jscsrc file. requireCapitalizedComments is on line 64. Can post my .jscsrc if you'd be interested.\n. Disallow mixed spaces and tabs :)\n. Shall I make jscs and jshint default exceptions?\n. I have created a PR (#1052) with the change. This is one of my first contributions to an established repository, so please offer suggestions and advice if it is A) terrible or B) lacking something important!\n. @mikesherov When I do the next commit, should I squash it retrospectively or just have the additional commit?\n. @mikesherov PR updated.\n. @mikesherov Last update I hope :)\n. No worries, I know you guys have a lot on your plate :) :+1: \n. Wouldn't it throw first, due to the \"first item should be a string\" assertion? Will update it to use !!exceptions.length.\n. Ah I thought it would affect the textblock checking later. Will do!\n. Shall I remove the text about the exception? Does it remain useful here, given the early return?\n. I thought it would save having to do unnecessary text replacement, and related operations, if it is an exception, which now would cause an early return.\n. I don't see why not :B\n. Ah, nevermind. I can initialise them after doing the exception check. It would then have the same effect.\n. I'm going to do every rather than some, because it would be asserting \"not some\" are \"not equal to string\", so it becomes a double negative. Sound ok?\n. Doh!\n. Good point!\n. Much :)\n. ",
    "nicolasgarnier": "Any news on this feature? We want to add JSCS checks as part of the Polymer Starter Kit's build pipeline so we're trying to assess if we should go for a workaround or wait for this.\nCheers!\n. Awesome thanks guys. We'll keep an eye on this PR and hope for the best :)\n. ",
    "morenoh149": "@mikesherov that's some strong unix-fu \ud83d\udc7e\n. ",
    "msikma": "It might be good to generalize this rule a bit. jQuery is far from the only library that uses the $ sign for its objects, e.g. Zepto is an alternative. Maybe the rule should be that this covers variables that were set through a $ function call. Possibly with an extra related option to also cover instances like var $el = jQuery(\"element\");\n. ",
    "sanemat": ":bowtie:\n. ",
    "vkramskikh": "I'd really love to see this in master. Double spaces is the most frequent error in my project which is still not covered by JSCS.\n. ",
    "sdepold": "Will this change also change the behavior of requirePaddingNewlinesBeforeKeywords: [\"while\"] when using a do-while loop?\n. So I had this code:\n```\nvar conflict, something;\ndo {\n  something = calculateSomethingRandom();\n  conflict = isThereAConflict(something);\n} while (conflict)\n```\nAnd it would tell me that there is not newline before while (which is true). Ideally it would be possible to treat do while in a special way\n. Done https://github.com/jscs-dev/node-jscs/issues/1092\n. It broke the build :(\n. ",
    "ehartford": "Please pull this!  Needed!\n. Please pull? \n. can not make a separate issue for that case?\n. ",
    "serg-io": "+1\n. ",
    "felixge": "@markelog sure, it'd be cool :)\n. ",
    "callumacrae": "Does this issue also include stuff like checking for complexity, returning early from functions, and the other things mentioned in https://github.com/jscs-dev/node-jscs/issues/1071#issuecomment-74583649 ?\nThis would be great! I'm a fan of node-style-guide :smile: \n. I'm potentially throwing a spanner in the works in felixge/node-style-guide#56. Sorry about that.\n. Ah, didn't know I could extend presets! (I've never used one before) Thanks :)\n. ",
    "dman777": "Perhaps this is a gulp-jscs issue? Or am I doing something wrong? From usage, it looks like config. is not mandatory.\nhttps://www.npmjs.com/package/gulp-jscs\n``` javascript\nvar gulp = require('gulp');\nvar jscs = require('gulp-jscs');\ngulp.task('default', function () {\n    return gulp.src('src/app.js')\n        .pipe(jscs());\n});\n```\n. ",
    "angelsanz": "Does this still apply? I don't think that's what it does at the moment - currently, it's disallowing any number of newlines between the opening brace and the remaining chunk of the object literal, and also between the closing brace and the previous chunk of the object literal.\n. Yes, that sounds more reasonable, for correctness. \nSubmitting in a little.\n. I just realised we already have disallowPaddingNewLinesInObjects. \nHence I think the matter of whether adding a new rule or a particular configuration of disallowPaddingNewLinesInObjects is still open, and this time the latter seems more reasonable to me.\n. I believe #1487 should be clarified before we can base the implementation of this out of disallowPaddingNewLinesInObjects.\n. Ok, so given that disallowPaddingNewLinesInObjects is taken to mean \"only disallow those newlines adjacent to the curly braces in object literals\" as per the resolution of #1487, I guess the sensible choice for this configuration would be that this rule be configured with a number indicating how many such newlines are allowed (the currently implemented behaviour would be 0, and I believe a popular choice would be 1).\nWhat do you think of this idea?\n. #1488 clarifies the docs. I don't know if what's actually wanted is the behaviour described in the current docs. In that case it's the implementation what needs to be changed.\nAny hints?\n. ",
    "iamdanfox": "I'm afraid I'm completely new to the codebase, but might be able to try implementing it.\nFrom looking through lib, would you recommend using file.iterateNodesByType with VariableDeclarator?\nPresumably we'd then need to go through tokens of node.left?\n. The MDN article shows a lot of different variants (e.g. nested destructuring, within for of loops, as function parameters and computed object property names).\nGoing for the simple assignment case sounds look a good place to start.  Would ObjectExpression catch things like:\nvar obj = {x: 1, y: 2};\nvar x, y;\n{x: x, y: y} = obj;\nI was wondering whether AssignmentExpression might be appropriate?\n(I think it's probably sensible for me to let a more experienced contributor implement this - I can't really commit the time to produce something good!)\n. ",
    "mugenkanosei": "I'm experiencing the same issue using Visual Studio 2013 Update 4 with Web Essentials 2.5.4. It appears that the Web Essentials is using version 1.8.0 of JSCS. I was able to reproduce using this code:\njavascript\n(function ()\n{\n    function AngularController() {\n        var vm = this;\n    }\n}());\nCommenting out the var vm = this; allows JSCS to work.\nThis is a recommended pattern when creating an AngularJS controller as noted in the AngularJS Style Guide by John Papa.\nEDIT:\nI was using the default .jscsrc that came with Web Essentials. When I created my own custom one based off the Google preset, it started working. I'll have to test to see if I can find the setting that makes it break.\nEDIT 2:\nFound it. In the default .jscsrc that came with Web Essentials they have \"safeContextKeyword\" : true which causes the problem. If I change it to the correct syntax of \"safeContextKeyword\": [\"vm\"], then it works.\n. ",
    "duncanbeevers": "Is there an inverse of this rule? If I want to enforce the trailing-dot notation, I try using\njson\n\"requireOperatorBeforeLineBreak\": true\nBut this generates no warnings for either of these code blocks.\njavascript\nthis.\n  then(that);\njavascript\nthis\n  .then(that);\nLikewise, I get the same results when explicitly specifying the dot operator in the configuration.\njson\n\"requireOperatorBeforeLineBreak\": [\".\"]\n. Yes, it appears not. I'll keep an eye on #511 for an eventual solution. Thanks.\n. ",
    "westonruter": "\nIt would be helpful to have a WordPress VIP preset. Their style rules \u2014 based on jQuery \u2014 are here:\nhttps://make.wordpress.org/core/handbook/coding-standards/javascript/\n\nNote that these aren't WordPress.com VIP standards. They are WordPress Core standards. So the JSCS naming standard should reflect that. For PHP_CodeSniffer we have a \u201cWordPress\u201d superset standard library with all of the sniffs, and then we have subset standards for \u201cWordPress-Core\u201d, \u201cWordPress-VIP\u201d, and \u201cWordPress-Extra\u201d.\nJust wanted to note as well that PHP_CodeSniffer supports tokenizing and applying sniffs to JS as well as PHP. Some of the sniffs in the WordPress-Coding-Standards project apply to JS files as well, though PHP has been the exclusive focus for that project thus far.\nSee also: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/39\n. Depends on how many rules you come up with. If you're specifically targeting the standards in the Core handbook, then wordpress-core seems right.\n. :+1: \n. :+1: The WordPress Core coding standards should be used by themes and plugins as well, so it wouldn't be limited to the Core project itself: so yes should be used across all WordPress projects.\nBTW, there is a .jshintrc in Core: https://core.trac.wordpress.org/browser/trunk/.jshintrc\n. Opened Trac ticket to get this added to WordPress Core: https://core.trac.wordpress.org/ticket/31823\n. Also opened PR to add it to VIP Quickstart, as referenced above: https://github.com/Automattic/vip-quickstart/issues/414\n. @KrekkieD sure, but then it seems like requireCapitalizedComments would need to be usually excluded, considering most JS files have JSHint/JSLint configuration comments like global.\nOtherwise, requireCapitalizedComments will need to be excluded by default for the wordpress preset.\n. ",
    "wbyoung": "Just adding a :+1:\nFor now, I've achieved what I want by adding a filter that does not report specific rules failing within a test directory, but this feels like a hack.\nI'd love to see something more like JSHint extends with config the search starting at the file being linted and moving up through the directory ancestry.\n. ",
    "ryanbahniuk": ":+1:\n. ",
    "localnerve": "Just ran into this myself.\n+1 for wanting to have jshint style directory configs.\nWhen jsdoc is in the mix, you at least need a way to exclude or alter doc requirements from core requirements (consider mocha tests for example).\n. ",
    "probablyup": "@mikesherov That one is not documented on http://jscs.info/rules.html, thanks for the heads up :)\n. @mikesherov Sure, this was more of a reach anyway :) I thought it would be a good addition, since it's a common pattern to enforce a this alias after more than one use to take advantage of minification. this can't really be minified on its own after all.\n. @mikesherov Valid. Thanks :)\n. @mikesherov Hmm, but what if the first instance it picks up is not the desired one?\n. Sure, happy to!\n. @hzoo Yup, that config would work nicely. Will update my request.\nDoesn't look like that other PR has been merged yet?\n. @mikesherov Travis passed but appveyor seems to have a lot of unrelated problems. Is it required to have appveyor go green to get merged?\n. @zxqfox Rebased and it's still failing\n. @mikesherov I tried playing around in that ruleset and found it pretty hard to follow - will let you grab this one if it absolutely can't live as its own rule.\n. You should also add a test for mixed types.\nconst, then let for example\n. ",
    "BridgeAR": "+1\n. ",
    "EladBezalel": ":+1: \n. ",
    "aronwoost": "+1\n. I'll at least try to provide tests.\n. @markelog Would it work with \"ignoreSingleValue\"? Or should we better have maximum and ignoreBrackets options like in validateNewlineAfterArrayElements? (see @hzoo above)\n. ",
    "nickpresta": "@hzoo thank you for digging into this. I will watch the esprima ticket for a resolution. Feel free to close this ticket.\n. ",
    "gsklee": "Something other than magic comments, please.\n. ",
    "royerboat": "Glad to hear it! Thanks for responding so quickly!\n. ",
    "Reinmar": "Another test case:\n345 |  );\nMultiline comments should not have tokens on its ending line at core/loader.js :\n   227 |/*\n   228 |foo\n   229 |*/ // %REMOVE_LINE%\n----------^\n   230 |\nPasses on master, throws on v1.11.3.\n. So you don't find the inconsistency between rules like \"requireSpacesInsideArrayBrackets\" and \"requireSpacesInConditionalExpression\" to be a bug?\n. ",
    "fubu": "I just came up with another idea which would help me make better decisions when auto-configuring. Although the initial approach here supports me in choosing the right preset, the tool does not assist me when I have to decide whether to create an exception or to fix the issue myself: It just tells me which rules my codebase violates, but gives no clue how bad it really is. Maybe it only affects a few places or a single file (so it may be easy for me to fix or ignore), or maybe it's a more general problem (so I probably want to add an exception)?\nIn short: When asking for a decision per violated rule, tell the user the amount of errors and files flagged by this specific rule.\n@mrjoelkemp I could add this on top of the existing pull request if that's okay with you guys.\n. Not sure what exactly should be tested -- probably not that \"#Rules\" shows up in the output, but maybe that the reported number of violations is correct? (which boils down to a verification of getUniqueErrorNames(errors))\n. Yep, managed to do it in the meantime, thanks! Don't know about the failed build though, the AppVeyor page takes forever to load...\n. Oops, I didn't realize there was another module involved... :) Unfortunately there seems no way to hand prompt some metadata (because in my opinion the \"associated rule\" should be part of the prompt's state rather than being loosely bound via a random list index, as it was before).\n. :+1: didn't think about this\n. ",
    "kimmobrunfeldt": "I'm getting the same error \"Unknown node type JSXElement\". Has the fix been released yet? If not how can I use a dev version or to fix it otherwise?\nI use these versions of esprima-fb and jscs:\n\"esprima-fb\": \"13001.1.0-dev-harmony-fb\",\n\"jscs\": \"1.11.3\",\nStacktrace:\nError: Unknown node type JSXElement.\n    at Controller.traverse (/Users/kbru/code/tty/board/node_modules/jscs/node_modules/estraverse/estraverse.js:515:31)\n    at Object.traverse (/Users/kbru/code/tty/board/node_modules/jscs/node_modules/estraverse/estraverse.js:707:27)\n    at Object.iterate (/Users/kbru/code/tty/board/node_modules/jscs/lib/tree-iterator.js:9:20)\n    at Object.JsFile.iterate (/Users/kbru/code/tty/board/node_modules/jscs/lib/js-file.js:331:29)\n    at Object.JsFile (/Users/kbru/code/tty/board/node_modules/jscs/lib/js-file.js:34:10)\n    at StringChecker.checkString (/Users/kbru/code/tty/board/node_modules/jscs/lib/string-checker.js:139:20)\n    at null.<anonymous> (/Users/kbru/code/tty/board/node_modules/jscs/lib/checker.js:40:25)\n    at Array.<anonymous> (/Users/kbru/code/tty/board/node_modules/jscs/node_modules/vow/lib/vow.js:699:39)\n    at Immediate.callFns [as _onImmediate] (/Users/kbru/code/tty/board/node_modules/jscs/node_modules/vow/lib/vow.js:23:35)\n    at processImmediate [as _immediateCallback] (timers.js:374:17)\n. As a quick fix, I reverted back to esprima-fb@12001.1.0-dev-harmony-fb.\n. That worked for me too, thanks! \n. ",
    "Ppchiu": "can someone tell me why a '#!' would occur in a js file? \n. ohh, right. Thanks for the quick response!\n. ",
    "PaquitoSoft": "I guess I have the same issue.\nWith a code like this:\n```\n(function() {\n    'use strict';\ndefine(function(require) {\n    var a = require('a'),\n        b = require('b'),\n        c = require('c');\n\n```\nWhen running JSCS, it gets converted to this one:\n```\n(function() {\n    'use strict';\ndefine(function(require) {\n    var a = require('a'),\n    b = require('b'),\n    c = require('c');\n\n```\nBut I want to keep the indentation.\nThis is my config file (I used the Crockford preset):\n{\n    \"preset\": \"crockford\",\n    \"disallowDanglingUnderscores\": null,\n    \"disallowSpaceBeforeBinaryOperators\": null,\n    \"disallowSpacesInFunctionDeclaration\": null,\n    \"disallowSpacesInsideArrayBrackets\": null\n}\nAm I missing some configuration option?\nThanks and amazing job!\n. ",
    "lukeapage": "my mistake, sorry.\n. FYI: jshint has implemented this as the (currently undocumented) varstmt: true option\n. I might get round to it, but I already do quite a bit of open sourced contributions and I have a backlog of own time work for that\n. I found it works, but you have to run it multiple times - it took me 4 runs to remove all trailing space...\n. may be fixed by one of #1978, #1979, #1980\nNeeds a snippet of code that has the issue in...\n. I'm not sure how coverage is setup because I added lines to a function that clearly is tested, but coveralls is reporting the whole function untested ..\nhttps://coveralls.io/builds/4154698/source?filename=lib%2Ftoken-assert.js#L518\n. coveralls still showing wrong coverage: https://coveralls.io/builds/4154949/source?filename=lib%2Fjs-file.js#L865\nwhole function down as not tested..\n. > and\n\n\"All checks have passed\"?\n\njust because the coverage went up, it doesn't mean its not wrong\n. so are the existing tests all in the wrong place or is the code in the\nwrong place?\n. yeah but at the moment something is in\nthe wrong place.  is it a.  the tests or b.  the code\nits a bit harsh that fixing a bug needs me to refactor one or the other\nbecause you've decided the integration style of your own tests doesn't\ncount towards coverage.\n. i think the code is in the wrong place, it doesn't seem right to assert a\nwhole rule in token assert.\n. no other rule is going to check trailing space on the whole file - that is the rule!!\n. as noted in #1978 I think something isn't set up right with your coverage.\n. > We already use two ways of autofixing - token-assert and _fix property, i would rather not introduce the third one.\n\nWould you mind moving your autofixing logic to _fix, like that - https://github.com/jscs-dev/node-jscs/blob/ec8c0b0eda7cc1aa427c1a6c77ded42adab39c8c/lib/rules/validate-quote-marks.js#L136-L141 and https://github.com/jscs-dev/node-jscs/blob/ec8c0b0eda7cc1aa427c1a6c77ded42adab39c8c/lib/rules/validate-quote-marks.js#L146-L151?\n\nLooking at the _fix I don't see how that applies - _fix modifies tokens and the whole point of this is moving the autofixing out of tokens because modifying whitespace on these rules is alot more complicated with tokens (as you can see from the bugs I fixed in the other PR's).\nif you don't want to accept a much simpler way of fixing these rules, we'll have to go back to fixing the buggy behaviour of the token fixer in #1978, #1979 and #1980 and abandon the fixing of line endings.\nIf I was going to fix line endings by modifying tokens I would first abstract the logic in js-file that finds the token to edit whitespace.. but then you would have \"another way of autofixing\" which you don't want - so that seems a bit pointless.\n. look at where _fix is done - https://github.com/jscs-dev/node-jscs/blob/3e13e682d008b5cdb8b8cb00190c8dbb570f61c3/lib/string-checker.js#L266\nWhat you should be doing is joining together your two ways of autofixing, which look in most cases to be just simple refactorings of each other and allowing a 2nd way of autofixing which just changes the file after the fact.\nThere is a 3rd rule that will benefit from autoprocessing autofixing - disallowTabs. I don't think it really applies to anything else.\n. > but it kinda contradicts the idea of using AST/CST/tokens or parser itself. \nIt doesn't contradict it, it adds to it. Just because you have a complex way of doing something, why should you do it the complex way if there is a far simpler way of dong it?\nMost of the style-checks in jscs make sense to use an AST, but these 3 rules don't.\n\nI'm not sure why we would need to go this way if we have such powerful tools already.\n\nLook at this PR. The AST way of doing it is 64 lines of code. Its difficult to understand and its very buggy. Even with my 3 other fixes I am not convinced it will always work.\nThe post processing is 10 lines of code. It will always work.\nIts not about whats more powerful, its what makes sense for the job. File formatting like end of line and trailing whitespace does not make sense within the AST. If it did you would detect whitespace that way too - but you don't, you shortcut back to the source.\n. and this isn't coming from a dislike of AST or that way of doing it - I've made significant contributions to jshint and less.js, I know alot about parsing and processing and modifying AST's.\n. there is already a test without any line breaks in it.\n. no I'm not sure I need them. are you sure I don't? Its the classic push-pull between defensive coding and code coverage. If you know better tell me what to change or a test that checks it. Or alternatively, maybe you prefer my more radical approach in #1981?\n. if you see the coverage saying that isn't tested can you point me at it.\n. I'm waiting on making this change to see if the better approach in #1981 will be considered.\n. ",
    "gunnarlium": "https://github.com/yandex/codestyle/blob/master/javascript.md#general\n\nOne level of indentation is achieved with 4 space characters.\n. \n",
    "tarmolov": "It's a good intention to add this rule to the preset but It's a little bit dangerous and can break some projects.\nLet me explain why.\nIt's pretty common in Yandex to write a module declaration as below:\njavascript\nmodules.define(\n    'module1',\n    [   \n        'module2'\n    ],  \n    function (\n        provide,\n        module2\n    ) { \n    // ...\n    provide(module1);\n});\nAs you can see we pruned the extra indent on purpose because it increased the line total indent.\nIf we apply the new rule, we should add an extra indent in the code.\njavascript\nmodules.define(\n    'module1',\n    [\n        'module2'\n    ],\n    function (\n        provide,\n        module2\n    ) {\n        var module1 = module2;                                                                                                                                \n        provide(module1);\n    });\nFor example, bem-core library is in danger which is used preset yandex with a couple of overrides.\n@ikokostya what do you think?\n. :ok: \n. /\u0441\u0441 @alt-j \n. This code doesn't follow our code style in some cases. We'll write our own sample if you don't mind ;)\n. ",
    "amel-true": "Yep, Yandex.Money still using E4X and xscript. =)\n. Thank you. I'll try.\n. ",
    "blazarus": "Yeah, I agree with @zxqfox that it makes sense to handle this as a special case. Looking through Mozilla's Parser API, the node types we should be concerned about are ForStatement, ForInStatement, and ForOfStatement.\n. Thanks for addressing this so quickly!\nQuickly grepping through the code, it looks like require-multiple-var-decl specifically has checks for 'var' and 'const' but not 'let'. Not sure if that's intentional or not, though.\n. ",
    "hacker112": "I am not using ES6, and I exclude folders normally, I just made an simplified example above. I found a specific file and simplified it to find the root of the problem. What I found is that a var in switch-case might cause the problem. The following file throws the same exception.\n``` javascript\nfunction a(b) {\n    'use strict';\nswitch (b) {\ncase 1:\n    var problem = 1;\n}\n\n}\n```\n. ",
    "bramcordie": "My use-case is not so much about the number of parameters but more so the length when you line them all up. Lining them up or going multi-line (when you exceed your line limit) is by choice and should both be possible. If you go multi-line you do have to be consistent and put new lines after and before your round brackets.\njavascript\n// good\nfunction(short, and, sweet) {}\nfunction (\n  thisIs,\n  theLongestList,\n  ofParametersEverWritten\n) {}\n// bad\nfunction (thisIs,\n          theLongestList,\n          ofParametersEverWritten) {}\n. @zxqfox Aligning parameters is only relevant when you multi-line. You can either be a little more verbose and explicitly mention this in the rule name or just assume it, e.g.: requireAlignedMultilineFunctionParameters or requireAlignedFunctionParameters\nFor your second example, a separate rule to disallow multi-lining might be more appropriate: disallowMultilineFunctionParameters (this may create awkward situations when you exceed your line length)\nYou always align if the rule is set so I would replace the alignment option with lineBreakAfterOpeningBraces to accommodate your first example.\nMy proposition:\njavascript\nrequireAlignedFunctionParameters: {\n  lineBreakAfterOpeningBraces: <boolean>,\n  lineBreakBeforeClosingBraces: <boolean>\n}\n. I didn't find a token-assert to check if all the parameters are aligned. Did I miss it? Should I add my own?\n. I found a suitable token-assert (differentLine) to check line breaks as you can see in my last commit.\nAgain, correct me if I'm wrong but I don't think that the spaceBetween assert in the example you linked can be used.\nrequireAlignedObjectValues only checks the space between the tokens of the object name and the colon on the same line. It doesn't work for parameters because the tokens are not on the same line and the first one isn't even a parameter token.\nI hope this clears things up and helps figure out if-a/which token assert is appropriate to use here.\n. I think this rule should just check alignment. When the lineBreakAfterOpeningBraces option is not turned on you can leave the first parameter on the same line as the start of the function. This way it's not indented.\njavascript\nfunction (thisIs,\n          theLongestList,\n          ofParametersEverWritten) {}\nvalidateIndentation does not check the indentation of function parameters. Which is a good because else the use-case above would not be possible.\nIf I can access the validateIndentation value I could enforce it when all parameters are indented on new lines?\n. ",
    "schempy": "If nobody is working on this I'd like to give it a try. If it's available could you provide an example where Esprima is giving an error that's not from parsing?\nThanks!\n. The following will produce an error 'Octal literals are not allowed in strict mode.'  \njs\nfunction f() {\n  var a = 021;\n}\nThe error is only in the tree object during the call to parseJavaScriptSource.\nIs that the type of error you'd like to log?\nThanks!\n. Silly question. When implementing this rule would you check if requireNewlineBeforeBlockStatements and requireCurlyBraces are set to specific values before checking the file? I'm guessing no but figured I'd ask.\nThanks!\n. Great. Thanks for answering. I'll try implementing this rule.\n. @markelog  Yes! I'm Working on a PR.\n. @hzoo @SimenB If nobody is working on this I'd like to give it a shot.\n. Awesome! Thanks!\n. If nobody is working on this I'd like to implement.\nThanks!\n. All tests pass running npm test locally. The AppVeyor failure complained not being able to run rule disallowUnusedParams. Any ideas on that error? That's one rule I didn't touch.\nMy setup:\nOS: Ubuntu 14.04\nNode version: 0.12.7\nNPM version: 2.11.3\nThanks!\n. Sure, that makes sense. Could also allow options to work with if/else, for etc... Don't want to make it more complicated than it needs. What do you think?\n. Sure another rule for those makes sense. I'll change the rule name to be requireNewlineBeforeSingleStatementsInIf\n. I changed the rule name to requireNewlineBeforeSingleStatementsInIf If things look OK I can squash the commits if you'd like.\n. The Travis CI build shows all tests passing. I noticed the following message from the node v0.10.44 build:\nBad response: 422 {\"message\":\"Couldn't find a repository matching this job.\",\"error\":true}\nNot sure if that is from coveralls. I did a rebase from the current master branch prior to the pull request.\n. ",
    "jcchingithub": "@mrjoelkemp You're welcome!\n. ",
    "witrin": ":+1: \n. ",
    "MartinKolarik": "It seems that as long as there's at least one capitalized comment at the beginning, all further comments are considered part of a textblock and therefore ignored:\n``` js\n// This\nconsole.log(1);\n// is\nconsole.log(2);\n// not\nconsole.log(3);\n// caught\nconsole.log(4);\n// as\nconsole.log(5);\n// well.\nconsole.log(6);\n```\n1235 should fix this.\n. ",
    "ariutta": "Great. I'll keep my eye on #480. When it's done, I'll see if I can get time to add this.\n. ",
    "chadhietala": "@mikesherov Yea Ember is using an older version. Will bump and report back.\n. @mikesherov Yes this appears to be effected by the Esprima bug. I bumped everything up to the latest and I still get the error.\n. ",
    "nevir": "You can work around it by depending on his pull request branch on esprima,\nand setting \"esprima\": \"node_modules/esprima\" in your jscsrc\nOn Tue, Mar 17, 2015, 07:36 Chad Hietala notifications@github.com wrote:\n\n@mikesherov https://github.com/mikesherov Yes this appears to be\neffected by the Esprima bug. I bumped everything up to the latest and I\nstill get the error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/1171#issuecomment-82387250.\n. \n",
    "jamesreggio": "This may not be the 'right fix', but the issue filed and +1'ed by other folks makes me think that it's reasonable.\n. @mrjoelkemp, the rule requires explicit exceptions for other style-checker directives (e.g., /* jshint: ...), so I wasn't 100% sure that a built-in exception for JSCS would be appropriate. That said, this is the JSCS project (not JSHint), so it works for me.\nThanks for the quick review + merge.\n. ",
    "MunGell": "I was thinking about changing it to singular form where necessary, but it is looking like we are using just one form in all the rules. I can change it, should I do the same for \"Type\"/\"Types\"?\n. Hey guys,\nThis should be corrected now, please take a look at the diff.\n. You are welcome!\n. ",
    "malsup": "I don't really.  I just assumed it would work without really thinking too hard about it.  :-)\n. ",
    "scottnonnenberg": "Doesn't seem to happen in 1.10.0. Sadly, that version still has warnings on node.js 0.12 due to xmlbuilder...\n. Looks like 1.12.0 does fix this problem. Thanks! The xmlbuilder warning isn't present in 1.11 or 1.12.\n. ",
    "gunnx": "Hi\nYes, I guess I was wanting to treat IIFE different to a regular block statement.\nHere I do want a space before the curly bracket\nif (x) { \n // do stuff\n}\nBut at times it is preferable to remove all spaces for IIFE.\nvar x = (function(){\n // do stuff\n})();\nAs there are rules for IIFE and Named function expressions, these rules don't work alongside block statements.\nI understand that the rules are to be independent but these do seem to clash.\n. ",
    "SteveALee": "If the message means option means a Mathematical 'binary operator\" (see http://en.wikipedia.org/wiki/Binary_operation) as it appears to then I think comma be included in the set .\n. Actually I then get a couple of unsupported rule errors\nJSCS: Unsupported rule: requireSpaceBetweenArguments\nJSCS: Unsupported rule: requireSpacesInForStatement\nSo I conclude that either the Crockford preset is out of date OR the WebEssentials implementation is. As these 2 aren't documented I'm guess it's the preset.\n. Surely in theory it would only be used the settings from the Crockford template in the project .jscsrc?\n. Copy and pasted into the new file in VS13 from \nhttps://raw.githubusercontent.com/jscs-dev/node-jscs/master/presets/crockford.json\nIf there is another way yo ucould add a note on the Preets section on http://jscs.info/overview.html\n. I created a downstream issue too - \nhttps://github.com/madskristensen/WebEssentials2013/issues/1816\n. Ah, yes that makes sense. Can you the add extra rules in the file after that \"preset\".\nCan I suggest that  you add a note to\nhttp://jscs.info/overview.html#presets\nThanks very much\n. Almost but not quite. There are still some version dependencies you can't quite escape. I'll stick to my patched version of crockford preset for now. heh\n\nThe value of property \"preset\" was \"crockford\" but must be one of the following values: \"jquery\", \"google\"\n. I looked at submitting a pull request for jscs-dev.github.io but have got a little lost.\nIt seems the dev branch creates master, from MD source files in a folder /jcsc but i cannot find those.\nStrangely they DO seem to exist in he root this repo. files.\n\nDo I just submit a PR for the OVERVIEW.md in this repo?\n. COol. I just have to figure how to turn it on in VS Web Essentials then :)\n. ",
    "fluidsonic": "These rules seem to be broken at the moment.\nWe use the configuration below to require this format:\njs\nvar a = [ 1, 2 ]  // spaces required in array creation\nvar b = a[0]      // spaces forbidden for array/object access\nIn the first line, jscs both requires and forbids the use of spaces so there's no way to validate the code.\n.jscsrc:\njson\n{\n    \"disallowSpacesInsideBrackets\": true,\n    \"requireSpacesInsideArrayBrackets\": \"all\"\n}\ntest.js:\n``` js\n'use strict'\nvar a = [ 1, 2 ]\nvar b = [1, 2]\n```\nOutput:\n```\nIllegal space after opening bracket at test.js :\n     3 |var a = [ 1, 2 ]\n-----------------^\n     4 |var b = [1, 2]\nIllegal space before closing bracket at test.js :\n     3 |var a = [ 1, 2 ]\n----------------------^\n     4 |var b = [1, 2]\nOne space required after opening bracket at test.js :\n     3 |var a = [ 1, 2 ]\n     4 |var b = [1, 2]\n-----------------^\nOne space required before closing bracket at test.js :\n     3 |var a = [ 1, 2 ]\n     4 |var b = [1, 2]\n---------------------^\n```\n. ",
    "david-gang": ":+1: \nThis is especially annoying with multiline comments like in ngdoc\n\n\u2190[1mExpected indentation of 1 characters\u2190[22m at \u2190[32mils\\ils.directive.js\u2190[39m :\n \u2190[90m   18 |\u2190[39m\n \u2190[90m   19 |\u2190[39m\n \u2190[90m   20 |\u2190[39m    /**\n\u2190[90m---------^\u2190[39m\n \u2190[90m   21 |\u2190[39m     * @ngdoc directive\n \u2190[90m   22 |\u2190[39m     * @name x.directive: y\n. \n",
    "boldt": ":+1: \nI do not use jscs until now, because of plenty of single line comments as shown above.\n. @zxqfox I guess your talking about the rule validateIndentation?\n. ",
    "JetFault": "This is pretty useful\n. ",
    "ppcano": ":+1:\n. ",
    "neagle": "This is a problem for me, too. I'm using validateIndentation: \"\\t\" which is really useful, but it's reporting errors for commented-out blocks of code like this:\n//User.findById(new ObjectId(userId), function (err, user) {\n        //if (err) {\n            //return next(new Error('Failed to load User'));\n        //}\n        //...\n    //});\nExpected indentation of 1 characters at controllers/users.js :\nWould it make sense to have an option along the lines of allowArbitrarilyIndentedComments? (Name mostly for humor value.)\n. :+1: That sounds great to me.\n. Thanks a lot! :smile: \n. ",
    "blah238": ":+1: \n. ",
    "smeijer": "Bind would not necessarily be banned. However the use of this will be for most part.\njs\nfunction () {\n  var self = this;\n  return self.color;\n}.bind(car);\n``` js\nfunction parent () {\n  var self = this;\nvar child = function () {\n    var self = this;\n    return self.foo;\n  }.bind(self);\n}\n```\nThe idea is to limit the usage of this, as it is a lot harder to trace the context of this, than the context of a property you've named yourself. You're not really enforcing such a thing by using safeContextKeyword. You're only enforcing that the context is given a certain property name when the developer is binding the context to a defined property.\nFor example \"safeContextKeyword\": [\"self\"] is not forbidding anything in the snippet below:\n``` js\nmyObj = (function () {\n  var self = this;\nself.foo = 'Foo';\n  this.bar = 'Bar'; // this should be a problem, property should be referenced as 'self.bar'\nvar instance = {\n    baz: 'Baz',\ngetFoo: function () {\n  return this.foo; // an error should be highlighted here, possible unwanted context change\n},\n\ngetBar: function () {\n  return self.bar; // this one is ok\n},\n\ngetBaz: function () {\n  var self = this; // switch context explicitly\n  return self.baz; // a property of 'instance'\n}\n\n};\nreturn instance;\n}());\nmyObj.getFoo(); // returns undefined\nmyObj.getBar(); // returns 'Bar'\nmyObj.getBaz(); // returns 'Baz'\n```\n. ",
    "aogilvie": "Cheers. Yeah sure, I'll just have a wee play and push something to say, overview.html?\n. Is there a sync API for either checkPath() or checkString()?\n```\nvar checker = jscs.checkPath(path);\nif (!checker) {\n    console.error(checker.failMsg);\n}\n```\nHere is what I use for JSHint:\n```\nfileContent = fs.readFileSync(filePath, 'utf8');\n// Run the linter\nisSuccess = jshint(fileContent, jshintrc);\n// Report the test\nif (!isSuccess) {\n    jshint.errors.forEach(function (err) {\n        .... // output error\n    }\n}\n```\n. ",
    "1999": "cc @6-post\n. What's so bad about using w3schools? I could've put a link to MDN but why is it a bad idea?\nUPD: Ah, you cherry-picked this, okay.\n. ",
    "arthurmchr": "ok, so it's an esprima bug.\nThanks !\n. ",
    "justin808": "To run the example, sync up the branch integrate-jscs and run:\n(cd client && npm run jscs .)\nI get 2 failures:\n```\nMissing newline after closing curly brace at ./assets/javascripts/CommentBox.jsx :\n    44 |      var newComments = React.addons.update(oldComments, {$push: [newComment]});\n    45 |      this.setState({ajaxSending: false, data: newComments, formData: this.emptyFormData});\n    46 |    }, (xhr, status, err) => {\n-------------^\n    47 |      this.logError(xhr, status, err);\n    48 |      this.setState({ajaxSending: false});\nMissing newline after closing curly brace at ./assets/javascripts/CommentList.jsx :\n    19 |        \n    20 |      );\n    21 |    });\n-------------^\n    22 |    return (\n    23 |      \n```\nBasically, the problem is fat arrow functions as method params. The last brace in the code below is not passing.\n``` javascript\n    var commentNodes = reversedData.map((comment, index) => {\n  // `key` is a React-specific concept and is not mandatory for the\n  // purpose of this tutorial. if you're curious, see more here:\n  // http://facebook.github.io/react/docs/multiple-components.html#dynamic-children\n  return (\n    <Comment author={comment.author} key={index} text={comment.text}/>\n  );\n});\n\n```\n. @hzoo Here you go:\n```\n\u279c  ~/j/react/react-webpack-rails-tutorial/client (rubocop-integration u=) npm run jscs --verbose .                                                                                                                                                                  [0:00:54]\nnpm info it worked if it ends with ok\nnpm verb cli [ 'node', '/usr/local/bin/npm', 'run', 'jscs', '--verbose', '.' ]\nnpm info using npm@2.7.5\nnpm info using node@v0.10.33\nnpm verb run-script [ 'prejscs', 'jscs', 'postjscs' ]\nnpm info prejscs react-webpack-rails-tutorial@1.1.0\nnpm info jscs react-webpack-rails-tutorial@1.1.0\n\nreact-webpack-rails-tutorial@1.1.0 jscs /Users/justin/j/react/react-webpack-rails-tutorial/client\njscs .\n\nMissing newline after closing curly brace at ./assets/javascripts/CommentBox.jsx :\n    44 |      var newComments = React.addons.update(oldComments, {$push: [newComment]});\n    45 |      this.setState({ajaxSending: false, data: newComments, formData: this.emptyFormData});\n    46 |    }, (xhr, status, err) => {\n-------------^\n    47 |      this.logError(xhr, status, err);\n    48 |      this.setState({ajaxSending: false});\nMissing newline after closing curly brace at ./assets/javascripts/CommentList.jsx :\n    19 |        \n    20 |      );\n    21 |    });\n-------------^\n    22 |    return (\n    23 |      \n2 code style errors found.\n```\n. @hzoo Thanks. Is there a way to run jscs without the npm wrapper?\n```\n\nreact-webpack-rails-tutorial@1.1.0 jscs /Users/justin/j/react/react-webpack-rails-tutorial/client\njscs --verbose .\n\nrequirePaddingNewLinesAfterBlocks: Missing newline after closing curly brace at ./assets/javascripts/CommentBox.jsx :\n    44 |      var newComments = React.addons.update(oldComments, {$push: [newComment]});\n    45 |      this.setState({ajaxSending: false, data: newComments, formData: this.emptyFormData});\n    46 |    }, (xhr, status, err) => {\n-------------^\n    47 |      this.logError(xhr, status, err);\n    48 |      this.setState({ajaxSending: false});\nrequirePaddingNewLinesAfterBlocks: Missing newline after closing curly brace at ./assets/javascripts/CommentList.jsx :\n    19 |        \n    20 |      );\n    21 |    });\n-------------^\n    22 |    return (\n    23 |      \n2 code style errors found.\n``\n. @hzoo I did the global install. Weird that it doesn't work. I'd rather just add the script to package.json than typing the full path. I'm usingnvmand I can runeslint` from the command line just fine.\n. /* eslint new-cap: [2, {\"capIsNewExceptions\": [\"DropTarget\",\"DragSource\"]}] */\n. it's those quotes\n. File with a header of that line produces the error.\n. I don't remember offhand what project it is, but I do remember that this file is a JSX file with some react.\nThe comment was on the very first line of the file, before imports.\n. @markelog What do you recommend? Is my version of jscs wrong? or my .jsrc? or version of node?\n. Should I first update to node latest? Did you pull my project and run jscs -x?\n. When I tried again, with no linting issues, so let's close this. I'll keep an eye out for this one. Thanks for the great work on this tool!\n. ",
    "Ky6uk": "Also this is happens in another time. If I use function expression\njs\nvar test = function () {\n    woof(); // <-- error here\n    bark();\n};\n. Ya. Looks like. Wrong validations if variable declare a FunctionExpression or CallExpression.\n. Maybe we should test call expressions or nested declarations too?\n``` js\nit('should not report if var declare a function or call expressions', function() {\n    assert(checker.checkString('var a = function () { console.log(false); console.log(true); };').isEmpty());\n    assert(checker.checkString('var a = (function () { console.log(false); return null; })();').isEmpty());\n});\nit('should report nested errors in a function or call expressions', function() {\n    assert(checker.checkString('var a = function () { var x; console.log(x); };').getErrorCount() === 1);\n    assert(checker.checkString('var a = (function () { var x; return null; })();').getErrorCount() === 1);\n});\n```\n. Okay then. I just will wait closing this issue because have some conflicts. Thanks for fixing.\n. ",
    "lsjroberts": "Thanks for the quick responses, I'll keep an eye on the other issue :)\n. ",
    "gibson042": "@jscs-dev is there something more to do for feedback on this?\n. Rebase complete. Why did the coverage report not pick up use of the new util functions by rules requiring them, though? But at any rate, they are now specifically tested.\n. Where does this PR stand? The missing coverage seemed reasonable to me (and consistent with preexisting files), but I can extend it if there's a non-decrease requirement. More than that, though, I want feedback on the approach and the ideas... as noted, this is a POC.\n. Thanks for the review. Am I correct in assuming that this has legs and that I should round it out with the above TokenCategorizer suggestion and disallowSpacesInsideParenthesizedExpression inverse rule?\n. (and then the SpacesInsideParenthesizedArguments [function call], /SpacesInsideParenthesizedParameters [function definition], and SpacesInsideParenthesizedStatement [if/for/while/etc.] pairs, of course). Any thoughts on the names?\n. Ok, I believe this is ready. Points for special consideration:\n- comments handling: is configuration like allExcept: ['//', '/*', '*/'] reasonable?\n- naming: ParenthesizedExpression, ParenthesizedArguments, ParenthesizedParameters, and ParenthesizedStatement alphabetize conveniently, but may not be as intuitive as e.g. ParenthesizedExpression, Call(Expression)?Arguments, (Function)?Parameters, and StatementParentheses\n. > How would we enforce\n\njs\n(options || { x: true } ).x\nbut disallow\njs\n(options || { x: true }).x\n?\n\nI'm not sure I understand... can you provide an English explanation of desired behavior? I've followed the other JSCS patterns, so it's possible to require spaces with a finite set of exceptions and also possible to disallow spaces with a finite set of exceptions, but AFAIK not possible to require spaces only for a finite set of \"inside\" characters.\n\nDid you run it on core source?\n\nFor jQuery? Not yet.\n\n\nNaming: ParenthesizedExpression, ParenthesizedArguments, ParenthesizedParameters, and ParenthesizedStatement alphabetize conveniently, but may not be as intuitive as e.g. ParenthesizedExpression, Call(Expression)?Arguments, (Function)?Parameters, and StatementParentheses\n\nWhat would those rules do? Could you give me couple examples?\n\nParenthesizedArguments or CallArguments or CallExpressionArguments: foo(\u2038a, b, \u2026\u2038), foo.bar(\u2038a, b, \u2026\u2038), (foo)(\u2038a, b, \u2026\u2038), etc.\nParenthesizedParameters or FunctionParameters or Parameters: function(\u2038a, b, \u2026\u2038) { \u2026 }, function foo(\u2038a, b, \u2026\u2038) { \u2026 }, etc.\nParenthesizedStatement or StatementParentheses: if (\u2038\u2026\u2038), for(\u2038\u2026; \u2026; \u2026\u2038), catch (\u2038x\u2038), etc.\nParenthesizedExpression: everything else\n. > I'm not sure I understand... can you provide an English explanation of desired behavior? I've followed the other JSCS patterns, so it's possible to require spaces with a finite set of exceptions and also possible to disallow spaces with a finite set of exceptions, but AFAIK not possible to require spaces only for a finite set of \"inside\" characters.\nI stand corrected... disallowSpacesInsideParentheses has an only option, although it appears to be unique. Would it be acceptable to add and/or reassess that outside of this PR?\n\n\nDid you run it on core source?\n\nFor jQuery? Not yet.\n\nI checked master-branch jquery.js with { disallowSpacesInsideParenthesizedExpression: true }, and found over 100 exceptions (which is not surprising, because jQuery will likely use the other three rules and leave this one unspecified... cf. https://github.com/jquery/sizzle/pull/330/files#r27985694 ). However, file analysis took two minutes. I profiled jscs, and traced it down to inefficiencies in estraverse.traverse by way of JsFile#iterate by way of JsFile#getNodeByRange. Not wanting to dive into the dependency, I addressed the outermost of these in e97c8ebf32a6a14283dad06684386975d03a9e60, which is technically out of scope for this PR but lowered runtime to 1.5 seconds (a reduction of 99%). If you'd rather see a separate PR for that, I could accommodate.\n. \"Round bracket\" references replaced and getNodeByRange improvement moved to a new PR.\n. I think this will erroneously report on updating a non-parameter variable (e.g., var special = false; \u2026 for ( p in o ) { special = special || test(o[p]); \u2026 }, cf. jquery:src/effects.js), and fail to report when using == null or === undefined to check an argument (e.g., a = a == null ? false : a).\n. Um, what? Infinity is most certainly not valid JSON: \n\nNumeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted.\n. @markelog I like the result, but not the configuration syntax. Wouldn't allExcept: [\"ParenthesizedExpression\"] be more in line with recent deprecations than introducing independent ignore properties?\nDo you want to introduce other parentheses rules?\n\nI do, but haven't gotten around to it yet. However, allowing production-based exceptions like this for requreSpacesInsideParentheses seems to make such rules unnecessary for jQuery (but then again, many JSCS rules would become redundant through expansion of only and allExcept on more general forms).\nP.S. Are you planning to introduce categorization-based exceptions in disallowSpacesInsideParentheses here as well, to maintain parity?\n. Well, this rule satisfies jQuery, but it's going to start looking ugly when others need to ignore spaces inside declaration/invocation/statement parentheses. Maybe 4 cases are manageable, though.\n. I think there are still a few edge cases around ASI-restricted keywords and EOF like\njs\n// false positive: keyword, line terminator, punctuator\nyield\n\"ignored statement with leading punctuator\"\nand\njs\n// false negative: keyword, whitespace, line terminator or EOF, identifier or keyword or EOF\nbreak   // \u2190 tab\nundeclared\n\u2026but they may never come up.\n. I'm really sorry to jump in so late on this, but I have some major reservations.\nThe Name\nConsistency with #1254 would use SpacesInsideParenthesizedArguments if optimizing for alphabetical grouping, or SpacesInsideCall(Expression)?Arguments if optimizing for unambiguous comprehension. Which way to go remains an open question, since it was asked in https://github.com/jscs-dev/node-jscs/pull/1254#issuecomment-133107488 but never resolved. But SpacesInsideFunctionCalls is in my opinion far too similar to the existing SpacesInCallExpression rules (foo\u2038(a, b, \u2026)).\nThe Implementation\n1acc0c0b4c6afc1d2fab9257712977b76e887450 introduced TokenCategorizer.categorizeOpenParen and TokenCategorizer.categorizeCloseParen for just such purposes, and all parentheses rules should use them, lest we miss edge cases in unpredictable and inconsistent ways. For example,\njs\ncallExpression.callee( (parenthesizedExpression) )\nhas an open parenthesis preceding file.getTokenByRangeStart(firstArg.range[0]) that is not wrapping an argument list, which will trip up the code in this PR.\n. This duplicates #812, and could be solved by either implementing the sibling rules mentioned in #1254 or  more work along the lines of #1777. It is my impression that version 3.0 will be closer to the latter,  which is why I haven't done the former.\n/cc @markelog\n. To clarify, I don't think existing rules are sufficient to cover this case. There are at least two possible avenues for remedying that:\n- Introduce new SpacesInsideParenthesized\u2026 rules (following #1254)\n- Introduce new ignoreParenthesized\u2026 options in {Require|Disallow}SpacesInsideParentheses rules (following #1777)\n. > parser generates AST with circular refs\n- abstract syntax tree (AST): \"a tree representation of the abstract syntactic structure of source code\"\n- tree: \"an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.\"\nhttps://github.com/estree/estree is cycle-free for good reason.\n. I like this approach; it is a significant step towards a fully general treatment. Two comments:\n- It feels strange to hard-code underscore as the stem\u2013adfix separator in the midst of so much configurability... why not just incorporate separators directly into prefixes and suffixes?\n- \"I intend to still support RegExp values as they're nice for programmatic use\" should be interpreted as meaning that they are impossible to specify by static configuration, right?\n. minimatch can work if you manually insert *s at the correct positions (e.g., prefix \"opt_\" becomes pattern \"opt_*\").\nAlso, regular expressions could be specified as ESTree RegExpLiteral objects instead of specially-formatted strings:\njs\n{\n  regex: {\n    pattern: \"_[kMG]?Hz\",\n    flags: \"\"\n  }\n}\n. > Given \"opt_\" with minimatch, how would you get it to say what matched the \"\" part so that could be validated against the rule?\nGood point. It could be done with set or makeRe(), but not very robustly.\n. I like this a lot.\n. That seems overly complicated and slow for what it's doing (which is basically token.value = opposite[mark] + token.value.slice(1, -1) + opposite[mark]), and what it's doing seems inaccurate:\n- as noted, it will fail on multi-line strings because . doesn't match newline (jQuery uses [\\w\\W] for a true \"any character\" match)\n- it will also fail on strings containing unescaped quote characters, e.g. converting raw \"'\" into '''\nI think what you want to do is escape all unescaped quote characters in the string, then change the quote characters of the string... something like:\njs\nvar unescapedOpposite = {\n    '\"': /'/g,\n    \"'\": /\"/g\n};\n\u2026\ntoken.value = opposite[mark] +\n    token.value.slice(1, -1).split(/((?:\\\\[\\w\\W])+)/).map(function(part, i) {\n        return i % 2 === 0 ?\n            part.replace(unescapedOpposite[mark], '\\\\$&') :\n            part;\n    }).join('') +\n    opposite[mark];\nIt's also possible to do with a probably-faster but arguably more complex single-pass replace:\njs\nvar unescapedOpposite = {\n    '\"': /((?:\\\\[\\w\\W]|[^\\\\])*?)(')/g,\n    \"'\": /((?:\\\\[\\w\\W]|[^\\\\])*?)(\")/g\n};\n\u2026\nvar start = 0;\ntoken.value = opposite[mark] +\n    token.value.slice(1, -1)\n        .replace(unescapedOpposite[mark], function(match, prefix, mark, offset) {\n            var escaped = offset === start ?\n                prefix + '\\\\' + mark :\n                match;\n            start = offset + match.length;\n            return escaped;\n        }) +\n    opposite[mark];\n. Forgive the intrusion, but source is definitely not optional and should probably remain an independent parameter rather than entering the options object.\n. Because it's only an exception in one direction\u2014if I universally except \")\", then the immediately following close-parenthesis logic would erroneously allow \"((\u2026))\".\n. Good idea. So it would be analogous to string-checker.js or tree-iterator.js?\n. What a hairy if test! :dizzy_face:\n. Missing obj before the first left bracket.\n. Yeah, this will report in tons of cases where it shouldn't. I think a more reasonable restriction would be to property assignments immediately following an object literal assignment.\n. I'd probably start with the object literal assignment and iterate forward, breaking on the first non-AssignmentExpression (but allowing assignments to be wrapped in SequenceExpression and/or ExpressionStatement) or the first assignment where \"left\" is not a MemberExpression corresponding to the \"left\" of the object literal assignment.\n. Yes. These rules should look only at the characters beginning or ending comments, not at their contents.\n. I suppose this is also worth calling out. \"Round bracket\" reads weird to me, but it seems to be the terminology used here.\n. I would say it's more complicated than this... some keywords require immediately following parentheses (if, for, catch, etc.), intervening whitespace of which can always be removed. Others (return, throw, function, etc.) require whitespace only when necessary to separate them from keywords/identifiers (so return[] and function(){} are fine but thrownewError() and returnfoo and functionbar(){} aren't). I think you want to leverage and maybe extend/expose more of https://github.com/hzoo/node-jscs/blob/1885/lib/token-categorizer.js , which also deals with such cases (cf. its top-level regular expressions). But you definitely don't want to ignore these keywords outright.\n. An assert (and corresponding exception) is probably better than these rv = null silent failures.\n. Nevermind, I see that it's just handled elsewhere.\n. ",
    "viveleroi": "I was going to suggest the same. It's not a critical issue, I can use a variable or use an ignore flag, it just feels a little inconsistent. \n. We're using v1.12.0. Is that commit included? If so it's either not working or doesn't address this issue. If not, we can update to #latest\n. Oops, was looking at when the pr was opened and the first commit happened - not when it merged. My mistake, thanks\n. ",
    "avdv": "@hzoo Thanks a lot, I must admit that I overlooked that in the docs... :open_mouth: \n. I think this would erroneously permit:\njavascript\nvar f = {\n    \"name\": 1,\n    \"x\"            : 2\n};\nbecause you're completely disabling the check for individual lines without spaces. You would have to check whether all colons on all lines are at the same column or none of the lines actually has a space after the key.\nAfter diving deeper into the code, I now see that you're not allowing for arbitrary placement of the colon, but only directly after the maximum key name. In this case, your change is good.\nSorry for the noise.\nUm, but it does allow a mixture of styles, which is not what I'd expect:\njavascript\nvar f = {\n  \"n\": 1,\n  \"xasdf\"   : 2,\n  \"fyfyasdf\": 0\n};\n. @dreef3 LGTM\nJust for the sake of nit-picking, the implementation seems a bit overly complicated now and one doesn't easily see what's going on. Here's what I wrote last evening (too late to make a PR):\n``` javascript\n    check: function(file, errors) {\n        var exceptSingleline = this._exceptSingleline;\n        var exceptMultiline = this._exceptMultiline;\n        var exceptAligned = this._exceptAligned;\n        var exceptMethod = this._exceptMethod;\n    file.iterateNodesByType('ObjectExpression', function(node) {\n        var multiline = node.loc.start.line !== node.loc.end.line;\n        if (exceptSingleline && !multiline) {\n            return;\n        }\n        if (exceptMultiline && multiline) {\n            return;\n        }\n\n        var maxKeyEndPos = 0;\n        var colonPos = -1;\n        var isAligned = true;\n        var tokens = [];\n        node.properties.forEach(function(property) {\n            if (property.shorthand || property.kind !== 'init' ||\n                (exceptMethod && property.method) ||\n                node.type === 'SpreadProperty') {\n                return;\n            }\n\n            var keyToken = file.getLastNodeToken(property.key);\n            if (property.computed === true) {\n                keyToken = file.getNextToken(keyToken);\n            }\n\n            if (exceptAligned) {\n                maxKeyEndPos = Math.max(maxKeyEndPos, keyToken.loc.end.column);\n                var colon = file.getNextToken(keyToken);\n                if (colonPos < 0) {\n                    colonPos = colon.loc.start.column;\n                } else if (colon.loc.start.column !== colonPos) {\n                    isAligned = false;\n                }\n            }\n            tokens.push(keyToken);\n        });\n\n        if (exceptAligned && isAligned && maxKeyEndPos === colonPos) {\n            return;\n        }\n\n        tokens.forEach(function(key) {\n            var colon = file.getNextToken(key);\n\n            errors.assert.spacesBetween({\n                token: key,\n                nextToken: colon,\n                exactly: 0,\n                message: 'Illegal space after key',\n                disallowNewLine: true\n            });\n        });\n\n```\nIMO, this way it's easier to see what the exception of the rule is (so, no checking needed) and the \"no space after key\" no longer is an exemption of the exemption.\nOh, just in case I wasn't clear enough, your change is fine for me as is. :smiley:\n. > if you want to refactor @dreef3 /@avdv to be clearer later send another PR if we haven't already merged\n@dreef3 if you want, you can use my code and update your PR with it; that would be OK with me. Either way, thanks for your fix. Looking forward for the release... \n. ",
    "moroshko": "@zxqfox Are you saying that JSCS has no plans moving from esprima to Babel? I noticed that Facebook are deprecating esprima-fb and switching to Babel. I wonder what is the best way to use JSCS with JSX and ES6?\n. So, what is the currently recommended way to use JSCS with JSX and es6/7?\n. Does it make sense to use both --esnext --esprima=esprima-fb, or I should be using only one of these?\n. ",
    "ben-ng": "Chiming in with a :+1: \nI've been running into issues with esprima-fb throwing errors on good code. Tried shoehorning acorn into jscs but that didn't work -- looks like jscs depends on esprima-specific features.\nFirst-class support for JSX would be great!\n. ",
    "dominik0711": "Generally blanks after curly brackets can't be forced to be alerted even for following case:\nfunction x () {return 123; }\nShould be:\nfunction x () { return 123; }\n. Thanks for your fast answer. We suspected that already. We'll have a closer look how to submit a rule for these cases.\n. @markelog Right now, I have my own custom rules implemented. Following the wiki documentation Plugin-API is it right that I have to manipulate lib/config/configuration.js to register my plugins??? If yes, what will happen after npm update? With every new jscs version, my changes in lib/config/configuration.js will be deleted. I won't check in lib/config/configuration.js in my git repository. What about my plugin.js? Is it necessary to save them inside rules folder???\nI have the following so far:\nlib/index.js\nmodule.exports = function (conf) {\n  // plugin loading:\n  conf.registerRule(require('./rules/require-spaces-inside-curly-braces.js'));\n};\nlib/rules/require-spaces-inside-curly-braces.js\n...\ngetOptionName: function() {\n        return 'requireSpacesInsideCurlyBraces';\n    },\n...\n.jscsrc\n\"plugins\": [\"require-spaces-inside-curly-braces\"],\n  \"requireSpacesInsideCurlyBraces\": true,\nI still get the following error\nCannot find module 'require-spaces-inside-curly-braces'\nHow do I enable then the rule as well for Sublime Text 3 SublimeLinter?\n. Thank you guys for your help! Now it seems to be clear for me. \nMaybe this help could help other guys too? At least for me this is a much better description compared to the Wiki\n. @zxqfox In my opinion it's now better described and more comprehensible. Thanks!\n. ",
    "stephencookdev": "I did not! Definitely seems to do what I described.\nI should have looked a bit harder through the existing rules. Thanks!\n. ",
    "KaoruDev": "thx for the quick response!\nthis is now my .jscsrc\n{\n  \"preset\": \"airbnb\",\n  \"requireCamelCaseOrUpperCaseIdentifiers\": \"ignoreProperties\",\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"disallowSpacesInAnonymousFunctionExpression\": null\n}\nstill no dice =(\nI even tried:\n\"disallowSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": null,\n    \"beforeOpeningCurlyBrace\": null\n  },\nthinking that might be it according to the docs, and it's not =( I just get an error saying the values can ONLY be true\n. @zxqfox huzzah that did the trick! many thanks!\nSorry i couldn't figure out the rule causing the break. I'm using jscs in vim =/\n. ",
    "nicks": "great, thanks!\n. would you accept a pr that just moved the operator instead of the whole line?\n. To recap: I originally had {boolean} [options.moveWhitespaceToNextToken] and we agreed that didn't feel great. I changed it to options.fixCallback. I agree the callback is not optimal either, but it seemed like a good way to move forward without committing to an API.\nI'm happy to change it to whatever you all think is best. But I'm new to this codebase, and don't have a good sense of what's best.\n. great! thanks for the feedback. I changed it to stickToPreviousToken.\n. i'm unhappy with the name of this option and how it fits into the overall api. I'm open to better suggestions.\n. i like the idea of using a callback. I updated the PR to do that instead!\nre: different line-wrapping options: yeah, the test deliberately tickles that question. My general philosophy is that if the user put a line break there, we should assume there's a good reason for there to be a line-break in there somewhere.\nYou could imagine a future jscs rule like \"minimizeLineBreaksInExpressions\" that warned you if a line-break in an expression was unnecessary, and autofixed it. This would make more sense to me as an orthogonal rule, rather than having the individual operator rules make this decision.\n. not sure what you had in mind, but i added a test case with a comment?\n. added!\n. i added them above with should not autofix line comment on first line? did you not see them? or are those insufficient for some reason?\n. ",
    "run1t": "Thank you ! It works perfectly !\nSorry for the inconvenience.\n. ",
    "tofumatt": "I would think these code styles apply to, if anything, JavaScript inside Firefox (devtools). But looking at the history of that page, the JS styles haven't been updated in years.\nThe bigger point here is there is certainly no one Mozilla style regarding JS. There seem to be at least two: that used by \"webdev\" (tends to be more clientside and node) and that used by \"Firefox\" (tends to be node-style but mostly used inside Firefox).\nFor instance, these styles wouldn't fit with our recent node-firefox project, which has its own style guide. Nor would it match localForage's guide.\nI don't think it would be accurate to say there's a \"Mozilla\" style for JS; we generally just define our style guide in our own rules and all of the projects I've worked on in the past few years include linters/style-checkers in the test suite. At any rate, I don't think it's these styles.\nMaybe someone from devtools (@ednapiranha?) could chime in, but I don't think I would call this the \"Mozilla\" style nor do I think one is useful.\n. ",
    "panaggio": "@mdevils could you elaborate? I don't see the difference in structure.\n. @mdevils again, could you elaborate? What's weird? I want to be sure this isn't some bizarre nre rule value request before proposing any PR. If it's just me, I can patch my jscs and live with the patched version.\n. > Maybe the PR would help clarify?\nMaybe. I'll try to send something soon. Before that, even I need to understand if what I'm proposing makes sense or not. May this doesn't make any sense to anyone because my request really doesn't make any sense :(\nI'm sure I need to clarify what I want. Sorry for all the confusing examples until now.\nLet me try again.\n\npeople usually requireTrailingComma to help with diff reading... \n\nThat's true, and this is close enough to my desire/need, if that helps.\nWhen using the proposed new (say) allowThisSpecialCase on requireTrailingComma, these should be accepted:\n```\nvar x = [{\n    bar: 'baz',\n}, {\n    qux: 'quux',\n}];\nvar y = [[\n    'bar',\n    'baz',\n], [\n    'qux',\n    'quux',\n]];\n```\nBecause it isn't. Why? A comma is required right before the last square bracket.\nWhat I'd like to do is to be able to allow the last element on an array to be immediately followed by the closing square bracket without raising anything when using requireTrailingComma, because forcing the comma to be there on this coding style won't help with anything.\nIf I use requireTrailingComma, I'm now forced to chance may coding style to\n```\nvar x = [\n    {\n        bar: 'baz',\n    }, {\n        qux: 'quux',\n    },\n];\nvar y = [\n    [\n        'bar',\n        'baz',\n    ], [\n        'qux',\n        'quux',\n    ],\n];\n```\nor to make it ugly like\n```\nvar x = [{\n    bar: 'baz',\n}, {\n    qux: 'quux',\n}, ];\nvar y = [[\n    'bar',\n    'baz',\n], [\n    'qux',\n    'quux',\n], ];\n```\nDid this new explanation help in any way? Is this really some corner case more people could make use of?\n. ",
    "tp": "I agree with @panaggio. Having the same issue here where the format is desired in object literals, but not arrays.\nThough maybe the formatting @hzoo presented should be used anyway.\n. ",
    "respectTheCode": "I am using linter-jscs in atom and it looks like it is using 1.12.0 of jscs. Im not sure how to get it in verbose mode though.\nI don't have esnext: true.\n. It is the disallowSpaceBeforeBinaryOperators rule, but it also happens without a .jscsrc file.\nWhen I run the cli it doesn't find the error though. So it might be a linter-jscs issue.\n. ",
    "james-hart": "+1, I'd appreciate the implementation if it at possible.. perhaps \"firstAfterColon\"? :D\n. ",
    "astorije": "Argh, sorry for the wrong commit message!\n@astorije slaps himself for not reading the CONTRIBUTING file...\n. AppVeyor failed, but it looks like a false alarm to me... right?\n1) modules/checker fixing \"before each\" hook:\n    Error: timeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\n. Thanks @zxqfox, your comments are addressed in d07d185.\nRegarding timeout, I'm afraid I have no idea, I am not modifying this test, so I expected AppVeyor to be slow on his side.\n. Hi @mdevils!\ndisallowLineFeedAtFileEnd would not help unfortunately: the line feed at the end is arguably something one might want (for example, git complains when not present), but not necessarily having one (or several) extra blank lines at the end of the file.\nThere are explanations and examples in inline conversations between @zxqfox and me, but think of this.\nTo allow (force) the following:\nvar x;       \u2190 code\n             \u2190 line feed at EOF\nand disallow the following:\nvar x;       \u2190 code\n             \u2190 EOF-padding\n             \u2190 line feed at EOF\nYou need to set both requireLineFeedAtFileEnd and disallowPaddingNewlinesInFiles to true. Does that make more sense now?\n(In a nutshell, this new disallow rule is to disallow all padding lines at top and bottom while still requiring the line feed when it is required)\n. Guuuuys, any help on this? :-)\n. Actually @mdevils, these are exactly what I want to combine :-)\nHere are the use cases (focusing only on end of files):\n- disallowPaddingNewlinesInFiles and requireLineFeedAtFileEnd: exactly 1 blank line at the end of files (for the line feed)\n- requirePaddingNewlinesInFiles and requireLineFeedAtFileEnd: at least 2 blank lines at the end of files, 1 of them being for the line feed (and the other one(s) for style preferences, clarity, ... whatever your team has decided)\n- requirePaddingNewlinesInFiles only or requireLineFeedAtFileEnd only: at least 1 blank line at the end of files\n- disallowPaddingNewlinesInFiles only: exactly 0 blank lines at the end of files\nSo if by \"machine\" you mean jscs, then yes, the *PaddingNewlinesInFiles rules need to know if requireLineFeedAtFileEnd is specified to complete. Good news is that since there is no disallowLineFeedAtFileEnd, this need is not reciprocal!\n. Still no luck? :(\n. @markelog I still have some work to do on this.\nSorry others things in life and projects took priority. I was actually thinking this weekend about excavating this PR and I definitely want this to make it into master so I'll finish these rules for sure. The when is less certain though.\nThanks for your patience.\n. Hi @markelog,\nApologies that I missed your ping earlier. As I said in my last comment, there were other priorities in my life and in my FOSS projects so I had to put this on the side. But I will definitely finish this sooner or later as I need it as well. I just need to close some higher items on my todolist to make this the top one again.\nSorry about wasting your time though. When I get to work on that, I will continue to use this PR for posting questions and comments (last thing I remember was being stuck as explained in earlier comments), and will open a new PR for the code.\nThanks for being responsive and open to new ideas!\n. Doh, of course! I knew these statements were gross, why did I miss this factorization?!\nThanks, fixing now :-)\n. Yes, I meant to do that and forgot, sorry. Thanks for pointing it out!\n. > I think we can check file.getLines().length at function start and skip files with less than 3 lines.\nDoes my fix in d07d185 is fine by you? I am checking that the file is at least 2 lines, but I can do 3 if you think it's more relevant.\n. Good question, but this depends on requireLineFeedAtFileEnd :-/\nIf requireLineFeedAtFileEnd is set to true, this will pass:\n// \u2190this line by BOF\nvar x;\n// \u2190this line by EOF\n// \u2190this is the line feed\nIf not, this will pass:\n// \u2190this line by BOF\nvar x;\n// \u2190this line by EOF, *and* it is also the line feed\nForgetting the BOF rule (ie using endOfFileOnly), this will fail if requireLineFeedAtFileEnd is set:\nvar x;\n// \u2190New line, which is the line feed\nThink of it in the opposite rule (I should have started with it actually). If you set disallowPaddingNewlinesInFiles to true, you want your files to be:\njs\nvar x;\nBut if you also set requireLineFeedAtFileEnd to true, then only files with that format must pass:\njs\nvar x;\n// Line feed, empty line\nAlthough the last line is empty, it respects requireLineFeedAtFileEnd (the line feed being often used by systems such as git) and disallowPaddingNewlinesInFiles (as both lines at top and bottom are style choices this time).\nDoes that make sense?\nIt seems like I have to interact with another rule (know if it is set), is there a way to do that? If not, do you see an alternative use case we could choose to avoid this issue?\n. Thanks for your input @zxqfox! I'll wait for @markelog and @mikesherov's feedback to see if we can detect such thing before starting the disallow rule.\n. ",
    "akash1810": "@hzoo nice! Thanks all.\n. ",
    "montogeek": "Actually, it should be an array \"fileExtensions\": [\".js\", \".jsx\"]\nThanks!\n. ",
    "kittens": "@markelog It's based on this proposal which was proposed at the last TC39.\n. @markelog It's behind a flag, you have to explicitly turn on support for stage 0 features. It's in Babel because it's meant to provide feedback to the committee and improve the proposal. ie. to find out what does and doesn't work. If the proposal changes then Babel changes with it. Decorators were implemented in Babel when it was still stage 0 (now stage 1) and have provided critical feedback to their design and use and it's influenced the proposal/spec.\n. @hzoo \n\nBabel infers and transforms quotes to be consistent so you'll need to find another way to enforce this or turn off the parser and run it.\n\nThis is completely unrelated to the parser and is done in the code generator (which babel-jscs and babel-eslint don't use) so this isn't the cause of the issue.\n. ",
    "buchmiller": "Normally the 'if' keyword will catch the 'else if' case, but I actually want to use the 'else' case.\nThere is a rule for disallowSpaceBeforeBlockStatements that accomplishes that case, but the documentation clearly shows 'else' as a valid keyword.\n. I'm seeing the warning with this code:\n...\n}else if(...){\n...\n}else{\n...\n. That is correct. That code would produce the \"Unexpected whitespace between else and if\" error.\n. ",
    "olanod": "Last time I checked, esnext option didn't include the ES2016 (ES7) new features like decorators or class properties.\n. ",
    "rorysaur": "@hzoo thank you!! :pray: I was trying to set up jscs on a project that uses babel (es6) + flow, and couldn't find any parser that could accommodate both. your package made everything magically work. hope you keep developing it :+1: \n. ",
    "thisguychris": "@hzoo where should I file issues? here:\nhttps://github.com/hzoo/babel-jscs\nI tried your branch seems buggy on the validatequotemarks. Its changing my single quotes to double quotes when I use -f\n. ",
    "shepherdwind": "Why not publish an beta version(npm publish . --tag beta), so that we can install with a beta tag.\nInstall from github, sometimes will be too slow.\n. @hzoo That great. Waiting for you beta release. \n. ",
    "timini": "I'm trying to enable es7 decorator rules in jscs. Will this help me out?\n. I'm trying to enable es7 decorator rules in jscs. Will this help me out?\n. ",
    "jeandat": "@zxqfox  Yes the problem is with empty files.\n. ",
    "bigmonkeyboy": "Found there is an allowEOLComments option....  not mentioned in the docs at all...\nSo Issue is now - can it be added to the docs ?\n. ",
    "btilford": "Yeah we had 0 byte files. We do use concurrent so if the file is created before it's used and some other parallel task fails the build that might explain it.\n. ",
    "huerlisi": "Thanks!\n. ",
    "lpil": "@jonnyarnold Shall we have a look?\n. ~~OK. In which case I think I need to know whether the rule or rules in question is enabled or disabled at that point in time.~~\n~~I could split the list of rules and then check each with isEnabledRule, but that doesn't seem quite right somehow. Do you have any suggestions? Otherwise I'll keep playing about and see if I can find something that feels nicer.~~\nUpdate\nCurrently it doesn't re-enable rules, but only if only one rule has been specified with the trailing comment. Obviously this needs work...\n. I've made the trailing ignore comment always require a rule or rules. This is largely due to the behaviour of enabling/disabling all and specific rules in the same area being poorly defined.\nIt's also nice as it discourages the user from being heavy handed with ignoring rules.\nWhat are your thoughts?\n. There you go.\nI wasn't entirely sure what to say about the regexes, let me know what you think. :)\n. Thanks! :D :dancer: \n. :D\n. Oh! I didn't realise it was merged into eslint. Wonderful :)\n. :dancer: Always happy to help with linters ;D\n. Sorry, I'm not sure what you mean?\n. Of course. What specifically would you like me to document here?\n. (Off the top of my head) This was because something was returning rule names with surrounding whitespace, and I think that rule names should never have whitespace.\nI do not know if this is actually required for correct behaviour currently, it could have been a hang over from a previous state. I'll check when I next have access to a computer, which is probably Monday.\n. Well they're not really- they could just be literals within the loop. I don't know why the original author decided to make it a variable.\nWould you prefer them not to be variables?\n. Certainly. :)\n. Sure thing.\n. Not easily with how disabling all rules is currently represented in the disabled rule index. There's no good way to know which rules to reenable after the line.\nThe existing comments's behaviour is also a little funny here... What exactly the behaviour should be is unclear as a result.\nI think this would be a good place for refactoring- having the 'all' comments actually add an entry for every rule rather than this special '*' rule.\n. Ah, that's not quite the problem I'm afraid!\nIt's easy to make a regex that will permit comments without any rule names, and this isEnabledRule based test will pass in that situation, the problem is with toggling on and off all rules when there is already specific rules enabled. This is due to there being one special rule that represents all other rules, '*'.\nIf we have 1 rule turned off, and then want to toggle on and off all rules, how do we do this? When we toggle back on all rules after the single line trailing comment we will override the previously turned off rule as there's no good way to identify it was already on, and that it needs to be disabled again on the same line we enable all rules.\nThis same problem happens with the existing block comments, which I think might qualify as a bug?\nEither way, the intended behaviour is slightly unclear, and implementing this feature will take a sizeable refactoring of the disabled rule index system, which my colleagues and I did not feel comfortable undertaking.\nThis is why the regex is written to explicitly disallow this situation from happening, as we thought that this behaviour is not desirable.\nI hope that makes sense. Perhaps adding single line comments for toggling all rules could be a future feature/story for the wishlist. :)\n. To be clear, do you want me to allow disabling all rules for a single line with a trailing comment?\n. You're the boss. I'll do this tomorrow. :)\n. Done. How does that look?\n. ",
    "aknuds1": "Hm, I've tried running jscs by itself on the file, then the bug isn't triggered, maybe there's a bug in jscs-loader. Will try to find out...\nThe jscs version is 1.13.1 btw.\n. @hzoo I've traced it to line 80 of rules/require-dollar-before-jquery-assignment.js. Problem is that left.name is undefined, any idea why this might be? My log of the value of left:\n[info] left:  { type: 'ObjectPattern',\n[info]   properties:\n[info]    [ { type: 'Property',\n[info]        key: [Object],\n[info]        value: [Object],\n[info]        kind: 'init',\n[info]        method: false,\n[info]        shorthand: true,\n[info]        computed: false,\n[info]        range: [Object],\n[info]        loc: [Object],\n[info]        parentNode: [Circular],\n[info]        parentCollection: [Circular] },\n[info]      { type: 'Property',\n[info]        key: [Object],\n[info]        value: [Object],\n[info]        kind: 'init',\n[info]        method: false,\n[info]        shorthand: true,\n[info]        computed: false,\n[info]        range: [Object],\n[info]        loc: [Object],\n[info]        parentNode: [Circular],\n[info]        parentCollection: [Circular] } ],\n[info]   range: [ 1164, 1181 ],\n[info]   loc:\n[info]    { start: { line: 35, column: 10 },\n[info]      end: { line: 35, column: 27 } },\n[info]   parentNode:\n[info]    { type: 'VariableDeclarator',\n[info]      id: [Circular],\n[info]      init:\n[info]       { type: 'Identifier',\n[info]         name: 'value',\n[info]         range: [Object],\n[info]         loc: [Object],\n[info]         parentNode: [Circular],\n[info]         parentCollection: [Object] },\n[info]      range: [ 1164, 1189 ],\n[info]      loc: { start: [Object], end: [Object] },\n[info]      parentNode:\n[info]       { type: 'VariableDeclaration',\n[info]         declarations: [Object],\n[info]         kind: 'let',\n[info]         range: [Object],\n[info]         loc: [Object],\n[info]         parentNode: [Object],\n[info]         parentCollection: [Object] },\n[info]      parentCollection: [ [Circular] ] },\n[info]   parentCollection: [ [Circular] ] }\n. @hzoo I got it now, this code reproduces the error for me:\nlet Receipt = () => {\n  Promise.all(R.map((subsystem) => loadData(subsystem, token, uuid), ['vcs']))\n    .then((values) => R.forEach((value) => {\n      let {subsystem, data} = value;\n    }));\n};\n. I think I was confusing originally which code was triggering the error, sorry.\n. ",
    "tsteuwer": "I am also having this issue. If no one grabs it I'll make @TheSavior 's change and submit a PR later tonight.\n. @markelog yes, ty for reminding me. I'll do it when I get home tonight\n. So I messed with this last night and was unable to remember how I got it to happen (almost 30 days ago). I tried using the code above but it doesn't cause the issue for me.\n. Arg, didn't mean to hit save. I'll mess with it at work tomorrow and see if I can get it to happen somewhere\n. ",
    "cyrilf": "Great! :+1: \n. :+1: seems consistent with the objects rules indeed\n. ",
    "christophehurpeau": "Here are the links to the documentation:\n\"disallowKeywords\": [\"with\"]: https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=with{}#with{}\n\"requireCapitalizedConstructors\": true: here, the valid name is : ClassNamesLikeThis, EnumNamesLikeThis\nFor the following rules, there are no explicit rules but the documentation follow them:\n\"disallowSpaceAfterObjectKeys\": true and \"requireSpaceBeforeObjectValues\": true: You can find here the documentation about objects literal, and the valid syntax is:\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  'strange key': 3\n};\n\"disallowSpacesInFunctionExpression\": { \"beforeOpeningRoundBrace\": true }: For example here and here, all functions do not have space before round brace : \nvar foo = function() {};, function bar(a, b) {\n\"disallowSpacesInCallExpression\": true: For example here : element.onclick = bar(a, b);\n\"requireDotNotation\": true: You can find here the documentation about objects literal, and the valid syntax is:\nvar o2 = new Object();\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2['strange key'] = 3;\nIt is a deny rule, but there are not talking about syntax but assignation. You can also find another example here : \n```\n/* @enum {string} /\nsome.long.namespace.Fruit = {\n  APPLE: 'a',\n  BANANA: 'b'\n};\nmyapp.main = function() {\n  var Fruit = some.long.namespace.Fruit;\n  switch (fruit) {\n    case Fruit.APPLE:\n      ...\n    case Fruit.BANANA:\n      ...\n  }\n};\n```\n\"validateParameterSeparator\": \", \": You can find an example here:\n```\nfunction foo(element, a, b) {\n  element.onclick = bar(a, b);\n}\nfunction bar(a, b) {\n  return function() { / uses a and b / };\n}\n``\n. yes indeed\n. done :)\n. Thank you :)\n. done :)\n. Thanks !\n. @magicdawn please open a new issue\n.inArrayExpressions` means anywhere in the array.\nThis require newlines between functions inside the array except the last item, the same behavior than for objects\n. up ?\n. added for call parentheses :)\n. up ?\n. Thanks\n. Unless I'm mistaken, please read the documentation on this rule : http://jscs.info/rule/disallowPaddingNewLinesInObjects.html\nYour valid code with this rule should probably be:\njs\nvar events = { playeradded   : [],\n    playerremoved : [], };\n. I put ignoreSingleLine, because the argument about the trailing comma is for pull requests, and not affected by a single line object / array\n. ",
    "ZuBB": "thanks for info. Do you have any rough assumption when 2.0 will will be ready/shipped? (I saw in 'milestones' page that for now it does not have any date)\n. I think we can wait for new name till 2.0 whenever it will happen.\nthanks again for info\n. ",
    "andreastt": "@mdevils Do you have any preference on a name for such a new reporter?\n. Closing this in favour of #1403.\n. I should add that jshint has a similar \u201cunix\u201d reporter done by me.\n. @mrjoelkemp Removed the unused variable.\n. ",
    "dreef3": "@zxqfox ,\nAs I understand allExcept would skip only a single property in the object. I took this ignoreFunction from requireAlignedObjectValues, where the same option used to skip the object entirely.\nNot sure if the behavior I wanted would be useful to others. I could also add ignoreLineBreak from requireAlignedObjectValues to make it look consistent.\nbeforeComma does what shown in examples: it places a line break before comma when fix applied. By default this rule places all items separated by , into single line. Example:\njavascript\n// before\nvar y = require('foo'),\n      z = require('bar');\njavascript\n// after\nvar y = require('foo'), z = require('bar');\nWith beforeComma it would become:\njavascript\n// after\nvar y = require('foo')\n    , z = require('bar');\nCould please help me to find a better name for this option?\n. Updated to use allExcept.\n. Fixed review comments.\nAlso I've changed logic a little bit, please correct me if I made wrong assumptions:\n- No point to check for line breaks in singleline expression so I added skip check for these\n- I made what previously was a lineBreak option a default behavior for multiline objects. Looks like it satisfies examples in current version of the docs\n. @mikesherov , @hzoo \nPlease see my attempt to solve this under #1428.\n. @avdv ,\nI tried to fix your case. Here's one more that arises if we allow either all keys without space or all keys aligned on colon in a single object:\nInvalid\njavascript\nvar x = {\n  a : 1,\n  foo : function() {},\n  bcd : 2\n};\nValid (no space after all keys)\njavascript\nvar x = {\n  a: 1,\n  foo: function() {},\n  bcd: 2\n};\nValid (aligned on colon)\njavascript\nvar x = {\n  a  : 1,\n  foo: function() {},\n  bcd: 2\n};\nI propose to restrict aligned option to keys aligned by colon only as it was before. Another reason could be that these two styles of alignment can be treated as mutually exclusive and you always can use the rule without aligned to get keys without spaces after them.\nAnother option would be to always prefer second variant with colons aligned in cases like above.\n. @davidrapin,\nI implemented the desired behavior in pull request except the case when it's unclear if object should have all keys without spaces or it should have colons aligned. Please see my previous comment for example. Right now such object would be treated as \"no space after keys\" case.\n. @davidrapin, @avdv , @hzoo \nAs I understand the way JSCS works it will treat only one of these two valid examples as valid at the same time. So right now example 3 is not valid anymore.\n. You're right, I merged it wrong.\n. Please see the latest commit. I also added checks to prevent combination of multiline with either singleline or aligned, doesn't seem to make sense.\n. @mrjoelkemp,\nDo you think this lineBreak could be a default behavior for multiline ObjectExpression? For example from current docs:\nValid\njs\nvar x = {\n    one: 1\n    , two: 2\n};\nRight now fixed variant of this rule is always single line: {one: 1, two: 2}\n. This expression verifies that we check only multiline objects with more that one property:\n- allExcept: ['function'] does lookup only inside ObjectExpression\n- No point checking singleline objects for line breaks\n- No comma if there's only a single property\n. ",
    "clayreimann": "@mrjoelkemp what do you mean by allExcept: 'parameters'. Is your thought that we wouldn't exempt the length of the parameters, just exempting the length of the method name? Because that doesn't seem too useful to me.\n. The long method definition lines? Yes, once you get more than a couple parameters. Perhaps it's my Obj-C verbosity creeping in though. I just really don't like adding line breaks to my method definitions. And to add insult to injury jscs requires that the enable/disable don't have matching indentation if you just want to wrap the method definition line.\n. I was planning on doing it this weekend \n\u2014Clay\nOn May 30, 2015, at 12:07 AM, Oleg Gaidarenko notifications@github.com wrote:\n@clayreimann would you like to implement aforementioned logic?\n\u2014\nReply to this email directly or view it on GitHub.\n. @mikesherov All the current options for this rule are avoidable by wrapping the line in question with // jscs:maximumLineLength:disable/enable, which is what I'm doing now with my method definitions. \nThat being said, if this option doesn't jibe with the direction/style that the project espouses then feel free not to accept #1418.\n. Addressed deprecations in documentation rather than logging errors, also updated some of the test files for presets (since yandex.js was the only preset test to address maximum line length).\n. ignore because I found the wording allExcept unclear and not very descriptive. Reverting because the project as a whole appears to prefer allExcept.\n. ",
    "michelle": "@hzoo, a case against checking string + string: https://github.com/jscs-dev/node-jscs/pull/1610\n. Cool! Thanks for the feedback--I'll go ahead and add allExcept: ['stringConcatenation']\n. Updated.\nHow do we feel about template string concatenation? I've also added this to the PR, but can remove if we feel this is breaking.\n. Cool, will add to comment at the top.\nAlso, this iteration cargo cults from requirePaddingNewLinesBeforeLineComments, which has allExcepts as a string rather than an array. I can switch it to an array if preferred.\n. Switched over to using an Array for allExcept and updated the documentation/tests.\n. ",
    "brzpegasus": "You could still check for string + string, but make an exception for string concatenations that span multiple lines; perhaps something along these lines?\nBasically, this is not okay:\njs\nconst value = 'a' + 'b';\nbut this is:\njs\nconst value = 'JavaScript Code Style JSCS is a code style linter for ' +\n  'programmatically enforcing your style guide.';\n. ",
    "talamaska": "Any news about this?\n. ",
    "stevemao": "Glad to know that you guys think this is a good idea :smile: \n. Hey guys, did you treat this as a bug? So we can't enforce \njs\nif (x < 0) {\n    x++;\n} \n// comments\nelse {\n    x--;\n}\nas invalid like the old behaviour?\n. @oredi i know :D But I'm asking if there's a way to enforce \njs\nif (x < 0) {\n    x++;\n} \n// comments\nelse {\n    x--;\n}\ninvalid? My original proposal was to add another option.\n. If fine if this is by design :)\n. @markelog why is this reopened?\n. I asked because I wan't not sure. I guess it's not hard to implement it if anyone asks for it :)\n. Sample logs generated based on your commits\nAlignedObjectValues\n\nsupport computed property names (2b9bf5c), closes #1404 #1407\n\nAnonymousFunctionExpression\n\naccount for shorthand methods (1441305), closes #1470 #1505\n\nAPI\n\nallow external entities to be defined without \"jscs\" prefix (8b0ac2c)\n\nAutofix\n\nremove merge artefact (c617a58)\nsupport disallowTrailingComma rule (7b4212a)\nsupport trailing whitespaces and missing commas (5f2370e), closes #1479\n\nChecker\n\nmore API changes for 2.0 (83baef5)\nremove deprecated constructor options (2d5745f)\n\nCLI\n\nDifferentiate exit codes (6f8920d), closes #1095 #1506\n\nConfiguration\n\nadd \"getConfiguredRule\" method (6bdf65d)\nadd ability to load external presets (7246452), closes #109 #1083\nallow \"getReporter\" method to require node modules (ce1a877), closes #1030\nexclude node_modules/ by default (1ba4b45), closes #1461 #1467\nimprove JSDoc notes (41e0c58)\ninitial pass on the polymorphic require (6fc7b41)\nsimplify and modulize configuration module (6bdacb1), closes #1150\nsmall corrections to JSDoc of \"node-configuration\" module (87956be)\nsmall refactoring of the configuration module (c2c5a9b)\n. I can definitely tweak the templates for you. I will create a jscs preset as the jquery preset may not be suitable. \nIt would be great if you could create requirements with a sample changelog. \n\nThe sample log I generated was using conventional-changelog -p jquery but once jscs preset is done you can do conventional-changelog -p jscs. To regenerate all previous logs, use conventional-changelog -p jscs -r 0. Again there are grunt/gulp wrappers if you are already using them so you don't need to use the cli.\n. I can definitely tweak the templates for you. I will create a jscs preset as the jquery preset may not be suitable. \nIt would be great if you could create requirements with a sample changelog. \nThe sample log I generated was using conventional-changelog -p jquery but once jscs preset is done you can do conventional-changelog -p jscs. To regenerate all previous logs, use conventional-changelog -p jscs -r 0. Again there are grunt/gulp wrappers if you are already using them so you don't need to use the cli.\n. I have pushed several new releases and a ton of bugs have fixed. Would you still consider using it?\n. @hzoo Hmmm... Not interested?\n. This is more likely an issue with npm website? They have problems with block comments https://github.com/npm/newww/issues/631\n. You could remove your block comment. @mrjoelkemp\n. Can you use a different token for each project?\n. Thanks. It might take a while to make it fit in your workflow and meet your requirement but in a long run it must be beneficial. \n. ",
    "ShashankaNataraj": "Additionally can we have this option also check for specific file name patterns under specific directories?\nFor example. if I wanted all scripts under controllers directory to have camel case, and all scripts under services directory to have pascal case?\n. Yes, I would think requireBlockComments and disallowBlockComments could be appropriate names for the new rules.\n. @markelog Sure would! I will take this up! :+1: \n. @mrjoelkemp Definitely, sorry got caught up in some other things. Will be making a PR soon.\n. @markelog SUre would! Will raise a PR.\n. @markelog yeah, but I'd like to test it a couple of times before submitting.\n. JSCS version: 1.13.1\n\"grunt-jscs\": \"^1.8.0\"\nI get the same error on both. Im using webstorm which integrates the npm version of JSCS, I get the error within the IDE as well as when using grunt-jscs from the command line.\n. @hzoo I see your point. I was expecting pkg: to be valid since there is already a space after :. Now I RTFM'd and saw my expectation was wrong. Closing this issue, thanks!\nWhich is the right rule to use for my requirement, if I want a space after the : in pkg:? Is there a rule at all for this? I just checked and didnt come up with anything.\n. @hzoo Thanks a ton!\n. @markelog yep, opposite rule should be pretty easy. Would we prefer to write the opposite rule as a false switch to disallow-space-before-commas or would we prefer to write a seperate rule allow-space-before-commas ? Also can I work on the opposite rule after this PR is accepted?\n. @markelog @hzoo here we go :dancer: :+1: Please review and accept if this PR is OK.\n. @markelog I did npm run coverage-html and then opened coverage.html in chrome. The below screenshots show that the coverage is 100% for the files which are included in this PR. Am I missing something?\n\n\n. @mrjoelkemp Never used coveralls before, so dont really know how to fix this issue. Can you please elaborate on what needs to be done to fix this?\nCan this PR be accepted because none of the files Im working with on this PR are the causes of the break? Or, is there something that needs to be done from my end to have this fixed?\n. @markelog I did, now I see all checks have failed. I also observed that builds on other issues are failing as well.\n. @markelog Hi, Was this PR merged? I can see that it is closed now, but does it count as a contribution of mine?\nJust confused I guess because this is the first PR of mine on github which has \"markelog closed this pull request from a commit 14 days ago\" text. Dont know what it means, thus the confusion!\n. @markelog Ah ok. Thanks for the clarification!\n. JFYI the original PR is here: https://github.com/jscs-dev/node-jscs/pull/1457\n. @markelog I already went through the contribution guide you quoted. It isnt very explicit. I had to figure a couple of things and go through some files myself and had to do some guess work as the maintain.md file @hzoo quoted isnt linked from any other guide on JSCS guide. Its a little difficult to get to. It wasnt difficult to come up with my first rule for JSCS, but certainly involved a lot of guesswork.\nIm looking at making a wiki page on https://github.com/jscs-dev/node-jscs/wiki/_new and then taking it from there to serve as a one stop guide for all newbie contributors such as myself.\n. linking better works too. will see if I can put in some time when I get back from travel.\n. @markelog Looks good, but wouldve loved to work on this issue but its completed by you I see :)\n. @markelog No problemo, if in future any issues crop up with my previous PR's, kindly cc me on them. Id love to contribute to node-jscs :)\n. ",
    "tonyganch": "@markelog, fixed tests + rebased on master\n. I'm proposing an extension to existing requireCamelCaseOrUpperCaseIdentifiers.\nGoogle JS Style Guide says:\n\nOptional function arguments start with opt_.\nFunctions that take a variable number of arguments should have the last argument named var_args.\n\nSo what I'm proposing is adding a new acceptable value for requireCamelCaseOrUpperCaseIdentifiers option which will check that variables are named using camelCase, but also allow opt_ prefix and var_args variable name.\nI'm also proposing to include that new value in google preset.\n. So, for example, these will be valid:\nvariableName\nEnumName\nCONST_NAME\nopt_variableName\nvar_args\nAnd these will be invalid:\nvariable_name\nvar_arguments\n. @markelog, how should I write allExcept in this case for opt_thereCanBeAnything?\n. @markelog, do I get it right?\nrequireCamelCaseOrUpperCaseIdentifiers: {\n  value: true,\n  allExcept: ['opt_*', 'var_args']\n}\n. @markelog, okay, thank you!\n. ",
    "chasm": "1.13.1\nThanks! I didn't know about that command (only used it via Sublime).  I was able to find an error in my .jscsrc file (a stray =) -- ran it through JSONLint and now everything works beautifully. Sorry for the error on my part -- guess I was missing something.\n. ",
    "magicdawn": "Is there an Airbnb ES5 preset available?\nhttps://github.com/airbnb/javascript/tree/master/es5\n. @hzoo Both are good~\nof which allow false maybe better & straighter\n. ",
    "jakezatecky": "It probably makes sense to add a helper, but I'll leave that for the more experienced. It does appear to be the case that there might be additional rules that should account for ArrowFunctionExpression blocks (such as validateAlignedFunctionParameters).\n. I certainly can go and add the arrow function-related modifications to other rules. I should be able to get some time closer toward the end of this week.\n. Sorry for the lack of progress. Yes, I'm still interested and will (soon) work on updating the other rules to account for arrow functions.\n. ",
    "kover": "Hi,\nok, of course\ncommand line: jscs cc_integration_mon.js --preset=jquery\n\n10 \u0438\u044e\u043d\u044f 2015 \u0433., \u0432 16:35, Joel Kemp notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\nHi @kover https://github.com/kover. Thanks for contributing. Any chance you could supply a code sample that reproduces the error? It would greatly help us track down the issue.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jscs-dev/node-jscs/issues/1444#issuecomment-110711288.\n. Hi,\n\nI use jquery preset\njscs --version\n1.13.1\n\n10 \u0438\u044e\u043d\u044f 2015 \u0433., \u0432 23:00, Henry Zhu notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\nThere isn't that much info - like what version of jscs (maybe older than when you added that @zxqfox https://github.com/zxqfox)\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jscs-dev/node-jscs/issues/1444#issuecomment-110856560.\n. Well, I\u2019ll try to use provided solution and let you know, if this will fix.\n10 \u0438\u044e\u043d\u044f 2015 \u0433., \u0432 22:01, Alexej Yaroshevich notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\nHm. Why it doesn't catched by https://github.com/jscs-dev/node-jscs/blob/master/lib/string-checker.js#L134 https://github.com/jscs-dev/node-jscs/blob/master/lib/string-checker.js#L134 ?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jscs-dev/node-jscs/issues/1444#issuecomment-110835537.\n. Hi,\n\nI attach file in previous email, but if you don\u2019t receive it, here is the content:\n//CORIS added\nvar calling_number;\n//\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f HOLD\nvar hold_flag; \n//CORIS end\n// MMK-Informservice\nvar isCallMissed;\n// MMK-Informservice\n// Methods\nfunction connect(serverIP, serverPort, domain, userId, userPassword, agentId, agentPassword) {\n    var params = { \n        method: \"connect\",\n        serverip: serverIP,\n        serverport: serverPort,\n        domain: domain,\n        userid: userId,\n        userpassword: userPassword,\n        agentid: agentId,\n        agentpassword: agentPassword\n    };\n    var result = call_avayacc_method(params);\n    if (result.code == 200) {\n        _id = result.reason;\n        setAgentId(_id);\n        bind(MAX_WAIT_TIME);\n    }\n    return result;\n}\nfunction disconnect() {\n    var params = { method: \"disconnect\" };\n    return call_avayacc_method(params);\n}\nfunction setReady() {\n    var params = { method: \"setready\" };\n    return call_avayacc_method(params);\n}\nfunction setNotReady(status) {\n    var params = {\n        method: \"setnotready\",\n        status: status \n    };\n    return call_avayacc_method(params);\n}\nfunction acceptCall() {\n    var params = { method: \"acceptcall\" };\nreturn call_avayacc_method(params);\n}\nfunction hangupCall() {\n    var params = { method: \"hangupcall\" };\n    return call_avayacc_method(params);\n}\nfunction holdCall() {\n    var params = { method: \"holdcall\" };\n    return call_avayacc_method(params);\n}\nfunction resumeCall() {\n    var params = { method: \"resumecall\" };\n    return call_avayacc_method(params);\n}\nfunction transferCall(number) {\n    var params = {\n        method: \"transfercall\",\n        number: number\n    };\n    return call_avayacc_method(params);\n}\nfunction sendDTMF(dtmf) {\n    var new_dtmf = dtmf.replace(\"#\", \"A\");\n    var params = {\n        method: \"senddtmf\",\n        dtmf: new_dtmf\n    };\n    return call_avayacc_method(params);\n}\nfunction makeCall(number) {\n    var params = {\n        method: \"makecall\",\n        number: number\n    };\n    return call_avayacc_method(params);\n}\nfunction acceptIM(hello_msg) {\n    var params = { \n        method: \"acceptim\",\n        msg: hello_msg\n    };\n    return call_avayacc_method(params);\n}\nfunction discardIM() {\n    var params = { method: \"discardim\" };\n    return call_avayacc_method(params);\n}\nfunction sendIM(im) {\n    var params = {\n        method: \"sendim\",\n        msg: im\n    };\n    return call_avayacc_method(params);\n}\nfunction replyEmail(to, subject, msg) {\n}\n// Events\nfunction onDisconnect() {\n    Log('onDisconnect');\n```\ndocument.getElementsByName(\"ConnectBtn\")[0].disabled = false;\ndocument.getElementsByName(\"DisconnectBtn\")[0].disabled = true;\ndocument.getElementsByName(\"SetReadyBtn\")[0].disabled = true;\ndocument.getElementsByName(\"SetNotReadyBtn\")[0].disabled = true;\ndocument.getElementsByName(\"AcceptCallBtn\")[0].disabled = true;\ndocument.getElementsByName(\"HangupCallBtn\")[0].disabled = true;\ndocument.getElementsByName(\"HoldCallBtn\")[0].disabled = true;\ndocument.getElementsByName(\"ResumeCallBtn\")[0].disabled = true;\ndocument.getElementsByName(\"SendDTMFBtn\")[0].disabled = true;\ndocument.getElementById(\"dtmf\").disabled = true;\ndocument.getElementsByName(\"TransferCallBtn\")[0].disabled = true;\ndocument.getElementById(\"TransferNumber\").disabled = true;\ndocument.getElementsByName(\"MakeCallBtn\")[0].disabled = true;\ndocument.getElementById(\"CallNumber\").disabled = true;\n```\n}\nfunction showAlert (phone_number) {\n    $.getJSON(\"/phone/callerinfo.cshtml?phone=\" + phone_number, function(data) {\n        var showInfo = \"\u0422\u0435\u043b\u0435\u0444\u043e\u043d: \" + data.phone + \"\";\n        showInfo += \"\u0424.\u0418.\u041e.: \" + data.caller_name + \"\";\n        showInfo += \"\u0420\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435: \" + data.address + \"\";\n        $(\"#alert-placeholder\").toggleClass('top-block').append(\"\" + showInfo + \"\");\n        setTimeout(function() {\n            $('.alert').alert('close');\n            $(\"#alert-placeholder\").toggleClass('top-block');\n        }, 20000);\n    });\n}\nfunction onCallIncoming(skillset, a_number, ivr) {\n    Log('onCallIncoming: a_number=' + a_number + ' skillset=' + skillset + ' ivr=' + ivr);\n    //CORIS added\n    calling_number = a_number;\n    //CORIS END\n// MMK-InformService log calling number and current analyst ID\n// var userLogin = document.getElementById(\"ServiceDeskUser\").value;\nshowAlert(calling_number);\n// $.get(\"/phone/logrecord.cshtml?phone=\" + calling_number + \"&userid=\" + userLogin);\ndocument.getElementsByName(\"AcceptCallBtn\")[0].disabled = false;\ndocument.getElementsByName(\"HangupCallBtn\")[0].disabled = false;\n}\nfunction onCallNotify(callState, callId, calledAddress, callingAddress) {\n    Log('onCallNotify: callState=' + callState + \n                     \" callId=\" + callId +\n                     \" calledAddress=\" + calledAddress +\n                     \" callingAddress=\" + callingAddress);\n```\nvar userLogin = document.getElementById(\"ServiceDeskUser\").value;\nif (callState == \"ringing\") {\n    document.getElementsByName(\"AcceptCallBtn\")[0].disabled = false;\n    document.getElementsByName(\"HangupCallBtn\")[0].disabled = false;\n//CORIS\nhold_flag = 0;\n//CORIS end\n\n// MMK-Informservice\nisCallMissed = true;\n// MMK-Informservice\n\n} else if (callState == \"active\") {\n    document.getElementsByName(\"AcceptCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"HangupCallBtn\")[0].disabled = false;\n    document.getElementsByName(\"HoldCallBtn\")[0].disabled = false;\n    document.getElementsByName(\"ResumeCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"SendDTMFBtn\")[0].disabled = false;\n    document.getElementById(\"dtmf\").disabled = false;\n    document.getElementsByName(\"TransferCallBtn\")[0].disabled = false;\n    document.getElementById(\"TransferNumber\").disabled = false;\n    //CORIS added\n    //\u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043f\u043e\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043b\u043e\u0433\u0438\u043d\u0438\u043b\u0441\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0432\u043e\u043d\u044f\u0442\n    var myreq=/(\\d{1,11})/;\n    var myArrey=myreq.exec(callingAddress);\n    Log('callingAddress=' +myArrey[0] + \" AgentID=\" + document.getElementById(\"AgentId\").value);\n    if ((document.getElementById(\"AgentId\").value != myArrey[0]) && (hold_flag != \"1\")) {\n    //\u0415\u0441\u043b\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435\n        // createReqAndOpenWindow(document.getElementById(\"ServiceDeskUser\").value, document.getElementById(\"ServiceDeskPassword\").value, calling_number);\n        document.getElementsByName(\"CreateIncident\")[0].disabled = false;\n    }\n    //CORIS ended\n// MMK-Informservice\nisCallMissed = false;\n$.get(\"/phone/logrecord.cshtml?phone=\" + calling_number + \"&userid=\" + userLogin + \"&callstatus=1\");\n// MMK-Informservice\n\n} else if (callState == \"disconnected\") {\n    document.getElementsByName(\"AcceptCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"HangupCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"HoldCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"ResumeCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"SendDTMFBtn\")[0].disabled = true;\n    document.getElementById(\"dtmf\").disabled = true;\n    document.getElementsByName(\"TransferCallBtn\")[0].disabled = true;\n    document.getElementById(\"TransferNumber\").disabled = true;\n    document.getElementsByName(\"CreateIncident\")[0].disabled = true;\n    //CORIS\n    hold_flag = 0;\n    //CORIS end\nif (isCallMissed) {\n    $.get(\"/phone/logrecord.cshtml?phone=\" + calling_number + \"&userid=\" + userLogin + \"&callstatus=0\");\n}\n\n} else if (callState == \"held\") {\n    //CORIS\n    hold_flag = 1;\n    //CORIS end\n    document.getElementsByName(\"HoldCallBtn\")[0].disabled = true;\n    document.getElementsByName(\"ResumeCallBtn\")[0].disabled = false;\n} \n```\n}\nfunction onIncomingIM(name, phone, email, subject) {\n    var logMsg = 'onIncomingIM: ';\n    if (name != null) {\n        logMsg += 'name=' + name;\n    }\n    if (phone != null) {\n        logMsg += ' phone=' + phone;\n    }\n    if (email != null) {\n        logMsg += ' email=' + email;\n    }\n    if (subject != null) {\n        logMsg += ' subject=' + subject;\n    }\n    Log(logMsg);\ndocument.getElementsByName(\"AcceptIMBtn\")[0].disabled = false;\ndocument.getElementsByName(\"DiscardIMBtn\")[0].disabled = false;\ndocument.getElementById(\"im\").disabled = true;\ndocument.getElementsByName(\"SendIMBtn\")[0].disabled = true;\n}\nfunction onIM(msg) {\n    Log('onIM: ' + msg);\n}\nfunction onIMClose() {\n    Log('onIMClose');\n}\nfunction onEmail(from, subject, msg) {\n}\nfunction onSystemError(state, errorMsg) {\n    Log('onSystemError: state=' + state + ' errorMsg=' + errorMsg);\n}\n\n11 \u0438\u044e\u043d\u044f 2015 \u0433., \u0432 18:22, Oleg Gaidarenko notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\nWell, I\u2019ll try to use provided solution and let you know, if this will fix.\nWhat solution? We didn't introduce any, we need a code sample, jscs config or just output of jscs --verbose\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jscs-dev/node-jscs/issues/1444#issuecomment-111133732.\n. Hi,\n\ni use version 1.13.1\n\n11 \u0438\u044e\u043d\u044f 2015 \u0433., \u0432 18:23, Henry Zhu notifications@github.com \u043d\u0430\u043f\u0438\u0441\u0430\u043b(\u0430):\n@kover https://github.com/kover If you don't want to show the whole file then we just need a minimal code snippet that causes the error you mentioned (that would be better).\n\u2014\nReply to this email directly or view it on GitHub https://github.com/jscs-dev/node-jscs/issues/1444#issuecomment-111134187.\n. \n",
    "matoilic": "I've added a new option inNewExpressions as suggested and adapted the documentation. \n. ",
    "lpommers": "I think that would be a good idea because help-wanted can be misleading. help-wanted because it's a difficult task? or help wanted because trying to solicit people get involved? \n. ",
    "rimunroe": "Also, I wasn't sure about the commit structure exactly because this doesn't directly fix an issue, just half of it.\n. Yeah, I noticed that at least on my install I don't have any issues with commas anymore.\n. I have a bit of an ethical objection to allowing that rule to be honest, but I did know a person who coded with that style.\n. It looks like the tests aren't covering anything in the two new rules, although I'm not exactly sure why.\n. @markelog Thanks! I'll fix that.\n@hzoo I'd be happy to leave it out.\nThere are a few other tiny fixes as well that I'll push up in a few.\n. It's passing fine now, and I changed the rule slightly so that it no longer looks at comments--or at least that's what I think the change does.\n. Done! Anything else?\n. @hzoo What's the procedure for doing that at this point? Am I supposed to rebase/squash and then force push to my branch or is there some nicer way of doing it?\n. Spiffy. Anything else?\n. Thanks for all the help!\n. @markelog did the old version get merged by accident?\n. @markelog @hzoo Thanks!\n. There are a lot of nice features in es2015, but how will you address the pain points of writing a transpiled Node module? Babel does produce fairly readable code, but it's still more difficult to parse than the source in my experience. Without sourcemap support it can make debugging a hassle, especially to someone unfamiliar with the project.\n. @mrjoelkemp I think it's also a problem just looking at stack traces in the console or while building tooling on top of jscs. I was thinking about moving an npm module to es2015 recently, but I ended up coming to the conclusion that it didn't buy me enough to justify the switch. My codebase was considerably smaller though, and I imagine you have other things to consider, but does it buy you enough to justify the potential increase in friction for users at this point in time?\n. Ah okay. I had clicked on a few tests to see how the assertions were written, and just happened on one or two that check for non-emptiness. Is there a reason that this is used in some tests or is it just old code that hasn't been changed yet?\n. ",
    "saitheexplorer": "This lets me ignore using a config file, but this option doesn't exist using the command line tool (as far as I can tell).\nI will take my question to gitter - thanks for the heads up.\n. Forked the project - will give it a shot!\n. ",
    "michieldewilde": "Working on this\n. Wouldn't it be better to exclude mutiple files by using this:\njscs lib/config/configuration.js --exclude lib/config/configuration.js,lib/config/blabla.js\ninstead of this:\njscs lib/config/configuration.js --exclude lib/config/configuration.js --exclude lib/config/blabla.js\n. ",
    "OliverJAsh": "Looks like I was after excludeFiles.\n. ",
    "philipbulley": "+1\n. ",
    "kobezzza": "+1\n. +1\nReal needs\n``` js\nclass Foo {\n    constructor(bar) { // Missing space before openning round brace\n}\n\n}\n```\n. > Thanks for reporting @kobezzza. Would you mind sharing your entire jscsrc? \nhttps://github.com/Collection-JS/Collection/blob/v6/.jscsrc\n\n@kobezzza Can you try removing jscs from node_modules and installing it again? Any change? \n\nNo :disappointed: \n\nI'm using JSCS with WebStorm for JSX files and he needs eprima-fb parser, maybe the problem in it?\n. Issue for JetBrains\nhttps://youtrack.jetbrains.com/issue/WEB-17471\n. @mrjoelkemp path to JSCS must be required in Project Preferences and it can be global or local.\nMy config: \nJSCS package: C:\\Users\\kobezzza\\Documents\\dev\\myProject\\node_modules\\jscs\nBut in JSX mode WebStorm also need to install eprima-fb package, and i installed it locally with my project.\n. @mrjoelkemp unfortunately it didn't help :disappointed: It seems like that WS by default in JSX uses esprima-fb. I hope that they fix it soon. Thanks for help!\n. > Are you sure about ...?? Looks like you need to use ...*\nYep.\nThe ALL type * Indicates that the variable can take on any type.\nThe UNKNOWN type ? Indicates that the variable can take on any type, and the compiler should not type-check any uses of it.\nhttps://developers.google.com/closure/compiler/docs/js-for-compiler\n. JSCS@2.1.0 still has this bug :cry: \n. pleeeese, very need this fix :sob: \n. https://github.com/jscs-dev/node-jscs/issues/1513\n. > Can you elaborate? ;-) You don't want to have this hyphen if it ends with a newline?\nAll fine\njs\n/**\n * @param {!Array} value - parameters:\n *   [0] - some value;\n *   [1] - some value\n */\nfunction foo(value) {\n}\nError, but it must work\njs\n/**\n * @param {!Array} value -\n *   [0] - some value;\n *   [1] - some value\n */\nfunction foo(value) {\n}\n. > What's the error say?\nProperty assignment should use enchanced object literal function. {propName: propName} is not allowed.\n. > @kobezzza Would like to try to tackle this bug?\nOk\n. ",
    "RehanSaeed": "+1\n. According to the error, its looking for the file in the correct location.\n. @tbandixen Thanks, I've been stuck on this for a couple of days. For others with this problem using Windows and Visual Studio, you need to save the file as 'UTF8 without Signature' which is the same thing as BOM or Byte Order Mark.\nIdeally gulp-jscm or jscm itself should handle either encoding.\n. I'll take a look tomorrow and let you know if I find any problems. Thanks.\n. ",
    "rokerkony": "+1\n. ",
    "eriadam": "+1 Angular 2 is coming.\n. ",
    "mikaturunen": ":+1: For general TypeScript work and Angular 2.\n. ",
    "GauSim": "+1\n. ",
    "kirilloid": "Thanks for the reference. It's essentially the same. The only difference is that author of that issue consider it OK with possibility to turn off and I consider such behavior as a bug.\n. ",
    "Burnedo": "@markelog \nDo you mean that I should move new tests to ./test/specs/rules/ and use reportAndFix instead of files?\nWhat is the _fix field?\n. I've refactored the code and the tests.\nRegarding 2.0 version I'll try to fix it on another branch and create a new pull request for it.\nCan this be merged into current master?\n. @markelog It doesn't work by fast and simple copy-pasting the code :)\nI have to merge my changes into 2.0 and dive deeper into the code. I'll definitely do this, but can't tell exact ETA for now.\n. @zz85 First test case is passing, but you are right about second. IgnoreEmptyLines won't work for comments. Will fix.\n. I've covered tests mentioned by @zz85 \n. @markelog I'm sorry, but I have no time at all this week. It would be great if you could take care of this issue. Thank you.\n. Fixed, sorry about that.\n. I edited this while developing and accidentally pushed the change, then restored original content.\n. Same as in mocha.opts file.\n. It will never be true. It could be written like precendintToken === undefined, but I believe it's a better practice to use typeof.\n. In case of regexp you are right.\n. file.getLineBreakStyle() is not very strict, so I decided to just use hardcoded new line. Using file.getLineBreakStyle() would enforce me to use RegExp constructor and make code even less readable.\n. This condition is to determine if we should fix this token, not if it's a block comment. precendintToken in some cases could be not at the line we are trying to fix in current iteration.\n. No. We have to set precendingToken to undefined at the end of iteration because of a strange (not intuitive) javascript scope behavior in loops.\n. Is it matter of choice or significantly more performant?\n. ",
    "xtian": "Not sure if this is the same issue or not, but instance.method.apply(instance, args); as listed in the invalid examples for requireSpread does not trigger a failure either.\n. ",
    "phlip9": "@mrjoelkemp Gotcha! I added another test as you requested--everything looks like it works correctly.\n. ",
    "priyatham-aps": "@mikesherov \nDo you need anything from my side to help track down the issue? Happy to help in anyway I can.\n. ",
    "jamietre": "+1 but I'm having a different effect - perhaps because of the time passed since the original bug report & newer version now?\nclass test {\n    constructor(options) {\n        this.options = options\n    }\n    method() {\n        this.doSomething(err, function() {\n            if (err) throw err\n        })\n    }\n}\nwith validateIndentation: 4 this gets autoformatted as:\nclass test {\n    constructor(options) {\n    this.options = options\n    }\n    method() {\n    this.doSomething(err, function() {\n        if (err) throw err\n    })\n    }\n}\nThat is, the inner scope of the class method is not accounted for.\n(edit) actually it's a bit more complicated, and despite a couple hours of tinkering I can't reproduce with any consistency what causes the various issues.\nSuffice it to say there are problems with validateIndentation. It appears to be influenced by other formatting, possibly including line endings, tabs, and so on.\nThat is, I literally copied and pasted the problem file to a new file, and ran jscs again, and it worked fine. The only difference was line endings. I thought I had unmasked the mystery but found in other files inconsistent formatting in nested structures. I tried changing the line endings, but it had no effect!!  I then realized there were tab indents, which apparently are not corrected by validateIIndent, which seems strange.\nSo I added disallowTabs: true and jscs just fails, but will not automatically convert tabs to a regular indent. I am not sure if this is by design, or the intent is that autofixing indentation would account for tabs already so you don't need this. But either way I can't figure out any way to just get rid of tabs and autoformat with spaces. Correcting the tabs manually still did not solve the indentation problems. Sometimes, if I manually fixed the indent in a problem area, other successive areas would be indented correctly!\nAt the end of all this I can't come up with a rule set, or a way to clean a file, that consistently indents properly according to the validateIntentaion spec. I also can't reliably reproduce the problems, which are not consistent, so I assume that there are interactions with other rules and/or nuances of the input formatting. This is confounding because I would think that formatting indentation would necessarily involve just chucking the input whitespace out the window and rewriting it based on the parsing - but that seems to not be the case, since the input indentation can affect the output indentation.\n. Interesting.. I even set up the simple scenario just as in this report to verify it. Fresh install from npm public registry yesterday. I am on windows in full disclosure. Will try it in ubuntu vm today and see if I can repro shortly.\n. Here's the issue... apparently I didn't actually use that .jscsrc, this should repro it:\n{\n    \"preset\": \"node-style-guide\",\n    \"disallowTrailingComma\": true,\n}\nor this (though this is obviously a silly config, but more clearly reveals the issue)\n{\n    \"requireTrailingComma\": true,\n    \"disallowTrailingComma\": true,\n}\nIt seems like there's a conflct with the previous requireTrailingComma directive. If you add \"requireTrailingComma\": false when using the preset, then it works. \nNot sure if this is a general problem or specific to this rule, but it seems like any disallow rule should invalidate a previous require rule and vice-versa.\n. ",
    "danbucholtz": "I am seeing the same issue that @jamietre is seeing.  Anyone have a fix?  Namely, that when I run JSCS with the fix command it is flattening my class.\n/* src */\n```\nexport class myClassOfDoom {\nconstructor(param1, param2){\n    this.param1 = param1;\n    this.param2 = param2;\n}\n\nmyMethod(myParam){\n    console.log(\"cool function\");\n}\n\n}\n```\n/* after --fix is used*/\n```\nexport class myClassOfDoom {\n    constructor(param1, param2){\n    this.param1 = param1;\n    this.param2 = param2;\n    }\nmyMethod(myParam){\nconsole.log(\"cool function\");\n}\n\n}\n```\nAny thoughts?\n. ",
    "tconroy": "+1, facing the same problem as @danbucholtz -- auto fix keeps flattening our classes requiring manual fixing. Anyone have a solution?\n. interesting, not sure why setting false is not working for me, but setting null works. \nThanks for your help, apologies for not reading the docs at a higher level. :) \nCheers! :+1:\n. ",
    "laurent-news": "+1 Facing this problem\n. ",
    "kolomiichenko": "When you set \"disallowSpaceAfterObjectKeys\": true and \"requireAlignedObjectValues\": \"all\" rules will conflict because first disallow spaces before collons. \nSo I think that pattern alignment is fundamentally wrong and I offer my alignment template.\nBut maybe need to modify, and make the choice of alignment template...\nSorry for the tests. This is only my proposal, if someone really considers relevant - I will modify and correct. Now it's more like a question.\n. ",
    "chinchang": "@mrjoelkemp I get an error when using that flag: \nerror: unknown option '--max-old-space-size'\n\u00bb jscs --version\n1.13.1\n. ",
    "khaledkbadr": "I have a very initial rep that I had the same problem with. \nhttps://github.com/khaledkbadr/token-authentication\nDoes jscs --auto-configure . ignore the node_modules directory??\n. ",
    "mikedaly": "FWIW, commit 1ba4b45 does not address the issue for me. It fails with that error when trying to auto-configure our product's source folder, which does not have node_modules or bower_components (both of which should probably be ignored by default, not just node_modules).\nIf I start node using the --max-old-space-size=4096 argument as described above, then it does work correctly.\n. You aren't likely to see any updates here, since JSCS is now a deprecated project. The committers have moved over to ESLint and recommended that we do the same.\nJSCS\u200a\u2014\u200aend of the line. ",
    "kirbysayshi": "I'm guessing this is the same issue as #2124. This OOM condition was probably more likely before the automatic exclusion of node_modules in 1ba4b45...\n. @hzoo I agree with defining specific folders to lint, but even if I did it the nested node_modules would still be present and still be a problem (if I'm understanding you correctly). In my project, I control the code in the inner-project folder, but it has separate dependencies.\nPerhaps a better example project where this could be an issue:\n- client\n  - node_modules\n  - package.json\n- server\n  - node_modules\n  - package.json\n- package.json // just contains npm scripts, for example\nAnd of course, a person can work around this by adding */node_modules/** to their excludeFiles config, but maybe this makes it even easier to use jscs to have it by default?\n. I'm unfamiliar with AppVeyor, but the build failure doesn't seem related to my change. Is it, and I'm just missing something?\n. ok cool! thanks for letting me know.\n. @hzoo Ah, thanks for the explanation about master!\nUsing an increased max-old-space-size works (previously I'd been using it wrongly). For anyone else looking: node --max-old-space-size=4096 node_modules/.bin/jscs .\n@markelog Processing files sequentially is possible, but tricky since the file filtering needs to happen outside of jscs. Seems like if a file is specified on the command line, then it's not checked against the contents of .jscsrc excludeFiles. Regarding \"coming with a fix\": I can't make any guarantees, but if I were to fix this should I do it against 2.9.0 or master?\n. Weird, I wonder if this has to do with how the glob is tested? I could see that glob failing if it weren't tested against an absolute path, and instead were tested against a relative path.\nBut oh well, sorry this caused people issues.\n. ",
    "KeithPepin-MW": "I was working fine without issue until I added istanbul to my project and jscs began complaining about perceived errors in the ./coverage directory it created.  I added \"excludeFiles\": [\"coverage/**\"] to my .jscsrc so this would no longer get checked and ran smack into the memory problems mentioned above.    Adding the --max-old-space-size=4096 flag mentioned above does not correct the problem for me.\nUpdate: I think once I added the excludeFiles parameter, node_modules and .git folders may have been included again. Adding them to the excludeFiles array of paths fixed the problem for me.. Any update on this issue?  Now seeing problems where jscs simply hangs when running our Travis builds.. Thanks Mike - I hadn't realized that.  I'll make the switch over to eslint. . ",
    "kadamwhite": "Awesome! I started a first pass at this on Friday, and will push it up as a PR once I'm back from the weekend.\n. @markelog done! Thanks for the suggestion\n. Missed something: need to note that we need to call checker.registerDefaultRules() to set up all of the built-in rules, otherwise the calls to .configure will error out that the rules are undefined\n. ",
    "TDA": "Uhm, I am asking about custom usage of unary operators, like \"!!\", pretty positive that isn't in the docs. I have described the use case in detail above, with an example as well.\n. @markelog: You are right about that, but this is a very 'nice-to-have' functionality that cannot be implemented without adding some logic to the token parsing. So would it be possible for you guys to help us out with this? I see a couple of issues very similar to this one that have been resolved in the past. We would appreciate it if you could help us on this one.\n. ",
    "osv": "+1 this may be need if you use Meteor-Style-Guide#spaces-between-tokens\n. ",
    "jameswomack": "Same for requireMatchingFunctionName && requireObjectKeysOnNewLine\n. Nm, I see that I was getting ahead of myself using rules that haven't been released to NPM yet.\nI'll used npm i jscs-dev/node-jscs for now :)\n. Temporary fix is to use npm i jscs-jsdoc -D\n. @MarkitoMagic I discovered that Syntastic (a vim plugin) was actually pointing to an earlier version of JSCS. I was mistaken in claiming I was using the latest dev version. \n. ",
    "trikadin": "+1\n. +1\n. @markelog, sorry, your commit called \"Fix: don't throw on empty block with \"requirePaddingNewLinesAfterBlocks\", but this bug is not about the empty blocks only, it's about the blocks as statement.\n. ",
    "doombu": ":+1:\n. ",
    "ksheedlo": "+1\n@markelog I'll take it!\n. nevermind, looks like this was fixed in a8296dbfcdf87c7864ade7fe169d19d315552a1e ?\n. This is still broken for me on 2.1.0. Here's my config:\n``` json\n{\n  \"requireSpacesInAnonymousFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n  },\n\"esnext\": true\n}\n```\nMy test program:\njs\nvar o = {\n  foo() {\n    return 42;\n  }\n};\nJSCS output:\n```\nMissing space before opening round brace at demo.js :\n     1 |var o = {\n     2 |  foo() {\n-------------^\n     3 |    return 42;\n     4 |  }\n1 code style error found.\n``\n. Update: Responded to review comments.\n. Update: Had to add a coverage hack for theallExcept: true` case.\n. I'm swamped lately with work and other projects, so I'd appreciate if\nsomeone else took care of it.\nOn Sunday, October 18, 2015, Henry Zhu notifications@github.com wrote:\n\nLooks like we forgot to do the same for the disallow rule? @ksheedlo\nhttps://github.com/ksheedlo If you don't have time to do it I can\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1676#issuecomment-149092597.\n. sure!\n. \n",
    "aldeed": "@markelog Given that your last comment acknowledged that https://github.com/jscs-dev/node-jscs/commit/a8296dbfcdf87c7864ade7fe169d19d315552a1e only added tests proving this is still an issue rather than actually fixing this issue, why did you close this issue?\n+1 for actually adding an option for this.\n. Nevermind, I looked at the other commit that actually did fix this, so I see \"allExcept\" now. \"allExcept\" is not in the documentation FYI\n. ",
    "jamestalmage": "Umm...\nThe code snippet above will pretty obviously throw if the value is null.\n``` js\nvar opts = {a: null}\n'a' in null; //true\nassert(opts.a === true); // throws AssertionError\n```\n. I'd be happy if that were true, but you're both wrong, and I tested before replying to @Slayer95 (even though it's plain from reading the code that it wasn't going to work).\njson\n{\n    \"preset\": \"google\",\n    \"disallowSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": null\n    },\n    \"disallowSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": null\n    },\n}\nthrows\ndisallowSpacesInFunctionExpression.beforeOpeningRoundBrace property requires true value or should be removed.\nThe offending code is here.\n. You would still run in to problems if you wanted to toggle both child values (unsetting one and setting the other):\njson\n \"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": null,\n    \"beforeOpeningCurlyBrace\": true\n }\ndisallowSpacesInFunctionExpression.beforeOpeningRoundBrace property requires true value or should be removed\nDoing this:\njson\n \"disallowSpacesInFunctionExpression\": null\nGets me where I want, but I would hardly call the issue \"closed\".\n. ",
    "guy-mograbi-at-gigaspaces": "+1 \nreached here after using google preset and want to override disallowSpacesInAnonymousFunctionExpression.. setting null does not resolve this issue for me, tried different versions, nothing works. \nthis makes preset practically unusable\n. ```\njscs: {\n            files: lintFiles,\n            options: {\n                preset: 'google',\n                config: 'src/.jscsrc' // tweak for intellij's default\n            }\n        }\n```\n{\n    \"validateIndentation\": 4,\n    \"disallowSpacesInAnonymousFunctionExpression\": ???\n}\nBTW - shocked there's no webstorm/intellij preset\n. Just found out that 2 rules affect function () - space before bracket in anonymous function. \nthis rule also enforces it\n\"disallowSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\nI guess if I override it, then it will go away. \n. ",
    "oluckyman": "Thanks for quick fix!\u26a1\ufe0f\nseems you have duplicated assertion here https://github.com/jscs-dev/node-jscs/blob/bc90c56791e9a552e2fa8293e9bd0d9e0af768e0/test/specs/rules/require-spaces-inside-object-brackets.js#L83-L85\n. ",
    "itsjamie": "\"Doh!\"\nMy global JSCS was out of date, I was wondering why SublimeLinter wasn't showing the error but the cli jscs . was. \nThanks!\n. ",
    "DanielHeath": "$ ./node_modules/.bin/jscs --version\n1.13.1\n. I'm on OSX Mavericks\n. I'd guess the issue is that the file starts with a comment, and it's trying to read the 'previous' line to check if it's blank (but there is no previous line).\n. Airbnb style enables the rule, I'm trying to disable it (so I can't just leave it out).\nWhen I assign it null, I get disallowSpacesInFunctionExpression option must be the object.\nIf I assign it {}, I get disallowSpacesInFunctionExpression must have beforeOpeningCurlyBrace or beforeOpeningRoundBrace property.\n. ",
    "defli": "+1\n. ",
    "MarkTechson": "Hi James / @jameswomack, how did you resolve this issue?\n. ",
    "andre487": "It works, thanks\n. ",
    "aivus": "Also this asset exists in other rules too.\n. ",
    "megawac": "Hi @markelog et al,\nLast time I needed naturalCompare or levenshtein I reached for underscore.string's implementation. I would recommend those implementations over natural-compare.\n. And yeah, the package on npm is fine I think I just updated it to be cjs and not install itself on String, but I'd have to check. I'll throw up the fork on a github repo tomorrow\n. Yeah, I don't think underscore.string will object to that change. We've\nmade some similar edge case changes to naturalCmp recently\n/cc @stoeffel https://github.com/stoeffel\nOn Thu, Jul 30, 2015 at 2:13 PM, Oleg Gaidarenko notifications@github.com\nwrote:\n\nThank you @megawac https://github.com/megawac.\n@ruimarinho https://github.com/ruimarinho i'd say you could submit this\nissue to the underscore.string repo, i guess underscore.string is much\nless risky then natural-compare.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/1545#issuecomment-126422259.\n. \n",
    "stoeffel": "@megawac no objections to that. Sounds reasonable, that \"symbols\" come first.\n. ",
    "yekver": "@mrjoelkemp Yep, you understand me correctly!\nThe point of my advice is that there is no reason to require padding new lines in object that contains only one element. For two or more elements in object padding new lines are required, because they make git diff looks prettier for watching elements that was deleted, updated or inserted.\n. Yeah! I think this would be great.\nP.S. For implementing this case we need separated rule, or this one can be used?\nok:\njavascript\nvar a = {\n      a: 1\n},\n{\n      a: 1,\n      b: 2\n};\nfail:\njavascript\nvar a = {\n      a: 1\n}, {\n      a: 1,\n      b: 2\n};\n. Sorry, but I can't reproduce this issue with an example piece of code.\n. Can I debug it somehow?\n. I can't create an example that will throw an error.\n. Here is an error from here:\njavascript\n{ \n  filename: './500.html',\n  rule: 'requireSpacesInAnonymousFunctionExpression',\n  message: 'Missing space before opening round brace',\n  line: 2,\n  column: 9\n}\n500.html is a symlink to a file that contains one-string obfuscated html-code.\n. If I understood correctly:\n\nDefault value is [\"*/.+(htm|html|xhtml)\"]. So JavaScript is extracted from files with .htm, .html or .xhtml extension.\n\n.html files will be checked by default. Right?\n. Nope.\n. I think there is something wrong with this ./500.html file. Because if I make any changes to it - everything is working fine.\nFinally I made an example: https://yadi.sk/d/hcjAjGL_jkMwr\nI run jscs with this command: \n$ node_modules/jscs/bin/jscs -c ./.jscs.json .\n. By the way, there is no error till 2.1.0 (included)\n. Does my example helps you to reproduce the issue?\n. Yes, topic title is wrong, I think you can change it. I dunno why don't you get the error TypeError: Cannot call method 'replace' of undefined.\nI get undefined because the file contains only single string, and as I wrote in https://github.com/jscs-dev/node-jscs/issues/1828#issuecomment-148107092 jscs matches to the second (non-existing) line.\nP.S. There is no particular reason it's just a habit :)\n. ",
    "shauns": "Thanks @mrjoelkemp -- that resolves the error (still have a bunch of style warnings though ;) )\nFor future reference. package.json dependencies:\n\"jscs\": \"jscs-dev/node-jscs#master\",\n\"babel-jscs\": \"^2.0.1\",\nAnd JSCS config:\njscsConfig\": {\n    \"preset\": \"airbnb\",\n    \"esprima\": \"./node_modules/babel-jscs\",\n    \"fileExtensions\": [\n      \".js\",\n      \".jsx\"\n    ]\n  },\n. ",
    "stephen": "Ah, awesome - looks like this doesn't happen in current master, but exists in 1.13.1.\nAny ideas on when the next release will be cut?\n. ",
    "romanblanco": "@markelog we need JSON output to be able to integrate jscs to GitHub bot for pull request monitoring.\n. @markelog What API do you mean?\n. @markelog till this time, we only used haml-lint and rubocop linters in our GitHub bot (which has similar use to https://www.houndci.com/), as you can see here. They both provide JSON output. We would like to use other linters, which means, we need to either make a wrapper to output linter results in JSON, or add another reporter right into linter.\n. Which global/relative reporter flag you got on mind? I don't quite understand that question.\n. Well, yes. I probably could specify my own reporter, if it would be problem to add another into node-jscs. I didn't noticed this option before.\n. ",
    "benjamincharity": "Also, I've noticed that even with requireLineFeedAtFileEnd set to true, no error is surfaced when there is no empty line at the end of my JS file. Am I misinterpreting this rule?\n```\n// This should throw an error\n// file contents above...\n\n}); // end of file with no blank line\n```\n```\n// This should be valid\n// file contents above...\n\n});\n    // empty line here to end file\n```\n. Yes I believe you are correct. It just seems that those two desires fight against each other. Requiring function declarations throws errors for my anonymous functions inside callbacks.\nSolvable, but going through our entire codebase and naming all functions is a bit too much work at the moment (we have a very promise-heavy codebase).\n. Sure thing. I'll take a stab in the next few days when I get some time.\n. @mrjoelkemp yep I'm on 1.13.1. \nCode that should be throwing an error:\n(function() {\n    console.log('Hello World');\n})();\n// this is a blank line at the end of the document\nI'll also post my full .jscsrc in case I incorrectly formatted something.\n{\n    \"disallowEmptyBlocks\": true,\n    \"disallowIdentifierNames\": [\n        \"temp\",\n        \"foo\",\n        \"bar\",\n        \"dev\"\n    ],\n    \"disallowImplicitTypeConversion\": [\n        \"numeric\",\n        \"boolean\",\n        \"binary\",\n        \"string\"\n    ],\n    \"disallowKeywordsOnNewLine\": [\n        \"else\"\n    ],\n    \"disallowMixedSpacesAndTabs\": true,\n    \"disallowMultipleLineStrings\": true,\n    \"disallowMultipleVarDecl\": \"strict\",\n    \"disallowNamedUnassignedFunctions\": true,\n    \"disallowNewlineBeforeBlockStatements\": true,\n    \"disallowOperatorBeforeLineBreak\": [\n        \".\"\n    ],\n    \"disallowQuotedKeysInObjects\": true,\n    \"disallowSpaceAfterObjectKeys\": true,\n    \"disallowSpaceAfterPrefixUnaryOperators\": [\n        \"++\",\n        \"--\",\n        \"+\",\n        \"-\",\n        \"~\",\n        \"!\"\n    ],\n    \"disallowSpaceBeforePostfixUnaryOperators\": [\n        \"++\",\n        \"--\"\n    ],\n    \"disallowSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInCallExpression\": true,\n    \"disallowSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInFunction\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInNamedFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true\n    },\n    \"disallowSpacesInsideBrackets\": {\n        \"allExcept\": [ \"[\", \"]\" ]\n    },\n    \"disallowSpacesInsideParentheses\": true,\n    \"disallowTrailingComma\": true,\n    \"disallowTrailingWhitespace\": true,\n    \"disallowYodaConditions\": true,\n    \"maximumLineLength\": {\n        \"value\": 100,\n        \"tabSize\": 4,\n        \"allowComments\": false,\n        \"allowUrlComments\": true,\n        \"allowRegex\": false\n    },\n    \"requireBlocksOnNewline\": true,\n    \"requireCamelCaseOrUpperCaseIdentifiers\": \"ignoreProperties\",\n    \"requireCapitalizedConstructors\": true,\n    \"requireCommaBeforeLineBreak\": true,\n    \"requireCurlyBraces\": [\n        \"if\",\n        \"else\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"try\",\n        \"catch\"\n    ],\n    \"requireDotNotation\": true,\n    \"requireFunctionDeclarations\": true,\n    \"requireLineBreakAfterVariableAssignment\": true,\n    \"requireLineFeedAtFileEnd\": true,\n    \"requireOperatorBeforeLineBreak\": [\n        \"?\",\n        \"=\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\"\n    ],\n    \"requirePaddingNewLineAfterVariableDeclaration\": true,\n    \"requirePaddingNewLinesAfterBlocks\": {\n        \"allExcept\": [\n            \"inCallExpressions\",\n            \"inArrayExpressions\",\n            \"inProperties\"\n        ]\n    },\n    \"requirePaddingNewLinesAfterUseStrict\": true,\n    \"requirePaddingNewLinesBeforeExport\": true,\n    \"requirePaddingNewlinesBeforeKeywords\": [\n        \"do\",\n        \"for\",\n        \"if\",\n        \"switch\",\n        \"case\",\n        \"try\",\n        \"catch\",\n        \"void\",\n        \"with\",\n        \"return\",\n        \"typeof\",\n        \"function\"\n    ],\n    \"requirePaddingNewLinesBeforeLineComments\": {\n        \"allExcept\": \"firstAfterCurly\"\n    },\n    \"requirePaddingNewLinesInObjects\": true,\n    \"requireParenthesesAroundIIFE\": true,\n    \"requireSemicolons\": true,\n    \"requireSpaceAfterBinaryOperators\": [\n        \"=\",\n        \",\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\"\n    ],\n    \"requireSpaceAfterKeywords\": [\n        \"do\",\n        \"for\",\n        \"if\",\n        \"else\",\n        \"switch\",\n        \"case\",\n        \"try\",\n        \"catch\",\n        \"void\",\n        \"while\",\n        \"with\",\n        \"return\",\n        \"typeof\"\n    ],\n    \"requireSpaceAfterLineComment\": true,\n    \"requireSpaceBeforeBinaryOperators\": [\n        \"=\",\n        \"+\",\n        \"-\",\n        \"/\",\n        \"*\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\"\n    ],\n    \"requireSpaceBeforeBlockStatements\": true,\n    \"requireSpaceBeforeKeywords\": [\n        \"else\",\n        \"while\",\n        \"catch\"\n    ],\n    \"requireSpaceBeforeObjectValues\": true,\n    \"requireSpaceBetweenArguments\": true,\n    \"requireSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInConditionalExpression\": {\n        \"afterConsequent\": true\n    },\n    \"requireSpacesInForStatement\": true,\n    \"requireSpacesInFunctionDeclaration\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInFunction\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"requireSpacesInNamedFunctionExpression\": {\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"validateIndentation\": 4,\n    \"validateLineBreaks\": \"LF\",\n    \"validateParameterSeparator\": \", \",\n    \"validateQuoteMarks\": \"'\",\n    \"excludeFiles\": [\n        \"node_modules/**\",\n        \"bower_components/**\",\n        \"dist/**\",\n        \"e2e/**\",\n        \"typings/**\",\n        \".tmp/**\"\n    ]\n}\n. So no one has any ideas on this? This is reproducible issue across my team; if it was just my machine I'd assume it was just me...\nEdit:\nDisregard.. apparently it is just me :disappointed: \n. ",
    "a-x-": "ok, you're right\n. https://github.com/jscs-dev/jscs-jsdoc/issues/127\n. /cc @tenorok \n. yeah, you're right\n. I updated description (see its for invalid case).\nAnd see valid version below:\nconfig: { requirePaddingNewlinesInFunctionBodies: 3 }\nvalid code:\njs\nfunction(){\n    foo();\n    bar();\n    baz();\n}\nvalid code:\njs\nfunction(){\n    foo();\n}\n. Oh, no :)\nLimit lines.\nThe requirePaddingNewlinesInBlocks not works with functions' bodies now. And if it's expected,\nthan i think: would be nice to implement requirePaddingNewlinesInFunctionBodies rule for functions too.\n. Another example:\nvalid code:\njs\nfunction(){\n    foo();\n    var bar;\n}\n. Hmm, ok, i can try implement prototype.\n. i found interesting place now: https://github.com/jscs-dev/node-jscs/blob/9b361a03047c9e9628f92f790d929671a57b53bc/lib/rules/require-padding-newlines-in-blocks.js#L157\nfile.iterateNodesByType('BlockStatement', ...\nand i want find something like FunctionBody NodeType \n. there are at least following NodeTypes:\n- ~~FunctionDeclaration~~\n- FunctionExpression \u2014 is what we need, as i see\n. As i understood, we should check node.body.length when NodeType is a FunctionExpression\n. \u041a\u0430\u0436\u0435\u0442\u0441\u044f \u0432\u0441\u0451 \u043f\u0440\u043e\u0441\u0442\u043e:\n\u0421\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043b ./lib/rules/require-padding-newlines-in-blocks.js\n\u0432 require-padding-newlines-in-function-expressions\n\u0418 \u043f\u043e\u043f\u0440\u0430\u0432\u0438\u043b BlockStatement \u043d\u0430 FunctionExpression + jsdoc, \u0435\u0449\u0451 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u0438 \u0442\u0435\u0441\u0442\u044b \u043d\u0435 \u043f\u0440\u0430\u0432\u0438\u043b.\n\u0412\u0435\u0442\u043a\u0430: https://github.com/jscs-dev/node-jscs/compare/master...bem-kit:require-padding-newlines-in-function-expressions\n. i added spec, but it failed\n. i'm not sure, that i can finish this work in short time.\nWhat i did already:\n\nbranch: https://github.com/jscs-dev/node-jscs/compare/master...bem-kit:require-padding-newlines-in-function-expressions\n- cp  ./lib/rules/require-padding-newlines-in-blocks.js into ./lib/rules/require-padding-newlines-in-function-expressions.js\n- replace BlockStatement to FunctionExpression\n- update jsdoc\n- update spec, but it, as i see, does not pass.\n. Ok, i created now: https://github.com/jscs-dev/node-jscs/pull/1725\n. \n",
    "leotm": "The problem still persists for me with current master, unless you add \"plugins\": [\"jscs-jsdoc\"].\nOr is the plan to completely remove all the jsDoc rules, so that it's no longer compulsory, and purely optional?\n. I download latest release node-jscs-2.0.0.zip, extract to node-jscs-2.0.0, inside create script.js, enter var a = 2; and get the same error in the screenshot.\nAdding \"plugins\": [\"jscs-jsdoc\"] to the .jscsrc fixes the dependency to the JsDoc rules, removing the error.\n. Agh that was the issue, cheers.\n. ",
    "everyonesdesign": "Seems that I got this error with jscs@2.1.1 and babel-jscs@2.0.4\n. ",
    "tkissing": "So the comment \n\nplease add tests proving it doesn't yell for function declarations.\n\nby @mikesherov  has been \"reversed\"?\nThat is rather unfortunate. I can see the value in saying \"all function expressions should be named (for better stacktraces)\" or \"no function expressions should be named (because we still cater to IE7 and they are just buggy there)\", but I don't see why either opinion should have any impact on function declarations. \n. I kinda feel this should be more than one rule conceptually, but given the preference for require/disallow rule pairs I can't come up with anything that's obviously better than allExcept: ['functionDeclarations'], so yeah, let's try that. Thank you!\n. ",
    "mercuriete": "I had exactly the same problem.\ni fixed it deleting from the .jscsrc\nthe line that i had\n\"esprima\": \"esprima-fb\"\nthen it appeared a lot of new warnings about linting with the rule validateQuoteMarks\nbut in the end i got working the project without esprima-fb.\n. yes, but i am basically changing all quotes of my code from doublequotes to singlequotes and its fine.\nthanks you so much for your quick answer.\n. ",
    "angelomichel": "I have just updatet via npm -g to jscs@2.0.0, restarted atom. Problem still occours. \n. @mrjoelkemp I now see the actual problem. The preset of airbnb has been changed so that trailingComma's now is mandatory. \nSo problem fixed again (for those, non Babel users, who wonder how to fix; overwrite it in your own jscs settings!)\n. I have added in my git project on root this .jscs.json file:\njson\n{\n  \"preset\": \"airbnb\",\n  \"disallowTrailingComma\": true,\n  \"requireTrailingComma\": null\n}\n. ",
    "jmduke239": "Thanks.\n. ",
    "Coobaha": "@mrjoelkemp  i have esnext : true, and we got a  lot of files, some of them fails on imports if there dynamic object props\nversion is 2.0 ofc\n. :+1: \n. ",
    "kadmil": "Code\nconst ururu = 500\nexport default ururu\nConfig\n{\n    \"preset\": \"airbnb\",\n    \"requireCurlyBraces\": null,\n    \"disallowSemicolons\": true,\n    \"disallowTrailingComma\": null,\n    \"requireTrailingComma\": {\"ignoreSingleValue\": true,\"ignoreSingleLine\": true},\n    \"excludeFiles\": [\"node_modules/**\"],\n    \"fileExtensions\": [\".js\", \".jsx\"],\n    \"esnext\": true,\n    \"verbose\": true,\n    \"esprima\": \"esprima-fb\"\n}\n. Would it work with jsx?\n. Thanks a lot!\n. ",
    "2creativeSolutions": "Thank you for your answer. I have asked the question in the gitter room.\n. @hzoo you are right.\n@mrjoelkemp \"jscs -x \" individual works but i am creating a generic gulp task which will run JSCS on all the folders and automatically fix the issues.\nand gulp.dest() only accepts one directory.\nIs there any other way where i can pass an array of directories?\n. Thank you @mrjoelkemp for your assistance.\n. ",
    "Qix-": "Thank you :dancer:\n// @sindresorhus \n. @Nargonath :+1: Welcome!\n. ",
    "Semigradsky": "Oh, editing from the site is bad idea. \nFixed :v: \n. ",
    "faceleg": "I've had a go at this - a stumbling block I've run into is that the parse doesn't seem to give an if-block's node a body if that body consists only of a comment.\n. @hzoo thanks this is very helpful.\n. @markelog done, let me know if anything else needs to change\n. :dancers: \n. Good idea, I copied most of this from disallow-operator-before-line-break.\n. ",
    "mduvall": "@hzoo: Fantastic, amazing turnaround time, thank you.\n. ",
    "mtp401": "Google C++ style (and by derivation Google JavaScript Style) recommends this convention. See https://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Loops_and_Switch_Statements\n. ",
    "natemara": "Glad to help!\n. ",
    "KrekkieD": "You can exclude them manually right? http://jscs.info/rule/requireCapitalizedComments.html\n. Also hitting this issue. In my case I have a validateIndentation value of 4. I had a more complicated situation but it also seems to be related to the closing bracket position.\nThis bug allows my colleague to create hideous code ;)\n. ",
    "kaicataldo": "Whoops, typo in my typo fix (derp). Fixed now.\n. Changes to examples made - feels much better!\n. Sure thing - pre-existing examples changed to match as well\n. Something like this?\nit('should report padding newline even when there is newline after block', function() {\n    assert.equal(checker.checkString('if (true) {\\n\\nvar x = 5;\\n}\\n\\nif (true) {}').getErrorCount(), 1);\n});\n. ",
    "MikeMcElroy": "Supplied PR #1745 to fix this -- sorry for the multiple references.\n. Passes on my local machine, and the travis error looks a lot like an error I was hitting a while back, but I fixed that.\n. I really have no idea why it's failing on travis-ci and succeeding on appveyor.  Thoughts, @hzoo?\n. So I ran across that problem (same line numbers and everything) earlier in the PR.  I force-pushed my changes, and I maybe had the PR open at that point, so maybe something got screwed up with Travis?  The Appveyor works fine, and locally the tests run OK.  I'm not sure how best to debug the issue solely on Travis.\n. ",
    "fluky": "I agree with @SimenB on this one.  I have a case where the callback is called with call or apply by the 3rd party library and this is referenced in the function.  Having to use ignore for now but the suggestion above would handle that case much and an all except \"topmost\" would not.\n. Any updates on this?  This rule is basically unusable for ES6 as Promise, Reflect, etc trigger the rule.\nNever mind, just realized I could use allExcept for those, though I must admit that may not be the most elegant solution.  For a simple yeoman generator with a handful of files (3 source, 3 unit test and a gulpfile.js) I had to add the following to make it work:\n\"allExcept\": [ \"Error\", \"Object\", \"Boolean\", \"Date\", \"Reflect\", \"Promise\", \"Server\", \"Db\", \"Assertion\", \"MongoClient\", \"Base\" ]\nThe first 6 are all standard Javascript types.  The rest are for MongoDB, Chai and Yeoman.\n. For the standard component you'd need everything capitalized from this list:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n. ",
    "thenovices": "Here is the PR where they added the feature: https://github.com/jshint/jshint/pull/1841/files\n. ",
    "yous": ":+1: \n. ",
    "piotr-cz": "Sorry for false alarm.\nI'm using the google preset and looks like this is the desired behavior for \"checkAnnotations\": \"closurecompiler\" option.\n. I'd love such solution - but I'm not sure if this is not overcomplicating things.\n. ",
    "brenolf": "Yes, I'm using it on both gulp-jscs call and .jscsrc\n. Yes, gulp-jscs is 2.0.0 and esprima is 2.5.0.\n. The gulp task is:\njs\ngulp.task ('code-check', function () {\n  return gulp\n  .src('./src/js/**/*')\n  .pipe(jshint())\n  .pipe(jshint.reporter('jshint-stylish'))\n  .pipe(jscs({esnext: true}));\n});\nWhere jscs is a require('gulp-jscs'). And I have put an entry in .jscsrc: \"esnext\": true.\n. I didn't know about that, thanks!\nAnd yes, these errors are being generated by gulp-jscs. Are you trying using jscs CLI or the plugin?\n. Both are still throwing the error:\n```\n\njscs game/src/js/*/.js; exit 1;\n\nUnexpected token : at game/src/js/ui/button.js :\n    53 |\n    54 |    / jshint ignore:start /\n    55 |    this.sprite.events.onInputDown.add(context::this.callback);\n-------------------------------------------------------^\n    56 |    / jshint ignore:end /\n    57 |  }\n```\n. I'm using gulp-jscs 2.0.0, doesn't it already get the latest version of jscs as dependency?\n. I've reinstalled it\ngulp-jscs@2.0.0 node_modules/gulp-jscs\n\u251c\u2500\u2500 object-assign@3.0.0\n\u251c\u2500\u2500 tildify@1.1.0 (os-homedir@1.0.1)\n\u251c\u2500\u2500 through2@2.0.0 (xtend@4.0.0, readable-stream@2.0.2)\n\u251c\u2500\u2500 gulp-util@3.0.6 (array-differ@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, beeper@1.1.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, replace-ext@0.0.1, minimist@1.1.3, chalk@1.1.0, lodash.template@3.6.2, vinyl@0.5.1, dateformat@1.0.11, multipipe@0.1.2)\n\u2514\u2500\u2500 jscs@2.1.0 (strip-json-comments@1.0.4, reserved-words@0.1.1, natural-compare@1.2.2, babel-jscs@2.0.3, pathval@0.1.1, estraverse@4.1.0, vow@0.4.10, exit@0.1.2, esprima@2.5.0, minimatch@2.0.10, commander@2.8.1, cli-table@0.3.1, chalk@1.1.0, glob@5.0.14, vow-fs@0.3.4, lodash.assign@3.2.0, prompt@0.2.14, to-double-quotes@1.0.1, to-single-quotes@1.0.3, xmlbuilder@2.6.4, jscs-jsdoc@1.1.0, babel-core@5.8.22)\nAnd it seems to be fetching jscs 2.1.0...\n. I wasn't actually loading my own jscsrc file at all. Thanks for that!\n. ",
    "syoichi": "I think that disallowAnonymousFunctions shouldn't target \"Method Definitions\", in the same way as \"Arrow Functions\".\n\nBecause \"Method Definitions\" isn't complete \"named functions\", but \"Method Definitions\" isn't \"anonymous functions\".\n\n\nTherefore, I think that it doesn't need to add new value for disallowAnonymousFunctions's \"Method Definitions\" support.\n. Please see my comment's images.\nAnd ES6 spec says...\n``` md\nMethodDefinition : PropertyName ( StrictFormalParameters ) { FunctionBody }\n\nLet methodDef be DefineMethod of MethodDefinition with argument object.\nReturnIfAbrupt(methodDef).\nPerform SetFunctionName(methodDef.[[closure]], methodDef.[[key]]).\nLet desc be the Property Descriptor{[[Value]]: methodDef.[[closure]], [[Writable]]: true, [[Enumerable]]: enumerable, [[Configurable]]: true}.\nReturn DefinePropertyOrThrow(object, methodDef.[[key]], desc).\n```\n\nSetFunctionName is used in MethodDefinition.\nYou can confirm this in Chrome 46 and Firefox 43.\n``` js\n(function executeTest() {\n  'use strict';\nlet obj = {\n    foo() {\n      return typeof foo;\n    },\n    bar: function () {\n      return typeof bar;\n    }\n  };\nconsole.log(obj.foo.name); // 'foo'\n  console.log(obj.bar.name); // ''\n}());\n```\nFrom the above, I think that \"anonymous functions\" doesn't contain \"Method Definitions\".\n. > AST shows that it is anonymous\nOh... In that case, it can't be helped.\nI'm sorry to take up your time.\n. Ah, the type of requireSpaceAfterPrefixUnaryOperators should be describe \"Type: Array or Boolean\", not \"Type: Array or true\".\nrequireOperatorBeforeLineBreak, disallowSpaceAfterPrefixUnaryOperators, disallowSpaceBeforeBinaryOperators, requireSpaceBeforeBinaryOperators, disallowSpaceAfterBinaryOperators and requireSpaceAfterBinaryOperators have also this issue.\nAnd, the type of requireSpacesInConditionalExpression and disallowSpacesInConditionalExpression should be describe \"Type: Object or Boolean\", not \"Type: Object or true\".\nI'll do another Pull Request about this issues later on!\n. I see! I'll fix it.\n. ",
    "AnimiVulpis": "I think it would be nice if it was possible to do something like this if using jscs programmatic:\njavascript\nchecker.configure(checker.load('somepath'));\nThis could make sure, that usage from the command line and from code always load the same config in the same order and manner.\nFurthermore programmatic changes to the existing config would be based on the config which would be loaded by jscs.\njavascript\nvar config = checker.load('somepath');\nconfig.dontWantThisOption = false;\nchecker.configure(config);\nBut maybe I overestimate the usefulness of this feature.\nIn the end it is already possible to use it by importing it like you demonstrated.\n. I am good with the already proposed solutions :ok_hand:\nand as I am the only one who seemed to want this I will close this issue.\nThanks for asking though :+1: \n. ",
    "danechitoaie": "@markelog So I had two questions:\n1. How do you disable maxErrors in general? (I got an answer to this above. Looks like you need to set null in .jscsrc)\n2. How do you disable maxErrors when using the cli? (it's still not clear here to me how to do this. What do I pass as argument in the cli? null doesn't work there as it's interpreted as string.\n. Yes, sure. How can I help?\n. Done. Can you take a look at this https://github.com/jscs-dev/node-jscs/pull/1682 ? \n. Yes. Looks that way. This definitely affects all reporters that output in a specific format.\n. Sorry, these days were crazy at work... you don't even want to know... I'll try over the weekend to review the changes and run some tests to make sure it works as expected.\n. Updated the PR. Are we ok now?\n. Maybe someone can help with the current build error. I'm not familiar with the unit testing framework used.\n. Cool, thank you. :+1: \n. Usually I've seen -1 used to disable this kind of things. But if we replace null with -1 it will not be backwards compatible. \nIf we keep both null and also add -1 I don't think it really makes sense to have these much options and it might be confusing for the users.\nHow do you think is best to proceed with this?\n. Ok, will update the PR as soon as I find some time.\n. ",
    "monk-time": "It would make the case with empty lines more intuitive, but not for comments: \"include\": [\"comments\"]- they are already included by default, what would this option do? \nBasically, I see no reasonable way to keep these two exceptions in a single array, since they contradict each other. That is, short of changing the default behavior for validating either comments or empty lines.\n. How would you then disable validation for comments?\nWhat I mean is that current behavior is counterintuitive: no matter how you call that array of exceptions, ['comments'] disabled validation, ['emptyLines'] enables it, and ['comments', 'emptyLines'] does different things for different types of lines. I don't think these two exceptions should be in a single array (unless you call it exceptions).\nWhat about adding two options, includeEmptyLines and excludeComments?\n. Oh I get it now. Sounds good! :thumbsup:\n. I'd rather not, sorry. :(\n. Is there anything wrong with this bug report? I've tried to explain as best I could, but maybe I have failed to formulate this issue clear enough. Anyone? \n. Airbnb doesn't mention putting a space after , explicitly, but uses this convention throughout its guide consistently:\n\n5.2 Use array destructuring.\nconst arr = [1, 2, 3, 4];\n// good\nconst [first, second] = arr;\n\nSame with Google:\n\nArray and Object literals\n<...> To avoid these kinds of weird cases, always use the more readable array literal.\nvar a = [x1, x2, x3];\nvar a2 = [x1, x2];\nArray and Object Initializers\nSingle-line array and object initializers are allowed when they fit on a line:\nvar arr = [1, 2, 3];  // No space after [ or before ].\nvar obj = {a: 1, b: 2, c: 3};  // No space after { or before }.\n\nand with jQuery:\n\nObject and Array Expressions\nObject and array expressions can be on one line if they are short (remember the line length limits). <...>\n// Good\nmap = { ready: 9, when: 4, \"you are\": 15 };\narray = [ 9, 4, 15 ];\n\nand with Node:\n\nObject / Array creation\nUse trailing commas and put short declarations on a single line. Only quote keys when your interpreter complains:\nRight:\nvar a = ['hello', 'world'];\n\nWikimedia recommends having a space after comma semi-explicitly:\n\nThese and other aspects of our style guide are enforced with JSCS.\nWhitespace examples\nNo\nfoo = [bar,baz];\nYes\nfoo = [ bar, baz ];\n\nYandex - explicit rule:\n\nArrays\nWhen enumerating elements in an array literal, spaces should be typed after the comma only:\nvar fellowship = ['foo', 'bar', 'baz'];\n\nAnd Crockford too:\n\nWhitespace should follow every , (comma).\n\nAnd MDCS:\n\nObjects / Arrays\nThe comma should have no space before and 1 space behind itself.\ngood\nvar obj = { A: 1, b: 2, C: 3 };\nvar arr = [ 1, 2, 3 ];\npoor\nvar obj = {A:1,b:2,C:3};\nvar arr = [1,2,3];\n\nThis uniformity is why I believe all these presets assume that requireSpaceAfterBinaryOperators: true would cover this [very common] case. Changing its behavior results in jscs not catching errors where preset authors assumed it would, and that may be called a bug.\nOTOH, is it even correct to call a comma in array/object literals a binary operator? On second thoughts, it seems to me the decision to remove comma from binaryOperators was a reasonable one, and this case should be treated by a new requireSpaceAfterComma rule to mirror the existing requireSpaceBeforeComma. This new rule should also be added to all current presets.\n. Great work, thanks!\n. ",
    "michahell": "Hmm, understood. I'm not sure what is causing this, let me try and find a MWE! and no not using esnext.\n. Solved! It was caused by an empty switch {} statement.\nMWE:\n```\n/*\n * @class  SomeClass3\n * @namespace prefix\n * @extends prefix.SomeClass3\n /\nprefix.SomeClass3 = prefix.SomeOtherClass3.extend({\n/*\n   * Description\n   * @method construct\n   * @param {} args\n   * @return\n   /\n  construct: function(args) {\n    // bla\n  },\n/*\n   * Description\n   * @method handleEvent\n   * @param {} event\n   * @param {} sender\n   * @param {} args\n   * @return\n   /\n  handleEvent: function(event) {\n    if (true) {\n      switch (event) {\n  }\n}\n\n}\n});\n```\nComment and uncomment the switch statement at the bottom to get the error. JSCS in webstorm 10 DOES give another error if disallow Empty blocks is set to true, but IMO this should not happen still?\n. ",
    "gjuchault": "Note : I didn't make a mistake on the difference between line 44 and line=\"4\" and also for the column difference\n. \n. Indeed, in their documentation there is something about included css/js\nI didn't find any option so I guess it's enabled by default. I did check versions so I'll make an issue on their repo\n. ",
    "seriema": "I'm using 2.6.0 and it doesn't pick up the max errors on auto config from CLI, so I had to set it in the configure.json as the OP did.\n@hzoo maybe I'm reading the unit test wrong from your PR #1734 so I wrote some comments there. It seems to test maxError against 1 instead of -1?\n. Regular linting (I have a .jscsrc):\n```\n\njscs -m -1 ./\n.........\n4840 code style errors found.\n```\n\nAuto generate config:\n```\n\njscs -m -1 --auto-configure ./\nChecking C:....... against the presets\n   Preset           #Errors #Rules\n1  airbnb           50      8\n2  crockford        50      9\n3  google           50      7\n4  grunt            50      8\n5  idiomatic        50      9\n6  jquery           50      5\n7  mdcs             50      5\n8  node-style-guide 50      8\n9  wikimedia        50      7\n10 wordpress        50      5\n11 yandex           50      9\nPlease choose a preset number:\n```\n\nChanging configuration.js to have maxErrors: -1 as default (so console flag -m -1 isn't needed but I tried both just in case):\n```\n\njscs -m -1 --auto-configure ./\nor\njscs --auto-configure ./\n\nChecking C:...... against the presets\n   Preset           #Errors #Rules\n1  airbnb           5726    25\n2  crockford        4947    22\n3  google           6661    25\n4  grunt            6218    24\n5  idiomatic        5073    27\n6  jquery           7451    28\n7  mdcs             9938    19\n8  node-style-guide 6887    21\n9  wikimedia        9255    28\n10 wordpress        6612    28\n11 yandex           3921    20\nPlease choose a preset number:\n```\n. ",
    "jlmorgan": "There's no rush on this. I just disabled the config option for it in the mean time. The team will just police these manually.\n. ",
    "Yavanosta": "This problem is actual for some code reference too. For example this code trigger current rule.\n/**\n  * Some reference to object.method().\n  */\nfuntion method2() {\n}\nI think we have to check for space after a period, and only if it is to generate an error. I can make patch for it.\n. ",
    "fogrew": "The docs stated \"Boolean\"\n. But my question was about the \"false\"...\n. ",
    "regseb": "The commit messages are changed.\n. ",
    "acusti": "Yes, that seems to work. Is that expected?\nThe intersections of all the possible rules is mind-melting. You all do a really impressive job with this tool!\n. I\u2019ve also run into this issue with JSCS 3.0.5 and found a reduced test case that triggers the error:\njs\nexport default function openPage (state, payload = {}) {\n    const pageProps = {\n        ...payload,\n        focused: true\n    };\n    return state.concat(pageProps);\n}\nSpecifically, the error is triggered by adding the object spread (...payload,) to the object literal. I also noticed that the --fix part of the JSCS linter still works when it generates this error.\n\nAs an aside, I was saddened to learn that JSCS is being deprecated. Thanks so much to all the contributors for building such an immensely useful tool, and for leading the way in regards to implementing tools that accurately and safely auto-fix your code based on the linting rules of that code base.\n. Also, the stack trace:\ninternalError Error running rule requireDollarBeforejQueryAssignment: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nTypeError: Cannot read property 'name' of undefined\n    at /Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:142:30\n    at Array.forEach (native)\n    at Object. (/Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:139:23)\n    at Array.forEach (native)\n    at Object.JsFile.iterateNodesByType (/Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/js-file.js:331:42)\n    at Object.module.exports.check (/Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:72:14)\n    at [object Object]. (/Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/string-checker.js:189:22)\n    at Array.forEach (native)\n    at [object Object].StringChecker._checkJsFile (/Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/string-checker.js:185:31)\n    at [object Object].StringChecker.checkString (/Users/brandcast/.atom/packages/linter-jscs/node_modules/jscs/lib/string-checker.js:92:14)\n    at Object.lint (/Users/brandcast/.atom/packages/linter-jscs/src/linter-jscs.js:207:14)\n    at promises.push.Promise.then._this.emitter.emit.linter (/Users/brandcast/.atom/packages/linter/lib/linter-registry.js:63:26)\n    at /Users/brandcast/.atom/packages/linter/lib/linter-registry.js:62:23\n    at Set.forEach (native)\n    at LinterRegistry.lint (/Users/brandcast/.atom/packages/linter/lib/linter-registry.js:60:18)\n    at /Users/brandcast/.atom/packages/linter/lib/linter.coffee:98:16\n    at Function.module.exports.Emitter.simpleDispatch (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:25:14)\n    at Emitter.module.exports.Emitter.emit (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:125:28)\n    at /Users/brandcast/.atom/packages/linter/lib/editor-linter.js:30:20\n    at Function.module.exports.Emitter.simpleDispatch (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:25:14)\n    at Emitter.module.exports.Emitter.emit (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/event-kit/lib/emitter.js:125:28)\n    at TextBuffer.module.exports.TextBuffer.saveAs (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:1113:27)\n    at TextBuffer.module.exports.TextBuffer.save (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/text-buffer/lib/text-buffer.js:1083:19)\n    at TextEditor.module.exports.TextEditor.save (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/text-editor.js:660:26)\n    at Pane.module.exports.Pane.saveItem (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/pane.js:718:18)\n    at Pane.module.exports.Pane.saveActiveItem (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/pane.js:701:19)\n    at Workspace.module.exports.Workspace.saveActivePaneItem (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/workspace.js:684:35)\n    at atom-workspace.commandRegistry.add.core:save (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/register-default-commands.js:214:32)\n    at CommandRegistry.module.exports.CommandRegistry.handleCommandEvent (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/command-registry.js:260:29)\n    at /opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/command-registry.js:3:61\n    at KeymapManager.module.exports.KeymapManager.dispatchCommandEvent (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:580:16)\n    at KeymapManager.module.exports.KeymapManager.handleKeyboardEvent (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/node_modules/atom-keymap/lib/keymap-manager.js:388:22)\n    at WindowEventHandler.module.exports.WindowEventHandler.handleDocumentKeyEvent (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:98:36)\n    at HTMLDocument. (/opt/homebrew-cask/Caskroom/atom/1.0.2/Atom.app/Contents/Resources/app.asar/src/window-event-handler.js:3:61)at line 1 col 1\n. ",
    "fabslab": "I got around it for now by just having an empty object in a config file before I ran auto configure.\n. Was using a global jscs. Will try reinstalling tonight.\n. Yes but I'll close this until I can give more information. Thanks\n. ",
    "oliversalzburg": "Re-installing the package fixed it.\n. @mrjoelkemp Correct. I realized that the installed lodash dependency was missing a lot of files. Something must have went wrong during the initial installation of jscs. I cleared out my whole node_modules and ran npm i again.\n. @markelog 3.0.3\n. ",
    "simkessy": "I'm getting this issue after trying to update to 4.6.1. Not sure how to fix it\n. ",
    "homerjam": "+1\n. Possibly useful https://github.com/dsheiko/jscodesniffer/blob/b59cf8a7cad4259a5298421f28e192a6f6ab8643/lib/Sniff/SyntaxTree/ChainedMethodCallsPerLineConventions.js\n. ",
    "denim2x": "Towards an adequate resolution of this issue please take a look at the following:\n- Valid for true:\n``` javascript\nobject .field1\n  .method1()\n  .field2 .field3 method2\nmethod3;\nobject. field1.\n  method1().\n  field2. field3 method2.\n  method3;\n```\n- Invalid for true:\n``` javascript\nobject\n  .field1 .method1();\nvar result = object\n  .method1() .field1;\nobject.\n  method1()\n  .method2();\nobject\n  .method1()\n.method2();\n```\nThese may be similarly applied to a specific set of identifiers (such as 'then', 'catch' etc.)\n. I'm waiting for feedback on my previous comment; this feature can only be implemented after properly establishing all details. @gnarf Please take a moment to review my proposal and let me know if it's suitable.\n. ",
    "samthor": "Thanks! I can't merge this - can you do it? @markelog \n. @hzoo You presumably still have to merge my change, even if I'm waiting for the next release.\n. ",
    "ajoah": "If some people like me see this issue and doesn't understand why it doesn't work : it has been reverted because of #1907 \n. ",
    "bengourley": "@hzoo Thanks for the update. I tried this and it doesn't appear to have changed the behaviour in my case.\n. ",
    "jamesplease": "Thanks @hzoo! Sorry for the duplicate issue \u2013 I ran some searches and didn't find the original issue.\n. I don't foresee myself having time in the near future, but if I do then I would definitely like to figure out how to implement it.\n. I am not\n. Go for it!\n. ",
    "Awk34": "I'm having this issue also. I look forward to the next version bump! Thanks @hzoo :)\n. ",
    "Nargonath": "@jmeas Are you working on it at the moment?\n. @jmeas do you mind if I take a shot at it? Or do you prefer to save it for later?\n. @jmeas Alright, thanks.\n. Just to be sure I understand what you want in the rule, you want the rule to allow up to 2 line breaks?\nThese cases would be possible:\n- disallowMoreNewlinesPaddingInObjects: 1\n``` javascript\nView.myFunction({\n    prop1: function() {},\nprop2: function() {}\n\n});\n``\n-disallowMoreNewlinesPaddingInObjects: 2`\n``` javascript\nView.myFunction({\nprop1: function() {},\n\nprop2: function() {}\n\n});\n```\n. I'll try to submit a PR ASAP if that's ok.\n. Thank you for accepting the PR and for doing the \"beginner-friendly\" label. It was my first time contributing to OpenSource.\n. Thanks @allan-simon @Qix- ! \n. I'm the one who should thank you. That's really nice of you guys to do the \"beginner-friendly\" label. First time contributing to OpenSource project and it is easier than expected.\n. @hzoo Thank you. I'll stick around for sure.\n. @dharkness Are you working on a PR? \n. @dharkness Alright fair enough. I'll work on it then. Thanks :) If I'm too long providing it feel free to go for it.\n. Should I put no limit of line breaks if they precede a comment or add a parameter for it?\n. @dharkness Regarding the limit parameter I have no clue as well, I'll have to work it out. \nWhat type of comment do you use as separators? Something like below?\n``` javascript\nfunction doStuff() {\n}\n/////////////////////////////////////////////////////////////////////\nfunction doOtherStuff() {\n}\n```\nI don't know if Esprima parses different comment types. As I have grasp so far you have access to token.isComment but I don't know if it can be more granular. If not, I think it could be added during the tokens tree building as a sub-property however I'm not sure that it would be a desired feature. We would have to ask to the maintainers.\n. @dharkness I'm not sure that you have access to the line input be it parsed or raw. I'm going too look what we have at hand. \n. @dharkness Well in the rule check() method you have access to the lines array and in the token you have access to the line and column coordinate. It would be possible to check the beginning of a comment to see if it contains the prefix. So you'd want to have prefixes/regular expressions that match the comment line where you want the exception to be taken into account?\n. After talking with @hzoo and @markelog, we agreed that unlimited line breaks before comments would be worthless. Your suggestion of adding parameters for number of line breaks and regexp is definitely better. We think however that the need behind this new behavior is too specific to your projects, hence it would be better suited as a project rule rather than a global modification of the library.\nIf you want to go down this road, here is an example that could be useful.\nThe issue will be closed but feel free to comment if you disagree or would like to add something. Discussions are always welcome.\n. @dharkness You are welcome. Your suggestion helped me to improve my comprehension of the lib.\nHave a good evening/day. ;)\n. ",
    "rdebeasi": "I'd love to help, but I am totally new to jscs development. Here's roughly what I'm thinking:\n- In the fixString function in string-checker.js, remove the line that wipes out fixed errors: errors = new Errors(file, this._verbose);\n- In reporters, look at the .fixed property of each error to decide whether to output it. Some reporters could output each fixed error, while other reporters could report the number of fixed errors.\nAlternately, we could filter out the fixed errors before they get to the reporter, and just provide the reporter with the number of fixed errors.\nDoes this approach sound reasonable? Feel free to let me know if I'm totally off base here. :smiley: \n. ",
    "lukebennett": "Yep, agree with the need to change this rule.\n. ",
    "bturk": "Another +1.\nWhen you implement don't forget you can't just look for braces:\nfor (let item in obj) and  for (let i = 0; i < len; i++) are implicitly block scoped.\n. No big rush, I've been doing JavaScript for a long time so it's not very natural to me to put variables anywhere else, let will take some getting used to.\nActually, now that I've thought about it, I'm surprised this rule gets triggered at all.  Seems it would specifically be looking for var.  Just  a suggestion, it's your product and it's a good one but I'd split the rule.\nrequireVarDeclFirst - only look at var\nrequireLetDeclFirst - only look at let/const and at block level\n. That would work for me.  I could remove the override comments and add the new rule later if you do it that way.\n. Yes, that's what I am using now, just would be a nice to have feature to only check variables being created vs being used.\n. I'll take a look this weekend, just looked at the code for the rule, looks like there is a bit of a learning curve to go though.\n. So...very...disappointing.  I'm not sure that ESLint is going to benefit from getting a crew that abandons a project with many hundreds of open and ignored issues.   Not good news for the ESLint crew as I see it.\n. ",
    "tbandixen": "Changing the encoding of the .jscsrc file to \"UTF-8 without BOM\" solved it for me.\n. ",
    "marian-r": "There was a trailing whitespace. Will see if it passes now.\n. ",
    "canac": "@markelog You are right, when using inCallExpressions, JSCS no longer emits any warnings. My original concern was that there is no reasonable way to the format code in the example I provided. Then I realized that I should really be adding another level of indentation, like this:\n``` javascript\nfunc(\n  function(response) {\n    console.log(response);\n  },\n{\n    a: 1,\n    b: 2,\n    c: 3,\n  }\n);\n```\nInstead of this:\njavascript\nfunc(function(response) {\n  console.log(response);\n}, {\n  a: 1,\n  b: 2,\n  c: 3,\n});\nSince I shouldn't really be writing code using the latter format, it makes sense that JSCS doesn't really support that format. Thanks for your help and for making such a useful tool!\n. ",
    "vizath": "It's working well with esprima-fb\n. Actually, esprima-fb is working on the test case, but not on my project because of #1591.\nAfter changing a couple of files, its wokring as expected with esprima.\n. ",
    "nantunes": "@markelog I've installed jscs-preset-pentaho globally, so I don't need to install it locally in every project.\nWithout my patch doing jscs . results in:\nPreset \"pentaho\" does not exist\nOutputing the exception reveals:\n[Error: Cannot find module 'jscs-pentaho' from '/Users/nantunes/dev']\n[Error: Cannot find module 'jscs-preset-pentaho' from '/Users/nantunes/dev']\n[Error: Cannot find module 'jscs-config-pentaho' from '/Users/nantunes/dev']\nWith my patch it does find it. However I noticed now that it does so because it starts looking from /usr/local/lib/node_modules/jscs/lib.\nSo this is in fact related to substack/node-resolve#68, not JSCS. Sorry.\nShould I close the PR or keep it as a pending issue?\n. Ok.\n. ",
    "danielstjules": "Config I'm using:\njavascript\n{\n  \"disallowEmptyBlocks\": true,\n  \"disallowMixedSpacesAndTabs\": true,\n  \"disallowSpaceBeforeComma\": true,\n  \"disallowSpaceBeforeSemicolon\": true,\n  \"disallowTrailingWhitespace\": true,\n  \"disallowTrailingComma\": true,\n  \"disallowSpacesInsideParentheses\": true,\n  \"requireCapitalizedConstructors\": true,\n  \"requireLineFeedAtFileEnd\": true,\n  \"requireSemicolons\": true,\n  \"requireSpaceBetweenArguments\": true,\n  \"disallowYodaConditions\": [\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n  ],\n  \"requireSpaceAfterKeywords\": [\n    \"do\",\n    \"for\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"try\",\n    \"catch\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"return\",\n    \"typeof\"\n  ],\n  \"excludeFiles\": [\n    \"path/to/file.js\"\n  ]\n}\nUnfortunately, --verbose doesn't seem to reveal much:\n```\n\njscs --verbose test lib scripts\n\nTypeError: Cannot read property 'isEmpty' of null\n    at /Users/dstjules/git/project/node_modules/jscs/lib/reporters/console.js:10:20\n    at Array.forEach (native)\n    at Object.module.exports [as writer] (/Users/dstjules/git/project/node_modules/jscs/lib/reporters/console.js:9:22)\n    at /Users/dstjules/git/project/node_modules/jscs/lib/cli.js:151:18\n    at Array. (/Users/dstjules/git/project/node_modules/jscs/node_modules/vow/lib/vow.js:711:56)\n    at Immediate.callFns [as _onImmediate] (/Users/dstjules/git/project/node_modules/jscs/node_modules/vow/lib/vow.js:23:35)\n    at processImmediate [as _immediateCallback] (timers.js:357:17)\n```\n. That fixed it, thank you! :)\n. ",
    "davidrapin": "@hzoo This behavior is confusing and does not look like a real-world use-case.\nMy understanding of the rule: disallowSpaceAfterObjectKeys: { allExcept: ['aligned'] } is:\n\"disallow all spaces after object keys except when keys are aligned\".\nSo no space before the key should always be valid when using disallowSpaceAfterObjectKeys. Would that not be a saner implementation?\n. I believe the error in the implementation of aligned is to exclusively allow aligned : after keys, where the intent of the configuration (disallowSpaceAfterObjectKeys) is to disallow spaces between the key and :.\naligned should allow:\n- no spaces between object keys and : for the whole object\n- all : space-aligned after object keys for the whole object \n. Thank you for this fix!\n. Perfect :) thanks!\n. @dreef3, restricting aligned to aligned-only is not acceptable solution imho. As I explain in #1818, this would not be consistent with the semantic of the allExcept\u00a0option. \nIn this case the user wants to disallow all spaces between the key name and :, except when the : are aligned.\nReal-world cases are mostly mixed between cases where colons are aligned and cases without spaces before keys at all because aligning colons wouldn't make sense in that particular case.\nIs there a particular difficulty in implementing this?\n. @dreef3 sorry, I misunderstood the issue. \nI'm actually okay with example (1) being invalid (\"no space allowed after key\"), example (2) being valid (reason behind #1818) and example (3) being valid (no regression). \n. Same error here:\n```\nError running rule jsDoc: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nTypeError: Cannot read property 'toLowerCase' of undefined\n    at jsDocMatchType (/Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/jsdoc.js:544:24)\n    at DocType.match (/Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/jsdoc.js:171:16)\n    at /Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/rules/validate-jsdoc/check-return-types.js:23:23\n    at Array.forEach (native)\n    at Object.checkReturnTypes (/Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/rules/validate-jsdoc/check-return-types.js:22:31)\n    at /Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/rules/validate-jsdoc.js:145:27\n    at Array.forEach (native)\n    at DocComment. (/Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/rules/validate-jsdoc.js:144:46)\n    at Array.forEach (native)\n    at DocComment.forEachTag [as iterate] (/Users/david/Code/linkurious-server/node_modules/grunt-jscs/node_modules/jscs/node_modules/jscs-jsdoc/lib/jsdoc.js:86:19) at ./test/data/graph/GraphSetup.js :\n     1 |/**\n--------^\n     2 | * LINKURIOUS CONFIDENTIAL\n     3 | * Copyright Linkurious SAS 2012 - 2015\n\n\n1 code style errors found!\nWarning: Task \"jscs:src\" failed. Use --force to continue.\n```\n. \n\n",
    "thorn0": "After adding \"validateIndentation\": 4, the output is still invalid.\n. ",
    "al-broco": "Sorry if I was unclear. This is a problem with the documentation, not the code, so there is no error.\nI am wondering if it would be possible to add something to the documentation that clearly states what parts of the programmatic interface that are part of the public API? When I say \"public API\", I mean public  API according to the http://semver.org:\n\"Software using Semantic Versioning MUST declare a public API. This API could be declared in the code itself or exist strictly in documentation. However it is done, it should be precise and comprehensive.\"\nJSCS uses semver, and there is a section \"Versioning & Semver\" in the JSCS documentation with details.\nFor projects that have a dependency on JSCS and that use the programmatic interface it would be really useful to know what parts of the programmatic interface that are parts of the public API.\n. ",
    "jcrugzz": "@zxqfox i feel that its safe to disable on windows if it can be checked that auto.crlf = true. This would solve the use case I have where multiple contributors to projects running different machines will all link properly based on the universal style guide that leverages this\n. ",
    "samarpanda": "@hzoo Can i work on this feature?\n. {\n  \"disallowSpaceBeforeMemberExpression\": true,\n  \"disallowSpaceAfterMemberExpression\": true\n}\n. var foo = function(){console.log('foo');};\nfoo.prototype.boo = function(){console.log('boo');};\nvar obj = new foo();\nobj . boo();\nobj ['boo']();\nWondering if we have to consider both MemberExpressions here i.e obj . boo and obj ['boo']?\n. ",
    "MichaelHazani": "@samarpanda : are you working on this? I have some time off and was considering giving this one a go.\n. @hzoo , I went ahead and took the initiative on this (one catchall rule for the aforementioned cases). I'm close to sending a PR, but my tests are failing with about 6 of these:\n```\n  1) rules/disallow-spaces-around-property-accessors should report space found near period accessor:\n     AssertionError: Expected error rules \"\" to equal \"disallowSpacesAroundPropertyAccessors\"\nAll errors:\n - : Unsupported rule: disallowSpacesAroundPropertyAccessors\n      at Context. (test/specs/rules/disallow-spaces-around-property-accessors.js:15:10)\n```\nIs \"unsupported rule\" a normal error until it's implemented? Or am I missing something? I created the rule (per the instructions) in /lib/rules and the respective test in /test/specs/rules...\nThanks, and please bear with me as this is literally my first \"IRL\" PR;)\n. ",
    "mborman": "I tried jscs src/**/*.js. Same issue. I'll try to find some time to dig into it in the next week or two.\n. Just noticed the comment from @markelog .  I will try that first.  Maybe there is something wonky in my project.\n. ",
    "gajus": "The problems that table package fixes (https://github.com/Automattic/cli-table/issues/35, https://github.com/Automattic/cli-table/issues/8, https://github.com/Automattic/cli-table/issues/10, https://github.com/Automattic/cli-table/issues/64) do not effect, as far as I can tell, JSCS use case. However, table does not have these problems to begin with.\n. ",
    "irengrig": "I'm really sorry, but now it just works ok. Checked with several projects.\nSeems to have been some local problem.\n. ",
    "marcinpl87": "I reproduced this issue with grunt-jscs 2.1.0 and grunt-jscs 1.8.0 . Now I have v1.8.0 so npm ls | grep jscs returns:\n\u251c\u2500\u252c grunt-jscs@1.8.0\n\u2502 \u251c\u2500\u252c jscs@1.13.1\n\u2502 \u2502 \u251c\u2500\u2500 esprima-harmony-jscs@1.1.0-bin\nthis is my .jscsrc file:\n```\n{\n    \"esnext\": true,\n    \"esprima\": \"esprima-fb\",\n\"requireCurlyBraces\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\"\n],\n\"requireSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"case\",\n    \"return\",\n    \"try\",\n    \"catch\",\n    \"function\",\n    \"typeof\"\n],\n\"requireSpaceBeforeBlockStatements\": true,\n\"requireParenthesesAroundIIFE\": true,\n\"requireSpacesInConditionalExpression\": true,\n\"disallowSpacesInNamedFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true\n},\n\"disallowSpacesInFunctionDeclaration\": {\n    \"beforeOpeningRoundBrace\": true\n},\n\"disallowMultipleVarDecl\": true,\n\"requireBlocksOnNewline\": 1,\n\"disallowEmptyBlocks\": true,\n\"disallowSpacesInsideArrayBrackets\": true,\n\"disallowSpacesInsideParentheses\": true,\n\"disallowSpaceAfterObjectKeys\": true,\n\"requireCommaBeforeLineBreak\": true,\n\"disallowSpaceAfterPrefixUnaryOperators\": true,\n\"disallowSpaceBeforePostfixUnaryOperators\": true,\n\"disallowSpaceBeforeBinaryOperators\": [\n    \",\"\n],\n\"requireSpaceBeforeBinaryOperators\": true,\n\"requireSpaceAfterBinaryOperators\": true,\n\"requireCamelCaseOrUpperCaseIdentifiers\": true,\n\"disallowKeywords\": [ \"with\" ],\n\"disallowMultipleLineBreaks\": true,\n\"validateQuoteMarks\": \"\\\"\",\n\"validateIndentation\": 4,\n\"disallowMixedSpacesAndTabs\": true,\n\"disallowTrailingWhitespace\": true,\n\"disallowTrailingComma\": true,\n\"disallowKeywordsOnNewLine\": [ \"else\" ],\n\"requireLineFeedAtFileEnd\": true,\n\"requireCapitalizedConstructors\": true,\n\"disallowYodaConditions\": true,\n\"disallowNewlineBeforeBlockStatements\": true,\n\n\"maximumLineLength\": 120\n\n}\n```\nEDIT:\nI have\n\"disallowSpaceBeforeBinaryOperators\": [\",\"]\ndefined, because I'd like to disallow code like:\n{\n   foo: true ,\n   fo: false ,\n   bar: true\n}\nand force writing comma after object value.\nBut in the same time it will be great to write\n{\n    foo: `t.${token}.errors.${error}`,\n    bar: true\n}\nwithout an \"Operator , should stick to previous expression\" error.\n. I have \"esprima\": \"esprima-fb\" in my jscsrc file to properly lint react components. But I updated it:\n-    \"esprima-fb\": \"^10001.1.0-dev-harmony-fb\",\n+    \"esprima-fb\": \"^15001.1001.0-dev-harmony-fb\",\nand when I run npm install and grunt jscs , the code\n{\n    foo: `t.${token}.errors.${error}`,\n    bar: true\n}\nis linted without errors :smiley: :smiley: :smiley: \nBIG THANKS for help!\n. ",
    "ValYouW": "done :)\n. Ahh, sorry for all the commits mess...\nCreated a PR #1849 (with tests) lets discuss it there...\n. Done. My repo was a mess, I hope I did it right... lgtm.\n. Something like that: https://github.com/ValYouW/node-jscs/commit/989c319560094d7fa96a644bc7dc4c142c59776f\nAdd support for a strict option, if it is false then named function expression are allowed, for example the following is all valid if strict = false:\njs\nvar a = function() {}\nmodule.exports.coo = function() {}\nvar Obj = {\n doo: function() {} \n}\nObj.eoo = function() {}\n. Great thx!\nI searched for all the rules with Anonymous...\n. Well, I practiced my rule writing skills :)\n. Yes, thx! \n. ",
    "paladox": "Well to support the latest node js release.\n. Ok.\n. It works now.\n. @diffsky see https://twitter.com/seldo/status/712414588281552900\n. ",
    "artptr": "There is an error when this code is analyzed:\nexport function foo() {\n    let a, b;\n    [a, b] = [1, 2];\n}\nIt says:\nTypeError: Cannot read property 'name' of undefined\n    at Object.<anonymous> (.../node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:130:53)\n    at Array.forEach (native)\n    at Object.JsFile.iterateNodesByType (.../node_modules/jscs/lib/js-file.js:545:42)\n    at Object.module.exports.check (.../node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:72:14)\n    at null.<anonymous> (.../node_modules/jscs/lib/string-checker.js:165:22)\n    at Array.forEach (native)\n    at StringChecker._checkJsFile (.../node_modules/jscs/lib/string-checker.js:161:31)\n    at StringChecker.checkString (.../node_modules/jscs/lib/string-checker.js:106:14)\n    at null.<anonymous> (.../node_modules/jscs/lib/checker.js:45:21)\n    at Array.<anonymous> (.../node_modules/jscs/node_modules/vow/lib/vow.js:711:39) at test.js :\n     1 |export function foo() {\n--------^\n     2 | let a, b;\n     3 | [a, b] = [1, 2];\n. ",
    "gmoulin": "The command is working with jscs --auto-configure path format.\n. on Windows using cygwin\nnode v0.12.7\njscs 2.3.0\n. I tested with the command line (jscs directly), vim syntastic, grunt and gulp. Same result each time.\nMy .jscsrc, I am in fine tuning it so maybe some rules combinations are creating this result:\njson\n{\n    \"disallowArrowFunctions\": true,\n    \"disallowEmptyBlocks\": true,\n    \"disallowFunctionDeclarations\": true,\n    \"disallowImplicitTypeConversion\": [\"numeric\", \"boolean\", \"binary\"],\n    \"disallowKeywordsInComments\": true,\n    \"disallowKeywordsOnNewLine\": [\"else\"],\n    \"disallowMixedSpacesAndTabs\": true,\n    \"disallowMultipleLineStrings\": true,\n    \"disallowMultipleSpaces\": true,\n    \"disallowNamedUnassignedFunctions\": true,\n    \"disallowNewlineBeforeBlockStatements\": true,\n    \"disallowNodeTypes\": [\"LabeledStatement\"],\n    \"disallowOperatorBeforeLineBreak\": true,\n    \"disallowPaddingNewlinesInBlocks\": { \"allExcept\": [\"conditionals\"] },\n    \"disallowParenthesesAroundArrowParam\": true,\n    \"disallowSpaceAfterKeywords\": [\n        \"if\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"switch\",\n        \"try\",\n        \"catch\"\n    ],\n    \"disallowSpaceAfterObjectKeys\": true,\n    \"disallowSpaceAfterPrefixUnaryOperators\": true,\n    \"disallowSpaceBeforeComma\": true,\n    \"disallowSpaceBeforePostfixUnaryOperators\": true,\n    \"disallowSpaceBeforeSemicolon\": true,\n    \"disallowSpacesInAnonymousFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInCallExpression\": true,\n    \"disallowSpacesInFunctionDeclaration\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInFunction\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInNamedFunctionExpression\": {\n        \"beforeOpeningRoundBrace\": true,\n        \"beforeOpeningCurlyBrace\": true\n    },\n    \"disallowSpacesInsideParentheses\": { \"only\": [\"{\", \"}\", \"\\\"\", \"'\"] },\n    \"disallowTrailingComma\": true,\n    \"disallowTrailingWhitespace\": true,\n    \"disallowYodaConditions\": true,\n    \"maximumLineLength\": {\n        \"value\": 160,\n        \"allExcept\": [\"regex\", \"comments\"]\n    },\n    \"maximumNumberOfLines\": 2000,\n    \"requireAnonymousFunctions\": true,\n    \"requireBlocksOnNewline\": true,\n    \"requireCamelCaseOrUpperCaseIdentifiers\": \"ignoreProperties\",\n    \"requireCapitalizedConstructors\": {\n        \"allExcept\": [\"somethingNative\"]\n    },\n    \"requireCurlyBraces\": true,\n    \"requireDollarBeforejQueryAssignment\": true,\n    \"requireDotNotation\": { \"allExcept\": [\"snake_case\", \"keywords\"] },\n    \"requireLineBreakAfterVariableAssignment\": true,\n    \"requireOperatorBeforeLineBreak\": [\n        \"?\",\n        \"=\",\n        \"==\",\n        \"===\",\n        \"!=\",\n        \"!==\",\n        \">\",\n        \">=\",\n        \"<\",\n        \"<=\"\n    ],\n    \"requirePaddingNewLinesAfterUseStrict\": true,\n    \"requireParenthesesAroundIIFE\": true,\n    \"requireSemicolons\": true,\n    \"requireSpaceAfterKeywords\": [\n        \"else\",\n        \"case\",\n        \"void\",\n        \"return\"\n    ],\n    \"requireSpaceBeforeKeywords\": [\n        \"else\",\n        \"while\",\n        \"catch\"\n    ],\n    \"requireSpaceBeforeObjectValues\": true,\n    \"requireSpaceBetweenArguments\": true,\n    \"requireSpacesInConditionalExpression\": true,\n    \"requireSpacesInForStatement\": true,\n    \"requireSpacesInsideArrayBrackets\": {\n        \"allExcept\": [\"\\\"\", \"'\"]\n    },\n    \"requireSpacesInsideObjectBrackets\": {\n        \"allExcept\": [\"{\", \"}\", \"(\", \")\", \"\\\"\", \"'\"]\n    },\n    \"requireSpacesInsideParenthesizedExpression\": {\n        \"allExcept\": [\"{\", \"}\", \"function\", \"\\\"\", \"'\"]\n    }\n}\n. ",
    "chaucerbao": "I'm using JSCS 2.3.0.\nMy config is here, but you can simply use:\njson\n{\n  \"requireLineBreakAfterVariableAssignment\": true\n}\njavascript\n// test.js\nvar a=1;var b=2;\n``` sh\n$ jscs --version\n2.3.0\n$ jscs -x test.js\nVariable assignments should be followed by new line at test.js :\n     1 |var a=1;var b=2;\n---------------^\n     2 |\n1 code style error found.\n$ cat test.js\nvar a=1;var b=2;\n$\n```\n. ",
    "yodairish": "version: 2.3.2\nyup, esnext is on\n{\n  \"esnext\": true,\n  \"excludeFiles\": [\n    \"node_modules/**\"\n  ],\n  \"disallowUnusedParams\": true\n}\n. ",
    "sivakumar-kailasam": ":+1:  Sure! \n. @hzoo if you have the time, could you review this and let me know if this needs improvement :smile: \n. Glad I could help :smile: \n. ",
    "allan-simon": "@Nargonath  : awesome, keep contributing like that :) :+1: \n. ",
    "Francisc": "I noticed that the same setting also indicated that function test is wrong and there should be no space between function and test.\nUnexpected whitespace between function and test at ...\n. Thanks for the super-quick fix, Henry.\n. By the way, the opposite rule's (requireSpaceAfterKeywords) \"Valid\" example is kind of stupid:\nreturn true;\nI mean, return true; as opposed to what? returntrue; haha.\n. Thanks again.\n. I'll take a look now. Thanks.\n. Also, is there anyway to prevent IIFEs having to be named?\nSo for example (function(){})() isn't reported as invalid?\n. Sounds like a good idea to me.\nThanks.\n. Hm, the shorthand thing isn't very accurate though.\nThat's the way class methods are defined in ES2015, there's no longer way to do it.\nAnd besides, getName() is named, it's not anonymous.\n. Ah, OK. Sorry, misunderstood.\n. OK, I'll send an updated PR in a moment.\n. Newline char is allowed by this rule.\nWhich makes sense since I'm looking to disallow the space and tab chars.\nDo you want me to add a test that validates that newline characters are OK?\n. Hope this is better.\nI've also updated the tests for disallowSpaceBeforeComma.\n. Alright, thanks.\n. I did read the CONTRIBUTING.md file! :)\nThanks for the http://astexplorer.net, didn't know about it.\nShould come in handy.\n. Ah, should have prefixed it with Fix, sorry.\n. You're right, \"Docs\" is better.\n. Or maybe a rule requiring a newline char after opening curly brace and before closing curly brace?\n. Hm, not sure I understand what you mean by that link.\nIt seems to be a JSON validator and all 3 forms of obj I posted above are valid JSON.\n. I want to disallow a code-style choice rather than a code validity one.\n. To give an example:\nThis should not be allowed for true:\n[, , ,]\n. Yeah, there should be no spaces after or before commas if this rule is enabled.\n. Oups, GitHub is awful with notifications.\nSure. I'll give it a shot soon.\n. Would you say this rule also needs both before and after rules?\nI was thinking that it could just take a boolean and enforce no spaces before.\nFor example, this would be valid:\nJavaScript\nfunction* aGenerator(){}\nAnd this would be invalid:\nJavaScript\nfunction * aGenerator(){}\nIf you think we should allow this rule to validate / invalidate this as well, let me know, although I believe it shouldn't be allowed:\nJavaScript\nfunction*aGenerator(){}\n. I don't understand.\nrequireSpacesInGenerator takes an object which conditions spaces before and after the asterisk.\nMy proposal was to have the opposite rule, disallowSpacesInGenerator, only take a boolean value which checks spaces before the asterisk, since it doesn't really make sense to not have a space after it.\n. I agree with that.\nArguably, the requireSpacesInGenerator should only require them before.\nSeems silly to require them after.\nIt's like saying function name(){} is valid for a require-spaces rule and functionname(){} is valid for a disallow-spaces rule.\n. OK, I'll make disallowSpacesInGenerator take an object, just like requireSpacesInGenerator.\n. Done.\n. Not sure why, it's got double the tests of requireSpacesInGenerator.\nAny ideas?\n. That throws an ugly error on my machine.\nMy guess is that is caused by the fact that configuration.js got a new line to include the new rule and the spec for it is unchanged.\n. Sure:\n```\nevents.js:141\n      throw er; // Unhandled 'error' event\n      ^\nError: spawn node_modules/.bin/mocha ENOENT\n    at exports._errnoException (util.js:860:11)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:178:32)\n    at onErrorNT (internal/child_process.js:344:16)\n    at doNTCallback2 (node.js:450:9)\n    at process._tickCallback (node.js:364:17)\n``\n. Still, isn't it normal to get a lower coverage sinceconfiguration.jsgot a new line of text?\n. 1. It does happen on master. I'm on Windows 8.1 running Node 5.0.\n   It's probably a dependency of unit-coverage that fails on Windows.\n2. I don't understand why that is, thedisallowSpacesInGeneratoris almost identical torequireSpacesInGeneratorand has double the tests since I check each of the 2 params set totrue` separately.\n. Hi @mdevils. Thank you.\n@markelog What's next for this PR?\n. Thanks, didn't realize it was merged.\nI would like to help with the require rule, but I can't give a proper ETA (disable took me more than it should have), so I'll have to pass this time.\n. ",
    "ficristo": "@zxqfox I was thinking to a whitelist of tags, but actually maybe to strip the html is easier/cleaner.\n. This should have been fixed by https://github.com/jscs-dev/jscs-jsdoc/pull/186.\nI didn't check; I'll open new issues if I'll find problems.\n. ehm... actually the tag was @example:, note the colon at the end.\nIf I remove the colon it works as expected.\n. Sorry I should have be clearer. I'm am not interested in the operators but in the curly bracket.\nUsually I want it on the same line of the round bracket but when the conditions are on different lines (that was what I meant with too long...) they should be on a new line.\nSo if I write the if like this:\njavascript\nif (a==b &&\n    b==c)\nthe curly bracket should be on new line:\njavascript\nif (a==b &&\n    b==c)\n{\nPlease reopen.\n. @markelog I have some trouble to run npm test on my windows machine so If I resolve them maybe I can take a look in the future.\n. Initially I thought to implement this as an exception for both disallowNewlineBeforeBlockStatements and requireNewlineBeforeBlockStatements, but maybe it is confusing?\nIf I'll implement this with a new rule how should it interact with the previous disallowNewlineBeforeBlockStatements and requireNewlineBeforeBlockStatements?\n@markelog \n. @markelog @hzoo gentle ping for previous comment.\n. Any ideas for the prevoius comments?\n. Is there an api to get the position of the round braces?\nI tried something like this but seems very fragile...\n``` javascript\nfile.iterateNodesByType(['BlockStatement', 'ClassBody'], function(node) {\n    var prevToken_ = file.getFirstNodeToken(node);        // {\n    var prevToken2_ = file.getPrevToken(prevToken_);      // )\nvar parentNode = node.parentNode;\nvar nextToken_ = file.getFirstNodeToken(parentNode);  // function\nvar nextToken2_ = file.getNextToken(nextToken_);      // foo\nvar nextToken3_ = file.getNextToken(nextToken2_);     // (\n\n});\n```\nThe code tested was this:\njavascript\nfunction foo()\n{\n    var str = \"\";\n};\n. > Will fail for if...else without the function scope -\nAny downside to leave as is? If not I'll add some tests, otherwise which downside are there?\n. I still didn't change the value to be a boolean because I've implemented the disallow else after return part but not the require early return one.\n. This should pass, ATM it fails.\njavascript\nfunction foo() {\n  if (x) {\n    bar();\n  } else if (z) {\n    return \"foo\";\n  } else {\n    baz(); \n  }\n}\nNeed to look at it.\n. To solve the last problem i need to trasverse the tree in backwards orders.\nIf I'm in the else if I need to look at the previous if.\n@markelog Is there an API for it?\n. @bjdixon Thank you.\nI've update the PR with the fix and a couple of test.\n. I've updated the PR.\n. Now with a boolean value.\n. I've found that the column reported was wrong, now should correct.\nOr at least I've copied the check from disallow-curly-braces file but I've found that for code like the following isn't exact:\njavascript\n} // <-- There is a space after the brace.\n  else\n       {\nThe error is reported after the space after the first brace.\nMaybe for another PR.\n. I was trying to special case the else condition, but I found even the following snippet is failing.\nI cannot find a clean solution.\njavascript\nf();\ntry {\n} catch (e) {\n    f();\n} finally {\n}\n. I was trying to special case the else condition, but I found even the following snippet is failing.\nI cannot find a clean solution.\njavascript\nf();\ntry {\n} catch (e) {\n    f();\n} finally {\n}\n. I thought it was wanted some stricted behaviour, so this is to be open to add other options (eg 'strict'). Happy to change to be a boolean value.\n. Function to check:\njavascript\nfunction isPercentage(val) {\n  if (val >= 0) {\n    if (val <= 100) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\nWith requireEarlyReturn: 'noElse':\njavascript\nfunction isPercentage(val) {\n  if (val >= 0) {\n    if (val <= 100) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\nWith requireEarlyReturn: 'strict' // or true:\n``` javascript\nfunction isPercentage(val) {\n  if (val < 0) {\n    return false;\n  }\nif (val > 100) {\n    return false;\n  }\nreturn true;\n}\n```\n. Done.\n. I changed the hasMultiLineEx condition to use it. I think is enough.\n. ",
    "JGulbronson": "This is more a validateFunctionDefinitionIndentation rule... I don't think it's really covered by existing rules, and I know at work we found it quite useful to have. Plus the fact it's indentation means it can get automatically fixed, which is great (amazing job on that).\nHow would you recommend I proceed? It seems like that issue you referenced has a lot of stuff rolled up in to one, but this would be a more targeted PR.\n. That'd actually be a combination of two rules\nvalidateAlignedFunctionParameters: true would make sure the parameters and parens are each on their own line.\nThe proposed new rule, requireAlignedMultilineParams: true would check that the parameters are aligned with the body of the function. In your example, they are, and it'd pass!\nI think it'l compliment the existing rules well, and hope to have a PR up during this week.\nIf you're not sure about the different options, I'd love to hear any suggestions. (I'm not 100% on them myself, definitely seeking a second opinion)\n. @hzoo I see you added the 2.4.0 milestone to this. What are the next steps I have to take to make sure it makes it in to that release?\n. I'd lean towards leaving it as is, since I don't see the benefit of switching to is-my-json-valid for this particular case. What do you think is the main benefit of switching here?\n. Added!\n. In that case, I'd prefer to leave it as is. The tests/logic is already done, and I don't think this is the best example to use it in. Here, we're only validating the type/value of the option parameter. It would feel like overkill to use that library in this scenario, as we're not checking JSON.\n. ",
    "cybermerlin": "good\n. about test - not know\n. i do it\nhttps://github.com/jscs-dev/node-jscs/pull/1914\n. I have this trouble if run\njscs --fix file.js\nwith this config:\n```\n{\n    \"preset\": \"crockford\",\n\"validateIndentation\": 2,\n\"validateIndentation\": { \"value\": \"\\t\" },\n\"disallowCommaBeforeLineBreak\": false,\n\"requireCommaBeforeLineBreak\": false,\n\"requireSpaceBeforeBinaryOperators\": true,\n\"requireSpacesInsideArrayBrackets\": { \"allExcept\": [ \"[\", \"]\", \"{\", \"}\" ] },\n\"disallowMixedSpacesAndTabs\": true,\n\n\"disallowSpaceAfterObjectKeys\": { \"value\": true, \"allExcept\": [ \"singleline\",\"aligned\" ] },\n\"requireAlignedObjectValues\": \"all\",\n\n\"disallowAnonymousFunctions\": false,\n\"disallowFunctionDeclarations\": false,\n\"requireSpacesInAnonymousFunctionExpression\": false,\n\"disallowShorthandArrowFunctions\": false,\n\"disallowUnusedParams\": true,\n\n\"requireSpaceBeforeObjectValues\": null,\n\"disallowDanglingUnderscores\": false,\n\"requireSpaceAfterKeywords\": null,\n\"requireSpaceBeforeBlockStatements\": null,\n\"requireSpaceAfterBinaryOperators\": true,\n\"requireVarDeclFirst\": true,\n\"disallowMultiLineTernary\": false,\n\"maximumLineLength\": 80,\n\"disallowCurlyBraces\": [\n    \"if\",\n    \"else\",\n    \"while\",\n    \"for\",\n    \"do\",\n    \"with\"\n]\n\n}\n```\n. I can help fix it if you say in what file\n. i did it\n. or I do not know how to do it\n. last comma - bad taste\n. - #1912\n. yep\nif single line then not need check padding\n. wath u mean\n. it's right, because it was wrong\n. ",
    "dharkness": "+1 for ignoring usage as above and when calling functions. Ideally, I just want to see the source of the problem flagged--the declaration. All other references follow from it.\n. Wouldn't it be easier to ignore function/constructor calls entirely and flag them only at the declaration? Since the calls must match the declarations, it's better to flag the source of the problem (declaration). And if you ignore it for a single function, you don't have to ignore it at each call.\nThis is hitting me with some jQuery \"constructors\" such as $.Deferred() which do not use new and so won't be detected as a constructor.\n. I recreated the change in a new branch with a new pull request that matches the commit message format.\n. 1. Should I remove deprecated types? (String in this case)\n2. Which style of listing three or more types do you prefer?\n   - Boolean, String or Object (commas)\n   - Boolean or String or Object (multiple \"or\"s)\n3. Any preference for ordering the types?\n   - match the values list\n   - alphabetical\n   - some other strict ordering\n. From chat with @markelog \n1. No, leave deprecated types in the list\n2. Use the comma option (first)\n. @Nargonath No, I was starting by submitting bugs and feature requests while checking out JSCS. :) If I can put some time into it I'll let you know before I start. Otherwise feel free to take it.\n. @Nargonath Ideally it would have its own parameter as unlimited is decidedly uncool. ;) But I don't know how you'd specify that given @markelog's desire to use allExcept: ['beforeComment'].\nI've been thinking about this more, and the main problem is that we don't want to allow multiple blank lines before JSDoc comments--just these funky separators. But now it starts getting a bit extreme to have a setting for each type of construct that could follow.\nWhat do you think would work best?\n. @Nargonath Yes, a // line comment. Of course, just to complicate things  I don't want to allow the extra space before all line comments.\nHow about a line prefix instead? This would allow extra space before nearly any type of line you can think of. Do you get the raw line input, or is it a parsed token string? Even if the latter, as long as you get the comment text it could work. An array of prefixes and/or regular expressions would give a lot of flexibility. \n. @Nargonath I fully agree, and in fact this is used in only one of our files as it is the global module that provides commonly used helpers that are too varied to break into their own modules.\nAt first it seemed more useful (I've seen it done in countless languages over the decades), but honestly I think of it as a bit of an anti-pattern.\nThat being said, love the code you have, right? Thanks for your help, and I'll take a look at your link. Cheers!\n. ",
    "lf94": "If this could be added to the \"disableTrailingComma\" documentation that would be fantastic. I wasted an hour trying to figure out what was going on.\n. Reporting in the same. Version 3.0.3. May move to ESLint as suggested though on the blog. For now I'm using the fix people have suggested.\n. ",
    "texel": "Sure, that sounds reasonable. \n. Sorry for the delay... yeah I'd like to.\n. ",
    "L3O": "This is the schema I looked at:\nhttps://svn.jenkins-ci.org/trunk/hudson/dtkit/dtkit-format/dtkit-junit-model/src/main/resources/com/thalesgroup/dtkit/junit/model/xsd/junit-4.xsd\n. So what you are saying is create another jscs plugin for this schema ?\nOr create a new reporter on the project for this schema ?\n. What about a new reporter for jenkins ? \nLike the one in the commit jenkinsjunit.js that export an xml on the schema expected from jenkins.\n. ",
    "jontaydev": "I've realized that validateIndentation doesn't actually care if your code is indented at the proper level, just that indentation aligns with with the correct number of spaces/tabs. So indenting too little or too much is validated ok, so long as its divisible by validateIndentation.\nAnd --fix gives unexpected results when trying to cleanup. This makes indentation validation really useless if you care about block alignment.\nDoing a search on validateIndentation on the issues gives lots of results. I would say this is a critical issue hurting lots of users right now.\n. ",
    "duliodenis": "Closing as this branch is 367 commits behind master.\n. Closing. Will resubmit with proper branch version of files.\n. Will PR to master.\n. ",
    "Gerhut": "Coverage test passed, Thank you for your help.\n. done\n. Documented\n. Fixed and sorry for my poor coding skill. However, The line you referenced is also in a function scope https://github.com/jscs-dev/node-jscs/pull/1927/files#diff-105ac0edfe6913192922933858c13d7fR77 so I just cache the _exceptModuleExports.\n. ",
    "jkiimm": "Oh, I missed error suppression entirely. Before writing this, I would make sure checking that, sorry.\n. ",
    "tobobo": "@markelog it's fixed, thank you!\n. ",
    "boldfacedesign": "Plugin sounds like a good idea. I'll post back later with details.\n. ",
    "danwellman": "Sorry for the dupe! I'll take a look at the other ticket :)\n. ",
    "dwelle": "I'm getting similar error on disableUnusedParams when used in conjunction with esnext: true and object spread:\n```\nfunction test ( data ) {\nvar opts = { ...data };\n\n}\n```\n. ",
    "michaelficarra": "@markelog I'm not really interested in anything involving either JSX or the babylon AST, sorry.\n. It's going to be hilarious when the babel people figure out this is a bug and the semicolon-free people need a semicolon remover.\n. @markelog It is already valid to omit semicolons after class properties in most cases.\n. Really.\n. You're welcome. Don't forget about this case which I hadn't thought of at first.\n. ",
    "ghengeveld": "I'm having the same issue (using JSCS v2.5.1). Related issue: #1875\ninternalError: Error running rule disallowUnusedParams: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nRangeError: Maximum call stack size exceeded\n    at Referencer.MemberExpression (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/lib/referencer.js:558:45)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:109:34)\n    at Referencer.MemberExpression (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/lib/referencer.js:559:22)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:109:34)\n    at Referencer.MemberExpression (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/lib/referencer.js:559:22)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:109:34)\n    at Referencer.visitProperty (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/lib/referencer.js:421:22)\n    at Referencer.Property (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/lib/referencer.js:567:22)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:109:34)\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:88:38) at src/components/Counter/index.js :\n     1 |import React from 'react';\n--------^\nAlso happens with an export:\ninternalError: Error running rule disallowUnusedParams: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nRangeError: Maximum call stack size exceeded\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:67:48)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:112:14)\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:88:38)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:112:14)\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:93:26)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:112:14)\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:88:38)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:112:14)\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:93:26)\n    at Referencer.Visitor.visit (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:112:14)\n    at Referencer.Visitor.visitChildren (/Users/ghengeveld/Development/Wehkamp/blaze-hub-skeleton-site/node_modules/jscs/node_modules/escope/node_modules/esrecurse/esrecurse.js:88:38) at src/utils/fetch.js :\n     1 |export fetch from 'isomorphic-fetch';\n--------^\nNote that the import of React indeed unused in the file, it's needed for JSX to work.\n. ",
    "englercj": "Looks like a PR was merged to fix this and is in the v3 branch. Will we see v3 out soon, or can this be back ported to v2?\n. Ok, was just wondering since this is an active issue for v2 that prevents it from being used with es6.\n. ",
    "MartinRixham": "Ok that works. Thanks for the help.\n. ",
    "DanLipsitt": "I'm probably not the right person to implement this one. Does jscs already know which context it's in (js vs jsx)?\n. ",
    "josh18": "I assume this fix just ignores quotes in jsx rather than letting you choose a type of quote to validate?\n. ",
    "rgpass": "I'm having trouble following along with #1254 and am unable to get it to work.\njavascript\n// Attempt 1\n\"disallowSpacesInsideParentheses\": false,\n\"disallowSpacesInsideParenthesizedExpression\": false,\n\"requireSpacesInsideParentheses\": {\n    \"all\": true,\n    \"except\": [ \"{\", \"}\" ]\n},\n\"requireSpacesInsideParenthesizedExpression\": {\n    \"allExcept\": [ \"function\" ]\n}\njavascript\n// Attempt 2 -- same as above except:\n\"requireSpacesInsideParenthesizedExpression\": {\n    \"allExcept\": [ \"function\", \"ParenthesizedParameters\", \"FunctionParameters\", \"Parameters\" ]\n}\nNote: Edited the question to better illustrate what I am trying to solve.\n. ",
    "AuthorProxy": "@hzoo I also have\n\"disallowUnusedParams\": true\njust think that it's not the case of wrong linting, if you need I can attach all other 200 line config options here\n. If nobody take it, I will\n. @kylepaulsen if you work on different project (one that can be pulled from github) it should contains it's own .jscsrc config with validateIndentation rules, right?\n. @kylepaulsen so it's the same that there only one rule - \"no rules at all\". In your case you want jscs to allow mixed tabs at document, I can't agree with this, when I open some js document I have hundreds of errors for all rules, not just for whitespace. Every time you should ignore jscs, or fix js document.\n. @kylepaulsen So why adding custom .jscs to root folder of project which overrides global config is not your case?\n. ",
    "jeff1evesque": "Does this mean I can't put a @param for a variable that isn't a function argument?\n. What if i would like to put additional comments regarding specific variables used within a function?  Could I incorporate that within the docblock?\n. ",
    "justinmchase": "Good eye, thanks. I kind of think that \"all\" should include this case and there should be an option to not have it.\n. Is there a solution or just proposed features / fixes for now? I will close this for now since it seems to be a duplicate.\n. Thanks, I was actually able to adjust my pre-processor to replace\n// @@CODE\nInstead, which happens to work in just my scenario. I can see a need for this feature in general in jscs but I'm unblocked for now. Thanks.\n. @zxqfox :metal: \n. ",
    "MatmaRex": "JSCS 2.5.1. Note that you have to set { \"disallowMixedSpacesAndTabs\": true } in .jscsrc (or use a preset that has it). Note also that my snippet is indented with tabs and not spaces (GitHub mangles it\u2026 I didn't notice before).\njscs --verbose output:\n```\ndisallowMixedSpacesAndTabs: Mixed spaces and tabs found at test.js :\n     1 |foo(\n     2 | 'parameter',\n     3 | / bar / false\n--------^\n     4 |);\n1 code style error found.\n```\n. ",
    "janpieterz": "All totally valid remarks, will get on that tonight, thanks for the feedback.\n. Fixes implemented.\n. It's certainly not handling this currently.\nAm I correct in stating that the strict shouldn't actually care about a new xxx statement, even if it is a user defined object? Seems to me that this should be valid:\njs\nvar user = new User();\nvar template = new Template();\nBut that might simply be because my background is mostly C#. \nTo be honest my knowledge of the inner workings of jscs is a bit too narrow to specify how to solve this, but I'm more than willing to pick it up and including a unit test for it, with a little nudge in how to recognize in code which item is of what type etc (examples in the source will do fine).\n. @NoNameProvided do you use camelCase for other stuff and CamelCase (PascalCase) for your types, or do you use CamelCase everywhere else? As in, are types the only place you divert from the current 'strict' setting?\nIf we do that it feels like we're making opinionated choices while they should probably become settings. I feel it could become a  'bigger' feature, looking at for example this:\nhttps://msdn.microsoft.com/en-us/library/x2dbyw72(v=vs.71).aspx\nor this:\nhttp://docs.scala-lang.org/style/naming-conventions.html\nMicrosoft themselves changes their conventions between versions of the .NET framework, see above link, and:\nhttps://msdn.microsoft.com/en-us/library/ms229043(v=vs.100).aspx\nand:\nhttps://msdn.microsoft.com/en-us/library/ms229043(v=vs.110).aspx\nIt almost feels like the capitalization style should become some kind of configurable preset, slightly comparable to the jquery/airbnb etc presets, where there are a certain amount of individual settings per type (types, variables, properties etc) which are easily configurable per item but also easily defined with a preset (dotnet46, dotnet35, scala). \nThis would obviously cost quite a bit of time to develop and I'm not sure if that would currently be worth it. \n. ",
    "icarlosmendez": "Hello hzoo,\nI don't see a copy of any files with the .jscsrc file extension in my node_modules/gulp-jscs directory.\nWhere should I be looking for this file? \n. Hzoo,\nI didn't have the .jscsrc file located anywhere in my directory structure. As a remedy, I created one at the root of my project and pasted the code from your linked version and now I am receiving no errors related to jscs! My only question at this point would be 'why did that file not get created during the installation of the module'? That is a problem and I suppose it could be isolated to me but may be more wide spread. Thoughts?\n. I think I might have misspoke when I said 'created' referring to the config file. What I should have said was why this file was not 'included' with the module during install. If this is not a failure of the installation then it is surely a failure of the documentation regarding the install requirements. There is no mention of the need for a config file. The second opportunity for this situation to correct itself didn't happen for me which was as you mentioned, that I would be prompted to create the missing file by the module upon discovering that it didn't exist. \nI'm guessing based on your response that this is a bit of an edge case but I did provide my error message in my initial submission and this did not immediately trigger the question around the config file. I feel as though this issue has not been satisfactorily resolved on your end even though with your help I have resolved my issue.\n. ",
    "ben-humangeo": "I understand this is a closed issue, but did it get resolved?  I ran into this when my .jscsrc was defining a bad file location for \"excludeFiles\": [\"node_modules/**\", \"bower_components/**\"] should have been \"excludeFiles\": [\"client/node_modules/**\", \"client/bower_components/**\"]\n. refering to this comment on reproducing the issue \"to the fix the error\". https://github.com/jscs-dev/node-jscs/issues/1982#issuecomment-161069623\ndisregard if there is no reason to fix this, just seemed like there was a conversation that didn't get resolved by just closing the issue with no changes.\n. ",
    "mmun": "@hzoo Big :+1: to separating this into two rules. Is there a path to this? Perhaps requireEnhancedObjectLiterals: 'functions' | 'identifiers' | true? Additionally, it would be nice to disallow any combination as well. My use case is to disallow the identifier case, but require the function case.\n. Thanks for the green light.\n. ",
    "seanpdoyle": "@markelog :ok_hand: is something like https://github.com/jscs-dev/node-jscs/blob/master/lib/rules/disallow-anonymous-functions.js#L1-L37 sufficient?\n. @markelog I've updated all PRs\n. ",
    "mlesk": "I am experiencing this error as well, also on the first line of a file containing JSX. The error is reported on the first line of the file which is:  \nimport React, {Component, PropTypes} from 'react';\nI know it has nothing to do with this line because that exact line is present in many files that are not triggering the error. Something in the files is causing validateQuoteMarks to fail. Stack is the same as originally reported. Here is a gist containing the full contents of the file triggering the error:\nhttps://gist.github.com/mlesk/ae6e9cef4c39afe92e42\nMy .jscsrc file:\n{\n  \"preset\": \"airbnb\",\n  \"disallowYodaConditions\": true,\n  \"disallowMultipleVarDecl\": true,\n   \"requireCurlyBraces\": [\n       \"do\"\n   ],\n   \"requirePaddingNewLinesBeforeLineComments\": {\n       \"allExcept\": \"firstAfterCurly\"\n   },\n   \"requirePaddingNewLinesBeforeLineComments\": null,\n   \"requireObjectKeysOnNewLine\": \"true\",\n   \"requireObjectKeysOnNewLine\": {\n     \"allExcept\": [\"sameLine\"]\n   },\n   \"maxErrors\": -1,\n   \"maxErrors\": null,\n   \"fix\": true,\n   \"maximumLineLength\": null,\n   \"verbose\": true\n }\n. ",
    "farrrr": "I also meet this problem, same with @mlesk .\n. ",
    "toupeira": "@hzoo thanks for the hint, on first look it doesn't seem to make a difference:\n``` sh\n$ time npm --version\n3.5.0\nreal    0m0.462s\nuser    0m0.472s\nsys     0m0.012s\n$ time node_modules/jscs/bin/jscs --version\n2.6.0\nreal    0m1.597s\nuser    0m1.612s\nsys     0m0.056s\n```\nThis time I ran the test inside the project folder, since I could just quickly blow away node_modules there and reinstall. Some dependencies are still nested though because of version differences:\nsh\n$ ls node_modules/jscs/node_modules/\nansi-regex  chalk      esprima     glob      js-yaml    resolve     supports-color\nargparse    commander  estraverse  has-ansi  minimatch  strip-ansi\nCan somebody else confirm faster startup time with npm3? In that case I wouldn't mind closing this issue.\n. @TheSavior I don't use Babel directly but babel-jscs is a fixed dependency of jscs so it does get loaded.\nYou can find the gist at https://gist.github.com/toupeira/cbf30a75bb9c0f84a465, generated with strace -e trace=open jscs --version 2> jscs-strace.txt (the other syscalls don't seem to be relevant here). There's no access outside of the jscs dependencies.\nI think I'll just close this issue, sorry for the noise ;-)\n. ",
    "ilwebdifabio": "You are welcome.\nI'm awfully sorry just now I've realized \nthat in the fix path there were also the bower_components as well.\nYou can close the issue.\nChanging the path the command works fine.\nThanks and sorry again\n. ",
    "maherbeg": "@markelog Sure! Any pointers for doing so?\nI've got something along the lines of retrieving the node, and then determining the parent node of the AST to see if it is an ObjectProperty type. Will post a PR soon!\n. Of course! (I wasn't sure what the standard here was, didn't see it often).\nI'm not sure if there's a better way but I'm not super deep into this code and have seen the grandpa pattern around. Please let me know if there is!\n. Done!\n. ",
    "Bnaya": "I can try to, where i should start?\n. I'm looking for a straightforward way  to debug node cli tools, i'm having trouble to do so with node-inspector\nAlso i don't see console.logs i put in the sourcecode of node-jscs\n. Eventually node-debug $(which jscs) file.js done the trick, its just takes long time to start\n. @markelog  it was pretty simple to implement, tell me if its looks ok\nhttps://github.com/jscs-dev/node-jscs/compare/master...Bnaya:disallowNewlineBeforeBlockStatements-class?expand=1\nWe will need update the docs about the new block type\nMy tests have parse error and i'm not sure why\nparseError: Unexpected token {\n. @markelog \nI'm not on the contributors list any idea why? (just wondering :))\nhttps://github.com/jscs-dev/node-jscs/graphs/contributors\n. ",
    "kepta": "@hzoo I was interested in fixing this bug.\nShould we try to use a different mechanism to detect parenthesis or use a short cut to check for ':', which takes care of this particular flow case in here.\n```\nvar closingParensToken = file.getNextToken(file.getLastNodeToken(node));\n```\nor what if we have a function like getNextTokenExcept(':') ?\n. Hello, \nI was trying to fix this bug, I found the following code to be of particular interest\n```\n        if (comment.range[0] > currentNode.range[0] &&\n            comment.range[1] < currentNode.range[1]) {\n            // Stop processing comments that are within multiple declarators in a single variable declaration\n            break;\n        }\n```\nI believe we should also have a similar check for the previousNode, @markelog  ?\n. Can someone be kind enough to explain what  alphabetise imports are? \nGoogle failed to give me an answer :/\n. Oh I am so sorry for that.\n. ",
    "nackjicholson": "Thank you @markelog \n. ",
    "bomatson": "@markelog  @TheSavior I had the bandwidth! See PR ^^\n. @markelog why was this closed? The test case matched @TheSavior's code\n. awesome thanks @TheSavior @hzoo !\n. ",
    "c089": "There is another case that is not covered by this fix: Self-closing tags. I often use this to split components with many props over several lines like this:\nconst foo = (\n  <Foo\n      a=\"foo\"\n      b=\"bar\" />\n);\n. ",
    "NoNameProvided": "My .jscsrc:\njavascript\n{\n    \"preset\": \"airbnb\",\n    \"validateIndentation\": 4,\n    \"validateLineBreaks\": null,\n    \"requireTrailingComma\": null,\n    \"requireCamelCaseOrUpperCaseIdentifiers\": {\"ignoreProperties\": true, \"strict\": true},\n    \"excludeFiles\": [\"lib/**\", \"dist/**\", \"resources/**\"]\n}\n```\n$ jscs social.js --verbose\nrequireCamelCaseOrUpperCaseIdentifiers: All identifiers must be camelCase or UPPER_CASE at social.js :\n   191 |    downloadProfilePicture: function(successHandler, errorHandler) {\n   192 |        this.api('/me/picture', 'get', {type: 'large'}, function(response) {\n   193 |            var image = new Image();\n------------------------------------^\n   194 |            image.crossOrigin = 'anonymous';\n   195 |            image.src = response.data.url;\nrequireCamelCaseOrUpperCaseIdentifiers: All identifiers must be camelCase or UPPER_CASE at social.js :\n   335 |\n   336 |    downloadProfilePicture: function(successHandler, errorHandler) {\n   337 |        var image = new Image();\n--------------------------------^\n   338 |        image.crossOrigin = 'anonymous';\n   339 |        image.src = this.auth.currentUser.get().getBasicProfile().getImageUrl() + '?sz=512';\nrequireCamelCaseOrUpperCaseIdentifiers: All identifiers must be camelCase or UPPER_CASE at social.js :\n   429 |            }\n   430 |\n   431 |            var image = new Image();\n------------------------------------^\n   432 |            image.crossOrigin = 'anonymous';\n   433 |            image.src = src;\n3 code style errors found.\n```\n. We use the CamelCase naming convention for our objects. So I vote to allow constructor methods being capitalized.\n. @janpieterz Yes we use CamelCase only for our types (user defined objects). Other stuff like variables are camelCase, I think this is the kinda standard naming convention in javascript, \n. ",
    "Sjeiti": "The problem is this assertion: https://github.com/jscs-dev/node-jscs/blob/99bdf4f7240110a30ff223fcebcca4868bcdb4e3/lib/rules/disallow-comma-before-line-break.js#L119-L123\nI don't think it should be part of this rule. disallowCommaBeforeLineBreak implies commas are not allowed at the end of a line. So commas should be allowed everywhere else.\n. ",
    "dhritzkiv": "I've narrowed down the conditions that cause this behaviour:\nWhen the code is free of style errors, running jscs --verbose . returns nothing, and running jscs --fix . has no effect.\nWhen I deliberately introduce an error, e.g. a trailing whitespace (tab character), then running jscs --verbose . results in:\n` sh\ndisallowTrailingWhitespace: Illegal trailing whitespace at ./routes/creations.js :\n   788 |\n   789 |  if (!eligibleMeshAndArchiveFormatsRegex.test(format)) {\n   790 |   return next(new httpErrors.BadRequest(`Invalid format value: \\`${format}\\)); \n------------------------------------------------------------------------------------------^\n   791 |  }\n   792 |\n1 code style error found.\n```\nWhich is correct.\nThen, running jscs --fix . fixes the whitespace, but it also strips the escaped backticks. More interestingly, it strips the backticks in several parts of the file (not just the line with the bad style).\nI've attached my .jscsrc file as a .zip\n\n\n\njshint@v2.7\n\nYou meant jscs, right?\n\nDerp. yes.\n. Not sure why the zip didn't work\u2026 in any case, here's the .jscsrc gist\n. Thanks!\n. ",
    "diegoaguilar": "Yah I got both wrong:\n- dissallowTrailingComma  (extra 's')\n- disallowSpacesinFunction (wrong lowerCase 'i')\nMy bad, sorry!\n. ",
    "kswedberg": "It looks like the disallow-dangling-underscores.js file is setting __proto__ to true, which is throwing an error because it can only be set to null or an object. Not sure why this is only happening when harmony-reflect is required. Maybe harmony-reflect is polyfilling something that node's es6 implementation doesn't have yet?\n. Hey Oleg!! It gives me great confidence in this project to see you as a major contributor. :) Thanks so much for the quick turnaround. Hope to see you IRL sometime in the next year.\n. ",
    "timkelty": "Thanks @markelog!\n. ",
    "pabigot": "This could also be modified to use allowedSuffixes instead of units with the same behavior, and add allowedPrefixes for similar markings at the start of the identifier (e.g. opt_).\n. On further consideration I've decided that the generalization to prefixes and suffixes makes sense, so have updated the pull request with a version that doesn't name the options in a way that limits them to units.\n. @markelog  Resubmitted with comments addressed.\nCoverage decrease was probably due to dc146d8b930b9d2be99d3efcf54beed631ef6557 using an overly verbose replacement of the leading/trailing underscore strip formerly applied only within a condition.  I've refactored so it's back to a single line, but is still done separately and first on the argument that scope markers apply after prefix/suffix markers.\nThere was no change in unit tests for the prefix/suffix underscore stripping because it was intended to preserve existing behavior.  I've added commit bd3b160046bf4bd01a311d97b605111d09dafb4f explicitly calls out an inconsistency in the unit tests.  If the existing behavior is wrong, I'll rework; if the test description was wrong, hopefully coverage will be back up where it used to be.\n. I see the issue with coverage and will fix it when I get a chance to figure out why the obvious test doesn't fail.\n. @markelog current pull should be up to date and addresses all comments so far.\n. @markelog Good comments; the refactoring is more clear and exposed gaps in the coverage tests.\nI don't believe the travis failure on Node.js 4 is related to my changes.\n. @markelog I'm going to need to implement allExcept as well, which will complete the functionality envisioned in #1900.  OK to add that as a new commit on the branch underlying pr, or do you want it in a different pr?\n. We could.  I didn't because there wasn't an obvious way to support prefixes and suffixes that still allowed the remainder of the identifier to be validated.  E.g. the proposed opt_* would, naively, allow opt_this_thing where the semantics I want for a prefix would disallow that but permit opt_thisThing.  Treating prefix and suffix explicitly also eliminates the need for start-of-match and end-of-match identifiers in regular expression exceptions.\nSo I think there's really three cases.  They could be combined into one option:\n\"allExcept\": {\n   \"match\": [ \"var_args\", /^ignore/ ],\n   \"prefix\": [ \"opt\" ],\n   \"suffix\": [ \"re\", /[kMG]Hz/ ]\n}\nwith:\n\"allExcept\": [ \"var_args\", /^ignore/ ]\naccepted when only match exceptions are present.\n. @markelog Looking at my last comment, there is a problem: I've been assuming I could use regular expressions, and that won't work with JSON configuration structures.  I still think the three cases are worth supporting independently, but I'll need to rework the implementation to use ~~glob~~ minimatch, which does seem to have the expressibility I want.\nI'll convert the implementation after we've resolved what the configuration should look like.\n. @markelog I think this implementation needs significant rework which depends on agreeing on the specification and semantics, so I've updated #2029 with a proposal and request for input and am closing this PR.  Thank you for your comments so far; I'll submit a new solution after we've worked out the details in the issue.\n. @markelog @ChrisPearce @tonyganch Pull request #2028 which had my initial attempt at this has gotten complex and involves questions of how to specify the configuration, so I want to move attention back here where we can work out the semantics and interface in a more visible area.  If there are others who should be invited to participate please do so.\nAs I noted in the original description, the behavior I want is to specify arbitrary prefix and suffix values with separating underscores that are stripped off identifiers before submitting the remainder to the validation of requireCamelCaseOrUpperCaseIdentifiers.\nIn #1900 and a comment in #2028 it was proposed to use allExcept for something like this, but I believe that name implies completely excluding a matching identifier from the rule.  As such I don't believe the prefix and suffix exceptions should be incorporated into the allExcept option, though I do need that capability as well.\nThus I propose three additional configuration options, all arrays and all containing string or RegExp values.  For example\n\"allExcept\": [ \"var_args\", /^ignore/, ],\n\"allowedPrefixes\": [ \"opt_\" ],\n\"allowedSuffixes\": [ \"_dCel\", \"/_[kMG]?Hz/\" ],\n(RegExp literals can only be supported for programmatic configuration; for JSON-based configuration a string with a value that matches /^\\/(.*)\\/([gimuy]*)$/ will be parsed and passed to the RegExp constructor when the configuration is validated.)\nI propose the following rule behavior:\n1. Let V represent the initial input identifier.\n2. If V matches anything in allExcept, it will be accepted without further checks.\n3. Leading and trailing underscores, which traditionally represent a notion of visbilility, are stripped from V before proceeding.  (This is not a behavior change, but is where I believe the effect should occur in the validation sequence.)\n4. If V decomposes to a sequence P followed by ~~an underscore followed by~~ a non-empty sequence R, and the sequence P matches anything in allowedPrefixes, the value R replaces V in all subsequent validation.  Prefix checking stops after the first match.  P is specifically permitted to contain underscores.\n5. If V decomposes to a non-empty sequence R followed by ~~an underscore followed by~~ a sequence S, and the sequence S matches anything in allowedSuffixes, the value R replaces V in all subsequent validation.  Suffix checking stops after the first match.  S is specifically permitted to contain underscores.\n6. V is checked against the existing rule.\nComments?\nEDITS\n- Integrate separating character (e.g. underscore) into affix.\n- For JSON-compatible configuration replace minimatch (doesn't meet functionality requirements for affixes) with strings that can be recognized as specifying regular expressions.\n. @gibson042 Thanks.\n- It was separate mostly because I'd conceived of it as a separating character rather than part of the affix.  I agree that putting it into the pattern is not a hardship and is more general, and will proceed that way subject to opposing input.\n- Yeah, putting things like /[kMG]?Hz/ into JSON doesn't work so well.\n. minimatch isn't going to cut it as it matches whole sequences: there's no public API way to extract the non-affix part of the identifier, and the feature to create equivalent regular expressions has multiple unaddressed issues against it.  To support JSON configuration I'll treat any string pattern that itself matches '/^\\/(.*)\\/([gimuy]*)$/ as a regular expression that will be compiled when the configuration is installed.\nI think minimatch could work in allExcept, but without a clear statement of interest backed by maintainer approval I'll stick to strings and regular expressions.\n. Given \"opt_*\" with minimatch, how would you get it to say what matched the \"*\" part so that could be validated against the rule?\nI'll go with ESTree, assuming flags is optional.  Thanks for the pointer.\n. Thanks; I like it too.\nPlease let me know if you have additional changes you'd like made, and if you intend to merge the amend commit with the main one or would prefer I do it.\n. From the other perspective, it'd be \"perfect\" if there was a rule to remove those extra spaces before the assignment operator.\n. Upcoming rework factors out the conditions and bounds calculations.  The condition in for in condition remains but I can refactor further if it's still too complex.\n. Misled by existing block comment; fixed in rework.\n. ",
    "ChrisPearce": "+1\nThis would also be very useful when referencing NPM script config values from within Node JS (e.g. var myProp = process.env.npm_package_config_MY_ENVIRONMENT_VARIABLE).\n. ",
    "jkryl": "@markelog : Thanks for taking care of the issue!\n. ",
    "Arcanemagus": "Thanks for the information, I guess we will have to work around this limitation in the package.\nNote: Other linters handle their file ignore patterns if passed a string as long as they are also passed an original file path, so I assumed this was similar and just not working.\n. I can try putting something together, it's going to be a while before I can get to it though. If somebody who is actually familiar with the code wants to take a stab at it that would be appreciated.\n. Well this is interesting, my home computer shows a different error, but the right position. The work computer still shows the same as above on the exact same file though so something is up. Both are supposedly running jscs v2.8.0.\nI'm not sure exactly what you mean by \"execute this line with node\", but I would love to figure out how both systems are giving different results if you can think of any steps to debug this.\nThis is what my home computer is showing:\n\n. No difference in the node output between the two, and it seems to be pointing to the correct location.\nWork:\n\nHome:\n\n. So I stepped through everything function call by function call and have determined this is a bug within esprima. When it sees the ' at the end it starts scanning for the string contents of the string that was just \"began\", unfortunately when it sees the EOL character it doesn't advance the tracking of the current line, but it does keep advancing the column position thus leading to the position marker past the end of the line.\nNow for the weird part: The esprima loaded within Atom is v2.7.1, the same version that is loaded by the CLI version, as well as both instances on my home computer so I can't explain why it's working here. Going to try stepping through it here next to see why it doesn't fail (and gives a different message).\n. Okay, learn to use a clean environment while testing apparently :stuck_out_tongue:\nI had the test file inside a project that had a .jscsrc file specifying the airbnb preset, which forces ESNext enabled, and thus uses the babel-jscs parser. Moving it to a similar folder to the work machine causes it to use regular esprima and hit this bug.\n. For reference, a fix for one of the duplicates is up in https://github.com/jscs-dev/node-jscs/pull/2252.\n. Really? Interesting, it doesn't show the same error in the output and the rules are entirely different so I assumed it was a different bug.\n. You referenced this issue as the one replacing it... not sure what you meant there :stuck_out_tongue:.\n. Ah, probably https://github.com/cst/cst/issues/113, as you referenced this from there.\n. There is also a bug with the following:\n.jscsrc:\njson\n{\n  \"disallowPaddingNewlinesInBlocks\": true,\n  \"requirePaddingNewLineAfterVariableDeclaration\": true\n}\nfoo.js:\n``` js\nlet foo = 42;\nfunction bar() {\nlet foobar = 42;\n}\n```\nI'm assuming that the root cause is the same as this one since it requires the requirePaddingNewLineAfterVariableDeclaration rule as well, but if you want this filed as a separate bug just let me know.\n. ",
    "himdel": "Sure, looks like a fun xmas project :) though after a (really) quick look the day before I couldn't really make heads or tails of it..\nBut if I'm fixing it, do we still really want this to not apply to var foo = function(...) {?\n. @markelog Thanks!, Merry Christmas to you as well :)\nAnd what do you think of #2040?, should hopefully be a bit cleaner than the current approach..\n. .. Also added support for ArrowFunctionExpression, so now even fooooooooooo => baaaaaaaaar is ignored.\n. Coverage is decreased because 100% of shorter code is less code covered than 100% of longer code , apparently :).\n\nAlso, would you mind adding example for this param?\n\nSure, will do..\n. ..added a few examples..\n. ",
    "1001b": "Just curiosity.  The spawn approach works for ESLint.   What is the implementation difference between ESLint and JSCS?\n. ",
    "jdalton": "Odd, I can't repro it either now.\nThe mucked up node_modules folder seems as good a reason as any. Thanks!\n. ~~I take it back :grin:, I had a change in the config that removed the checkTypes directive which is why I wasn't seeing the fail. I'm seeing the fails on the current edge master branch with Node v5.1.1\nnpm  v2.14.15, and JSCS 2.7.0.~~\nAnd I take it back again. It turns out it's because I was running an edge version of lodash in my node_modules folder.\n. This rule is having issues with vars that are just passed to other functions:\nbash\ndisallowUnusedVariables: Variable `object` is not used at lodash.js :\n 14622 |     */\n 14623 |    var method = rest(function(path, args) {\n 14624 |      return function(object) {\n---------------------------------^\n 14625 |        return baseInvoke(object, path, args);\n 14626 |      };\nYou can see the var is used\n. It works! Updated dep in Lodash :D\n. ",
    "yaroslavya": "Looks like solarized dark, actually.\n. ",
    "radek-holy": "Hm, have you ever seen a code convention to write a space in this case? I am new to JavaScript so I have no idea.\nMy opinion is that this rule should not apply in this case at all. If you have ever seen such code, I would add an opposite exception then: \"ignore this case by default unless an includeParenthesized option is enabled\".\nBut it's just my opinion. Feel free to choose your solution. It will help too.\n. I would still prefer if it was a default behaviour but yes, better this than nothing...\n. ",
    "gpiress": "I'm interested in helping with this issue, as I had the same problem.\nBut just to make sure if what I thought is enough. I'm thinking in following @markelog  suggestion and implementing a third way of using this rule, i.e using an Object with the 'allExcept' property, and one could define it such as:\nrequireSpaceBeforeKeywords: { allExcept: 'function' }\nAnd this would be sufficient for the issue to be solved, am I right?\n. Ok, I believe we can leave the function keyword as a default excluded value. =)\nSorry for the delay in seeing this message.\n. Okay, just to clarify, this is the behaviour as it is in this pull request:\n- If the option is defined as requireSpaceBeforeKeywords: true, it checks for all the defaultKeywords, EXCLUDING the function keyword, which means the code posted in the original issue would be valid, as required.\n- If the option is defined as requireSpaceBeforeKeywords: { allExcept: ['else'] }, this would still validate the function keyword, checking for a space before it.\nThis way, it by default doesn't check for the function keyword, but it is possible to do so through the allExcept version of the rule.\nIs it as expected?\n. I think this issue is solved by the pull request https://github.com/jscs-dev/node-jscs/pull/2063. It creates the allExcept value for this very rule =).\n. Has this issue been fixed already?\nI can't seem to reproduce it. Using the current master version, I've created an unit test for the rule to check it, and it correctly passes (marks as no $ sign needed).\nI also tried to add it to a js file and linting it using the rule, and I also didn't get any errors.\nWith the current master version, is it still showing a false-positive for var title = $('div').first().text();? If so, can you provide an example so I can look into it?\n. There is this test, lines 104 to 106 of the require-dollar-before-jquery-assignment spec file:\nit('should not report chained jquery operator with variable', function() {\n    expect(checker.checkString('var x = $(evt.target).val();')).to.have.no.errors();\n});\nAnd this test is passing, which I guess covers the case of the issue? I'm failing to reproduce this issue here =/\n. Sorry guys, it seems I really missed this scenario. My bad =(.\n. ",
    "PaulAnnekov": "@markelog ok, I will try. What about to write nice work, bro mentioning me on twitter when you will close PR? JFF :)\n. @markelog oh, switch's body in AST is defined not even like class's body. It doesn't have a child node that will include braces, so we can't add switch support by adding 2-3 words to source code :).\nI have added switch support by special check:\nhttps://github.com/PaulAnnekov/node-jscs/commit/0ce22181f51af82cf30916592d9076d78bcde12e\nhttps://github.com/PaulAnnekov/node-jscs/commit/b717058d017825b37f5cdc81085b2f8404b3739c\nIt is OK or maybe we should create separate rule for it because now it looks like exceptional case in sources?\n. So?..\n. @markelog waiting for my nice work, bro https://github.com/jscs-dev/node-jscs/issues/2045#issuecomment-168816726 :). My twitter - https://twitter.com/annekov\n. @markelog still waiting for my bro...\n\n. @markelog great, 10x :)\n. ",
    "AlexanderOMara": "Sure, I've just submitted a pull request.\n. So it's not necessary to run these tests on both the true and allExcept configurations? I based it on test/specs/rules/require-capitalized-constructors.js\n. ",
    "rheh": "To be clear, we are referring to ES6 imports here?  If so, esnext provides the following ways of importing:\n``` javascript\n    // Default exports and named exports\n    import theDefault, { named1, named2 } from 'src/mylib';\n    import theDefault from 'src/mylib';\n    import { named1, named2 } from 'src/mylib';\n// Renaming: import named1 as myNamed1\nimport { named1 as myNamed1, named2 } from 'src/mylib';\n\n// Importing the module as an object\n// (with one property per named export)\nimport * as mylib from 'src/mylib';\n\n// Only load the module, don\u2019t import anything\nimport 'src/mylib';\n\n```\n. I will take a look a implementing this.\n. @markelog sure,  I'll give it a go!\n. This pull request is now ready for review.  Thanks.\n. ",
    "flying-sheep": "here\u2019s the ASI clarification\n. ",
    "joerideg": "Ah ok. Yes I understand why the comma gets there, thats supposed to happen according to the other rule. \nThen my question becomes: Could the autofix feature be implemented for this rule? Currently because it adds this comma but doesnt put the newlines it then again fails validation because there should be a space after the comma. And frankly it just looks ugly :P \nJust for the record my preferred outcome would be:\njs\nconst someArr = [\n  {\n    test: 'test',\n  },\n];\n. Sure I'll have a look tonight!\n. Alright then I pretty much got it working. Only thing that I'm not sure how to fix is the indentation after putting in the newline. \nrunning .jscsrc with:\njson\n{\n  \"validateNewlineAfterArrayElements\": 1,\n  \"validateIndentation\": 2\n}\nIt currently transforms from:\n``` js\nvar arr = [1, 2, 3, 4, 5,];\nvar arr2 = ['string', 'string2', 'string4'];\nvar arr3 = [{test: 'test'}, {test2: 'test2'}, {test3: 'test3'}];\nvar arr4 = [1, 'string2', {test3: 'test3'}];\n```\nto\n``` js\nvar arr = [\n1,\n 2,\n 3,\n 4,\n 5,\n];\nvar arr2 = [\n'string',\n 'string2',\n 'string4'\n];\nvar arr3 = [\n{test: 'test'},\n {test2: 'test2'},\n {test3: 'test3'}\n];\nvar arr4 = [\n1,\n 'string2',\n {test3: 'test3'}\n];\n```\n. I could also try fixing the array indentation in validateIndentation. \nI really like the codebase btw, nice and clear. I will dive into this a bit more.\n. I would think so yes. The code I have now would in fact fix the errors logged by validateNewlineAfterArrayElements. So I think I can PR and then we can fix the indentation in #1866 \nI will prepare the PR tonight. \n. Just for the record: I ment PR just the fix for validateNewlineAfterArrayElements. \nI'll be happy to look the indentation aswell somewhere over the weekend see if I can make heads and tails of it.\n. Will do!\n. Quick update: Quite busy with work but will hopefully get to the test tomorrow or thursday.\n. I'll get around to it monday! Cheers\n. Cool! :) Can I remove my fork now? (this is my first pull request ever)\n. Thanks! \n. Ill keep that in mind, thanks!\n. ",
    "GarryFlemings": "I ran into this one, too.\ninternalError: Error running rule jsDoc: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nAssertionError: Unable to add an error, `column` should be a positive number but -1 given\n    at Object.Errors._validateInput (C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\lib\\errors.js:73:9)\n    at Object.Errors.add (C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\lib\\errors.js:46:14)\n    at addError (C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:166:28)\n    at C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:181:25\n    at Object.requireReturnTypes (C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc\\require-return-types.js:17:9)\n    at C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:145:27\n    at Array.forEach (native)\n    at DocComment.<anonymous> (C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\node_modules\\jscs-jsdoc\\lib\\rules\\validate-jsdoc.js:144:46)\n    at Array.forEach (native)\n    at DocComment.forEachTag [as iterate] (C:\\Users\\<mypath>\\AppData\\Roaming\\npm\\node_modules\\jscs\\node_modules\\jscs-jsdoc\\lib\\jsdoc.js:86:19) at utilModule.js :\n     1 |/**\n--------^\n     2 | * General Utilities\n     3 | * original author: BaldEagle\nOn the screen, the caret is positioned below the forward slash (the first character in the file. The instance jkryl reported might be the same.\nAs for minimal code to offer, I can give you my first 17 lines or so; here's a description. Line 1 has a /*; the matching */ is line 10. Line 11 is \"use strict\";. Lines 12 to 17 are all one-line comments starting //.\nMaybe this'll be relevant: I'm programming in TypeScipt. My filename is utilModule.ts. After TypeScript transpiles, it has created the file I asked JSCS to look at, utilModule.js. TypeScript has a triple-slash notation that takes action in their context; they reproduce those lines in the .js file with full confidence JS will see them as one-line comments. That's the origin of lines 12-17.\nI hope that's all the information you can use. There's no element of complaint here; you folks are giving a great piece of code to the community. Thanks for the effort!\n. Another vote: I was surprised to receive a report \"requireCamelCaseOrUpperCaseIdentifiers: All identifiers must be camelCase or UPPER_CASE\" for line \"const COUNTRY_US = 'US'\". The identifier there appears to pass the test of \"UPPER_CASE\"; it'd be better for this not to generate a report.\n. ",
    "fxmaxvl": "I'll implement this rule.\nI think, disallowArrayDestructuringReturn is more suitable to this case.\n. oh, yes, you're right.\n([ {a: asdf, b: asdf2} ] = [ {a:1, b:1} ]);\nand this case is also possible.\nI'll fix it\n. lib/errors.js: line 1, col 5, 'assert' is defined but never used. 1 error\nthis not in mine changes, why it happens?\n. what exactly?\n. disallowArrayDestructuringReturn - works only for return cases, \nassignment cases is not part of this rule - if I right understand this :\n\n\n5.3 Use object destructuring for multiple return values, not array destructuring.\nfrom https://github.com/airbnb/javascript#5.3.\n\n\nMaybe we should create a new rule for dissallow array destructuring globally? (disallowArrayDestructuring)\nBy the way, in https://github.com/airbnb/javascript#5.2  - assignment with array destructuring is considered as a good case.\n. how we can check if that value is used in destruction assignment in cases when function declaration and function call with assignment destruction is placed in different modules, files etc? \n. so, what the final behavior for this rule?\nif we can detect both assignment  and function - show error only for assignment, whilst when we can detect only a function - show error for return statement?\nBut I think, display error for both cases (assignment and return) it will be more handy.\n. oh, today i cant finish it, but probably tomorrow it will be done. \n. yes, sure, I rewrote mostly all.\nI removed the logic that detects function declarations and them returns  - because it not make sense for us, only assignment and call expressions are important.\n. I'll start implement these rules soon.\nwhat about naming for this rules ? \n1.requireSpacesInsideImportedObjectBrackets\n2.requireSpacesBeforeImportDestructuredValues\n. > For requireSpacesBeforeImportDestructuredValues, I think http://jscs.info/rule/requireSpaceAfterComma works?\n\nmm, yes its really works.\n\nBraces\n\nOk, requireSpacesInsideImportedBraces\n. review?\n. ok\n. but, how can i write  a correct case with import there? had trouble with it\n. Oh, tnx) I had doubts about the use of real modules for this case\n. ",
    "felipekm": "Great, thanks!\n. ",
    "cookch10": "@hzoo I see that now.  Thank you for the clarification.\n. @markelog None of the tests describe a test where an integer is passed in as an option.\n. Sure, I'll create a PR for it.\n. I also noticed incosistency in the rule / example for disallowSpaceAfterObjectKeys which I will fix as part of the PR.\n. Been on my list (which is a long one).  Will take a look now.\n. Just about there.  Not that it matters in this case since it's a matter of changing comments, but running npm test on my Windows 7 x64 machine hangs / fails:\n``` bash\nc:\\dev\\proj\\node-jscs>npm test\n\njscs@2.9.0 pretest c:\\dev\\proj\\node-jscs\nnpm run lint\njscs@2.9.0 lint c:\\dev\\proj\\node-jscs\njshint . # && node bin/jscs lib test bin publish\n\nERROR: Can't open #\n```\n. ",
    "sholladay": "I am pretty sure @markelog is asking what Node.js reports for the position if it encounters the example code and crashes from a SyntaxError.\nAs in, run the example independent of JSCS and check the stack trace. Presumably he is asking that to rule out the possibility that the problem is simply coming from a bug within the version of Node you have installed.\n. Fair enough. But if anything, I would expect onevar to only apply to var.\nAt any rate, I would be fine with a separate option. Whatever works. :)\nI have limited bandwidth to do this myself, I would appreciate it if someone else took it on. It seems to me like many people are going to want it as ES6 get more adoption.\nIf no one picks it up, I might get a PR together at some point.\n. Well is it crazy to assume no one is writing code like this:\njavascript\nif (x) {\n    // ...\n}\nelse\nif () {\n    // ...\n}\nUntil someone comes along and says they desire to split up else if onto two lines, which I've never seen, I think it would be reasonable for jscs to just assume this is an exception when if is supplied.\n. I did actually see that, but that stops enforcing a space before the curly brace. I still want the curly space enforced for shorthand methods.\n. This does not behave as I desire.\nI want this to error due to lack of space before the curly brace, but it does not with the allExcept hack.\njavascript\nconst foo = {\n    doStuff(){\n        console.log();\n    }\n};\n. Sure, fine, but traditionally there has been no other possible way to use it. Let's not pretend like its name means it will handle all new ways of keying an object without some fresh thinking.\nThe shorthand is for:\n``` javascript\nconst foo = {\n    doStuff : function doStuff() {\n}\n\n};\n```\nIf you want to see doStuff() as a key with some braces immediately after it, fair enough. That's not wrong. But the entirety of the shorthand comes from the method signature. It is not really the same category of thing that I want to reason about here.\nI would most prefer to handle the spacing for these in a ...SpacesInFunction... rule. But if it has to be an exception for keys, so be it. Not worth much debate.\n. So there's no interest in this? I can't contribute a PR anytime soon.\n. ",
    "johnsonw": "any updates on this?\n. ",
    "pm5": "Okay.  I think #2089 fixed most of the missing rules I see.\n. ",
    "gustafl": "Thank you for the quick feedback. I have neither .editorconfig nor .gitattributes in my current project. The View > Line Endings setting is set to Windows. It makes no difference how I set it.\n. Perhaps the error I get is due to a clash of rules in the .jscsrc file? I put the whole file here, in case it helps.\n. ",
    "alexcanessa": "Sorry, I thought it was a JSHint issue, at the very beginning, and I forgot to change JSHint to JSCS.\nIs actually when JSCS compiles\n. Ok, let me explain better:\nI use the grunt-jscs module to format the javascript in my project.\nWhen grunt is \"watching\", it runs the jscs task.\nNow, everytime I save, the watch task runs jscs, which edits the js files. And that's when the bug happens.\nFollowing a gif to show what I'm talking about, hoping could make everything clear.\n\n. Thanks\n{\n   \"disallowDanglingUnderscores\": true,\n   \"disallowIdentifierNames\": [],\n   \"disallowImplicitTypeConversion\": [],\n   \"disallowKeywordsOnNewLine\": [\n      \"catch\",\n      \"else\"\n   ],\n   \"disallowKeywords\": [\n      \"void\",\n      \"with\"\n   ],\n   \"disallowMixedSpacesAndTabs\": true,\n   \"disallowMultipleLineBreaks\": true,\n   \"disallowMultipleLineStrings\": true,\n   \"disallowMultipleSpaces\": true,\n   \"disallowMultipleVarDecl\": \"exceptUndefined\",\n   \"disallowNewlineBeforeBlockStatements\": true,\n   \"disallowPaddingNewlinesBeforeKeywords\": [\n      \"case\",\n      \"typeof\"\n   ],\n   \"disallowPaddingNewlinesInBlocks\": true,\n   \"disallowQuotedKeysInObjects\": true,\n   \"disallowSpaceAfterKeywords\": [\n      \"catch\",\n      \"for\",\n      \"switch\",\n      \"while\"\n   ],\n   \"disallowSpaceAfterObjectKeys\": true,\n   \"disallowSpaceAfterPrefixUnaryOperators\": true,\n   \"disallowSpaceBeforePostfixUnaryOperators\": true,\n   \"disallowSpacesInCallExpression\": true,\n   \"disallowSpacesInsideParentheses\": true,\n   \"disallowTrailingComma\": true,\n   \"disallowTrailingWhitespace\": true,\n   \"disallowYodaConditions\": true,\n   \"maximumLineLength\": 120,\n   \"requireBlocksOnNewline\": true,\n   \"requireCamelCaseOrUpperCaseIdentifiers\": true,\n   \"requireCapitalizedComments\": {\n      \"allExcept\": [\n         \"exported\",\n         \"global\",\n         \"jshint\"\n      ]\n   },\n   \"requireCapitalizedConstructors\": true,\n   \"requireCommaBeforeLineBreak\": true,\n   \"requireCurlyBraces\": [\n      \"catch\",\n      \"do\",\n      \"else\",\n      \"for\",\n      \"if\",\n      \"try\",\n      \"while\"\n   ],\n   \"requireDollarBeforejQueryAssignment\": true,\n   \"requireDotNotation\": true,\n   \"requireKeywordsOnNewLine\": [\n      \"break\",\n      \"case\",\n      \"default\"\n   ],\n   \"requireLineBreakAfterVariableAssignment\": true,\n   \"requireOperatorBeforeLineBreak\": true,\n   \"requirePaddingNewLineAfterVariableDeclaration\": true,\n   \"requirePaddingNewLinesAfterBlocks\": {\n      \"allExcept\": [\n         \"inArrayExpressions\",\n         \"inCallExpressions\",\n         \"inProperties\"\n      ]\n   },\n   \"requirePaddingNewLinesAfterUseStrict\": true,\n   \"requirePaddingNewLinesBeforeExport\": true,\n   \"requirePaddingNewlinesBeforeKeywords\": [\n      \"do\",\n      \"for\",\n      \"function\",\n      \"if\",\n      \"return\",\n      \"switch\",\n      \"try\",\n      \"void\",\n      \"while\",\n      \"with\"\n   ],\n   \"requirePaddingNewLinesBeforeLineComments\": {\n      \"allExcept\": \"firstAfterCurly\"\n   },\n   \"requirePaddingNewLinesInObjects\": true,\n   \"requireParenthesesAroundIIFE\": true,\n   \"requireSemicolons\": true,\n   \"requireSpaceAfterBinaryOperators\": true,\n   \"requireSpaceAfterKeywords\": [\n      \"case\",\n      \"do\",\n      \"else\",\n      \"if\",\n      \"return\",\n      \"try\",\n      \"typeof\"\n   ],\n   \"requireSpaceAfterLineComment\": true,\n   \"requireSpaceBeforeBinaryOperators\": true,\n   \"requireSpaceBeforeBlockStatements\": true,\n   \"requireSpaceBeforeKeywords\": [\n      \"catch\",\n      \"else\"\n   ],\n   \"requireSpaceBeforeObjectValues\": true,\n   \"requireSpaceBetweenArguments\": true,\n   \"requireSpacesInAnonymousFunctionExpression\": {\n      \"beforeOpeningCurlyBrace\": true\n   },\n   \"requireSpacesInConditionalExpression\": true,\n   \"requireSpacesInForStatement\": true,\n   \"requireSpacesInFunctionDeclaration\": {\n      \"beforeOpeningCurlyBrace\": true\n   },\n   \"requireSpacesInFunctionExpression\": {\n      \"beforeOpeningCurlyBrace\": true\n   },\n   \"requireSpacesInFunction\": {\n      \"beforeOpeningCurlyBrace\": true\n   },\n   \"requireSpacesInNamedFunctionExpression\": {\n      \"beforeOpeningCurlyBrace\": true\n   },\n   \"safeContextKeyword\": [\"that\"],\n   \"validateAlignedFunctionParameters\": true,\n   \"validateIndentation\": 3,\n   \"validateLineBreaks\": \"LF\",\n   \"validateNewlineAfterArrayElements\": {\n      \"maximum\": 3\n   },\n   \"validateParameterSeparator\": \", \",\n   \"validateQuoteMarks\": \"'\"\n}\n. Yes it is: there were no actions taken on this issue\n. We'd need both rules, no way to make one winning on the other?\n. ",
    "skabbes": "Hey sorry,\nThe output asked me to post a new issue here, so I did - partially hoping that this was a common issue, and hoping to help triage. After some more debuggin it does happen on both CI and locally.\nThis seems to be the minimal repro:\n``` javascript\nlet a = null;\nlet b = null;\n[a, b] = [1, 2];\n```\nSorry for the weak bug report, hope this helps.\n. ",
    "billen": "My apologies! Thank you for the links!\n. ",
    "ghlk": "Oh no. So sorry Mareklog, I never saw you reply. My apologies. \nHere is my .jscsrc\n```\n{\n  \"esnext\" : true,\n  \"disallowEmptyBlocks\" : true,\n  \"disallowTrailingWhitespace\": true,\n  \"disallowSpaceBeforeComma\": true,\n  \"disallowMixedSpacesAndTabs\" : true,\n  \"disallowSpaceBeforeComma\": true, \n  \"disallowSpacesInFunction\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireTrailingComma\" : {\n    \"ignoreSingleLine\" : true\n  },\n  \"requireCurlyBraces\" : true,\n  \"requireCamelCaseOrUpperCaseIdentifiers\": true,\n  \"requireParenthesesAroundIIFE\": true,\n  \"requireCommaBeforeLineBreak\": true,\n  \"requireDotNotation\": true,\n  \"requireSpaceAfterComma\": true,\n  \"requireSpacesInForStatement\" : true,\n  \"requireSpaceAfterBinaryOperators\" : true,\n  \"requireMultipleVarDecl\": true,\n  \"requireSemiColons\" : true,\n  \"requireVarDeclFirst\": true,\n  \"validateQuoteMarks\" : \"'\", \n  \"maxErrors\" : -1\n}\n```\nI am also seeing issues with \"requireSemiColons\" rule. I get a line that says \"Unsupported rule\"\nAlso, I seem to not see the error with \"validateQuoteMarks\" when I removed \"requireSemiColons\" from my .jscsrc.\nHope this helps, and again sorry for the delayed response.\n. jscs version 2.8.0\nAny other info I can give you?\n. Breakthrough #1. I realized that I mispelled requireSemicolons as requireSemiColons\n\"requireSemiColons\" : true\nSo that error is pebkac. Sorry about that.\nUpdate to 2.9\nUpon first run, I got the same \"validateQuoteMarks\" error. But, I haven't been able to repro that since. I have a suspicion that it has to do with the incorrect spelling of the \"requireSemicolons\" rule.\nSorry for all that! If I find better repro steps I'll file a new bug. Thank you so much for your time and help.\n. ",
    "trystanj": "If that's the case, then var UPPER_CASE = 4; should be invalid for mode strict, not valid (as it is currently listed)\n. ",
    "ChrisCinelli": "I am using atom-jscs. This is my .jscrc:\n{\n  \"preset\": \"airbnb\",\n  \"disallowSpacesInAnonymousFunctionExpression\": null,\n  \"validateLineBreaks\": \"LF\",\n  \"validateIndentation\": 2,\n  \"excludeFiles\": [\"build/**\", \"node_modules/**\"],\n  \"requireSemicolons\" : true,\n  \"esnext\": true,\n  \"validateQuoteMarks\": null\n}\nClass properties without a semicolon are not highlighted with a linting error and not fixed.\n. No, I am using Atom-linter-jscs that apparently has not update yet.\nSee also : https://github.com/AtomLinter/linter-jscs/issues/171 and https://github.com/AtomLinter/linter-jscs/commits/master/package.json\n. ",
    "jamesdwilson": ":+1:\nOn Sun, Jan 31, 2016 at 6:55 PM, Henry Zhu notifications@github.com wrote:\n\nThis should be simple to do but I don't think we want to make a rule just\nto disable the operator (should be a bit more general). Could be a\ndisallowOperators or modify http://jscs.info/rule/disallowNodeTypes to\npass in certain parameters.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/2113#issuecomment-177678232\n.\n\n\nThank you!\n. ",
    "sils": "Not really. So JSCS has certain rules, we'd love to get for each violation the following information:\n1. The rule it violates\n2. The information on how to fix it.\nI understand you have the --fix option but I'd love to get this data correlated with the issues/violations.\nStill confusing? :/\n. ",
    "ambethia": "This is #2118\n. ",
    "jimf": "Unfortunately no. I haven't spent the time to look into it :sweat:. I'll try and take another look.\n. Okay, I've got this squared away. About to head on the road shortly, but I'll have a PR up by EOD.\n. There might be a better way to achieve this. I was fumbling around a bit in the debugger to get to this solution, but the getNextToken(getPrevToken()) business admittedly feels a little clunky. \n. Not sure what to say about the coverage. I've only touched safe-context-keyword.js, and it has 100% coverage.\n\n. Maybe worth explaining as well: despite this test being within a describe.skip, the dynamic it block generation still gets run.\n. +1. I like that, and I've confirmed it works. Would you like me to update my PR, or hold off due to your 3.0 point?\n. ",
    "aemonge": "@lahmatiy Sure !!!\ncat cc-dm.html\n``` html\n\n\n\n\n Hello world \n\n\n\nPolymer(function() { //Create a own scope to store the private functions ;)\n  /* global _, moment */\n  return {\n    /**\n    * The element tag name\n    * @public\n    */\n    is: 'cc-test',\n\n    behaviors: [\n    ],\n\n    /**\n    * The element/class public and private properties.\n    * @public\n    */\n    properties: {\n    },\n  };\n}());\n\n```\ncat .jscsrc\njson\n{\n  \"extract\": [\"*.htm\", \"*.html\"]\n}\ncommand\nbash\n\u03bb datamanagers-us \u2192 jscs test.html                                                                 \u03bb git develop|\u2026 \u2192\nUnexpected token < at test.html :\n     1 |<link rel=\"import\" href=\"../polymer/polymer.html\">\n---------^\n     2 |<link rel=\"import\" href=\"../ilas/cc-ilas.html\">\n     3 |\n. And versions\nbash\n jscs --version                                                                 \u03bb git develop|\u2026 \u2192\n2.10.1\n. @dickp That would be greatly appreciated !!!! I switch to eslint and jshint, as a poor workarround\n. ",
    "krave1986": "Excuse me if I am out of the topic.\nI am completely fresh to javascript code world and my question is: what is --extract option supposed to do when I run jscs command line or in sublime text 3 with sublime linter and sublimeLinter-jscs installed?\nI have a html file and the code is very simple:\n<!DOCTYPE html>\n<html>\n    <head>\n        <script type=\"text/javascript\" src=\"../../react-0.14.7/\"></script>\n        <title>react test</title>\n    </head>\n    <body>\n        <div id=\"intro\"></div>\n        <script type=\"text/babel\">\n            React.render(\n                <h1>Hello, world</h1>,\n                document.getElementById('intro')\n            );\n        </script>\n    </body>\n</html>\nThen I ran the command below and nothing happend\njscs src --esnext --extract *.html\nIs this the correct behavior with --extract option because there is nothing wrong in my code?\nWhat about linting in sublime text with a .jscsrc file exact same as @aemonge 's? \nShould sublimeLinter show some hints on the JSX code in my html file view?\nJust confused about how to make --extract option help me during programming.\n. ",
    "dickp": "I've just run into this issue too.\nThere are two related problems:\n1) If the html file you want to check is in a sub directory (relative to basePath (which can be set through configPath, but that seems to be undocumented)), your extract pattern should be '*/.html'.  This is due to the minimatch matcher being configured with path.resolve (basePath, extractPattern).\n2) The scripts are only extracted when jscs is run recursively on directories.  The file/string checker doesn't handle script extraction at all.  This is a bit of a problem when trying to use gulp-jscs, as that only handles files.\nIf noone is working on a fix for point 2) then I'll look at creating a PR, as that's a bit of a show-stopper for me.\n. Crap.  Markdown ate the most important part of that comment.\nThe extract pattern should be '**/*.html'\n. ",
    "pascalberger": "@markelog I don't have the inside into the code for being able to quickly fix this, and unfortunately don't think have the time to digg into it. Sorry.\n. ",
    "adam-knights": "@markelog I'll try now, heres my ruleset incase anything may be conflicting:\n{\n  \"disallowKeywords\": [\"with\"],\n  \"disallowMixedSpacesAndTabs\": true,\n  \"disallowMultipleVarDecl\": \"exceptUndefined\",\n  \"disallowNewlineBeforeBlockStatements\": true,\n  \"disallowQuotedKeysInObjects\": true,\n  \"disallowSpaceAfterObjectKeys\": true,\n  \"disallowSpaceAfterPrefixUnaryOperators\": true,\n  \"disallowSpacesInsideParentheses\": true,\n  \"disallowTrailingWhitespace\": true,\n  \"disallowParenthesesAroundArrowParam\": true,\n  \"disallowVar\": true,\n  \"esnext\": true,\n  \"maximumLineLength\": 160,\n  \"requireCamelCaseOrUpperCaseIdentifiers\": true,\n  \"requireCapitalizedComments\": true,\n  \"requireCapitalizedConstructors\": true,\n  \"requireCurlyBraces\": true,\n  \"requireEarlyReturn\": true,\n  \"requireEnhancedObjectLiterals\": true,\n  \"requireSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"case\",\n    \"return\",\n    \"try\",\n    \"catch\",\n    \"typeof\"\n  ],\n  \"requireSpaceAfterLineComment\": true,\n  \"requireSpaceAfterBinaryOperators\": true,\n  \"requireSpaceBeforeBinaryOperators\": true,\n  \"requireSpaceBeforeBlockStatements\": true,\n  \"requireSpaceBeforeObjectValues\": true,\n  \"requireSpaceBetweenArguments\": true,\n  \"requireSpacesInFunction\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireShorthandArrowFunctions\": true,\n  \"validateIndentation\": 2,\n  \"validateParameterSeparator\": \", \",\n  \"validateQuoteMarks\": \"'\"\n}\n. The issue was resolved by clearing out the npm and bower directories and re downloading. Unsure whether the issue was direct, or caused by sort sort of caching in brocolli-jscs, either way the rule is good.\n. The issue was resolved by clearing out the npm and bower directories and re downloading. Unsure whether the issue was direct, or caused by sort sort of caching in brocolli-jscs, either way the rule is good.\n. ",
    "xavierchow": "I have the same problem, I'm using syntastic with jscs and it expects message from jscs...\n. I have the same problem, I'm using syntastic with jscs and it expects message from jscs...\n. @ruanyl thanks for reminding, I think the fix is in 3.0 branch, no sure when there'll be a release for it tho.\n. ",
    "ruanyl": "It was actually fixed in https://github.com/jscs-dev/node-jscs/commit/b47f765546cfca93c0aa93a5e9c12d1d731d6e75\nBut it's only in 2.x release, so install via npm install jscs won't get that fix.\n@xavierchow \n. ",
    "m-abs": "I can't get \"jscs --fix\" to work with this .jscsrc. It just outputs the list of style errors.\nIn jscs@2.1.0 --fix works just fine but in jscs@2.2.0, it doesn't work anymore.\njscsrc.txt\n. ",
    "graingert": "@markelog do you know when this will be released?\n. @markelog sweet\n. This is with jscs@3.03\n. @zxqfox any update on this?\n. @zxqfox still fails on latest master :(\n. How do I use the cst repo?\nOn 13 Jun 2016 23:16, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nFixed in cst repo\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/2270#issuecomment-225725274,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAZQTB2yE_LB63hP-qff-qMgq0nJFNLhks5qLdaqgaJpZM4I0arw\n.\n. This is supported by eslint\n. Also jscs doesn't support globs it has to be expanded by the shell\n. still fails when using \".es\" https://github.com/graingert/jscs-error/tree/a7a0778de32084d9b8b1dd75bfb4ca0f92d2356a\n. @markelog also you can use it with the ext flag: ./node_modules/.bin/eslint --ext .es2015.js src, works just fine.\n. @markelog can you reopen this please?\nNot sure what you mean by:\nWell in that case, i.e. *.es2015.js, file extension would be .js, like require(\"path\").extname('test.a.b') would be .b. For example if you filename would be v1.0.js, extension should still be .js.\nYou can mitigate this by not linting the full folder, but using glob like jscs */.es2015.js\n\nBecause in the case of *.es2015.js, the file extension would be .es2015.js and .js.\nrequire('lodash').endsWith('test.a.b', '.a.b') would be true and require('lodash').endsWith('test.b', '.a.b') would be false . Still when you had v1.0.js the extension would be .js. But you could also only test: 0.js files.\n. @markelog this doesn't fix #2273\n. Can you reopen #2273 so I can recreate the PR to fix it?\nOn 21 Jun 2016 9:18 pm, \"Oleg Gaidarenko\" notifications@github.com wrote:\n\nIt's not supposed to\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/2276#issuecomment-227558703,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAZQTCeZNE9t6IyTqursHEg1WQnxRjMrks5qOEb0gaJpZM4I5kA1\n.\n. @markelog nope, that seems to exlude all files.\n. @markelog I know. But it seems to exclude all files\n. Sorry I doubled the mistake and thought that's what you said originally. It still ignores all files\n. Yeah will do\nOn 28 Jun 2016 9:25 pm, \"Oleg Gaidarenko\" notifications@github.com wrote:\nMaybe you could illustrate it with test repo?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/pull/2276#issuecomment-229171838,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAZQTKtKVU7youjy8hV-pMdOROWO0-5-ks5qQYNMgaJpZM4I5kA1\n.\n. \n",
    "erikvold": "sure\n. Hmm I've come to realize that we should just accept a true value, I don't see why someone would require that people use \"use strict\"; in every functions, but not at the file level.  And if it turns out someone can come up with a reason why that is useful then we can add it later.\n. @markelog review?\n. ah nvm this is done! disallowMultipleSpaces\n. Thanks I did forget to update the docs, I'll fix that!\n. @markelog ready for another review\n. ",
    "TrySound": "@markelog I thought you removed it. Not?\n. Thanks\n. ",
    "artoale": "@markelog yeah - what you're saying is correct, but it makes sense to have separate rules for disallowing trailing commas in array literals and in destructuring assignment since reasons for allowing one or the other can be fairly different.\n. ",
    "DullReferenceException": "Is there a 1:1 correlation between reported errors and autofix? I'm not so sure the style checker reports problems, but the autofixer will add a space in one run, then remove it in the next.\n. ",
    "samshull": "Actually, after reviewing, allExcept:['shorthand'] would allow this to pass as expected in es6. You should close this issue.\n. ",
    "fernandopasik": "This behaviour is affecting also to requireMultipleVarDecl='onevar', as it says that the declarations should be joined.\n. It can be reproduced with \"requireObjectKeysOnNewLine\": { \"allExcept\": [ \"sameLine\" ]}\n. The tests failed because of a random 422 with coveralls, there should be a re-run.\n. ",
    "alexschrod": "Turning off auto-fixing made the errors return.\nMy guess as to what happened is that there was a conflict between disallowSpacesInsideParentheses and requireSpacesInsideParentheses, as I had \"preset\": \"jQuery\" at the top of my file, but had only gotten to the disallow* rules. I removed the preset, and so jQuery's requireSpacesInsideParentheses: true conflicted with my disallowSpacesInsideParentheses: true, and jscs just called it quits, I guess?\n. I suggest that it should probably be considered an error state in the configuration and jscs should probably spit out an error message or something instead of just pretending that everything is fine. I'm sure I'm not going to be the only one who accidentally enabled two conflicting rules.\n. ",
    "sebastien-mignot": "@markelog You closed both the issues, but I'm not really sure why. In ES6, \"function*\" IS INDEED a keyword. This is not a \"custom rule\" or whatever, it's a basic syntaxe of the language, and it's supposed to be written like this.\nWhat is the advised way to configure jscs so generators are accepted ?\n. (I meant : while still using requireSpaceAfterKeywords 'function' for all the other cases)\n. ",
    "mikefrancis": "Thanks - yes, that would work. However, there's probably some other cases where people are using chain-able, \"fluent\" APIs and will need to return a value, so I imagine they will have the same problem.\nFor the moment I've just made a variable (which wasn't an issue at all), and will keep my eye on the changelogs and update if this is ever reimagined in the future.\n. ",
    "jamesdixon": "Yes, I ran JSCS against this file:\n``` javascript\n'use strict';\n// Load modules\nconst Boom = require('boom');\nconst Code = require('code');\nconst Hapi = require('hapi');\nconst Hoek = require('hoek');\nconst Lab = require('lab');\n// Test shortcuts\nconst lab = exports.lab = Lab.script();\nconst before = lab.before;\nconst describe = lab.describe;\nconst it = lab.it;\nconst expect = Code.expect;\ndescribe('appointments', () => {\nlet server;\nbefore((done) => {\nrequire('../server')((err, srv) => {\n  if (err) throw err;\n\n  server = srv;\n  done();\n});\n\n});\ndescribe('GET /appointments/{id}', () => {\nconst url = '/appointments/1';\n\ndescribe('with no/invalid credentials', () => {\n\n  const payload = {\n    method: 'GET',\n    url: url,\n  };\n\n  it('CANNOT retrieve an appointment', (done) => {\n\n    server.inject(payload, (res) => {\n      expect(res.statusCode).to.equal(401);\n      done();\n    });\n\n  });\n\n});\n\n});\n});\n```\nRunning JSCS 2.11.0.\n. ",
    "xadh00m": "Thank you!\n. ",
    "Stupidism": "import { combineReducers } from 'redux';\n``` bash\ninternalError: Error running rule requireDollarBeforejQueryAssignment: This is an issue with JSCS and not your codebase.\nPlease file an issue (with the stack trace below) at: https://github.com/jscs-dev/node-jscs/issues/new\nTypeError: Cannot read property 'name' of undefined\n    at /home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:142:30\n    at Array.forEach (native)\n    at Object. (/home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:139:23)\n    at Array.forEach (native)\n    at Object.JsFile.iterateNodesByType (/home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/js-file.js:331:42)\n    at Object.module.exports.check (/home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/rules/require-dollar-before-jquery-assignment.js:72:14)\n    at [object Object]. (/home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/string-checker.js:189:22)\n    at Array.forEach (native)\n    at [object Object].StringChecker._checkJsFile (/home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/string-checker.js:185:31)\n    at [object Object].StringChecker.checkString (/home/stupid/.nvm/versions/node/v5.11.1/lib/node_modules/jscs/lib/string-checker.js:92:14) at src/store/reducers.js :\n     1 |import { combineReducers } from 'redux';\n--------^\n     2 |import { routerReducer as router } from 'react-router-redux';\n     3 |\n```\n. @markelog My jscs was newly installed\n. ",
    "nikini": "Hmm, sure, but it would take a while since I'm going on vacation tomorrow for 10 days :)\n. ",
    "jishi": "https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.15h0zv9yn\nNice dependency to have... for such a simple task. \n. ",
    "benbrown": "babel-core has been updated to fix this issue (5.8.38) \nhttps://github.com/azer/left-pad/issues/4#issuecomment-200068277\n. ",
    "matthewhadley": "@paladox it's not working for me\n```\nnpm install left-pad@0.0.3\nnpm ERR! Darwin 15.4.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"--registry\" \"https://registry.npmjs.org\" \"install\" \"left-pad@0.0.3\"\nnpm ERR! node v0.12.7\nnpm ERR! npm  v2.14.8\nnpm ERR! version not found: left-pad@0.0.3\n```\n. @paladox yeah, I'm still not able to install it and I've verified with a few folks around me. Maybe something hasn't propagated.\n. Working for me now\n$ npm --registry https://registry.npmjs.org install left-pad@0.0.3\nleft-pad@0.0.3 node_modules/left-pad\n. ",
    "louisch": "I am getting a similar error, and what seems to trigger it is an @returns block, which is missing its type. Funnily enough, I can put this on any JSDoc comment in the tab, and it will trigger this error.\ne.g.\n/**\n * <summary>\n *\n * @return <comment>\n(Not @return {type} <comment>)\n. ",
    "brupelo": "@markelog : So, what does that mean? Did you see the .jscsrc i've pasted? I'm already using \"validateIndentation\": 2 .\nWhen you say \"Validates indentation for switch statements and block statements\" you mean this is a jscs limitation won't be fixed? It'd be cool if arrays were indented properly, that way i could use jscs fix and standard wouldn't complain.\n. ",
    "andreyvolokitin": "They have it in their ESLint config, see https://github.com/airbnb/javascript/issues/819\n. ",
    "averetennikov": "Same problem\n. Working correct: \n$ echo \"alert(1);\" > test.js\n$ jscs test.js --preset airbnb\n$ jscs --version\n2.11.0\nBut with custom preset\n$ echo \"alert(1);\" > test.js\n$ curl -o .jscsrc https://raw.githubusercontent.com/jscs-dev/node-jscs/master/presets/airbnb.json\n$ jscs test.js --preset ./.jscsrc\ncall exeption\nUnsupported rule: requireSpacesInsideImportedObjectBraces at test.js :\n     1 |alert(1);\n--------^\n     2 |\n. See terminal\nhttp://take.ms/LP8uP\n. I check airbnb preset in installed jscs package.\nThis rule not found. \n$cat /usr/local/lib/node_modules/jscs/presets/airbnb.json | grep -i 'requireSpacesInsideImportedObjectBraces'\n. Mac OS X (El Captain)\n$npm install -g jscs\n...\njscs@2.11.0 /usr/local/lib/node_modules/jscs\n$cat /usr/local/lib/node_modules/jscs/presets/airbnb.json | grep -i 'requireSpacesInsideImportedObjectBraces'\n$\nBut\n$cat /usr/local/lib/node_modules/jscs/presets/airbnb.json | grep -i 'requirePaddingNewLinesAfterBlocks\"'\n\"requirePaddingNewLinesAfterBlocks\": true,\n. No. Differrent string for search: requireSpacesInsideImportedObjectBraces vs requirePaddingNewLinesAfterBlocks\n. Oh.\nIn Terminal:\ncat /usr/local/lib/node_modules/jscs/package.json\nOutput (sorry, big text):\n{\n  \"author\": {\n    \"name\": \"Marat Dulin\",\n    \"email\": \"mdevils@yandex.ru\",\n    \"url\": \"https://github.com/jscs-dev/node-jscs/graphs/contributors\"\n  },\n  \"description\": \"JavaScript Code Style\",\n  \"name\": \"jscs\",\n  \"version\": \"2.11.0\",\n  \"main\": \"lib/checker\",\n  \"homepage\": \"http://jscs.info\",\n  \"keywords\": [\n    \"code style\",\n    \"formatter\",\n    \"lint\",\n    \"linter\",\n    \"style guide\",\n    \"validate\"\n  ],\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jscs-dev/node-jscs.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/jscs-dev/node-jscs/issues\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"hzoo\",\n      \"email\": \"hi@henryzoo.com\"\n    },\n    {\n      \"name\": \"markelog\",\n      \"email\": \"markelog@gmail.com\"\n    },\n    {\n      \"name\": \"mdevils\",\n      \"email\": \"mdevils@yandex.ru\"\n    },\n    {\n      \"name\": \"mikesherov\",\n      \"email\": \"mike.sherov@gmail.com\"\n    },\n    {\n      \"name\": \"mrjoelkemp\",\n      \"email\": \"joel@mrjoelkemp.com\"\n    },\n    {\n      \"name\": \"qfox\",\n      \"email\": \"zxqfox@gmail.com\"\n    }\n  ],\n  \"engines\": {\n    \"node\": \">= 0.10.0\"\n  },\n  \"dependencies\": {\n    \"babel-jscs\": \"^2.0.0\",\n    \"chalk\": \"~1.1.0\",\n    \"cli-table\": \"~0.3.1\",\n    \"commander\": \"~2.9.0\",\n    \"escope\": \"^3.2.0\",\n    \"esprima\": \"~2.7.0\",\n    \"estraverse\": \"^4.1.0\",\n    \"exit\": \"~0.1.2\",\n    \"glob\": \"^5.0.1\",\n    \"htmlparser2\": \"3.8.3\",\n    \"js-yaml\": \"~3.4.0\",\n    \"jscs-jsdoc\": \"^1.3.1\",\n    \"jscs-preset-wikimedia\": \"~1.0.0\",\n    \"jsonlint\": \"~1.6.2\",\n    \"lodash\": \"~3.10.0\",\n    \"minimatch\": \"~3.0.0\",\n    \"natural-compare\": \"~1.2.2\",\n    \"pathval\": \"~0.1.1\",\n    \"prompt\": \"~0.2.14\",\n    \"reserved-words\": \"^0.1.1\",\n    \"resolve\": \"^1.1.6\",\n    \"strip-bom\": \"^2.0.0\",\n    \"strip-json-comments\": \"~1.0.2\",\n    \"to-double-quotes\": \"^2.0.0\",\n    \"to-single-quotes\": \"^2.0.0\",\n    \"vow\": \"~0.4.8\",\n    \"vow-fs\": \"~0.3.4\",\n    \"xmlbuilder\": \"^3.1.0\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^12.0.0\",\n    \"chai\": \"^3.3.0\",\n    \"coveralls\": \"~2.11.2\",\n    \"has-ansi\": \"~2.0.0\",\n    \"jshint\": \"~2.8.0\",\n    \"mocha\": \"^2.2.0\",\n    \"regenerate\": \"~1.2.1\",\n    \"rewire\": \"^2.3.1\",\n    \"sinon\": \"^1.13.0\",\n    \"sinon-chai\": \"^2.8.0\",\n    \"unicode-7.0.0\": \"~0.1.5\",\n    \"unit-coverage\": \"^4.0.1\",\n    \"xml2js\": \"~0.4.4\"\n  },\n  \"bin\": {\n    \"jscs\": \"./bin/jscs\"\n  },\n  \"unit-coverage\": {\n    \"common\": [\n      \"-a\",\n      \"lib\",\n      \"-a\",\n      \"test\",\n      \"-s\",\n      \"lib/**/*.js\",\n      \"-t\",\n      \"test/specs/**/*.js\",\n      \"-e\",\n      \"lib/cli-config.js\",\n      \"-S\",\n      \"relative\",\n      \"-O\",\n      \"sources=lib\",\n      \"-O\",\n      \"tests=test/specs\"\n    ]\n  },\n  \"scripts\": {\n    \"lint\": \"jshint . && node bin/jscs lib test bin publish\",\n    \"pretest\": \"npm run lint\",\n    \"test\": \"mocha --color\",\n    \"autofix-tests\": \"node test/scripts/integration.js\",\n    \"coverage\": \"unit-coverage run -p common\",\n    \"coverage-html\": \"unit-coverage run -p common -r html -o coverage.html\",\n    \"coveralls\": \"unit-coverage run -p common -r lcov -o out.lcov && cat out.lcov | coveralls\",\n    \"browserify\": \"browserify --standalone JscsStringChecker lib/string-checker.js -o jscs-browser.js\",\n    \"changelog\": \"git log `git describe --tags --abbrev=0`..HEAD --pretty=format:' * %s (%an)' | grep -v 'Merge pull request'\",\n    \"release\": \"node publish/prepublish && npm test && npm publish\",\n    \"postpublish\": \"node publish/postpublish\",\n    \"travis\": \"npm run test && npm run autofix-tests && npm run coveralls\"\n  },\n  \"files\": [\n    \"bin\",\n    \"lib\",\n    \"patterns\",\n    \"presets\",\n    \"LICENSE\",\n    \"jscs-browser.js\"\n  ],\n  \"gitHead\": \"8d25f6dddcb1e4f0cfb1bfeefd297a612b77e86b\",\n  \"_id\": \"jscs@2.11.0\",\n  \"_shasum\": \"6e11ef0caaa07731f9dcc2b2b27d8ecee1ddbcb6\",\n  \"_from\": \"jscs@latest\",\n  \"_npmVersion\": \"3.3.12\",\n  \"_nodeVersion\": \"5.1.0\",\n  \"_npmUser\": {\n    \"name\": \"markelog\",\n    \"email\": \"markelog@gmail.com\"\n  },\n  \"dist\": {\n    \"shasum\": \"6e11ef0caaa07731f9dcc2b2b27d8ecee1ddbcb6\",\n    \"tarball\": \"https://registry.npmjs.org/jscs/-/jscs-2.11.0.tgz\"\n  },\n  \"_npmOperationalInternal\": {\n    \"host\": \"packages-13-west.internal.npmjs.com\",\n    \"tmp\": \"tmp/jscs-2.11.0.tgz_1456947181906_0.41519897105172276\"\n  },\n  \"directories\": {},\n  \"_resolved\": \"https://registry.npmjs.org/jscs/-/jscs-2.11.0.tgz\",\n  \"readme\": \"ERROR: No README data found!\"\n}\nSee dist.\nRepo https://registry.npmjs.org/jscs/-/jscs-2.11.0.tgz has incorrect preset for airbnb :(\n$curl -o jscs-2.11.0.tgz https://registry.npmjs.org/jscs/-/jscs-2.11.0.tgz\n$gunzip -c jscs-2.11.0.tgz | tar xopf -\n$cat package/presets/airbnb.json | grep -i 'requireSpacesInsideImportedObjectBraces'\n$\nRule not found. And default preset working correct.\nLOL\n. Ok. \nPreset from master branch not working with 2.x branch. Right?\n. It's ok?\nDefault branch from github is master. \nBut NPM downloaded 2.x version by default.\nPresets from master not working with 2.x.\nReally?\nIt breaks the brain.\n. Yep. It's confused.\nBecause 'master'  branch should be used as default-active-branch.\nOpen express.js master branch.\nSee package.json. \nVersion is 4.13.4.\nAnd NPM downloaded files one to one as master.\nAnd it's correct. And not confused.\nThx.\n. ",
    "alexpts": "I exec: \njscs -c .jscsrc server.js\nI try run:\njscs  server.js --preset airbnb\nResult: \"Unsupported rule: requireSpacesInsideImportedObjectBraces at server.js \"\nUnsupported rule: requireSpacesInsideImportedObjectBraces at server.js :\n     1 |alert(1);\n--------^\n     2 |\n. How many comments :)\nOk, I get config from release commit.\nThanks.\n. ",
    "DarkArc": "I did not, I'm using v2.11.0.\n. @markelog I didn't get a chance to run this with master, but I just tried this with 3.0.2 (which is effectively master at the moment), it's still a problem.\n. Found another case:\nvar a = function() {\n  return function() {\n      return true;\n  };\n};\nbecomes:\nvar a = function() {\n  return function() {\n      return true;\n    };\n};\n. ",
    "bcowgill": "I have seen a post saying esprima-fb is deprecated so I removed that from the jscs config and npm removed it as well, but still get the same error.\n. Adding this line to the top of the source code\n// jscs:disable disallowUnusedParams\nStill causes the stack overflow, but does show other errors in the file.\n. ",
    "artlogic": "There are a few other problems. The trailing backticks in all the links, and this particular rule is indeed singular on the site: http://jscs.info/rule/requireImportAlphabetized\n. ",
    "richadr": "I can't speak for the sublime plugin, but I'm using jscs v3 from the command line.  gulp-jscs is stuck on jscs v2 (see its package.json), while a bug was fixed in jscs v3.\nThe bug was in the following line in the source for the rule checker:\n(v2) this._includeEmptyLines = options.allExcept.indexOf('emptyLines') > -1;\n(v3) this._includeEmptyLines = options.allExcept.indexOf('emptyLines') === -1;\nSolution for gulp-jscs is to upgrade to v3.\n. ",
    "jblandry": "Thanks !\n. ",
    "louh": "This has been happening for me for any version in the 3.0.x series.\nI went through my codebase and ran jscs on each file until I discovered which file was causing the error to occur, and then through each function inside that file until I narrowed down the root cause. It seems that this object destructuring assignment inside of a function parameter causes the error: https://github.com/tangrams/tangram-play/blob/master/src/js/map/map.js#L80\nThis is valid ES6 and has been addressed before.\nI created a very minimal test case so you can duplicate the error:\njs\nexport function myFunction ({ foo = false, bar = null } = {}) {\n    console.log(foo, bar);\n}\nSee here:\nhttps://gist.github.com/louh/0b2e74228c141afc4a34b70d3e944254\n. ",
    "MadRabbit": "still happening in 3.0.3\n. ",
    "Yixi": "I have same problem use with react\n. ",
    "Grygir": "Same error for static property definition (in  jscs 3.0.3)\njavascript\nclass Bar {\n    static test = {\n        foo: 'bar'\n    };\n}\nThat seems to be valid code.\nTypeError: Cannot read property 'replace' of undefined\n    at renderLine (/var/www/test/node_modules/jscs/lib/errors.js:266:16)\n    at Object.Errors.explainError (/var/www/test/node_modules/jscs/lib/errors.js:197:13)\n    at /var/www/test/node_modules/jscs/lib/reporters/console.js:16:36\n    at Array.forEach (native)\n    at /var/www/test/node_modules/jscs/lib/reporters/console.js:14:35\n    at Array.forEach (native)\n    at Object.module.exports [as writer] (/var/www/test/node_modules/jscs/lib/reporters/console.js:9:22)\n    at /var/www/test/node_modules/jscs/lib/cli.js:149:18\n    at Array.<anonymous> (/var/www/test/node_modules/vow/lib/vow.js:712:56)\n    at Immediate.callFns [as _onImmediate] (/var/www/test/node_modules/vow/lib/vow.js:23:35)\n. ",
    "r-murphy": "I got the same error when using esnext bind expression, which doesn't seem to be supported in cst used by jscs 3.0. Whenever there is a parse error (error.rule === \"parseError\"), the error has no line number.\nThe fixed I applied temporarily to my jscs install was this, which a least prints the underlying reason for the parse error. I'm not sure if that's the best place for the fix or if it should be as soon as the parse error is detected.\njs\nexplainError: function(error, colorize) {\n  if (typeof error.line === 'undefined') {\n    //probably a parseError, so include the rule name\n    return formatErrorMessage(error.rule + ': ' + error.message, this.getFilename(), colorize);\n  }\n  //... the rest \n}\n. I got the same error when using esnext bind expression, which doesn't seem to be supported in cst used by jscs 3.0. Whenever there is a parse error (error.rule === \"parseError\"), the error has no line number.\nThe fixed I applied temporarily to my jscs install was this, which a least prints the underlying reason for the parse error. I'm not sure if that's the best place for the fix or if it should be as soon as the parse error is detected.\njs\nexplainError: function(error, colorize) {\n  if (typeof error.line === 'undefined') {\n    //probably a parseError, so include the rule name\n    return formatErrorMessage(error.rule + ': ' + error.message, this.getFilename(), colorize);\n  }\n  //... the rest \n}\n. ",
    "UnsungHero97": "pulling in the latest changes from master fixed this issue for me:\n\"devDependencies\": {\n  ...\n  \"jscs\": \"git:github.com/jscs-dev/node-jscs.git\",\n  ...\n}\n. @zxqfox cool, thanks!\n. @hzoo thanks for the quick response! so what's the plan going forward? should I expect Flow support in JSCS v3, or is that too big of a feature for a product at EOL?\n. will the changes to CST eventually go in ESLint, when ESLint switches over to CST? if so, it seems like a good use of time for this to eventually be implemented :)\n. ",
    "szebrowski": "For me problem still occurs. Even on the jscs-dev/node-jscs version. It's hard for me to paste example code because project is too large.\n. I will try it on Monday (just finished work;)\nOn 20 May 2016 4:06 pm, \"Alexej Yaroshevich\" notifications@github.com\nwrote:\n\nWe gonna publish 3.0.4 in a few days with a fix (we hope). Can you please\ntry master branch?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/2219#issuecomment-220615013\n. Unfortunatly, I still get 'replace' of undefined error. :(\n\nOn Fri, May 20, 2016 at 4:17 PM Sebastian mergol@gmail.com wrote:\n\nI will try it on Monday (just finished work;)\nOn 20 May 2016 4:06 pm, \"Alexej Yaroshevich\" notifications@github.com\nwrote:\n\nWe gonna publish 3.0.4 in a few days with a fix (we hope). Can you please\ntry master branch?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/jscs-dev/node-jscs/issues/2219#issuecomment-220615013\n. Most basic example to get the error:\n\n\n```\nvar m = require('mori');\nfunction getTrNid(trNid, saveRes) {\n  return trNid < 0\n        ? m.getIn(saveRes, [parseInt(trNid), 'nid'])\n        : trNid;\n};\nmodule.exports = getTrNid;\n```\nResults in:\n```\n~/delme/node-jscs/bin/jscs -x --preset airbnb src/js/model/FlightListLeg/getTrNid.js \nvalidateIndentation: Invalid indentation character:      at src/js/model/FlightListLeg/getTrNid.js :\n     3 |function getTrNid(trNid, saveRes) {\n     4 |  return trNid < 0\n     5 |  ? m.getIn(saveRes, [parseInt(trNid), 'nid'])\n--------^\n     6 |  : trNid;\n     7 |};\nvalidateIndentation: Invalid indentation character:      at src/js/model/FlightListLeg/getTrNid.js :\n     4 |  return trNid < 0\n     5 |  ? m.getIn(saveRes, [parseInt(trNid), 'nid'])\n     6 |  : trNid;\n--------^\n     7 |};\n     8 |\nTypeError: Cannot read property 'replace' of undefined\n    at renderLine (/home/x/delme/node-jscs/lib/errors.js:267:16)\n    at Object.Errors.explainError (/home/x/delme/node-jscs/lib/errors.js:198:13)\n    at /home/x/delme/node-jscs/lib/reporters/console.js:16:36\n    at Array.forEach (native)\n    at /home/x/delme/node-jscs/lib/reporters/console.js:14:35\n    at Array.forEach (native)\n    at Object.module.exports [as writer] (/home/x/delme/node-jscs/lib/reporters/console.js:9:22)\n    at /home/x/delme/node-jscs/lib/cli.js:149:18\n    at Array. (/home/x/delme/node-jscs/node_modules/vow/lib/vow.js:712:56)\n    at Immediate.callFns [as _onImmediate] (/home/x/delme/node-jscs/node_modules/vow/lib/vow.js:23:35)\n```\n. ",
    "wulfsolter": "Failing on local machine as well with same symptoms.\n. Manually added node_modules to my JSCS ignores in .jscsrc\n{\n    ...\n    excludeFiles: [\n        ...\n        \"node_modules/**\",\n        ...\n    ],\n    ...\n}\n. ",
    "poohitan": "But it worked fast and well with the same file in version 2.11...\nHere is sample code: https://gist.github.com/poohitan/2019a10d69140799b8953f79964d1d67 \n. Can you please let me know, if it is considered as a bug and will be fixed in future? Or is it an expected behaviour?\nHope you will consider it as a bug :)\n. ",
    "sverweij": "With the latest babel version it seems to work OK\n```\n$npm i -g babel-cli\n(...)\n$ babel --version\n6.7.7 (babel-core 6.7.7)\n$ babel multistr-with-hash-NOK.js\nvar multilinestring = \"x\\n\\\n\";\nconsole.log(multilinestring);\n$ babel multistr-without-hash-OK.js\nvar multilinestring = \"x\\n\\\ny\";\nconsole.log(multilinestring);\n```\nThe babel (core) version installed with CST is 6.6.1 - so if babel is the culprit upgrading might be a solution?\n. ",
    "ErisDS": "Thanks @markelog \ud83d\udc4d \n. ",
    "kylepaulsen": "I think Travis is complaining about things unrelated to my PR. Can someone trigger a rebuild?\n. The problem I was having was when you use a global .jscsrc file that has validateIndentation: 4 in it, but then you edit a file that uses tabs. Jscs will report incorrect indentation on every single line even though the indentation looks correct. Also there's the rules disallowTabs and disallowMixedSpacesAndTabs to take on related problems.\nAlso is the test not passing or is my code not working? I just tried it with and without and it behaved as expected.\n. Oh! I didn't test the code on that ticket. I just assumed my issue was the same... Oops... maybe my issue is different...\n(edit)\nYeah it appears that my problem is different. That issue is about having a function that should belong on the line above, be on a lower line. I don't think it has anything to do with tabs. .jscs seems to think you need to indent again.\nSo I guess this whole thing depends on if validateIndentation is supposed to also disallow tabs if it is a number. If this was intended, I wish there was a way to allow tabs to be OK for the rare occasion.\n. Thinking about moving this functionality under a different setting. Maybe something like:\n\"validateIndentation\": {\n    \"value\": 4,\n    \"allowTabs\": true\n}\nThoughts?\n. No. Absolutely not. I'm not saying mix tabs and spaces in the same file (or even the same project). I'm talking about working on a different project (maybe one you pulled from github) and that uses tabs.\nAgain, I have a global .jscsrc file (in my home dir), so my linter settings take over for this project I pulled.\nAlso there is always the setting \"disallowMixedSpacesAndTabs\".\n. @AuthorProxy , Ideally yes, but in my case, it wasn't my project and they probably don't know jscs exists.\n. I'm not sure I understand what you mean, but all's I'm suggesting is that jscs figures out what indentation is intended in the document. Maybe it looks for what comes first: tabs or spaces, and then when it sees that, it assumes the rest of the document should use that kind of indentation. I just want to clarify: I want consistent indentation, but I also want the rule to adjust to whatever kind of indentation seems to be the main indentation of the file.\n. @AuthorProxy I could, but three things:\n- The project owner might not want to have that file in their project.\n- I have to manually do this for every project I fork\n- Wouldn't it be nice to just have an option to look for the first indentation in a file and have the linter use that as the validateIndentation setting?\nI have decided that this PR and my initial thoughts of how this would work are incorrect. If I ever have time, I'll make a PR for an option to check for the first indentation in a file and then error on inconsistent indentations thereafter - this is what I really wanted in the first place I think.\n. ",
    "srhwork": "@zxqfox I'm using that syntax just for fun...nothing special.\nAfter trying a lot, I managed to remove the warning in this way:\n1.- Remove the \"@class\" property of the class block\n2.- Using the classic syntax for function properties declaration \"from render = () => {}; to render() {}\"\n3.- Adding \"@return\" property to blocks for functions with returning value\n4.- Declare statics properties outside of the class\n```\n/\n * Error 404 component\n */\nclass NotFound extends Component {\n    /\n     * React DOM rendering\n     \n     * @return     {Object}  React DOM object\n     /\n    render() {\n        return (\n            \n\n404\n\n\n Oops! P\u00e1gina no encontrada.\n                        \n\n\n                            La p\u00e1gina que ha solicitado no se encuentra disponible, esto puede ser debido\n                            a que la ruta ha cambiado, o la direcci\u00f3n que ha escrito es incorrecta.\n                        \n\n\n\n        );\n    }\n}\nNotFound.propTypes = {\n   children: PropType.object.isRequired\n}\n```\n. ",
    "karlhorky": "@zxqfox since your issue was addressed in cst/cst#119, can this be fixed by updating cst to 0.2.0?\n. I'm also getting this issue with propTypes in React components:\n``` js\nimport React from 'react';\n// ...\nexport default class App extends React.Component {\n  static propTypes = {\n    children: React.PropTypes.element.isRequired\n  };\n// ...\n}\n```\nThis is using the latest version of jscs by specifying the repo in package.json:\njson\n{\n  \"devDependencies\": {\n    \"jscs\": \"jscs-dev/node-jscs\"\n  }\n}\nOutput:\n``` bash\nCannot iterate using ClassProperty at ./ui/App.js :\n     1 |import React from 'react';\n--------^\n     2 |\n     3 |\n1 code style error found.\n```\nIf I remove the class property it runs through without errors.\n. @markelog Thanks!\n. ",
    "mtpultz": "Hi @markelog, yah I have \"jscs-jsdoc\": \"^2.0.0\", installed, but I noticed I had this in my config as well:\n\"plugins\": [\n    \"jscs-jsdoc\"\n  ],\nRemoving this stops the error, I would assume this is needed and without it the jsDoc tests are not run, but I don't see this in the presets for Google or others, and they include jsDoc.  I pulled it from the example at https://github.com/jscs-dev/jscs-jsdoc.\n. ",
    "petrelselina": "I mean write an array in single line, thx.\n. ",
    "pascalpp": "I'm new to this codebase, but I've been digging into it, trying to figure this out. I'm not exactly sure what's going on. At the moment, I think it has something to do with TokenIndex._buildIndex which is where the __loc gets assigned to each token. (Those __loc values are the first time I can see erroneous line numbers show up in the output.) I'm just dropping console.logs in the source, not sure if there's a better way to track this down.\n. ",
    "epsitec": "I don't understand how this issue with too many long lines being reported has anything to do with memory consumption. Setting the maximumLineLength to 200 (in my case) made the problem disappear.\nThe lines verified by JSCS are not very long, so I am surprised that you classified this as a memory issue. Do you need additional source files which exhibit the problem?\n. ",
    "gocreating": "@markelog I met the problem in atom's package linter-jscs@4.0.0. It seems using node-jscs@3.0.3.\nHere is the broken code in the screenshot: userReducer.js\n. ",
    "dmartinezg": "Hi @markelog, I thought the stack trace was enough, I apologize for that.\nThis code seems to break it (apparently the default parameter value is the problem):\n``` javascript\nlet _    = require('lodash');\nmodule.exports = function assetRepository() {\n  function get(context, where, options = {}) {\n  }\n};\n```\nThanks for looking into this\n. ",
    "thegranddesign": "BTW, as far as I can tell, this only happens when there is an error in the requireAlignedObjectValues check.\n. ",
    "crucialfelix": "Fair enough. Looking forward to the new eslint. Jscs has been very helpful. Thanks !\n. ",
    "Tathanen": "Is eslint what will be supported moving forward? I wasn't aware jscs was being eol'd.\n. Got it, thanks!\n. ",
    "unformatt": "Appears to be fixed in 3.0\n. ",
    "cashburn": "This is really a problem in cst/Babylon, but if anyone wants to just ignore it in JSCS temporarily (it at least gave me a chance to do a JSCS --fix), you can add this to validate-indentation.js: 500.\nif (i === 0 && line.length === 1 && line.charCodeAt(0) === 65279) {\n    continue;\n}. ",
    "martndemus": "Closing, belongs here: https://github.com/cst/cst/issues/118\n. ",
    "purplecones": "I still get this issue. See related issue filed with AtomLinter https://github.com/AtomLinter/linter-jscs/issues/282 for more info.\nSample Code:\n``` javascript\nimport shortid from 'shortid';\nconst rootResolvers = () => {\n  return {\n    Query: {\n      async test(root, args, context) {\n        return test;\n      },\n    },\n  };\n};\nexport default rootResolvers;\n```\nJSCS CLI Export:\n```\njscs resolvers.js -c airbnb.json\nExpected token type \"Punctuator\" but \"Identifier\" found at resolvers.js :\n     1 |import shortid from 'shortid';\n--------^\n     2 |\n     3 |const rootResolvers = () => {\n1 code style error found.\n```\njscs --version\n3.0.7\n. I am using https://atom.io/packages/linter-jscs v4.0.4\n\n```\nimport {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n} from 'redux';\nfunction createReduxStore(options) {\n  const {\n    reducers = {},\n    middlewares = [],\n  } = options;\nif (!createStore || !combineReducers || !applyMiddleware) {\n    const error = 'Redux is missing. Please install Redux, npm install --save redux';\n    throw new Error(error);\n  }\nif (Object.keys(reducers).length > 0) {\n    const combinedReducers = combineReducers(reducers);\n    const Store = createStore(\n      combinedReducers,\n      applyMiddleware(...middlewares)\n    );\nreturn Store;\n\n}\nreturn null;\n}\nfunction reduxMiddleware(options) {\n  const {\n    reducers = {},\n    middlewares = [],\n    storeName = 'Store',\n  } = options;\nreturn {\n    moduleWillLoad(module) {\n      if (module.reducers) {\n        if (typeof reducers !== 'object' || typeof module.reducers !== 'object') {\n          const message = \"Module's reducers field should be a map of reducers.\";\n          throw new Error(message);\n        }\n    const allReducers = {\n      ...module.reducers,\n      ...reducers,\n    };\n\n    this._reduxReducers = allReducers;\n  }\n},\nmoduleWillInit() {\n  let allReducers = this._reduxReducers;\n  let allMiddlewares = [...middlewares];\n\n  if (this._apolloReducer) {\n    allReducers = {\n      ...allReducers,\n      apollo: this._apolloReducer,\n    };\n  }\n\n  if (this._apolloMiddleware) {\n    allMiddlewares = [\n      ...allMiddlewares,\n      this._apolloMiddleware,\n    ];\n  }\n\n  const reduxStore = createReduxStore({\n    reducers: allReducers,\n    middlewares: allMiddlewares,\n  });\n\n  this.context[storeName] = reduxStore;\n  this.context.dispatch = reduxStore.dispatch;\n},\n\n};\n}\nexport default reduxMiddleware;\n```\n. ",
    "handane123": "Just found that it is the jscs-formatter plugin's bug.\n. ",
    "sharesynth": "For anyone else that runs into this the solution is comments should not be placed above 'use strict';\n. ",
    "cscott": "No, I'm getting the same thing in a clean build on travis.  One of your dependencies broke w/ the jscs 3.0.5 release it seems.\n. This fails:\nhttps://travis-ci.org/cscott/node-libzim/jobs/139508554\nThis (yesterday) succeeded:\nhttps://travis-ci.org/cscott/node-libzim/jobs/139420369\nWas:\njscs@3.0.5 node_modules/jscs\n\u251c\u2500\u2500 to-double-quotes@2.0.0\n\u251c\u2500\u2500 estraverse@4.2.0\n\u251c\u2500\u2500 to-single-quotes@2.0.0\n\u251c\u2500\u2500 strip-json-comments@1.0.4\n\u251c\u2500\u2500 reserved-words@0.1.1\n\u251c\u2500\u2500 natural-compare@1.2.2\n\u251c\u2500\u2500 vow@0.4.12\n\u251c\u2500\u2500 pathval@0.1.1\n\u251c\u2500\u2500 jscs-preset-wikimedia@1.0.0\n\u251c\u2500\u2500 commander@2.9.0 (graceful-readlink@1.0.1)\n\u251c\u2500\u2500 exit@0.1.2\n\u251c\u2500\u2500 xmlbuilder@3.1.0\n\u251c\u2500\u2500 strip-bom@2.0.0 (is-utf8@0.2.1)\n\u251c\u2500\u2500 chalk@1.1.3 (escape-string-regexp@1.0.5, supports-color@2.0.0, ansi-styles@2.2.1, has-ansi@2.0.0, strip-ansi@3.0.1)\n\u251c\u2500\u2500 minimatch@3.0.2 (brace-expansion@1.1.5)\n\u251c\u2500\u2500 glob@5.0.15 (path-is-absolute@1.0.0, inherits@2.0.1, once@1.3.3, inflight@1.0.5)\n\u251c\u2500\u2500 cli-table@0.3.1 (colors@1.0.3)\n\u251c\u2500\u2500 vow-fs@0.3.5 (vow-queue@0.4.2, uuid@2.0.2, glob@4.5.3)\n\u251c\u2500\u2500 resolve@1.1.7\n\u251c\u2500\u2500 jscs-jsdoc@2.0.0 (jsdoctypeparser@1.2.0, comment-parser@0.3.1)\n\u251c\u2500\u2500 htmlparser2@3.8.3 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.14, domutils@1.5.1)\n\u251c\u2500\u2500 js-yaml@3.4.6 (inherit@2.2.3, esprima@2.7.2, argparse@1.0.7)\n\u251c\u2500\u2500 prompt@0.2.14 (revalidator@0.1.8, pkginfo@0.4.0, read@1.0.7, utile@0.2.1, winston@0.8.3)\n\u251c\u2500\u2500 jsonlint@1.6.2 (nomnom@1.8.1, JSV@4.0.2)\n\u251c\u2500\u2500 lodash@3.10.1\n\u2514\u2500\u2500 cst@0.4.0 (babylon@6.8.1, source-map-support@0.4.0, babel-types@6.10.2, babel-runtime@6.9.2)\nNow is:\njscs@3.0.5 node_modules/jscs\n\u251c\u2500\u2500 to-double-quotes@2.0.0\n\u251c\u2500\u2500 estraverse@4.2.0\n\u251c\u2500\u2500 to-single-quotes@2.0.0\n\u251c\u2500\u2500 strip-json-comments@1.0.4\n\u251c\u2500\u2500 reserved-words@0.1.1\n\u251c\u2500\u2500 natural-compare@1.2.2\n\u251c\u2500\u2500 vow@0.4.12\n\u251c\u2500\u2500 pathval@0.1.1\n\u251c\u2500\u2500 jscs-preset-wikimedia@1.0.0\n\u251c\u2500\u2500 exit@0.1.2\n\u251c\u2500\u2500 commander@2.9.0 (graceful-readlink@1.0.1)\n\u251c\u2500\u2500 xmlbuilder@3.1.0\n\u251c\u2500\u2500 strip-bom@2.0.0 (is-utf8@0.2.1)\n\u251c\u2500\u2500 chalk@1.1.3 (escape-string-regexp@1.0.5, ansi-styles@2.2.1, supports-color@2.0.0, strip-ansi@3.0.1, has-ansi@2.0.0)\n\u251c\u2500\u2500 minimatch@3.0.2 (brace-expansion@1.1.5)\n\u251c\u2500\u2500 glob@5.0.15 (path-is-absolute@1.0.0, inherits@2.0.1, inflight@1.0.5, once@1.3.3)\n\u251c\u2500\u2500 cli-table@0.3.1 (colors@1.0.3)\n\u251c\u2500\u2500 vow-fs@0.3.5 (vow-queue@0.4.2, uuid@2.0.2, glob@4.5.3)\n\u251c\u2500\u2500 resolve@1.1.7\n\u251c\u2500\u2500 jscs-jsdoc@2.0.0 (jsdoctypeparser@1.2.0, comment-parser@0.3.1)\n\u251c\u2500\u2500 js-yaml@3.4.6 (inherit@2.2.3, esprima@2.7.2, argparse@1.0.7)\n\u251c\u2500\u2500 htmlparser2@3.8.3 (domelementtype@1.3.0, entities@1.0.0, domhandler@2.3.0, readable-stream@1.1.14, domutils@1.5.1)\n\u251c\u2500\u2500 prompt@0.2.14 (revalidator@0.1.8, pkginfo@0.4.0, read@1.0.7, utile@0.2.1, winston@0.8.3)\n\u251c\u2500\u2500 jsonlint@1.6.2 (nomnom@1.8.1, JSV@4.0.2)\n\u251c\u2500\u2500 lodash@3.10.1\n\u2514\u2500\u2500 cst@0.4.1 (source-map-support@0.4.0, babylon@6.8.1)\nIt seems to be cst@0.4.1 which kills jscs, it dropped its babel deps.\n. Root cause seems to be https://github.com/cst/cst/issues/111, which dropped support for node < 4.\n. ",
    "acburdine": "It's also what's breaking the jscs master travis tests here\n. It works now, thank you!\n. ",
    "pixelpax": "OK, well I suppose it isn't a problem with the JavaScript dialect, but the issue remains that when using \"requireSpaceBeforeDestructuredValues\": true on jscs 3.0.5, I get the warning: Unknown JSCS option name and the following code\nvar foo = {\n  bar:'bar'\n};\nIs treated as valid when it should be invalid. \nDid you try to reproduce this? If not, would you mind trying it and possibly reopening? \nHere is my entire .jscs.json for reference:\n```\n{\n  \"requireCamelCaseOrUpperCaseIdentifiers\": true,\n  \"requireSpacesInFunctionExpression\": {\n    \"beforeOpeningCurlyBrace\": true\n  },\n  \"requireSpaceAfterBinaryOperators\": [\n    \"=\", \",\", \"+\", \"-\", \"/\", \"\", \"+=\", \"-=\",\n    \"=\", \"/=\", \"<\", \">\", \"===\", \"!==\", \"<=\", \">=\"\n  ],\n  \"requireSpaceBeforeBinaryOperators\": [\n    \"=\", \"+\", \"-\", \"/\", \"\", \"+=\", \"-=\", \"=\",\n    \"/=\", \"<\", \">\", \"===\", \"!==\", \"<=\", \">=\"\n  ],\n  \"validateIndentation\": 2,\n  \"disallowTrailingComma\": true,\n  \"disallowTrailingWhitespace\": true,\n  \"requireSemicolons\": true,\n  \"disallowMultipleSpaces\": true,\n  \"requireSpaceBeforeBlockStatements\": 1,\n  \"validateQuoteMarks\": \"'\",\n  \"requireSpaceBeforeDestructuredValues\": true,\n  \"requireLineFeedAtFileEnd\": true,\n  \"jsDoc\": {\n    \"checkAnnotations\": \"closurecompiler\",\n    \"checkParamNames\": true,\n    \"requireParamTypes\": true,\n    \"checkRedundantParams\": true,\n    \"checkReturnTypes\": true,\n    \"checkRedundantReturns\": true,\n    \"requireReturnTypes\": true,\n    \"checkTypes\": true,\n    \"checkRedundantAccess\": true,\n    \"requireNewlineAfterDescription\": true\n  },\n  \"maximumLineLength\": 120,\n  \"disallowMultipleLineBreaks\": true\n}\n``\n. I see. On thereadme.md` it says that you have merged with ESLint, but I interpreted this to mean that ESLint had merged into you.  Perhaps a note on the readme and on the front page of http://jscs.info/ that this repo is deprecated would help others to redirect themselves appropriately. \n. ",
    "aj-dev": "I can see the same bug with validateIndentation=4 when running jscs --fix after upgrade to JSCS v3.\n. ",
    "bgw": "I'm not encouraging this commit, but for completeness,\n\nfacebook doesn't have public javascript code style\n\nisn't entirely true. We publish an eslint config, but we don't necessarily advocate that others use it. That configuration is used by many open source FB projects, like react.\n. ",
    "xiadengping": "Thanks \uff1a\uff09\n. ",
    "666don": "He!p. ",
    "eslintbot": "This project is deprecated\nHi there.\nThis project is deprecated, sorry. Check out blog posts for more info -\n- JSCS\u200a\u2014\u200aend of the line\n- Welcoming JSCS to ESLint\n- JSCS End of Life\nUse ESLint instead.\nPlease do not open issues here, thank you.\n. ### JSCS is deprecated\nThanks for wanting to contribute, but this project is deprecated.\nWe recommend using ESLint instead (the JSCS team will be contributing there).\n\nCheck out our blog posts for more information:\n- JSCS\u200a\u2014\u200aend of the line\n- Welcoming JSCS to ESLint\n- JSCS End of Life\n\nIf you would like to contribute to the JSCS Compatibility Effort, follow the milestone here.\n\nSince we won't be maintaining the project, please do not open issues/PRs here. Thanks!\n. ### JSCS is deprecated\nThanks for wanting to contribute, but this project is deprecated.\nWe recommend using ESLint instead (the JSCS team will be contributing there).\n\nCheck out our blog posts for more information:\n- JSCS\u200a\u2014\u200aend of the line\n- Welcoming JSCS to ESLint\n- JSCS End of Life\n\nIf you would like to contribute to the JSCS Compatibility Effort, follow the milestone here.\n\nSince we won't be maintaining the project, please do not open issues/PRs here. Thanks!\n. ",
    "bboydflo": "@dasdany just a reminder: this project has merged with eslint. ",
    "dasdany": "@bboydflo oh, thanks for reminder \ud83d\udc4d . jscs merged with eslint. jscs merged with eslint. ",
    "staabm": "Shouldn't there be an option which defines by how many spaces a tab should be represented?\n. ",
    "kizu": "Fixed, thanks.\n. ",
    "Sebmaster": "What if there's a bare block in a function declaration like this:\njs\nfunction foo() {\n  {\n    let key = 'bar';\n  }\n  // no more key\n}\nWouldn't the parentNode be != Program then and it'd be the same issue?\n. Looks like that would work.\n. ",
    "Rob--W": "Done!\n. ",
    "redoPop": "No, I think this rule should be retained; named function expressions seem to be handled differently from anonymous ones in Airbnb's style guide:\njavascript\n// good\nconst x = function () {};\nconst y = function a() {};\nWhere x is considered an example of an anonymous function expression (where the space before open paren is required) and y/a is considered a named function expression (where the space before open paren is disallowed).\n. "
}