{
    "carhartl": "The object is already cloned:\noptions = jQuery.extend({}, options);\nIn some outdated version this was an issue...\n. This is just the way how cookies work in any browser by default. I am reluctant to change that behavior.\n. I.e. I am reluctant to change any behavior in such fundamental way. It's too obtrusive.\n. I will add that to the README. Though I am nearly convinced that path = '/' should become default.\n. The issue I still have with having a default path is that when one wants the behavior as is, you would have to pass null, which to me at least feels not intuitive at all:\n$.cookie('foo', 'bar', { path: null }); // null denotes current path?\nThat said, I am planning to document that behavior prominently and provide a way to define defaults, so that a developer can easily turn on '/' as the default path with a single line of code. That way it'll also not break existing code.\n```\n// bulk\n$.cookie.defaults = { path: '/', expires: 365 };\n// single\n$.cookie.defaults.path = '/';\n```\n. You're using it wrong, options are a single argument.\n$.cookie(\"myCookie\", \"0\", { expires:7, path: '/', domain: \"local.mysite.test\" })\n. I believe in your case a cookie with a path for a particular page (in case of an omitted path, the \"current\" page) may shadow a cookie with the same name \"higher up\" in the path hierarchy.\nWhat happens if you start with a blank page, e.g. clean all cookies?\n. Reason to use encodeURIComponent / decodeURIComponent was that escape / unescape is deprecated. \nApart from that I haven't yet understood what the problem is here. The cookie value runs through decodeURIComponent before it is returned; thus, unless I am missing something, it should be exactly the same as what it was when passed into the cookie. Could you please post a gist or something to illustrate the issue?\nLast not least you can use the raw option to bypass encoding in the first place.\n. Reason I cannot use encodeURI:\nencodeURI('foo;bar') == \"foo;bar\"\nBut:\nencodeURIComponent('foo;bar') == \"foo%3Bbar\"\nThe latter is the behavior we want.\nraw was in fact added to account for playing nice with a server.\n. You meant:\n    var myVar = new String('bar');\nright?\ntypeof new String('foo') // => \"object\"\ntypeof 'foo' // => \"string\"\n. Going to fix it soon...\n. https://github.com/carhartl/jquery-cookie/commit/001687708c9270d399eea2d0c4c10fd6b0169b3e\n. I ran the tests in Chrome and it seems to work fine. Can you please supply little more details about how you're using the plugin, i.e. a test case?\n. Apart from this hardly helpful error report test suite is green on Windows Vista with IE9 RC: http://www.flickr.com/photos/carhartl/5448068754/\n. Thanks!\n. Makes sense.\n. For some reason I thought, plugins.jquery was no longer in use...\n. I have tagged 1.0.0. Despite plugins.jquery freezing my browser all the time I disabled all I could there, linking to GitHub.\n. In my tests this is working fine. Maybe your path is mismatching? To delete a cookie that was created with a certain path you need to specify the very same path.\nOtherwise, could you please provide a test case?\n. You don't need to pass a date.\njavascript\n$.cookie('username', null);\nWith the latest version you would use:\njavascript\n$.removeCookie('username');\nCaveats: Make sure to pass the same path and domain options the cookie was written with when trying to delete it. Also, you can't delete the cookie from another page if you had written it without the path options - by default the page is where the cookie was written.\n. As mentioned in the README. Also, default options may make lifes easier here.\n. You need to run the tests in an isolated/standalone environment. The included server.js provides such thing.\nIn your case other cookie values are interfering with the tests' expectations. Yes, I could rewrite tests to account for that, but I don't see the point.\n. http://en.wikipedia.org/wiki/HTTP_cookie#Domain_and_Path\n. There is no problem with it. I just didn't have the time to inspect the problem properly. Just because it works in PHP doesn't mean it'll work everywhere else. I'd really like to make sure there are no side-effects.\n. Could you add a test to the pull request?\n. Thank you. It's not that I'm not interested, I am just drowning in work with founding my own startup...\n. This little plugin cannot ever take all possible server-side environments into account. Thus I am thinking about adding an encode option which takes a function. That way developers can specify their own encoding function. Would that work for you? I think this is a good compromise between fixing your issue and not adding too much code.\nWe could additionally add a note about the php issue in the wiki or gather encode functions as a separate add-on.\nWhat do you think?\n. For one, I can't simply replace any '+' with ' ' when decoding, since one might want that actual value in the cookie.\nAnd then, the reference you cited yourself, even though it's w3schools [1], suggests that you use rawurlencode() in PHP [2] to encode a cookie value, which as far as I can see from the manual would correctly decode spaces in a way that work well with JS.\nsetcookie('b', rawurlencode('kala m\u00e4gi+'));\n[1] http://w3fools.com/\n[2] http://php.net/manual/de/function.rawurlencode.php\nLast option is, as you already noticed, to use raw with your own decode function.\n. That php code of mine is probably nonsense. Nevertheless my first point holds true. Providing defaults and a decode function option:\n$.cookie.defaults = {\n    raw: true,\n    decode: function(s) { return s.replace(/\\+/g, ' '); }\n}\n. A server-side written value of \"foo+bar\" becomes \"foo%2Bbar\" (at least in Rails) so replacing \"+\" with \" \" first automatically should do no harm, thus following @matthijskooijman suggestion.\n. Sorry for that.\nRegarding plugins.jquery.com, I had to reset my password, I am now getting \"access denied\" when logging in with the link provided in the email and now I can't do anything there.\nIsn't that page pretty dead anyway since it's saying it's under construction since forever and after a great loss of data a while ago (http://blog.jquery.com/2011/12/08/what-is-happening-to-the-jquery-plugins-site/)?\n. Nothing I am aware of. And it seems a bit like saying 'delete $.cookie' is breaking things to me... no?\n. $.fn.foo is for creating methods that do iterate over a result.\n. Still struggling to find a real use case for this. If you need to know whether a cookie exists or not you can just check \n$.cookie('foo') === null\n. I believe the use case @sunjay03 brought up is now fulfillable with the newly added json support, and I believe in a technically superior way even (just keep all of the belonging properties in a single object that gets serialized to the cookie).\nRegarding the \"clear all cookies\" use case I'm probably going to merge @muxa's PR (#129).\n. c32ed09760ae336e66ba6acc18b9f4b556d7565a\n. Instead of\nvar defaults = {};\nfor( i in jQuery.cookie.defaults ){\n    defaults[i] = jQuery.cookie.defaults[i];\n}\noptions = jQuery.extend(defaults, options);\nwe can probably write less:\noptions = jQuery.extend({}, jQuery.cookie.defaults, options);\n. Now obsolete with f43512ef6a5c546be8b80772574c06f7e7da57bc\n. @kirkhelek\n\"so, if i want to delete a cookie using your plugin I need to put the same options that I used for its creation, really?\"\nYes, when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie (but not expires). That's how it works in a browser. I've updated the documentation to be more clear on this.\nThis will become a bit more straight forward with default options.\n. @bruzie In your case you can delete the cookie set with path: '/' at the root level that way because root is '/'.\n. Agreed, but how likely is that in real world?\nNeeded to use this kind of check to allow string primitives as well as objects (see the tests) but guard against null and objects at the same time. Do you maybe know a better way?\n. typeof === 'string'\nisn't good enough:\ntypeof new String('foo'); // => 'object'\nThat's exactly why I resorted to String(value) !== '[object Object]'\n. If the tests do not fail, please go ahead!\n. I think there is an easier solution:\nObject.prototype.toString.call(new String('foo')); // => \"[object String]\"\nObject.prototype.toString.call('foo'); // => \"[object String]\"\nThere code in question needs to change to:\nif (arguments.length > 1 && Object.prototype.toString.call(value) === \"[object String]\") {\n    ...\n. Although that's byte conscious it would mean creating a new object each call. Even though it's going to be garbage collected not sure if I'd do that. :-)\n. use option path: '/' \n. See Readme: Value can be a Number (which will be interpreted as days from time of creation) or a Date object.\nE.g. create a date, advance minutes as required and pass that as expires option.\n. What exactly is the issue in IE when returning null?\n. But this is an issue of how jQuery's val() method is being used, eventually how or how not it is normalizing values that are passed in (you might want to file a bug for jQuery itself).\n// browser handle null differently here, no cookie plugin involved at all...\n$('<input>').val(null);\n$('<input>').val('');\nIt isn't a bug in the cookie plugin. Plus, if we were returning an empty string instead of null we were no longer be able to distinguish whether the cookie wasn't set or had an empty string as value - this was the idea of returning null in the first place.\nYou need to guard yourself against passing null:\n$('<input>').val( $.cookie('not-existent') || '' );\nMore verbose:\nvar cookie = $.cookie('not-existent');\nif (cookie) {\n    $('<input>').val(cookie);\n}\nOtherwise you could argue that whichever method you're using to populate an input's value must never return null, which isn't reasonable.\n. My apologies, I was looking at the example you gave and misundestood you. So the issue is not passing null to val() but the return value being inconsistent.\nA test case would have helped.\n. duplicate, see #25\n. Looking at the diff I can't understand how these changes help to make it work with that gem... could you explain?\n. Is there a github issue at play? When I look at the Diff, the only (relevant) difference I see is this:\n-            t.setDate(t.getDate() + days);\n+            options.expires.setDate(t.getDate() + days);\nwhich still doesn't do much.\n. I ran the unit tests included in this repo and they're all fine in Safari 5.1, IE9, IE8, closing this. Please do not expect me to debug your application code. Feel free to reopen if you're able to extract a test case exposing a bug.\n. Could you try to extract a minimal test case from your application then? I'm not saying there might not be a (yet unknown) bug in the plugin but it could just as well be something entirely different in your application. Either or, extracting it would help to track this down...\n. What is being passed when writing the cookie?\n. I found that browser support for this is sparse (Opera seems to support it form what I read), I tested with latest Safari and Firefox on OSX any both do not support it.\nClosing and not going to add, following the jQuery approach only to include functionality that would work across the supported browsers in the same way.\n. Are you trying to overwrite the \"PN\" cookie with the \"TN\" one? That isn't possible, technically these are different cookies.\n. Which Chrome version is it?\n. @Larriviste can you tell me a little more about this? How was the cookie set, using the plugin? What was the value? With which options exactly? Are there special settings in the browser? Etc. ... I'm having a hard time to reproduce this.\n. Same as #88?\n. Not much the plugin can do about this, put a note into the documentation maybe?\n. Good find, thanks @barelyfitz \n. Added a note to the README: 4b1433316b6b02924d134aeec20a55fe258c64d2\n. As explained in the Readme: Value can be a Number (which will be interpreted as days from time of creation) or a Date object.\nThat said, if you want to set minutes pass a date for which you set the required minutes.\n. Yes. You can use getMinutes/setMinutes...\ndate.setMinutes(date.getMinutes() + 30);\n. So the value is \"cookie[1000]\"?\nE.g.\n$.cookie('foo', 'bar[0]');\n. When reading a cookie no longer is a regex being used and this issue seems to be outdated:\ndocument.cookie = 'foo[1234]=bar' // => \"foo[1234]=bar\"\n$.cookie('foo[1234]') // => \"bar\"\n. Thanks.\n. Did you run the tests off a server? For me it all works fine (Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7).\n. Probably the same as #25...\n. escape is deprecated in favor of decodeURIComponent. Will look into this.\n. Test showed for me it's working on Firefox 18 (that is quite some versions ahead). Maybe the issue occured because with the older version of the plugin you seem to have been using the name wasn't yet correctly encoded and Firefox borked on the name:\njavascript\ndocument.cookie = name + '=' + encodeURIComponent(value) + ...\nPlease everyone let me know if the issue still occurs with an up-to-date version of the plugin and I'm going to reopen.\n. Wondering if we need to encode the key at all. As an alternative we could extend the raw option to include the key as well.\n. I had to ditch the regex based implementation today anyway, due to cross-browser (IE) inconsistency with how cookies are stored when they do have an empty value...\nAnd yes, I mentioned in another issue, that I think raw will include the key as well. Simple and straightforward.\n. Thanks! Though I wouldn't want to introduce a global variable (cookie_encode function) ... there is also the raw option which does pretty much the same already.\n. Yes, this is the new home. While I am not adding a version number to the code itself, you will at least find tags here. Nonetheless adding a version number might be worth it still. I will follow the way jQuery itself does this I guess.\n. When deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie.\n. e.g. if you're not on the root level of your page, to delete the cookie (being allowed to delete that is from a browser perspective), you need to include the path when deleting.\n$.cookie('Campus', null, { path: '/' });\n. I think default options will help in this case?\n. For an explanation see here: http://stackoverflow.com/questions/3865345/sub-domain-cookies-sent-in-a-parent-domain-request\n. e1a27c698f1c5c52ffd660cfc6761824f42461d5\n. Thanks!\n. Thanks @cwp \n. That's a whole lot to document and test whereas plain old JavaScript gives us the same functionality with even less code already, since the expires option supports an instance of Date:\nvar date = new Date();\ndate.setFullYear(2013);\n$.cookie('foo', 'bar', { expires: date });\n. Test suite runs without any errors with jQuery 1.7.1.\n. Thanks for the suggestion. expires may be an instance of Date, thus I think plain old JS is simple enough though:\nvar ninetySecondsFromNow = new Date(Date.now() + 90 * 1000);\n$.cookie('foo', 'bar', { expires: ninetySecondsFromNow });\n. @robmadole No, not yet. Do you really think this is required?\n. I will get this in today and release 1.3. \n. I'd prefer $.cookie.isEnabled...\n. I can also only accept pull requests that come with tests, from the readme \"Make sure your patches are well tested.\"\n. Thanks for the PR! Will add soon.\n. @brandonaaron Out of interest, what is the effect of the additional check?\n. $.cookie('foo', 'bar', { domain: 'example.com' })\nseems much more expressive to me and doesn't require to add more code, thus I am reluctant to add more. I'm going to add default options soon, so there will also no longer be a problem with repeating yourself.\n. I meant \"example.com\" more of a placeholder for something like:\nvar domain = location.hostname.split('.').slice(-2).join('.');\n$.cookie.defaults = { domain: domain };\nThough, yes, that won't catch a domain like \"example.co.uk\"...\n. As I had stated somewhere else before, what if someone specifically wants to put a \"+\" into the cookie value? With this pull request this would be changed to \" \" upon reading (unless using raw), which is not desired obviously in such a case. That said, we cannot simply assume all pluses were having to change to \" \".\nMy take on this is - now that we have default options, this is much easier - providing a decode option for this, so that the developer can hook whatever decoding method required into it:\n$.cookie.defaults.decode = function(s) { return s.replace(/\\+/g, ' '); };\nThis were all a developer needed to do.\n. Alternatively we'd need to convert pluses first, before doing decodeURIComponent, as mentioned here: https://github.com/carhartl/jquery-cookie/issues/13#issuecomment-4106969\nWould you like to adapt the pull request?\n. My bad, I overlooked that you were already replacing before decoding... sorry.\n. Duplicate: #50\n. I think being able to pass a Date object is sufficiently straight forward, rather than adding a bunch of options that need to tested, documented, remembered.\n. Exactly, I am happy to pull anything that is accompanied with proper tests.\n. Thanks @kswedberg!\n. But isn't consistent with the jQuery style of overloading methods.\nIt also seems to be inconsistent in itself with how a cookie is written. If at all there should then be a addCookie function along with removeCookie.\n. Nearly convinced.\n. $.removeCookie = function(name, options) {\n    $.cookie(name, null, options);\n};\n. I think yes, it's required. You can only remove the cookie with the same options (path and domain options are the important ones here) that were used to write it in the first place. Basically removing the cookie is nothing else than a write.\nYou could have written a cookie for different paths:\n```\n$.cookie('foo', 'bar', { path: '/one' });\n$.removeCookie('foo', { path: '/one' });\n$.cookie('foo', 'bar', { path: '/two' });\n$.removeCookie('foo', { path: '/two' });\n```\nOf course passing options isn't necessary when relying on the default options.\n. Don't think performance is a real issue here, unless you're deleting 1000 cookies in a row maybe.\n. Changing the indentation makes the pull request much harder to grasp. Anyway, while I believe this could be a useful feature, it's out of scope for this lightweight plugin. I'd like to keep it small.\n. Exactly, it's $.cookie, not $.fn.cookie.\n. Cannot reproduce, tests indicate this works fine. Please provide a test case.\n. Quickly tested in Safari and Firefox, no issues. Please provide a proper test case.\n. This time I checked with http://www.jslint.com/ it didn't report that as an issue any longer (I do remember that it once did). I prefer jshint anyway and made that pass instead: e13a9b64abaae114c536bac1b65be7b5d50f5e6d\n. Duplicate of #35 and no longer the case...\n. Since document is being used only twice, this way we're not saving characters but adding when minified. (757 vs 769).\n. Tested using UglifyJS...\n. Thanks :)\n. Not going to have the tabs vs spaces discussion. The only reason for me to use tabs is that jQuery core uses them: http://docs.jquery.com/JQuery_Core_Style_Guidelines#Spacing\n. Using tabs, everybody should be happy now :)\n. I believe that being able to pass a Date object is sufficiently straight forward, rather than introducing a new options \"syntax\" that needs to be tested, documented and last not least remembered. Similar pull request here: https://github.com/carhartl/jquery-cookie/pull/65\nBesides I will not pull any new features that are not well tested and this request is also behind.\n. Let's say this is just a side-effect. For #68, how about returning true for successful delete (there was a cookie to delete) or false in case the cookie attempted to delete wasn't found?\n. Ideally if it was actually removed, something like:\njavascript\n// => null: cookie to delete wasn't found\n// => false: cookie deletion not successful\n// => true: cookie deleted\n$.removeCookie = function(name, options) {\n  if ($.cookie(name, options) == null) {\n    return null;\n  } \n  $.cookie(name, null, options);\n  return !$.cookie(name, options);\n}\nNot sure if we really need to distinguish between \"delete unsuccessful\" and \"not found\". The latter is a subset of the first. Both return values are falsy though.\n. It's in that code, if the cookie is still there, delete didn't happen, at least in my naive world :)\nreturn !$.cookie(name, options);\n. Oh, I see, sorry! Maybe poking around with the path or somehow stub the deletion...\n. I agree that undefined is the most suitable/intuitive return value in case a cookie wasn't found and as Fagner pointed out, changing from null to undefined shouldn't be that big of a problem since both are falsy. Thus I'm going to change it (this will then go into a 1.4 release).\nRegarding what to accept for cookie removal: it doesn't really matter that much. The prefered (and documented) way to remove a cookie is $.removeCookie(). Using $.cookie('name', null) was deprecated quite a while ago and I consider it an internal implementation detail by now.\nAll that matters for removal is an expires date in the past, so we could even simplify code a bit by having $.removeCookie() pass such a past date (and theoretically whatever value) in the first place and remove the following code (yay, removing code!) for distinguishing a normal write and an \"erase write\":\njavascript\nif (value === null) {\n    options.expires = -1;\n}\nAnd at that point the value doesn't matter any longer.\nRegarding return value for removal: Returning true|false signaling whether operation was successful or not seemed reasonable, but I'm all open for discussion. Is there something comparable in jQuery itself?\n. But where does the doubled semicolon come from?\n. Yes, no need to remind me what jQuery is all about (it's written jQuery by the way).\nFor what it's worth, I still wasn't able to reproduce the bug on IE 9 and tests are all green, so it might be the case that it all isn't as simple as it seems.\n. Let's say if an object is detected and JSON.stringify is defined.\n. Though we can then just always stringify instead of String(value) I guess.\n. Thinking some more about this I am sure that when automatically stringifying input, users would also expect to have the value parsed back to JSON automatically when reading the cookie. Which IMHO is out of scope of the plugin. Allbeit on a smaller scale, we're not doing this for numbers either:\n$.cookie('number', 1);\n$.cookie('number'); // => '1'\n. Though an option to provide encode/decode functions were probably feasible.\n. Probably should simply be documented that one has to pass a string as value. Because I too believe that validating arguments is not the plugin's responsibility, at least when it should be as lightweight as possible. I think providing hooks for read/write is giving best of both (won't add too much code and gives developer flexibility).\n. See discussion here: https://github.com/carhartl/jquery-cookie/pull/93\n-> Solution could be a json option that needs to be set as a default.\n. Despite that I only accept patches with tests I'd prefer not to overload that option even more. This case seems to be covered well enough by being able to pass in an instance of Date.\n. Thanks for the PR. Though\n- I will not accept patches without tests, or patches that do break tests.\n- I planned to solve this by providing encode/decode options. The plugin should not know anything about JSON.\n. encode/decode options are not necessarily for JSON only. But they'd solve this issue as well.\n. But that is exactly what is going to happen. Please take a look at #22 - that case seems much less likely and yet someone reported that as an issue.\nI'm afraid I'm not going to consider adding this, I want the plugin to be as robust as possible; the hack in question doesn't yet take the path and domain options into account. Furthermore I will have to adapt it whenever I am adding new options, decreasing the overall maintainability.\nUnfortunately even with encode/decode options the signature problem isn't solved.\n``` javascript\n$.cookie.defaults = {\n  encode: function(value) { return JSON.stringify(value); }\n  decode: function(value) { return JSON.parse(value); }\n}\n$.cookie('foo', { foo: 'bar' }); // Oh noes\n$.cookie('foo', { foo: 'bar' }, {}); // Hmmmm?\n```\nCannot think of a solution that solves this at the moment, expect for changing the signature or adding new methods.\nWhat's wrong with\njavascript\n$.cookie('foo', JSON.stringify({foo: 'bar'}));\n?\n. Seems related: #57\nIn reality cookie encoding seems a mess. Take server side encoding into account. That's what the raw option was for.\n. I don't consider \n$.cookie('foo','bar;bass',{raw:true})\na bug. If you want raw, you get raw. ; not encoded.\n. When writing the cookie, options are using extend:\nhttps://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js#L27\n. As for reading I realized that no other options except for raw are at play - I confused that myself with the deletion -, thus options = value || $.cookie.defaults || {}; seems to work ok but will not if there are more.\n. That being said, if we were documenting raw and possibly json as being required to be defined at a global (defaults) level we could achieve the goal here.\n. Yes, I was thinking the same. More of a global switch.\n$.cookie.json = true;\n$.cookie.raw = true;\n. The default options were then cleanly about the cookie attributes only. Seems reasonable?\n. Great, already started...\n. 796abd66a0b2af7139da5dd86a464b7884d2faaf\n. This was reported before for Phonegap the other day. I don't have an iOS device with iOS 4, could you verify whether it works in Mobile Safari (without Phonegap)? I suspect this is a Phonegap or UIWebView issue.\nSuggested workaround: use localStorage/sessionStorage.\n. Thanks!\n. Why is using this method more save? \nIf it's only about not using JSON (which we have to do anyway with json set to true), find my point of view here: 796abd66a0b2af7139da5dd86a464b7884d2faaf\n. I closed this in favor of consistency; until I'm seeing arising demand for this. So far I haven't even seen a polyfill for just JSON.stringify in the wild though.\n. see #71\n. To clarify: 1.3 is not yet releases (thus wip). I forgot to tag 1.2, sorry.\n. I've added the tag for 1.2.\n. Never heard of NuGet, that site's maintainer needs to do that I guess.\n. Exactly. Plus it helps minification and a little bit of DRY.\n. I am still looking to reproduce the real cause of the issue, with a test case. This PR is just moving the same code to a different location.\n. Aye.\n. Some sort of test case would still be required to prevent regression.\nAs this would be happening on any JS engine we can maybe try to stub document.cookie using a JS getter. Just guessing, no computer at hand. If not possible (security?) maybe try to write such value on the server or somehow else in IE...\n. For the records: replaced usage of regex a while ago due to a different IE deficiency.\n. Another question: Why is there the need to clear cookies between the tests? This is done before each example in the setup... \n. Back in the days cookies didn't work at all in Chrome and file://, that's why I added a server in the first place. I wouldn't add complexity for the sake of complexity. Though this probably is no longer he case I believe we'd need a server nonetheless for #57.\nI am also not happy with the way the test case here is being implemented. I'd prefer a sandbox using an iframe, which is pointing to an address served with the special cookie (which is written by a server as well).\nLast not least I am starting to wonder whether this is a defect in the server-side framework being used, and not a plugin's issue at all. It should be fixed in there if that's the case.\n. @FagnerMartinsBrack #112\n. If you want to use \"&\" in cookie values, you cannot use raw at the same time.\n. Wait, realized the usage is wrong, raw is no longer an option, see change log for details.\n. #109\n. Discussed this here before, the (imo reasonable) default browser behavior is to use the path of the page where the cookie is being written. I do not want to alter that behavior.\nAfter all, this is what default options are for:\njavascript\n$.cookie.defaults.path = document.location.pathname;\n. The plugin shouldn't be affected by quirks mode or not at all.\nBut sometimes the HTML is wrong, for instance:\n<script src=\"...\"/>\nvs\n<script src=\"...\"></script>\nThis may be affected by quirks mode and cause the plugin not to load correctly for instance. Is $.cookie defined?\n. \"This option requires all functions to run in EcmaScript 5's strict mode\". What's the use if we're not using strict?\n. As stated in the documentation, you can pass a date object for expires.\n. But it's false by default, so is there a real need? I removed eqnull here already: 46bf7e33514dc0c5681d96ff43ee5da1457e81a6\n. Ah ok, I tested with CLI and didn't see anything like that...\n. Upgraded jshint to the latest (0.9.1) and still not seeing this. I'd prefer the cli though.\n. I was just looking around here: http://sindresorhus.com/bower-components/ - That seems to be the \"official\" place to register bower components at?\n. As option isn't possible if we stick to overloading the method signature, see discussion at #93.\nI suggest to write a little wrapper function if you want to avoid setting it globally (untested):\njavascript\n$.jsonCookie = function() {\n    $.cookie.json = true;\n    $.cookie.apply(null, arguments);\n    delete $.cookie.json;\n}\n. Probably the same as #88.\n. Should be combined or be fixed anyway with #104.\n. Catch such exception and raise a different one? Isn't the exception here perfectly valid, why hide it?\nAlso, null is returned already if no cookie was found. I don't think that returning undefined would be a useful signal that parsing a (json) cookie didn't work out as expected.\n. Can you tell me what's the value of document.cookie? Could be that this is the same issue as #88/#117.\n. I fixed an IE related issue yesterday, could you please try the latest version from master?\n. And what exactly is the error you're seeing?\n. That sounds as if the plugin wasn't included correctly. What does $.cookie return when entered in the console in IE? How do you include \"jquery.cookie.js\"?\n. How is this being included? The html (?) seems to have been removed in the comment, you need to put it into a code block (markdown-wise).\n. Apart from that I do not own a copy of Windows 7 where I was able to test it. \n. Bottom line: GitHub is not a CDN, DON'T include files directly from them.\n. No such feature, see #16.\n. Imo minification isn't part of a source repository. I believe this has been discussed before, here and elsewhere. Compare jQuery, propably one of the most popular JavaScript libraries out there, just as one example - they do not provide a minified version on GitHub, only for the release distributions they do.\nWhether files belong into \"js\", \"src\" or something else seems to be matter of preference. As long as there's only a single file I'd like to keep it simple.\n. As I said, not going to happen within the source repository. Is it possible to add it to tags?\n. Oh yes: #119\n. The idea of HttpOnly is to prevent cookies from being accessible through client-side code (that is document.cookie). AFAIK there is no way to write a cookie client-side that turns into a HttpOnly cookie afterwards.\n. Thanks for the PR. I'm now closing it, since batch reading is now part of the cookie plugin and I haven't seen demand for batch writing yet.\n. Thanks for your pull request. I am closing this nonetheless, explanation can be found at similar PRs for this.\n. We're told that escape is deprecated. Could you use use $.cookie.raw = true;?\n. https://github.com/carhartl/jquery-cookie#raw\nYou would use it like:\n``` javascript\n$.cookie.raw = true;\n$.cookie('splash[name]', '0');\n```\nDo you use the latest version?\n. If the key contained a string such as \"=\" that would always have to be encoded.\n. I quickly tested in the console, writing/reading works ok for me:\n\n> $.cookie('foo[bar]', 'baz')\n  \"foo%5Bbar%5D=baz\"\n> $.cookie('foo[bar]')\n  \"baz\"\n\n. The return value when writing is in fact the ecoded value.\n. As I said it works at least in the console, plus I have a test for this case which is green.\nI have the feeling that something doesn't work quite right on jsfiddle. It seems I can't read any cookie value, no matter whether there's a [] or not contained.\n. http://jsfiddle.net/sq4Dr/\nIt's just always null, indicating that the cookie hasn't been written properly. But I'm quite sure that writing works.\n. Hm, forking doesn't work as expected, just make a new fiddle:\n``` javascript\n$.cookie('foo', 'bar');\ndocument.write(\"\" + $.cookie('foo') + \"\");\n```\nand the result will be null.\n. By the way, including jquery.cookie from raw.github isn't a good idea. See https://github.com/carhartl/jquery-cookie#installation\n. http://jsfiddle.net/carhartl/KKV3z/\n. https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js#L6\n. No, see changelog.\n. c32ed09760ae336e66ba6acc18b9f4b556d7565a\n. I don't think this is even possible. Say you had written a cookie with the same name on page /foo/bar and page /foo/baz. If you're on page /foo/bar you can't delete any cookies on pages \"outside\" the path you're in due to security restrictions. It could only work with cookies that had a path attribute of a path you're already in, for instance / or /foo.\nYou'd also had to track all calls to cookie (write operations), simply because there is no way to obtain the path of the cookie in JavaScript once it had been written, and persist these in some way or the other. In other words, if you're on page /foo/bar there is no way to find out whether there are cookies with the same name on other pages, e.g. with a different path attribute. That doesn't seem very feasible to me in regard of the scope of this plugin.\nFurther, such behavior would make it impossible to use page only cookies any longer, simply because deleting without any options were always deleting all cookies, not only the one on the page where removeCookie was called - which is resembling the standard browser behavior. Of course, this could be worked around by specifying some option when calling removeCookie, but as aforementioned, this feature doesn't seem feasible/possible in the first place.\n. Regarding being forced to specify all the options all the time, one can use default options to at least alleviate the concern:\n``` javascript\n$.cookie.defaults = {domain: \".me.dyndns.org\", path: \"/\", port: 8080};\n$.cookie('foo', 'bar'); // uses {domain: \".me.dyndns.org\", path: \"/\", port: 8080}\n$.removeCookie('foo'); // uses {domain: \".me.dyndns.org\", path: \"/\", port: 8080}\n```\n. No, you don't see a cookie when you're outside the domain or path.\n. IMO it's never a good idea to fail silently on errors. It's hiding issues from a user. I think how you solved it is a proper solution, for your particular case.\n. Though what is the case with \"no json\"? That seems to be a bug.\n. I mean, with json=true, the plugin should handle arbitrary values nonetheless.\n. What I meant was that I'd prefer not to return null in case JSON is invalid, simply because the developer would never know the reason why it is null - why it's not written that is - and thus were never able to fix the root cause of this.\nBut yeah, I'd probably even more prefer to be consistent with jQuery here.\n. Regarding cookie not containing valid JSON in the first place, I can simulate like so:\n\n$.cookie('test', 'foo') // => \"test=foo\"\n$.cookie.json = true\n$.cookie('test') // => SyntaxError: JSON Parse error: Unexpected identifier \"foo\"\n\nThis would usually happen with server-side written cookies I assume, because this works fine:\n\n$.cookie.json = true\n$.cookie('test', 'foo') // => \"test=%22foo%22\"\n$.cookie('test') // => \"foo\"\n\nIs there an alternative to return null? Logging a warning (could do that anyway)?\n. fwiw\njavascript\n// jQuery\n$.parseJSON('foo') // => JSON Parse error: Unexpected identifier \"foo\"\n. Use json = true when you're dealing with JavaScript objects you'd like to have automatically serialized and parsed back, for example { \"A\": \"foo\" }. Don't use it for primitive (string) values, such as \"A\".\nWhether we're throwing an error or simply return nothing for such a case of wrong usage is currently to be discussed here.\n. Back to the original question:\n\nI dont't think null is a bad idea since jQuery also does not throw any exception on any API. Since the cookie is\ninvalid it could be considered inexistent in the POV of a programmer that uses the json flag (which expects a\nvalid JSON or nothing at all)\n\nI finally tend to agree with it, for one consistent behavior trumps** and the notion \"invalid == not existing\" from the POV of the programmer also seems reasonable. There's just not much to do about an invalid JSON string apart from writing a new (valid) one. So let's go that route, but I believe we need to return undefined now since that had just changed in 265617e44788887f47b0d17dde1610626ad071c5.\n** (though $.jsonParse will throw an error when passing an invalid JSON string)\nThe only other thought I had was making json = true obsolete in the first place. Because I have the feeling juggling the json config all the time when dealing with both types of cookies will turn out not to be very practical. So when passing an object literal we would just always stringify it. When reading, we would attempt to parse the object back from string, catch any error and return the value unparsed in the error case (and thus returning the string if it was a \"normal\" string in the first place). The only issue with that were that we'd potentially return invalid stringified JSON like in the case mentioned by the issues reporter. I can see other questions derive from that approach: Will developers expect to have numbers and booleans converted back in the same fashion we would do with objects automatically? Were there other issues I am overlooking right now when we were handling JSON automatically under the hood?\n. Other idea: Allow setting up converters:\njavascript\n// write and read converters\n$.cookie.converter = [JSON.stringify, JSON.parse];\n// single function becomes read converter\n$.cookie.converter = function (value) { return parseInt(value); };\nThat could even make deprecation of json = true work (upon first read/write, JSON converters were set up when we find config.json to be true).\nConverters could be build in a way that they skip values with say a particular prefix. I'm seeing much gained flexibility for developers with this approach.\n. <- New issue\n. Assumes meaning it won't provide these functions when missing and simply expects them to be present, either by using a polyfill, for instance json2.js, or by being natively supported by the browser.\nThe option json: true never existed. As briefly described (maybe a bit too brief?) in the documentation https://github.com/carhartl/jquery-cookie#json here's how to have JSON work automatically with the plugin:\njavascript\n$.cookie.json = true;\n$.cookie('_my_def_vals', { amt: amount, pd: period }, { expires: 7, path: '/' });\n. Yes, as long as you don't pass an object.\n. Closing this, for one it's lacking a test. But more important I believe that being able to pass a Date object is sufficiently straight forward and covering this case (set date to 12 hours from now). Also avoids to add more code.\n. It's not possible. All you get back from document.cookie is a string with key value pairs.\nI believe you cannot have the same named cookie within the same path, say one for '/' and one for '/foo/bar'. And if yes, the browser would probably give the one of which path fits best.\n. 1.3.0 hasn't been released yet.\n. Adding the information to the comment isn't good enough? Is that non-static? https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js#L6\n. I think I'm going to float with jQuery and change licensing to release under MIT only... this is going to simplify a few things. Thanks for the PR!\n. Ok, thanks for the explanation, I have added a file.\n. There is one here: https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js#L2, plus each version has a tag.\n. 1.3 is not yet released, thus there is no tag yet.\n. It works.\n. Could add jshint task...\n. It looks as if the value of the cookie starts with a \", otherwise it wouldn't end up in that if statement.\nCould you look, in the debugger, at the value right before it gets written? Or am I overlooking something?\nAnd then I'm wondering anyway whether json cookies would need the un-RFC-2068 treatment ever.\n. This works fine for me (also in Firefox):\n\n. Are you writing said cookie on the server?\n. @stazna01\nThe only way I could trigger this is if I wrap the entire json in quotes, which were then no a json in the first place, such as:\n``` javascript\n$.cookie.json = true;\n$.cookie('links', '{\"links\": [{\"name\": \"AOL\",\"url\": \"www.aol.com\"}, {\"name\": \"Yahoo!\",\"url\": \"www.yahoo.com\"}, {\"name\": \"Microsoft\",\"url\": \"www.microsoft.com\"}, {\"name\": \"CNN\",\"url\": \"www.cnn.com\"}, {\"name\": \"Apple\",\"url\": \"www.apple.com\"}, {\"name\": \"Digg\",\"url\": \"www.digg.com\"}, {\"name\": \"Amazon\",\"url\": \"www.amazon.com\"}]}')\n$.cookie('links') // throws SyntaxError: JSON.parse: unterminated string\n```\nYou would need to remove those quotes if you're using it like this.\n. I am closing this, I would need more information to proceed with this (and eventually reopen) but it seems to me it's incorrect usage.\n. It's as I suspected. In that example you're using a string:\njavascript\njsonObj = '{\"links\": [...]}' // That's a string\nIf you want to use the plugin's build-in JSON support, you would pass an object right away as value:\njavascript\njsonObj = {\"links\": [...]} // That's an object that get's serialized automatically by the plugin\n. I am still not convinced. If we were silently eating that exception imo it would have taken much longer to get to the root cause.\n. I was thinking that one had to reset the json config when dealing with different type of cookies. That probably turns out as impractical. Then let's go the route eating the exception... :)\nThe thing is, we hardly need the json config flag at all in the first place.\n. But how does catching the exception help with the case of trying to read a regular cookie while json = true. The returned value will be null, at least the way it's done in #145.\n. Not quite right. You can and always could test wether a cookie exists or not - as can be verified by the tests like so:\njavascript\nif ( $.cookie('doesnt_exist') === null ) // NOTE null *not* 'null'\nOr simply\njavascript\nif ( !$.cookie('doesnt_exist') )\nFwiw, in the new release there's now yet another way to do this, which might read better even:\njavascript\nvar cookies = $.cookie();\nif ( 'foo' in cookies ) // If true we know that the cookie named \"foo\" exists...\nThe problems you were facing were, as far as I could see, all related to wrong usage of json cookies, in that you tried to pass a string with json=true, and by that persisting invalid stringified JSON that will throw a syntax parse error upon trying to parse it back into an object - whereas the plugin expects a JSON object in such a case.\nLast not least, what we're now trying to figure out is what's the best way to deal with these kind of errors, or invalid JSON in general and whether json=true was maybe not that usable as we thought it would be.\nHTH\n. My apologies, in fact you're right, this now will also throw an error:\njavascript\n$.cookie.json = true;\n$.cookie('doesnt_exist') // => SyntaxError: JSON Parse error: Unexpected identifier \"bar\"\nI will come up with a fix and a 1.3.1 release soon.\n. 82c93ebdeea32b5e730078c3df212b5b9c9a3ef1\n. @FagnerMartinsBrack Yeah I agree, that's beyond scope of the plugin. \n. 1.3.1 released. How in general we want to handle invalid JSON is discussed in #132...\n. Thanks! Manually added here: 3e07441dd941e0248a5efa497fcc88ee4505aa13\n. Could you squash the commits? That were awesome.\n. Not to hurry!\n. I have it written anyway by now, going to add and close the PR. Thanks!\n. Bad copy&paste from another PR. Thanks!\n. Not aware of any. What happens when wrapping the value with encodeURIComponent? Then I was thinking, for most of the tests we could as well use the cookie's write method anyway.\nOut of interest, is Opera on the list of supported browsers? I somehow remember it wasn't... (doesn't mean not to fix this).\n. Merged PR...\n. I think that line is a leftover, I saw it too the other day and forgot to remove it.\n. Ha, I was thinking the same :)\n. Converters would to need to have the cookie name passed as well to allow skipping conversion:\n``` javascript\n$.cookie.converter = function (value, name) { return name.indexOf('count') === 0 ? parseInt(value) : value; };\n$.cookie('count_foo', 8);\n$.cookie('count_foo'); // => 8\n$.cookie('simple', '1');\n$.cookie('simple'); // => '1'\n```\n. @FagnerMartinsBrack Yes, array is ugly and wouldn't work well anyway:\n``` javascript\n// Is this a read or write converter?\n$.cookie.converter = [function(value) { / ... / }];\n// So I'd be forced to do this:\n$.cookie.converter = [null, function(value) { / read converter... / }];\n```\nThere's no such thing as you supposed, but I think the following should work well:\n``` javascript\n$.cookie.converter = {\n    read: function(value) { / ... / },\n    write: function(value) { / ... / } \n};\n$.cookie.converter = {\n    read: function(value) { / ... / }\n};\n```\n. We could also define an API like this:\n``` javascript\n// write\n$.cookie('foo', 'bar', function(value) { / convert write... / });\n$.cookie('foo', 'bar', JSON.stringify);\n// read\n$.cookie('foo', function(value) { / convert read... / });\n$.cookie('foo', JSON.parse);\n$.cookie('foo', Number);\n```\nSeems more straight-forward, more flexible. We could avoid yet another configuration object such as $.cookie.converters. If the need arises, such thing could be build on top of the simple function passing.\n. @FagnerMartinsBrack ^ Any thoughts on this?\n. Cool, thanks! I have it implemented already and will be pushing to a branch...\n. After implementing it this way I was getting some doubt about how useful it really is, at least for the JSON example:\nIsn't this:\njs\n$.cookie('foo', { bar: 'baz' }, JSON.stringify);\n$.cookie('foo', JSON.parse);\na more complicated way (in terms of expressiveness) of writing this:\njs\n$.cookie('foo', JSON.stringify({ bar: 'baz' }));\nJSON.parse($.cookie('foo'));\nDo we gain anything here?\nIn terms of numbers, I have a little less doubt:\njs\n$.cookie('foo', Number);\nSeems to read a little better than:\njs\nNumber($.cookie('foo'));\nbut maybe not either.\nAfter all, it feels like a useless feature to me. All we wanted in the first place was a more elegant and flexible way to handle JSON (ideally automatically).\n. Also, aren't we there already yet? With #195 being fixed, one can set json = true and still save strings and json objects at the same time without having to worry about the flag. The flag now acts more of a manual verification by way of the developer that JSON.parse and JSON.stringify are available.\nWe could still keep the read conversion, though nobody ever has asked for this feature.\n. Ah no, with json = true we can't yet read \"simple\" cookies, cookies that haven't been stringified using JSON.stringify before saving that is. The plugin returns undefined in such a case.\nHow useful is it to return undefined in case attempting to parse a JSON cookie fails?\n. Ok, there was a long discussion in #132 what should be returned in case of invalid JSON. So we can't just return the string, whatever it is.\n. Conclusion:\nWrite conversion is obsolete.\nRead conversion is useful since we enable developers to handle JSON and simple cookies at the same time while avoiding json = true. Using just JSON.parse was an example a bit too simple.\n``` js\nfunction converter(value) {\n  try {\n    return JSON.parse(value);\n  } catch(e) {\n    return value;\n  }\n}\n$.cookie('simple', 'foo');\n$.cookie('json', JSON.stringify({ foo: 'bar' }));\n$.cookie('simple', converter); // => 'foo';\n$.cookie('json', converter); // => {foo:\"bar\"}\n```\n. That example only makes sense of course if we were setting up such converter as default somehow, for the simple cookie we would not have to pass it as an argument in the first place.\nUgh. Taking a break.\n. Lots of confusion.\nWhat I was saying is that converters only as function argument might not be all that useful - but this was my idea inbetween -, because there is not much difference in the resulting written code: $.cookie('foo', { bar: 'baz' }, JSON.stringify) vs $.cookie('foo', JSON.stringify({ bar: 'baz' })), the latter code even expresses the intent without some sort of obfuscation.\nThus function argument only converters wouldn't help much in being able to deprecate json = true - we would just have to tell developers to use JSON.stringify and JSON.parse themselves.\nThus I was thinking to return to setting up converters like $.cookie.converters = ... (While we can still allow converters being passed as an argument for quick, one time conversions).\nNevertheless, this feature has never been asked for and the reason to implement it was to make json = true more flexible (usable), thus I am reluctant to add it - if we could find a better (simpler) solution. Once it's there it we can not easily remove it again.\n. Thanks @klieber, I think this is interesting. Since it would even allow to add more than one converter without having to clobber everything into one function. \n. Please see #102. I've not the slightest clue how I'd update that and if you're talking about http://nuget.org/packages/jquery.cookie (I just googled that): it seems as if someone else registered my plugin there without me informing. You would need to politely ask the owner listed there (\"damianedwards\") to update the plugin, I am not affiliated in any way.\nI do advise you though to refer to the official jQuery plugin repository/GitHub when it comes to keeping up-to-date with this plugin.\n. The plugin listed in jQuery's plugin repository: http://plugins.jquery.com/cookie/\n. Said cookie is flagged as HttpOnly, thus cannot be read via JavaScript.\n. I think you just need to use $.cookie.raw = true in case you want to handle unencoded, server-side written cookies containing certain special characters in its name. That case is what the configuration option was only made for.\n. Add npm install to the README...\n. Fixed with 8ebbca5a68f4a2e51a5f79ccdc8f5dbec1b0f9da and a09ee1c73969340d5109eb7c0d983cbdbd2f2cc3\n. Here's a gist where things work fine. https://gist.github.com/carhartl/5072685\nCould you post more details about how you're using requirejs with jQuery and the cookie plugin?\n. I am using the require-jquery.js in that gists.\nWhat happens if you add && define.amd.jQuery back in, see bd3c9713222bace68d25fe2128c0f8633cad1269 ?\n. Without any additional information I cannot do much, it works as demonstrated in the gist. Feel free to provide more information so we might reopen this.\n. Ah - I was investigating another issue like this for #247. Didn't remember this issue.\nSo another solution is to change the order of the scripts to include, see the explanation there...\n. I guess it's about setting the path:\njavascript\n// Store a site-wide cookie...\n$.cookie('foo', 'bar', { path: '/' });\nWhen dealing with (sub)domains, might also involve domain attribute.\n. You can also set the path as default option, please refer to the documentation.\n. 20 minutes from now can be accomplished by passing a Date instance.\n. Fwiw, 12 hours could also be written as half a day like this:\nexpires: 0.5\n. I think this is way beyond what this plugin aims to provide.\n. ?\n. For the time being, you may be able to work around the issue using raw: true.\n. The full length answer is somewhere in the closed issues. In short, when trying to read server-side written cookies it sometimes is useful to use raw since they not necessarily do have the expected encoding. And in really short: PHP. ;-)\n. Looks like they just removed the AMD support related code and passed in their own Zepto reference. Or they forked it before we added AMD support...\n. And @FagnerMartinsBrack is right, jQuery.noConflict() allows to remove the $, that's the whole idea as to why we're passing jQuery instead of $.\nIf you have to have Zepto support here's a workaround: jQuery = $ ... ;-)\n. We could do:\njavascript\nfactory(jQuery || $);\n. Me neither. Closing. If there's popular demand we can add 3 characters :)\n. Ok, the description so far doesn't help a lot. Do you happen to have defaults defined?\n. I've ran the test suite with Firefox 19.0.2 (latest as of today) and it's working fine. There's something else at play. If you can provide a test case I will reopen, but with this information alone there's nothing we can do.\n. Also, this:\n\n--\n[11:56:08.952] $.cookie('foo', 'bar')\n[11:56:08.954] \"foo=bar\"\n[11:56:12.878] $.cookie('foo')\n[11:56:12.880] \"bar\"\n[11:56:21.203] $.removeCookie('foo')\n[11:56:21.204] true\n[11:56:24.049] $.cookie('foo')\n[11:56:24.050] undefined\n\n. You need to use raw: true for these cases. See Readme for more details.\n. Please provide more information, what exactly does not work, under which circumstances? Fyi, the project provides a minification grunt task.\n. Using http://closure-compiler.appspot.com/home\nSimple optimization: success without warnings.\nAdvanced optimization: success with 2 warnings. The second one \"Function $.cookie: called with 1 argument(s). Function requires at least 3 argument(s) and no more than 3 argument(s). at line 88 character 4\nif ($.cookie(key) !== undefined)\" I'm afraid we won't be able to do anything about, other than changing the API of the plugin in that we supply separate methods for write and read. Not going to happen.\n. The doc isn't as clear as it should be, or you maybe simply misread it, if the path isn't set, it becomes the path of the current page (we're not altering the standard browser behavior here). You may want to use default options to set it to \"/\".\n. I'm really sorry for the frustration, though the CHANGELOG.md clearly states that HEAD contains AMD support and 1.3.1 does not. I want to get #151 in for a 1.4.0 release and thought AMD to be part of it, but maybe AMD support warrants a 1.3.2 release as well.\n. Why do you want to pass null? null was once used for deleting a cookie.\n. It may just be an oversight, because the cookie no longer is being removed when passing null and instead it just stingifies whatever it gets. On the other hand, what would you expect to happen when passing null? Nothing is defined for this, but I'm inclined to just leaving it as it is since I don't (yet) see the point.\n. Closing.\n. Yeah right!\n. Thanks for the PR. But Node.js isn't really relevant for the plugin's functionality imo, rather then just being a vehicle, along with grunt, to have some basic continuous integration in place on Travis. That said, I'd rather not increase the testing time by adding up to the build matrix and instead eventually just update to the latest Node.js. I wasn't aware that 0.10 is stable now.\n. For more realistic tests on Travis we would need to utilize Selenium along with different browsers to run the tests on.\n. You can pass a date object if you need arbitrary expiration dates.\n. You have to use the same path in that case whenever you're writing the cookie. To make it a little easier, you can define default options.\nTechnically, a cookie written with path and another one without are different cookies.\n. Like I said, write the cookie from anywhere you want passing the same path.\n. ...and to avoid having to remember this you can just use default options:\njavascript\n$.cookie.defaults = { path: '/' };\n$.cookie('foo', 'bar'); // It's using path...\n. It's just for when somebody wants to use the plugin via bower.\n. @michaelglass @FagnerMartinsBrack Yes, I understood that I have to register the plugin as a bower component once more after renaming the file when pushing out the next release. Maybe that's not the case - does bower pick up the changes automatically?\n. I think I got that wrong. The plugin is already registered, and I cannot reregister it anyway. It's not clear to me how bower picks up changes though.\n. How are you using the plugin?\n. From this information alone I can't tell anything I'm afraid. Looks a bit like a bug related to JSON cookies that was fixed. Do you you the latest plugin from master?\n. It were helpful if you can put online a stripped down test case exposing the error. If it's a usage error this alone sometimes helps to track the issue.\n. I was thinking you might be running into the issue fixed here: 82c93ebdeea32b5e730078c3df212b5b9c9a3ef1 but the fix was part of 1.3.1. Do you use json cookies?\nApart from that I am running out of ideas and I can't do anything if you're not willing or able to provide a simple test case (you could even use JSBin or similar with only your relevant code portions).\n. More awesomeness!\n. @FagnerMartinsBrack Thank you! To me everything looks good then, squash and merge?\n. Awesomeness! Thanks! Will look into it :)\n. @FagnerMartinsBrack Sorry for the delay. I have been ill for quite some time.\nThis all looks good, just one thing: You were mentioning \"need to add to the contributing docs\" in the first commit message - is that to be added still to this PR or is it part of your other PR?\nIf that's solved and the two commits that seem to belong into one are squashed, I'd like to merge :) \n. @FagnerMartinsBrack All good, could you squash the two commits before merging, these changes seem to belong together?\n. @FagnerMartinsBrack Thank you, great! :)\n. Do you use a path when writing the cookie you're attempting to delete?\n. What is the actual name of that cookie? (I'm assuming it is not \"name\"...)\nCould you try with the latest version from master?\n. BTW, without using path the cookie will not be readable from anywhere on your site. Plus, which may or may not be the issue here, if you attempt to remove it from a different page, it will not work (the cookie were just not visible). To create a side wide cookie, you'd use:\njavascript\n$.cookie('foo', 'bar', { path: '/' });\nAnd for removing you'd have to pass the exact same path (options actually). Or use default options. There's more information in the README. \n. Exactly.\n. What exactly is the problem? Is the cookie not written properly? I can't see how you're reading it back...\n. Or that the cookie is gone after restarting the browser?\n. You're probably looking for this: https://github.com/carhartl/jquery-cookie#secure\n. Instead of a number you can pass a Date instance, this allows you to specify the exact time until expiration. It should be mentioned in the Readme.\n. Thanks for the PR. Though using null as value had been deprecated in 1.2 (see changelog) and support for it later been removed on purpose to save on code.\n. Well, if a plugin adds a function to $.fn it is adding a chainable method to jQuery. The cookie plugin simply doesn't need that. What does chainable mean? When looking for DOM elements such a function will iterate over the result and operate on these, like show for instance: $('div').show().\nThe cookie plugin doesn't do/need that and that's why it's different. By no means does that indicate it's a bug or somehow wrong.\nThe issue in question may relate to the AMD support. Which version are you using, could you please give latest from master a try, if that's not what you're using?\n. If using the latest version doesn't help we would need you to upload a test case somewhere in order to being able to get to the root cause of this.\n. No, so far, it isn't providing a clue. The plugin works in many other environments without the problem. Could you give head a try, please? We added AMD support after 1.3.1 and that also changed the way we're initializing the plugin (similarly to how you fiddled with it).\nI'm also thinking, could it be a browser specific issue?\nLast guess: I've seen such an issue in the past when jQuery was loaded twice accidently, could that be the case?\n. Either git or save this as js: https://raw.github.com/carhartl/jquery-cookie/master/jquery.cookie.js\n. See my other questions then please (browser specific? accidental double inclusion?). Apart from that the only way to get to the root cause is imo to provide a simplified test case exposing the issue (since obviously the build is green and the plugin works well otherwise; in other words, it has to be an environment specific issue).\n. (Simply because I'm not able to reproduce the issue.)\n. A window's \"unload\" event catches all of the scenarios.\nNot a plugin issue.\n. Two more links of interest:\nhttps://saucelabs.com/docs/javascript-unit-testing-tutorial\nhttp://blog.nparashuram.com/2012/11/introducing-qunit-tests-on-grunt-using.html\n. You cannot tell the browser to read a cookie from a particular path. Once you've written it (with or without path), it's up to the browser to resolve the cookie by its name and eventually restrict access according to the current path.\n. So what's happening in $.cookie('theme', { path: '/' }) is that you're accidently writing a cookie with name \"theme\" and a value of { path: '/' } (which is being passed to String() when written to document.cookie).\n. Wiki is fine. In that case, shouldn't we move the contributing guidelines to the Wiki as well? I'd like to be consistent.\nThe README would serve as a quick start document and should also mention the Wiki.\n. > Changing the way quoted strings work will conflict with the treatment that is being made to comply to RFC 2068, but since we are taking control of the structure, that spec seems to be irrelevant.\nNo, we're not always in control of the structure. The RFC 2068 treatment is required for the case of attempting to read such a cookie that has been written on the server.\nThe likeliness though that someone wants to read a server-side JSON stringified cookie that is also a RFC 2068 cookie seems rather low.\nI'd like to think this through some more nonetheless.\n. Only {} and [] are valid JSON though (despite of what JSON.parse can or can't handle) and I was, so far, thinking, that if you turn on json, you're supposed to pass valid values, even though we didn't validate for the sake of lightness of the plugin.\nI wouldn't want to further support something that sort of worked by chance.\n. http://jsonlint.com\n. The entire config.json was a bad idea to begin with and it's far from practical to switch between the two modes whenever you'd like to write a string vs. a (serialized) object, so I can see the point here to make it a little more practical at least.\nIf only we finally had converters (#151) - I believe they'd solve all of the issues in one.\n. Closed PR, the solution for the issue is different.\n. You can't set a domain different from the the one you're in, for security reasons, even with subdomains. What would work is setting the domain \".mydomain.ca\" and this would work for both www and foo subdomains.\n. Make sure you're at least using version 1.3.0. If you can't access the single cookies as suggested then it's very likely that you don't have access to the cookies from where you're trying to read them. Remember to write the cookies using path: '/' (you can also set this as default option, please see the Readme).\n. And which version are you using?\n. If I compare the header comment from the tagged 1.3.0 version, it looks different from yours. See https://github.com/carhartl/jquery-cookie/blob/v1.3.0/jquery.cookie.js\nThat's odd. Where did you get the file from?\nCould you please try the latest officially released version?\n. @arunkumarg Are all these cookies written server-side or via JavaScript?\n. Closing, we're not able to reproduce lacking further feedback.\n. If we can't reproduce the bug, the bug isn't as simple as it seems.\n. Also, the information you gave isn't sufficient. Which versions of Safari and which OS does the error occur in? How do you attempt to write the cookie? And so on. As the unit tests indicate that setting the cookie works just fine in Safari (for me), we need a little information in order to being able to solve the issue.\nSetting up/providing a simplified test case can sometimes help to already spot the issue while building it.\n. In your code, I saw you're including the cookie plugin twice. First of all, you should fix that.\n<script src=\"/js/jquery.cookie.js\"></script>\nFurther down, within #inline:\n<script type=\"text/javascript\" src=\"/js/jquery.cookie.js\"></script>\n. Further, I am not sure whether using live('click', function() { ... }) on a single input element (#proceed) would work reliably cross-browser. You would just need a click for this: on('click', function() { ... })\n. Given that the error only occurs in IE, line 51 in that file is where the cookie assignment happens: document.cookie = [. Maybe in IE there are security restrictions at play which prevent the cookie from being written. I've seen that before. Please check your settings.\nAre you testing IE within a VM? Also, which version of IE?\nAnd with these changes the issue in Safari is gone?\n. The cookie does not know anything about logged in or not state, thus, yes, what you see is expected behavior. The cookie simply still exists, even after logging out.\n. What does \"more version of IE\" mean? \n. Are there any other JavaScript errors in Safari?\n. That error seems to be the same as in IE. Could it be that some other 3rd party JavaScript is messing with the Date prototype? Without real code, I can only speculate and it's becoming tedious. It were helpful if you could provide something real.\nAnyway. In the Safari console, what does (new Date).toUTCString() return?\nMaybe the difference when logged in or not is that different scripts are being loaded.\n. @ravi9654 Two ideas:\n- Make sure to include the plugin correctly in the first place.\n- Since you're mention noConflict(), are you using two different versions of jQuery? This can lead to such an issue as well, in that the cookie method is being attached to the \"wrong\" jQuery library/namespace. I think including the plugin after including all of jQuery will help.\n. With the change as is, there is two times the test for config.json within the same function. I'd like to DRY that a little, especially since config.json will be deprecated/removed once #151 is implemented.\nI rather tend to change the order of processing in the converted helper function:\njavascript\n    function converted(s) {\n        try {\n            return config.json ? JSON.parse(s) : s.indexOf('\"') === 0 ? s.slice(1, -1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\') : s;\n        } catch(er) {}\n    }\n(That's probably the most unreadable version of the idea.)\nFor this to work the assumption that a mixture of serialized JSON and a RFC 2068 can't occur must hold true. How to verify that?\n. I think I know now how to solve all of it. Said RFC 2068 cookie can only be written on the server, and the value looks like \"foo\". Whereas any cookie written client-side that contains a value with \", will be written with these quotation marks transformed into %22.\nLong story short, the solution is to replace the wrapping quotes before decoding the cookie (I think).\n. With that few information we will not be able to help you.\nHow are you writing the cookie? Did you make sure to use the latest version of the plugin? Are you still in the same domain (incl. subdomain) when attempting to delete the cookie?\n. I wasn't asking whether the domain is the same in different browsers, but if at the time of removing the cookie the current url/domain is still within the given domain as specified in the cookie attribute?\nIE 8 simply might expose erroneous behavior here, as it is so old.\nAnother question: Are these cookies http only maybe? What does $.cookie() return? If that returns null what does document.cookie return?\n. A quick test in the console and it looks ok to me:\n\n> $.cookie('foo', '\u043e\u0434\u0438\u043d\u043e\u043a\u043e')\n\"foo=%D0%BE%D0%B4%D0%B8%D0%BD%D0%BE%D0%BA%D0%BE\"\n> $.cookie('foo')\n\"\u043e\u0434\u0438\u043d\u043e\u043a\u043e\"\n\n@awcab Could you please provide further information - for instance the value of the cookie in question or how it is being written - or, ideally, a failing test case? For now I am closing this as the issue seems related to an encoding problem rather one in the plugin.\n. Thanks for the PR, I've added ignored files manually, since the next version I plan to release will not be 1.3.2 but 1.4.0.\n. @FagnerMartinsBrack All I remember is that I merged the PR manually trusting the author that this is necessary/useful... my knowledge on bower usage was and is still limited. :)\n. The \"odd return\" is because you cannot read a cookie from a particular path, i.e. by passing it as second argument. What is happening here instead is that you're simply writing a new cookie with the (stringified) value of { path: '/' }.\nOnce a cookie is written with particular attributes, it's up to the client to resolve which one is being read (depending in the current url), or one could say which one is available, and one similarly named cookie may shadow another one.\n. No, doesn't seem reasonable imo. What if somebody relies on exactly that standard browser behavior?\nDespite of being reasonable or not \u2013 in terms of expected behavior that is \u2013 removing previous ones is just not feasible, at least not for this lightweight plugin, as we had to keep track of every single cookie along with it's attributes that had been written.\n. Are you using the latest version?\n. Ah. The change is in HEAD but not yet officially released. https://github.com/carhartl/jquery-cookie/blob/master/CHANGELOG.md#head\n. Do you have an idea how to circumvent such a problem?\n. How is that an issue? One can always change existing cookies or add new ones through, for instance, document.cookie. The plugin simply provides an API on top of that to make working with cookies easier. There is no way to restrict access to cookies that have been written with the plugin.\n. FWIW, other than obscuring the cookie's name and thus making it a little bit harder to recognize, there's no way to prevent a cookie from being altered client-side.\nFor critical cookies you might want to consider using httponly cookies and hide them in the client in the first place.\n. How does it turn into such an invalid cookie? Is it written on the server? In that case you should simply use raw: true.\n. Not necessarily does it mean you have to use raw. First of all I'm trying to understand how that issue can occur at all, in order to find the (hopefully) best solution for it.\nBut - we had a similar problem and discussion regarding JSON cookies (json: true), i.e. what to do in case the string that gets read causes the JSON parser to error. We decided that, in such a case the plugin should simply return undefined, because if the string cannot be parsed the cookie isn't usable and should be treated as if it didn't exist.\nWhat's to do if, like in this case, the string cannot be decoded for the standard configuration? Shouldn't it be treated the same? Is a cookie with a broken encoding usable? So if we were to be consistent with the JSON case we'd need to catch the exception but return nothing.\nWith raw turned on, the developer is at least stating \"give me anything no matter how usable it is\", intentionally.\nAnother thing - there's #151 along with a branch called \"converters\". Could you take a quick look into the ticket and let me know whether such a read converter would be useful to solve your problem (I'm thinking of writing a converter that handles decoding exceptions).\n. FWIW, YUI is ignoring the cookie if the encoding is wrong:\njs\ntry {\n    cookieName = decode(cookieNameValue[1]);\n    cookieValue = decodeValue(cookieParts[i].substring(cookieNameValue[1].length+1));\n} catch (ex){\n    //intentionally ignore the cookie - the encoding is wrong\n}\n. Ah, thanks! Now I understand.\n. Could you use the latest version from head? It no longer has this issue.\n\n> document.cookie = 'evil=bar%'\n\"evil=bar%\"\n> document.cookie = 'good=foo'\n\"good=foo\"\n> $.cookie('good')\n\"foo\"\n\n. There is no secret method. You can use the following code:\njs\n$.each($.cookie(), $.removeCookie);\n. The expires option can be a an instance of Date instead of a number, so you can specify minutes (or any other exact date) this way. Also see the README.\n. @Messilimeng http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\n. :thumbsup:\n. The underlying problem is that the for loop is entered even when there are no cookies, i.e., because document.cookie.split('; ') returns [''] and this array is being looped over. Wouldn't it be more readable if we prevent entering the loop in the first place? Testing for existence of the name inside the loop is quite subtle and lacks to reveal its purpose imo.\n. Thanks for the PR nevertheless! I fixed it, as mentioned, a bit different.\n. Also see 81dd6a1596bdcd8e6c4008fcfc6d42825a7c4a2f.\n. The error looks like you're including jQuery twice, probably accidently. I've seen it here before. It's not an issue of the plugin though.\n. Can't help at all with the given description, I'm sorry. Please provide a test case exposing the issue.\nIf you could at least translate the chinese text that could give us a hint.\n. The tests show that it returns the expected result. Which version do you use?\n. @lovenick No cookie is being set, is that a different issue then the one reported here?\n. That no cookie is being set on file protocol might actually be a browser issue. For the same reason I run tests using a little server.\n. @Dorian Let me ask again, which version do you use? Also, please try the latest version from head.\n. Thanks for the pastebin. It appears that the version you're using doesn't even support reading all cookies. Please upgrade to 1.3.1. Closing.\n. Works fine for me with the latest version (HEAD) in Google Chrome:\n\n> $.cookie('broken', '\u00e9')\n\"broken=%C3%A9\"\n> $.cookie('broken')\n\"\u00e9\"\n\nIs this browser or version specific? Could you please provide some more information regarding these details?\n. @mclenithan Anything?\n. But here you're bypassing the write function and entering a wrong encoding on purpose - it couldn't occur if you were using $.cookie('foo', 'bar').\nIf you have to deal with such strings that's what raw = true is for.\n. But the quick regex we were adding for your case would maybe not even be interoperable with other third party encodings, or over time we were adding more and more regexes for other people's special cases. It's just not feasible.\nAnyway, for such cases, a new feature, namely converters, may help you, see similar named branch.\n. FYI, I've just released 1.4.0 - not sure how quickly bower picks that up.\n. Not sure I understand what this method is supposed to do.\n. I see. I want to keep this plugin as lightweight as possible, and this is a bit out of scope imo. Easy enough to implement something on your own:\njs\n$.each($.cookie(), function(key, value) {\n  if (key.indexOf('prefix') === 0) {\n    $.removeCookie(key);\n  }\n});\n. I never heard of composer/packagist before. I'm not particularly interested in maintaining yet another package manifest but if somebody sends a pull request I am going to add it.\n. There's no way I can deduct any error in the plugin from the posted snippets. Please provide a simplified test case exposing the issue, most often it helps to find the actual error. I suspect some integration error/side effect in your site - the plugin itself works fine and doesn not have the problem.\n. Also, though I can only speculate here, the timeout within cookieUpdate may not play well.\n. The reading loop already halts (spot the break) if the cookie in question has been found - though it is of course not determinable whether a badly encoded cookie is being looped over before or after the cookie that needs to be read.\nunescape has long been deprecated thus it is not an option imo. If you need to deal with cookies that do have an invalid encoding, i.e. one that cannot be handled by decodeURIComponent you need to use raw = true.\n. If you have to use unescape you will be able to use what we call converters (see the branch). I'm soon going to release this.\n. FYI, I've just released a new version and for a troublesome cookie you could now use:\n$.cookie.raw = true;\n$.cookie('foo', unescape);\n. So far I have been reluctant to add a minified version to a source repository. Minification (and concatenation) are build steps that usually happen at a later stage.\nThe minified version would also always have to be synced with each commit that changes code, which to me isn't feasible, let alone desirable.\nHow does Bower pick up the code in repositories? Does it look for tags?\n. Could you give me an example of a package that provides a minified source?\n. Unless I've been overlooking something jQuery does not provide any minified version within their source repository, e.g. git. Maybe they're doing some extra work to provide a special bower package which I am not aware of.\nBoth of the solutions you're suggesting are error-prone, they need to be either installed or running first and as such are easily forgotten about and put an extra hurdle in the way of contributors.\nIf there's an easy way to add a minified version to the release/tag I'd be willing to do that, but as aforementioned minification imo does not belong into a source repository.\n. So Git hooks can be installed automatically whenever somebody checks out a repository? Could you please explain to me how this is done?\n. FWIW, I agreed that the minified script is perfectly part of a release/distribution.\nThis is also what Github had in mind with releases:\n\n\"You can also attach binary assets (such as compiled executables, minified scripts, documentation) to a release.\" \n\nhttps://github.com/blog/1547-release-your-software\nIt seems that Bower took already care to support it:\nhttps://github.com/bower/bower/issues/584\nThis to me were a way to go forward.\n. @drbrts I've just released 1.4.1, including a minified version in the GitHub release.\n. Could  you please expand on that a little bit? How is the cookie being written, e.g. using which options? On which domain are you then trying to remove the cookie? Is eventually a domain specific cookie shadowing a global one?\n. I assume you're passing the exact same value for the domain option.\nSo we are then able to read the cookie, but it does not seem to get overwritten in this line:\njs\n$.cookie(key, '', $.extend({}, options, { expires: -1 }));\nI can think of that the cookie has been written also with a particular path attribute, so the attempt to (over)write it fails if these options do not match. This may just help you in order to successfully delete the cookie though.\nTo more reliably signal whether the cookie has been truly deleted I'm going to change the method to:\njs\n$.removeCookie = function (key, options) {\n    // Must not alter options, thus extending a fresh object...\n    $.cookie(key, '', $.extend({}, options, { expires: -1 }));\n    return !!$.cookie(key);\n};\nIt's even shorter than before and less complex.\n. I need to fix it too, please don't close :)\n. That is the standard browser behavior you're observing. You need to specify the path attribute as well. There's more information in the Readme.\n. Any idea on how to prevent Adblock from blocking the script? This seems to be more of an error to be reported to Adblock rather than here... \n. Do you use a minified version while it gets blocked?\n. I was just asking because I was wondering whether some special word in the comments could be triggering AdBlock.\nBut now, if it works or not depending on the domain this to me even more seems to be an AdBlock issue rather one of the plugin.\n. @captain-torche Any progress on this or any advice on how to test this? \n. I saw a tweet mentioning that it would be free for OSS projects, though I couldn't verify it yet.\n. Which IE in particular?\n. Not sure I understand \"doesn't return anything\" \u2013 does it throw an error?\nReturning nothing doesn't seem to be possible technically.\n. Interesting. Seems to be a peculiarity in IE's JavaScript implementation. Usually testing for falsiness is sufficient, thus I would have written:\njs\nvar foo = $.cookie('foo');\nif (foo) { /* ... */ }\nWould that work?\n(Closing, not a plugin issue.)\n. This would interfere with writing a JSON cookie:\njs\n$.cookie.json = true;\n$.cookie('foo', { foo: 'bar' }); // write serialized object to cookie...\nWhile it were still possible to make this work (with the downside that developers could no longer save a cookie containing a key named \"default\"), adding it would add complexity to the code not worth it imo.\nLet alone you can accomplish the same using a rather common idiom, and with less code even:\njs\n$.cookie('the_cookie') || 'default_value';\n. You can't write a cookie while on the file protocol by design in Chrome. You have to start Chrome with --enable-file-cookies to make this work. \n. http://wolfslittlestore.be/2012/08/cookies-on-local-files-in-chrome/\n. Here's a blog post about the very some problem you have with some further explanation on how to make cookies work in Chrome: http://wolfslittlestore.be/2012/08/cookies-on-local-files-in-chrome/\nPlease do not open yet another issue, nothing e can do about it except for maybe adding a note to the Readme.\n. This looks like in the home screen an older version of the plugin is being used, presumably from cache. Did you upgrade the plugin lately?\nI've seen similar things before.\nCould you please try in the simulator? There is no caching at play.\n. Please see https://github.com/carhartl/jquery-cookie/issues/152#issuecomment-12953584\n. Never heard of that before, google didn't help either. Could you let me know which particular version of Android you were seeing this in, and maybe whether it's in a webview or not?\n. And what does navigator.cookieEnabled return?\n. I've added Android to the browser test matrix here https://github.com/carhartl/jquery-cookie/tree/test_android and at least for the provided version (4.0) the tests are all green. That said, I suspect that the peculiarity has to do with the version/environment you're using. \n. Does Android 2.1 support Object.defineProperty along with getters and setters already?\nWhat I was thinking is that you or the plugin could patch document like this:\njs\nObject.defineProperty(document, 'cookie', {\n    get: function() {\n        return window.cookie;\n    },\n    set: function(s) {\n        return window.cookie = s;\n    }\n});\n. What about __defineGetter__ and __defineSetter__?\n. js\ndocument.__defineGetter__('cookie', function() {\n    return window.cookie;\n});\ndocument.__defineSetter__('cookie', function(s) {\n    return window.cookie = s;\n});\n. Can't you test the given snippet with your site? I do not even own an Android device where I could test on...\n. I'm looking into downloading an SDK, maybe it has an emulator with Android 2:\nhttp://developer.android.com/sdk/index.html\n. Thanks for the PR. Which version of jshint are you using? I don't get errors:\n\n$ grunt jshint\nRunning \"jshint:files\" (jshint) task\n>> 2 files lint free.\nDone, without errors.\n\nIn any case, I don't think it's worth adding more characters just to satisfy jshint. Imo the code in question is a well understood idiom.\n. Ah, wait. Please see .jshintrc, there is boss: true.\n. You have to specify the domain when writing the cookie.\njs\n$.cookie('test', 'foo', { domain: 'a.xx.com' });\nThere is no way to do that when trying to read a cookie. Either there is access to the cookie or not, depending on the attributes (domain, path).\n. You can't specify which domain to read the cookie from. Once it is written, the browser is going to resolve which cookie is visible depending on the cookies' attributes and the current path and domain you're at.\nFor instance, if you've written a cookie with the path \"/foo\" and you're at \"/bar\", the cookie is not visible, like it doesn't exist. Same goes for domain.\nThe handling whether such cookie is visible or not is done by the browser automatically and there is no control over it when reading. All you can do is ask for a particular cookie's key. So if you've written a cookie with a particular domain, if you're in this domain, the cookie will be readable.\nThe code you're mentioning is thus not wrong, because when reading you can't pass any options, and indeed when passing two arguments you are going to write a cookie. Omit the second argument for reading.\n. The expires option accepts a Date instance.\n. Can you point me to Rails' implementation of writing the encrypted cookie? It is maybe http only.\n. Also, is the cookie written with the path '/' by default in Rails?\n. But the given snippet simply sets up the cookie configuration. What do you expect to be stored in the session cookie?\n. Do you expect the cookie \"_site_session\" to be readable by $.cookie()? It isn't, because it's http only, as seen in the screenshot, see column \"HTTP\".\n. @mr-bios Can we close this?\n. Duplicate of #122. Please see my comment there.\n. Thanks for the PR. Could you please squash the two commits? \n. Is this sufficient for now, or do I need to push a new release?\n. No, it's impossible to get that from the cookie itself. You could store that in a second cookie though.\n. Instead of of a number, expires accepts an instance of Date as well. See Readme.\n. I'm thinking about making it work as requested, though it adds more code.\nThe Readme seems to be implicit that it has to be an \"integer\", depending on how we end up, we can reword that better I guess. Reopening as a reminder.\n. t.getSeconds() is the same as t * 1, so we can be shorter.\nSo:\njs\nt.setSeconds(t * 1 + days * 86400);\n. Nonsense! t * 1 gives milliseconds.\n. ... because JavaScript :)\n. Nevermind. In the tradition of jQuery we're trying to keep the code as small as possible. Every byte counts. That's all.\n. The only thing I can come up with is this:\njs\nt.setTime(t * 1 + days * 86400000);\n. t + days coerces to string => \"Fri Nov 29 2013 10:58:01 GMT+0100 (CET)86400\".\n. +t works though! :)\njs\nt.setTime(+t + days * 86400000);\nHaha, we saved one character. Can we write 86400000 in different representation? Just for fun now :)\n. Same amount of characters as before, ha:\njs\nt.setTime(+t + days * 864e+5);\n. @FagnerMartinsBrack Nearly forgot, I am not following jQuery coding style? :)\n(I can't do the whitespace thing.)\n. What kind of conflict? What is the error being thrown? Please provide sufficient information, otherwise we will not be able to help you. \nAlso, which versions of the plugin, require.js are you using? Can you point to a live page (jsbin) where we can observe the error...\n. @gopeter Can you show me how exactly you're including jQuery and jQuery cookie?\n. @gopeter \nThe only way I can reproduce the Uncaught ReferenceError: jQuery is not defined error is by the following setup:\nInclude scripts in this order:\nhtml\n<script src=\"scripts/jquery.cookie.js\"></script>\n<script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>\nwith a  main.js as simple as this (basically I just needed to map jquery):\njs\nrequire.config({\n  paths: {\n    jquery: 'jquery-2.0.3'\n  }\n});\nWithout knowing too much about ember-tools I suggest to look into include order in the build configuration. \n. @shabbirhossain \nAssuming that you're running into a Uncaught Error: Mismatched anonymous define() module error, all l can find is this from the RequireJS documenation:\n\nTo avoid the error:\nBe sure to load all scripts that call define() via the RequireJS API. Do not manually code script tags in HTML to load > scripts that have define() calls in them.\n\nhttp://requirejs.org/docs/errors.html#mismatch\nNot sure if that's something I can fix on the plugin side.\n. If you have pages that rely on requirejs and others don't, but all of them need the cookie plugin, here's a way to accomplish that with your template:\njs\nif (window.requirejs) {\n  require(['jquery.cookie'], function() {\n    console.log(jQuery.cookie);\n  });\n} else {\n  script = document.createElement('script');\n  script.src = 'scripts/jquery.cookie.js';\n  document.getElementsByTagName('head')[0].appendChild(script);\n}\n. There's a simpler way - found here: https://groups.google.com/d/msg/amd-implement/c9EcRZyKmvA/N7YdOkIrXgkJ\n\nif you are using script tags, specify  them before the script tag for the AMD loader\n\nE.g. something like:\nhtml\n<script src=\"scripts/jquery-2.0.3.js\"></script>\n<script src=\"scripts/jquery.cookie.js\"></script>\n<script data-main=\"scripts/main\" src=\"scripts/require.js\"></script>\n. Yes, it supports UTF-8. Make sure your files are saved and served correctly as UTF-8.\n. What exactly do you mean by duplicate? What you probably want is to set the cookie's path.\n. I don't think you need to remove the cookie before you (over)write it anyway in the next line, but that's just for less code.\nInstead of what is shown in the Settings interface, I'd be much more interested what is actually being shown in the developer console in the Resources tab > Cookies.\n. If there's one cookie only it should be fine. I don't really know what is shown in settings but it could be that it's showing multiple cookies if they have different path. Also, one cookie (/foo) could be shadowing another cookie (/foo/bar) that's why after deleting the one for, say /foo/bar, there's still one visible, namely the one for /foo.\n. I don't see this being a bug in the plugin, closing.\n. I have no clue so far, except for this thought: If I write a cookie on the client-side, along with a path attribute, then I have to pass the very same options when attempting to delete a cookie (because deleting only works by writing the same cookie with a date in the past):\njs\n$.cookie('foo', 'bar', { path: '/' });\n$.removeCookie('foo'); // does not work...\n$.removeCookie('foo', { path: '/' }); // works!\nSo if ASP sets the path as shown, then you might have to specify the path as well. You could also set up default options to match the ones used within ASP and so you don't have to think of it all the time:\njs\n$.cookie.defaults = { path: '/' };\nNot sure though it it's really it, let me know please...\n. #122 \n. We had been using one, though there was a problem in IE that made it necessary to replace it. Feel free to send a PR though.\n. Oh, plus, using a regex would require different code for $.cookie('foo') and $.cookie().\n. The problem was here: f98f6a3c615f4a447530cf354bf9880e01aa24ba\n. There's a better explanation in the test for it: https://github.com/carhartl/jquery-cookie/blob/master/test/tests.js#L19\n. Sure, why not. I'm not saying it's impossible. Requirement for me were that it wouldn't result in more code (and tests green of course). Feel free to send a PR.\n. You can pass an instance of Date to the expires option.\n. Ah right, thanks :)\n. I prefer not to overwrite standard browser behavior (same with the path attribute). It's becoming non-intuitive as soon as you want to override this behavior by having to specify secure: false. Which then also needs to be properly documented.\nIn other words: less automagic is a good thing imo in these cases.\n. Please see various request regarding NuGet before. You need to ask the maintainer on NuGet to upload the plugin, there doesn't seem to be a way for me to do this.\n. Seems to be a bug, surely within the scope.\n. Which version do you use? I'm not able to reproduce this behavior:\n\n> $.cookie('foo')\nundefined\n> $.cookie('foo', Number)\nundefined\n\n. @FagnerMartinsBrack That link works for me.\n. Ah yes, I see, there's a 301, the new location is https://raw.githubusercontent.com/carhartl/jquery-cookie/v1.4.1/src/jquery.cookie.js, but that gives a 404... I don't get why.\nhttps://developer.github.com/changes/2014-04-25-user-content-security/\n. Though the 301 doesn't have anything to do with it. The link is simply broken, and was from the start. Introduced here: 5421819450666bada6d1aed655cfaf4e85a4f88b\nI say we're going to remove it.\n. That is, only for PRs (the API key does no longer match the user). I do not have an idea yet how to workaround this.\n. @gaastonsr Could you expand on what's the use case for this? Right now I can't see how the plugin fits into a server-side environment...\n. But the interface for reading cookies in Node.js is not document.cookie, isn't it?\n. request.headers.cookie\nThough the idea to make it work in both environments is intriguing. I am accepting PRs :)\n. On the other hand, not sure I'd call the plugin jquery-cookie any longer. Plus, any reasonable web application framework has an implementation/interface for dealing with cookies just fine...\nhttp://expressjs.com/api.html#req.cookies\n. I am confused. That code for supporting AMD we do have in place already. Now do we need this PR or not?\nAnd if yes, for which use case exactly?\n. Thanks @gaastonsr. Is there a way to have this tested? Also, to merge this I'd like to have these 3 single commits squashed into a single one.\n. Let's not go overboard with testing this, I mean, the testing harness shouldn't get more complex then the code itself. I had in mind that stubbing a bit is just enough to verify the right methods are being called. We don't want to verify commonjs behavior. Sorry if I wasn't clearer about this.\n. I appreciate the effort though.\n. @FagnerMartinsBrack I had planned to add some sort of integration testing for AMD for some time. What I wanted to prevent now is to make it seem like it's too hard to contribute to this plugin... let's merge and tackle it right after?\n. Yes, it will be merged.\n. Could you describe how I'd be using the plugin with npm?\n. What I mean is, how would I setup a project... I'm really a newcomer in terms of npm.\n. In any case, we can do this. Please file an issue if you like...\n. Has been discussed before. The reading form isn't even possible, since we cannot distinguish it from a write operation, except for when looking into the object itself whether it contains a \"json: true\" key-value pair, which is ugly.\nPlus, I'm inclined to remove the json config flag alltogether, it was a bad idea and as it turns out not practical. Instead I have already introduced converters to allow replacing it. Also, as of today I prefer explicitness over a somewhat magic flag.\nI agree with @FagnerMartinsBrack that if you need some more functionality you can easily add it on your own, the plugin provides the building blocks to do so. And that's what it is aiming for, no more no less. I want to keep it as simple and lightweight as possible.\njs\n$.jsonCookie = function() {\n  $.cookie.json = true;\n  $.cookie.apply(null, arguments);\n  delete $.cookie.json;\n};\n. First of all because the name is horrible :)\n. Could you expand a little bit on that? Under which circumstances, i.e. which cookie are you trying to delete, using which cookie attributes etc.?\n. @dwvanstone Could you please try HEAD? It works for me, adding this test kept the test suite green:\njs\ntest('key as String object', function () {\n    expect(1);\n    $.cookie(new String('c'), 'v');\n    strictEqual($.cookie('c'), 'v', 'should write value');\n});\n. AFAIK, this won' t fix.\n. So it needs to be something Java capable? I can set something up on Heroku. \n. @FagnerMartinsBrack Seems to be. I closed it via the issues overview along with two others. I closed it for now since I seemingly never get around doing it, btw.\n. Do you want to read such cookies that have been set server-side like this with Cake?\n. As far as I can see the plugin provides this functionality:\n``` js\n$.cookie.json = true;\n$.cookie('foo', { 'bar': 'gaz' });\n$.cookie()['foo']['bar'] // => \"gaz\"\n```\nPlus, for enabling reading an arbitrary format used by whichever framework you're using, you can write your own converter:\njs\n$.cookie('foo', function(s) {\n  // s is the cookie value as plain string, do something with it\n});\n. Is there a getting started guide somewhere?\n. https://www.npmjs.org/package/jquery.cookie\n. On my iPhone and 3G the cookie was correctly written. Maybe it is related to the network/proxy, i.e. some sort of filtering of http headers. Surely not a bug in the plugin.\n. Tests are not meant to run on file: protocol, because there are problems with cookies and IE (obviously). What happens if you run them using the server?\n. Why reopening if it seemingly was a problem with your installation?\n. Thanks!\n. See various discussions on that topic before in the closed issues.\n. How do you trigger said compatibility mode?\n. Just in case this isn't a copy and paste error, the code is missing a colon: { expires 2}=> { expires: 2 }\n. Why I was asking was that I found these emulated compatibility modes not 100% reliable and not resembling the real thing. Could you try it with an IE in real compatibility mode please?\n. Ah wait, that setting is something different (I was thinking of deverloper tools). I'm going to first have to get IE11 to be able to test this...\n. I ran the test suite under the given circumstances with the latest IE 11 on Windows 7, all green. There may be an issue in your own code/environment not related to the plugin. Closing, though if you can provide a test case that reproduces the error we will reopen the issue.\n\n. This simple line does the same: $.each($.cookie(), $.removeCookie); \n. We're using the very same comment format as the jQuery library itself. The plugin's own grunt uglify tasks works fine.\nIMO if there is an issue it needs to be fixed within grunt uglify.\n. Thanks for the offer, but I'm not interested in adding this (mostly for the reason of the added complexity). The expires option is already quite versatile, it allows instances of Date just as fractions of a day, so your examples could be written as expires: 1/3 (8h) and expires: 1/48 (30min).\n. The plugin supports specifying 15 minutes using plain old JavaScript without the need for obscure numbers. Imo this is good enough (and flexible):\njs\nvar inFifteenMinutes = new Date(new Date().getTime() + 15 * 60 * 1000);\n$.cookie('foo', 'bar', { expires: inFifteenMinutes })\nThe solution you are supposing would need testing, documentation, and last not least it adds to the code whereas we strive to keep the source as leightweight as possible.\n. All green for me. Please remove all cookies for that domain and try again.\n. I asked you to please remove all cookies in the browser before running the test suite, though there is still an unexpected cookie named \"__atuvc\", which is causing the tests to fail. The tests are meant to run in clean state, that's why they come with their own server.js.\nWhy do you want to run tests on your site? Are you having problems using the plugin?\nIn Safari, clean state,  there are no errors:\n\n. @FagnerMartinsBrack Strangely, I cannot remember exactly either, though I'm sure there was something. It can be found in discussions within older tickets. Odd!\n. @FagnerMartinsBrack Ah, I know, it was the case for raw being passed as option per read call:\njs\n$.cookie('foo', { raw: true }); // Read or write?\nPeople from time to time asked for this for the json flag, which we then had to neglect.\n. Thanks for the PR @dhoulb.\nI'm open for this, especially since I keept looking for a way to get rid of the json config (turned out to be not usable at all) and this could be the way. I also like making the plugin behave like data(). \nAn idea: Instead of copying the regex, can we borrow the functionality for writing and parsing from jQuery's data(), some internal methods maybe, or if necessary even using it right away on a dummy node?\nI will have to look into jQuery a bit more to see if we can use something...\n. This has been discussed before (in the issues).\nOne can easily control the default using default options.\n. I liked the idea of releasing a minor version with all the latest changes, and then a 1.5 beta including this change.\nJust thinking, isn't removing json config doing any harm at all? Anyone not using it will get automatic json parsing for free, anyone having it turned on will still get JSON parsed out, no?\n. Unless I'm overlooking something the only thing that isn't backwards compatible here is when someone is storing values other than Array or Object with json config active, like booleans.\nSee my comment here: https://github.com/carhartl/jquery-cookie/issues/286#issuecomment-41367809\n. Another thing I'm thinking about is whether it's worth it to move all of the parsing logic out of the plugin, and instead utilize data(), thus have a cookie read behave exactly like it. Either by using a dummy node, or passing an object to data() that quacks like a node.\n. Exactly. Imo reading from a cookie should behave exactly like jQuery.data(), not just in parts. If we get to avoid duplicated code that were just a welcome side-effect.\nE.g. as if the following would work:\njs\njQuery.data(document.cookie, 'fookey');\n. I am no longer sure if we should go for pushing a new jQuery API method to use, as this would make the plugin require the latest version, which seems needlessly restrictive?\n. Not sure about the duplication. I'm trying a bit tonight to see whether we can use jQuery.data() feasibly.\n. I really wouldn't want to duplicate the entire type parsing logic.\n. Wasn't it also pulling true/false values back out? Maybe numbers?\nTo me this isn't even so much about the duplication. I see the benefits in reducing friction and future maintenance effort. If we use data(), reading a cookie value will always behave the same, per jQuery version that is. And if at some point the method is enhanced to do something new, we/users of the plugin get that for free, without us having to adapt anything at all.\nAll that being said, I'm not even sure whether it can work like that, to me that would just be the ideal I'd like to give a shot at.\n. I think I soon will be convinced :)\n. Interestingly:\njs\nvar something = {}\n$.data(something, 'foo', 42)\n$.data(something, 'foo') // => 42\n. No, not interesting, because $.data(something, 'foo', '42'); doesn't work...\n. Nonetheless, here's a proof-of-concept: https://github.com/carhartl/jquery-cookie/commit/65a9d240876e9d52745a95e6d65db126ccdca12d\nIt required only a tiny change (two lines) without any duplication of code from anywhere at all.\nDownside (although that'd be the same with the given PR): The plugin would require JSON.stringify, though that might no longer be a problem today.\nTo speed up things that $('<div>') would be created once and cached, so it'd be a three line change. Let me think about all this once again... :)\n. Planning to release a version 2.0 with this, along with #295.\n. This is not a bug of the plugin though, but simply how JavaScript works:\njs\nBoolean('true') // => true\nBoolean('false') // => true\nBoolean('') // => false\nBoolean(1) // => true\nBoolean(0) // => false\nAny non-empty  string is truthy. And the plugin cannot save types, a cookie value always becomes a string, no matter what you pass in.\nYou'd need to write your own converter function if you want to get booleans back out properly:\njs\n$.cookie('foo', false); // same as $.cookie('foo', 'false');\n$.cookie('foo', function(s) { return eval(s); });\n. Or you can turn on JSON to have that work out of the box:\njs\n$.cookie.json = true;\n$.cookie('foo', false);\n$.cookie('foo'); // === false\n. We can run a server easily like this: grunt connect:server:keepalive.\n. Also just found this: https://github.com/gruntjs/grunt-contrib-bump\n. Fwiw: https://github.com/phuu/npm-release\n. Are you trying to read the cookie from a different page than where you wrote it?\nI'm going to add latest Firefox to the Matrix.\n. Also, look out for any errors in the console.\n. For some reason Firefox 29 is not yet supported in Sauce Labs on Mavericks - https://saucelabs.com/platforms/webdriver\nI ran the tests locally and they are green:\n\nI can't tell what's going wrong, it'd be helpful if you were setting up a test case that's accessible for us.\n. No, it's intentional.\n. Are those cookies httponly cookies? What does $.cookie() return? Are domain and path exactly the same as when those cookies have been written? Where does the value cookies come from in your code?\n. Could you provide an example value that is causing it to fail?\n. Temporary workaround:\njs\n$.cookie.raw = true;\nvar authObject = $.cookie('Auth', JSON.parse);\n. Most likely to be fixed with #285\nSee https://github.com/carhartl/jquery-cookie/tree/jquery-data\n. Sorry, accidently closed this one.\n. No. Won't be fixed, it's related to the use of decodeURIComponent.\n. Closing this, there's #295 covering this.\n. There's raw config, plus converter, which together allows the cookie to handle all kind of cases already.\n. The code mentioned is not my code. In fact it is wrong, since it passes expires: -1 as cookie option which means no cookie is being created in the first place (it is already expired by the time it's written).\n. I send a pull request with a fix:\nhttps://github.com/brettdewoody/jQuery-Interstitial/pull/3\n. That it's returning false incorrectly has been fixed in 0ae9f7eec0f56c677c826094eb126060a50b93b6, you may want to upgrade to 1.4.1.\nTechnically it's not possible to have removeCookie() remove any cookie, no matter the path (because internally deleting a cookie is nothing else than overwriting the existing one with one that is already expired, thus options need to match); the README is mentioning:\n\nNote: when deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie, unless you're relying on the default options that is.\n\nYou can use default options to accomplish the desired behavior:\njs\n$.cookie.defaults = { path: '/' };\n$.cookie('foo', 'bar'); // using path: '/'\n$.removeCookie('foo'); // => true\n. Never heard of this before. Just guessing, might it be a particular setting within Safari, it may suppress such a cookie if it considers it a 3rd party cookie. Can you try with settings \"never suppress cookies\" (I only have it in German here right now).\nAlso, what happens if you specify your domain explicitly in the call to write the cookie?\n. Thanks for the PR. Did you actually run into a problem? To this day this seems more like a theoretical problem, I've never seen undefined actually being overwritten. Also, in more recent versions of JavaScript (ECMAScript) it is no longer possible.\nAs soon as someone has an actual problem I'm going to merge. Might compare against void 0 though instead of using typeof, as it's a bit shorter.\n. Duplicate.\n. Hmmm, is the current year even required?\n. Something like this https://github.com/jzaefferer/jquery-validation/blob/4b33a7506769a3891c5ad3fababbcec5dc9fec6a/Gruntfile.js#L14-L21 maybe...\n. Isn't node.js 0.11 a development version?\n. I prefer not to use the \"unstable\" version.\n. Looking at https://saucelabs.com/platforms/webdriver, \"7.1.1\" doesn't seem to be defined, they seem to only supply minor versions, thus closing.\n. Isn't that a problem in r.js?\n. Exactly. What is the shim for? There should be no need for it.\nDoes r.js compile as expected without the shim?\n. Thank you @pboling for clarifying.\n. Could you also please squash the commits in order for this to be merged? Thanks!\n. FWIW, length was already cached:\njs\nfor (var i = 0, l = cookies.length; i < l; i++)\n. Within this one is fine!\n. +1\n. This relates to #268. First of all, I'm still hoping for a real solution for this on Sauce Lab's side.\nNevertheless this could be an interim workaround. Am I right assuming that npm test will run the Gruntfile's default task (we have \"scripts\": { \"test\": \"grunt\" } in the package.json)?\n. Ok, but then we will be needlessly running the \"uglify\" and \"compare_size\" tasks on Travis, which I'd rather avoid. We can maybe do something like this:\njs\nif (process.env.TRAVIS_PULL_REQUEST === 'false') {\n    grunt.registerTask('ci', ['jshint', 'qunit', 'saucelabs']);\n} else {\n    grunt.registerTask('ci', ['jshint', 'qunit']);\n}\n. Will be closed by js-cookie/js-cookie#4\n. Thanks!\n. FYI, these as well: 9ed982ae82b8204b2d2129f16555cb0b120850ee\n. Thanks for the PR. Though I don't really see the need for this. The cookie operations are not asynchronous. So onSet is basically the same as:\njs\n$.cookie('foo', 'bar');\nalert('onSet');\nIf you need it to implement some sort of pub/sub pattern in a larger application this should be implemented right there, since it is too specific a use case for this lightweight plugin:\njs\nApp.setCookie = function(name, value, options) {\n  cookie = $.cookie.apply(null, arguments);\n  publish('cookie:set', cookie);\n}\n(pseudo code)\n. It's fine.\n. I was also wondering what the use case for this is, or whether that's now common practice in jQuery land...\n. This is going to be solved with #295.\n. I haven't fully understood this suggestion. Where am I supposed to return $.cookie?\n. I've merged #339, which is supposed to fix this.\n. Thanks for the PR. As CMD seems to be a draft and not widely used, I am going to close the PR for now. I refrain from adding code that isn't absolutely necessary, and in this case CMD doesn't seem to be widely used.\n. I can't really help here, too few information. It doesn't seem to be a problem with the plugin itself either.\n. httpOnly cannot work when you're writing the cookie on the client. I've closed several issues before.\n. http://stackoverflow.com/questions/14691654/set-a-cookie-to-httponly-via-javascript\n. The explanation is on the other issue of your's, I thought that's sufficient.\nPasting the link here as well: http://stackoverflow.com/questions/14691654/set-a-cookie-to-httponly-via-javascript\nBasically, you cannot write a cookie from the client that's supposed to be \"not allowed on client\".\nImagine you have a httponly cookie set on the server. Do you expect it to be possible to be overwritten in the client (js) or not?\n. If you were able to set it, you were able to overwrite a cookie set on the server, and that would defeat the idea of HttpOnly.\n. Really, it doesn't work. There's a contradiction even in your own requirement, which a bit translated reads: I want to be able to set it but never set it again.\nThere is no such API available that allows to write a cookie when it doesn't exist but no more when it does.\n. I can't spot any obvious errors in the code. Have you tried in different browsers? In which browser in particular it does not work?\nI've seen cookies being disabled in Internet Explorer before.\n. Also, does it work if you change the name of the cookie? I.e. is there a similar named HttpOnly cookie on the page?\n. Which Chrome is it that you're using? Have you double checked all the settings?\n. Is that Canary?\n. I tested here: http://browsercookielimits.x64.me/ and yes, Chrome seems to have the limit of 4096. \n. Thanks for the PR, though I am not merging this as several similar PRs before, since I want to keep the cookie lightweight and don't consider this feature crucial enough to be included.\n. I think it's a problem with path not being set. Use for instance path: '/'.\n. It seems this is (now?) obsolete. \nThe bower.json spec states:\n\nNote: symbolic links will always be ignored. However bower.json will never be ignored.\n\nhttps://github.com/bower/bower.json-spec\n. :)\n. I've merged #339, which is supposed to fix this.\n. If I understand that right, the problem will occur when we set expires using a value so that there will be a daylight savings change inbetween then and the time of expiration. \n. ...yes, it's that. Interesting, trying to fix it.\n. Are you maybe having an accidental global cookie that is shadowing the per page one?\nCould you post what is shown in the developer console in the cookies section?\nOr even better, is the site accessible to take a look at?\n. I don't think it is related to localhost. Except it is a cookie from another project you worked on it.\nWhat happens after you delete all cookies for localhost? Do you happen to have added cookie default options accidentally maybe? Do you use a particular cookie extension?\n. You seemed to have a problem with the cookie and with the little amount of informatio I have all I can do is guessing at the possible reasons as I cannot reproduce the problem on my machine. So my first assumption is that it has to be something in your environment that is causing it.\n. If cookies are domain wide when commenting that line then there is either something special in your environment or I didn't notice that this behavior has changed in recent browsers...\n. What does the cookie \"foo\" look like if you do this:\njs\ndocument.cookie = \"foo=bar\";\nIf that one would also have a path than the problem has nothing to do with the plugin.\n. It is still very odd that it is even happening cross-browser...\n. I don't understand this either...\n. Even if it works without the src/ path, I'd find that confusing and prefer explicitly. It seems to work just as well. \n. Are you using the latest version of the plugin? Reminds me of a rather old bug...\n. Ah! I think the problem is that from the superpage, you don't have (read) access to the cookie that has been written with the sub path. The guard clause in the $.removeCookie function will return false:\njs\nif $.cookie(key) === undefined) {\n    return false;\n}\n@scottstewartt What is the return value of the (unsuccessful) call to $.removeCookie?\nThat's also why deleting the cookie manually by writing it with expires: 0 is successful (yes, removeCookie does the same behind the curtain). \nI've never taken this scenario into account. Said guard clause isn't by all means necessary I think. \n. ?\n. I don't quite understand what you're trying to accomplish here. \nThis is certainly not a problem with the plugin, I advise you to ask usage questions like this on Stackoverflow, as it will also increase the chance of getting help (larger audience, people who know php well unlike me).\nA simple guess, you may be able to write a date to the page for usage with $.cookie like in this html fragment:\n<script>\n    $.cookie('foo', 'bar', { expires: <?php echo \"...\"; ?> });\n</script>\nOn the other hand, if you're in php anyway, you can easily write the entire cookie there. This cookie is available in the client site as well, using the same name and given that it is accessible in the current path.\nHTH\n. Does it work if you use a simple number: expires: 1?\nPlease try with first erasing all cookies. Which version of the plugin are you using?\n. Given what I just answered on the other issue reported by you I believe you're simply running into a problem with one cookie shadowing another one here. The value that you're seeing here looks like a result of your incorrect attempt of reading a cookie with a particular path, which in fact is writing a new cookie. And this cookie is shadowing the one you're expecting too see.\n. The path value \"http://...\" is not valid, that's why it maybe is ignored. It should be something like \"/\" or \"/collections/Fruits\" but not a complete uri.\nFurthermore, if there's a cookie of the same name with a different path, one cookie shadows the other. There's nothing we can do about it. You cannot tell the browser to read a cookie from a particular path like you do. \n. (Instead, what you actually do with $.cookie(\"foo\", { path: ... } is writing a cookie \"foo\" with a value of { path: ... }.)\n. Could you possibly provide a simplified test case/page where we can take a look? This behavior isn't exposed when testing locally here, thus, with the description alone I don't have an answer yet. \n. What is the value of the cookie when it works in the second way, but not in the other? What is the value of document.cookie?\n. Possible things to look out for: race condition regarding 1) writing and reading of the cookie from different functions. Impossible to tell here. Regarding 2): quite possibly a problem with path not defined, see the Readme. Could also apply to 1). 3) I don't have an idea at all. \nJust some quick ideas... I can't really help with it, it would at least require a simplified test case, I won't be able to digg into the entire application code.\nAlso: Make sure to use the latest version.\n. I have absolutely no clue. I think you may have more luck asking these kind of questions on Stackoverflow...\nWhich version of IE are you referring to?\n. My assumption here is that you're referencing the script incorrectly and the web server is serving a 404 html page. Make sure the js file is where you're referencing it from. \nThis has nothing to do with the functionality of the plugin though. \n. Thanks for the PR. navigator.cookieEnabled isn't implemented cross-browser though, thus not going to merge.\n. I'm open to this, though we'd need a new name for this whole thing I guess :)\n. Yes, it'd need to be an entire new project. And the api as is is very jQuery like, we chose it to be consistent, but that would not need to be the case for a more general library, not even desired imo.\n. In conclusion this would mean:\n- Fork the project, giving it a new name\n- Implement a better api, one that isn't bound to jQuery style\n- Add in automatic jQuery detection\n- Also add back in jQuery style methods: jQuery.cookie(key[, value, [, options]]), jQuery.removeCookie(key, [, options])\nAdditionally: Implement everything that was planned for version 2.0: RFC 6265 compliance, automatic JSON handling.\nI haven't seen a client-side library that has RFC 6265 compliance, so that might be a selling point :). On the other hand, I have the feeling that cookies nowadays are a bit outdated in the first place and no one ever requested that particular feature. It is more like in the \"doing things the right way\" department.\n. Makes even more sense!\n. I think I'm finally able to dedicate more time for this again, having finished building a house :)\nFiiiirst of all, we will need a name for the org...\n. Thanks a ton @FagnerMartinsBrack! I think that's great! :+1: \n. I don't know of a better way.\nBut I think we could start out with the name cookie or Cookie and we will get some Feedback soon enough. Could we maybe provide a jQuery noConflict like mechanism, allowing to rename the global entirely? Too much effort?\nLast not least, with modules, is this maybe not so much of a problem any longer?\n. I quite like cookieStorageI just realized. Would be really great if we then provide the same api as localStorage/sessionStorage, as mentioned.\n. Nice icon... :)\n. Please see https://github.com/carhartl/jquery-cookie/releases\n. I think so too @Krinkle. The default options may help with this.\n. The documentations says:\n\nwhen deleting a cookie, you must pass the exact same path, domain and secure options that were used to set the cookie\n\nI want to keep it that way, otherwise we'd be expected to do the same for  path at some point, adding even more code...\nThanks for the PR, but closing.\n. You can either pass an instance of Date to expires (thus creating one and setting it to some minutes from \"now\") or pass a fraction of a day, e.g. 5 minutes:  expires: 1 / (24 * 60) * 5.\n. Yes, it gets messy and turns out that json config flag was not the best idea. We plan to completely retire this in version 2 and handle json automatically. \n. Agreeing, and closing. Thanks for the PR nonetheless!\n. What is the name of the cookie you're trying to read? Maybe rails is obfuscating the cookie in some way, or you simply don't have access to it, due to path or httpOnly attributes...?\n. GitHub seems to be troubled once again by a DDoS attack, that's why the repo is not available (and occasionally is).\nhttps://status.github.com/\n. If you set json to true, we expect them to be json parseable... at the moment. In version 2.0 this is going to be handled more gracefully and automatically.\n. See #285\n. Fwiw, the second time you execute $.cookie('presentation', 'read') a session cookie is being written and that worked, that's why then reading will return \"read\".\nBut why wouldn't one with expires be written...?\n. JS Cookie is not a jQuery plugin, we should leave the predecessor untouched. \nOf course it's worth mentioning there that we've moved forward. \n. @FagnerMartinsBrack Not sure if it's possible to still edit the plugin page. Last time I tried to sign in it didn't work but that may have been a temporary problem. I'm going to try again. \n. It doesn't look like I can even sign in any longer. I don't think it's worth it to create a new release just to change the description to include a link (given that this new release would be processed). After all, it is mentioned in a prominent location in this repository's readme. And if one is really wondering about a new release or the latest code she might end up here anyway.\nWhat do you think @FagnerMartinsBrack?\n. Spam or whatever. \n. Thanks for the PR. When necessary please file a new one over at https://github.com/js-cookie/js-cookie, this is where all development is happening now, as mentioned by @FagnerMartinsBrack. \n. Although, a new PR doesn't make sense in this case, as the new project moved away from jQuery as a dependency. Thanks anyway!\n. @Jyotie Given the little amount of information you're providing it's hardly possible for us to provide any help...\n. undefined\n. Yes, you'll have to add a \\n in order to produce a line break in that string.\n```\n\n\n\"foo\\nbar\"\n\"foo\nbar\"\n```\n\n\nClosing, as it's not really a problem with the plugin.\n. Ah, thanks @FagnerMartinsBrack :+1: \nSo, a browser likely silently swallows that character. \n. You could use say \"__\" to denote a line break, then, when reading a cookie, replace that again with a real line break using a converter function:\njs\n$.cookie(\"foo\", \"first__second\");\n$.cookie(\"foo\", function (s) {\n    return s.replace(\"__\", \"\\n\");\n});\n. So you expect the master branch to practically match a release, like in the git flow model?\n. I still haven't unterstood up to this day what the problem is. \n. I still have no clue when it comes to NuGet :)\n. From where are you trying to remove the cookie? You have to be within the same path (or \"below\") in order to delete such a cookie. \n. When you're unsuccessfully trying to delete the cookie, which path are you in?\n. That's a bit odd because nothing else is what $.remiveCookie does: https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js#L110\n. I don't see any good reason why calling it directly would work in Chrome, though a call wrapped in a function would not...\n. Ah, I see. I remember there was a fix for a similar problem here: 4527b3725ce7b61066e6aa12bbe8d20c0371a1d7 but we moved to https://github.com/js-cookie/js-cookie before releasing it. \nYou want to download and use https://github.com/js-cookie/js-cookie/releases/tag/v1.5.1, which contains the fix. \n. Right. As I said, development proceeds in https://github.com/js-cookie/js-cookie and the related code has changed: https://github.com/js-cookie/js-cookie/blob/master/src/js.cookie.js#L133 (though I believe not for 1.5, the last version compatible with this plugin). \n. Btw, when reading a cookie you can't consider a path. \n. We removed returning a value nevertheless, because it was, as we know now, not reliable. \n. Just remove the expires: null part...\n. On the other hand, it should work like that. Which version do you use, and what exactly does not work?\n. Maybe another cookie that's not a session cookie is shadowing the session cookie...\nCan you post a screenshot of the contents of the cookie view in the developer console?\n. Yes, you can pass an instance of Date for expires or 1/24. \n. No. Initially you asked for expiration in 1 hour. Which is what expires: 1/24 would accomplish, assuming it meant from the time of creation of the cookie on.\nIf you want the cookie to expire at a particular time in the future, for example at 1 am, you will need to pass an instance of Date. That date must represent the desired point of time of expiration. Let's say you want the cookie to expire at the end of this year:\njavascript\nendOfYear = new Date(2016, 11, 31, 24, 59, 59);\n$.cookie(\"foo\", \"bar\", { expires: endOfYear });\nInformation on how to construct and manipulate dates can be found here:\nhttps://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date\n. I have absolutely no idea what might be causing it, is there a way to look at the code/problem online?\n. First thing I saw is you're including both jquery.cookie.js and the newer js.cookie.js... you should settle on one of them, preferably js.cookie.js, which is the one that is being maintained.\n. The way it was done before was that notable changes were added to the \"Head\" section in the change log. I haven't checked, but if there are such changes we should add them as well. \n. I still think though that this whole exercise is pointless. \n. https://github.com/blog/2460-archiving-repositories \ud83c\udf89 \n@FagnerMartinsBrack I'd like to archive this repository right away, any objections as to why not?. Let\u2018s try! . Almost certainly a glitch on GitHub. I was seeing the same when trying to clone another repo.\n. The http flag means that the cookie is not supposed to be accessible on the client-side, thus this library does not have access to such cookies. \n. From the express session documentation:\n\nBy default, the HttpOnly attribute is set.\n\nhttps://github.com/expressjs/session/blob/master/README.md\nThis means the cookie written by that middleware cannot be read on the client-side, that is jquery-cookie. If you set HttpOnly to false, the cookie should become available.. Looks like creating a global i here.\n. How is this different from the original code? t === options.expires.\n. It was just to save some code. Otherwise I had to write (your code is missing something):\nvar days = options.expires;\noptions.expires = new Date();\noptions.expires.setDate(option.expires.getDate() + days);\n. Something like the following doesn't make it much better I think...\noptions.expires = new Date(new Date() * 1 + options.expires * 24 * 60 * 60 * 1000);\n. Let's still support it but no longer document it, e.g. deprecate it? May save some code later...\n. missing ;\n. was'nt -> wasn't\nAnd why the deepEqual?\n. I think we can leave options alone and pass them along, whatever they are, e.g. let's remove this line.\n. Let's go for no longer supporting undefined as argument for deleting a cookie (this has never been documented).\n. The condition is true as soon as JSON is undefined... that will not work.\n. Reading a cookie with options:\n$.cookie('foo', { path: '/' });\nSo now when JSON is defined this is going to be a write instead of read.\n. Which makes me think, that the way the plugin works at the moment we won't be able to automagically convert objects to json.\n. When reading a cookie with options:\n$.cookie('foo', { path: '/' });\nvalue, the second argument, is indeed options { path: '/' }and thus not undefined. Thus value !== undefined && (JSON !== undefined || ...) evaluates to true (in most modern browsers at least).\nThough there is no test for specifically testing this, there are two that would have been broken by your change. Run the tests and you will see.\n. You might want to specify to get a cookie with raw: true. Or specify the path.\n. The second and third arguments were there for a reason (better minification for instance). Do we have to drop that for AMD support?\n. Ah, at first it was about better minification #80, but that changed to #81. So basically it's about reducing scope lookups as well as having a robust undefined value.\n. What is wrong (leftover from recent changes) is that raw is no longer an option, thus the line should simply be removed from the documentation. No need to change any code.\n. That's fine. These options are now available as config switches though, no longer as options. Find a lengthy discussion explaining why both at the same time are not possible within one of the recently closed issues.\n. #93\n. Shouldn't that be: \"https://github.com/carhartl/jquery-cookie\"?\n. Interest yes, time hardly.\n. And regarding this PR in particular, I am still reluctant to add it, since I'd like to see whether there is greater popular demand, otherwise I'd like to keep the codebase as light as possible.\n. I think this should use strictEqual() and assert against undefined.\n. We coud just write:\njavascript\n        try {\n            return config.json ? JSON.parse(s) : s;\n        } catch(er) {}\nIt implicitely returns undefined in the error case.\n. Cookie should also not be null (in the test description).\n. Maybe something along \"...add a simplified example\"?\n. Instead of \"outside the master\", which may not be immediately clear what it means (to me it wasn't), how about \"feature branch\" or \"topic branch\"?\n. Little bit of nitpicking: Some lines in the lists, end with a \";\" some others with a \".\" (for example line 4 and 7). Let's use a period consistently?\n. I always thought of browser support to be the same as what jQuery supports, implicitly, since it is a jQuery plugin. We can mention that explicitly.\nRegarding #192 - there seems to be a way to set up automated testing for different browsers, though I'm not sure whether that would cover all supported browers, since it requires Selenium, and at least a while back, not all browsers had support for it. Wondering how jQuery itself approaches this issue, are they still using test swarm or did they move to Travis as well?\n. I'd like to refrain from questions like \"how do I remember a value when I close the modal\" etc. The issue tracker to me isn't a support forum (even though we can and should always try to be helpful of course).\nQuestions should be aimed at plugin issues closely and it doesn't hurt to mention that. Nobody will care and ask their questions anyway :)\n. > Being a jquery plugin not necessarily means it works for every browser jquery supports.\nSure. But in our case I don't see the reason to support less browsers, let alone more.\n. Yeah, that sounds like a good idea. Let's just drop \"questions\".\n. > what about a section for Frequently Asked Questions\nI thought about it in the past as well, as some questions do occur more often. After all though I'm not sure whether it's worth it though, since it appears to me that nobody is reading anything anyway, not even the README, which already contains some pieces of such FAQ.\n. Hm, maybe adding an extra \"FAQ\" section within the README helps to catch some more attention, so I'm not at all against it. I just would like to refrain from adding an extra FAQ.md file.\n. Agreed. Also, PRs on GitHub are run by Travis as well, and its build status is being shown within it, so that all happens implicitly. If somebody submits a PR with a broken build we can easily point to it, it at all this is being overlooked.\n. Furthermore, let's not get too much into detail for these documents? I consider these \"living documents\" anyway, and we can always improve over time. In other words, we may not get it perfect the first time.\n. Good point, didn't think of that. As long as you're not getting tired of discussing we can also improve here :)\n. Yes, the diff is caused by a newline being added.\n. There was a reason for this, can't quite remember. I will need to run this against IEs...\n. No, should be fine!\n. ",
    "ssoroka": "let's at least add this to the documentation.\n. ",
    "jaloplo": "I'm totally agree with ssoroka. I was facing the same problem til I read these comments. Add this to the documentation, please.\n. ",
    "betamos": "I was also completely fooled by this. Hours of debugging. To help others out, maybe you could add some text to your README or make it more clear in the documentation.\nIf you don't know how (stupid) cookies actually works, it's really hard to know what's wrong.\nCheers.\n. So you changed opinion on that? I think it's a great idea. Think about the updaters, though. They may need some info on that, since it's an \"API change\".\n. ",
    "kaore": "I just spent 2 hours on a problem linked to that default path not being '/' thing...\n. ",
    "xiatica": "I'm encountering the path issue as well. Although I am setting it so that it should only be /, but it's still saving a subdirectory if changed at that location. How can it be forced to only use tld?\nI'm using the version you've got hosted here, with FF3.6.13 JQ1.4.4 and the line of code is \n$.cookie(\"myCookie\", \"0\", { expires:7 }, { path: '/', domain: \"local.mysite.test\" });\nif saved at local.mysite.test/somepath it's saving the cookie path as 'local.mysite.test/somepath' instead of the tld. \n. So I was. Thanks for the reply carhartl.\n. version numbering would be nice too. \n. ",
    "Fume19": "'global' path cookie again.\nI set cookies path to '/'\nbut I had a problem to get this global values\nif I get values from standart options: $.cookie('variable') i will get values from this page (NOT path: '/').\nbut logging $.cookie() object show me the really {path : '/'} values and this show me how get cookie values with my params (such a {path : '/'}) \n$.cookie().variable\nif($.cookie().variable == 1)\n{\n  console.debug('yes, you do this!');\n}\nOf course I was talking about the pages with the root directory other than '/'\nbrowser chrome\n. yes, indeed. \nThanks for the explanation. I thought that I had them cleaned. \nsorry for inconvenience caused.\nAnd thank you for this plugin!\n. ",
    "brycenesbitt": "I'm here because I too was caught unaware by this behavior.\n. @FagnerMartinsBrack  thanks much better.  Having it in the example as 'Create expiring cookie, valid across entire site:' is particularly nice, since that's where the lazy will look.\n. ",
    "FagnerMartinsBrack": "@brycenesbitt but now this is properly documented at https://github.com/carhartl/jquery-cookie#path\n. Why 70% of JS programmers do not make tests on the projects?\nThe author is not going to pull this for sure.\n. The test is needed to avoid regression, any refactoration could break this thing without test (if the author forgot, anyone could forget also).\nFor any bug fix or implementation, if it is testable (which probably is), do it. It is a law to keep stability.\n. I may disagree with you. See the following example:\n$().attr(\"id\", \"myID\")\n$().removeAttr(\"id\")\nThere is no $().addAttr\nremoveCookie is much more intuitive and follow jquery's style\n. @carhartl Did you thought about this? Seriously I think it is a very good feature and it does'nt add so many chars =(\n. Do u think the options are needed here?\nMy idea here is simulate the \"options.expires = -1\" by aliasing $.cookie(\"name\", null) to $.removeCookie for the sake of readability\nYou may probably be able to do this without testing all the stuff $.cookie does, but I don't think the performance improvement would be noticeable\n. Let's consider #87 on this one\n. I agree with the guy above.\nAny project may have its own minify tools.\nThe best thing to do is to work in the pages with the unminified versions (production) and in the build gather all the imports into a single file and minify it.\nThere should be no reason to send a minified version of any single JS project in the rep, although it could be handy for those who don't care about debbugging, updating (usually when u are hired to create some random site), but even that way you could minify through some web app.\n. Probably you marked your browser to delete the cookies when closing it or you are using chrome on localhost (http://stackoverflow.com/questions/7346919/chrome-localhost-cookie-not-being-set)\n. github should seriously prompt something when u click \"close pull request\" =/\n. My bad, I did that so fast I couldnt test it. Ill send another pull passing the document.\n. If you are going to change the identation why don't use the tabs instead of spaces? It is much more readable.\n. Where is the tests?\nI recommend create a separate branch and submit the request from that branch.\nThere is a regression of a few changes from the current version on master.\n. Unit test is a technique used to develop a  program that runs a set of processes into the plugin simulating its most common behavior (check the plugin file \"test.html\").\nA regression is a bug or feature that was removed from the software after the insertion of another feature or bug fix (That's why the tests are for).\nLook into google for \"unit tests javascript\", \"qunit\" and \"software regression\".\n. It never had as far as I remember oO\n. Good idea\nBut we return true just if the cookie exists at the time of removal or if he was actually removed?\nThe browser could have security polices that don't allow the removal of a cookie, right?\n. Do u have any idea of how to test an unsucessful delete? :S\n. I mean unit test it\n. I rly think to check if the cookie was deleted is pointless\n. @carhartl is this good to go?\n. @Krinkle\n\nundefined be taken to unset a cookie. If anything, for consistency with jQuery (.attr(), .prop(), .data(), ..).\n\nYou say $.cookie should return undefined for no cookie and should accept undefined for removal?\nBut jquery does not remove an attribute if you pass undefined  (it just ignores the call):\nhttp://jsfiddle.net/9UHzW/1/\nRegarding the value return it should be properly specified which kind of return should be better, I always check for a falsy value no matter what:\nvar exists = !!$.cookie( \"non_existent\" )\n. undefined is argument not specified when null means empty argument. What is breaking here is the removal of cookie via undefined which I suppose is much less intuitive than passing null.\nAbout $.removeCookie return: It returns a custom true/false regarding the cookie removal status because the plugin has no jQuery selector context to chain, therefore instead of no feedback it is returned if the cookie was correctly removed.\nAbout $.cookie return: The regular return was never documented and should be treated as void. The removal return as null is documented and a return as undefined could be implemented as a feature request (and deprecating old null since probably most ppl use if ( $.cookie( \"there_is_none\" ) ) as a check).\n\nIs it worth breaking support over and becoming inconsistent/counter intuitive?\n\nWell I think in this case it is, but I disagree about \"becoming inconsistent/counter intuitive\".\n. One can argue that since jQuery behavior for .attr( \"attribute\", null ) is removing the attribute then it should be used to remove a cookie aswell and deprecating it would not be a good idea.\nBut this is not documented (or at least I could not find any documentation) so the behavior does not need to be consistent with jquery because nobody should rely on this anyway.\nAnd as @carhartl pointed out it can reduce a good code portion or stay as it is but still deprecated until most developers are using only $.removeCookie for their removal.\nI think we can create an issue discussing whether to return undefined/null if a cookie does not exist, or return null if $.cookie() is used when there is no cookie at all. It is all up to discussion but this is completely not related with this PR.\n. Not every browser supports window.JSON, so you should create a polyfill to handle that. It would increase drastically the size of the plugin.\nhttps://github.com/douglascrockford/JSON-js/\nhttp://code.google.com/p/jquery-json/\nMy suggestion is to stringify/parse the values before and after the cookie creation (that is the way I do) or create another plugin to handle that automatically.\nSomething like (not tested):\njavascript\n    $.jsonCookie = function(key, val, options) {\n       if( val ) {\n          $.cookie( key, $.toJSON? $.toJSON(val) : val, options );\n       } else {\n          return $.parseJSON ? $.parseJSON( $.cookie( key, val, options ) ) : $.cookie( key, val, options );\n       }\n    };\nOr an option to provide encode/decode as mentioned above...\n. To make a consistent check we should use regex, increasing the plugin size without any reason (at least at my point of view). I believe a lightweight cookie plugin should just transfer data using string, but is up to the author decide if this is actually needed (I don't remember anybody else asking for this since I started watching this repo).\n. You are not the only one, I tried to pass a JSON the first time also, but failing made me realize that the plugin's behavior was the correct in my point of view ;D.\nWell... jQuery has an internal JSON parse ($.parseJSON) which checks for JSON.parse existence but I could'nt find anything about a stringify or $.toJSON (I am not familiarized so much with jquery core).\nBut even if it exists we would be using a non documented API, which always has the risk to break some day.\n. > I'll install node now so I can run the tests...\nI don't think node is needed to run the tests, since all browsers allow cookie creation in localhost (except chrome and it's peculiar behavior which is easy to workaround)\nAs u see in the following comment:\nhttps://github.com/carhartl/jquery-cookie/issues/89#issuecomment-7441083\n\nNot every browser supports window.JSON, so you should create a polyfill to handle that. It would increase drastically the size of the plugin.\n\nI think it is not the idea of the author to change the behavior of the plugin to each browser version that don't support the required feature or require a polyfill to work properly.\nAnd most important:\n\nthe way the plugin works at the moment we won't be able to automagically convert objects to json\n. Ok, now I want to:\n\n```\n$.cookie(\"myCookie\", { raw: \"MyRawValue\" });\nvar myObj = $.cookie(\"myCookie\");\nmyObj.raw; //myRawValue\n```\nThe plugin cannot consider JSON through the regular signature, the more reasonable solution could be the one pointed at https://github.com/carhartl/jquery-cookie/issues/89#issuecomment-7427948\nAnd changing the behavior for numbers will break code for sure, I am not a fan of that =(\n. ```\n$.cookie.defaults = {\n    json: true,\n    path: '/'\n};\n$.cookie('foo', { foo: 'bar', path: false, raw: 999 });\n$.cookie('foo'); //{ foo: 'bar', path: false, raw: 999 }\n```\nPerhaps?\n. if json is true it should treat $.cookie('foo', { path: false }) as an object and not an option.\nBut the programmer would need to depend on default options to get/set cookies.\nI am not sure how this would work in the real world cause I usually don't use the options.\n. I suppose the plugin's behavior is to allow any kind of value despite the spec...\n. json and raw are flags, not options...\n. > Cause this is a jQuery plugin we should use more safety methods\n@butcher\nsee \nhttps://github.com/carhartl/jquery-cookie/commit/796abd66a0b2af7139da5dd86a464b7884d2faaf#commitcomment-1781772\nhttps://github.com/carhartl/jquery-cookie/commit/796abd66a0b2af7139da5dd86a464b7884d2faaf#commitcomment-1797593\nThe only bonus here would be allowing a stringify polyfill only\nBut since it is all present on json2.js there's not much difference from $.parseJSON to JSON.parse\n. Soon IE7 will go down for good, then there will be no reason to use the polyfill at all\nhttp://caniuse.com/#search=JSON\n. A test case to fail in IE perhaps?\n. Yeah as far as I know we can't stub in a crossbrowser way.\nI was hoping you could simulate this bug in IE9, it is not clear when that happens.\nPS.: Just that loop rewrite would be a +1.\n. @sourcejedi \n\nI didn't know how to run the custom server (or notice it was there until afterwards :) \n\nWhat I do is:\nDownload nodeJS then in comand-line (windows at least):\nnode server.js\nAccess through http://localhost:8124/test.html if you opened node in the same dir as the server.js file\n@carhartl That could be in the docs btw\n. > Another question: Why is there the need to clear cookies between the tests? This is done before each example in the setup...\nJust start node in a previous dir and http://localhost:8124/jquery-cookie/test.html you will see a lot will fail.\n. file:// sux and IE only applies to file:// when you have a querystring\n. Use <!DOCTYPE html>\n. I am not sure but any doctype other than <!DOCTYPE html> will trigger IE9 quirks mode or any of it's \"modes\" like IE7, IE8, etc. Since jQuery does not support quirks I suppose it does not support it's modes as well.\nCan u confirm if this is not working in real world IE7/IE8?\nOtherwise I don't think it is needed to worry about this since this is a jQuery plugin.\nI never got this problem cause I always use the correct doctype btw.\n. Ok, I took some minutes to check this and all tests are running fine in all IE browser modes + Document modes.\nDo u have a sample page to simulate this? I did with:\nhtml\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>jquery.cookie Test Suite</title>\n        <link rel=\"stylesheet\" href=\"http://code.jquery.com/qunit/git/qunit.css\">\n        <script src=\"http://code.jquery.com/jquery-1.8.2.min.js\"></script>\n        <script src=\"http://code.jquery.com/qunit/qunit-git.js\"></script>\n        <script src=\"jquery.cookie.js\"></script>\n        <script>\n            (function() {\n                $.cookie(\"c\", \"v\");\n                alert($.cookie(\"c\")); //\"v\"\n                $.removeCookie(\"c\");\n                alert($.cookie(\"c\")); //null\n            })();\n        </script>\n    </head>\n    <body></body>\n</html>\nTo be sure, just check you are not loading jQuery twice or anything like that.\n. I precipitated myself in the first 2 posts, I mentioned quirks because there is a situation in IE where Object.prototype.call(null) returns [object Object] instead of [object Null]. But SCRIPT438: Object doesn't support property or method 'removeCookie' would have nothing to do with that.\nThat is why I tested in IE9 on every mode against the current code on MASTER and had no problem.\nIf you give a single web page reproducing the issue it would be nice but at my look it appears you may have and older version, duplicated jQuery calls, etc.\nDid the above html worked for you in a simple http server page?\n. @carhartl It's false not true, consider #114\n. @carhartl If you don't use strict:false jshint causes an error saying \"Missing \"use strict\" statement.\", by turning into false you avoid that, looks like this message is turned on by default. I am testing this with the web interface http://jshint.com\n. Looks like a bug then\n. > SEC7112: Script from https://raw.github.com/carhartl/jquery-cookie/master/jquery.cookie.js was blocked due to mime type mismatch\nDon`t link files directly from github on jsfiddle\nhttp://jsfiddle.net/QWeJY/1/\n. yup\n. @Addvilz Every build should have its own minify system. Maybe providing a SVN or something else but I am totally against poluting the source repo with minified files, it is up to the author though.\n. @Addvilz Nice service but don't forget to obfuscate the variables.\n. Your code has no test, that is why this is not going to be accepted =/\n. > IMO it's never a good idea to fail silently on errors\nI dont't think null is a bad idea since jQuery also does not throw any exception on any API. Since the cookie is invalid it could be considered inexistent in the POV of a programmer that uses the json flag (which expects a valid JSON or nothing at all)\nSince I never ran to this issue I am just especulating, maybe a little more feedback would be useful.\n. A new property would be one more thing to document and one more thing for ppl to learn, better keep or change the behaviour based in the most intuitive use.\nI still think nothing should be thrown at all, let the developer debug his code and find out why the JSON is malformed, javascript is very bad for handling exceptions in the regular developer flow side.\n. Hi @kirpit,\nJSON.stringify should be used passing an Object Literal to be converted into a JSON string:\nJSON.stringify({ key: \"value\" }); //\"{\"key\":\"value\"}\" and should not be used with a string like JSON.stringify('A') or JSON.stringify('{ \"key\": \"value\" }').\nIf you want to pass an object literal from a string to the json cookie creation you should do $.cookie( \"dummy\", JSON.parse( '{\"key\": \"value\"}' ) ).\nFor more info check http://json.org/ for JSON (format) spec and http://es5.github.com/#x15.12 for JSON (javascript Object) spec\nIn version 1.3.0 #143 happened and even non related cookies were throwing an error when checking if the cookie existed or not, but that was fixed in 1.3.1.\nNow the discussion is to decide if the exception should be thrown when checking an invalid JSON cookie existence or return null and suppress the exception.\n. Open a new issue describing how you are receiving the cookie values on server-side so we can discuss the proper way to handle it. I will be using jquery cookie's json feature in a huge project soon, so I am particularly interested on any issue related to it.\nI believe this is not directly related to this issue.\n. @carhartl \nOne more reason for #132\n. And now ppl can't use json = true with other cookies who are not in json format. Let's take the jsessionid which you should pass on every request if your cookies are disabled or store in the cookies otherwise.\nIf you still want to throw the exception we should detect a json format and ignore the json parse, don't you thinl it will add too much code to the codebase?\n. > don't you think it will add too much code to the codebase?\nYou will need to check if the cookie is a json first.\nSuppressing the exception would solve everything without too much check.\nSee those huge regex from https://github.com/douglascrockford/JSON-js/blob/master/json2.js. Thats what I am talking about.\n. Working now, I do that later.\n. It is better, I am having no time to work on this until Friday =/\n. What list of supported browsers? jQuery supports it.\nBut whatever, it seems it is just a bug when not using encodeURIComponent for plain cookies and since the plugin itself already uses it the problem is restricted to the test suite only.\n. @carhartl\nIs there any reason for this line I am missing? Just curious.\n. I personaly think passing an array is quite ugly.\n``` javascript\n$.cookie.converter = function( read, write ) {\n    read(function( name, value ) {\n        return value;\n    });\nwrite(function( name, value ) {\n    return value;\n});\n\n};\n```\nIt is probably possible to achieve something like this right?\nWhat are the drawbacks?\nDoes it encourages user to call read/write several times?\nDoes it affect performance or character count (on the developer side)?\nWhat you think?\n. Yeah, what you proposed is  the way to go for sure.\n. Can't see better way to do this.\nThis way we already have the cookie name bound if a control is needed based on the key. The problem by adding a configuration object is the lack of context for a single cookie.\nThe Number constructor is a very good thought by the way.\nIt would be then:\n``` javascript\n$.cookie( 'foo', 'bar' );\n$.cookie( 'foo', 'bar', {} );\n$.cookie( 'foo', 'bar', function(value){} );\n$.cookie( 'foo', 'bar', {}, function(value){} );\n$.cookie( 'foo', function(value){} );\n```\nIt matches every requirement and more:\n- You can convert when reading.\n- You can convert when writing.\n- You can pass native converter references that accept first argument as the value for both ways.\n- You can pass the same custom reference for both ways (not requiring global converters).\n- You can bind to a single cookie.\n- You can save characters.\n. Poluting the signature is something dangerous indeed, but what I think is the possibility of defining the converter without the need of wrapping the cookie.\n``` javascript\nfunction converterJSON( value ) {\n    // Convert the JSON value\n}\n// Use custom converter\n$.cookie(  'cookieObject', {\n    home: 'google.com'\n}, { path: '/' }, converterJSON );\n$.cookie(  'cookieObject', converterJSON ); // { \"home\": \"google.com\" }\n$.removeCookie( 'cookieObject' );\n// I don't care about converter here, nothing changes\n$.cookie( 'simple', 'value', { path: '/' } );\n$.cookie( 'simple' ); // 'value'\n$.removeCookie( 'simple', { path: '/' } );\n```\nI may have my custom way to store and read my cookies (perhaps I want to reduce characters in my requests)\n``` javascript\n// Default\n$.cookie.converters = {\n    read: function( value ) {\n        // value (string) -> example:value,example2:value2\n        // convert to object literal\n        // { example: 'value', example2: 'value2' }\n    },\n    write: function( value ) {\n        // value (object literal) -> { example: 'value', example2: 'value2' }\n        // convert to string\n        // 'example:value,example2:value2'\n    }\n}\n// Custom converter\nfunction converterJSON( value ) {\n    // Convert regular JSON\n}\n// Use default\n$.cookie( 'preferences', {\n    example: 'value',\n    example2: 'value2'\n}, { path: '/' });\n$.cookie( 'preferences' ).example2; // 'value2'\n$.removeCookie( 'preferences', { path: '/' } );\n// Use custom converter\n$.cookie(  'cookieObject', {\n    home: 'google.com'\n}, { path: '/' }, converterJSON );\n$.cookie(  'cookieObject', converterJSON ); // { \"home\": \"google.com\" }\n$.removeCookie( 'cookieObject' );\n```\nWhat if I want to set up a single converter and take care of everything in one place?\n``` javascript\n$.cookie.converters = {\n    // Need \"name\" as second argument or $.cookie( 'my_cookie', Number ) does not work.\n    // Quite ugly since the convention is ( name, value )\n    read: function( value, name ) {\n        if ( name.indexOf( 'pref_' ) === 0 ) {\n            // convert preferences\n            // return preferences object literal\n        } else if ( name.indexOf( 'json_' ) === 0 ) {\n            // convert JSON\n            // return json object literal\n        }\n    },\n    write: function( value ) {\n        if ( name.indexOf( 'pref_' ) === 0 ) {\n            // convert preferences\n            // return preferences string to be stored\n        } else if ( name.indexOf( 'json_' ) === 0 ) {\n            // convert JSON\n            // return stringified JSON to be stored\n        }\n    }\n}\n$.cookie( 'pref_home', {\n    url: 'github.com'\n}, { path: '/' });\n$.cookie( 'pref_home' ).url; // 'github.com'\n```\nThis is what I can remember from previous discussions. Am I missing something?\n\nAfter all, it feels like a useless feature to me. All we wanted in the first place was a more elegant and flexible way to handle JSON (ideally automatically).\n\nAlso the possibility to customize the way the conversion is handled\n\nWrite conversion is obsolete.\n\nIf we create a use case for the last example it is not.\n\nRead conversion is useful since we enable developers to handle JSON and simple cookies at the same time while avoiding json = true. Using just JSON.parse was an example a bit too simple.\n\nIf you avoid $.cookie.json = true you cannot write JSON cookies but rely on server-side only.\nThe idea was to deprecate $.cookie.json = true. Like you are saying we keep the flag but create a converter? So we have a flag that say \"all cookies are read and written as JSON\" and a converter that say \"Not quite, you can choose the way you can read in order to read simple cookies too\"?\nI don't get it, am I missing something?\n. I agree there is lots of confusion going on. This issue is opened for a long time and I am not currently working heavly with jquery cookie in a client side basis, which make it very dificult to get context about proper changes in the API.\nThe thing I had in mind at the moment you mentioned converters is what I mentioned earlier. So I was probably overthinking the problem.\nRequirements\nLets make the requirements clear then, the API should meet all the aspects below:\n- The user should be able to handle JSON globally for all cookies\n  - Should not mess with simple read/write.\n  - Should not have to declare the API every time before a read/write.\n- The user should be able to handle JSON in a per cookie basis.\n  - Should be able to write using object literals in the value.\n  - Should be able to read JSON cookies and stringify\nAs far as I know there is no other requirements, if that is not the case just let me know.\nAn architetural problem?\nSeems like in the past we had an architetural problem regarding the signature $.cookie( [String], [Object] ), mentioned at https://github.com/carhartl/jquery-cookie/pull/93#issuecomment-8072532\nI does not seems to be a problem anymore right? Since a valid value is always used for writing https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js#L43\nThere is not even a test for that anymore oO\nProposals\nSo if that is the case and we have no dependency when writing, then we could determine a json cookie without any further configuration! Just check for a plain object literal in the second argument and we are good.\nThe bad thing is that $.cookie( 'my_cookie', { raw: true }) is not coming back.\nCan you confirm if that is feasible?\nIf that is, we have just killed the writing problem.\nWe are able to identify JSON cookie when writing, thats fine. But we can't identify when reading because we have the server-side factor (so a prefix created by the plugin is not possible).\nHere an option kicks in, but there is no need to be a converter:\n``` javascript\n$.cookie( 'my_json' ); //{ object: \"literal\" }\n$.cookie.raw = true;\n$.cookie( 'my_json' ); //\"{ \"not object\": \"literal\" }\"\n```\nThat could break if you are relying in the JSON string for a different matter though.\nOr just forget it all\nIf that is too much and the API locks are too frightening just let it be.\nThe developer can easly creating their own functions or monkey patch $.cookie to provide the proper conversions:\njavascript\nvar old = $.cookie;\n$.cookie = function() {\n    // good luck\n    return old.apply( null, arguments );\n}\nDeprecate $.cookie.json in favor of letting the developer take care of the conversions.\nLet $.cookie.raw for those implementing a custom way to handle encoded cookies and that is it.\nNo need to complicate a lightweight plugin like this.\nWhat is your opinion about this?\nAm I missing something?\n. I liked the last examples, the problem is the compatibility with the flags $.cookie.raw and $.cookie.json.\nRemove them and provide default functions in the place may be the best approach and may be possible without breaking backwards compatibility if we play with ECMA 5 get/set spec, but that would drastically reduce the browser compatibility of the plugin (bah, a fast research told me only IE9 +)\nOr prevent them to be registered...\n. Hmm or not, the same page has different examples, need to take a look in that.\n. $.cookie.raw and $.cookie.json are both flags and not options.\nCheck https://github.com/carhartl/jquery-cookie#raw\n. Already discussed https://github.com/carhartl/jquery-cookie/issues/122#issuecomment-10148763\n. I can't understand what you're asking.\n. Why would you specify less than a day for a cookie to be removed?\n. You can create a Date Object with this level of control and pass to the cookie https://github.com/carhartl/jquery-cookie#expires, does it solve the issue for you?\n. For anyone interested, the code would be something like this using the new API:\njavascript\nCookies.set( '20_minutes_from_now', 'value', {\n    // 1000 (1s) * 60 (1m) * 20 (20m)\n    expires: new Date().getTime() + 1000 * 60 * 20\n});\nAnd 12 hours from now:\njavascript\nCookies.set( '12_hours_from_now', 'value', {\n    // 1000 (1s) * 60 (1m) * 60 (1h) * 12 (12h)\n    expires: new Date().getTime() + 1000 * 60 * 60 * 12\n});\nEDIT:\nAs Klaus pointed below, half a day could be written as:\njavascript\nCookies.set( '12_hours_from_now', 'value', {\n    expires: 0.5\n});\n. It has never been an issue. The intention of $.removeCookie is to return true whether the cookie existed at the moment of removal. There is no javascript API to return if the cookie was definitely removed from the browser or not.\nAlthough the plugin detects that a cookie existed at the moment of removal, some browser specific restriction could be blocking it. Do you have a code sample to look into?\n. What if the user has defined $ before the script loading? Let's say, through another library?\n. I am not sure if this is worth it.\n. > ... If there's popular demand ...\n:+1:\n. Which kind of adjustment?\nIf you are talking about the most agressive minification AFAIK not event jQuery works properly.\n. > FYI, I've changed the following ...\nThat way you just broke the plugins feature to read all available cookies.\n. The plugin will return the first match when using the default API for getting cookies.\nThe use of$.cookie()without arguments returns an Object Literal which cannot have duplicated keys (so the last one is iterated is shown).\nI am not sure about different domains but one should never rely in two cookies holding the same name within a project.\nDespite any rule the current$.cookie()` API cannot handle multiple names so you should find out the root cause and fix on your end.\nClosing as wontfix unless @carhartl thinks otherwise.\n. It is unlikely to be a plugin's problem because the examples you mentioned are working and the code is quite straighforward internally.\nIf you could provide an SSCCE it will be easier to look into.\nThanks.\n. @carhartl \nCreating a new tag should be easy to do.\nBetter create a minor version from https://github.com/carhartl/jquery-cookie/commit/a1456e146adfd88243b826fbcc3c33f35f58d84a.\nI think https://github.com/carhartl/jquery-cookie/commit/faa1cde4610a731198c0a12b4fd7c50a5b06d6d4 is too soon and should not go for a minor release.\nStrange... I thought the JSON exception thing was already released oO\n. Similar discussion: https://github.com/carhartl/jquery-cookie/pull/87#issuecomment-12758922\n. You should not rely with 2 cookies holding the same name in differente paths.\nRelated: https://github.com/carhartl/jquery-cookie/issues/136\n. Is Bower being used in the project or this file is there for some other reason?\nI can't see any use for the tests since they are being loaded via CDN.\n. Maybe @carhartl is waiting for the next release to consider this fixed.\n. @malhayek2012 Take a look at this http://sscce.org/\n. @carhartl \nAny news on this? It is quite a small implementation.\n. Need to add grunt watch to this docs as from https://github.com/carhartl/jquery-cookie/commit/43f15080765e5f1b47a5bb68ed4acd6fabfe9c0e\n. Done\n. @carhartl \nAny news on this? It is quite a small implementation.\n. @carhartl \n\n... is that to be added still to this PR or is it part of your other PR?\n\nAs far as I remember it should be added to the other PR when this one is commited. I did not add since this one were up to revision.\nNow it has been revised and the other PR could be updated next.\nI am going to squash and commit into the master.\nAll good?\n. Of course\n. Forgot to close from the commit itself https://github.com/carhartl/jquery-cookie/commit/43f15080765e5f1b47a5bb68ed4acd6fabfe9c0e\n. It is implemented on master but not in 1.3.1. More details in https://github.com/carhartl/jquery-cookie/issues/173#issuecomment-15535390\n. Just call from within an event like everything else:\njavascript\n$( \"button\" ).click(function() {\n    $.removeCookie( \"the_cookie\", { /* the_options */ } );\n});\n. Make sure jQuery and jQuery.cookie is properly loaded in your page before you call $.cookie. Making the plugin source to load when DOM is ready by using $(function() {}) is not the right move.\n. I'm sorry, but I closed because this issue is clearly not related to the plugin. It does not prevent us to trying to find out the root cause though.\nAs I said you need to load jQuery and jQuery.cookie before calling $.cookie. A code snipped would help.\n. @rainabba \nCheck out this site, it provides tips to help you reduce your code in order to get a clear view of the portion that is causing the problem. It is impossible for us to find the cause of why it is not working in your environment without any code to look into. Sometimes you can get into the root cause easly by just eliminating irrelevant code.\nIf reducing your code still did not solved then you can post the code for us to take a look into.\nIt is better also to wrap and ident your code using the Github Flavored Markdown. It makes easier to read and to understand.\nAccording to the given information so far, it is probably related to jQuery being loaded twice in the page.\n. I've never done automatic cross-browser testing. Seems pretty interesting though.\n. Wiki is a good place for that, perhaps.\n. The problem is that, for the sake of lighness, we don't have a routine to check whether a string is a valid JSON or not. When you set the flag $.cookie.json = true it assumes every cookie call is stored according to the json spec.\nCurrently you need to set the flag only when retrieving and setting the data.\nA discussion was made some time ago when the subject of the applicability of this API was put into question here\n. It resulted on https://github.com/carhartl/jquery-cookie/issues/151\n. > If I set $.cookie.json = true and then set a cookie with a string value such as $.cookie('test', 'teststring') I can't get it back while $.cookie.json is still true. Instead, trying $.cookie('test') returns undefined.\nIt is the desired behavior. This flag represents a handling state, jQuery Cookie ignores every cookie who fails to conform to the JSON spec, in your case $.cookie('test')\nSolution: Turn the flag on only when required, otherwise keep it off with delete $.cookie.json\n\nIf I then switch $.cookie.json off, the same call returns the string (not in quotes).\n\nAgain a desired behavior, you are not assuming every cookie to have a JSON structure in the string.\n\nWith $.cookie.json back on, $.removeCookie('test') returns false, and the cookie remains (though still not visible with JSON mode on).\n\nSince it is assumed that only JSON cookies should be worked on, $.removeCookie implicitly ignores a non JSON cookie removal\n\nWith $.cookie.json off, $.removeCookie('test') returns true and removes the cookie.\n\nYup, the cookie assumes no JSON and consider the string as a whole\n\nWould it be a valid solution to skip this unescape routine if $.cookie.json is switched on?\n\nThat would unnecessarily increase the complexity and break the assumption that you can only work with JSON when the flag is on.\nAs a general rule you could just switch to the way you see fit each time you work with a cookie. Ugly I know, but until the converters sail off, there's not much we can do.\n\nWell the thing here is, the stored cookie is valid JSON (or at least it is parsed by JSON.parse just fine), being a  quoted string. It's the unescaping routine removing the quotes which is breaking it in this case.\n\nYou are saying a quoted string is a valid JSON? According to http://json.org/ it does not allow regular strings as JSON.\nProviding a simplified example would help a lot to get the context here.\n. How is your document.cookie at the moment of reading?\n. Ok, now I understand the issue.\n@carhartl\nIf JSON.parse works the plugin should work too, probably such thing is allowed but we are missing in the spec.\nChanging the way quoted strings work will conflict with the treatment that is being made to comply to RFC 2068, but since we are taking control of the structure, that spec seems to be irrelevant.\nAnything I may be missing?\nRemoving the check when $.cookie.json === true seems pretty legit as suggested above.\n. The treatment today could be considered an implementation detail if single values are not considered JSON.\n\nOnly {} and [] are valid JSON though (despite of what JSON.parse can or can't handle)\n\nDo you have a link to show that? If you are right then I don't understand why JSON.parse allows single values without and exception. A fast research shows me it is a valid JSON, ot at least I could find it at MSDN\nJSON = null\n    or true or false\n    or JSONNumber\n    or JSONString\n    or JSONObject\n    or JSONArray\n. Closing as duplicate of your PR\n. @arunkumarg \nCan you please reduce your example into a single document.cookie setter operation and then a $.cookie() call?\n. If reporting a bug, please add a simplified example\nhttps://github.com/carhartl/jquery-cookie/blob/master/CONTRIBUTING.md\n... and the version of jquery cookie you are using.\n. It could be path issues, see https://github.com/carhartl/jquery-cookie/issues/193#issuecomment-20291179\n. I am sorry @Carlowww, but I believe we can't help any further. The issues are reserved for problems directly related to the plugin and this looks like incorrect usage.\nWe can only help if you gives us more information after reducing your code into a few lines where only the plugin is being used (without external imports other than jquery.cookie.js).\nClosing to avoid unecessary noise.\n. LGTM, waiting for @carhartl to take a look.\n. > The assumption that a mixture of serialized JSON and a RFC 2068 can't occur must hold true. How to verify that?\nI am not sure if that support is really needed since $.cookie.json is going to be deprecated, but we could assume the RFC will not be considered when using serialized cookie values and consider discussing this only if someone opens an issue about. The problem is that if someone is already using it, this modification will break...\nThere is also the alternative to remove support of single values as JSON and consider only proper structures and not just everything JSON.parse accepts.\nBoth ways will potentially break something...\n. The code you provided is working properly, check if $.cookie.json is off, you are not using file:// in the url, etc.\n. @zmillman \nThe only feature jquery cookie uses from jquery is the $.extend API. All versions from 1.1.4 are supposed to work.   http://api.jquery.com/jQuery.extend/\n. There is no such API.\nYou can use JSON for that purpose though (untested):\n``` javascript\n// Activate JSON write and reading\n$.cookie.json = true;\n// Create json cookie\n$.cookie( \"my_cookie\", {\n    foo: {\n        bar: 5\n    }\n});\n$.cookie( \"my_cookie\" )[ \"foo\" ][ \"bar\" ]; // 5\n// Return to the regular cookie handling\ndelete $.cookie.json;\n```\n. AFAIK decodeURIComponent decodes the escape sequences assuming the UTF-8 encoding of each character. If your cookies are escape as UTF-8 there would be no problem in theory, unless they are not in UTF-8.\nIs it possible to provide some example, perhaps a document.cookie being set manually? I suppose such cookie is written on server-side.\n. @carhartl @bensmithett \nSorry to be a grave digger, but is there a problem this was supposed to solve?\nI ask because I can think of an use case where one could use something like the grunt-bower-postinst to run the build using grunt default and copy the minified files into somewhere else after downloading from bower. Currently this is impossible because bower only downloads the main unminified JS file and ignores the Gruntfile.js.\n. X-ref: https://github.com/bower/bower/issues/368#issuecomment-15916138\n. Your second example should not override the previous cookie because you have set a custom path, so it is considered a different cookie.\n. > Testing for a cookie's existence by evaluating the return value of $.cooke alone isn't reliable if your cookie value is zero for example.\nWhat u mean? The first argument is expecting a valid string as the cookie name and not $.cookie( 0 ) or $.cookie( \"\" ).\n. The following evaluates \"truthy\":\njavascript\ndocument.cookie = 'c=0';\nif ( $.cookie( \"c\" ) /* \"0\" */ ) {\n    alert( \"yes\" );\n}\nSeems pretty reliable to me, am I missing something?\n. > In which case I guess checking for null or undefined explicitly isn't strictly necessary other than perhaps good practice.\nyeah, this is why the return was changed from null to undefined without worring about backwards compatibility (both of them are falsy)\nKeep in mind though that the return of a valid cookie as string is not documented, do not rely on that :D\n. @Cranavvo \nYou should consider EVERYTHING in the client side to be dangerous, an attacker can simulate anything a browser can do.\n. @Messilimeng js-cookie also has a Wiki that answers your question: https://github.com/js-cookie/js-cookie/wiki/Frequently-Asked-Questions#expire-cookies-in-less-than-a-day\n. See https://github.com/js-cookie/js-cookie/issues/172#issuecomment-209286184 for detailed explanations of how to make js-cookie working with composer.\n. It would be nice to keep testing the versions and find out the diff where the problem occurs, then reduce to the code that is causing the breakage. Depending on the problem it could be easy fixed, but supporting custom extensions is a pain that I am sure no plugin author is willing to take.\nI vote to close this, since without more information or sscce there is nothing to do.\n. @jonDotsoy @guybedford \nWe are planning to remove unpopular package managers in the upcoming version 2.0 on http://github.com/js-cookie/js-cookie.\nRecently we had custom code for a package manager but eventually it broke and nobody noticed. It turns out to be unpractical to support all package managers, so we are sticking to npm and bower. Is there a real issue in removing this custom code from the new renamed project's codebase? Can't we support this package manager in a way that it's not necessary to maintain custom code in the original repository?\nThanks.\n. Like this? https://github.com/js-cookie/js-cookie/blob/2f625ebbbfa91fa154a61152b7deea32659a0792/package.json#L5\nI made a cross-reference from the pull request that originated that line. Comments are not allowed in the JSON spec so this is the only way to keep context of why that property exists.\n. > Add please into readme that days must be integer.\nThere is no integer in javascript, just Number. From README:\nValue can be a Number which will be interpreted as days from time of creation.\n. The same as +new Date then, I suppose.\nI still don't see how you would implement that since it already defines the behavior for number types.\n. Ok, now I got it. It makes sense.\nI think more code is irrelevant here, it should behave that way by default.\n. @Stalinko \nThe \"more code\" in this case is to add character bytes that will not be minified, just for a single use case, but it seems irrelevant because it should work that way according to the docs (as you said).\n\nI used \"integer\" as a mathematics definition.\n\nYes I got that after understanding better the problem.\n. What I meant is that according to the docs it should work, so the requested implementation makes sense afterall.\nThe character count should be considered in a few cases, because it is not worth to add even 1 byte to everyone for something that can be handled in a environment specific way. But I think this is not the case, this could be pretty handy and increase the legibility of your application (assuming there is no drawback for using floats like the famous float arithmetic behavior)\n. I agree with @carhartl, despite the plugin not being so widely used as jQuery it should use the same principles.\n. ... and code style :smirk: -> @carhartl \n. t * 1  could be replaced for +t, couldn't it?\nI was going to suggest new Date( +t ) but a new object creation is not worth it.\n. I think you can also add directly from the date object: t + days * 86400000 (need to test I am not sure)\n. It always cast for millis in arithmetic operations\n. My mistake, now I remember it is boolean and not every arithmetic operation ( new Date() > new Date( 0 ) ) =/\n. Actually it is every arithmetic operation new Date() * new Date( 2 ), but the + is an exception cause it concatenate the date as string\n. Oh yeahhh I didn't thought about the scientific number notation.\nThat's why I like javascript, it is so much fun to work with, and is pretty stable.\n. Why can't u do the whitespace thing? Also, jQuery uses double quotes for strings not single.\nThe point is to use proven practices for jQuery development and not lose time inspecting different style guides through the codebase =/\nIt is up to you anyway but I would go for full compliance.\n. expires: 1 / 48 is supposed to work also, as from https://github.com/carhartl/jquery-cookie/issues/246\n. @colinrymer \nWe are planning to remove unpopular package managers in the upcoming version 2.0 on http://github.com/js-cookie/js-cookie.\nRecently we had custom code for a package manager but eventually it broke and nobody noticed. It turns out to be unpractical to support all package managers, so we are sticking to npm and bower. Is there a real issue in removing this custom code from the new renamed project's codebase? Can't we support this package manager in a way that it's not necessary to maintain custom code in the original repository?\nThanks.\n. ok :)\n. Hi @wilmoore, can you confirm if this still matters?\nhttps://raw.github.com/carhartl/jquery-cookie/v1.4.1/src/jquery.cookie.js doesn't seems to be working via GET request, it returns 404.\n. @carhartl Isn't cached for you due to previous access?\n. +1 then, it seems nobody is relying on this, otherwise something would have popped up already.\n. @AndrewEastwood I am not used with this plugin in node/commonJS environment, maybe @carhartl could take a look if the author make the build pass properly.\n. I don't think making this plugin work with node request.headers.cookie is feasible. It treats client-side, not server-side.\nIf this is just for browserify/commonJS, the comments should be updated to reflect that, I think given the complexity this kind of support is going to, i'd say a test should be created somehow.\nFor testing AMD the best approach is running a simple test loading with require in a separate file and run on build after or before the regular tests.\nI did something like that for jQuery.countdown in the past few months: https://github.com/hilios/jQuery.countdown/commit/8d0b5b6d170824c35dced1c9d3f305adb349836b\n. @gaastonsr We thought the same when the AMD support was landed, but this kind of support is starting to become complex, so a test becomes necessary to avoid regression.\n. Can't be something like https://github.com/hilios/jQuery.countdown/commit/8d0b5b6d170824c35dced1c9d3f305adb349836b?\nIf you are willing to make the AMD tests it could be done in another issue. But the CommonJS support could be done here first.\nMy suggestion is to create a separate file importing some CommonJS library and create a single async test validating the plugin loading, then in another issue you could do the same for AMD support.\nI hope it makes sense.\n. Do you mind paste some straightforward article expressing exactly what you are trying to achieve here? Just to have some context, I have no experience with CommonJS on client-side, only AMD (requireJS).\n. Ok, It seems my confusion was about the need to compile the plugin's source files first.\nThe problem about using mocha is that it would add a different testing concept from the one already being used here. All to test just a single condition.\nI was thinking about programmatically achieve the following in the test build:\n1. Create a unique html test page.\n2. Before running the tests, compile the plugin's source with browserify tools.\n3. Run the commonJS test in the unique HTML.\nIs that possible?\n. @carhartl, if testing the CommonJS behavior is not desired, then a stub itself is irrelevant. A stub does not warrantee the code will keep working.\nThe only way to avoid regression for loading the plugin in a different environment, is testing in the environment itself.\nThe testing harness is necessary, unit test is not enough.\n. I may help to build some integration test on AMD support, but since I am not used with CommonJS or browserify I was hoping @gaastonsr could create a regression test to ensure the support stays working (avoiding potential rewrites).\nBut since the pattern is not that complex and @gaastonsr probably manually tested the functionality in his own application, it may be merged and looked in the future. For the sake of stability I can't say that I like untested code though.\nIt is all up to you.\n. The first example would add an unnecessary property to the properties object, increasing maintenance. Usually when you are working with JSON you treat all the cookies as JSON, but if you want to treat only some of them you could create a custom method instead (using the second example).\nThe second approach would add an additional namespace to the plugin, increasing the possibility of conflicts and maintenance. Such approach is encouraged to be done on your environment which is much more controlled.\n. @carhartl \nToday Savage seems to provide a solution for this. Last commit was 5 days ago so it seems to be actively maintained.\nWorth take a look.\n. @cvrebert do you know any infra-structure free for open-source that can be used to run Savage? Or we should setup our own server?\n. Moved to js-cookie/js-cookie#13\n. @carhartl,\nI am curious, why this issue appears as just This issue was closed instead of someone closed this x hours ago?\nIs this some github feature?\n. I was curious just because of the strange behavior. Also, the closed the message doesn't seems to hold on into the proper chat position when someone comments, weird. Github bug perhaps?\nRegarding this issue in particular, to test AMD support one should create so much code and different files that it may turn to be unfeasible. AMD compatibility handling is a design pattern, a concept.\nMaybe we should worry about testing this kind of stuff when there is evidence that this lack of testing is causing some regression.\nI don't remember if I mentioned it before, but I implemented something like this in the jquery.countdown repository a few months ago, it used requireJS as the AMD provider, see here. Too many files.\n. > I don't remember if I mentioned it before\nYeah, I tracked down the origin of this issue and indeed I mentioned before -.- https://github.com/carhartl/jquery-cookie/pull/264#issuecomment-35530281\nAnyway, I get your point regarding the irrelevance of testing this at the moment. If it is really important, the discussion will come back again in the future.\n. x-ref:\nhttps://github.com/carhartl/jquery-cookie/issues/223\nhttps://github.com/carhartl/jquery-cookie/pull/71\n. FWIW, I saw a discussion in some pull request in jQuery core that jQuery does not support IE compatibility modes.\nIn this case I don't see how this plugin would support it too.\n. I found something mentioning the \"quirks mode\":\nhttps://github.com/jquery/jquery/pull/764#issuecomment-8123373\nhttp://stackoverflow.com/a/6732113/1400037\nIt seems it has support for compatibility modes, but not for quirks mode. My mistake.\n. This plugin is already occupying 2 names in jQuery scope. There is no benefit into including one more.\nThis is pretty easy (and convenient) to be implemented in your custom environment because one may need to conditionally delete the cookies.\nThe $.removeCookie was only added for consistency with the jquery api $.fn.removeProp, $.fn.removeAttr, $.fn.removeData, etc.\nThe aim here is to create something as lightweight as possible, custom implementation should be done in a per-developer basis.\n. What if I am using json string format as a value? Besides it doesn't seems the responsibility of this plugin to add such behavior, the idea is to simplify cookie handling and let the developer extend at will, mostly because you may already have some server-side pattern to create and read cookies.\nI am not saying it is something that should not be tried, but with the approach being presented here it seems you are adding behavior for plain strings and ignoring json config, that's just not feasible.\nWhat is the actual problem you are trying to solve here?\n. @carhartl do you remember the architectural issue that did not let us do this kind of control before? I remember is some kind of limitation with the syntax of the plugin regarding $.cookie( key, objectLiteral ), but a fast looking into the plugin source did not make me identify any code that is using that syntax, is that problem solved somehow along the way?\n. So it is not possible to pass options as the second argument anymore? I seriously don't remember at which point that was removed oO.\nAnyway I am up to go for it either, but there is some issues to be discussed (maybe irrelevant):\n- What if I want to store a value that starts with \"{\" or \"[\" in a string?\n- What about server-side cookies that may not use JSON spec properly and fall into the problem above?\n. @dhoulb\nWe dont use jQuery.parseJSON for two reasons:\n- It was implemented as from version 1.4.1, jQuery cookie works with practically all jQuery versions otherwise it would be version specific for a single feature (feature test would be useless here for the reason below)\n- jQuery has only a decode function, not an encode one, so it would be unnecessary to use one and request the second do be used with JSON.stringify since both are available with Crockford's json2.js It is easier to document to add a single file to enable both features than documenting a single feature. Also, developers are used to add the json2.js file as a full polyfill for their old browsers.\n\nPoorly encoded server-side cookies would be an issue, you're right. If the JSON.parse fails for any reason, you'd get the string version back.\n\nIf that's what you are actually doing and testing I don't see anything wrong.\n@carhartl,\nYou may perhaps release a new version (if new features were added since the last) and then a beta with the proposed solution here after review.\nI am just concerned about the old issue we had about this with the options argument, if a new release with the given removal was already made I don't see anything wrong with trying this out.\nAnyway, this would break backwards compatibility with strings that matches the regex, so it may require a new major version.\n@dhoulb \nYou should also document as jQuery.data attribute if the behavior is similar.\n. No, jQuery.cookie depends on jQuery.\n. > This has been discussed before (in the issues).\nX-ref: https://github.com/carhartl/jquery-cookie/issues/2\n. I think removing json config now will break a lot of systems. The implemention could be done without removing the feature (even if that is deprecated).\n. Yes, I was refering to some details of the json config that will not be backwards compatible such as the undefined return. I think that kind of change is made for a major release because it could bring some unexpected breaks.\nI like the idea of exposing dataAttr from jQuery. But first we need to make sure there is no other way for doing this and if they would support such API to be exposed.\nBy the way, the idea is to expose only the relevant part of the API that makes the json conversion, that would require more work in jQuery's side.\nBut there is also the version compatibility issue, older versions of jQuery could not have jQuery.data behaving as it currently is, and if some change is done it would work only or newer versions.\n. Not only require latest version but depend on external support (I am pretty sure jQuery team will not create a new API for this reason :D)\nLooks like the only feasible solution here is code duplication (as it is already being done).\n. In this case I think the ideia of using a detached DOM still stands (if it actually works)...\n. @carhartl I think you will, because data attribute is a specification (internal implementations doesn't matter and aren't suppose to change).\nJust document saying that the process is similar to the spec and you are good to go :D\n. Hi @dhoulb, just so you know JSON handling is being developed in branch 2.0.\nHere are the initial docs of the feature. This is still in development, so any suggestion is welcome before landing in master.\nClosing this since it was fixed in commit https://github.com/js-cookie/js-cookie/commit/a52398deaf90d98ab64688904180f95a3ec8b807\n. @carhartl There is no silver bullet for automating a release process. In a fork I tried to use all tools available, but there are too many of them to solve so many specific workflows and the more robust ones always lack something that prevents the process to be fully automatic.\nMaybe not the case for this project, but sure is the case for any project that deviates even a little from a normal project (like having submodules, multiple json files to update the version, having a production server to start/shutdown, etc.)\n. @carhartl \nI will take a look in the RFC and send a pull request to js-cookie 2.0 to start this up.\n. Fixed on https://github.com/js-cookie/js-cookie/pull/8, will take effect once v2.0 is released.\n. This whole message could be added using grunt with dynamic date, otherwise one should always remember to edit the original file by hand =/\n. That's exactly what I mean\n. Is there any use case where the cookies.length optimization is relevant for the plugin? Also, what is the difference in bytes when you use grunt compare_size?\n. Performance optimization is not always relevant, in this case one may not create a loop with millions of cookie reads, and even if he does, 2% performance is nothing. Code legibility should be taken in consideration.\nHowever, even 1 byte gzipped reduction for the codebase is relevant, because it means an actual optimization download for mobile and low speed connection.\n. So jQuery test the behavior but does not document it? I remember at the time we didn't bother to discuss this because jQuery docs didn't mentioned anything, so the behavior was undefined.\nThe API should behave the same as jQuery though, even if that's not documented.\n. Of course now that makes sense, it was always documented but I failed to interpret it correctly :P\nI think it is all ok unless @carhartl have something else to say.\n. I will document here for anyone having issues to make Sauce working for PRs sent by collaborators, here are the details:\na) Travis does not export environment variables from untrusted builds:\n\nSimilarly, we do not expose these values to untrusted builds, triggered by pull requests from another repository.\n\nhttp://docs.travis-ci.com/user/environment-variables/\nBut it doesn't make clear what is a \"trusted build\" (see below).\nb) Travis executes 2 builds for a PR created by a collaborator from a branch in the same repository, the PR and PUSH builds: https://github.com/js-cookie/js-cookie/pull/3\n\nBoth builds export sauce environment variables.\nc) Travis does not execute PUSH build from a PR created by a collaborator from a branch in a fork, it executes only the PR build: https://github.com/js-cookie/js-cookie/pull/4\n\nTravis consider this an untrusted build and does not export the environment variables\n\nSo, since SAUCE_* variables are not exported in any PR created from forks, then neither a PR from a collaborator nor from another user is going to execute the sauce tests.\nThe only way to make SAUCE_* variables to be exported by Travis is a collaborator to send a PR from a branch in the same repository, then Travis consider it to be a \"trusted\" build, otherwise it doesn't.\nThe real 100% effective solution is to use Savage, otherwise you will not be able to make it work for collaborators sending PRs from topic branches in forked repositories.\n. According to @guybedford this is also necessary for jspm.\n. > My use case is in applications where pages pull assets from builds managed by different teams and depts.\nIt seems to be a problem specific enough to be solved inside your infrastructure.\n\nMy intent is to actually know what versions of which assets an application is using because there are cases where different versions of the same assets may be initialized and then redefined with a differing version in a script load at a different time on the same page\n\nI never saw any infrastructure like the one you mentioned, but you could always use jquery.cookie.1.4.1.js filename pattern for every plugin and split the version from there, this way you wouldn't be relying in plugin authors to change anything.\n. Regarding AMD having a return value, I don't see how that is reasonable. A similar discussion occured here: https://github.com/jzaefferer/jquery-validation/issues/1181\nIn special this quote from Jorn:\n\n... If in the future the plugin exports its own global namespace, e.g. validator, making the jQuery plugin an optional feature, that global would be returned from the AMD wrapper...\n\nIt makes sense...\n. @gustavpursche suggestion seems reasonable. I am not sure, but I probably mentioned something like this in the past. One could create cookie handling outside jquery namespace and just return its reference when using AMD, but I wonder if that would still be called jquery.cookie and how would the dependency be handled in this case?\nAt this point i really didn't expected someone would still be using jquery.cookie, given the ease to handle cookies in the server side and the  tons of frameworks out there that already have a very good cookie handling mechanism built in.\n. Couldn't you just return the jQuery reference?\njavascript\nreturn $;\n. Even though jQuery API is exposed returning the whole object, it doesn't mean the developer should use it as if it were returning a jQuery object. It is all about documentation, if we document that the plugin returns removeCookie and cookie properties, then despite what it returns, the developer should rely only in those returned properties, the rest is not supported.\nWhat troubles me is the addition ~50 bytes non gzipped in contrast with mere ~8 bytes by using return $;. It may seems irrelevant, but we should try to always make it as lightweight as possible without messing too much with readability, after all this is \"A simple, lightweight jQuery plugin\".\nCan you post the grunt compare_size result just to see if gzipped has any noticeable difference?\n. @carhartl It doesn't seems so, the whole point here is to return something, if you don't return anything in the factory then var cookie = require('jquery.cookie'); will make cookie variable to be undefined.\nSee here: https://github.com/carhartl/jquery-cookie/issues/319#issuecomment-64729681\nNeed yet to decide what to return here exactly, and if it should return something at all.\n. This issue is going to be fixed with https://github.com/js-cookie/js-cookie/pull/3\n. Can you provide a simple example that can be copied and run in a local web server?\nOr can you write a test that reproduces the issue like this?\nMake sure it doesn't fall into the problem descripted here, in special this part:\n\nBy default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: '/'. Default: path of page where the cookie was created.\n. What does this PR solves exactly and how is the current behavior without your PR?\n. You mean it did not exported correctly in a nodeJS environment, correct?\n\nThe factory doesn't return anything, so the return value would not be of any use if that's what you're looking for. You say the inclusion of module.exports is required for it to work in a nodeJS environment? Or just to deal with the returned value?\n. This is by design.\nYou should load jquery cookie using require statements and not insert a script tag in AMD capable environments.\nRegarding naming drawbacks:\nAuthors should not name their modules, the name should be resolved from the file, not hardcoded in the plugin itself. Due to historical reasons and backwards compatibility jquery holds \"jquery\" module name, but plugins are not supposed to do the same.\nBy naming the module we restrict a lot of things instead of letting the developer decide which module name to use.\nIf you want to make that message disappear you can use a custom build that detects the \"define\" statement in the module and updates the code accordingly.\nI never did that, but I think you can do it using grunt and r.js helper from requireJS.\nMore information: \nhttp://requirejs.org/docs/errors.html#mismatch\n. We could create a small organization, copy the JS core without jquery and then specific projects for jquery, angular, etc. (mainly to provide name compatibility). The distribution code on jquery-cookie repo would remain unchanged. I am just not sure if cookies are still mainstream enough to justify all that work.\nSimply renaming the project though would cause a lot of trouble for ppl using package managers, the plugins.jquery.com site, looking on google, asking things on stackoverflow, etc.\n. @macgyver It is very useful to receive input like this, it serves as a reminder that this still might make the difference :O\n@carhartl I was thinking more something like this:\n- Fork the project in a small organization\n- Remove jquery dependency\n- Use that project as a dependency for this jquery-cookie project without changing the jquery-style API (or move the repository to the organization to enable github automatic redirect)\n- Then in the future create specific projects porting the core to specific frameworks like angular\nThen each project would have its own package manager namespace, its own project and jquery-cookie wouldn't change.\nI would suggest trying to keep some backwards compatibility and don't just break everything, jquery-cookie can stay as is, it would just hold the namespace, not the core.\n. js-cookie? :D\n(then jquery-cookie, framework-cookie, etc.)\nI mean js-cookie-dev for the org or something like that.\nExample: https://github.com/jscs-dev\n. I think for the API structure the @Krinkle suggestion is the best approach. But by convention the initial capital letter is used for functions that should be instantiated using the new operator, so maybe window.cookie.set(), cookie.get(), cookie.remove() are the best alternative to comply with the localstorage and similar naming patterns.\n. @carhartl I created github.com/js-cookie organization to save the name and added you. I am not sure if this is the best name for it, you could create another one if you think of a better name.\nI am willing to help on this.\n. I made a fast research to have some information in the usage:\nwindow.cookie\n- https://search.nerdydata.com/code/?and_code[]=window.cookie&limit=0,20\n- https://meanpath.com/f/HSGPlG\nwindow.cookieStorage\n- https://search.nerdydata.com/code/?and_code[]=window.cookieStorage&limit=0,10\n- https://meanpath.com/f/XVLVMF\nvar cookie\n- https://meanpath.com/f/oMgoK4\n- https://search.nerdydata.com/code/?and_code[]=%22var+cookie%22&limit=0,10\nThat is not too deterministic because one could use IIFE to wrap the window and obfuscate it through minification, declare the implicit global variable without var and without using the \"use strict\" statement, etc. but it helps to have an idea.\nI couldn't find a way to get a case-sensitive result to check how likely var Cookie is in comparison with var cookie, but from the first results I could see that var cookie and window.cookie are indeed the most used namings (although window.Cookie is still used by a few sites).\nThe cookieStorage naming is practically null though and follows the localStorage, sessionStorage patterns (could this generate a conflict with some future standard?).\n@Krinkle, @carhartl \nWhat you think? Do you know a better way to check this in the wild?\n. Google FTW xD\n. > But I think we could start out with the name cookie or Cookie and we will get some Feedback soon enough. Could we maybe provide a jQuery noConflict like mechanism, allowing to rename the global entirely? Too much effort?\nI started using Cookies, maybe that way we could avoid creating some mechanism to change the global: https://github.com/js-cookie/js-cookie/commit/25ced9c78c57aad75806d50993956d811df72e2a\n\nLast not least, with modules, is this maybe not so much of a problem any longer?\n\nThat might not be a problem if one uses modules, but simple websites have no reason to use any custom module system, it's too much overhead.\n\nI quite like cookieStorageI just realized. Would be really great if we then provide the same api as localStorage/sessionStorage, as mentioned.\n\nIn the end \"cookieStorage\" may cause confusion because cookies has nothing to do with the HTML5 Storage API, it's not even standard, just an standalone API.\n. Fixed with: https://github.com/carhartl/jquery-cookie/pull/360\n. @jlucvs check this: https://github.com/carhartl/jquery-cookie/issues/162#issuecomment-102192268\n. Just to clarify:\njs-cookie v1.5.0 and v1.5.1 are backwards compatible with the $.cookie API, but as from 1.5.0 the $.cookie API is deprecated.\njs-cookie v2.0.0 and onwards does not expose the $.cookie API anymore, it will throw an error:\n\n$.cookie is not a function\n\nIf you want to upgrade straight from the jquery-cookie repository without changing anything, just pick the version 1.5.1 until you are ready to upgrade to the latest version.\nPlease, read carefully the changelog for the version 2.0.0 before upgrading.\n. I wrote some examples on how to integrate js-cookie with AngularJS: https://github.com/js-cookie/js-cookie/issues/103\n. It is a good practice to use a build process to concatenate and minify vendor files downloaded using bower. There is a common situation where you need the unminified files for debugging and minified files for deploying to production.\nRef: https://github.com/carhartl/jquery-cookie/issues/223, https://github.com/carhartl/jquery-cookie/pull/71\n. The docs says // Returns true when cookie was successfully deleted, otherwise false.\nThat seems to be misleading, shouldn't it be // Returns true when target cookie exists, but may not be deleted if options were not passed correctly, or enforce somewhere that The behavior for passing wrong options to $.removeCookie is undefined. This is implicit, but still an abstraction leak from the browser default cookie mechanism, if we consider that this behavior should be known by the developer.\n. We would like to avoid cluttering the codebase by abstracting the date definitions in strings.\nYou should handle the midnight rule externally and provide a proper date instance with the desired value.\n. @d07RiV  Do you have an example?\n. Fixed in https://github.com/js-cookie/js-cookie/commit/60599da8e9c11f2859e7fc188435f45bb57de53c\n. Hi, currently it does not return the api when using require(\"jquery.cookie\"). Since this is a jquery plugin it is bound to the jquery namespace, so if you do the following it is supposed to work (didn't tested though):\njavascript\nvar $ = require( \"jquery\" );\nrequire( \"jquery.cookie\" );\n!!$.cookie; // true\nIt was reported on https://github.com/carhartl/jquery-cookie/pull/330 and fixed in https://github.com/js-cookie/js-cookie/commit/3e816b8ab8a130ccc24e29966dbf98c04f66a6d3#diff-b686f7b30e7b0c4f5ed6cd2e87241704R136 (in the new repository), but it is not yet published on npm. If you want to use it you can download the code on https://github.com/js-cookie/js-cookie/blob/e2ae3b69f7e56eb9b76f7f712c022f4448cda556/src/js.cookie.js\n(just the version that is incorrect in the header, I will change that to 1.5.0-pre in a few minutes).\nDone https://github.com/js-cookie/js-cookie/commit/1ff2fda87c9056bb17f8a27aba94c560589f2e53.\nWith the code above you can do something like this:\njavascript\nvar cookies = require( \"js.cookie\" );\n!!cookies.set; // true\n!!cookies.get; // true\n!!cookies.remove; // true\nPlease report in https://github.com/js-cookie/js-cookie/issues if you have any issues, thanks!\n. @huglester \nI'm glad it worked xD. Follow https://github.com/js-cookie/js-cookie/ repository, there will be a lot of interesting implementations in the next weeks :)\n. Hi, thanks for the PR!\nWe have a history of some package managers that were requested, landed but not maintained, like this one. We decided to stick to npm and bower. Regarding composer, there is a similar request where the OP found a solution without having to submit more data to this repository: https://github.com/carhartl/jquery-cookie/issues/220#issuecomment-25412945.\nAlso, we are not maintaining this repository anymore. The whole development was moved to https://github.com/js-cookie/js-cookie, we encourage everyone to download the latest release at https://github.com/js-cookie/js-cookie/releases and report issues on https://github.com/js-cookie/js-cookie/issues\n. Thanks xD\nLet's continue in the other repository then.\n. See https://github.com/js-cookie/js-cookie/issues/172#issuecomment-209286184 for detailed explanations of how to make js-cookie working with composer.\n. Hi, new issues should be opened at https://github.com/js-cookie/js-cookie/issues.\nCheck out the latest release and confirm if the issue is fixed: https://github.com/js-cookie/js-cookie/releases\n. @powermike In js-cookie v2 the default path was set to the whole site (/) and is tested against Safari 8.\nCan you please confirm if any of the followings are true or false:\n1. It fails in previous versions of safari?\n2. It fails in js-cookie 2.0.0-beta.1?\n. Closing due to the lack of feedback from the OP.\n. Hi, new issues should be opened at https://github.com/js-cookie/js-cookie/issues as from https://github.com/carhartl/jquery-cookie/commit/d72bb07e29962330db61aae1eda07f6312419840.\nCheck out the latest release and confirm if the issue is fixed: https://github.com/js-cookie/js-cookie/releases\n. Moved to https://github.com/js-cookie/js-cookie/issues/45\n. Thanks, but this repository is frozen, it was renamed to https://github.com/js-cookie/js-cookie, the property was already removed in https://github.com/js-cookie/js-cookie/issues/44\n. Hi, new issues should be opened at https://github.com/js-cookie/js-cookie/issues as from d72bb07.\nCheck out the latest release and confirm if the issue is fixed: https://github.com/js-cookie/js-cookie/releases\n. Hi, this project is frozen, new issues should be opened at https://github.com/js-cookie/js-cookie/issues as stated in the README.\n. See https://github.com/js-cookie/js-cookie/issues/52#issuecomment-113960440\n. Hi, new issues should be opened at https://github.com/js-cookie/js-cookie/issues.\n. The problem is that new Date() interprets the month as zero-index based numbering.\n``` shell\n$ new Date(2015, 10, 25, 17, 01, 00)\nWed Nov 25 2015 17:01:00 GMT-0200 (Hor\u00e1rio brasileiro de ver\u00e3o)\n$ new Date(2015, 0, 25, 17, 01, 00)\nSun Jan 25 2015 17:01:00 GMT-0200 (Hor\u00e1rio brasileiro de ver\u00e3o)\n```\n. Hi, new issues should be opened at https://github.com/js-cookie/js-cookie/issues.\nCheck out the latest release and confirm if the issue is fixed: https://github.com/js-cookie/js-cookie/releases\nNote: Make sure you pass the same path, secure and domain options when deleting a cookie.\n. Hi, the best way to get help in usage issues is asking this on stackoverflow under the tags jquery, cookie, cookies and javascript.\nAlso, check the latest version at https://github.com/js-cookie/js-cookie.\nNote: If you create a question on stackoverflow, please link it here so other ppl can find it when searching for the same problem.\n. The homepage of plugins.jquery.com says:\n\nThe jQuery Plugin Registry is in read-only mode. New plugin releases will not be processed.\n\nIt is stuck on version 1.4.1 there.\nAlso, even if we could change it, the renamed project (js-cookie) does not have jQuery ($) as a dependency from the version 2.0 and onwards. It probably doesn't make sense to change the project URL in jquery plugins page, but if possible it would be worth mentioning the new project for future reference, because there's some traffic coming from http://plugins.jquery.com/cookie/ URL.\n@carhartl thoughts?\n. > Of course it's worth mentioning there that we've moved forward.\nAny idea on how to do it?\nI wonder if New plugin releases will not be processed means that it won't accept new plugins or it won't accept new releases (even for plugins that are already there).\n. > It doesn't look like I can even sign in any longer.\nWell, if you can't sign in, then there's nothing we can do xD. The only reason to mention the change in the plugins page is because that is one of the main sources of traffic for this repository, most ppl don't even care there is a documentation in the README and go straight to copy/paste the code from github UI =/.\n. @williamsbdev Can you upgrade to js-cookie v2 and open this issue in that repo? We are not maintaining jquery-cookie anymore.\n. Let us know the solution you found :+1: \n. Hi, thanks for sending a PR.\nThis project is frozen, new issues or PRs should be opened at https://github.com/js-cookie/js-cookie/issues, see the README.\n. Hi, this repository is not being actively maintained and was superseded by https://github.com/js-cookie/js-cookie, new issues should be opened there. If you want to use with jquery, check the latest version from 1.x.x release (1.5.1).\nAlso, the returning value from $.removeCookie was removed in js-cookie version 2, I wouldn't rely on that.\n. Btw, I recommend posting questions about usage in StackOverflow first. There is a higher probability to get a satisfactory answer there since it has more Google visibility.\n. See https://github.com/carhartl/jquery-cookie/issues/379#issuecomment-159687492\n. @mborah The Line Feed (LF) is a control character (CTL) and therefore it is NOT allowed in the cookie value, as per RFC 6265\n. I have no idea which browsers it breaks and how it breaks. When I was building the encoding tests, Safari and IE seemed to be the worst for invalid chars. Sometimes in Safari it ignored the value, and sometimes it ignored everything after the offending char or even prevented the whole cookie to be set.\nSince the behavior is undefined, I like to assume that if you do something that goes against the RFC the browser will turn off your computer and it will never turn on again ;D\n. Or you can post this issue in the new JavaScript Cookie project. I just ignored the control characters encode handling because I never thought someone would create a cookie with that. Supporting it costs unnecessary bytes to the codebase, but LF seems reasonable.\n. I don't understand exactly what is the problem. 1.4.1 is the latest release for jquery.cookie. js-cookie started from https://github.com/js-cookie/js-cookie/commit/4527b3725ce7b61066e6aa12bbe8d20c0371a1d7 up to the version 1.5.0, which contains everything this repo has, except the notices.\n- The problem with hard reset is that it will break forks.\n- Releasing a new version doesn't seems to make sense because everything here is contained in the version 1.5.0 anyway.\nBtw, the master branch should not be used in production because it is, by default, an unstable branch. The only version that should be considered here is the ones that were released up to 1.4.1.\n. > The reason is because the master branch is not actually \"1.4.1\"\nNow I got it, it can be confusing for people that copies the code directly from the source without checking the releases page. Is that it?\n. I am convinced that changing the version number to 1.4.2-unreleased or 1.4.2-frozen for all relevant files in master (without publishing it on npm) is a reasonable request to prevent further confusion.\n@carhartl what do you think?\n. @jvanasco sorry to take too long, here is the Pull Request, care to take a look?\n. > I still haven't unterstood up to this day what the problem is.\nBasically if he goes to the Releases page it says:\n\n39 commits to master since this release\n\nThis will make one to assume that there were additional important fixes on this repository after 1.4.1 which weren't released with 1.4.1. We know it is not the case and all commits went to the new repo, but those ending up here don't know that. Since most people jump straight to the version in the source file or json metadata to check the actual version, 1.4.2-unreleased provides a clear hint that the commits belong to a non released version 1.4.2.\nOther solution is to create an actual new 1.4.2 release and publish on npm so that master is not too far away from the latest release.\n@jvanasco please correct me if I am wrong.\n. @carhartl @jvanasco I will leave #388 open, if there is no feedback for a few days I will just merge it to close this issue, then we can monitor if anybody else will have this kind of problem in the future.\nDoes that makes sense?\n. It seems this s going nowhere, as from this comment.\nI have added the following to the version 1.4.1 in the releases page, I hope this at least clarifies for those who don't read the README and go straight to the releases page:\n\nNote:\nThis is the last version on this repository. To see all the versions, check the new repository.\nFor more information, see this comment.\n. See https://github.com/carhartl/jquery-cookie/issues/152#issuecomment-12953584\n. @suvonkar \n\nHere are the internals from 1.5.1. It still contains the boolean return for backwards compatibility, but we do not encourage relying on it.\n. What does exactly \"not work\" means? The cookie is not created or when you close and open the window the cookie is still there?\n. Check this answer in stackoverflow and make sure \"Continue where you left off\" setting is disabled in Google Chrome.\n. Hi @AviOmicron, there is not enough information to provide a concrete response.\nWe recommend that you open support related issues on Stackoverflow under the tag js-cookie or the tag jquery-cookie. It is much more likely that you will receive a fast satisfactory response there. Also, StackOverflow has better SEO and therefore the answers to your questions will be able to help future googlers better.\nI would like to suggest that before asking the questions you look into the http://sscce.org, there you can see a way to reduce your code in order to track the root cause of the problem.\nI hope it helps.\n. Closing due to the lack of feedback from the OP.\n. @estevaosa Can you please provide a simple example that reproduces the issue? Otherwise this seems to be a usage problem and therefore you have a best chance of getting a response if you ask on StackOverflow.\nI suggest either using js-cookie v1.5.1 if you want $.cookie or $.removeCookie APIs, because since 2.0.0 those APIs were changes to Cookies.set, Cookies.get and Cookies.remove.\n. Glad you solved it, closing then :+1: \n. Can't tell what is going on unless there is some small piece of code I can look into. Have you tried a newer version to see if it works?\n. > I agree one should not pass parameters that are not documented, but I still\n\nthink this line in the docs is ambiguous, maybe you could state clearly\nthat .get() does never take more than 1 argument?\n\nPull Request is welcome, you are the only person right now to be able to fix this, because I am biased by being one of the authors of the docs. Please, send a Pull Request changing the docs in a way that you believe will make it clear and remove the ambiguity :)\nIn the meantime, yeah, try Chrome without any plugins using incognito, maybe it's some extension that is messing up with the page? The missing cookie is really something that never happened, and in order to debug it I need some piece of code, preferentially not a whole page but some snippet in http://jsbin.com or http://jsfiddle.net.\n. By the way, shouldn't be better create the issue in the new repo? The README states clearly that:\n\nNew issues should be opened at https://github.com/js-cookie/js-cookie/issues\n. Closing due to the lack of feedback from the OP.\n. The CHANGELOG.md is not viewed by a considerable amount of devs according to the Traffic Page. #380 complained specifically about the *.json files, so there is no evidence that implementing that elsewhere will fix the problem.\n\nWe can treat this as an edge case and wait to see if somebody else will report the same problem, then we will know this is relevant.\n@carhartl What do you think?\n. Closing as form https://github.com/carhartl/jquery-cookie/issues/380#issuecomment-211014830\n. The amount of issues opened is not too big, it's not like we can't manage it. Sometimes there are issues like #380 that could help us to determine if the way we are reporting the new repository is efficient or not. Other issues can just be closed, such as #387.\nAlso, there are cross-links between both repositories. So closing the issues page might break the links?\nI still think the issues page is relevant because this repository still receives a considerable amount of Traffic and feedback is always welcome.\n. @carhartl I have created #392, so that anyone coming to the issues page without reading the README will see that before opening a new issue.\nIt doesn't happen often, we had just one issue created here this month 1 hour ago: #391. With this last strategy I guess there will be fewer, or hopefully none.\nCan I close this?\n. Hi, this repository is not being maintained anymore, please see https://github.com/js-cookie/js-cookie/releases/tag/v1.5.1\n. No objections, as long as the old issues and Pull Requests are still linkable from the js-cookie repo :). It wasn't issue on our side. It seems to have been fixed though, see https://github.com/js-cookie/js-cookie/issues/186#issuecomment-214421045\n. Seems to have been fixed, see https://github.com/js-cookie/js-cookie/issues/186#issuecomment-214421045\n. Hi, this repository is not being maintained, please take a look here.\n. I have updated the post there to address support questions.\n. This repository is frozen and not accepting new change requests. Please refer to:\n- https://github.com/js-cookie/js-cookie\n- The README.\nCan we open this PR in the new repo so that we can discuss there? Thanks!\n. X-ref: https://github.com/carhartl/jquery-cookie/issues/392\n. Please, look at https://github.com/carhartl/jquery-cookie/issues/392.\n. Have you tried to use https://github.com/js-cookie/js-cookie? This repo is not being maintained anymore. See https://github.com/carhartl/jquery-cookie/issues/392.. > But some people are still referencing this repository. \nWhere's this project being referenced?\nDo we need to create a new version for this change to take effect?. @reiz Yeah, it's frozen. We're not releasing any new version, just updating master with the relevant messages.\nI guess in this case it makes sense to fix the problem in VersionEye itself, or maybe change the code to lookup for ./MIT-LICENSE.txt as a fallback if the license property is not present in the package.json.\nThe new repo has the license property in the package.json, though.. @reiz I see, unfortunately, we can't create a new version because then it would be out of sync with js-cookie. js-cookie contains the versions up to 1.4.1 and 1.5.0, 1.5.1 and onwards, if we create a new one then js-cookie won't have it.\nAny suggestion on how to make this better from an automated license perspective given these constraints will be much appreciated.. Hi, this repository is not being maintained, please take a look here.. @sunq0001\nAlso, this repository is not being maintained anymore, refer to https://github.com/carhartl/jquery-cookie/issues/392.\nFor additional context on the \"http only\" discussion. Please, refer to https://github.com/carhartl/jquery-cookie/issues/122.. I am used to declare private members with underscore when I am not assigning to a variable just for readability\n. I store \"true\" or \"false\", then this is better than check for string (although it may be more logic to store 0 or 1 and use +val, need to change that rly)\n. Ops... The guy is using spaces instead of tabs, in my eclipse UI it shows no difference :D\n. I was ignoring potential invalid stuff, looks like a wrong move....\n. I'll fix that, and test on jshint also (forgot that)\n. As jquery code style guidelines says \"===\" should be used in favor of \"==\" so I am used to make any comparison in JS with \"===\" whenever possible, I just forgot to keep the pattern, I'll fix that also.\n(That could also be a code I wrote when working on the return null idea)\n. I think it is a good idea.\n. @carhartl Actually, if I change that and the user didn't pass an option it would fall to $.cookie(key, undefined) eventually deleting the cookie and not allowing the check.\nI think the only cookie removal should be value === null cause then we would be able to create a proper signature by checking:\njavascript\nif( value !== undefined ) {\n  //setting cookie\n} else {\n  //getting cookie\n}\nAnyway, we can't pass undefined to the argument without changing the $.cookie behavior\nI could simplify, perhaps:\njavascript\n$.cookie( key, options || {} );\nThoughts...?\n. I think $.isPlainObject would fit better here...\n. I believe performance is not an issue here since the check is not in a loop.\nAnd typeof a==='object' has one more char than $.isPlainObject(a) oO\n. Since the issue here is the batch cookie operation I think this return change should be threated in another PR.\nThe \u00b4$.cookie(name, value)\u00b4 returns the string representing the cookie and it is used in a few tests, I don't think that is a good idea either, the plugin should return undefined if there is no documented feature specifying what it should return...\n. Thats is why I encourage to ALWAYS use strictEqual when comparing, I never used equal outside jquery cookie. See this discussion in qunit: https://github.com/jquery/qunit/issues/324\nSince jquery core style guidelines also encourages the use of === and equal compares using == equal is much more error prone than strictEqual.\nRemove all occurences and adopt as a convention? (In a new PR, of course).\n. @carhartl \nReport \"questions\" implies help on regular usage outside the plugin scope, sometimes related to issues on the environment it is being used. What if we specify clearly that issues should be strictly related to the plugin (or maybe imply that somehow)?\n. @carhartl \nMake sure the build runs successfully \"in every supported browser\"?\nYou mentioned browser support at https://github.com/carhartl/jquery-cookie/issues/192. But which browser the plugin support anyway? AFAIK it has never been documented.\n. What about \"Report issues or feature requests on...\". Dropping the \"questions\" kind of removes the implication of non related questions.\nDoes it need something like:\n- For general usage, please refer to stackoverflow...\n...or anything like that?\n. Being a jquery plugin not necessarily means it works for every browser jquery supports.\nBesides, the only feature used from jquery core itself is $.extend(). The namespace is the only relevant benefit.\nSince the plugin depends a lot on the browser environment to work properly I don't see any benefit on documenting just the jQuery versions.\nConsidering a lot of issues opened because of the complexity of native cookies handling, what about a section for Frequently Asked Questions?\nIt could be useful as a reference for the most common problems to researchers and serve as a reminder to ourselves, it could suffice:\n- Path rules for all cookie operations\n- IE semicolon bug\n- \"file://\" protocol security issues on chrome\n- Maybe the \"Github is not a CDN\" thing too?\n\nRegarding the last question. Watching jQuery development it seems they still use testswarm.\n. > ...maybe adding an extra \"FAQ\" section within the README helps to catch some more attention...\nThat's the intention. The information in the README seems to be related only to the API (with certain details in the middle).\nA centralized reference would allow linking as an answer and remove some unnecessary information from the main page.\nIt has deviated too much from the subject, I created an issue regarding this https://github.com/carhartl/jquery-cookie/issues/194\n. About the \"Make sure the build runs successfully\" sentence, it seems too soon to mention cross-browser testing anyway.\n. At least such discussion avoids cluttering the git base in the future.\nI'll commit ASAP.\n. I am never tired, discuss is pretty easy, fast and self teaching ;)\n. This test actually asserts the suppression of the exception when a valid JSON is encountered.\nI recommend creating a new test for the given purpose of the pull.\nSince this test fails anyway I recommend setting a different invalid JSON such as document.cookie = 'invalidJSON' and do not use the $.cookie API.\n. It should be single quoted for consistency, the single quote in the middle can be escaped.\n. As reference https://github.com/carhartl/jquery-cookie/commit/cefb0c399960553edae76f91f9fc5470a1c3bc04\n. Ops! I though @carhartl used quotes consistently, my mistake -.-\n. It seems that using the regular API this is going to be created as c=v instead of c=\"v\" which AFAIK is the value we should test against. Are you sure this test is deterministic?\n. Looks like the assertion has been misspelled. It should assert a successful reading, shouldn't it?\n. Looks like the github diff confused me so I commented in the wrong code, ignore that.\n. You could add \"require\" to the \".jshintrc\" file, for the build to be successful.\n. If this do not work in node this comment should reflect that, or this works properly in node? It is important to specify the support correctly.\n. Isn't because a new line was added?\n. This is moot anyway, see https://github.com/bower/spec/commit/a325da3 and https://github.com/carhartl/jquery-cookie/pull/365\n. ",
    "thujone": "weird default path messed me up\n. ",
    "cwhatley": "You are right about it being deprecated. Probably encodeURI() is what is really needed instead of encodeURIComponent().\nHere's the problem in a nutshell: Your code works only if the cookie is being created and consumed via your plugin. If you create a cookie with your plugin and then try to read it from a php or java app, that app has to know that the cookie is encoded with encodeURIComponent() and should be urldecoded() on the backend.\nThe main place this causes a problem is when you put a URL or URI in a cookie. Let's say I want to put \"/foo\" in a cookie. EncodeURIComponent() gives me the unusable pathname \"%2Ffoo\" while encodeURI() gives me \"/foo\" which is directly consumable by any backend system or anyone else using the cookie without your plugin.\nThe advantage of encode() here is actually that if you have a semicolon in your cookie value, it gets escaped out. encodeURI() doesn't escape the semicolon, so you will have to add some code to handle that on top of the use of encodeURI().\nRaw is OK, but I'm assuming maybe you added that because people had issues with the encoding. If you use encodeURI(), then you probably don't need it anymore.\n. ",
    "wheresrhys": "I'm curious as to why you want that behaviour? Struggling to find an answer elsewhere http://stackoverflow.com/questions/5743119/why-use-encodeuricomponent-when-writing-json-to-a-cookie\n. ",
    "Ahnfelt": "Just if anybody else finds this discussion while searching for an answer like I did:\nCookies are passed to the server as a HTTP header:\nCookie: name1=value1; name2=value2\nObviously, value1 is not allowed to contain a ;\nThere are also other problematic characters.\nThe fact is that cookies are fundamentally hampered by the lack of encoding. You have to choose an encoding and use it both in the browser and on the server. \nMDN recommends encodeURIComponent: https://developer.mozilla.org/en-US/docs/Web/API/document.cookie\n. ",
    "blainsmith": "Yes, you are right. I was just banging my head against the keyboard because match() function I was using was returning a String object.\n. Awesome, thanks. Nice work on the plugin.\n. ",
    "debajyoti": "Actually i am running it in local system, not in server.\nAnyhow i found some discussion regarding this which says - Chrome doesn't support cookies for local files unless you start it with the --enable-file-cookies flag.\nYou can read a discussion about it at http://code.google.com/p/chromium/issues/detail?id=535.\n. ",
    "pimschaaf": "Welcome, credits go to Chris Hope :)\n. ",
    "jodytate": "thanks for the quick response. i'll forward to it. \n. \"look forward\" to it, i mean\n. ",
    "sickhippie": "When I search for jQuery Cookie, plugins.jquery is the first result.  Whether it's still in active use or not (although I expect it is to some degree), that's where people are going to land first.  Even if you just added a link to this git, it would be a step up from where things are now, and might get a few more people working with the code (and github as well).\n. ",
    "StephenNeate": "The quick and easy way around that issue is to rename your JS file when you call it.  Try calling the JS file jquery.cokie.js (with one 0) as its the inclusion of the file name that is triggering mod_security.  \nOr perhaps include the script of jquery.cookie.js inside one of your other scripts that is called for your page/s.\nThat would be far better than tweaking mod_security, hope that fixes your issue.\n. ",
    "flop25": "thx for the tip\nI'll try and keep you informed\n. thx it's working\n. ",
    "chandutekworks": "hi guyz clearing cookie is not working ....plz help \ni am using this code\nvar date=new Date(2000,12,10);\n$.cookie(\"username\", null, { expires: date });\n. thanq man its working fine ....thank u for your support\n. i have another issue.....\ni used \n          $('#somelement').load('menu.html');\nmenu.html :\n\nhi this is chandu \n \n\n this line for including 'menu.html' file in my another html file...in which way i have add data  dynamically to one element which is present in  'menu.html' in present html file..\ni used \n   $(''#heading').html('goog bye');\n\nthis but its not working...\nplease help me\n.",
    "BrainCrumbz": "Please everyone (us included ;) ), when deleting a cookie DO remember to pass in the same path & domain options used upon creation. \nOtherwise, as soon as you start poking with cookies from different pages/subfolders, you'll start experiencing un-killable cookies everywhere ... They're coming outta the goddamn walls!  :-P\n. ",
    "huglester": "I see. thanks carhartl! \nI've got your point, now I got the cookies to work.. but here is one more question:\nI do: $.cookie(\"mailbox_show_folders\", 0, { expires:7, path: '/', domain: \"vibe.test.eu\" });\nbut in the 'cookies' I see the domain \".vibe.test.eu\" - take a look at the dot at the beginning... is it okay to have it? The system works, just wondering if this 'dot' isn't smth bad\nThank you\n. Thank you, it works!\n. @FagnerMartinsBrack it is already new home for my jquery cookie thing:))) starting with npm packages and it's stuff!\n. ",
    "glensc": "so far, i created myself a wrapper to workaround bad decode:\nfunction getCookie(c) {\n        var s = $.cookie(c, {raw: true});\n        return s ? decodeURIComponent(s.replace(/\\+/g, ' ')) : s;\n   }\n. also, if you decide to accept this fix, plz increase version and publish it in http://plugins.jquery.com/project/Cookie as well )\n. PING!?\n. @carhartl what is problem with this? why not accept and make new release for public to receive the fix?\n. i'm incapable of writing tests as i don't understand the testsuite, nor able to run it (no docs how to do so), but the samples i included in bugreport, are pretty stightforward for you to write yourself :)\n. hey? could you finish this? test case in html page form is in first comment\n. seems you're not interested including fix for this to your product?\nhere's blind code for test, i you have to correct it yourself based on original pull request details if it is wrong\n```\n test('issue/13', 1, function () {\n   document.cookie = 'c=kala%20maja%2B';\n   equals($.cookie('c'), 'kala maja+', 'plus in value');\n});\ntest('issue/13', 1, function () {\n   document.cookie = 'c=kala+m%C3%A4gi%2B';\n   equals($.cookie('c'), 'kala m\u00e4gi+', 'should not decode plus to space');\n});\n```\n. php is not doing it wrong. it's valid by cookie spec, why should i hack in the wrong end?\nbesides, it is not always possible to replace all occurrences of $_COOKIE with setrawcookie calls\n. ping?!\n. the + encoding for space is valid encoding for urls, as used for cookie values too, think of forms with input type select which submit spaces as '+'; i don't see why you want to make yet another plugin for 30 line plugin.\nhttp://www.google.ee/search?q=i%20like%20spaces\nhttp://www.google.ee/search?q=i+like+spaces\nhttp://www.w3schools.com/tags/ref_urlencode.asp\nou, and this issue is about decoding data to javascript, not vice-versa, this is pretty stright forward comparing to possible encoding mechanisms.\nshould i recall what the original problem was:\n- js->js => fine\n- php -> js => space encoded as + does not get decoded, it shows +\n- js->php => fine\nas for the having own decoder, you can use .raw option, as noted in https://github.com/carhartl/jquery-cookie/issues/13#issuecomment-1122831\n. huu, that's a long issue!\ndid you remember this post:\nhttps://github.com/carhartl/jquery-cookie/issues/13#issuecomment-1122916\ni see you pushed 2e12796f574f0d842aa1025d38b04111852ae074 can you update that above site as well?\n. i had a feeling that one can bind better via $.fn.cookie, but seems i was mistaken and i can't find references doing otherwise\n. ",
    "holic": "Just ran into this issue myself. You can fix it on PHP's end with:\n<?php \nsetrawcookie('cookie_name', rawurlencode($value), time()+60*60*24*365); \n?>\n. ",
    "louisremi": "What's wrong with the solution proposed by holic to fix the problem on the server side?\n. ",
    "matthijskooijman": "\nFor one, I can't simply replace any '+' with ' ' when decoding, since one might want that actual value in the cookie.\n\nActually, I think that doesn't usually apply: When you use a \"+\" in a cookie value, it will be encoded into \"%2B\", so as long as you first replace pluses with spaces, and then do the rest of the urldecoding, you should be fine.\nOf course, I can't guarantee that all server-side implementations actually do urlencoding on the + (they might be encoding just , and % to prevent clashes with the commas separating cookies in the Set-Cookie header). I do think one can assume that most of them will do that, so decoding the plus should be a sane default.\nAlso, though I agree that you can't support all the encodings server-side software could be using, PHP is so commonly used, it might warrant some specific option (and, as argued above, perhaps have that option enabled by default). So perhaps a decode_plus option to set_cookie might make sense?\nIn any case, a \"defaults\" would then still be needed, I guess, as well as a decode function for maximum flexibility.\n. Thanks!\n. ",
    "jpmcgrath": "This is also an issue with Rails. Rails encodes spaces as plus signs ('+') as well.\nI would suggest that if both PHP and Rails are encoding spaces as +, then it is a pretty standard way to operate.\n. ",
    "cahnory": "The issue is server side (\"for historical reasons, spaces are encoded as plus (+) signs\"). So to get it wright on PHP side you could simply do :\nsetrawcookie('name', rawurlencode($var));\nedit: sorry, didn't see holic contrib.\n. ",
    "cdeszaq": "I ran across this article which links to an \"improved version\" of the plugin that adds multiple cookie functionality. http://jquery-howto.blogspot.com/2010/09/jquery-cookies-getsetdelete-plugin.html#jQuery-Cookie-plugin\n. ",
    "sunjay": "My issue deals with more of getting all the cookie values. Say for example if the user didn't know which cookies he or she wanted, or if he or she just wanted to inspect all of them.\n. Whoops! Sorry, I accidentally closed the issue.\n. Here is a real example:\nYou are writing a script which deals with saving page settings for the user. Instead of writing a million lines of code to find each setting individually, you decide to save each setting with a certain prefix:\n```\nvar PREFIX = \"p_setting_\";\n// example: save each setting individually (where the values would be found through the user's input or something\n$.cookie(PREFIX+\"background-color\", \"blue\");\n$.cookie(PREFIX+\"background-image\", \"someimage.png\");\n$.cookie(PREFIX+\"font-family\", \"Verdana\");\n// etc.\n// if $.cookie() supported returning an object with all the names and values, it would be easy to load the settings back into the page.\n$.each($.cookie(), function(setting, value) {\n    if (setting.substr(0, PREFIX.length) === PREFIX) {\n        $('body').css(setting.substr(PREFIX.length), value);\n    }\n});\n// Where as the alternative:\n$('body').css(\"background-color\", $.cookie(PREFIX+\"background-color\"));\n$('body').css(\"background-image\", $.cookie(PREFIX+\"background-image\"));\n$('body').css(\"font-family\", $.cookie(PREFIX+\"font-family\"));\n// etc.\n// This example may not look very hard, but as the number of settings get larger, this method would get very tedious. \n```\nThis use case demonstrates the power of adding the functionality of having either an object or a multidimensional array returned as the result of an empty $.cookie() call. It would allow for quick iteration of all values and in cases like this, more optimized code.\n. I don't know why it keeps closing the issue. Sorry about that.\n. ",
    "oomlaut": "@sunjay03 \"Say for example if the user didn't know which cookies he or she wanted, or if he or she just wanted to inspect all of them.\"\nIn Chrome, for example, in the Resources tab of the inspection panel there is an expandable heading for Cookies, where you can view all the cookie data associated with the current domain. Does this address the issue you mention?\n. ",
    "pboling": "@sunjay03: there are two forks which do this.  benz303 did the work, and I merged his $.cookie() work in with another bug fix from sidereel.  If you want to checkout my fork: https://github.com/pboling/jquery-cookie\n. Perhaps a better way to say it is, 'a few features were added which are utilized by the cacheable-flash gem, and one bug was fixed, in the expiry date'.\n. This is not dissimilar from the other pull request from @benz303.  It looks like the differences are either already part of your master or also included in that other pull request.  I am closing this one.\n. Just ran into this myself.  I have some code that wants to use config.raw = true and config.json = true but also other code that was happily using the string encoding and decoding of the older versions.  Now my strings are harder to use: \"\\\"hello\\\"\".\n. Excellent!\n. Now that it is registering as an AMD module you likely need to add it as a dependency to your other scripts where it is used, if you are using RequireJS.\n. Are you loading it from a CDN?  If so, and if it works when not compiled, then it might be a problem with the way r.js compiled external library dependencies.  It has broken several times recently. Also if you are using almond.js to compile, then you cannot load it as an external dependency.\n. I wish I could be of more help then.  I may attempt to use this plugin again soon, but am not currently.\n. I was a bit lost on why this matters, but this helped:\n- http://www.bennadel.com/blog/2287-Using-jQuery-As-A-Named-Module-In-RequireJS.htm\n. +1 for semver versioning syntax.\n. FYI: github raw source links to minified js should NEVER be used by applications.  They will be interpreted as text by older versions of IE because it won't set the correct MIME type.  If the minified version were kept here it would tempt people to link to it.  In fact that seems to be OP's intent.\nhttp://stackoverflow.com/questions/5502540/should-github-be-used-as-a-cdn-for-javascript-libraries\nand from jsfiddle:\nhttps://twitter.com/jsfiddle/status/255957925263187969\nhttps://github.com/jsfiddle/jsfiddle-docs-alpha/issues/95\n. @carhartl: Just came across this which you may find useful here: https://github.com/remy/mit-license\n. > Adding the information to the comment isn't good enough?\nCorrect.  It needs to be a LICENSE file at the root of the repository for many legal teams at large corporations. The legal software review boards, (not making this up) will not be reading your readme, or your source code.  The security software review board will look at the source, but they are a totally different team, and software usage can be disallowed at any stage.  They are looking for the LICENSE file.\n. @aobo711 Zurb Foundation has forked jQuery.cookie to work with Zepto.  You may want to look at what they have done, and or use that.  Foundation 4 is very cool.\n. Plugins that are built to declare themselves as AMD modules should not need the shim.\nThe shim is for plugins that do not implement the AMD pattern.\nThis library attempts to implement the AMD pattern.\nIf the shim is needed we have done something wrong in that implementation.\nMy 2c.\n. @davyboyhayes Just one thing though, if you are using an older version of this plugin then you may have needed the shim.  A lot of older tutorials show it shim'd because this plugin is only recently added the AMD support.  So if you are on an older version, then you may need the shim.  If you are up-to-date you should not.\n. You are correct, there is no functional difference.  It would be clearer if t were removed altogether.  I had misremembered the purpose of the change (which I had pulled from another fork).\njavascript\n                var days = options.expires;\n                options.expires.setDate(new Date().getDate() + days);\n. Agreed. :)\n. ",
    "Krinkle": "Another use case is clearing of cookies. One may want to have some kind of killer function that deletes all cookies (or at least all with a certain prefix)\n. And most web applications do (or should have) some automated build mechanism already to mass-minify all your files for delivery in the production version of the site.\n. That likely means either your incremental script is broken or your browser doesn't support cookies. Please include the relevant code.\nExample (works fine): http://jsbin.com/ejefit\n. The consistency with jQuery is regarding returning undefined if the item looked for is.. undefined.\n. @FagnerMartinsBrack It's documented in so far that there are signatures foo() (getter) and foo(value) (setter). Passing undefined is a value of sorts, and as such should trigger the setter behaviour.\nThe main pitfall for jQuery there is the fact that setters are chainable. So you'd end up in a situation where $('#something').foo('x', val).bar('y', other) suddenly started throwing TypeError: bar is not a function when val is undefined, which made .foo() act like a getter.\n. Those are most likely just false positives because you're running the tests from a url with existing cookies set not by the test suite (in your case it seems you ran some other program from disk earlier that set Google Analytics' __utm cookies).\nThe tests could do a better job at mocking document.cookie to hide these, however this doesn't indicate a bug of any kind. Please clear the cookies (or use a private browsing window) and verify the tests pass.\n. Unfortunately the browsers themselves do not expose this information. The HTML specification has no standard interface for the JavaScript environment to access this.\nSo the jQuery Cookie plugin has no way to get this.\nTypically, if you need this information, I first recommend reconsidering whether you really need this. In my experience it tends to be a sign of misconceptions or suboptimal application design. But if you do need it, you'll have to store it manually somewhere.\nEither in LocalStorage (recommended) or in another cookie (e.g. mykey-expiry). Or, if you need it server-side, use fewer cookies (e.g. only one for the session ID) and store all your data (including the expiry date) in the session data. Then, whenever the session cookie is set, store the result of time + expiry in the session data for your own reference.\nNote that even then it isn't fully reliable as a browser may choose to remove cookies earlier (the spec does not require cookies be stored as long; e.g. if space runs out). And of course users may reset their cookies at any time.\nOne of the few use cases I find for this is automatically renewing a user login session so that they don't have to re-login every 30 days. But without having to send cookie headers on every request (which slows things down). E.g. if you detect on the server that the expiry is within 50 days, renew the session id cookie for 60 days.\n. @davidhbigelow If it's for debugging, the browsers certainly do know their cookies' expiry time. Chrome, for example, by default comes with Dev Tools which has a Resources panel that provides cookie information:\n\n. Without this, pulls like #307 and #313 get a failure from Travis. You can see on https://github.com/carhartl/jquery-cookie/pulls that this is the only pull request currently passing:\n\n. Yes. grunt === grunt default.\n. I've updated the commit to only run uglifyjs and compare_size when developing locally and running $\u00a0grunt (default task, or explicit $\u00a0grunt\u00a0dev). Regular testing via npm or Travis pull requests no longer runs those tasks.\nIt felt better to keep the logic for Travis out of Gruntfile though, in the .travis.yml file. This way, if a user sets up environment variables for Sauce Labs (as many people have), they can easily run the browser tests themselves as part of $\u00a0grunt\u00a0ci. And it also allows you to check out commits locally and simply re-use $\u00a0grunt\u00a0ci to run locally before pushing to master.\n. Bump.\n. @cvrebert Yeah, makes sense. More semantically correct. Fixed!\n. :+1: LGTM.\nFollows-up 72671796a2. I remember editing package.json but must've forgotten to commit it. Thanks!\n. You misunderstood the error from Travis (and presumably didn't test the code). !=== does not exist, there is no such operator in the programming language.\n== and != are weak equality operators. === and !== are the strict equality operators. Our code quality tool (JSHint) is configured to disallow use of weak equality operators (due to type coercion), and was merely telling you to use !== instead of !=. Not !=== (which doesn't exist). You probably thought we were crazy when you felt the need to do a separate if. I'm happy to inform you, we're not crazy :smile:\n. In javascript, parameters are quite flexible. There is no need to declare them in order to pass them as arguments in a custom version of the function (or even at all). When JSHint complained about unused parameters in the default function, the solution is to remove the parameter, not to insert a confusing return statement that uses the variable.\ndiff\n- onSet: function( result ) {}\n+ onSet: function() {}\n. @MarQuisKnox I'd recommend going back to that first commit and only updating it to:\n- Use === 'function' in place of == 'function'.\n- Remove the obsolete !== 'undefined' check (because they're mutually exclusive).\n- Put var result; on line 56 right above // Write.\nThe warning for result was only for setCookie, not removeCookie. In setCookie it's due to scope confusion. Having two variable declarations in one function for the same identifier (eventhough the two statements don't run both) is confusing because javascript doesn't have block scope. The engine unconditionally hoists var out of the conditional block to the top of the function. It thus defined the variable twice. It's confusing to \"create\" variables like that in a conditional because, while you can write them there (it's valid syntax), they'll be moved at execution time.\n. Why?\n. @carhartl I'd say it is not common practice for the version to be exposed as a public property among jQuery projects and community plugins. jQuery Core and jQuery UI do do this as being major libraries where users may benefit from being able to condition code based on versions where feature detect may not be feasible. Though even there I'd say it's discouraged from actually being used and just there for legacy reasons.\nFor other plugins I'd strongly advise against exposing it as a public property. I can only think of bad use cases for it (e.g. hacky code using version sniffing, or unrealistic/ill-informed corporate back-end infrastructure). Including it in the distribution source code makes perfect sense however, but I'd do that as a /*!-style comment atop the file, not through a public property.\n@jpalomar Can you elaborate a bit on why a \"massive back-end infrastructure\" would benefit from an arbitrary property being added to the source code? It's not like it's in a standard location or path, so you'd have to declare the identifier somewhere specifically for jquery-cookie. And even then it sounds rather shady and questionable as to its usefulness (will it execute the code somewhere and extract the version? or perhaps some kind of static pattern matching?). Besides, you'd still a way to specify the version manually as there'll be plenty of plugins that won't expose a version property.\nIf you need some unique or incrementing version string to use for cache management (e.g. invalidate minification cache or dependency versions) I'd use something like the Math.max() of the mtime of the file(s) in your repo; or the md5/sha1 hash of the file(s) contents. This is, for example, what the ResourceLoader back-end framework does (as used in MediaWiki by Wikipedia).\n. As far as I know, contrary to npm and their package.json, the bower.json is not used by bower client-side.\nIt is not a documented feature from that perspective and should not be relied upon by any tools for an installed package. You could request Bower upstream to force-include it (like npm does), or find another way for your tool (e.g. fetch manually).\nIndividual packages like jquery-cookie shouldn't have to care about including it.\n. That looks rather suspicious. How does it know to look in the src directory, is that standardised exclusively? Sounds like something is incorrectly interpreting the value if src/jquery.cookie.js doesn't work.\n. :+1:\nAt this point it only uses $.extend(). If we substitute the used subset of that method, it'd be a standalone library.\nIt already supports UMD etc. It'd be a small step to do something like export = { get: .., set: .., remove: .. }.\nE.g. use like:\n``` js\nvar Cookie = require( 'cookie' );\nCookie.set( .., .. );\nCookie.get( .. );\nCookie.remove( .. );\n```\nDefaulting to exporting Cookie as a global, with aliased methods attached to jQuery (if available) for back-compat.\n. @FagnerMartinsBrack I'm aware of that convention, but disagree this would violate that convention. It just means they're static methods of a class that is not publicly instantiable. The problem with cookie is imho that it's too generic and easily conflicting with random's people's legacy code, or poorly written user scripts / browser extensions that might have a global var cookie;.\n. Shouldn't the application code be responsible for being consistent in how it creates, updates and removes cookies with the same options?\n. This indention looks off.\n. Maybe put this outside the autoCookie method so that it is not re-created on every call but instead shared amongst calls. Also, what's the dangling _ doing? That has no purpose in javascript.\n. Seriously? eval()?\n. .prop( \"checked\", val === \"true\" ); works as well (returns boolean true for \"true\" and boolean false for anything else). Potential invalid values are also ignored that way.\n. Why return key here?\n. I know what the value of key is, but I disagree about it being \"expected and intuitive\". Quite the contrary. More like unexpected, undocumented, inconsistent and encouraging bad coding patterns.\n``` js\n$.cookie('a', 'aaa', options); // returns undefined\n$.cookie({a: 'aaa', b: 'bbb', options); // returns pairs object by reference\n```\nAside from it making the return value inconsistent based on invocation signature, it is somewhat counter-intuitive. Why would it return the pairs object? I'd expect maybe a boolean return on whether the action was successful, or maybe the expiration date of the set cookies, or perhaps the newly formed cookie-syntax string. But not the pairs object.\nAll that just to save a literal assignment?\n``` js\nvar values = $.cookie({a: 'aaa', b: 'bbb'}, options);\n// Instead of:\nvar values = {a: 'aaa', b: 'bbb'};\n$.cookie(values, options);\n``\n. Avoid trailing line whitespace (there is a space after,).\n. Unrelated whitespace change.\n. Unrelated whitespace change.\n. These are not safe ways of identifying arrays or objects (neither works with foreign objects, and the Object case doesn't account for non-plain objects, which JSON.stringify does). I'd recommend usingvalue !== null && typeof value === 'object'which covers plain objects, arrays and any other type of object.\n. On second thought, you may want to take the approach of data serialisation as is done for memcached/redis systems. Which is to usestringify()` for all values that are not integer or boolean (even plain strings). This due to the inherent ambiguity with free-form strings once stored.\n. Hm..\njs\nif( typeof options.onSet === 'undefined' ) {\n} else {\n  if( typeof options.onSet === 'function' ) {\n    ..\n  }\n}\nThis can just be reduced to:\njs\nif( typeof options.onSet === 'function' ) {\n  ..\n}\nOr even:\njs\nif( options.onSet ) {\n  ..\n}\n. Why a return? The function's return value is ignored.\n. Since the code checks that it is present before it calls it, we don't need a dummy function as default. That will only impose extra overhead for all existing uses of $.cookie by calling a useless function. Since the default is a no-op, users will only pass a function if they want to do something special (not to disable the option, because it doesn't do anything by default). So either remove the if check and keep the default, or remove the default and keep the if check. I'd recommend the latter.\n. This is local to the remove method, so a simple name var result will suffice.\n. ",
    "johan": "This batch read, and the corresponding batch write:\n$.cookie({ \"object\": \"with\", \"cookies\": \"to\", \"set\": \"or\", \"delete\": null });\n...are implemented in pull request https://github.com/carhartl/jquery-cookie/pull/123\n. This is a good idea. What Bower is and does, for reference: https://github.com/twitter/bower#readme\n. If the implementation of $.cookie() doesn't get included in the native maintainer's jQuery.cookie (or until pull request https://github.com/carhartl/jquery-cookie/pull/123 lands), you can always use a fork that implements it: https://github.com/johan/jquery-cookie/\n. Unless there's a supported, intuitive use case for passing a null key, that just makes the code longer and slower.\n. If you followed the flow of the code, key here is the object of key: value pairs you just set, so you can use it just as any other assignment in javascript, e g: a = b = { x: 1, y: 2 }; sets both a and b to the given object. If you insert a $.cookie call anywhere in that assignment chain, this makes it still work, which is expected, intuitive and useful behaviour.\n. It is documented higher up in the pull request. You are all welcome to make your own pull requests based on this one changing as much as you like to whatever you personally deem more useful or intuitive. Personally, my opinion stands as is, and also, I don't plan to have computerized net access for most of the month of December anyway, so little will change here.\nThat said, I don't believe the repository maintainer has the time or interest in accepting pull requests; this and other good patches have been sitting untouched rather long.\n(Yes. The whole pull request is to save myself and others writing this assignment loop and storing away the key:val pairs object outside of $.cookie.)\n. ",
    "muxa": "I've implemented a version of this (https://github.com/muxa/jquery-cookie) - $.cookie() returns an array of cookie names. Pull request pending (https://github.com/carhartl/jquery-cookie/pull/129). \nUpdate: tests added\n. Good point. Will close this and submit another pull request with a test.\n. New pull request which has tests is here: https://github.com/carhartl/jquery-cookie/pull/129\n. I think throwing an exception is perfectly valid if JSON parsing failed. And it's possible to trap it by the caller with try .. catch as @danielcha pointed out.\nThe problem with returning null is that there's no way to know if the cookie was non-existent or it had a value but it was not a valid JSON.\n. Here's another idea: how about returning the SyntaxError object itself?\n. Another option is to throw exception by default and add a config option to return null if parsing fails. E.g:\njavascript\n$.cookie.json = true;\n$.cookie.safeJSON = true; // would make invalid JSON values return null instead of throwing exception\n. ",
    "zfben": "I have change these code, now looks better, thx\n. ",
    "bruzie": "I can confirm a variation on this bug.\nIf I create a cookie with the following options:\n$.cookie('cookie_name','cookie_val',{expires:365,path:'/'});\nI can delete the cookie with:\n$.cookie('cookie_name',null)\nif the page is at the root level of the site.\nIf the page is in a sub folder, the cookie is not deleted with the above code, but will delete if I add the {expires:365,path:'/'} option.\n. ",
    "night815": "I am having the same issue as Bruzie.\njavascript\n$.cookie( 'cookie_name', null , { expire: 7, path:'/'} );\nusing the following seems to work no matter what the path. This isn't reflected in the documentation.\njavascript\n$.cookie( 'cookie_name', null , {path:'/'} );\n. @scowles4 instead of hard coding the url you could get it dynamically.\nhttp://stackoverflow.com/questions/406192/how-to-get-the-current-url-in-jquery\nHope this helps.\n. I think the problem is you have to know the exact path when deleting a cookie. I've had this issue with PHP many times.\nI will have to test this when I get some time. If i figure out a way to do it i will submit the code to this project.\n. ",
    "scowles4": "I think I'm having a related issue:\nI need to delete a cookie that's set by the server, and the domain name is variable depending on the installation. I can't seem to delete the cookie unless I define the domain, so we've had to hard code it for every installation.\nI'd like to be able to do this:\n$.cookie( 'cookie_name', null );\nor even this:\n $.cookie( 'cookie_name', null, {path:'/'} );\nbut only this works:\n$.cookie(\"ESID\", null, { path: '/', domain: 'ourcompany.com' });\nnote: HttpOnly is not set on the cookie, so that's not the issue.  :)\nthanks!\n. @night815 Thank you for the suggestion.\nI did play around with window.location.hostname to retrieve the domain but it picks up the subdomain as well (it returns dev.ourcompany.com when the cookie is set to ourcompany.com). The regex solution for this would trip on a cookie set to ourcompany.com.uk, for example.  So it's safer to hard code the value and that's ok for the short term.\nI'm editing my comment to say I'm going to work on syncing up with our own server-side logic to make sure the domain matches, that's more appropriate for my situation.  :)  \nThanks again - appreciate the help!\n. ",
    "jflatow": "I was thinking something like:\nif (arguments.length > 1 && (typeof value === 'string' || !value)) {\nand then:\nif (!value)\n options.expires = -1;\nWhat other types of objects can the value be?\n. Why not require the value actually be a string? Seems like a better option than restricting the value of the string.\n. ",
    "davidchambers": "How about replacing\u2026\nString(value) !== \"[object Object]\"\nwith\u2026\n(value == null || typeof value.valueOf() === 'string')\nSome examples:\ntypeof 'foo'.valueOf()             // \"string\"\ntypeof new String('bar').valueOf() // \"string\"\ntypeof (42).valueOf()              // \"number\"\ntypeof [1, 2, 3].valueOf()         // \"object\"\ntypeof ({foo: 'bar'}).valueOf()    // \"object\"\ntypeof false.valueOf()             // \"boolean\"\nThis might be a solution.\n. What are your thoughts on this, @carhartl? I'll gladly create a pull request if you're interested.\n. Clever! If you're byte conscious you could use ({}).toString.call(value) === \"[object String]\" instead.\nFunnily enough I actually made my proposed change yesterday (tests passed) and had planned to submit a pull request today. No need to do so, now. :)\n. ",
    "alphapete": "Sorry. This was not a problem at all on IE9.\nThe problem was caused by a setting on my PC (Delete browsing history on exit was ticked - how embarrassing!). \n. ",
    "willoughby": "Hey Esinek\nI have had the same issue with IE\nsetting a var with the cookie value didnt always return  a value in certain parts of my code\njavascript\ntext_only = $.cookie('text_only')\nbut when referencing directly it did\njavascript\nif($.cookie('text_only') == 'on'){\n}\n. ",
    "esinek": "Hi Willoughby,\nYour solution does not work for me.  I debugged into the cookie plugin and null is definitely being set as the return value in IE.\nThanks,\n--Ed\n. ",
    "icecaster": "in my case I was populating a form field with a cookie value. firefox and chrome returned an empty string (\"\") while IE returned \"null\" which was placed in the form field.\ncheers\n. this seems to be a duplicate of https://github.com/carhartl/jquery-cookie/issues/25\nexample:\n$(\"<input/>\").val($.cookie(\"not-existent\")).prependTo(\"body\");\nin ff & chrome this creates an empty input field\nwhile IE writes 'null' in it.\n. well fair enough.\none of the ideas behind jquery is to make scripts cross browser capable.\nHaving different return types in different browsers is a clear inconsistency.\nif you disagree consider updating your documentation to \n$.cookie('not_existing'); // => null in IE, empty string \"\" in other browsers\nJust trying to save someone else from a headache.\ncheers\n. ",
    "sampath2011": "hi carhartl the unit tests even runs fine on my browser. But when i actually use it in the application it doesnt work. That is the reason why i maked it as a bug. \n. Hi Carhartl, thanks for the reply. To be honest the test cases run successfully. But this is how i use in the application. not works in ie and safari.\n$(document).ready(function () {\n    $(\"#slidebox\").jCarouselLite({\n        vertical: false,\n        hoverPause: true,\n        btnPrev: \".previous\",\n        btnNext: \".next\",\n        visible: 3,\n        circular: false,\n        start:  parseInt($.cookie('lastPosition'),10) || 0,\n        scroll: 1,\n        speed: 300,\n        afterEnd:function(e){$.cookie('lastPosition', e.first().index());}\n    });\n});\n. Hi carhartl, I was checking that the cookie returns null value in Internet explorer. what could be problem.\n. Hi Carhartl,\nthis is the one writing in cookie, it writes the last position of the imageslider value that is an integer.\nafterEnd:function(e){$.cookie('lastPosition', e.first().index());}\n. Hi Carhartl,\nI found the issue. On Internet explorer, If you change the cookie management by Tools->Internet Options->privacy->Advanced->Enable override automatic cookie handling. then it works in internet explorer. why is that happening. Is there any alternative to the cookie? because we dont know how the end user's cookie settings will be?\nany idea will be much appreciated.\nThanks,\nSampath\n. ",
    "rweng": "Can this be closed?\n. Ok, the $.cookie.defaults option is good enough for me. One question regarding your comment: Do you even see the cookies from a path \"outside\" the one I am in? Because with domains it's that you cannot even see them thus not deleting cookies from a different domain.\n. ",
    "ANewsEE": "Chrome use \"Path\" instead of \"path\": http://stackoverflow.com/questions/335244/why-does-chrome-ignore-local-jquery-cookies\n. ",
    "wolfpackt99": "This issue of setting \"path\" to upper case \"Path\" seems to work for me... Is there another fix i should try instead?\nStrange.\n. After further review i think i am okay.  May have also been plagued by the \"localhost\" issue.  Thanks for the quick response.\n. ",
    "1maciek": "I'm experiencing exactly the same issue in IE8.\nI set path to: \"/Project\", which is equal to windows.location.pathname.\nMy domain is localhost:portnumber.\nIt works perfectly fine in Chrome. \n. ",
    "CollinY2K": "I'm having the same issue and it seems to be an issue in all IE version, I tested IE7, IE8, and IE9. However, it works fine in Firefox, Chrome, and Safari.\nThe cookie appears to set just fine as I can see it in IE's cookie list/cache, but when you call it via jquery $.cookie('my_cookie'), it returns null.\nI tested this using jquery 1.6.4 and jquery 1.7.1.\nWith the Feb 08, 2012 release of jquery.cookie.js.\n. ",
    "jrutter": "Was there any resolution to this?\n. Was this resolved - this is happening to me too for some users on IE9, where is just returns a null value on the cookie.\n. ",
    "Larriviste": "I've just come across this too for the first time in IE8. Set a cookie which shows up well enough in IE's cookie list but it simply returns null when you call it per CollinY2K's example. Fine on other browsers.\n. ",
    "kdmukai": "Same problem here with a brand new install of IE 8, jQuery 1.8.1.\nLive code at:\nwww.essaytagger.com/commoncore/step1\n$.cookie.defaults.path = window.location.pathname;\n    $.cookie.defaults.expires = 30;\nWrite cookie:\n$.cookie('has_seen_guider', '1');\nCheck cookie:\nif ($.cookie('has_seen_guider') != null && $.cookie('has_seen_guider') == '1') {\nI can see the cookie being written. One oddity: when I view IE's list of cookies (Local Settings\\Temporary Internet Files) the cookie names are all:\ncookie:myuser@somedomain.com/\nBut my cookie's name is:\nstep1\nSee screencap here:\nhttps://www.dropbox.com/s/knluh5meg9dq8l8/ie_cookies.png\nI'm assuming that's why IE can't locate the cookie after it's written.\n. I guess I just misunderstood what is meant by \"path of the page.\" I thought that included the page itself, but clearly it's only up to the final '/'.\nI just did a quick test against the following URL:\n/my/path/test.html\nThe resulting cookie using only the defaults has the following path:\n/my/path\nThis effectively makes it a directory-scoped cookie. This seems to me to be the less desirable behavior -- I can see the use for per-page cookies or site-wide cookies, but less so for per-directory cookies. But it's just a matter of preference I suppose and certainly isn't a bug... though it would help to add a quick example to the docs to make it clear what \"path of the page\" means (unless I'm the only one who finds that phrase misleading).\n. ",
    "barelyfitz": "Seen on:\nhttp://stackoverflow.com/questions/2156399/restful-cookie-path-fails-in-ie-without-trailing-slash\n\nSee http://blogs.msdn.com/ieinternals/archive/2009/08/20/WinINET-IE-Cookie-Internals-FAQ.aspx\nDue to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE\u2019s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\nFor instance, if a page sets a cookie on itself like so:\nSet-Cookie: HTTPSet-PathCookie=PASS;path=/check.htm\n\u2026the cookie will be sent with HTTP requests but will not appear in the document.cookie collection.\n\nSo I'm guessing you can't just use path = location.pathname and instead you might need to use something like path = location.pathname.replace(/\\/[^\\/]+$/, '/'); to remove the last \"filename\" part.\n. ",
    "andrewminton": "Ahh thanks. So something like this would work then.\nvar date = new Date();\n date.setTime(date.getTime() + (30 * 60 * 1000));\n $.cookie(\"example\", \"foo\", { expires: date });\n. Thank you! \nAwesome work.. loving it already\n. ",
    "nachitox": "Sorry if I dont explain it right:\nIn PHP\nsetcookie(\"cookie[1000]\", 1);\nThen, try in JS:\n$.cookie('cookie[1000]');\nIt returns null\nBut with the jquery.cookie-for version (an old version that I had on my HD =P), works.\n. I had an old version and mix it with the new :P\nhttp://te.innatia.com/js/jquery.cookie.js\n. ",
    "mmoscosa": "hello @nachitox which version of the plugin is the one you are using for reading cookies array?! am having the exact same problem.\n. ",
    "JaimeObregon": "I have had exactly the same problem @nachitox describes. Unfortunately, @nachitox patched version reads array cookies nicely, but fails to delete them. I have found this patched version, which solves my problems with array cookies (read and deleting them). YMMV:\nhttp://plugins.jquery.com/files/issues/jjquery.cookie-modified.js_.txt\nAs a footnote, the issue described isn't minor, as it's a common practice in server side frameworks to pack multiple values into a single array cookie.\n. ",
    "screamwork": "exactly the same problem, unfortunately the link is useless, man man man...\n. ",
    "ghost": "I obtain the same results on Linux Chrome x64 15.0.874.121\n. This is due to Chrome not setting cookie while path is not set.\nThis can be fixed by changing jquery.cookie.js at line 31:\njavascript\n            options.path ? '; path=' + options.path : '',\nby\njavascript\n            '; path=' + (options.path ? options.path : ''),\nYou can change test.js accordingly:\nat Line 46:\njavascript\n    equals($.cookie('c', 'v'), 'c=v', 'should return written cookie string');\nby\njavascript\n    equals($.cookie('c', 'v'), 'c=v; path=', 'should return written cookie string');\nat line 51:\njavascript\n        ' v', 'should not encode');\nby\njavascript\n        ' v; path', 'should not encode');\n. ",
    "amercier": "I confirm this is now working on Mozilla/5.0 (X11; Linux i686) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7\nIt might be a bug that has been fixed in Google Chrome.\n. ",
    "SpikesDivZero": "I tried adding another cookie after the weird-formatted cookie, and the result was similar to \"x=y; y=z; referrer; a=b\"\n. ",
    "phtrivier": "Note that when I use the docCookies library from MDN https://developer.mozilla.org/en/DOM/document.cookie I can finaly get a site-wide cookie ... but they seem to call document.cookie in a  slightly different ; is it FF specific ? \ndocument.cookie = escape(sKey) + \"=\" + escape(sValue) + sExpires + (sDomain ? \"; domain=\" + sDomain : \"\") + (sPath ? \"; path=\" + sPath : \"\") + (bSecure ? \"; secure\" : \"\");\n. ",
    "jessegavin": "This issue is affecting me as well.\n. ",
    "miccek": "up\n. ",
    "dkullmann": "I didn't test this... I mean to fork and then test and submit but it looks like I just used a feature to edit the single file and submit it. I'll test and tell you if there is an issue.\n. ",
    "keywan": "I think jquery Cookie 2 provides a clean solution:\nif (options.raw) it does not encode the key\nelse it encode it the same way as the value is encoded.\nBut it cares about escaping the key for the Regular expression whether or not the option.raw is setted.\n//make the key regex safe\n    key = key.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n    var regex = new RegExp('(?:^|; )' + key + '=([^;]*)');\n    var result = regex.exec(document.cookie);\n. ",
    "mhulse": "@carhartl Thanks for the quick reply! I really appreciate it. :)\nI appreciate you taking my feature request under consideration.\nThanks for all of your hard work and amazing code!\nCheers,\nMicky\n. ",
    "thewatts": "Great!\nThanks so much for the help!\n. ",
    "furiousjason": "Wow! Thanks for the quick response.\n. ",
    "toamitkumar": "Thanks for your response. It was interfering with another JS library. \nAdding $.noConflict() did the trick.\n. ",
    "lavanc": "wherre did u add $.noConflict() ?\n. ",
    "littledev": "got the same error, used $.noConflict() to solve, thx toamitkumar\n. ",
    "ericmuyser": "Ah that'll do, thanks.\n. ",
    "robmadole": "I think with the introduction of issue #50 and this issue, it would be a good idea to update the underlying engine of this to use a lexer and parser. Seems like the format of these cookies can vary wildly.\n@carhartl have you considered something like this before?\n. @carhartl No, it's not required. I'm wondering if it would add some future-proofing and make bug fixing easier.\n. ",
    "jvanasco": "I think this is required. It's not compatible with the RFC - web servers will correctly quote cookie values that include reserved tokens ( see this comment for the webob library ).\nhttps://github.com/Pylons/webob/issues/27#issuecomment-3918937\nThe RFCs for cookies are 2109 > 2965 > 6265.  2109 and 2965 both explicitly state a \"token or quoted string\" as the value; 6265 refers to 2616 , which notes quoted strings as valid in section 4.2 'Message Headers'\na quick fix to the current version of jquery.cookie is this:\nfor (var i = 0, parts; (parts = cookies[i] && cookies[i].split('=')); i++) {\n    if (decode(parts.shift()) === key) {\n        var value= parts.join('=') ;\n            value= RegExp( '([\"\\']?)(.*)\\\\1' ).exec(value)[2];\n        return value;\n    }\n}\nthe earlier versions can benefit from:\nreturn (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([\"\\']?)([^;]*)\\\\1').exec(document.cookie)) ? decode(result[2]) : null;\n. I'm not suggesting a new release.  I'm suggesting that either the \"master\" branch of this project roll-back to the 1.4.1 release, or that the files be tagged \"1.4.2-dev\" (but no new release made).\nThe reason is because the master branch is not actually \"1.4.1\" -- it has a lot of commits since then, but the repo's design makes it look like master is 1.4.1.  I\n. @FagnerMartinsBrack yes.  If someone looks at this repo and says \"ok, let's just see what the last update here is...\" then looks at the file, they get the unreleased version not the actual 1.4.1\n@carhartl I'm a fan of that model, but not expecting it. Many projects might use a \"-dev\" or other placeholder version in their master branch, or bump the version number up to the forthcoming release.  This repo is weird/misleading because there is a \"1.4.1\" tag, but the \"master\" branch used for development has files labeled \"1.4.1\" as well.  It suggests that the master and the tag are the same, but master is many commits ahead.\n. Looks good.\nThat's a good distillation of the confusion.  \nAlso, If you search online for the latest version, you'll end up seeing the current master which is really \"1.4.2-unreleased\" and not 1.4.1 as labeled.  So it can be confusing to see what version is really running -- especially if junior devs are checking in the file.\n\nOn Mar 4, 2016, at 6:12 AM, Fagner Brack notifications@github.com wrote:\nI still haven't unterstood up to this day what the problem is.\nBasically if he goes to the Releases page it says:\n39 commits to master since this release\nThis will make one to think that there were additional important fixes on this repository after 1.4.1 which weren't released with 1.4.1. We know it is not the case and all commits went to the new repo, but those ending up here don't know that. Since most people jump straight to the version in the source file or json metadata to check the actual version, 1.4.2-unreleased provides a clear hint that the commits belong to a non released version 1.4.1.\nOther solution is to create an actual new 1.4.2 release and publish on npm so that master is not too far away from the latest release.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "kirpit": "many blames jquery.cookie about this issue.\nhttps://code.djangoproject.com/ticket/19641#no2\n. I'm not sure if this is the same issue but seems like these versions are a bit unstable:\n$.cookie.json = true;\n$.cookie('dummy', 'A');\nconsole.log($.cookie('dummy'));\n// => Uncaught SyntaxError: Unexpected token A\n. I see, but still some questions here. Although you do a $.cookie('dummy', JSON.stringify('A')); with json = true, I'm not sure if the value should be stored as %22%5C%22A%5C%22%22 or as \"\\\"A\\\"\"\nI haven't check the standards but the second option what django does. Which means, if you use jquery.cookie on a django platform, you have to do decoding before json parsing on every cookie you set from client-side. However, it works vice versa that jquery.cookie can read every back-slash escaped values just fine.\nOn the other hand, I've read everything under this topic, not a js ninja to admit but just talking from the cocky high level; I have some values as regular strings, some values json objects, some server-side values that I can't control at all (i.e. session id). So, setting json = true or false on a global setting for every second cookie read sounds just weird for me. Again, may sound radical but how about $.cookieJSON('dummy') and $.cookieJSON('dummy', 'a value to be stringified') approach?\n. Maybe I should open another issue, but I simply can't read $.cookie('jsonVal', { key: \"value\" }); with json = true from server-side without doing low-level percent decoding stuff.\n. ",
    "brandonaaron": "Might want to add && define.amd.jQuery to the conditional as jQuery itself does.\n. ",
    "jpillora": "Require.js shim config is your friend.\nHere's an example from one of my projects:\njavascript\n    shim: {\n      'backbone': {\n        deps: ['underscore', 'jquery'],\n        exports: 'Backbone'\n      },\n      'bootstrap': ['jquery'],\n      'lib/jquery.cookie': ['jquery'],\n      'lib/jquery.color': ['jquery']\n    }\n. Just opened a pull request for this https://github.com/carhartl/jquery-cookie/pull/93 (Updated)\n. Just thought:\nYou could get auto-magic JSON support with:\njavascript\n...\n(function ($, document, undefined) {\n    if(JSON === undefined)\n        $.getScript(\"//cdnjs.cloudflare.com/ajax/libs/json2/20110223/json2.js\");\n    ...\nNot sure if you'd want to make that implicit though, maybe an option ? \n. Fair enough, tests will be incoming if you give the go ahead :smile:\nProviding your own encoding/decoding in the plugin would be redundant, as the majority of browsers have JSON built-in. We could use $.parseJSON but there's no corresponding \"stringify\" function in jQuery.\nI do get that requiring the inclusion of another file may be asking too much from the user though.\n. > I don't think node is needed to run the tests, since all browsers allow cookie creation in localhost (except chrome   and it's peculiar behavior which is easy to workaround)\nAhh I see, I attempted in Chrome, failed, so I just got node.\n\nI think it is not the idea of the author to change the behavior of the plugin to each browser version that don't support the required feature or require a polyfill to work properly.\n\nI agree, it's adding too much to be worth it, kind of points to creating a new plugin. I made the wrapper in your comment, though figured it's a reasonable simple change so why not add it in everyone.\n\nthe way the plugin works at the moment we won't be able to automagically convert objects to json\n\nthe value as options issue solved in https://github.com/carhartl/jquery-cookie/pull/93 new pull request\nIt's just the older browsers missing JSON class issue. Since we have the raw option, we could easily add a json option, thereby putting the onus on the user to include the json.js file\n. I fixed the tests, though haven't added my own, adding them in now...\n.  Add boolean type check, I know it's a hack, but don't think anyone would\nbe wanting to use an object to store a single value, which is called raw\nand is a boolean\nOn Tuesday, August 28, 2012, Fagner Martins wrote:\n\nOk, now I want to:\n$.cookie(\"myCookie\", { raw: \"MyRawValue\" });\nvar myObj = $.cookie(\"myCookie\").raw; //myRawValue\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/pull/93#issuecomment-8072532.\n. Exactly what i was thinking, since there's already a raw option which uri encodes/decodes, why not have a json option which json encodes/decodes, and just write in the docs that json requires crockford's JSON.js for support on older browsers, that way people can add it if they like but its off by default ?\n\nHowever, its your repo carhartl so ultimately, it's your call, just thought people would find it useful\n. Options should be done using $.extend({},$.cookie.defaults, value) instead of using value || $.cookie.defaults || {}. That way you can define defaults then override them at will.\nAlso see,\n\nCookie encoding\nThere is some confusion over encoding of a cookie value. The commonly held belief is that cookie values must be URL-encoded, but this is a fallacy even though it is the de facto implementation. The original specification indicates that only three types of characters must be encoded: semicolon, comma, and white space. The specification indicates that URL encoding may be used but stops short of requiring it. The RFC makes no mention of encoding whatsoever. Still, almost all implementations perform some sort of URL encoding on cookie values. In the case of name=value formats, the name and value are typically encoded separately while the equals sign is left as is.\nhttp://www.nczonline.net/blog/2009/05/05/http-cookies-explained/\n\nWhat should really be happening is not doing a full URI encode decode, but instead manually encoding decoding, only semicolon, comma, and white space with a replace chain. (Equals is not required as it should use the first equals then everything up to the semicolon is used as the value).\nLike you said, with json: true, and if parameter 2 is an object, it will always be treated as a value. In effect, making a GET for $.cookie('foo', { raw: true}) impossible. However, as stated above, we should always encoding those 3 characters and not giving the raw option, as by allowing an unencoded semicolon would corrupt their cookie thereby losing it anyway.\njavascript\nJSON = undefined\n$.cookie('foo','bar;bass',{raw:true})\n\"foo=bar;bass\"\n$.cookie('foo')\n\"bar\"\nPlease confirm the above bug ?\nI think raw is a bad idea anyway...\n. Though it can't allow the raw string bar;bas, maybe the raw could be changed to uriEncode or something, and always do something like:\n``` javascript\nfunction encode(str) {\n    return str.replace(\";\",\"%3B\").replace(\" \",\"%20\").replace(\",\",\"%2C\");\n}\n\nfunction decoded(s) {\n    return str.replace(\"%3B\",\";\").replace(\"%20\",\" \").replace(\"%2C\",\",\");\n}\n\n```\n. Okay fair enough, I'll open up a new repo.\nNote though:\n\nOptions should be done using $.extend({},$.cookie.defaults, value) instead of using value || $.cookie.defaults || {}. That way you can define defaults then override them at will.\n\n``` javascript\n$.cookie.defaults = {\n   path: '/my/default/path/',\n   secure: true\n}\n$.cookie('foo', 'bar', { path: '/my/custom/path/' }); // => secure: true lost !\n```\nThat is a bug however. Not really \"defaults\" if you lose them.\n. That's true, for a get, with only raw as possible options it will still\nwork.\nOn Wed, Aug 29, 2012 at 4:33 PM, Klaus Hartl notifications@github.comwrote:\n\nAs for reading I realized that no other options then raw are at play - I\nconfused that myself with the deletion, thus options = value ||\n$.cookie.defaults || {}; seems to work ok but will not if there are more.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/pull/93#issuecomment-8116453.\n. Note though, from above discussion with @FagnerMartinsBrack :\nLike you said, with json: true, and if parameter 2 is an object, it will always be treated as a value. In effect, making a GET for $.cookie('foo', { raw: true}) impossible.\n\nSo it could only work cleanly if the user is forced to set raw and / or json in defaults. In which case they would stop being \"defaults\" (as they could no longer be overridable) and become \"config\" or equivalent.\n. Yup, that sounds like a good idea to me :+1:\nOn Wed, Aug 29, 2012 at 4:49 PM, Klaus Hartl notifications@github.comwrote:\n\nThe default options were then cleanly about the cookie attributes only.\nSeems reasonable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/pull/93#issuecomment-8116705.\n. Exactly, the existence of JSON allows the value to be an object, so the object test does not need to pass, right ?\n. No.... value !== undefined && ... is still there, so the existence of the value parameter would be what decides whether it's a get or a set.\n\nHowever, we'd have silent fail with $.cookie('foo',{bar:42}) in old browsers. Can easily throw an error for that case though.\n. Ah yes, you are correct. I think you are right in saying the plugin won't be able to auto-magic JSON convert. We could do something like \njavascript\nfunction isOptions(options) {\nvar a = ['raw','expires','path','domain','secure']\nfor(var o in options) if(!$.inArray(o,a)) return false;\nreturn true;\n}\nHaven't executed that code but you get the idea...\nWait a second, when is it valid to get a cookie with options ? Shouldn't all gets be just the key ?\n. I'll install node now so I can run the tests...\n. But there is no options.path check's at the get portion of the code ?\nThough true about the raw option, maybe get rid of it for JSON auto-magicness :wink2:\n. We could just add a special case for raw. If an object has one key, { raw: ... } then do a get, otherwise store it. Abit hacky I know, though not much we can do with only 1 function to work with.\n. ",
    "kennknowles": "Indeed, I am using a shim now. This patch would remove the need for a shim.\n. ",
    "jeffreymb": "I'll add my voice to the usefulness of this addition. Being AMD compatible would allow me to load it from cdnjs.com instead of having to compile it in.\n. ",
    "chas-ryder": "It appears that this commit added support for requirejs, but it created issues with requirejs build. When running requirejs build, I get a jquery.cookie is undefined error at runtime.\n. That's what I am doing. The module is in fact the requirejs build code so the dependency is working, but it is having issue instantiating it. This is only when you do a compile/optimization. It works fine outside of that.\n. Nope. It's local. This is the only plugin having issues. I am using a lot of other jquery plugins as well with no issue.\n. ",
    "davyboyhayes": "I have come up against this problem, r.js is compiling the code incorrectly:\nMy shim:\nshim: {\n...\n        jqueryCookie: ['jquery'],\n...\n    }\nAnd the source currently shows \nif (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\nBut when it is run through r.js, it becomes:\nif (typeof define === 'function' && define.amd) {\n        // AMD\n        define('jqueryCookie',['jquery'], factory);\n. @chas-ryder I've created https://github.com/carhartl/jquery-cookie/issues/306 as I've come across this issue as well.\n. I don't have this issue in jquery.storageapi.js, by having this shim:\nshim: {\n    ...\n    jqueryStorage: ['jquery'],\n    ...\n},\nSo I would say this isn't an r.js problem per-se, but the fact that this plugin applies it's own define, when it should be declared by the calling shim.\n. I'm obviously using the wrong methodology to get jquery-cookies working with r.js (shimming when I shouldn't be). I'll close this bug as it's obviously not a bug, apologies for any inconvenience. \n. ",
    "bmaland": "Hardcoding 'example.com' won't help if the site runs on (stage.)example.{se,dk,no}. The 'all' feature is implemented in other cookie libraries (including Ruby on Rails as i mentioned) because of this use case.\n. ",
    "dittodhole": "the only eye-catcher are following lines:\nif (value === null) {\n    options.expires = -1;\n}\ncould you maybe isolate your breaking-call to a fiddle (eg @ jsfiddle.net)?\n. ",
    "bunnymatic": "I'm seeing similar behavior - Mac OSX - Chrome 18.0.1025.163\nFrom the console:\n```\n/ set a cookie and check it /\n\n$.cookie('blah',1);\n\"blah=1\"\n$.cookie('blah');\n\"1\"\n/ looks good /\n\n/ set a cookie with a little more data and check it /\n\n$.cookie('blah', JSON.stringify({abc:1}));\n\"blah=%7B%22abc%22%3A1%7D\"\n$.cookie('blah');\n\"{\"abc\":1}\"\n/ looks good /\n\n/ set the same cookie with expires /\n\n$.cookie('blah', JSON.stringify({abc:1}), {expires: 7});\n\"blah=%7B%22abc%22%3A1%7D; expires=Fri, 27 Apr 2012 22:45:16 GMT\"\n$.cookie('blah');\nnull\n/ no dice! /\n```\n\nAny ideas what might be happening here?\n. It looks like i had an old version.  The latest code (commit 1fa4a1807d54a8c2d6a5e355918b8cf16ff84983) seems to do the trick.  The old version i was using included the following extra bit for managing expiry.  This was probably the issue:\nif (typeof options.expires === 'object') {\n  var days = options.expires.days || 0;\n  var hrs = options.expires.hours || 0;\n  var mins = options.expires.minutes || 0;\n  var secs = options.expires.seconds || 0;\n  t = options.expires = new Date();\n  t.setDate(t.getDate() + days);\n  t.setHours(t.getHours() + hrs);\n  t.setMinutes(t.getMinutes() + mins);\n  t.setSeconds(t.getSeconds() + secs);\n}\nI've added a couple tests for set/get cookies with expiry.  I'll submit a pull request if you feel like adding that to the project.\nCheers\nMr Rogers\n. ",
    "PVince81": "Same issue here. Hope this can be merged soon.\n. ",
    "takacsv": "I figured the fix differs in 7 characters from the master and does not break any of the tests included with the master branch so there is no need to add and extra test.\n. ",
    "cobexer": "Why are there always devs trying to get minified versions into source code repos??\n. @sdepold there are a few problems with this approach:\n1) if you use the minified version in your project, your doing it wrong because if you use a lot of minified scripts your site/app will need a lot of HTTP requests and thus be slow\n2) this is a source repo, binaries should be kept out of them (a pre-minified download in the downloads section would be the better approach IMHO)\n3) if you only use the minified version and find a bug, your bug-report will likely suck\nand\n4) I shouldn't annoy people in someone else's repo^^\n. ",
    "sdepold": "because u want to download the repo and start working?\n. ah! ok that makes sense :)\n. ",
    "kidata": "if (typeof(jQuery.cookie) == \"function\") {\n   // do cookie stuff ...\n}\ndid it.\n. ",
    "vlakoff": "+1 for this change. Saves a few scope lookups ;-)\n. Please, not 2 spaces! I think it is unreadable, the indentation is not noticeable enough...\n. As mentioned, the patch has some problems (btw, it's \"valid\" not \"vailid\"), but this feature sounds great ;-)\nIn addition, according to the OP tests above and for the sake of usability, it would be necessary to accept both {expires:1} (usual syntax) and {expires:'1'} (because we would accept '1d' and so on)\n. ",
    "ihipop": "I don't understand what dose you mean? what does \"tests\"  and \"regression\"  means to? \n. Thanks Very Much .I'll refer to it.\nAnd indeed,It's amazing me,that this jquery plugin used to have this feature.Why it is removed?\n. ",
    "delmendo": "Sorry I'm a dork - I missed it in the header - apparently I need more coffee :)\n. ",
    "danfolkes": "You might try \nhttp://archive.plugins.jquery.com/project/html5Storage\nIt will allow you to store more data.  Make sure you try doing JSON.parse and JSON.stringify to objects.\n. ",
    "munnadroid": "yaha, already ended up using html 5 storage and it works super .\nThanx !!\n. ",
    "icem": "And this regexp approach works correct \nfunction getCookie(name) {\n    var matches = document.cookie.match(new RegExp(\n      \"(?:^|; )\" + name.replace(/([.$?|{}()[]\\/+^])/g, '\\$1') + \"=([^;])\"\n    ))\n    return matches ? decodeURIComponent(matches[1]) : undefined\n}\ngetCookie(\"fileDownloadToken\") \n\"1343318619868\" \n. ",
    "sourcejedi": "@carhartl: Internet Explorer, 'nuff said.  Your, um, unique loop condition is less tolerant than the more conventional one (or the usual regex).  And the whole point of using JQuery is to shim over ugly browser deficiencies, no?\n. Eclipse is guessing wrong.  If config was not initialized, it would be an error and the plugin wouldn't work.\nThe trick allows writing \"config.defaults\" inside the function, which makes the intended use of the variable very explicit.  At the same time, the plugin doesn't pollute the global namespace by making \"config\" a global variable.  Instead, the \"defaults\" object is accessible as $.cookie.defaults\nYour suggested code is wrong, because it doesn't include any way to access the \"defaults\" object from outside the plugin.\n. This was coded from the description of #88. (And the observation that the current loop condition in jquery-cookies is different to what everyone else does, so it's not too surprising if we choke on stupid IE bugs there).\nUnfortunately I don't know how to trigger the double-semicolon bug in IE.\nWhat I'd like to do is fake up a value document.cookies showing the double-semicolon bug.  But I don't think I can do that; I don't think it's possible to override DOM properties in javascript, is it?\n. (for a test case, I mean)\n. @carhartl \nNo, this does actually change the loop condition.  I can step through the logic:\nAs per #88, we're looking at document.cookie = \"user_credentials=6d405e5b231efa773f3070f95a02bf1397d7711fca0246be53e9a057edbc0da94bf9706019512fb43299d76ca4765e73cb694ead623c1b0d5533%3A%3A2; ; fileDownloadToken=1343318619868\".  (\"Pay attention to doubled semicolon\").\n```\nvar cookies = document.cookie.split('; ');\n=> cookies = [\n    \"user_credentials=6d405e5b231efa773f3070f95a02bf1397d7711fca0246be53e9a057edbc0da94bf9706019512fb43299d76ca4765e73cb694ead623c1b0d5533%3A%3A2\",\n    \"\", // due to doubled semicolon\n    \"fileDownloadToken=1343318619868\"]\nfor (var i = 0, parts; (parts = cookies[i] && cookies[i].split('=')); i++) { ... }\n```\n=> cookies[0] works as intended.  cookies[1] evaluates to the empty string, which is false.  The loop condition short-circuits, and the loop finishes.  It never processes cookies[2].\nI agree it would also be nice if we knew what provoked the IE bug.  But we don't, and no other JS cookie function suffers this way, because they always iterate the whole length of the array.  (Or alternatively, use an equally robust regex).\n. Sorry, I suck at formatting and never remember Preview.  I think everything's there though.\n. Maybe I can find a pure javascript way to at least fake a value of document.cookies.  Insert the content of jquery.cookie.js inside a closure, which binds \"var document\" as a local variable...\nI was running the test page off Apache (after guessing file:// might have been the problem).  I didn't know how to run the custom server (or notice it was there until afterwards :).  Is it supposed to work properly under Apache etc?  If you can't reproduce it yourself, I'm happy to have a look at it.\n. Ok, here's the test case using pure JS fakery.   I've rewritten the history so the test comes before the fix.  (As for the other test issues, I've described them in #105).\n. I.e. cd ..; node jquery-cookie/server.js.  Good catch!  It's not that the test page doesn't work under Apache or file://, it's that it doesn't work properly if it's served in a directory... it means the cookie set with an explicit path of '/' never gets deleted, because it has a different path to the default (which would be /jquery-cookie/).\nSo that makes perfect sense.  It's just a pity that people have to run a custom server, when it seems file:// can work well for the current tests.  So I still like #105, and having that code might help avoid or notice similar problems in future.\n. Sorry, I don't have IE so I'm writing what I can.  Maybe someone will find a special value of Set-Cookie that provokes a non-conforming empty value in document.cookie, and you can document exactly which browser to run the test in.  Good luck.\nI have to admit I didn't think of iframes, just as a way to combine multiple test pages.  That might be useful if you don't mind the multiple files, but wanted to get rid of the sync-XHR + eval() - it could also easily use a real copy of jQuery instead of a fake one.  If you change your mind and want something like that, just let me know.\nAlan\n. ",
    "fredsterss": "Ok - even if it's not included then an error message would at least be useful, ie. 'this data was not saved because it is in object form' or some such.\n. OK. My only point is it currently is not obvious why it fails, and I'm not sure it follows the pattern that jQuery has established of basically doing everything to make the developer's life easier. Surprising that noone before me has tried to put an object into a cookie and been confounded by why it didn't work. Maybe I'm just a n00b ;)\n. ",
    "rishiphp": "Thanks for reply,\nIts works fine in iphone Safari, without phonegap...!\n. ",
    "mente": "does it mean it will be merged? I'm using jquery.cookie in amd project and have to use 2-level loading hierarchy in order to load jquery plugins. This PR eliminates second layer.\n. Looks like formatting thing broke this PR in something unreliable to merge. My fault, closing it. Maybe someone other will send correct PR with correct formatting.\n. Better minification? Can you explain how?\n. Ah, so minifier minifies window, document and undefined to 1 letter variables. Thnx.\n. ",
    "Munter": "Scratch that, I had an old version apparently.\n. ",
    "Wirone": "Thanks! Now it's clear :)\n. ",
    "mixedconnections": "I am using: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \nhttp://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n. No, you can use other doctypes and it will not trigger quirks mode. Here is a good article on it:\nhttp://en.wikipedia.org/wiki/Quirks_mode#Comparison_of_document_types\nAnyway, I confirmed that I am in standards mode when the error occurs. Thanks though. \n. Hey why was this issue closed? It was opened yesterday by me... \ncarhartl, I never mentioned quirks mode. Another person brought it up, not me!!!\nThe file is included as:\n<script type=\"text/javascript\" src=\"../jquery.cookie.js\"></script>\nYes, $.cookie is defined. \n. Okay, I solved the problem by moving the plugin to the same directory as the HTML. So now the include looks like:\n<script type=\"text/javascript\" src=\"jquery.cookie.js\"></script>\nI don't know why this makes a difference, but it did. Now removeCookie works with IE. Thank you everyone for the help. \n. ",
    "thezoggy": "clear browser cache?\n. ",
    "luckyape": "If you are including a path argument, like  $.removeCookie('foo', { path: '/fooapp' }) , it may be you need to try  $.removeCookie('foo', { path: '/fooapp/' }) , trailing slashes matter.  Take close look at the cookie path in each browser.\n. ",
    "plukevdh": "Would like to see this too.\n. ",
    "bluntbill": "It seems to be empty.\nI tried alert(\"-\"+document.cookie+\"-\"); and it shows only \"--\"\nis there a better way of checking the value?\n. Hi.\nThanks for the tip.\nconsole.log basically outputs the same thing, which is nothing.\nIn the meanwhile, is there a way I can check for browser type and activate only jquery cookie for other browsers except IE9? I have disabled the funcionality for every browser, but at least it could be working on some browsers...\nThanks for the help.\n. Hi.\nThe error I am getting is: \"Object doesn't support property or method 'cookie' \"\nI created a new fiddle with the correct version of cookie.js (I think) and the error is still there. Can you please check if the one included in the following fiddle is the latest? http://jsfiddle.net/QWeJY/\n. Yes, it seems that for some reason the plugin insn't included. If i write $.cookie in the console in IE, it says undefined.\nI include it like this:\n\nand it seems to work in every browser except for IE. I have also tried chrome and firefox under linux, and both work.\nDo you have any place you can check it using that fiddle under Windows 7 and IE9?\n. Hi.\nI followed FagnerMartinsBrack advice and included the cookie.js file from other location rather than directly from gihub and it worked.\nRegarding the HTML in jsfiddle, you just have to put what you would put in the body (in this case the div for the calendar), and include the resources.\nThank you for all your help.\n. ",
    "chovy": "console.log(document.cookie)\nopen up developer tools javascript console first.\n. +1 for minified version in github. Not everyone has a js minifier compiler handy.\n. ",
    "Addvilz": "Except that jQuery provides minified version on CDN/websites. You don't seem to have one. It was only a suggestion to have minified version distributed via Github, You could distribute it whatever You consider reasonable to. \nI was only pointing out that it is normal nowdays to have pre-minified version hosted somewhere for automated download. \nAs for directory structure, keeping things in order is simple. No matter You have 1 or 10  000 library files - documentation, data, demo and actual library files must be separated from everything else. it just a good practice, and it doesn't really matter weather You fallow majority and put js files in js directory, or src directory, or whatever directory.\nPlease, consider this as a friendly suggestion, and consider it for future. \n. Yeah, we could. Only that the process of minifying is manual. This is internet, it's automatic. More, the whole purpose of this library is to do something automatically, so we wouldn't need to.\n. Klaus, please, take this suggestion as a friendly advice to make jquery.cookie more available! I really appreciate Your work, as for me personally - this plugin has saved my sorry ass a lot of times. And I really, really appreciate what You have done. Wheather You decide to follow this advice or not, noone will think any less of You. Thanks!\n. I solved the problem of minification by creating an automated service for minifying js for jquery.cookie and with time, probably for other projects. \njquery.cookie minified version is available at http://jsmin.eu01.aws.af.cm/?project=jquerycookie , it is cached for 6 hours and updates itself automatically, so Klaus does not even need to update it manually. :)\n. Yes, will rewrite compression script a bit later :+1: \nAdditionally, particular URL also serves as a CDN. Javascript is given with proper content type header, although use of the service as CDN is discouraged, and one should always have a local copy.\n. @pboling that is not my intention at all. It's just too much when You have to keep tens of libraries up to date and minfy them by hand just that You could use them in asset management system where libraries for development and production are managed and kept seperately. \n. ",
    "verandaguy": "You know, guys, that failing, you can always try a site like this. There's plenty of them on the web.\n. ",
    "nevar": "Maybe you can add minified version on Download project page?\n. ",
    "rmrfself": "very goold plugin .  thank you .\n2012/10/26 Roberts notifications@github.com\n\nYes, will rewrite compression script a bit later [image: :+1:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/121#issuecomment-9809767.\n\n\ndream makes life meaningful.\n. ",
    "PowerMugen": "seems like if on line 40 of the plugin I use  unescape(key) instead of  encodeURIComponent(key)  I have no more issue with this, but... why is encodeURIComponent(key) used here in the plugin ?\n. ok, this changes nothing... perhaps I haven't really understood how to use $.cookie.raw = true;\nIs there an example of the use of  raw = true I can see ?\n. Ok, I have set this the way you show me here...\nand updated my fiddle http://jsfiddle.net/powerMugen/acGYp/14/\nRaw seems to work fine on cookie value, but not on his key, \nWhy is the key of the cookie uri encoded ?\nps: yes I have downloaded latest version yesterday\n. ok, that makes sense... thank you for your time by the way !\n. can you just looks the jsfiddle here http://jsfiddle.net/powerMugen/acGYp/15/ before closing, I'm sure I can't use raw=true on the key, and I still have an issue.\nI can read the cookie named foo[bar] created with php,\nbut I can not change his value with $.cookie, because the plugin creates a new cookie which name is encoded.\nI'm annoying, but since jquery.cookie is a great plugin I feel bad I can not use this in my case.\n. yup jsfiddle not good for this test. I'll try to do it again on my project. And perhaps just having the [] removing will be a nice idea. \nHave a nice day.\n. ok, it seems real fine here... I'll try again on my project, thank you very much\n. ",
    "cdman": "@carhartl - sorry for not checking in more detail. It might be worth a mention in the readme file.\n. ",
    "arrayown": "You mean this is not part of the script already? Hmm, I was planning to use this on my project but I cannot write up a detailed removeCookie call for every cookie, that's time consuming when working on small projects.\nI'd like to see this added, too. Thank you!\n. ",
    "sharipov-ru": "+1\ndanielcha, how have you cleared invalid JSON? \n. ",
    "danielcha": "I agree with the the fact it not a good idea to fail silently in most cases. In my code this catch should never be used.  However, if a user or program alters my cookies content for whatever reason,  the javascript will break and stop execution.  As my site is very javascript heavy, it's an unacceptable UX as most stuff won't work. Also,  being cookie based,  refreshing the page won't solve the issue, leaving the average user clueless why it's not working. \nBecause I always try to keep in mind all possible scenarios I built in the try/catch. However,  my guess would be there are plenty of programmers who don't and as soon as a cookie becomes corrupt the site breaks,  with no clear solution to fix it from an average user perspective. This is why I think it should NULL as if the cookie does not exist, or another error enabling the programmer to validate the cookie. \n. Well... I would prefer the error gets logged, instead of throwing an exception. Because in most cases the cookies are not critical for the operation of a website. However, other Javascript I use is. So if the cookie is \"corrupt\" and the cookie has a long expiration date... javascript will break. And yes, the Try/Catch is a solution. However, less experienced programmers might forget this and it can break a complete website for users with corrupt cookies.\nI would let the script either return null (a corrupt cookie needs to be removed/overwritten, thus one could argue that it is the same as not having a cookie at all). Or et it return a string with \"error\" and/or log a warning. Then your code could be something like. Then you could validate if the cookie is not null AND is not \"error\".\n. I'm not an expert in semantics or anything, but I think that's actually a good solution :-)\n. tnx for the fix man! :-)\n. ",
    "codecowboy": "What if cookies which do not require JSON are also being set by the same page? Will they still behave as expected with this option set?\n. ",
    "stazna01": "Thank you so much for your replies. I updated to your newest build and the error message I'm getting now is different, but I have a feeling it's still related. I created a very simplified version of the page that  has the json as a string in a variable and puts it int the cookie with no issues. When it tries to read it into the \"test\" variable it gets the following error...\nJSON.parse: unexpected non-whitespace character after JSON data\nIt seems it chokes at...\ncookie = JSON.parse(cookie);\nHere's an example page - http://pomona.edu/carhartl/\n. I fixed my example to use JSON.parse to feed it the object version of the string, which did seem to fix that part of the issue (THANK YOU)...but I'm noticing that if i test to see if a cookie exists or not (and it doesn't exist) I get that same error. I modified my example. It should have two alerts, one for the first cookie it finds and one for the second cookie it doesn't find. Instead, when it hits tries to check the second (non-existing) cookie I get the same error of...\nJSON.parse: unexpected non-whitespace character after JSON data\n...that again seems to choke at...\ncookie = JSON.parse(cookie);\nHere's the example page - http://pomona.edu/carhartl/\n. I just wanted to make sure I'm understanding things properly. When I first listed this issue I was able to check to see if a cookie existed or not by something like the following.\nif ($.cookie('doesnt_exist') == 'null')\nThat worked until I updated my jquery.cookie.js code because I saw there had been some updates. Now that same code errors. The documentation says that checking for a cookie that doesn't exist should result in \"null\" but that no longer seems to happen because of code changes in the last few days. Sorry if I'm misunderstanding anything.\n. ",
    "klieber": "Hi,\nJust reading through this and wanted to make a suggestion.  Have you considered something like this:\n``` js\n// create a new cookie instance with a converter\nvar $jsonCookie = $.cookie.withConverter({\n  read: function(value,name) {\n    return JSON.parse(value);\n  },\n  write: function(value,name) {\n    return JSON.stringify(value);\n  }\n});\n// normal behavior\n$.cookie('foo', 'bar'); // write string 'bar'\n$.cookie('foo'); // return 'bar'\n// using converter\n$jsonCookie('biz', {example: 'bang'}); // converts object to json string then writes\n$jsonCookie('biz'); // reads json string and converts back to object\n```\nYou could even get a little more creative and do it like this:\n``` js\n$.cookie.addConverter('json', {\n  read: function(value,name) {\n    return JSON.parse(value);\n  },\n  write: function(value,name) {\n    return JSON.stringify(value);\n  }\n});\n// normal behavior\n$.cookie('foo', 'bar'); // write string 'bar'\n$.cookie('foo'); // return 'bar'\n// using converter\n$.cookie.json('biz', {example: 'bang'}); // converts object to json string then writes\n$.cookie.json('biz'); // reads json string and converts back to object\n```\nThat would lead to the possibility of still adding a converter to the main cookie function if needed:\n``` js\n// add a converter to the main function\n$.cookie.addConverter({\n  read: function(value,name) {\n    return value.replace('z','a');\n  },\n  write: function(value,name) {\n    return value.replace('a','z');\n  }\n});\n// add a special json converter\n$.cookie.addConverter('json', {\n  read: function(value,name) {\n    return JSON.parse(value);\n  },\n  write: function(value,name) {\n    return JSON.stringify(value);\n  }\n});\n// using main function with converter\n$.cookie('foo', 'bar'); // write string 'bzr'\n$.cookie('foo'); // return 'bar'\n// using special json converter\n$.cookie.json('biz', {example: 'bang'}); // converts object to json string then writes\n$.cookie.json('biz'); // reads json string and converts back to object\n```\nTake it or leave it.\n. ",
    "dylanpyle": "OK, looks like this is a lower-level issue related to IE9 security features (for context: http://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer/389458#389458). I'll close this issue.\n. ",
    "maxim-dev": "$.cookie.raw option is useful, thanks. But it works only when reading. It will not help in this case (server-side written cookies), if I'm not mistaken.\nI mean that in some cases, the function removeCookie() returns true, even though cookie are not deleted.\nI suggest to check the name of the cookie according to the $.cookie.raw option.\n. ",
    "Hengjie": "I've forked it and fixed it by removing AMD from jquery.cookie but obviously it's not a long term solution. https://github.com/Hengjie/jquery-cookie\n. ",
    "Lundgren": "I ran into this problem recently when using a third party component that included jquery.cookie.js.\nThe problem described by Hengjie occurs when you import it through a script tag and is because RequireJS require each module to have a name. When importing it through Require, the way you did in the gist, it gets the file name as module name. \nHere is an updated version of your gist with the crash: https://gist.github.com/Lundgren/8088286\nA simple solution for RequireJS is to give the module a name:\ndefine('jquery.cookie', ['jquery'], factory);\nNot sure how it would affect other AMD loaders though.\n. Yeah that's no bad solution in this case, switching the order around will make sure it gets loaded as \"Browser globals\" which won't matter since it attach itself to jQuery. \nBut it could be problematic if you load jQuery as an AMD module since $ or jQuery wont be a global objects in that case.\n. ",
    "bstromquist": "I use cookies to implement a session timeout (20 minutes).  The timeout needs to affect multiple browser tabs so all application tabs poll the cookie value.\nFrom: Fagner Martins [mailto:notifications@github.com]\nSent: Thursday, March 07, 2013 3:58 PM\nTo: carhartl/jquery-cookie\nCc: Brian Stromquist\nSubject: Re: [jquery-cookie] setting 'expires' with a fractional value doesn't work (#162)\nWhy would you specify less than a day for a cookie to be removed?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/162#issuecomment-14588934.\n. ",
    "jlucvs": "Thank you\n. How to expiring cookie to 12 hours ?\nThank\n. ",
    "spirelli": "Really? It would make absolute sense as it would keep a website's user experience simpler and more efficient for audiences who don't fall under this regulation. To me that should be a core funcition.\n. ",
    "AdrianRamiro": "@spirelli you're right, that should be a core function, for a framework, a CMS or a site. The fact that is cookie related doesn't implies that is related with this plugin's funtionality (a jQuery helper for accessing cookies)\n. ",
    "LosManos": "@spirelli IMHO a jquery plugin shouldn't have knowledge about politics. But I see usefulness in having a jquery-cookie-contribute or rather a jquery-cookie-scaffold project. It could also contain a GUI for experimentation and enumerations of functionality so one can see how it works before writing the code oneself.  FWIW\n. ",
    "incorvia": "I'm having this issue too.. was it resolved?\n. ",
    "laichendong": "yes, thanks. Re-read source , I found the config option raw : true can control if need encode/decode the cookie key and value. so, I have a question, why need this option and the default value is false.\n. ok, i will read the others issues. thanks a lot.\n. ",
    "tranngocsam": "Thanks @carhartl \nIt's my fault, I didn't set path when remove cookie.\nThanks a lot for your nice plugin\n. ",
    "phuonghv09": "Hello,  carhartl \n I was used your jquery lib to delete cookie but I can only delet cookie in IE8, not delete on Firefox.\n Do you confirm that?\nCode: $.removeCookie('EPC_ENO' , { path: '/bpr1740/',domain:'phuonghv-01.tsdv.com.vn'});\nThank you and best regards!\nH.Phuong\n. Hello,  carhartl. Thank you for reply!\n- I write cookie form server side ( use java struts)\n- jQuery lib: version 1.91\n- jQuery cookie:  v 1.3.1\n- When I use IE8, all cookies was cleared, but Firefox was not. \n  -Domain and path of cookies in IE and Firefox  is same, You can see this picture to more detail\n  \n  Please help me.\n  Thank you!\n. sorry, jQuery v1.9.1 :(\n. Thank you  carhartl, I fixed this bug. Your library is good.\nHow to fix:\n- Current version:\n  I set   domain and path of all cookies form server before send to client\n- Previous version I didn't set the path and domain).\n  Thank you so munch!\n. ",
    "jldupont": "FYI, I've changed the following:\n```\n/*\n * @param {string|undefined} key\n * @param {string|Object|number|null=} value Value (optional)\n * @param {Object=} options Options (optional)\n /\nvar config = $.cookie = function (key, value, options) {\nif (key===undefined)\n    return;\n\n```\nAnd I don't have warnings anymore.\n. Oh, I see. Well the annotations are ok still.\n. ",
    "tjoyal": "I would understand if I had used the default API to set the cookie but I created it with the library.\nI'll try to dig the problem over the next few days.\n. The sample of code I provided is what I am using, but I was able to track down that I had cookies with page specific paths that lead to the confusion. \nWhat I do not understand is how these paths could be setting themselves (the cookie doc is quite clear, if not set it should be /). \nI am quite certain this must be related to some other part of my tech stack.\n. ",
    "rnduldulaojr": "Hi, i'm using the recent version of jquery cookie.  I saw it as the solution to our problem of remembering which tab was last activated before reloading or refreshing the page from a stackoverflow entry.  I set a cookie named \"tab\" with an expiry and path.  The problem was two \"tab\" cookies were being set like the one described.  I 'temporarily' solve this situation by calling $.removeCookie before setting a new value.\n. ",
    "TonnyTT": "I have the same issue, there is one entry to set cookie\n$(\"#dashboard-menu .menu-item\").click(function (event) {\n        var menuItemId = $(this).data('menuitem-id');\n        $.cookie('active-menu-item', menuItemId);\n    });\nbut there are two same key in document.cookie:\n\"active-menu-item=4; active-menu-item=2\"\ntoo weird~\n. ",
    "malhayek2012": "what do you mean? I want to create a cookie value and they set it again to a different value from a different page\n. So how can i create a cookie and then change it's value from a different page?\n. Sir,\nThanks for your help. I have done both methods.\nFirst $.cookie('foo', 10, { path: '/' } );\nSecond\n$.cookie.defaults = { path: '/' };\n$.cookie('foo', 10);\nBoth are not working! every time I change this I clear out my cookies yet I have tried it on a different PC and it still not working.\nIt seems that on each place I try to re-assign the cookie value it creates a new cookie for that page and not across the site. I am not sure what else to do?\nI am using Google Chrome if this makes a different. I apreshiate your help as I am running into dead ends with this I am not to javascript and I dont have a lots of experiance \nif you like to evaluate my code here it is \n    $(document).ready(function(){\n```\n    $(window).on('unload', function(){\n        $.cookie('phone_call_timmer', $('#timer').val() );\n });\n\n        $('#timer').runner(\n        { \n        autostart: true,\n        milliseconds: false,\n        startAt: <?php if( isset($_COOKIE['phone_call_timmer'])) echo convertTimeToSeconds($_COOKIE['phone_call_timmer']) * 1000; else echo 0; ?>\n        }\n    );\n\n```\n});\nThanks you for your help :)\n:+1: \n. Sir, \nI have replicated my files and I put an example on line for evaluation\nhttp://lvwebsolution.com/cookies-test/index.php\n. This is how I remove the cookies that was created with a path\n$.cookie('phone_call_timer', stopped ? 0 : $('#timer').runner('info').time, { path: '/'})  // this is how I set the cookie\n$.removeCookie('phone_call_timer', { path: '/'} );   //this is how I remove\nI also create other cookies like this \n$.cookie('other', 'value');\n$.removeCookie('other' );\n. I don't have a way to put my code on line. It is on a local network. I currently have version 1.3.1\nhttp://plugins.jquery.com/cookie/ \n. ",
    "michaelglass": ":+1: \n@FagnerMartinsBrack components.json/bower.json is the file that tells the bower package manager how to load this library / its dependencies.\n. shouldn't this issue be closed?\n. ",
    "warrenwyf": "I saved a cookie named 'token' without using path, the cookie should be readable by all requests from my site.\nI will try the latest master version and give you feed back later.\n. With the latest master version, this issue seems not exist any longer.\n. I see, I considered path=/ is the default option, my mistake. Thank you very much.\n. ",
    "ErichBSchulz": "so am I right in thinking if all you are storing is single values eg string, number then there is no need, but if you're storing a more complex value (array/object) then you're best storing it after setting the json flag?\n. ",
    "frxnz": "Derp, thanks. Don't know how I missed that.\n. ",
    "internetgho5t": "Thank you for you're response, but I already solved the problem, I do have one more though, how to you make it so the user can click a button or a link or whatever in JavaScript cookies and delete the cookie?\nThanks,\n- Brandon\nOn May 7, 2013, at 3:25 PM, Klaus Hartl notifications@github.com wrote:\n\nOr that the cookie is gone after restarting the browser?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "rainabba": "Closed just like that huh? Why not just tell me that I'm stupid and wasted\nmy time for trying to help? This is the first of at least a dozen plugins\nI've used since jQuery 1.6 that has behaved this way.\nIf you're not interested in seeing why it's failing when implemented\ncorrectly, so be it but why bother with a bug tracker then?\nOn Jun 5, 2013 3:48 PM, \"Fagner Martins\" notifications@github.com wrote:\n\nMake sure jQuery and jQuery.cookie is properly loaded in your page before\nyou call $.cookie. Making the plugin source to load when DOM is ready by\nusing $(function() {}) is not the right move.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/190#issuecomment-19014451\n.\n. In \n\n<script type=\"text/javascript\"\nsrc=\"/Scripts/jquery-1.9.1.min.js\">  \n_//AFTER jQuery and WITHOUT my simple fix calls to $.cookie() throw\n*_Reference Error on $.cookie()*          //AFTER\njQuery and jquery.cookie.js\nIn Batchman.Js\n$(function () {\nconsole.log('Does cookie exist? Cookie = ' + ($.cookie() ?\n'defined' : 'not defined')); //Reference Error on $.cookie()\n});\nIf I then \"fix\" jquery.cookie.js as I mentioned earlier, the console.log\ncall yields: \"Does cookie exist? Cookie = defined\" and $.cookie() yields\nsome of my apps cookies as added by asp.net. Once again, I've been using\njQuery and plugins for years without such an issue, am presently using\nplugins (in this app too) and tell me \"\" might seem logical but is actually\ninsulting but forgivable. Your assumptions are not.\nI notice too that the structure of your plugin is different from a few\nothers that I spot checked. For example:\nYou've wrapped everything in \"(function ($, document, undefined) {})\". When\nI remove some of that, the plugin works just fine and interestingly, my\noriginal \"fix\" is essentially what we're left with.\nhttp://jsfiddle.net/AxRsb/\nIn fact, of all the plugins I just checked (first 5 I ran across; random\nessentially), not one uses the approach yours does and ALL make a call to\n\"$.fn.pluginName = \" which yours does not.\nEven if there's something \"odd\" at my end, the fact remains that I've never\nhad another plugin fail to work as-is and yours works with a fairly simple\nedit. Still insist on telling me that the plugin isn't the issue?\nOn Wed, Jun 5, 2013 at 3:57 PM, Fagner Martins notifications@github.comwrote:\n\nI'm sorry, but I closed because this issue is clearly not related to the\nplugin. It does not prevent us to trying to find out the root cause though.\nAs I said you need to load jQuery and jQuery.cookie before calling\n$.cookie. A code snipped would help.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/190#issuecomment-19014823\n.\n. Thanks for explaining the chaining/plugin issue. I am using 1.3.1 from\nMaster (downloaded from master/raw). AMD support? Neither of my fixes\nprovide a significant clue as to why the plugin isn't available when loaded\nas-is?\n\nOn Wed, Jun 5, 2013 at 11:22 PM, Klaus Hartl notifications@github.comwrote:\n\nWell, if a plugin adds a function to $.fn it is adding a chainable method\nto jQuery. The cookie plugin simply doesn't need that. What does chainable\nmean? When looking for DOM elements such a function will iterate over the\nresult and operate on these, like show for instance: $('div').show().\nThe cookie plugin doesn't do/need that and that's why it's different. By\nno means does that indicate it's a bug or somehow wrong.\nThe issue in question may relate to the AMD support. Which version are you\nusing, could you please give latest from master a try, if that's not what\nyou're using?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/190#issuecomment-19027015\n.\n. I'm not familiar with how to get head. Can it be done in browser or must I\nuse git?\n\nOn Wed, Jun 5, 2013 at 11:40 PM, Klaus Hartl notifications@github.comwrote:\n\nNo, so far, it isn't providing a clue. The plugin works in many other\nenvironments without the problem. Could you give head a try, please? We\nadded AMD support after 1.3.1 and that also changed the way we're\ninitializing the plugin (similarly to how you fiddled with it).\nI'm also thinking, could it be a browser specific issue?\nLast guess: I've seen such an issue in the past when jQuery was loaded\ntwice accidently, could that be the case?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/190#issuecomment-19027561\n.\n. Same issue. \"$.cookie\" is undefined.\n\nOn Thu, Jun 6, 2013 at 1:54 AM, Klaus Hartl notifications@github.comwrote:\n\nEither git or save this as js:\nhttps://raw.github.com/carhartl/jquery-cookie/master/jquery.cookie.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/190#issuecomment-19032466\n.\n. Looks like I did have jQuery loaded twice. Good call.\n\nOn Thu, Jun 6, 2013 at 7:13 AM, Fagner Martins notifications@github.comwrote:\n\n@rainabba https://github.com/rainabba\nCheck out this site http://sscce.org/, it provides tips to help you\nreduce your code in order to get a clear view of the portion that is\ncausing the problem. It is impossible for us to find the cause of why it is\nnot working in your environment without any code to look into. Sometimes\nyou can get into the root cause easly by just eliminating irrelevant code.\nIf reducing your code still did not solved then you can post the code for\nus to take a look into.\nIt is better also to wrap and ident your code using the Github Flavored\nMarkdown http://github.github.com/github-flavored-markdown/. It makes\neasier to read and to understand.\nAccording to the given information so far, it is probably related to\njQuery being loaded twice in the page.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/carhartl/jquery-cookie/issues/190#issuecomment-19047641\n.\n. \n",
    "shahumang": "rights that same problem is here ... i have also include  all loading file which js , jquery ,josn is required for cookie are as below in my code \njson.html\n \n\n\n\n    function add()\n{\n\n  var basketdata=[\n                {\"p\":\"a\",\"q\":100}\n                ];\n $.cookie(\"basketdata\");\nvar arr= JSON.parse($.cookie(\"basketdata\"));\nalert(arr);\narr.push({\"p\":\"c\",\"q\":200});\n\n}\n\n\n\nClick on button\n\n\nError:\nTypeError: Object function (e,t){return new x.fn.init(e,t,r)} has no method 'cookie'\nso plese give solution this ...\n. ",
    "tremby": "Well the thing here is, the stored cookie is valid JSON (or at least it is parsed by JSON.parse just fine), being a quoted string. It's the unescaping routine removing the quotes which is breaking it in this case.\n. That's exactly what I'm saying. Perhaps a quoted string (or, for that matter, a number or a boolean) is not technically valid json when alone -- perhaps I'm missing something but the JSON website isn't entirely clear on that -- but the fact is that JSON.parse accepts them. See:\n```\n$ node\n\nJSON.parse('{\"key\": \"value\"}')\n{ key: 'value' }\nJSON.parse('[0, 1, \"test\"]')\n[ 0, 1, 'test' ]\nJSON.parse('\"a string\"')\n'a string'\nJSON.parse('33')\n33\nJSON.parse('false')\nfalse\nJSON.parse('null')\nnull\n```\n\nAs jquery-cookie stands, with $.cookie.json switched on it supports setting and reading all of these flawlessley EXCEPT a string. See (in Chrome console):\n```\n\n$.cookie.json = true\ntrue\n$.cookie('object', {key: 'value'})\n\"object=%7B%22key%22%3A%22value%22%7D\"\n$.cookie('object')\nObject {key: \"value\"}\n$.cookie('array', [0, 1, 'test'])\n\"array=%5B0%2C1%2C%22test%22%5D\"\n$.cookie('array')\n[0, 1, \"test\"]\n$.cookie('number', 33);\n\"number=33\"\n$.cookie('number')\n33\n$.cookie('boolean', false)\n\"boolean=false\"\n$.cookie('boolean')\nfalse\n$.cookie('null', null)\n\"null=null\"\n$.cookie('null')\nnull\n$.cookie('string', 'some string')\n\"string=%22some%20string%22\"\n$.cookie('string')\nundefined\n```\n\nIt all seems like desired behaviour to me, and very nice and useful desired behaviour, except suddenly not being able to read a string.\nAlso, I disagree that a cookie should not be removed if in JSON mode and it isn't deemed a valid JSON cookie. Surely if you call $.removeCookie you want that cookie removed no matter what is in it? It's very unintuitive for it to pretend it doesn't exist.\n. The line I'm replacing had double quotes. Other strings in the same file which have single quotes in them are also enclosed in double quotes.\n. I've addressed this, adding back a new test for invalid JSON, with the commit I just added.\n. What? With json switched off this will store the string v in the cookied c, which is not valid JSON. When json is switched back on, we want it to fail to read it, but not throw an exception, and return undefined. I fail to see what is wrong here.\n. No, when in json mode if the plugin cannot parse the contents of a cookie as JSON it is supposed to return undefined but not throw an exception. I don't see what you're saying is misspelled.\n. ",
    "Inscure": "Check if you can read each cookie separately.\n. ",
    "arunkumarg": "Yes, I am able to read each cookie separately.\n. I am using v1.3\n/!\n- jQuery Cookie Plugin v1.3\n- https://github.com/carhartl/jquery-cookie\n  \n- Copyright 2011, Klaus Hartl\n- Dual licensed under the MIT or GPL Version 2 licenses.\n- http://www.opensource.org/licenses/mit-license.php\n- http://www.opensource.org/licenses/GPL-2.0\n  */\nAlso I am using following code to set the cookies\n$.cookie(session_cookie_name, JSON.stringify(theSessionObj), {expires: null, path: '/', domain:cookieDomain});\n. I have replaced cookie.js with latest.  Still it is returning null.  If I access through document.cookie all the cookies coming in encrypted format.  \nI m not sure what is wrong in my code.\nI am also trying in Firebug console  command line executor.\n. \n. I have attached the image for u r reference.\nIf I access through document.cookie all cookies are coming, but on calling $.cookie() null response is coming..\n. ",
    "Carlowww": "I'm using the latest jQuery Cookie. But why the simplified example? The bug is simple isn't it? Safari doesn't seem to accept/save the cookies (anymore).\n. I think you're right about the insufficient information. But I really don't know how I can accomplish a (good enough) simplified test case. So I'll do it like the code below. Maybe you can see very quick what I'm doing wrong. I've noticed that it Only works with FF. \nI'm working with fancy box. The first time that someone comes on the site, they'll get a disclaimer notice. Click on accept, and it is OK to look at the site.\nhttp://equitypowerfund.com/code.txt \n. What am I missing? I also just deleted the  path: '/' . But that didn't make any difference. \n. I made the changes. And now I'm able to see an error message on IE.\nObject doesn't support this property or method\nLine: 51\nChar: 4\nCode: 0\nUrl: http://equitypowerfund.com/js/jquery.cookie.js\nBut there's something strange going on. I'm working with Concrete5. And when I'm logged in and I accept the cookie, then it does seem to save the cookie. Even when I logout and check the website, the massage doesn't show up anymore. \n. It seems to be affecting more version of IE and also Safari doesn't work yet. \n. But isn't it weird that when you are logged in, that it Does save the cookie? And I also have an error in Safari:\nTypeError: 'undefined' is not a function (evaluating 'options.expires.toUTCString()')  jquery.cookie.js:55\n. The outcome is:\nError\n  Line : 2\n  Message: \"Can't find variable: date\"\n  SourceId: 2090807232\n. It does appear to be a conflict in scripts I think. Because also Firefox doesn't save the cookie. So how can I find what the conflict is?\nAlso in Firefox I get this error message:\nTimestamp: 13/7/2013 1:36:47 PM\nError: TypeError: options.expires.toUTCString is not a function\nSource File: http://equitypowerfund.com/js/jquery.cookie.js\nLine: 55\n. ",
    "ravi9654": "I have used Jquery-cookie plugin but it gives Error: $.cookie is not a function, my code as bellow.\n```\n $(document).ready(function() {   if($.cookie('chat_user_name')!=='undefined'&&$.cookie('chat_user_id')!=='undefined'))\n          {                                         \n              requestChat($.cookie('chat_user_name'),$.cookie('chat_user_id'));   \n       }\n\n```\n});\nI have also used noConflict() but its worthless.\n. @MarventusWP : Thank YOu.\n. ",
    "zmillman": "Looks like it was other unrelated code that was the problem. It would still be nice to know what the requirements are in the README though :)\n. ",
    "tigerhawkvok": "Trying to call that cookie, though, still gives an odd return:\n``` javascript\n$.cookie('test',{path:'/'});\n\n\"test=%5Bobject%20Object%5D\"\n```\n\nand when looking at all the values:\n``` javascript\n$.cookie();\n\nObject {test: \"true2\" }\n```\n\ndoesn't show that it's set as \"true\" anywhere.\n. Doesn't it seem reasonable, then, to, when writing a cookie with the same name as an established one, remove the previous one? That seems like less unintuitive behavior.\n. ",
    "jamieburchell": "Yes, latest release v1.3.1.\nSee line 61\nvar result = key ? null : {};\nInitially set to null if a key is provided and returned if there is no matching cookie with that name.\n. That makes sense but for anyone using the latest release that documentation is misleading. I was checking for undefined and wondering why it was never true.\n. Yes, when I realised checking for undefined wasn't working I looked through your code and realised it was because you are returning null instead. I'm now checking for null.\nTesting for a cookie's existence by evaluating the return value of $.cooke alone isn't reliable if your cookie value is zero for example.\n. You misunderstand :)\nLet's say you have a cookie named \"foo\" the value for which is 0 (zero). You might check that the cookie exists with:\nif ( $.cookie('foo') ) alert ('yes');\nI'm pointing out that checking this way is unreliable, since in this example the cookie exists but evaluates to false. You must check the return value is not \"undefined\" (or in the case of the latest release version, \"null\")\n. You're absolutely right. You'll get away with it because \"0\" is a string and all cookie values will be truthy strings.\nIn which case I guess checking for null or undefined explicitly isn't strictly necessary other than perhaps good practice. Just remember you're checking for null not undefined until the HEAD is released :)\n. This is why I was checking if the return === undefined (as per the doc) but null !== undefined.\n. ",
    "Cranavvo": "I wouldn't say it was an issue, more on an exploit. Cookies, in my opinion, should only be changed through scripts within the code not through the developers console. Is there anyway to make it so a cookie can not be altered possibly?\n. ",
    "panozzaj": "Not very familiar with this project, but I ran across a similar issue today. Looks like some workarounds are listed in: https://github.com/carhartl/jquery-cookie/issues/170, https://github.com/carhartl/jquery-cookie/issues/204, and https://github.com/carhartl/jquery-cookie/pull/166\nHope this helps.\n. ",
    "fisharebest": "I do not set the invalid cookie.  A third-party library sets it.  I do no know which one.\nSince I have no control over which third-party libraries are used with my code, it means an invalid cookie can appear at any time, and without warning...\nI know I can use \"raw:true\".\nBut doesn't this mean that anyone whose code will be used with (buggy?) third-party code can only every use \"raw:true\" ?\n. Ignoring the cookie is fine by me.  This code illustrates my scenario.  A invalid/unexpected cookie prevents me from accessing a valid/expected cookie.\n<?php setrawcookie('evil', 'bar%'); ?>\n<?php setrawcookie('good', 'foo'); ?>\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"js/jquery-1.9.1.js\"></script>\n        <script src=\"js/jquery.cookie-1.3.1.js\"></script>\n    </head>\n    <body>\n        <h1>Test</h1>\n        <script>\n            alert(jQuery.cookie(\"good\")); // Causes unhandled exception\n        </script>\n    </body>\n</html>\n. > Could you use the latest version from head? It no longer has this issue.\nThis works.  Thanks.\n. ",
    "Messilimeng": "Can you give me a example to  create cookies in minutes?\n. ",
    "AliSoftware": "Yup, you're probably right, I guess it would be better.\nI played the safe card here, checking the name every time to avoid ever registering the empty key in the object, but in fact testing for [''] before the loop should be sufficient and the only case in which it may happen \n. ",
    "CBox": "So why if I log the cookie outside the click function I get the Cookies?\nconsole.log($.cookie());\n$('#selector').on('click', function(event) {\nevent.preventDefault();\n});\n. You was right, thank you.\n. ",
    "l1987lll": "Sorry,I try it again today and success! I don't know why. sorry!\n. ",
    "lovenick": "Mac Chrome 29.0.1547.65 - no cookie is being set. Same code works in Firefox and Safari.\n. Actually, upon second read perhaps it's not. $.cookie(); is returning undefined, not null. Resources panel is showing no cookie is being set when the file is loaded locally (file://...). Live version is working. Apologies for jumping the gun.\n. Yep, it appears to be my mistake and a protocol issue. Loading via server works just fine.\n. ",
    "Dorian": "I have v1.3, MacOS Chrome 29.\n$.cookie() === undefined\n=> false\n$.cookie() === null\n=> true\nHere is a paste of the function: http://pastebin.com/M6p0sSuS\n(And by document.cookie is 144 chars long, and otherwise $.cookie('key') works fine\n. Ok thanks, I though it was a minor version change\n. ",
    "idevin": "Solved, foundationjs cracks methods\n. ",
    "mclenithan": "@carhartl Sorry!  Here you go...\n```\n\ndocument.cookie = 'badcookie=In%E9nIn%E9n%E9'\n  \"badcookie=In%E9nIn%E9n%E9\"\n$.cookie('bearerToken')\n  URIError: URI malformed\n```\n\nIf $.cookie sets the cookie, it will work fine.  If something else feeds the cookie then it screws with the flow.\n. Exactly my point in your first line, but sometimes you deal with 3rd party APIs which may not use the same encoding process, (Gigya, Facebook).  \nUsing raw would just return the string back with out changing %E9 into the \u00e9. I would have to check every user's cookie for that %E9 prior to running $.cookie so it wouldn't fail, or using raw and then changing the output on every cookie call.\nSeems to me it makes more sense to make a quick RegEx for it like you would for pluses.  Its such a rare problem and I understand why you wouldn't want to act on it, but my money is on the fact that it will come up again.  \nThanks again for the library and the hard works that goes into it!\n. So, I was lazy when I was running through this, but I still think I have a good case :)   \nIt looks like you did the graceful error out 6 days before I submitted this ticket.  When I checked to see if we were using the same thing, I just checked if it was 1.3.1 as the branch says, (my fault).  For my specific case, if I use your latest commit, it works for me! (mainly because it doesn't break the loop and I can just bypass bad characters)  It'd be a pleasure to have that little regex, but since it doesn't matter to me anymore, I honestly could care less.\nMy request now is that you do another release with your new changes so bower can pick it up?  I am a pain in your ass right?\n. ",
    "GrantCodesCodes": "This would delete all cookies with a specified prefix.\nIf I had a bunch of cookies:\nsomething1, something2, otherthing1, otherthing2\nAnd I called $.removeCookieWithPrefix('something');\nIt would remove all cookies that start with something and only these would remain:\notherthing1, otherthing2\n. ",
    "kalenjordan": "Okay thanks.  Actually realized that I can manage jquery-cookie under composer without needing to publish to packagist, so I can likely manage this myself without needing any update to this repository.\nThanks for taking the time to respond.\n. ",
    "drosendo": "Found the problem...\nIt's the cookie size limit, once it reaches 2.1KB (Firefox) it no longer allow to be added new stuff to it...\nIm storing complex Json data on to the cookie and it seems it gets big...\n. ",
    "georgyk": "Thanks for the reply.\nThe problem arose because my code runs in a page where tons of other libraries run and handle their own cookies, which means that even if I don't use escape()/unescape(), anybody else can still do we end up with a \"corrupt\" the cookie pool.\nAs you suggest, the solution would be to use raw = true in that context and code/encode outside.\n. Thank you.\n. ",
    "sorahn": "jQuery, Bootstrap, and Font Awesome right off the top of my head.  jQuery probably optimizes their minified version a bit more than once through uglify, but that might be a bit over the top.  You already have a grunt file, you could have a post commit git hook that would generate and commit the min file.  Or just have grunt rebuild it on change. \n. You already have Grunt in your repository, already set up to uglify your code. Nothing has to be running to use the git hooks to automate testing/minification.  And I like how you just glossed the fact that both Bootstrap and FontAwesome both having minified versions checked in to Github.\nAfter some more digging it looks like jquery is using a bower build script (https://github.com/jquery/jquery/blob/master/build/bower-install.js), but I'm not sure how that gets triggered.\n. Look man, at this point you're just being difficult.  You also can't enforce that I run grunt when I check out your repository to do the tasks you've already automated.  Including the one I'm requesting be checked in.\nWhat if I don't run the unit tests you included? What happens?\nThis was a pretty simple request, to include a file that's automatically generated (probably every time you save, because I would bet that you have your editor set up to lint your code automatically), in your repository so that people using it through the package manager that you specifically added support for, could just use it.\nI even provided you an alternative for including a build script that would only generate it when someone used said package manager.\nI really cannot fathom the resistance here.  That's fine, it's your repository, I'm also free not to use it.  I'll move along.\n. Can you please add a comment or reference or something to this ticket when you've built a release, I would like to update my bower requirement version :)\n. ",
    "martinverner": "The cookies are set by Google Analytics. It sets the domain with a dot in the beginning for some reason. So if I specify the domain as my domain this plugin can't remove the cookie - that is okay. The problem is the method returns true instead of false.\n. That looks a lot like what I just did myself... :) Thanks you...\n. Thank you... :)\n. ",
    "MarcBrillault": "I'll try to find the code which causes that, I'll keep in touch.\n. I use the plain version. but it's strange, it seems to work differently on different domains. I continue to check this.\n. It seems adblock interfered with an htaccess file, so I think there weren't any issue.\n. ",
    "treyhyphen": "After much cutting of various elements in my page, I narrowed it down to an element which I'd given id=\"cookie\" in its HTML tag. Apparently that breaks this plugin. If I had to guess, it's due to all the references to document.cookie in the plugin's code and how Chrome handles all that. Don't know if there's any way to \"fix\" this in the jquery.cookie code (doubtful), but just wanted to post my solution in case anyone else was driving themselves insane over this. \nTL;DR: do not give any HTML elements on your page an ID of \"cookie\" if you want this plugin to work in Chrome\n. ",
    "balexandre": "I was excited with this ... until I saw $99/m ... :-1: \nI get that they need to get money, but It's to high for only 2 persons\n. > \"my washing machine\" does work, what am I doing wrong?\nDoesn't really give you anything to go on, even if you're an expert in washing machine does it?\nAny chance you tell us what are you doing and how?\n. ",
    "rodoabad": "All IEs.\nvar foo = $.cookie('foo');\nChrome = undefined\nIE = doesn't return anything.\nBest way to check is to do (typeof foo === 'undefined');\n. Right.\nSo here's what I was trying to do...\nvar foo = $.cookie('foo'); // assume foo hasn't been created yet\nif (foo === 'x' || foo === 'undefined') { //do something };\nThat will work on Chrome because using \"$.cookie('foo')\" alone returns undefined without using \"typeof $.cookie('foo');\"\nNow for IE \"$.cookie('foo')\" it doesn't work that way.\nThat's probably a bad way of checking things which is why I opted to just use \nif (foo === 'x' || (typeof foo === 'undefined')) { //do something };\nThis works on IE.\nAlso I'm probably not checking it properly or there are better ways of checking if the cookie is there or not.\n. ",
    "fnonaka": "washing machine is funny! lol\nIf the browser is Google Chrome AND the page is a local file, it does not work. So the cookie fails for Google Chrome on local files. There's no server or it's not in a wwwroot - the files are just in a folder in the hard drive. I read that if you put in a web server, it works... something about security on Chrome?\nJust test it in Chrome in a local file, and you will see... also, search google for \"jquery-cookie chrome\" - lots of people commenting about this!\nI'm using it in a local machine, in a HTML prototype... I was doing it at my job, but now I'm at home - I don't have the code here right now!\n. carhartl, \n\"start Chrome with --enable-file-cookies to make this work\"... where is it? If this option is in the \"Configuration\" > \"Advanced Configurations\" > \"Privacy\" > \"Content Setup\", it's already done - my \"washing machine\" has setup it by default lol. \nAnd it doesn't work! WTF? Only Chrome doesn't allow it to use cookies in a local file... IE and FF works fine!\n. too bad... So I ca't use it in a HTML Prototype... that's a pitty! It's better duplicate the HTML pages for each user, for example...\nAnd yes, please put a warning, but at the site, before people download it... I spent about 2 hours in my job trying to use it! Thanks!\n. ",
    "googol7": "Yes - you're right. The simulator still used v1.3.1\nThis didn't help:\n- Closing the homescreen app\n- Settings |\u00a0Safari |\u00a0Clear Cookies and Data\n- jQuery.get('https://localhost:8000/static/scripts/jquery-mobile/jquery.cookie.js', function(data) { alert(data); });\nI had to add some get variable in the HTML source: <script type=\"text/javascript\" src=\"/scripts/jquery-mobile/jquery.cookie.js?t=1\"></script>\nand then location.reload(); did help ...\n. ",
    "whyleee": "Yep, sorry, I forgot to look who owns the package in NuGet Gallery (Visual Studio shows only the author, and it is you :)).\nI wrote to NuGet package owners the request to update the package.\n. ",
    "JamesHagerman": "Oh wait. I'm just not understanding the JS Date object.\nThe months start at 0 so 11 = December.\nAnd the library is using Date.toUTCString()... which takes into account your current timezone.\nNever mind!\n. ",
    "blairits": "And what does navigator.cookieEnabled return?\ntrue\nCould you let me know which particular version of Android you were seeing this in, and maybe whether it's in a webview or not?\nIts old version 2.1 android\non newer androids they added support for document.cookie it looks like.\n. it also looks like they still support window.cookie on newer androids.\n. android 2.0 and 2.1 dont support Object.defineProperty its not my phone its a users phone that reported a bug to me on one of the sites i worked on. at least according to the information i can find online they dont.\n. i dont know defineGetter and defineSetter? work in android 2.0 and 2.1 and cannot find any info about it online\n. its not my site its a clients site ill see if i can contact them and get this added to test\n. cool my client went offline when i asked them about changing the file.\n. ",
    "neogermi": "true, I had to change it for our project as we want to keep the \"boss\" check enabled in our projects. Thanks for pointing on that. \nThanks a lot for your work and that nice extension to jQuery.\n. ",
    "AndreasHassing": "Apparently ZURB's minified Foundation includes an older version of jquery-cookie, that messes up the plugin. I've excluded their 'version' of jquery-cookie from my foundation, and it now works again.\n. ",
    "zjypp": "If i want to read the cookie\"test\" in a.xx.com\ncode:\n$.cookie(\"test\",{domain:\"a.xx.com\"}).\nit is wrong.\nIt is still to write cookie,not readh the cookie\n. ",
    "thakerhardiks": "@carhartl : bingo thanks !\n. ",
    "mr-bios": "Hi carhartl,\na snippet would look like this.\nMySite::Application.config.session_store :cookie_store, key: '_site_session', :expire_after => 30.seconds,  secret: '809832908320932809328hd023832m00999saasdasdsa448484894894'\nand some information from the docs is here.\nhttp://rubydoc.info/docs/rails/3.2.8/ActionDispatch/Session/CookieStore\n. yes. it is.\n. i dont need anything setup in the cookie configuration.  all i was hoping for was $.cookie() to be able to see if the cookie is present or not.    the idea is i want to eventually trigger an event for when the cookie expires.  and i figured your lib would be great for that.\n. ",
    "guybedford": "Sure, have done.\n. Thanks!\n. No need to do anything further. There is an override for the 1.4.0 release running here - https://github.com/jspm/registry/blob/master/package-overrides/github/carhartl/jquery-cookie%401.4.0.json\nSo when the next release comes out, this won't be needed anymore.\n. @FagnerMartinsBrack sure you can remove the dated jspm configuration. \nTo ensure that the package works through jspm I would suggest setting the main entry point on npm to src/js.cookie.js instead of just js.cookie.js.\n. Ah right, so the current jspm configuration is actually overriding that and stopping it from working! Ie it will work when the jspm config is removed.\n. ",
    "JonDotsoy": "tanks!!\n. ",
    "Stalinko": "Ok. My bad.\nAdd please into readme that days must be integer. For me it was not obvious. The obvious was that if I need timeout 30 minutes then I use 1/48 as days value. I've spent several working hours to find that out (\nRequesting the above as feature! \n. Guys why more code? Just replace setDays/getDays to setSeconds/getSeconds and multiply \"days\" by number of seconds in a day like in my top msg. Behavior will be 100% the same except that fractional count of days will work correct.\n\n\nThere is no integer in javascript, just Number\n\n\nI used \"integer\" as a mathematics definition. Function \"setDays\" understands only integer numbers. Maybe that depends on browser, but w3c guide and chrome don't allow fraction numbers here.\n. > but it seems irrelevant because it should work that way according to the docs (as you said).\nDon't understand you. It doesn't work, because according to the docs get/setDays doesn't allow non-integer numbers.\nThe difference is 15 bytes. Or 13 bytes if you calculate 24_60_60. Does it really play big role? It doesn't look like author tried to golf the code. I'm sure it still can be shortened minimum twice even after packing.\n. ",
    "gopeter": "I'm getting the same error.\nI'm using Ember.js together with ember-tools and get a Uncaught ReferenceError: jQuery is not defined. I'm using the latest jquery-cookie version and jQuery 1.10.2\n. ",
    "henry19922": "Thank you very much, it works now!\n. ",
    "TheColorRed": "I probably should have gotten a screenshot before I cleared the cookies, but what happens is my-stories-show (according to my example) is in Chome's cookie list 2+ times, so:\nSettings -> Content Settings -> All Cookies and Site Data\nThe cookies shows up in there multiple times, and deleting only deletes one of the cookies I believe (or it doesn't delete either or update either).\nHere is what I think is happening, assume we have 2 cookies named the same thing:\n1. Cookie A gets deleted because it is created before cookie B\n2. Cookie C then gets created (so we still have 2 cookies)\nThen we do the process again...\n1. Cookie B gets deleted because it is created before cookie C\n2. Cookie D then gets created (Again we still have 2 cookies)\nAgain that is just a guess, I have no Idea what is actually happening, but when I get two cookies saved, I can never update the cookies, I have to manually delete them for the code to start working again. I added the path, I don't know if that was the issue or not though, but in my opinion it shouldn't be, because they would then both just be set to the default path and still be the same.\n. ",
    "0liver": "Thanks for answering so quickly - and yes, your clue proved correct! Passing the path option to the removeCookie() method does help and solve the problem.\nI'm wondering if specifying the path option is really necessary - rarely should this be the case. Maybe it's worth a mention in the docs ;-)\n. ",
    "JAgatone": "I figured it out. Thanks!\n. ",
    "lovemewing": "what problem?\n. why not returns empty string if it returns null in IE6 like this: \nresult = document.cookie.match(new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)'));\nreturn result && result[1] || \"\";\n. ",
    "meandavejustice": "It looks like we were still using an old version, I've installed from bower and am no longer seeing the problem. Thanks for the quick response!\n. ",
    "colinrymer": "No issue that I'm aware of; we're no longer using JamJS (we've switched to npm and bower), so you won't hear any complaints from me for ditching support. :grinning: I'm not sure about supporting it without custom code, but I wouldn't bother with it at this point.\n. ",
    "wilmoore": "\ncan you confirm if this still matters\n\nI personally do not have a use for this going forward. The one client that was using volo moved directly to npm. I would hope anyone having this problem would just move to npm as well :smile: \n. Ah...fair enough.\n. ",
    "AndrewEastwood": "When this will be merged into the master?\n. @carhartl Running any NodeJS application you might want to get cookie values received with request.\n@FagnerMartinsBrack I think it is not enough to have condition for \"exports\" object. It seems that the plugin should be updated to run within NodeJS app. See more details here: http://stackoverflow.com/questions/3393854/get-and-set-a-single-cookie-with-node-js-http-server\n. In this case we could keep the AMD support only\n. As far as I understand your approach requires the \"gamma\" module to be installed. Am I right?\n. You're right. I'm using RequireJS for that. Talking about browserify. I've opened http://browserify.org/ and there is the following:\nnpm install gamma\n. You can check implemented AMD support in the https://github.com/moment/moment/blob/develop/moment.js#L2405\nFor instance: if you are using RequireJs or similar we do check \"define\" and \"define.amd\" for existence. If you are running this module within NodeJS application there is the \"exports\" variable. If so we just do export whole library into it. Otherwise we expose the library into global scope.\n. I meant the same. I've sent the link where it's implemented.\nWe can just have the following:\njs\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else {\n        factory(jQuery);\n    }\nand this will be fine.\n. Hey @gaastonsr. Could you adjust commits?\n. Yeah, The function that you've posted is great. Why don't you add it into the core?\n. What about cookieJson ? :)\n. ",
    "gaastonsr": "I'm using it browser-side with browserify. It lets you require modules in the browser like you would on the server.\nI added one commit to the PR, now it should pass the lint.\n. I'm not sure I understood what you mean. But let's say I have my plugin in my vendor directory. I would do something like:\nvar $ = require('jquery');\nrequire('vendor/jquery.cookie');\n. Yes, this is necessary.\nPeople started to use AMD to handle their dependencies at first but now some use CommonJS. This PR is for those people that use CommonJS.\n. Yeah, I forgot. I'll see if I can create a test too.\n. I squashed the commits into one. It can be tested but I don't know if it is worth the burden. We would need to do the same for AMD, right?\n. @FagnerMartinsBrack You're right. Commit amended. We would need to use something like mocha to make the tests.\nI guess it can be done in another issue. What do you think?\n. For AMD it's true. It can be tested that way.\nNow, to use CommonJS style on the front-end you need to compile your source file first. You can't just include a library that then let's you require files.\n. CommonJS defines how modules should work in JavaScript. And their idea is they can be included using a require function that loads it's content in memory. \nModules expose all their functionality through a variable called module.exports.\nNodeJS implements CommonJS modules system. On the browser there was not implementation until browserify came on. Or at least it is the most famous one.\n. To achieve this \"browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single ",
    "givankin": "+1 for CommonJS. browserify's popularity is increasing.\n. Can you bump the version and update the project on npm, please? This CommonJS thing is a showstopper for browserify-based development.\n. would be great, yes\n. ",
    "nickdima": "What about publishing it to NPM? Are you considering it?\n. If you install the package via npm, browserify will now to pick it up from the node_modules folder when you require it in your code.\n. ",
    "charandas": "@carhartl I am trying to manually include jquery.cookie.js (from master) with ember-tools on a rails project. ember-tools allows CommonJS style requires.\n1. I begin by placing jquery.cookie.js at the same path as jquery.js\n2. Requiring in my main application JS like:\njs\n   require('../vendor/jquery');\n   require('../vendor/jquery.cookie');\n3. This throws an error, regardless of jquery.js existing at that path.\n   Error: Error: Command failed: Error: Cannot find module 'jquery' from '/Users/kbdaitch/code/ember/zen_foodie/public/javascripts/vendor'\n4. Changing L14 in jquery.cookie.js to use a relative path fixes the issue.\njs\nfactory(require('./jquery'));\nQuestions:\n1. Why was relative pathing not used in this approved PR?\n2. Is my usecase not supported? Looks like the test workflow recommended is dealing with npm and browserify, which I am clearly not using.\n. Thanks for the quick response :thumbsup: \n. ",
    "hatpick": "It was my mistake forgot to set the path for one of my cookies, other browsers handled it well, but IEMobile needed an explicit definition for path while I was setting cookie. \n. ",
    "iakobos": "Hope this helps: new String('bbb') === 'bbb' //=> false. https://github.com/jacobthemyth/jquery-cookie/blob/master/jquery.cookie.js#L87\n. ",
    "dwvanstone": "This bug (if it is deemed to be a bug) seems related to bug # 4:  https://github.com/carhartl/jquery-cookie/issues/4 . Of course I can easily work around this issue, but it caught me off guard. \n. ",
    "cvrebert": "You may be interested in Savage, if I can ever get around to writing it.\n. Very actively maintained, and used by Bootstrap! I would be happy to answer any questions if you need help setting up an instance :-)\n. @FagnerMartinsBrack Not offhand. It's just a simple HTTP server JAR that runs on an arbitrary TCP port.\nIf you already have a server, it should be possible to run Savage alongside other apps.\nI happen to run Bootstrap's instance on the smallest DigitalOcean droplet size.\n. I think it's better to check whether $SAUCE_ACCESS_KEY is defined (rather than whether $TRAVIS_PULL_REQUEST is set). That way, IIRC, pull requests from repo collaborators will still get Sauce tested.\n. ",
    "robatron": "Thanks for adding this in master. \nETA on the next release? \n. ",
    "chrishacia": "And you can, if you save your cookies as an object... seeing as arrays in javascript are not key value pairs. More like lists. You'd actually have to serialize it, and unseralize it respectively to access it. And you would access it cookie.foo.bar = 'gaz';\n. ",
    "collinotis": "ditto on this. for exactly the same use case.\n. ",
    "peteboere": "+1\n. Since there is a package.json file already should be just a simple npm publish:\nhttps://www.npmjs.org/doc/cli/npm-publish.html\n. ",
    "m82amjaduk": "That will be cool... !!! \n. Jlukic, I agree with you. \n. ",
    "bitflower": "Ok, thanks for testing! \n. ",
    "ahabichd": "Same thing. \nWebsite cdfcdsxm.com checks on windows.ready if cookie \"age-verification\" is set. If not a dialog box is displayed. In IE 11 dialog button \"Yes, I am!\" does not work. When I refresh the page it works. See attached screenshot with the same error message as in the tests.\n\nBtw above works in Chrome, Firefox, Opera and Safari and tests run on file do not show the error message in question for these browsers.\n. Tested it with same IE version on two other machines where it worked. Must be a problem with my IE 11 installation.\n. Did not realize I closed it first time I am using Github.\n. ",
    "ultr4numb": "Oops, you're right that was a copy paste error. However I trigger the compatibility mode via the Settings Icon -> Compatibility View Settings -> Add the site in there. \nFrom there on he doesn't show the div  whereas without the comp mode it works without any problems.\n< meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" > is set.\n. ",
    "nsoft": "Ok so be it. \nCertainly it's not a matter of your library being unable to Mostly I was trying to avoid things like what I found someone doing the other day for 15 min... 15*0.00069 \nGranted declaring a constant would make that clearer, but the hope was to make it easier to write clear code in the first place. \nMy repo's out there for any who want it... https://github.com/nsoft/jquery-cookie Not sure I'll track all the changes here unless requested, or motivated by my needs though.\n. ",
    "thosch6": "Thank you for your fast response. I checked again from a different location, Those errors are still there. See the PDF of your testing suite here:\nhttp://www.guitar.ch/jquery-cookie-1.4.0/jquery.cookie-Test-Suite-errors.pdf\nHow can I get rid of this?\nThanks a lot for your advice!\n. Sorry for being so ignorant! I did not know that \"running in a clean state\" meant to \"erase all cookies in your browser before you start testing\". Off course, after I erased them, testing did not show any errors anymore.\nThanks for your wonderful work!\n. ",
    "MarventusWP": "Hello, ravi9654. I'm not the author of the plugin, but did you make sure the jquery library is being properly loaded and jquery.cookie is being loaded after jquery? Are you loading any other libraries at the same time?\nIn addition, there are a few errors in your code, for instance, the way you are going about testing for \"undefined\". Here's how I would rewrite your code:\n\njQuery(function($) {\n    $(document).ready(function() {\n        if( typeof $.cookie(\"chat_user_name\") !== \"undefined\" && typeof $.cookie(\"chat_user_id\") !== \"undefined\" ) {                  \n            requestChat( $.cookie(\"chat_user_name\"), $.cookie(\"chat_user_id\") );\n        }\n    });\n});\n\nEdit: Also, it might be easier for you to store both the user name and user id in the same cookie, if possible. Here's a little function you could use to get and set the cookie:\n\njQuery(function($) {\n    var ChatInfoFn = function(mode, data) {\n        $.cookie.json = true;\n        var cookieOpts = {\"expires\" : 365, \"path\" : \"/\" }, // change at will\n            cookieName = \"chat_user_info\",\n            cookieCont = typeof $.cookie(cookieName) !== \"undefined\" ? $.cookie(cookieName) : false\n        ;\n        if( cookieCont === false )\n            return false;\n        if( mode === \"set\" ) {\n            cookieCont = {\n                \"userName\" : userName, // complete with user name\n                \"Userid\" : userId // complete with user id\n            };\n            $.cookie( cookieName, cookieCont, cookieOpts );\n        }\n        else if( mode === \"get\" ) {\n            if( typeof data !== \"undefined\" && data in cookie && data !== \"\" )\n                return cookie[data];\n            else\n                console.log(\"Specified data index not set!\");\n        }\n    };\n});\n\nUsage:\nGet:\n\n$(document).ready(function() {            \n    requestChat( ChatInfoFn(\"get\", \"userName\"), ChatInfoFn(\"get\", \"userId\") );\n});\n\nSet:\n\nChatInfoFn(\"set\");\n\nIdeally, if you have write access to the requestChat() function, it would be best if you could pass the entire cookieCont object to it instead of doing it separately, in wich case the ChatInfoFn() function could be simplified to:\n\njQuery(function($) {\n    var ChatInfoFn = function(mode) {\n        $.cookie.json = true;\n        var cookieOpts = {\"expires\" : 365, \"path\" : \"/\" }, // change at will\n            cookieName = \"chat_user_info\",\n            cookieCont = typeof $.cookie(cookieName) !== \"undefined\" ? $.cookie(cookieName) : false\n        ;\n        if( cookieCont === false )\n            return false;\n        if( mode === \"set\" ) {\n            cookieCont = {\n                \"userName\" : userName, // complete with user name\n                \"Userid\" : userId // complete with user id\n            };\n            $.cookie( cookieName, cookieCont, cookieOpts );\n        }\n        else if( mode === \"get\" ) {\n            return cookieCont;\n        }\n    };\n});\n\nGet:\n\n$(document).ready(function() {            \n    requestChat( ChatInfoFn(\"get\") );\n});\n\n. No pb! Beware: I made a typo in the first code snippet:\n\nif( typeof data !== \"undefined\" && data in cookie && data !== \"\" )\n\nshould read:\n\nif( typeof data !== \"undefined\" && data in cookieCont && data !== \"\" )\n\n. Yep, Carl, you are absolutely right. Enumag, you could do something like this to evaluate the cookie \"booleanly\", :-)\n```\nfunction toBool(str) {\n    return Boolean(str);\n}\ntoBool($.cookie(\"test\"));\n/*\n TESTS \n\"false\" = false\n\"\" = false\n\"true\" = true\n\"boolean\" = true\n USAGES \nUsage 1\nvar bool = toBool($.cookie(\"test\"));\nUsage 2 \nif( toBool($.cookie(\"test\")) ) {\n    do stuff\n} else {\n   don't\n}\n/\n```\n. ",
    "dhoulb": "My actual use case is this: On the server, generating one or more notices that should be shown to a user, but before these can get shown the user gets redirected. Just before I do my redirect, I grab all the notices and bundle them into a cookie. When the user arrives at the next page after their redirect, a script checks for the cookie and shows the notice to the user.\nBasically stateless success/error messages that survive redirects. A lot of people do this using sessions, but obviously the more correct way is to make it stateless. This has the added advantage of not needing the server to be involved in showing the notice. \nI needed to be able to store Objects or Arrays in cookies to do it.\nIf you want absolute deep control over your cookies - there's always raw mode OR you can skip the plugin entirely. The whole reason of jQuery is to make things really easy for developers. Plus, the way my change works is exactly the same as jQuery data() (checking for JSON-like strings) \u2014 so it's behaviour that's consistent with other parts of jQuery, and that developers might expect.\n\nWhen the data attribute is an object (starts with '{') or array (starts with '[') then jQuery.parseJSON is used to parse the string; it must follow valid JSON syntax including quoted property names. If the value isn't parseable as a JavaScript value, it is left as a string.\n\nYou're right, if you're retrieving a JSON string as a value, you're going to get an Array/Object back. But, if you've stored JSON in a cookie, isn't that what you'd want to get back? I can't conceive a case where I would want to store and retrieve a JSON string and not convert it back to an object at some point.\nLikewise, when storing an Array/Object in a cookie, right now, you'd get a stringified version of that array stored (\"[object Object]\"), which isn't helping anyone. Storing the JSON version of the Array/Object is a lot more helpful!\nThe basic change is instead of doing this:\n``` javascript\n// Storing.\n$.cookie('foo', JSON.stringify({ foo: 'bar' }));\n// Retrieving.\nvar value = $.cookie('foo');\nif (value) {\n    try {\n        value = JSON.parse(value);\n    } catch (err) { }\n}\n```\nYou can do this:\n``` javascript\n// Storing.\n$.cookie('foo', { foo: 'bar' });\n// Retrieving.\nvar value = $.cookie('foo');\n```\nIt keeps the application a lot cleaner, and just acts in a way you'd expect it to, based on how jQuery works and common sense.\nYes, the approach I took was to leave config.json alone. Obviously wouldn't want to break any existing applications. config.json works exactly as before \u2014 it'll force JSON, or return undefined if the JSON couldn't be parsed.\nThe code I added is a completely separate case. If it sees something that looks like JSON (i.e. starts with a [ or {), it'll try to parse it. If that parse fails, it'll return the string as normal. This means things that look like JSON but aren't (like [block]this isn't JSON[/block]) will still be returned as strings.\nAnd as I noted, it passes all the tests (and I added new ones for the new behaviour), and only adds a couple of percent to the minified code. I can't see any real downsides. What do you think?\n. By the way, I've screwed up the pull request - only the first commit is needed. The second one is just branch maintenance in case you guys don't merge this and I need to keep it independent.\nI'll do a new pull request if you decide this is something you want to include.\n. @carhartl I was hoping data() would reference some larger jQuery string-parsing function - but apparently not! It's just baked into that one function with the regex I pulled. The only other place I can think they'd use it is attr(), but I guess they won't for historical reasons.\n@FagnerMartinsBrack \nStoring a value that starts with '{' or '[' should be fine - as long as it doesn't parse as JSON format. So you'd get away with [Foo], but not [\"Foo\"]. I was thinking it wouldn't be much of an issue as people don't generally store that much random free-text in cookies.\nPoorly encoded server-side cookies would be an issue, you're right. If the JSON.parse fails for any reason, you'd get the string version back. It probably makes sense to make a note about that somewhere  - the text from jQuery's data() page is pretty clear, and we could re-use it:\n\nWhen the data attribute is an object (starts with '{') or array (starts with '[') then jQuery.parseJSON() is used to parse the string; it must follow valid JSON syntax including quoted property names. If the value isn't parseable as a JavaScript value, it is left as a string.\n\nJust curious - why does the plugin use JSON.parse() and not jQuery.parseJSON()? I'm guessing it didn't exist at the time, or you didn't want the dependency?\n. @FagnerMartinsBrack \nMakes sense, I thought it might be backwards compatibility. Also, I guess, jquery-cookie doesn't actually depend on jQuery right now, so you'd be injecting an unnecessary dependency.\n@FagnerMartinsBrack @carhartl \nI've messed up this pull request, so I've closed it and made a new one. It's different because I've also removed the json configuration setting, updated the README, and packaged it up nicely.\nContinued at #285\n. Whether json config is turned on or not should make no real difference.\nThe one thing I've noted is: if json config is on but the JSON cookie cannot be parsed, it used to return undefined \u2014 it'll now return the unmodified string. Done this way so that JSON-like false positives that get matched by the RegEx, such as [hello], will work fine.\n. @carhartl \nYeah, I like the idea of more integration, but it just seems a tad too hacky to create a phantom node etc? If they moved just the string-to-native logic from their dataAttr() function into its own function, that'd be perfect for us. I guess jQuery's open source \u2014 we could contribute the change and see if they take it.\nhttps://github.com/jquery/jquery/blob/master/src/data.js\nNow that I'm re-reading it, they do testing for === \"true\", ===\"false\", and number conversion that I haven't used \u2014 it'd be useful to have that too, so people always get the native type and not the string.\n. You'd only be using similar logic for reading cookies. It's not huge either, just a couple of lines \u2014 you already had most of it for the json configuration setting. All I've added is a RegEx test for [ or {, instead of the if (config.json) setting.\nThere is no logic for writing in .data(), as it never writes the string back. All I've changed in the writing code is replace if (config.json) with if (value.constructor === Object || value.constructor === Array. Again, nothing too crazy, but it lets your code outside of jquery-cookie be much cleaner.\nI'd guess the reason jQuery don't expose it is because they figured it's such a tiny bit of logic, no-one would ever mind duplicating it. I think after you've removed the json setting logic, the difference for us in code size is pretty marginal. A couple-hundred bytes or so, compressed.\n. I can see the benefit of that, I just can't see many situations where you'd want jquery-cookie to convert types other than basic native types, true, false, numbers, arrays and basic objects. You're right about the numbers \u2014 I think it makes sense to include that too.\nTheir full code is this:\n``` javascript\nfunction dataAttr( elem, key, data ) {\n    var name;\n// If nothing was found internally, try to fetch any\n// data from the HTML5 data-* attribute\nif ( data === undefined && elem.nodeType === 1 ) {\n    name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\n    data = elem.getAttribute( name );\n\n    if ( typeof data === \"string\" ) {\n        try {\n            data = data === \"true\" ? true :\n                data === \"false\" ? false :\n                data === \"null\" ? null :\n                // Only convert to a number if it doesn't change the string\n                +data + \"\" === data ? +data :\n                rbrace.test( data ) ? jQuery.parseJSON( data ) :\n                data;\n        } catch( e ) {}\n\n        // Make sure we set the data so it isn't changed later\n        data_user.set( elem, key, data );\n    } else {\n        data = undefined;\n    }\n}\nreturn data;\n\n}\n```\nSo to fake it, you'd need a nodeType = 1 and a getAttribute() function. Seems like a lot overhead, and it'd be quite hard for people to trace how it was working, whereas just re-using the following:\njavascript\ndata = data === \"true\" ? true :\n    data === \"false\" ? false :\n    data === \"null\" ? null :\n    +data + \"\" === data ? +data :\n    rbrace.test( data ) ? jQuery.parseJSON( data ) :\n    data;\nIs pretty neat and self-contained. I don't really see that code looking much different unless Javascript itself changes significantly.\n. I guess that's pretty solid \u2014 it's just a bit weird :D\nIf you're caching the <div>, you'd have to change the attribute name every time. data() caches data- attributes once they've been read.\njavascript\nvar $div = $('<div>');\n$div.attr('data-cookie', '[1, 2]').data('cookie'); // [1, 2]\n$div.attr('data-cookie', '[1, 2, 3]').data('cookie'); // STILL [1, 2]\nI don't think there's too much overhead instantiating each time. People really aren't going to call thousands of cookies \u2014 the expensive part is actually attaching to the DOM.\nOn balance though, because of the weirdness of this, I'd probably still vote for just duplicating the logic. The size saving isn't worth the potential for this breakage if jQuery decide to change something in data(). I think the fact it's consistent is enough, it's not as though data() is going to be massively expanded any time soon.\n. Sounds great :D\n. ",
    "jlukic": "Setting the defaults to an uncommon value, means most developers will have to reconfigure defaults on every use of $.cookie\n. ",
    "enumag": "Understood, thanks.\n. ",
    "andrewhood125": "Hey no worries, I just wanted to bring a possible problem to your attention. I've already gone a different way or I would upload the test case. Thanks.\n. ",
    "r3wt": "i figured it out man. i had made an error in the function that sets the cookies. was using $(this) when i should have been using $(this).attr('target')  my apologies.\n. ",
    "JohnGalt1717": "Any old Json inside the cookie:\nAuth={\u201cid\u201d=2343, \u201cusername\u201d=\u201dtest123%\u201d}; SomeOtherCookie=34523432\nFrom: Klaus Hartl\nSent: \u200eTuesday\u200e, \u200eMay\u200e \u200e13\u200e, \u200e2014 \u200e3\u200e:\u200e00\u200e \u200ePM\nTo: carhartl/jquery-cookie\nCc: James Hancock\nCould you provide an example value that is causing it to fail?\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "tgr": "IMO this is a major bug, and should be fixed in the current version. Multiple scripts with different cookie libraries often coexist on the same domain; $.cookie cannot be expected to read cookies which are not formatted according to its own encoding standard, but it should be still able to read its own cookies when there is an unrelated cookie using a different encoding (such as escape()).\n. The fix would be trivial, just add a try-catch around the decodeURIComponent call.\n. ",
    "xaviaranda": "Hey Caryhartl\nThank you for you answer, i resolve my problems!\n. ",
    "CariocaNic": "Indeed, allowing 3rd party cookies works fine, but then I'm stuck for Ipad and Iphone... and anyway it's not nice to ask everyone using Safari to enable this option... I'll look to change my hosting so I don't need to do a redirection.\nA by the way, setting the domain does not do the trick. I've noticed one stuff, if I use: \n$.cookie('pseudo', pseudo, {path:'/', domain: 'www.example.com'});\nin the console it stands that the cookie is valid on (.www.example.com)... I don't know where this first \".\" comes from but it seems to work anyway.\nThanks for the fast answer!\n. ",
    "DTwigs": "This can be closed.  All I needed to do was upgrade to 1.4.1\n. ",
    "mparke": "The request wasn't for undefined being overridden but for the left side of that comparison, which since it's a function will work fine ( not if it's an undefined variable ), was having an issue with removeCookie() but all looks okay now. Thanks!\n. ",
    "paladox": "Yes.\n. Ok.\n. ",
    "t0mtaylor": "I think optimisation is always relevant, now we do more data manipulation within browsers due to frameworks such as angularJs - anything we can do to transfer less data the better!\nCheck comments for commit '958f345', it is now smaller too! :)\nQunit tests now pass, but tests are not running via SourceLabs in different browsers: https://travis-ci.org/carhartl/jquery-cookie/builds/29438526\n. Good point, although still i prefer good optimisation where possible - the code is still legible and i'm sure many code ninjas won't have an issue reading it (it's those comments which are in the way of the code)\nIts great to achieve a smaller gzipped filesize too - always good saving a byte where possible with good code! :)\n. Thanks @Krinkle I'll take a look at those for you in the next 24hrs and update the PR :)\n. @carhartl yup it was, although it seems to work better outside of the 'for loop' - do you want the commits squashed within this PR or a new one?\n. Ok im on it! :)\n. Sorted! :)\n@carhartl, @Krinkle - both have with the squash!? Tests via sauceLabs still fail to init\n. Updated with head, still fails in travis as it needs PR #312 \n. :+1: \n. ",
    "davidhbigelow": "OK - thank for the prompt response - testing of this so far is AMAZING!  Well done!!!!\n. Fair enough... I was curious as to the testing of this automatically - but found a plugin to show me what was being set and when it will expire.  So i am good to go for that...  I was thinking I could just \"console\" the value of the cookie to see it, but as you say it is a bit more complicated than that.\nAgain - very well done on this library.\n. ",
    "MarQuisKnox": "The first commit works in the browser:  https://github.com/MarQuisKnox/jquery-cookie/commit/2ce5bdd9ba329547f0674df3132e254d7dd30fbb \nThe other stuff I just did to try to pass the Travis CI tests. I will look at it again when I have time to install grunt et al locally. No time now. It works in the browser (Waterfox 30) \u2014 didn't test any others.\nAlso, just FYI, I would not have requested a PR on the initial commit if it did not work.\n. @Krinkle I just cleaned up the PR. Let me know if anything else needs to be changed. Thanks.\n. ",
    "jpalomar": "My intent for this property addition was to easily assess which version a particular project is running.   In cases where different versions of libraries are loaded for particular projects sourced from a massive back-end infrastructure, it is helpful to know which versions of a particular jQuery plugin are executed during run-time - especially when libraries are built and minified into a single file.  It increases visibility of breaking or compatibility changes with other plugins.\n. @Krinkle My use case is in applications where pages pull assets from builds managed by different teams and depts.  My intent is to actually know what versions of which assets an application is using because there are cases where different versions of the same assets may be initialized and then redefined with a differing version in a script load at a different time on the same page (which is unfortunate, I admit).  I understand your hesitation with the public exposure of versions which will allow people to version sniff -- but what are the negative perceptions about version sniffing a plugin version or even a namespace version?  Many times I check the version just so I know which version of the API to use.  I find knowing which version of which asset I am using to be useful in a develop or maintenance environment.  I believe usage exploitation in functional logic is a developer error e.g.; if (x.version === '1.2.3') { do_this(); } compared to if ( $.fn.live ) { $(doc).load($.noop) } else { $(doc).ready($.noop) } -- much akin to browser version detection compared to browser feature detection.  I can see that perhaps this should not be exposed on the master branch of the main plugin repo but I am trying to weigh the pros to the cons.  Perhaps I can just keep this on my own fork.\n. ",
    "badarahmed": "@JSteunou Thanks for the example. I was scratching my head over why require('jquery.cookie') is returning {} \nAtleast I can get it to work now.\n+1 to this request.\n. ",
    "JSteunou": "At the end of the factory.\n. +1 for module.exports ~~but @kozze89 you should have made 2 differents PR.~~\n. Nevermind, I read to quickly, did not saw the change in jshint was related\n. ",
    "kvaggelakos": "This PR of mine is trying to solve the CJS case: https://github.com/carhartl/jquery-cookie/pull/339. Can anyone else try this to confirm?\n. @JSteunou what would the other one be for?\n. @gustavpursche You would still need to attach it to jquery though? Not sure what you mean by alias. In either case, I've moved away from this as there are other alternatives for handling cookies that are CJS appropriate: \nhttps://www.npmjs.com/package/cookie-js\nhttps://www.npmjs.com/package/cookie\n. It didn't properly export the module before, meaning a require('jquery.cookie') would return {}. This makes sure we actually export the module.\n. This is commonjs standard, wether it's for node or browserify that shouldn't matter. In commonjs the module is not returned, it is attached to the module object, which is why in umd we're looking for exports if (typeof exports === 'object') to determine if it's a commonjs environment or not.\n. ",
    "gustavpursche": "It could also be possible to remove the dependency on jquery completly. As far as I see, it's just $.isFunction and $.extend, which are easily replaceable ... After you could return it just as function, with an alias to $.cookie. What do you think?\n. ",
    "twelch": "wrong window :) removing.\n. ",
    "igorescobar": "more info: https://www.owasp.org/index.php/HttpOnly\n. An explanation would be nice.\n. I thought that I would be able to create it but never get it...\n. Which is exactly what I want... My login screen is pure js. I want to set all my cookies but never be able to get or modify it again by the client.\n. God damn it...\n. Yep... makes  sense... I thought that I would be able to a least create it... but it makes a lot of sense. Yep... I'm stupid ;)\n. ",
    "zhangmengxue": "In chrome,it doesn not work....FF is ok~\n. I have been changing the name all the time ...\n. ie is ok too...\n. it seems like my chrome has some problem.\ni also try this:\nvar cookie = document.cookie,\n    reg = /(^| )BAIDUID=([^;]*)(;|\\x24)/,\n    baiduid = reg.exec(cookie)&&reg.exec(cookie)[2];\nif(baiduid){\n   console.log('has cookie');\n}else{\n   console.log('no cookie');\n}\nin chrome -->no cookie try : document.cookie=\"\"\nbut in FF --> has cookie\n. v 37.0.2062.103 m...\nyeah, i have checked the settings and also clean the cookies,i still have no idea what's going wrong...\nThank you so much for helping.. \n. no,it's not..\n. well,my code works finally..in console, if The browser address bar is blank it does not work,else it works..\n but I  don't know why ... \n. ",
    "ssy341": "@carhartl  the same code\uff0clocated is work\uff0cthe server does't work\njavascript\nvar tmp = $(\".hero-unit\").clone();\ntmp.find('div').remove();\n$.cookie(\"nav\",tmp.html());\nconsole.log($.cookie()); //in located print Object {nav: \"\u21b5    \u21b5\u21b5<p class=\"1\">\u7b14\u8bb0:<a class=\"btn btn-link\" hre\u2026:</p><p class=\"13\">\u7ffb\u8bd1:</p><p class=\"14\">mail:</p>\"}\n//in server print Object {}\ni don't know  what's going wrong\n. My data size is 10000+ ,may be too much data, exceeding the cookie limit,\n. ",
    "MrHubble": "Yep, you're correct. I can edit a cookie if I set a path when creating the cookie: $.cookie('name', 'value', { path: '/' });\nThanks for the help and thanks for providing a fantastic plugin.\n. ",
    "matthewp": "Client-side tooling (like a module loader) cannot fetch it manually. I hope you will reconsider. It's commonplace in popular repositories to include the bower.json. \n. ",
    "michaeljacobdavis": "Certainly could, but then you get all the jQuery cruft along with it. IMHO, it seems weird to be able to do:\nvar $cookie = require('jquery.cookie');\n$cookie('.selector')\nBut that's just me. If that's preferable, I have no problem changing it.\nThe fact that it's not exported at all is a reason I wouldn't use this, so as long as it happens, I'm good with it.\n. ```\nRunning \"compare_size:files\" (compare_size) task\n   raw     gz Sizes                                                          \n  1358    715 build/jquery.cookie-1.4.1.min.js                               \n  3194   1394 src/jquery.cookie.js                                             \nraw     gz Compared to amd-return @ 5150c0f43ba8dcf0cd01b064752e90c23b972262\n     =      = build/jquery.cookie-1.4.1.min.js                               \n     =      = src/jquery.cookie.js                                             \nraw     gz Compared to master @ aeb793d27286c7f0b915c3aaee24c3b7d04d71fd  \n     =      = build/jquery.cookie-1.4.1.min.js                               \n   +66    +20 src/jquery.cookie.js                                             \nraw     gz Compared to last run                                           \n     =      = build/jquery.cookie-1.4.1.min.js                               \n   +66    +20 src/jquery.cookie.js \n```\n. ",
    "Luckerz": "Hello Klaus!\nThanks a lot for the really quick response!\nFor now I make my tests on localhost.\nBefore yesterday I've never used cookies in my own code. So I doubt that any global cookies are shadowing the per page cookies.\nHere is my code and what I have at the developer console:\nCase 1:\njQuery.cookie('bar_closed', 1, { expires: 30 });\n\nCase 2:\njQuery.cookie('bar_closed', 1, { expires: 30, path: window.location.pathname });\n\nCase 3:\nMy code:\njQuery.cookie('bar_closed', 1, { expires: 30, path: window.location.pathname });\nI even tried to comment the line 70 of your code:\n// options.path    ? '; path=' + options.path : '',\nI presume that in this case my cookies should never have a path param so they should be always per page. But it's not! They are again domain wide:\n\nSo it seems that default behavior is domain wide cookies.\nHow do you think may be the problem is localhost?\n. > What happens after you delete all cookies for localhost?\nMay be I don't understand your question but if I delete all cookies then there is no any cookies. I tried clear all browser cache and all cookies, not only domain cookies.\n\nDo you happen to have added cookie default options accidentally maybe?\n\nNo. Yesterday I included your script to my page and added the following code:\njavascript\njQuery(\".bar-close\").click(function() {\n    jQuery(\".fixedBar\").hide();\n    jQuery(\".stickyMail\").show();\n    jQuery.cookie('bar_closed', 1, { expires: 30 });                        \n});\nAnd at once I could see that cookie 'bar_closed' is domain wide.\nThen I have to use path: window.location.pathname to force cookies to be per page. Btw here I faced another problem you described:\n\nDue to an obscure bug in the underlying WinINET InternetGetCookie implementation, IE\u2019s document.cookie will not return a cookie if it was set with a path attribute containing a filename.\n\nSorry, but I don't understand your another question:\n\nDo you use a particular cookie extension?\n\nKlaus, why do you ask about defaults and other stuff if I commented the line 70 of your code:\njavascript\n// options.path ? '; path=' + options.path : '',\nand cookies are again domain wide.\nShouldn't cookies be per page in this case always? I saw you said in many topics that cookies per page is default behavior and you will not change that.\n. Hello Klaus!\njavascript\ndocument.cookie = \"foo=bar\";\nhas following result:\nNAME  foo \nVALUE  bar \nDOMAIN     \nPATH  / \nEXPIRES  At the end of the Session\nI tested in IE8 and last versions Chrome and FF. Results are the same.\nSo as you say:\n\nthe problem has nothing to do with the plugin\n\nAny way due to IE bug it's impossible to use cookies per page in my case.\nKlaus, thanks a lot for your precious time! I appreciate your prompt support very much.\nPlease close this issue.\n. ",
    "yahreen": "Sorry! Firewall issue on my part.\n. ",
    "scottstewartt": "Hi Klaus, This was a few weeks ago but I'm 95% sure I was using the latest\nversion downloaded from github. -Scott\nOn Fri, Nov 28, 2014 at 5:07 PM, Klaus Hartl notifications@github.com\nwrote:\n\nAre you using the latest version of the plugin? Reminds me of a rather old\nbug...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/carhartl/jquery-cookie/issues/336#issuecomment-64931299\n.\n. \n",
    "mindware": "@scottstewartt can you confirm if you are still seeing this behaviour? \n. ",
    "jasonbrookins": "I'm just happy to be able to read the old title; that Russian degree comes in handy sometimes.\n. ",
    "df-golololo": "Sorry, its my mistake. I cant del this wrong issue, only update it. \nYe ye, maybe this Russian degree will be necessary for all in future>:) \n. ",
    "ssajith": "Looks like an invalid bug. @mankind has a typo in the console.log('cookie object key', $.cookie('currentUsertoken') );\nInstead of currentUserToken he is using currentUsertoken. Please correct me if I am wrong.\n. ",
    "mankind": "You are correct @ssajith, thanks for the catch. @FagnerMartinsBrack  Thanks too for your initial response and suggestion.\n. ",
    "hamburger123456": "Thx for your fast support.\nIt's as you mentioned. If you try to read a cookie from a path it gives unexpected results.\n$.cookie(\"cookieName\",{ path:'/' })   (the value will be %5Bobject%20Object%5D)\nDanke nochmals ...\n. ",
    "anzome": "In test case all work fine. It is so strange. http://jsfiddle.net/amazonov/9mskhdLh/ \nI'll be digg into my own code. \n. ",
    "sudheer594": "Please provide the sample code to reproduce the issue,it would be hard to understand without test case.\n. ",
    "rohan-chd": "Hey sudheer594. I can provide you the code but the thing is to setup test case is not that much easy as i am trying to apply this on a major project and its not possible to replicate the things anywhere else. But i will try to setup it on some test server if possible.\nThanks Klaus, I will try the solutions you gave me.\n. @carhartl i used the solution you gave me. I mean i am using it with path its working fine now. But now when i try to remove its not working. Like i set the cookie as:\n$.cookie('cookieLimitName','10', { path: '/' }); and when i try to delete it by this $.removeCookie('cookieLimitName', { path: '/' }); its not working. \nCan you suggest me here as well?\nRegards,\nRohan\n. @carhartl no worries. $.removeCookie thing is fixed. I was setting the same query in another function without 'path'. As soon as i set the path, the $.removeCookie starts working.\n. I am working with IE9.\n. ",
    "tahiryasin": "If you are on Linux, check CHMOD of your JS file\n. ",
    "someshinyobject": "Travis CI build failed due to a failure in loading saucelabs \n. ",
    "macgyver": "For what it's worth, I think cookies are still quite useful - modern DOM storage is not available to the server and syncing data to be persisted on the server is overkill for many use cases.\n\nOn Mar 19, 2015, at 05:53, Klaus Hartl notifications@github.com wrote:\nIn conclusion this would mean:\nFork the project, giving it a new name\nImplement a better api, one that isn't bound to jQuery style\nAdd in automatic jQuery detection\nAlso add back in jQuery style methods: jQuery.cookie(key[, value, [, options]]), jQuery.removeCookie(key, [, options])\nAdditionally: Implement everything that was planned for version 2.0: RFC 6265 compliance, automatic JSON handling.\nI haven't seen a client-side library that has RFC 6265 compliance, so that might be a selling point :). On the other hand, I have the feeling that cookies nowadays are a bit of outdated in the first place and no one ever requested that particular feature. It is more like in the doing things the right way departement.\n\u2014\nReply to this email directly or view it on GitHub.\n. did you add a new Firewall to your network recently? This doesn't like an\nissue that's remotely related to the jquery.cookie project.\n\nOn Fri, Mar 27, 2015 at 9:29 AM, Samir Prakash notifications@github.com\nwrote:\n\nHi,\nWe have a dependency of jquery.cookie in our project and we have been\nusing this for a long time without any issues.\nToday, bower install jquery.cookie has started failing with below error:\ni>bower install jquery.cookie --save\nbower jquery.cookie#* cached git://\ngithub.com/carhartl/jquery-cookie.git#1.4.1\nbower jquery.cookie#* validate 1.4.1 against git://\ngithub.com/carhartl/jquery-cookie.git#*\nbower jquery.cookie#* ECMDERR Failed to execute \"git ls-remote --tags\n--heads git://github.com/carhartl/jquery-co\nAdditional error details:\nfatal: unable to access 'https://github.com/carhartl/jquery-cookie.git/':\nFailed connect to github.com:443; No error\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/carhartl/jquery-cookie/issues/357.\n. \n",
    "sargin48": "you are right but \nwhen user install this plugin with \ncmd -> bower install jquery.cookie --save\nthere aren't any jquery.cookie.min.js   minified file.\ni meant this.\n. ",
    "elalemanyo": "ok, thanks!\n. ",
    "samirprakash": "I am checking with the network team as well as that was my first thought. But the crazy thing is that I tried it from out side the firewall as well and:\n1. bower install jquery.cookie sometimes works\n2. bower install jquery,cookie --save fails\n. ",
    "d07RiV": "Just set $.cookie.json to true and it won't be able to parse regular strings if they aren't quoted.\nE.g.\nPHP:\nsetcookie(\"test\", \"value\");\nJS:\n$.cookie.json = true;\n$.cookie(\"test\") // returns undefined\nThe source reads:\ntry {\n        // Replace server-side written pluses with spaces.\n        // If we can't decode the cookie, ignore it, it's unusable.\n        // If we can't parse the cookie, ignore it, it's unusable.\n        s = decodeURIComponent(s.replace(pluses, ' '));\n        return config.json ? JSON.parse(s) : s;\n    } catch(e) {}\n. ",
    "RobLoach": "@FagnerMartinsBrack Thanks, I've pushed that up here: https://github.com/js-cookie/js-cookie/pull/41 . Regarding your worry of un-maintained package management, Packagist does the release management for us, which makes your job a non-issue.\nWhether it's brought in or not, I appreciate your looking into this, and all the work you've done on js-cookie :+1: .\n. ",
    "joubertredrat": "Hi @FagnerMartinsBrack \nThis is strange, my date function works normally.\n```\n\nvar d = new Date(2015, 06, 24, 11, 00, 00);\nundefined\nd.getMonth();\n6\nd.getUTCMonth();\n6\n$.cookie(\"name\", \"Me\", {expires: d});\n\"name=Me; expires=Fri, 24 Jul 2015 14:00:00 GMT\"\n```\n\nNote: time difference is normal, here is UTC -3:00, but month is strange.\n\nEdit \nReally @FagnerMartinsBrack, have a bug on Date();\n```\n\nd.getMonth();\n6\nd.toDateString();\n\"Fri Jul 24 2015\"\n```\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\nThanks for the help.\n. ",
    "sswam": "When I raised this issue I wasn't aware that the new version of js-cookie is no longer a jquery plugin.  Now that I'm aware of that, I don't think it's necessary to link to it direct from the jquery plugins site.  The older jquery plugin already links to the new page, that's good enough.  Sorry for the trouble!\n. ",
    "williamsbdev": "The build appears to have failed as it was unable to open a tunnel to saucelabs. Will a maintainer please try running the build again?\n. I would love to but apparently the version that we are using is 1.4.1 through as a transient dependency of foundation. I will look into foundation and see I can use a newer version or they can stop using this deprecated library in favor of the new one.\nThanks!\n. ",
    "Jyotie": "Hello Sir,\nThis is solved. I was setting cookie under one folder path and was trying to remove it from root path. This I come to know after reading one article where I come to know that we have to mention the path while setting and removing the cookie. \nThanks for this wonderful plugin :)\n. ",
    "mborah": "Sorry, but \\n is not breaking my line in the output.\nI tried with both:\nIn this string I want to break the Line like \\n second line starts\nIn this string I want to break the Line like\\nsecond line starts.\nI don't know why it is not working for me.\n. @FagnerMartinsBrack and @carhartl  ... Thanks for your reply.. \nSame here, even for me sometimes in Mozilla it ignored the value, and sometimes it ignored everything or sometime shows the whole character including \"\\n\". God Knows uffff....\nSo, finally what shud I do? Should I set two different cookies for different lines? Any suggestion would be helpful.\n. Thanks I will try with that.\n. ",
    "suvonkar": "I am trying to delete cookie from one of JS file available under /stockquote/. Also the cookie path is /stockquote/rest/auth\nPlease note it is working fine in FF. The issue with Chrome only.\n. @carhartl , Finally I have found an alternative.\n$.cookie('!Proxy!proxyJSESSIONID', '', { expires: -1, path: '/stockquote/rest/auth'});\n1. Setting the value as blank('') and\n2. Set one additional option expires : -1\nBut $.removeCookie is not working.\n. @carhartl , I have figured out the issue.\nI have downloaded the plugin from the link http://github.com/carhartl/jquery-cookie/zipball/v1.4.1 , what I have got from jquery plugin page(https://plugins.jquery.com/cookie/). It seems like this version of code available in this zip is not the version you are referring.\nThe code available in the jquery plugin page.\njavascrip\n    $.removeCookie = function (key, options) {\n        if ($.cookie(key) === undefined) {\n            return false;\n        }\n        // Must not alter options, thus extending a fresh object...\n        $.cookie(key, '', $.extend({}, options, { expires: -1 }));\n        return !$.cookie(key);\n    };\n. @carhartl ,But still at the end of $.removeCookie (https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js#L111) , you are checking the existence of cookie without sub paths, which is not considering the exact path of deleted cookie. This will misguide the developer. It will return always true for the sub path cookie, if it is also not deleted successfully.\n. ",
    "veeren": "I am using shopify and it is \"1.8\" I guess. \nSo my task is to show a popup when a user comes and if user closes the popup it should create a cookie for session only, so it does not show till user session ends. \nWhat happening here I tried to do by above code and it did not worked, and FYI I am using \n$.cookie('cookie_name', 'cookie_value', { path: '/' }); \nfor other purposes and those cookies remains after session as well with this. \n. Cookie is still there.\n. @FagnerMartinsBrack, Thanks that was the case and fixed it.\n. ",
    "sulthanallaudeen": "@carhartl  Thanks, \nYou mean , if i want to expire cookie at 1 am, then i should do 1/24 like this ? \n. ",
    "estevaosa": "Hi, I'm thinking how to show the code on line. You can see the problem clicking in this link:\nhttp://www.paymenu.com.br/login.html\nAfter click on the button \"login\" you will be able to see the error in the console using chrome, with the other browsers everything works fine.\nYou don't need to fill the user and the password, just click on the button login. \nis it enough? \nRegards\n. I took of the file jquery.cookie.js, the error stiil there. Very interesting, it look like that the chrome is not seeing the js.cookie.js ...\n. @FagnerMartinsBrack thank you for the answer. I done exactly what you said, now everything is fine. I made a new download of js.cookie.js and I used the Cookies.set, Cookies.get and Cookies.remove.\nThank you @carhartl and @FagnerMartinsBrack \nRegards\nEstev\u00e3o\n. ",
    "rkyoku": "I was sure I had the latest version (because this is a new project) but it\nhappens that I don't (because I have used an old lib file...).\nThanks for pointing the obvious to me, I was confused somehow. I'll try\nthat and let you know.\nThanks!\nLe jeu. 3 mars 2016 \u00e0 23:58, Fagner Brack notifications@github.com a\n\u00e9crit :\n\nCan't tell what is going on unless there is some small piece of code I can\nlook into. Have you tried a newer version\nhttps://github.com/js-cookie/js-cookie/releases to see if it works?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/carhartl/jquery-cookie/issues/387#issuecomment-192006935\n.\n. Well, I updated to the latest version, and now I keep getting weird things.\nSurely I did something wrong...\n\nWhenever I retrieve my cookie, it contains:\n\"authtoken={%22domain%22:%22www.myapp.local%22%2C%22path%22:%22/%22};\npath=/\"\nNo matter what I try: unset it, set it to a new value, open a new private\ntab... It always stays, and always at the same weird value. And %22 is a\nquote (double quote) character, however I never use double quotes in my\ncode.\nI created 3 handy one-liner functions to set/remove/get a cookie so that I\nam sure to pass the exact parameters to each one (domain and path).\nHere is the code within:\nCookies.set(name, value, {expires: ttl, domain: COOKIE_DOMAIN, path: '/'});\nreturn Cookies.get(name, {domain: COOKIE_DOMAIN, path: '/'});\nCookies.remove(name, {domain: COOKIE_DOMAIN, path: '/'});\nHere is the resulting code in the console:\napp.js:294 COOKIE : get authtoken\napp.js:368 token:\nauthtoken={%22domain%22:%22www.myapp.local%22%2C%22path%22:%22/%22};\npath=/\napp.js:286 COOKIE : remove authtoken\napp.js:281 COOKIE : set (name=authtoken value=toto ttl=5\nCOOKIE_DOMAIN=www.myapp.local)\napp.js:294 COOKIE : get authtoken\napp.js:289 token:\nauthtoken={%22domain%22:%22www.myapp.local%22%2C%22path%22:%22/%22};\npath=/\nI also tried to remove the cookie without specifying the domain and\npath. But either way, it doesn't unset it.\nDo you have any idea what I did wrong? Why is there double-quotes\ninside the (weird) value of the cookie?\nI'll continue debugging my code, but I am getting short of ideas right now! :)\nThank you,\nLe ven. 4 mars 2016 \u00e0 00:04, lideln lideln@gmail.com a \u00e9crit :\n\nI was sure I had the latest version (because this is a new project) but it\nhappens that I don't (because I have used an old lib file...).\nThanks for pointing the obvious to me, I was confused somehow. I'll try\nthat and let you know.\nThanks!\nLe jeu. 3 mars 2016 \u00e0 23:58, Fagner Brack notifications@github.com a\n\u00e9crit :\n\nCan't tell what is going on unless there is some small piece of code I\ncan look into. Have you tried a newer version\nhttps://github.com/js-cookie/js-cookie/releases to see if it works?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/carhartl/jquery-cookie/issues/387#issuecomment-192006935\n.\n. Okay nevermind, I found my mistake.\n\n\nI read this ticket: https://github.com/js-cookie/js-cookie/issues/145 and I\nunderstood everything.\nI was mislead by this line in the docs: \"Cookies.get('name'); // =>\nundefined (need to read at 'subdomain.site.com')\"\nI thought it meant that I had to pass the domain as a second parameter to\nspecify from which domain I wanted to read the cookie from.\nI agree one should not pass parameters that are not documented, but I still\nthink this line in the docs is ambiguous, maybe you could state clearly\nthat .get() does never take more than 1 argument?\nBy the way I still have the bug of the reappearing cookie... After 175\nseconds or something like that. I have refreshed the page in-between, so\nthat is not a precise number. But as I said earlier, refreshing the page\ndoes not prevent the cookie from reappearing magically.\nMaybe it's not related to the lib, maybe it's a problem in Chrome, or in\none of my plugins.\nI'll try a \"no-plugins\" execution of Chrome to see if it fixes the issue.\napp.js:19 check cookie undefined 1457081243783\napp.js:19 check cookie undefined 1457081248783\napp.js:19 check cookie MTk6MTc5NDU2ZDVmOGMxOTk3ZWI= 1457081253784\nLe ven. 4 mars 2016 \u00e0 09:37, lideln lideln@gmail.com a \u00e9crit :\n\nWell, I updated to the latest version, and now I keep getting weird\nthings. Surely I did something wrong...\nWhenever I retrieve my cookie, it contains: \"authtoken={%22domain%22:%22www.myapp.local%22%2C%22path%22:%22/%22};\npath=/\"\nNo matter what I try: unset it, set it to a new value, open a new private\ntab... It always stays, and always at the same weird value. And %22 is a\nquote (double quote) character, however I never use double quotes in my\ncode.\nI created 3 handy one-liner functions to set/remove/get a cookie so that I\nam sure to pass the exact parameters to each one (domain and path).\nHere is the code within:\nCookies.set(name, value, {expires: ttl, domain: COOKIE_DOMAIN, path: '/'});\nreturn Cookies.get(name, {domain: COOKIE_DOMAIN, path: '/'});\nCookies.remove(name, {domain: COOKIE_DOMAIN, path: '/'});\nHere is the resulting code in the console:\napp.js:294 COOKIE : get authtoken\napp.js:368 token:  authtoken={%22domain%22:%22www.myapp.local%22%2C%22path%22:%22/%22}; path=/\napp.js:286 COOKIE : remove authtoken\napp.js:281 COOKIE : set (name=authtoken value=toto ttl=5 COOKIE_DOMAIN=www.myapp.local)\napp.js:294 COOKIE : get authtoken\napp.js:289 token: authtoken={%22domain%22:%22www.myapp.local%22%2C%22path%22:%22/%22}; path=/\nI also tried to remove the cookie without specifying the domain and path. But either way, it doesn't unset it.\nDo you have any idea what I did wrong? Why is there double-quotes inside the (weird) value of the cookie?\nI'll continue debugging my code, but I am getting short of ideas right now! :)\nThank you,\nLe ven. 4 mars 2016 \u00e0 00:04, lideln lideln@gmail.com a \u00e9crit :\n\nI was sure I had the latest version (because this is a new project) but\nit happens that I don't (because I have used an old lib file...).\nThanks for pointing the obvious to me, I was confused somehow. I'll try\nthat and let you know.\nThanks!\nLe jeu. 3 mars 2016 \u00e0 23:58, Fagner Brack notifications@github.com a\n\u00e9crit :\n\nCan't tell what is going on unless there is some small piece of code I\ncan look into. Have you tried a newer version\nhttps://github.com/js-cookie/js-cookie/releases to see if it works?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/carhartl/jquery-cookie/issues/387#issuecomment-192006935\n.\n. \n\n\n",
    "pixeldrew": "Ah, apologies. lets close this.\n. ",
    "LeoBenoist": ":+1: The bower should point to https://github.com/js-cookie/js-cookie\n. it seems to be github related https://github.com/js-cookie/js-cookie/issues/186\n. ",
    "tatablack": "Thanks, Leo, I understand that.\nHowever, I'm not using the package directly, it's required by Zurb Foundation 5 in their own bower.json, so I can't remove it/update it.\nDo you know of a reason why the aforementioned git command should fail?\n. Yep, works now. Sorry for the noise. \ud83d\udc4d \n. ",
    "mushtaqak": "I think this should be closed now.\n. ",
    "reiz": "Hi @FagnerMartinsBrack thanks for the note. But some people are still referencing this repository. That's why it would be nice to get that PR merged. I will check the new repo also. . @FagnerMartinsBrack In the VersionEye database I have 5362 dependencies which reference exactly this repository. Most of them are projects from private GitHub repositories. \nIn our database I added the license for this project manually. If this repository is deprecated then you don't need to release a new version. . @FagnerMartinsBrack We have a crawler which can find license files like ./MIT-LICENSE.txt in GitHub repositories but it's much slower then parsing a bower.json. And if you have to do that for a couple 100 thousand projects it's a big difference in performance. That's why I'm sending out pull requests and encourage people to maintain the license info in their package manager files :-) . Hi @FagnerMartinsBrack. Everything is good now. For the versions of this repository I added the license info manually to our database. If you don't release new versions on this repository then everything is fine. And on the new repository js-cookie/js-cookie the license information is in the right place. If you release a new version on js-cookie/js-cookie VersionEye will be able to fetch the license info automatically. . ",
    "edsonrodsilva": "Thanks!. ",
    "sunq0001": "thanks . ",
    "mcfedr": "I think the raw option is useful, thats why I made the code changes to make the option work. My changes also make it possible to pass {json: true} which is also helpful.\n. Sorry, I am interested as to the reasons not to accept raw/json as options, and cant seem to find the issue you are refering to - except for a comment by you that it could be somewhat annoying to have to change the config before each call to $.cookie if you are using both methods or mixing code with other people and so cannot be sure of the global options.\nPersonally I would tend to avoid a global option as it makes code less reusable.\n. ",
    "MrNice": "This bottom change was an auto change from the web based github updater.\n. "
}