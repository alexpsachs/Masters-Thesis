{
    "yannickcr": "The ESLint no-unused-vars rule should handle this case but there is still a bug with JSX references eslint/eslint#1534\n. The ESLint no-unused-vars rule should handle this case but there is still a bug with JSX references eslint/eslint#1534\n. Haha, nice found!\nThanks\n. Haha, nice found!\nThanks\n. Thanks for the report, the rules did not check correctly the node children.\nThis is fixed in v1.2.2\n. Thanks for the report, the rules did not check correctly the node children.\nThis is fixed in v1.2.2\n. You are right, warn only if a used prop is not defined within propTypes seems to be the way to go.\n. You are right, warn only if a used prop is not defined within propTypes seems to be the way to go.\n. Thanks for contributing! Looks good to me.\n\nshould there be a test which verifies all rules are exported in index.js ?\n\nThere is not, but i should definitely add one.\n. Thanks for contributing! Looks good to me.\n\nshould there be a test which verifies all rules are exported in index.js ?\n\nThere is not, but i should definitely add one.\n. Thanks!\nThis is a tricky case to check but I am agree with your approach to use the eslintJSXUsed flag used by the no-unused-vars rule.\nLike you said it breaks the separation of rules but I can't really see any other way to check this.\n. Thanks!\nThis is a tricky case to check but I am agree with your approach to use the eslintJSXUsed flag used by the no-unused-vars rule.\nLike you said it breaks the separation of rules but I can't really see any other way to check this.\n. Right, we should add an exception for this.props.children\n. Right, we should add an exception for this.props.children\n. You're right, but I rarely seen some propTypes for this.props.children so it dot not seems to be a common practice to me.\nMaybe we can introduce an option to prop-types to re-include children in the props list to check?\n. Since 2.0.0 children is no longer ignored for props validation.\nIf you still want to ignore it you can use the ignore option.\n. I'll have a look at it. Can you share the code that trigger this error?\n. I'll have a look at it. Can you share the code that trigger this error?\n. Ok, I see. I can fix the crash but I am not sure how to check propTypes definition in this case. I need to figure that out.\n. Ok, I see. I can fix the crash but I am not sure how to check propTypes definition in this case. I need to figure that out.\n. Thanks.\nCan you fix the coding style issues? Then we can definitely merge it.\n. Thanks.\nCan you fix the coding style issues? Then we can definitely merge it.\n. Thanks again.\n(And sorry for the typo)\n. Thanks again.\n(And sorry for the typo)\n. Bumped directly to ESLint 0.17.0 with some fixes for the new JSX/React handling.\nBut thanks for your contribution (and sorry for being so late to respond :cry: ).\n. Yes, it seems there is some problems with the JSX variables handling in ESLint 0.16\nAlso with eslint/eslint#1951 ESLint will stop to handle JSX variables and will rely on a rule in eslint-plugin-react to handle them.\nI'll try to figure out the issue in ESLint 0.16 and see how we can fix it.\nFor now you can stay on ESLint 0.15, there is no issues with it.\n. As said earlier, ESLint stopped handling JSX variables in v0.17.0 (see details).\nI added a new rule in v1.5.0 to handle JSX variables (jsx-uses-vars).\nSo, to fix this issue:\n- update to ESLint v0.17.0\n- update to eslint-plugin-react v1.5.0\n- add \"react/jsx-uses-vars\":2 to your .eslintrc config file\nAnd it should be fine :)\n. Ok, seems there is a problem marking a variable as used when the ecmaFeatures modules or globalReturn are enabled. Investigating.\n. Will be fixed when eslint/eslint#2121 gets merged.\n. Fixed in ESLint 0.18.0\n. Are you using the globalReturn or modules feature ? There is an issue in ESLint related to variable used in global scope with these features\nI described the issue here eslint/eslint#2040\n. Using the node environment set globalReturn to true https://github.com/eslint/eslint/blob/master/conf/environments.js#L17-L19 so your issue seems related.\nYou can force globalReturn to false by adding:\njavascript\n\"ecmaFeatures\": {\n    \"globalReturn\": false\n}\nBut this is just a workaround for now. Hope this issue will be resolved soon.\n. I think the problem occur only on variables used in global scope.\n. Fix submited to ESLint eslint/eslint/pull/2090\n. Will be fixed when eslint/eslint#2121 (for no-unused-vars) and eslint/eslint#2122 (for no-undef) gets merged.\n. Fixed in ESLint 0.18.0\n. Merged, thanks.\n. Looks good to me\nAnd I think this is the way this rule should work, so an option is not necessary.\nThanks for your contribution :)\n. You're right, we should definitely support this pragma.\n. Hi,\nCan you be more specific about the rules that are ignored and your .eslintrc configuration ?\n. We are using React.createClass in prop-types, display-name and no-multi-comp to detect React component and to apply the rules on the object.\nObviously we need to figure out a new way to detect React components when using ES6 classes.\nI did not saw any problem with the other rules, including self-closing-comp.\n. @framerate 2 things here:\nIt seems related to #19 for the no-undef error and it should be fixed in next ESLint release.\nBut the react/jsx-no-undef error seems to be a different one and I only reproduce it with babel-eslint as a parser. Can you open an issue for this case ?\n. Thanks :)\n. I added a new rule in v1.6.0 to replicate this functionality: jsx-no-undef\n. Right, this case is not handled. We need to fix this.\n. It's just a quick patch, I think the real issue is in babel-eslint but I need to investigate.\nHowever, it does not fix the error reported by the ESLint rule no-undef, this one should be fixed in next ESLint release eslint/eslint#2122\n. Duplicate of #18 and #19\n. Hi,\nCan you be more specific about the code, the rules and your .eslintrc configuration ?\n. Can you provided a reduced test case (like this issue for example) ?\n. You have a few options to pass your JSX files to ESLint:\n- eslint lib/*.jsx : check all .jsx files in lib, excluding subdirectories\n- eslint lib/**/*.jsx : check all .jsx files in lib, including subdirectories\n- eslint lib : check all .js files in lib, including subdirectories\n- eslint --ext .jsx lib : check all .jsx files in lib, including subdirectories\n- eslint --ext .js --ext .jsx lib : check all .js and .jsx files in lib, including subdirectories\nYou can find more informations in the ESLint Command line Interface documentation.\n. In my tests the error is reported by the no-unused-vars rule and not react/jsx-uses-vars. Can you confirm ?\nSeems a duplicate of #18 (which should be fixed with the next ESLint release)\n. Merged, thanks.\n. I'd love this too.\nShould not be too hard to make a rule for sorting React methods but I need to figure out how to handle custom methods (like _onChange or _onCreate in your example).\n. Here's the idea I came up with:\nIn configuration we specify the valid methods order in an array, using regexp if needed (for custom methods for example):\njs\nsort-comp: [1, [\n  \"displayName\",\n  \"propTypes\",\n  \"mixins\",\n  \"getInitialState\",\n  \"componentWillMount\",\n  \"componentWillUnmount\",\n  \"^on.+\",\n  \"render\"\n]]\nThe above configuration:\n- force React methods order\n- force all on* methods to be placed before render\nOf course the rule come with a default configuration (to decide) so you don't need to specify the method order if the default one fits you:\njs\nsort-comp: 1 // Use default configuration\n- What do you think about it ? Does it fits your needs ?\n- What to do with methods that do not match any of the patterns ? Allow them anywhere ? Force them to a specific location (at the end of the component ?)\n- This does force alphabetical order of custom methods as suggested by @mathieumg. Maybe we can add an additional option for this ? But I do not want to end with something too complex to configure. \n. I'm agree redefining all lifecycle methods every time would be painful.\nYour proposition is interesting, I'll look at this.\n. I made a first implementation in the rule-sort-comp branch. It's still WIP (no documentation, missing tests) but it should work like your proposal. \n. I made a first implementation in the rule-sort-comp branch. It's still WIP (no documentation, missing tests) but it should work like your proposal. \n. > what happens to custom methods that do not fit any regex. Are they simply ignored ?\nFor now custom methods that do not fit any regex must be defined at the end of the component, so:\njs\nclass ComponentX extends React.component {\n  myPrivateMethod() { ... }\n  render() { ... }\n  anotherMethod() { ... }\n}\nwill trigger an error:\n``` bash\n$ eslint example.jsx\nexample.jsx\n  2:2  error  myPrivateMethod should be placed after render  react/sort-comp\n\u2716 1 problem (1 error, 0 warnings)\n```\nI don't know if I will keep this that way, any suggestion is welcome.\n\nAlso, with the regex used for lifecycle and render methods, would a custom method named renderCustom() { ... } be targeted by the rule?\n\nYes, but that's not intended, it's a bug. The render entry in the order array should only match the render method.\n. > what happens to custom methods that do not fit any regex. Are they simply ignored ?\nFor now custom methods that do not fit any regex must be defined at the end of the component, so:\njs\nclass ComponentX extends React.component {\n  myPrivateMethod() { ... }\n  render() { ... }\n  anotherMethod() { ... }\n}\nwill trigger an error:\n``` bash\n$ eslint example.jsx\nexample.jsx\n  2:2  error  myPrivateMethod should be placed after render  react/sort-comp\n\u2716 1 problem (1 error, 0 warnings)\n```\nI don't know if I will keep this that way, any suggestion is welcome.\n\nAlso, with the regex used for lifecycle and render methods, would a custom method named renderCustom() { ... } be targeted by the rule?\n\nYes, but that's not intended, it's a bug. The render entry in the order array should only match the render method.\n. You should be able to match everything else with a RegExp like ^.+$ , I don't know if a keyword is relevant in this case.\n. You should be able to match everything else with a RegExp like ^.+$ , I don't know if a keyword is relevant in this case.\n. Ho, I see the problem, a RegExp like ^.+$ would allow anything here, not only the methods that do not match any of the other patterns. So it is not a good solution.\nYour proposal for a keyword like everything-else seems to be right solution.\n. Ho, I see the problem, a RegExp like ^.+$ would allow anything here, not only the methods that do not match any of the other patterns. So it is not a good solution.\nYour proposal for a keyword like everything-else seems to be right solution.\n. @mathieumg I followed your suggestion to make some groups and added the special group everything-else as suggested by @Cellule. So, thanks to you both :)\n(It's a rather complex rule, so tell me if you find any edge cases I forgot to test)\n. Would be very useful but I am not sure how to do this. Need to investigate.\n. Fixed by #293 \n. Thanks, I totally forgot to test the spread attribute.\n. Good catch, I think resetting the alpha order after a spread attribute is a good way to handle this case.\n. ESLint do not seems to support static fields either.\nAre you using it with another parser (like babel-eslint) ?\n. Ok :) I do not test with the babel-eslint parser for now, but I think I need to support it (since a lot of React developers are using it).\nWill fix this.\n. After investigation it seems babel-eslint does not return AST for static properties, so I can't validate display-name and prop-types in theses cases.\nClass properties are an ES7 experimental feature so it does not surprise me it's not quite finished yet.\nI think we'll have to wait for babel-eslint to support Babel 5.0 to fix this.\nHowever, I have fixed this for static methods #48 and it should land in next release.\n. @sebastienbarre Great! I'll have a look.\n. I confirm that babel-eslint 3.0.1 is now returning the AST for the class static properties, so I will work on it :)\n. @sebastienbarre I cannot reproduce your problem with eslint@0.19.0, eslint-plugin-react@2.1.1 and babel-eslint@3.0.1:\ntest.jsx\njs\nclass Hello extends React.Component {\n  static displayName = 'Widget';\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\n.eslintrc\njson\n{\n    \"parser\": \"babel-eslint\",\n    \"ecmaFeatures\": {\n        \"classes\": true,\n        \"jsx\": true\n    },\n    \"plugins\": [\n      \"react\"\n    ],\n    \"rules\": {\n      \"react/display-name\": 1\n    }\n}\nbash\n$ eslint --reset test.jsx # Does not find any error\n. @sunjay Yes, this is fixed.\nBut you still need to use the babel-eslint parser since espree (the default ESLint parser) does not support static properties.\n. The error comes from ESLint and not the plugin.\nSeems it's parser Espree does not support the spread operator in destructuring assignment.\n. Ok, I try to support the babel-eslint parser (since a lot of React developers are using it) but for now I only run the tests with the default parser Espree. I need to improve this. \nAlso, since #46 this is fixed, you should be able to fully use the spread operator while destructuring props.\n. Right, there is a bug in the React component detection.\n. Great! Thanks!\n. Duplicate of #43, statics are not supported (yet).\n. Sorry, it was not exactly the same issue since this one is about static methods and the other one is about static properties.\n. Hi, there is no particular reason why this rule turned off by default.\nIt's just historical: I progressively added rules to the plugin and all new rules were added off by default. \nWe could totally turn it on by default since this rule has no effect if the no-unused-vars ESLint rule is not enabled.\n. You can do a PR for this :)\n. Hi, do you use the babel-eslint parser ? Seems there is a bug when using react-in-jsx-scope and this parser.\n. I am not aware of any workarounds, except disabling the rule or using the default parser.\nI'll try to fix this bug during this week-end.\n. Can you provide a reduced test case with the .eslintrc configuration file ?\nI tested with one of the files you patched (https://github.com/keystonejs/keystone/blob/master/fields/types/geopoint/GeoPointField.js) with this configuration:\n.eslintrc\njson\n{\n    \"env\": {\n        \"es6\": true\n    },\n    \"ecmaFeatures\": {\n        \"jsx\": true\n    },\n    \"parser\": \"babel-eslint\",\n    \"plugins\": [\n      \"react\"\n    ],\n    \"rules\": {\n        \"no-unused-vars\": 1,\n        \"react/jsx-uses-react\": 1\n    }\n}\nAnd I only got a warning about Note being unused (which is correct)\n``` bash\n$ eslint --reset GeoPointField.js\nGeoPointField.js\n  3:4  warning  Note is defined but never used  no-unused-vars\n\u2716 1 problem (0 errors, 1 warning)\n```\nTested with eslint 0.20.0 , eslint-plugin-react 2.2.0 and babel-eslint 3.0.1\n. Can you provide a reduced test case with the .eslintrc configuration file ?\nI tested with one of the files you patched (https://github.com/keystonejs/keystone/blob/master/fields/types/geopoint/GeoPointField.js) with this configuration:\n.eslintrc\njson\n{\n    \"env\": {\n        \"es6\": true\n    },\n    \"ecmaFeatures\": {\n        \"jsx\": true\n    },\n    \"parser\": \"babel-eslint\",\n    \"plugins\": [\n      \"react\"\n    ],\n    \"rules\": {\n        \"no-unused-vars\": 1,\n        \"react/jsx-uses-react\": 1\n    }\n}\nAnd I only got a warning about Note being unused (which is correct)\n``` bash\n$ eslint --reset GeoPointField.js\nGeoPointField.js\n  3:4  warning  Note is defined but never used  no-unused-vars\n\u2716 1 problem (0 errors, 1 warning)\n```\nTested with eslint 0.20.0 , eslint-plugin-react 2.2.0 and babel-eslint 3.0.1\n. Actually ESLint is right, React is imported at the top of theses files but not used thereafter.\n. Actually ESLint is right, React is imported at the top of theses files but not used thereafter.\n. Thanks!\n. Hi,\nThere is a typo in the rule name in your configuration and ESLint cannot find this unknown rule.\nThe rule name should be react/jsx-no-undef:\njson\n{\n  \"rules\": {\n    \"react/jsx-no-undef\": 1\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"ecmaFeatures\": {\n    \"jsx\": true\n  }\n}\n. Thanks!\n. In first implementation children was always ignored since defining some propTypes for it is not a very common practice. But as @AsaAyers pointed out, there is no particular reason to document all props but not children. Same for className.\nI think you can discuss it in #7.\n. Thanks! Documentation improvement is always welcome :)\n. Thanks!\n. I'm afraid we cannot detect that the callback is not immediately invoked during componentDidMount.\nIn this case I suggest you to rewrite your code not to have setState in componentDidMount\nor simply ignore the warning for this line:\njs\n/*eslint-disable react/no-did-mount-set-state */\nsomeClass.onSomeEvent((data) => this.setState({data: data}));\n/*eslint-enable react/no-did-mount-set-state */\nor\njs\nsomeClass.onSomeEvent((data) => this.setState({data: data})); // eslint-disable-line react/no-did-mount-set-state\nSorry for not having a better solution there :|\n. Do you have an idea of the logic followed by the rule in strict and loose modes ?\nCurrently the rule is very simple: if it find a this.setState(...) in componentDidMount or componentDidUpdate it trigger an error.\n. Good idea, it should do the trick.\nI will work on this.\n. Cannot reproduce neither.\nCan you give us your eslint / eslint-plugin-react versions ? And do you have a real-world class that trigger the bug ? \n. Thanks for the failing case. I'll look at this.\n. It was related to eslint/eslint#1978 which is fixed in ESLint 0.19.0.\n. Thanks!\n. This case is handled by ESLint so it should already warn you:\n.eslintrc\njson\n{\n    \"env\": {\n        \"es6\": true\n    },\n    \"ecmaFeatures\": {\n        \"jsx\": true\n    },\n    \"rules\": {\n        \"no-unused-vars\": 2\n    }\n}\ntest.jsx\njs\n<button onClick={e => this.close()}>Close</button>\n``` bash\n$ eslint test.jsx --reset\ntest.jsx\n  1:17  error  e is defined but never used  no-unused-vars\n\u2716 1 problem (1 error, 0 warnings)\n```\nTested with ESLint 0.19.0\n. Sorry, I don't think I'll do it, at least not for now.\nIt should be really difficult to do this properly without missing a lot of edges cases.\nBut if someone has a solution I can accept a PR :)\n. I think it can be an option for #14 \n. Since v3.4.0 you can enforce different style for non-empty and self-closing tags.\nYou should be able to enforce this style with the following configuration:\njs\n\"jsx-closing-bracket-location\": [1, {\n  \"nonEmpty\": \"props-aligned\", // Align the bracket with the last prop\n  \"selfClosing\": \"tag-aligned\" // Align the bracket with the opening tag\n}]\n. I am afraid that typos handling produce a lot of false-positive errors. I find this kind of rule a bit hazardous and I'm not really comfortable with this :|\nWith the prop-types rule activated you should get a warning that the propTypes attribute is missing and quickly find out the problem.\n. Simple errors like this can be handled pretty easily:\njs\nvar Hello = React.createClass({\n  render: function() {\n    return [<App />,<App />]; // Error: A valid ReactComponent must be returned\n  }\n});\nBut errors like this are much more difficult to catch:\njs\nvar Hello = React.createClass({\n  render: function() {\n    var app = [<App />,<App />];\n    return app; // ???\n  }\n});\nLike #40, I am ok for the the rule but I am not sure how to do this and I need to investigate.\n. I think this request is similar to #40\n. Mmm, I think we can only have a limited support for this case.\nWe can handle the above script but not this one for example:\n``` js\nimport A from \"a\"\nclass B extends A {\n  render() {\n    return {this.props.whatever}\n  }\n}\n```\nIn this case the extended class is in another file and we cannot know if the propTypes property is defined in it or not.\n. Linting is only made on the current file content, starting to jump from file to file, resolving imports and finding how the class is constructed will be very complicated (but I accept PR :wink: ).\nI can handle the original case and if you encounter the second one I think the best way to handle it should be to ignore the prop-types rule for this class:\n``` js\nimport A from \"a\"\nclass B extends A { // eslint-disable-line react/prop-types\n  render() {\n    return {this.props.whatever}\n  }\n}\n```\n. Linting is only made on the current file content, starting to jump from file to file, resolving imports and finding how the class is constructed will be very complicated (but I accept PR :wink: ).\nI can handle the original case and if you encounter the second one I think the best way to handle it should be to ignore the prop-types rule for this class:\n``` js\nimport A from \"a\"\nclass B extends A { // eslint-disable-line react/prop-types\n  render() {\n    return {this.props.whatever}\n  }\n}\n``\n. Nice catch! Thanks!\n. The [no-unknown-property](https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md) rule handle this. This also warn you for the other HTML attributes that are different in JSX (likefor->htmlFor,colspan->colSpan`, etc.).\n. Thanks!\n. Thanks!\n. Great work! \nCan you add the new rule in the Readme? Then I think we can definitely merge it.\n. Great work! \nCan you add the new rule in the Readme? Then I think we can definitely merge it.\n. Perfect, thanks!\n. Perfect, thanks!\n. Thanks. I found the problem and I will release a quick fix.\n. Thanks. I found the problem and I will release a quick fix.\n. ESLint removed JSX support in no-undef since v0.18.0, you must now use the react/jsx-no-undef rule.\n. ESLint removed JSX support in no-undef since v0.18.0, you must now use the react/jsx-no-undef rule.\n. Currently the display-name rule enforce displayName to be set whenever you're using JSX or not.\nWhat you suggesting is a more sloppy mode when the rule only enforce displayName if we directly export the component with module.exports ?\nIf yes, I think this is something feasible.\n. Currently the display-name rule enforce displayName to be set whenever you're using JSX or not.\nWhat you suggesting is a more sloppy mode when the rule only enforce displayName if we directly export the component with module.exports ?\nIf yes, I think this is something feasible.\n. Sadly, as far as I know, a plugin don't have the power to silent an error reported by an ESLint rule, the only way we have to do something approaching is to replicate the ESLint rule, \"patch\" it to fit our needs and use it instead of the ESLint one. It is not very clean and it can be time consuming to maintain the rule in sync with the ESLint one.\nAlso, about your case, I do not understand why you do not want to document the return of render. In my opinion it should be documented like any other function.\n. Sadly, as far as I know, a plugin don't have the power to silent an error reported by an ESLint rule, the only way we have to do something approaching is to replicate the ESLint rule, \"patch\" it to fit our needs and use it instead of the ESLint one. It is not very clean and it can be time consuming to maintain the rule in sync with the ESLint one.\nAlso, about your case, I do not understand why you do not want to document the return of render. In my opinion it should be documented like any other function.\n. I was not aware of this possibility with babel, I think we can add an option for jsx-uses-react like:\njson\n{\n  \"jsx-uses-react\": [1, {\n    \"pragma\": \"dom\"\n  }]\n}\n. Thanks :)\nBut actually I'd prefer to keep the [1, {\"pragma\": \"dom\"}] format to be coherent with the other rules. Also, it allows us to add other options in the future without breaking anything.\n. LGTM.\nThanks!\n. After verification, this bug was already fixed in v2.0.0 #36 \nBe sure to upgrade to the latest version of eslint-plugin-react, that should solve your problem.\n. There is 2 rules to handle these case:\n- react-in-jsx-scope: that will ensure React is available in the scope where JSX is used.\n- jsx-uses-react: that will prevent the React variable to be incorrectly marked as unused.\nDoes theses 2 rules solve your problem ?\n. Thanks.\n. As I responded for a similar issue:\n\nSadly, as far as I know, a plugin don't have the power to silent an error reported by an ESLint rule, the only way we have to do something approaching is to replicate the ESLint rule, \"patch\" it to fit our needs and use it instead of the ESLint one. It is not very clean and it can be time consuming to maintain the rule in sync with the ESLint one.\n\nSo, currently we cannot have these two rules enabled :(\n. Yes, there is no reason to have jsx- in this rule name since it is not related to JSX.\nBut I think we have some cleaning to do in rules names (only JSX related rules should be prefixed with jsx-, jsx-uses-react do not always use React since we now handle custom pragma, etc.)\n. @pwmckenna I think we should rename the rule and keep the current one as an alias for now, but with a deprecation warning (like jsx-quotes).\nThen, in a later time, remove it in a new major release.\n. Seems fine to me too, great addition!\n. Oups, I used the deprecated licenses field. Thanks for the fix!\n. Thanks!\n. Ok to add these options to the rule.\nCan you update the documentation too ? Then I think we'll be good to merge.\n. Thanks!\n. No need for the commit hash, a new release should come out soon.\n. v2.5.0 released\n. Babel seems to accept the code but do not output the propTypes key in the compiled source, resulting in missing propTypes definition.\nI've updated the rule to ignore the propTypes definition in this case, so you'll get an \"propTypes missing\" error if your propTypes definition is invalid.\n. Currently the default configuration is:\n1. Lifecycle methods\n2. Custom methods\n3. render method\nconstructor is not specified in any group, so it is considered as a custom method and the rule asks you to place it after componentWillUnount(the last lifecycle method).\nI think I will update the default configuration to get:\n1. constructor method\n2. Lifecycle methods\n3. Custom methods\n4. render method\nFor now you can set up a custom configuration in your .eslintrc:\njson\n...\n\"react/sort-comp\": [1, {\n  \"order\": [\n    \"constructor\",\n    \"lifecycle\",\n    \"everything-else\",\n    \"render\"\n  ]\n}]\n...\n. It's a very specific use case, but I don't see any problem to include this rule in the plugin if it can be useful for others.\nIf you make a PR I'll accept it :)\n. Thanks!\n. react/sort-comp do not take the method type (static, get, set) into account, the sorting rule is only based on the method name (here something). So for now you do not have the possibility to \"force\" the getters to be before the render method, unless you use a different naming convention for setters, getters, etc.\nMaybe it can be a future rule enhancement.\n. I don't really see the relation with eslint-plugin-react here, are you sure it is not an eslint issue ?\nAlso, I was not be able to reproduce the problem, can you post more information ? Like the eslint/eslint-plugin-react versions used and your .eslintrc config file. Thanks.\n. Destructuring is handled since v2.0.0 and prop-types should yields about the missing props validation.\nWith the following configuration I have the expected behavior with eslint 0.22.1 and eslint-plugin-react 2.5.0:\ntest.js\njs\nvar Hello = React.createClass({\n  render: function() {\n    let {firstname} = this.props;\n    return <div>Hello {firstname}</div>;\n  }\n});\n.eslintrc\njson\n{\n  \"env\": {\n    \"node\": true,\n    \"es6\": true\n  },\n  \"ecmaFeatures\": {\n    \"jsx\": true\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"rules\": {\n    \"react/prop-types\": 2\n  }\n}\n``` bash\n$ eslint --reset test.js\ntest.js\n  3:9  error  'firstname' is missing in props validation  react/prop-types\n\u2716 1 problem (1 error, 0 warnings)\n```\nIf you still have the problem, can you post your full source code and .eslintrc configuration ? Thanks.\n. @stremlenye \n\njs\nlet { props: { firstname } } = this\n\nYou're right, this case is not handled right now, but this is not the case reported by @jamischarles \n. Yep, it seems there is a lot of different prop-types issues here, I'll try to clean this up:\n- @jamischarles As said in https://github.com/yannickcr/eslint-plugin-react/issues/104#issuecomment-111828230, I was not able to reproduce your issue.\n- @stremlenye https://github.com/yannickcr/eslint-plugin-react/issues/104#issuecomment-115703465 is a different issue but it should be fixed in v2.6.2.\n- @davidgilbertson https://github.com/yannickcr/eslint-plugin-react/issues/104#issuecomment-116862534 seems to be related to the new nested props support (introduced in v2.6.0). I'll have a look, but can you create another issue for this ? Thanks.\n@jamischarles I will close this issue for now, feel free to re-open it if you have more information to share about the problem you encountered and how to reproduce it.\n. Do you talk about the let { props: { firstname } } = this problem ?\nIf it's the case, no it is not needed since the issue was already resolved.\n. Wow. That's definitely something we're interested in. I did not dive in your code yet but it seems great so far.\nYou can polish it, I will be very happy to merge it :)\n. One similar case was already discussed in #68 but I do not have any real solution for this case right now (beside disabling the react/prop-types rule for this class).\nFor now the linter only works file by file so we can't know what is declared in other imported files. I don't know if we could use a static analysis tool to get around this limitation but it is an idea worth investigating.\n. I fixed a crash related to the spread operator (#389). Components propTypes validation is now ignored if propTypes are using the spread operator (since in this case we cannot determine what propTypes are defined or not).\n. Great! I'll check this this evening :smiley: \n. Awesome work! Thank you! :tada: \n. Thanks!\n. According to RReverser/acorn-jsx/issues/24 Acorn introduced an API change between 1.0.3 and 1.2.2.\n@RReverser unpublished acorn-jsx 1.1.0 from the npm registry (and bumped to 2.0.0), so if you re-install your dependencies acorn-jsx 1.0.3 will be used and everything should work again.\nbash\n$ rm -rf node_modules\n$ npm i\n. Looks like #120.\n\nAccording to RReverser/acorn-jsx#24 Acorn introduced an API change between 1.0.3 and 1.2.2.\n@RReverser unpublished acorn-jsx 1.1.0 from the npm registry (and bumped to 2.0.0), so if you re-install your dependencies acorn-jsx 1.0.3 will be used and everything should work again.\njs\n$ rm -rf node_modules\n$ npm i\n. No problem, I'm happy to have some so-up-to-date persons to catch my bugs ;)\n. It should come from the new nested props support. I will investigate.\n. There is no rules to detect direct state mutation.\n\nBut that would be a nice feature to have.\n. Is this.props.something correctly defined as a function in propTypes ?\nI have no problem with the following code.\ntest.js\njs\nvar Hello = React.createClass({\n  propTypes: {\n    something: React.PropTypes.func.isRequired\n  },\n  render: function() {\n    return <a onClick={this.props.something.bind(this, 1)}>Hello</a>;\n  }\n});\n.eslintrc\njson\n{\n  \"env\": {\n    \"browser\": true,\n    \"node\": true\n  },\n  \"ecmaFeatures\": {\n    \"jsx\": true\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"rules\": {\n    \"react/prop-types\": 2\n  }\n}\neslint@0.24.0\neslint-plugin-react@2.6.2\n. this.props.children require to be defined in propTypes too.\nFor example a fixed component would be:\n``` js\nimport React, {Component} from 'react/addons';\nexport default class Test extends Component {\n    static propTypes = {\n        children: React.PropTypes.node\n    }\n    componentWillUpdate (nextProps, nextState) {\n        console.log(this.props.children.props.children);\n    }\nrender () {\n    return <span/>;\n}\n\n}\n```\nYou can find more information in the documentation.\nYou can also use the ignore option if you really do not want to declare children in propTypes.\n. There was a bug on the ignore option (#135), it was fixed in v2.6.3. Can you upgrade to the latest version and tell me if it fixes your issue ? Thanks.\n. Sorry about that. Can you give me the source code that make it crash ?\n. @steida Can you create a separate issue for your specific problem ?\n@jsg2021 @ericwooley this issue should be fixed in v2.6.4\n. Sorry but I cannot reproduce the crash with your code (eslint v1.3.1, eslint-plugin-react v3.3.1)\n. @scothis Very useful rule. Thanks!\n@tmcw Sorry for the delay, I was pretty busy last days.\n. @mathieumg I asked to create another issue since it was a different problem than #137 \n. Seems it is a function with some custom methods, I don't think we currently handle this case. I'll have a look.\n. Good idea. I think it should not be too difficult to implement.\n. > Oh, thanks a lot! It was something that I was planning to submit as PR during this weekend :smile:\nHo. Hope you had not stated working on it yet, but let me know if the current implementation covers your use case.\n. I don't have any experience with immutable.js or react-immutable-proptypes, but I can see that the problem here come from the fact we only allow the usage of the properties defined in the shape object.\nDo you have some other cases where the propTypes validation conflict with ImmutablePropTypes ?\nI'm thinking to allow all methods on Map.prototype on the shape objects, do you think it can solve your problem ?\n. We support nested prop types validation since 2.6.0, so we make more checks if you define a shape, arrayOf, objectOfor oneOfType prop type.\n\nI assume the problem is because it is named shape\n\nExactly.\n\nthere is no way to know if it is React.PropTypes.shape, MyCustomValidator.shape, or even the badly spelled Raect.PropTypes.shape?\n\nActually we can know what is preceding shape it but we do not do any check on it because we can not know what React.PropTypes or MyCustomValidator is referring to. Only the last method name is checked (here shape).\n. I see no problem to accept such a PR :)\n. Do you still have the problem with the latest version ? In 2.7.0 we removed some limitations to be more permissive about authorized methods on string, array, number, boolean and function\n. Ho. Can you post the source code that trigger this error ?\n. Seems to be a specific problem with the find method.\nWe only allow methods defined on Array.prototype, but since Array.prototype.find is not yet implemented in v8 we do not allow it.\nI will publish a patch for this.\n. Thanks!\n. In your configuration the /^get.+$/RegEx allows the getInitialStatefunction to be placed bellow componentDidMount.\nI'm not a RegEx expert, but I think the following RegEx should fix the problem:\n/^get(?!(InitialState$|DefaultProps$|ChildContext$)).+$/\nIt should only allow methods names starting with get and not followed by InitialState, DefaultProps or ChildContext.\n. Your .eslintrc file is incorrect, it should be:\njson\n\"plugins\": [\n    \"react\"\n],\ninstead of:\njson\n{\n    \"plugins\": [\n        \"react\"\n    ]\n},\n. Great! Thanks!\n. Ok to switch to *\n. Actually I'd prefer to keep it until the final version of npm 3 is released.\n. After testing, * does not seems to accept pre-release versions since npm 2.\nI switched to >=0.8.0 || ~1.0.0-rc-0, it should do the trick.\n. Hi,\nI'm not sure to want ignore : [ 'foo' ]} to ignore all foo properties on all objects. This could lead to a lot of ignored properties even if we only want to ignore a particular property on a particular object.\nI think it should be more safe to specify exactly where we want to ignore the property, maybe with a configuration like this:\njson\n\"react/prop-types\": [2, { \n  \"ignore\": {\n    \"user\": [\"get\"]\n  }\n}]\n(Also for your particular problem on shape and if you're using react-immutable-proptypes, see #145)\n. Thanks for this!\nI think it's ok to make a small break on this rule to make it more flexible.\n. > So, which break is it? :stuck_out_tongue: Default to true, but rule also considered with \"always\" if set to false? (Last example I showed)\nYep, that break ;)\n. Mmm, if I understand correctly, the JSX elements still expands to a call to React.createElement so JSX will not use the ReactDOM package.\nAnd for the calls to ReactDOM (like ReactDOM.render) the ESLint no-unused-vars rule will perfectly work.\nDid I miss something?\n. Ok, I did reproduce your problem with the following code:\njsx\nclass Hello extends React.Component {\n  render() {\n    var {adDetails, selectedIndex} = this.state, something = this.props;\n    return <div>{adDetails}</div>;\n  }\n}\nThe problem seems to occur only if you are using this.props in a multiple variables declaration.\nI'll fix that.\n. No, the fix is not published on npm yet. I plan to publish it this evening.\n. Looks like to be a good solution to solve the custom validators problem. Thanks!\n. Great! Thanks!\n. This is not planned for now. This would require a lot of additional analysis (and likely an additional static analysis tool) to find out if a variable is referring to a prop at some point.\nFor now we only support this form of destructuring (much easier to analyse):\njs\nexport class Application {\n  static propTypes = {\n    user: PropTypes.shape({\n      displayName: PropTypes.string,\n    }),\n  }\n  render() {\n    const { username } = this.props.user /* <--- warn */\n    return <div className=\"ApplicationComponent\">\n         {username}\n      </div>\n      }\n}\n. If you consider this issue resolved you can close it.\n. @TamerShlash Do you still have this issue even with the latest version ?\n. Oh ok, but the plugin should not crash even with incorrect code ;)\n. Actually the must helpful for me to find and fix the problem is\n- the piece of code that makes the rule to crash\n- the .eslintrc config file\n- the eslint and eslint-plugin-react versions\n. Thanks!\n. Sadly these two rules cannot be enabled at the same time.\nMore details in #86\n. Thanks!\n. The jsx-max-props-per-line rule is not published on npm yet, it should be added in next eslint-plugin-react release.\n. For ES5 classes we can simplify the detection and just rely on the React.createClass presence, it would solve your problem.\nBut for ES6 classes it is more difficult since there is no real difference between a standard ES6 class and a React component, that why currently we just search for a class with a render method that return some JSX (or null).\n. As I responded for a similar issue:\n\nSadly, as far as I know, a plugin don't have the power to silent an error reported by an ESLint rule, the only way we have to do something approaching is to replicate the ESLint rule, \"patch\" it to fit our needs and use it instead of the ESLint one. It is not very clean and it can be time consuming to maintain the rule in sync with the ESLint one.\n\nSo, currently we can't have such rule :(\n. Seems good, but since it's a JSX related rule I think the rule name should be prefixed by jsx-: jsx-no-literals\n. LGTM, Thanks!\n. You can also see the changelog on the releases page.\nBut you're not the first to miss the History.md file. I'm considering renaming it for more visibility.\n. The specified range should also match eslint@1.0.0. But since npm@3.0.0 peerDepencencies are no longer installed automatically, you have to do it manually. I think that's why you get this warning.\n. @dozoisch Actually, according to semver the >=0.8.0 || ~1.0.0-rc-0 range should also match eslint@1.1.0. But with npm@3.2.2 I still get an EPEERINVALID warning when installing eslint-plugin-react in global with eslint@1.1.0. No error with a local installation though. (npm bug ?)\n@tleunen Yep, I'm agree. It does more harm than good right now.\n. >  I'm sorry for submitted something without testing it in an actual project first\nWell, I have not tested either so, let's just call it a tie :)\nI'll release a patch version as soon as I have the fix.\n. Fixed in #183 \n. Yes, there is a note in the documentation about the children case. You an use the ignore option if you don't want to document it in your component.\n. No rule for now, it was already proposed in #15 but I have not taken the time to do it yet.\nOne rule dealing with indent is the eslint/indent rule but it is a pretty complex one. Luckily I think we do not have to handle so much cases to only check attributes.\n. Can you give me the code that crash the rule ?\n. Ok, so I will fix it with a blind bugfix, not very clean but at least it should solve your problem.\n. Thanks @janpaul123, I added this pattern to the test suite.\nThis should be fixed in v3.2.1\n. The current >=0.8.0 || ~1.0.0-rc-0 already match eslint@1.1.0 but during my tests an error is still triggered when installing eslint + eslint-plugin-react in global (see #178), looks like an npm bug.\nI think I will remove the peerDependency instead.\n. What version of npm do you use? How is installed eslint/eslint-plugin-react, globally or locally?\n. > Probably this is more a npm issue, then, because semver also returns correctly.\nYeah, seems the bug that makes us remove peerDependencies one year ago (and that I had completely forgotten the existence) is still there :neutral_face: \n. @ljharb \n``` sh\n$ npm list -g\n/home/yannick/.npm/lib\n\u2514\u2500\u2500 (empty)\n$ npm install eslint -g\n/home/yannick/.npm/bin/eslint -> /home/yannick/.npm/lib/node_modules/eslint/bin/eslint.js\n/home/yannick/.npm/lib\n\u2514\u2500\u2500 eslint@3.3.1\n$ npm install eslint-plugin-react -g\n/home/yannick/.npm/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY eslint@^2.0.0 || ^3.0.0\n\u2514\u2500\u2500 eslint-plugin-react@6.1.2\nnpm WARN eslint-plugin-react@6.1.2 requires a peer of eslint@^2.0.0 || ^3.0.0 but none was installed.\n$ npm list -g\n/home/yannick/.npm/lib\n\u251c\u2500\u2500 eslint@3.3.1\n\u2514\u2500\u2500 eslint-plugin-react@6.1.2\n```\nEverything is working at the end, there is only a false UNMET PEER DEPENDENCY warning when installing eslint-plugin-react. No warning at all if eslint is installed locally.\n. Hi, the no-unknown-property rule handle this. It also warn you for the other HTML attributes that are different in JSX (like for -> htmlFor, colspan -> colSpan, etc.).\n. Thanks for the quick fix. Can you add a test in the test suite to validate the fix?\n. Like @tleunen said, eslint is no longer a peerDependency since 3.2.2 (see https://github.com/yannickcr/eslint-plugin-react/issues/178#issuecomment-129227227).\n. Thanks for the fix!\n. Thanks for the fix!\n. Hi,\nThe eslint rule to catch uninitialized variables is no-undef.\n. Hi,\nThe eslint rule to catch uninitialized variables is no-undef.\n. Before v1.0.0 eslint had a default configuration with some rules enabled.\nNow all rules comes disabled by default, see the eslint migration guide to 1.0.0.\n. Before v1.0.0 eslint had a default configuration with some rules enabled.\nNow all rules comes disabled by default, see the eslint migration guide to 1.0.0.\n. Good idea :+1: \n. Good idea :+1: \n. Hi, do you have a use case for this fix ?\n. Hi, do you have a use case for this fix ?\n. Ok, I found that the following pattern trigger the bug:\njsx\nclass Hello extends React.Component {\n  static get propTypes() {} // <- empty body for the propTypes declaration\n  render() {\n    return <div>Hello World</div>;\n  }\n}\nI'll add a this pattern to the test suite.\nThanks for the bugfix!\n. Ok, I found that the following pattern trigger the bug:\njsx\nclass Hello extends React.Component {\n  static get propTypes() {} // <- empty body for the propTypes declaration\n  render() {\n    return <div>Hello World</div>;\n  }\n}\nI'll add a this pattern to the test suite.\nThanks for the bugfix!\n. Great! Thanks!\n. Yest, that the reason why I did not closed this issue at first, since all reported cases are not (yet) handled.\n. Yest, that the reason why I did not closed this issue at first, since all reported cases are not (yet) handled.\n. The no-extra-parens eslint rule should warn you about parens around multiline jsx.\nBut a specific rule for this could also be added.\n. The no-extra-parens eslint rule should warn you about parens around multiline jsx.\nBut a specific rule for this could also be added.\n. @michaelBenin yes, no-extra-parens and react/wrap-multilines cannot cannot be enabled at the same time.\nMore details in #86\n. While not covering all cases listed in #195, the rule looks fine to me. I think it is a very good start.\nDo you plan to handle more cases, or can I merge it as is and we'll improve it gradually ?\n. While not covering all cases listed in #195, the rule looks fine to me. I think it is a very good start.\nDo you plan to handle more cases, or can I merge it as is and we'll improve it gradually ?\n. Merged, thanks!\n. Merged, thanks!\n. @moroshko I plan to release a new version by the end of the day tomorrow.\n. @moroshko I plan to release a new version by the end of the day tomorrow.\n. Thanks!\n. Thanks!\n. Right, currently the rule only check if the closing bracket is on the same line as the last prop, which does not work if the prop value is on multiple lines.\n. Right, currently the rule only check if the closing bracket is on the same line as the last prop, which does not work if the prop value is on multiple lines.\n. Similar to #68 and #106 but I do not have any real solution for this case right now (beside disabling the react/prop-types rule for this class).\n. From what I've seen, JSX does not support backtick.\n. Great! I'll keep an eye on it.\n. Since ESLint now have a jsx-quotes rule since v1.4.0, the one in this plugin will be set as deprecated.\nIf JSX get support for backtick, you'll have to see with the ESLint team directly.\n. Actually there is a typo in your code, the static property declaration must be followed by a =, not a :.\nThe fixed class:\njsx\nexport default class Greeting extends React.Component {\n  static propTypes = {\n    count: React.PropTypes.number.isRequired\n  }\n  render () {\n    return <h1>Hello, world! {this.props.count} greetings from me!</h1>;\n  }\n}\nBabel don't throw an error but do not export the property in the transpiled code neither, so it is like you did not had any declared propTypes. With Espree, the default ESLint parser, you'll get an Unexpected token : error.\nYou can compare Babel output here http://babeljs.io/repl\n. Class properties are a Stage 0 proposal for ES7.\nSo, moving propTypes out of the class seems safer for now if you do not want to rely on an experimental feature.\n. Duplicate of #86, sadly these two rules cannot be enabled at the same time.\n. It should be fixed in master by #206 but the fix is not released on npm yet.\n. After test, I correctly have all the warnings with your gist (for dog, cat, stuff, component and children).\nTested with eslint@1.4.3, eslint-plugin-react@3.3.2 and babel-eslint@4.1.2\n. Great! Thanks!\n. Yes, it is know. It is due to the difficulties to know what is and what is not a React component simply by analyzing the AST. So for now \"A React component is defined has an object/class with a property \"render\" that return a JSXElement or null/false\".\nI need to improve this to, at least, always consider a class that extends React.Component or an object wrapped in React.createClass as React components.\nFor a possible future evolution, I am also playing with tern.js to know for sure if we are in a React component or not (draft)\n. Thanks!\n. It is not currently possible to sort classes properties according to their type (property, method, etc.). See #128 for this issue.\nBut you can still configure the rule to force state to be placed before constructor. See the rule options for this.\nLet me know if you need more help.\n. I did not know that stateless functions could have some propTypes like a regular component .\nIt is not supported by the plugin yet but I will work on it.\n. I hope it will works fine, like @dbrans said, it is hard to detect is we are in a stateless component. So I had to do some compromises (the function need to return some JSX or a call to React.createElement).\nI will document it in the rule documentation.\n. JSX is still expanding to React.createElement, even in 0.14, so React is needed.\nThe linter is right and you have an error :)\n. Seems you are trying to lint an HTML file with ESLint, well, this not gonna work :)\nMaybe eslint-plugin-html is what you're looking for.\nClosing this issue since this has nothing to do with eslint-plugin-react\n. I need to investigate on this, since I've never used Relay myself.\nBut I would accept a PR for this ;)\n. Nice addition, thanks!\n. I personally write it this way:\njs\n    render() {\n        return (\n            <Application\n                {...defaultProps}\n                {...this.props}\n                {...options}\n            />\n        );\n    }\n. It is possible to add another location type, with the same behavior of tag-aligned except when the tag is preceded with return.\njsx\nrender() {\n  return (<App\n    <Component\n      {...defaultProps}\n      {...this.props}\n      {...options}\n    />\n  </App>);\n}\n. Yes, I'm planning to add support for the fixable flag, at least for formating rules.\nBut PR are welcome ;)\n. Sorry, there is no rule for this right now, but it could be added.\n. Thanks!\n. Thanks!\n. Thanks!\n. Thanks for the report, I'll have a look.\n. Actually your mixin is a valid stateless function component, you can totally render it with <Mixin.renderButton />. So I'm afraid there is no way for us to know if it's a \"real\" stateless component or not.\n(Even so, I've found a few issues with stateless functions and display-name, I'll try to fixes that asap)\n. @iam4x @epmatsw Thanks for your feedback. I plan to release a few bugfixes for theses issues this evening. \n. @iam4x @epmatsw Thanks for your feedback. I plan to release a few bugfixes for theses issues this evening. \n. I just published v3.6.3 and it should address most of your cases. Please open another issue if I missed one.\nAlso, if you do not want to set a displayName to your stateless components, I suggest you to set the acceptTranspilerName option to true (IMHO it should already be true by default, probably in the next major release).\n. I just published v3.6.3 and it should address most of your cases. Please open another issue if I missed one.\nAlso, if you do not want to set a displayName to your stateless components, I suggest you to set the acceptTranspilerName option to true (IMHO it should already be true by default, probably in the next major release).\n. Duplicate of #191.\nThere is no rule for now, but I would accept a PR for this ;)\n. I think this was fixed with #256 (I made some fine tuning to the stateless component detection).\nUpdate eslint-plugin-react to 3.6.3 and reopen this issue if it's not fixed for you.\n. I think this was fixed with #256 (I made some fine tuning to the stateless component detection).\nUpdate eslint-plugin-react to 3.6.3 and reopen this issue if it's not fixed for you.\n. @0x80 Can you create a new issue with \n- an example of the code that do not work\n- your eslint and eslint-plugin-react versions\n- your .eslintrc config file\nThanks.\n. Thanks for the test case, I'll have a look.\n. Thanks for the test case, I'll have a look.\n. Thanks!\n. Thanks!\n. Even if theses are non react files, you should not get some errors.\nThe message Definition for rule 'xxx' was not found suggest that ESLint cannot find theses rules in its default rules or in the plugin.\n- react/no-direct-mutation-state is only available since eslint-plugin-react 3.5.0\n- prefer-es6-class misses the react prefix, it should be react/prefer-es6-class. It is available since eslint-plugin-react 3.6.0\nAlso, if you want to deactivate some rules in your test directory you can use the configuration cascading.\n. Even if theses are non react files, you should not get some errors.\nThe message Definition for rule 'xxx' was not found suggest that ESLint cannot find theses rules in its default rules or in the plugin.\n- react/no-direct-mutation-state is only available since eslint-plugin-react 3.5.0\n- prefer-es6-class misses the react prefix, it should be react/prefer-es6-class. It is available since eslint-plugin-react 3.6.0\nAlso, if you want to deactivate some rules in your test directory you can use the configuration cascading.\n. Thanks a lot! I'll have a look to add support for ES6 components (if you do not have the time to do it).\n. Thanks a lot! I'll have a look to add support for ES6 components (if you do not have the time to do it).\n. I'm agree, this could be a very useful rule. The actual display-name one could be a good starting point imho (but instead of searching for displayName we'll be searching for this.refs, this.state and lifecyle methods.\n. I'm agree, this could be a very useful rule. The actual display-name one could be a good starting point imho (but instead of searching for displayName we'll be searching for this.refs, this.state and lifecyle methods.\n. Duplicate of #264, it is fixed but not published on npm yet.\n. Duplicate of #264, it is fixed but not published on npm yet.\n. Wow, first time I see this. Yep this is not supported at the time.\n. Wow, first time I see this. Yep this is not supported at the time.\n. It would be a great help for us if you can track down the code responsible for the crash, maybe by running ESLint on one directory at a time until you find the file that trigger this error ?\n. I was not able to reproduce the error, but it should be fixed in v3.7.1.\nIf it is not the case, re-open this issue and add the complete code sample that trigger the crash.\n. Thanks for your test case, I can reproduce it now.\nI will fix this.\n. Not in my priorities for now, but if you want to submit a PR for this I'll be happy to add it to the plugin :)\n. > I have created a separate plugin for this since its react-native specific. \nGreat! If you don't mind I'll add it to the Readme :)\n. > I have created a separate plugin for this since its react-native specific. \nGreat! If you don't mind I'll add it to the Readme :)\n. Seems you are not using 3.6.3 but most likely 3.5.0 or 3.5.1, the line reported does not exists anymore since #234. Upgrading to the last version should fix your problem.\n. You can use the allow-in-func option for this case.\n. You can use the allow-in-func option for this case.\n. Hi,\nYou must enable the react/jsx-uses-react rule to get React to be marked as used if you use JSX.\n. Thanks! I'll review this asap.\nCan you also add the new rule to the README.md file?\n. Currently I don't see any other changes to do, LGTM.\n. Merged. Thank you very much!\n. Actually, this is not PropTypes with a \"P\" but propTypes with a \"p\".\nSo in your component PropTypes is detected as a custom property, and according to your configuration it should be placed after render.\nAlso, since propTypes was not defined, onAddMessage is missing in props validation.\n. After testing, no more problems after remplacing PropTypes with propTypes\njs\nclass Hello extends Component {\n  static propTypes = {\n    'onAddMessage': React.PropTypes.func.isRequired\n  }\n  _addMessage() {\n    this.props.onAddMessage(input.value);\n  }\n  render() {\n    return <div onCLick={this._addMessage}>Hello</div>;\n  }\n}\nTested with eslint 1.7.1 and eslint-plugin-react 3.6.3.\n. Working on it.\n. Should be fixed by 2749a0b15bdc7747fe30cdebfde7f54cd41ba75e in v3.7.0. Let me know if it's not the case.\n. Should be fixed by 2749a0b15bdc7747fe30cdebfde7f54cd41ba75e in v3.7.0. Let me know if it's not the case.\n. Working on it\n. Should be fixed by 2749a0b15bdc7747fe30cdebfde7f54cd41ba75e in v3.7.0. Let me know if it's not the case.\nAlso, if you do not want to set a displayName to your stateless components, I suggest you to set the acceptTranspilerName option to true.\n. Should be fixed by 2749a0b15bdc7747fe30cdebfde7f54cd41ba75e in v3.7.0. Let me know if it's not the case.\nAlso, if you do not want to set a displayName to your stateless components, I suggest you to set the acceptTranspilerName option to true.\n. Thanks! I think we'll keep tag-aligned has-is for now for backward compatibility and remove it in a future version.\n. Yes, there was a few changes about component detection. There is still a few bugs (#267, #277) and I'm working on it.\n. Should be fixed by 2749a0b15bdc7747fe30cdebfde7f54cd41ba75e in v3.7.0. Let me know if it's not the case.\n. Should be fixed by 2749a0b15bdc7747fe30cdebfde7f54cd41ba75e in v3.7.0. Let me know if it's not the case.\n. @pascalpp I don't know what was the @jcreamer898 solution, but in his configuration the no-unused-vars rule is still enabled.\nreact/jsx-uses-vars only \"patch\" no-unused-vars to detect variables used in JSX and has no effect if that last rule is not enabled.\n. Thanks for the quick fix :)\n. Can you give me more details about the error ? Like the source code that trigger this error or at least the error stack trace. Thanks.\n. Can you give me more details about the error ? Like the source code that trigger this error or at least the error stack trace. Thanks.\n. Thanks for the details, this should be fixed in next release.\n. Thanks for the details, this should be fixed in next release.\n. @Zenwolf this issue was fixed in v3.7.1, upgrade and it should be ok :)\n. @Zenwolf this issue was fixed in v3.7.1, upgrade and it should be ok :)\n. I see 2 components in your file NavbarLink and App so I believe the rule is working.\nBut an option will be added to no-multi-comp to ignore stateless components like NavbarLink.\n. Fixed at the same time as #287 with dcf01a62e8303c2670be157427b243a891a96989\n. Fixed at the same time as #287 with dcf01a62e8303c2670be157427b243a891a96989\n. Duplicate of #286 \n. Duplicate of #286 \n. No problem :) I'm preparing a patch release, it should be published in next coming hour.\n. No problem :) I'm preparing a patch release, it should be published in next coming hour.\n. Can you give me the full source code for a file that trigger no-multi-comp errors in your configuration ?\n\n\nOnly count functions that take a single argument or a destructured single argument as components.\n\n\nStateless components can also have 2 arguments (props and context).\n\n\nAdd an option to react/no-multi-comp to exclude stateless components from the count.\n\n\nYes, this is possible.\n. Can you give me the full source code for a file that trigger no-multi-comp errors in your configuration ?\n\n\nOnly count functions that take a single argument or a destructured single argument as components.\n\n\nStateless components can also have 2 arguments (props and context).\n\n\nAdd an option to react/no-multi-comp to exclude stateless components from the count.\n\n\nYes, this is possible.\n. > in my opinion, it's too complicated to identify stateless components or helpers... so lint rules that were built with previous assumptions about components need re-evaluating... \nYes, that's what we are trying to do, but since it is really difficult to detect stateless components we try to make some assumptions and treat some exceptions. And the diversity of the patterns used in the React community is not helping ;)\n\ntl;dr: imo, the no-muli-comp rule should only apply to Stateful (traditional) Components.\n\nI will add an option for this for sure but I don't plan to totally deactivate this rule for stateless components.\n. Can you give me a code sample that trigger invalid lint errors ?\n. Can you give me a code sample that trigger invalid lint errors ?\n. Duplicate of #286 and #285, these 2 issues where fixed in v3.7.1.\n. Duplicate of #286 and #285, these 2 issues where fixed in v3.7.1.\n. > Let me know if you want to add an option to ignore arrow functions and just do array validation.\nFor what cases would you would disable the rule for arrow functions ? Is there a false positive risk ?\n\nI think that is an acceptable (and unlikely) edge case such that it would not be worth covering\n\nAgreed to not handle this case for now.\nBeside that, it's looks good to me. Can you squash your commits when you're finished ?\n. Merged, thanks!\n. Yep, duplicate of #226.\n. A class is detected as a React component if\n- it extends React.Component, Component\n- or if one of its method returns a React Element (with JSX or React.createElement).\nMaybe restricting this second rule to the methods named render would solve your problem.\n\nDisplay-name rule should only be a warning anyway, right?\n\nCould be an error or a waning, it depends how you have configured the rule in ESLint. But I think you should enable the acceptTranspilerName option. This way Form will be accepted as the component displayName.\n. Seems to be a duplicate of #291\n. Nested prop-types are supported since v2.6.0, your example will correctly generate an error for bar.nope but not for bar.faz.\n. Nested prop-types are supported since v2.6.0, your example will correctly generate an error for bar.nope but not for bar.faz.\n. Not for now, but I can consider this possibility.\n. Hi, what is the problem exactly ?\n. No particular reason for not having it for componentDidUpdate, it was just more common to need it for componentDidMount. We can totally add the same option for no-did-update-set-state.\n. Great! Thanks for this!\n\nParsing the error message should now be sufficient to allow writing an external autofixer.\n\nActually since ESLint now have an API to apply fixes we could directly add the autofixer in the rule. There is already an issue for this (#245) but I did not yet had the time to do it.\n. Actually you can totally define propTypes in stateless function components.\njs\nfunction Hello(props) {\n  return <div>Hello {props.name}</div>;\n}\nHello.propTypes = {\n  name: React.PropTypes.string.isRequired\n}\nYou can also define defaultProps and use context. \nA good article about stateless components: Functional Stateless Components in React 0.14\n. This is a bug, this pattern should be supported.\n. Duplicate of #245 \n. Mmm, did you mean the opposite instead? To check that a non required propType has a default value?\n. See #528\n. Ok for me. Like @Daniel15 said, can you set the rules in alphabetical order in the list? Then squash your commits? Thanks.\n. Merged, thanks!\n. Sorry for the delay, I will look at it this week end.\n. Merged, thanks!\n. Duplicate, as said by @Daniel15 :)\n. Yep, the react/jsx-quotes rule has been deprecated for the ESLint jsx-quotes rule which does not have exactly the same options.\n. I'm not sure, but maybe you forget to enable experimentalObjectRestSpread in your ESLint configuration?\n. Looks good to me. Can you squash your commits? Thanks.\n. Merged, thanks!\n. display-name is still useful if you want to prevent \"anonymous\" components like:\njs\nexport default function(props) {\n  return <div>Hello {props.name}</div>\n}\n\nThis is yet another case where it might be good to have an ignoreStatelessFunctionComponents option, but I'm not sure what @yannickcr's thoughts on that are.\n\nI do not really see the advantage over just turning on acceptTranspilerName.\nAlso, in the next major version the acceptTranspilerName option will be on by default.\n. no-multi-comp has an ignoreStateless option since v3.8.0.\nI'm agree it's very difficult to detect stateless components, that's why sometimes we can get some false positives. But I am not against adding an ignoreStateless option to the rules that could have some problems (even display-name if you think acceptTranspilerName do not solve all the cases ;) ).\n. Thanks!\n. I'll be happy to fix the rule for this but I've never used react-redux-provide, formsy-react or recompose.\nIs there any common pattern on which we could rely?\n. I'll be happy to fix the rule for this but I've never used react-redux-provide, formsy-react or recompose.\nIs there any common pattern on which we could rely?\n. Great, I also published eslint-plugin-react 3.10.0 with the fix to stop extending the context object. So everything should be fine now :)\n. Wow that was fast!\n. Merged, thanks!\n. Thanks!\n. @jonathanong You can look at the no-danger rule and use a similar one to disallow the style JSXAttribute. And target JSXOpeningElement to disallow the style element the same way. You can also use AST explorer, it's a great tool to explore AST and to write rules.\n\nI think sometimes they make sense though. background image makes sense as an inline style sometimes, so i guess there should be an option for CSS properties to allow.\n\nThat could be interesting but also much more difficult do to since styles can come from various places and we can't really track them down since we only have access to the AST.\n. I think this should also be allowed by the rule.\n. Ok, I think the problem only occurs if you have a variable with the same name as your element.\nAnother example by @yordis:\njs\n<label htmlFor={name}>{label}</label>\n. > Currently only failing tests because I'm new to developing ESLint rules, so it'll take me a couple of days.\nNo problem :)\n\nI was planning to do it by detecting if the calling method is map.\n\nSeems to be a good solution. Right now I don't see any other cases, but I prefer to miss some edge cases than having some false errors.\n. Seems due to a missing test for a case in jsx-key https://coveralls.io/files/1701759218#L50\n(for jsx-pascal-case, it already had a bad coverage, my fault!)\n. Seems due to a missing test for a case in jsx-key https://coveralls.io/files/1701759218#L50\n(for jsx-pascal-case, it already had a bad coverage, my fault!)\n. Merged, thanks :)\n. Merged, thanks!\n. Right, the latest release on npm does not include this rule for now.\nA new release with this rule should be published this week-end.\n. This rule is now available in v3.11.0.\n. Wrong repository, this crash is related to the eslint no-irregular-whitespace rule.\nI suggest you to report it directly on the eslint repository.\n. Great, thanks!\n. Yes, sorry for that. I will publish a patch release with the fix.\n. Yeah, it is a typo in the changelog :|\n. Can you give me a code sample that trigger that invalid lint errors ? \n. Seems to be a duplicate of #329\n. Can you also add a test that reproduce the crash? Thanks.\n. Thanks for all your help. I was able to find the problem and fix it in be3b7f30abc4ef2d61acef2692e27cfb9e1ef792.\n. Thanks!\n. Thanks.\n\nNot sure why the checks have failed?\n\nJust a very small coverage decrease because you removed some tested lines, not an error for me.\n. Sorry for the delay, I'm searching for a more generic solution to be able to set a custom pragma to all the rules at once.\n. Fixed in 4cb2e9e\nNow all rules relying on component detection (display-name, prop-types, etc.) or on the React variable (jsx-uses-react, react-in-jsx-scope, etc.) are using the shared settings.\n. This can be useful, I'll try to find some time to do it (or don't hesitate to submit a PR if you want)\n. Have you tried to upgrade to the latest eslint-plugin-react version and see if it fixes this problem ?\n. Actually it's your JavaScript that is invalid, you must have two opening and closing curly braces, one for the JSX attribute and one for the value:\nFixed code:\n``` js\nimport ReactDOM from 'react-dom';\nimport { Relay, RelayRootContainer } from 'react-relay';\nimport ExampleComponent from '../components/ExampleComponent';\nReactDOM.render(\n   Relay.QLquery {\n            node(id: \"123\")\n          }\n      }\n    }}\n  />\n);\n```\n. Yep, this pattern is not actually handled.\n. This pattern is difficult to handle, and currently if you're using it the rule will totally ignore props validation for this component.\n. This pattern is difficult to handle, and currently if you're using it the rule will totally ignore props validation for this component.\n. @ljharb since the patterns used in the React community are very diversified it is hard (impossible?) to cover everything. And I prefer to have certain errors silenced than having some false-positive cases that can break a build because the linter does not understand the used pattern (which does not indicate that the code is not correct). But maybe this can be a configurable setting?\nAlso about this current issue, after investigation it seems not so difficult to do after all (at least for simple cases like in @kesne example). So i'll try to submit a patch for this :)\n. @ljharb since the patterns used in the React community are very diversified it is hard (impossible?) to cover everything. And I prefer to have certain errors silenced than having some false-positive cases that can break a build because the linter does not understand the used pattern (which does not indicate that the code is not correct). But maybe this can be a configurable setting?\nAlso about this current issue, after investigation it seems not so difficult to do after all (at least for simple cases like in @kesne example). So i'll try to submit a patch for this :)\n. Right, it was released in v3.13.0, sorry for not having informed you earlier.\n. Thanks, I was making a similar rule but I never finished it.\nI'll try to merge the two.\n. I merged the two rules, the no-deprecated rule should be available in next release. Thanks again!\n. Why not.\nMaybe I'll rename this rule in next major version to be more explicit about the different styles.\n. Hi, and sorry for the review delay.\nThanks for this useful option, I'm totally ok to add it to the display-name rule.\nBut I found a small issue, since the hasDisplayName property is also true if the transpiler can find a name, this option will warn in all cases, with or without an explicit displayName.\nFailing example:\njs\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\nWill warn:\nExplicit display name definition is forbidden\n. Hi, and sorry for the review delay.\nThanks for this useful option, I'm totally ok to add it to the display-name rule.\nBut I found a small issue, since the hasDisplayName property is also true if the transpiler can find a name, this option will warn in all cases, with or without an explicit displayName.\nFailing example:\njs\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\nWill warn:\nExplicit display name definition is forbidden\n. Hi, thanks for the rule.\n2 minors things though:\n- Maybe a less generic rule name (like no-string-refs ?), no-refs seems to forbid all types of refs.\n- Can you add some titles in the documentations? See other rules documentation for example.\nBeside that I'm totally ok to add this rule :)\n. Hi, thanks for the rule.\n2 minors things though:\n- Maybe a less generic rule name (like no-string-refs ?), no-refs seems to forbid all types of refs.\n- Can you add some titles in the documentations? See other rules documentation for example.\nBeside that I'm totally ok to add this rule :)\n. Just missing the title in docs/no-string-refs.md\nCan you add it and squash your commits? Then I think we'll be good to go :)\n. Just missing the title in docs/no-string-refs.md\nCan you add it and squash your commits? Then I think we'll be good to go :)\n. Perfect, thanks!\n. We can add them if this does not break the current configuration.\nMeanwhile, you can still configure the rule to customize the lifecycle methods.\n. We can add them if this does not break the current configuration.\nMeanwhile, you can still configure the rule to customize the lifecycle methods.\n. I was not able to reproduce the crash, but I added an additional check that should prevent this case. \nDon't hesitate to reopen this issue if your problem is not resolved.\n. I was not able to reproduce the crash, but I added an additional check that should prevent this case. \nDon't hesitate to reopen this issue if your problem is not resolved.\n. Merged, thanks!\n. Merged, thanks!\n. That's the purpose of the display-name rule, especially with the acceptTranspilerName option that should tell to the rule to only force you to set a displayName if the transpiler cannot find a name for the component.\nBut it seems it does not works the way I thought for functional components.\njs\nconst Foo = (props) => <div>Hello {name}</div>;\nFoo.propTypes = {\n  name: React.PropTypes.string.isRequired\n};\nWill trigger:\nWarning: Failed propType: Required prop `hello` was not specified in `<<anonymous>>`.\nAnd for a classic comment (in ES5 or ES6):\njs\nconst Foo = React.createClass({\n  propTypes: {\n    hello: React.PropTypes.string.isRequired\n  },\n  render: function() {\n    return <div>{this.props.hello}</div>;\n  }\n});\nWill trigger:\nWarning: Failed propType: Required prop `hello` was not specified in `Foo`.\nSo it's a bug in the acceptTranspilerName option.\n. That's the purpose of the display-name rule, especially with the acceptTranspilerName option that should tell to the rule to only force you to set a displayName if the transpiler cannot find a name for the component.\nBut it seems it does not works the way I thought for functional components.\njs\nconst Foo = (props) => <div>Hello {name}</div>;\nFoo.propTypes = {\n  name: React.PropTypes.string.isRequired\n};\nWill trigger:\nWarning: Failed propType: Required prop `hello` was not specified in `<<anonymous>>`.\nAnd for a classic comment (in ES5 or ES6):\njs\nconst Foo = React.createClass({\n  propTypes: {\n    hello: React.PropTypes.string.isRequired\n  },\n  render: function() {\n    return <div>{this.props.hello}</div>;\n  }\n});\nWill trigger:\nWarning: Failed propType: Required prop `hello` was not specified in `Foo`.\nSo it's a bug in the acceptTranspilerName option.\n. > But I'm not quite sure how it relates to acceptTranspilerName because at least Babel does not add a transpile name for function components?\nI thought he adds one, but obviously it is not the case. So you're right\njs\nconst Hello = () => <div>Hello</div>;\nshould warn.\n. > But I'm not quite sure how it relates to acceptTranspilerName because at least Babel does not add a transpile name for function components?\nI thought he adds one, but obviously it is not the case. So you're right\njs\nconst Hello = () => <div>Hello</div>;\nshould warn.\n. Thanks!\n. Same error as #203, property declaration must be followed by a =, not a :.\nSee https://github.com/yannickcr/eslint-plugin-react/issues/203#issuecomment-136501080 for explanation.\n. Thanks :)\n. Mmm. Not really sure about this change or, to be more precise, about the reasons for it :)\nImho it depends how the rule is configured, if configured as warning then should is more appropriate, but if configured as error then it is more likely must (since ESLint will exit with code 1 in this case).\nAfter having a look at ESLint rules, it appears that there is no real rules for messages, should and must are used the same way, whether it is for styling rules or not.\n(Same for us, due to the different rules authors and no rules about messages formatting, but that something I'd like to improve in future releases)\n. > My reasoning is that \"must\" is absolutely not appropriate for warnings as it is misleading. The reverse is not true - \"should\" can also be used for errors without causing confusion. \"must\" is very definite, whereas \"should\" is a more lenient and flexible term.\nThat's a sufficient reason for me :)\nThanks for the suggestion, do not hesitate to suggest other improvements to the error messages ;)\n. Thanks!\n. no-set-state is a very restrictive rule, maybe you don't need it for your project.\nIf you still want to apply this rule to your project but have a few exception you can disable the rule in a specific file:\n``` js\n/eslint-disable react/no-set-state /\nonFetchGithub(data) {\n  this.setState(this.state.set('dataByRestApi', Immutable.fromJS({data})));\n}\n```\nor on a specific line\n``` js\n/eslint-disable react/no-set-state /\nonFetchGithub(data) {\n  this.setState(this.state.set('dataByRestApi', Immutable.fromJS({data}))); // eslint-disable-line react/no-set-state\n}\n```\nSee the ESLint documentation for more informations.\n. Merged, thanks!\n. Thanks! I will add a test to confirm the fix.\n. Wow! Great codemod!\nIdeally it should be integrated to the rule, using the fixable flag from ESLint (I should really get to work on #245).\nBut for now referencing it in the documentation could already be a great help for users.\nThanks!\n. Wow! This is really great!\nCan you squash your commits ? Then I think we'll be good to go :)\n. Merged, thanks!\n. Fixed. Thanks.\n. Maybe ignoreRefs would be less confusing name for this option ?\nAlso, thanks for the doc update. I think the || false is ok to document the default value.\n. Merged, thanks!\n. Hi, you must enable the react/jsx-uses-react rule to avoid this problem. \n. If I understand correctly you would like something similar to the objectsInObjects option in the ESLint object-curly-spacing rule. I think that's something we can do.\n. @casesandberg yes, alternative is not a valid option since this proposal is not implemented yet.\n. It seems you're using the ESLint default parser Espree, but Espree does not support flow annotations (https://github.com/eslint/espree/issues/189).\nYou'll need to use babel-eslint for this.\n. I cannot reproduce the error with eslint@2.0.0-beta.1 and babel-eslint@4.1.6.\nI'm pretty sure this is not related to eslint-plugin-react at all since the parse error come from ESLint.\nBut if you can provide me more information (eslint/babel-eslint versions, .eslintrc file and the full source file) maybe I could find the problem.\n. Yes I would be welcome :) And since we're already have the callbacksLast and shorthandFirst options I do not see any problem to keep the same pattern.\n. Great! Thanks!\n. That's a bug, ref should be completely ignored.\n. Same error as #203, property declaration must be followed by a =, not a :.\nSee https://github.com/yannickcr/eslint-plugin-react/issues/203#issuecomment-136501080 for explanation.\n. The no-deprecated rule was introduced in v3.12.0, so you may need to upgrade eslint-plugin-react.\n. Do you correctly load eslint-plugin-react ? Can you past your .eslintrc config file ?\n. Does something like #398 can suit your need ?\n. No, but it was already asked in #244. I accept PR though.\n. No, since it's related to the parser and the ES6 classes, and not related to React at all.\n. Duplicate of #214, but yes it could be a very useful rule, I need to work on it.\n. Duplicate of #214, but yes it could be a very useful rule, I need to work on it.\n. Great! Can you squash your commits? Then I think we'll be good to go :)\n. Merged, thanks!\n. Great! Can you squash your commits? Then I think we'll be good to go :)\n. Merged, thanks!\n. Can you past the source code that trigger this error ?\n. Fixed in v3.16.1, sorry for this (and thanks to @alitaheri for the fix!)\n. Fixed in v3.16.1, sorry for this (and thanks to @alitaheri for the fix!)\n. Thanks. I'll make some additional tests for complex propTypes but for now it should fix the crash.\n. Is it really useful since AFAIK Babel will keep compiling both as named components ? \nThe display-name rule should already prevent you from making \"anonymous\" components.\n. Is it really useful since AFAIK Babel will keep compiling both as named components ? \nThe display-name rule should already prevent you from making \"anonymous\" components.\n. @ljharb you're right, you may even not need a transpiler at all if you're not using JSX.\n@lencioni maybe a difference between Babel 5 and 6 ? The REPL is still using Babel 5. The <StatelessComponent> case is exactly the sort of things display-name should prevent. But maybe there is some case where the acceptTranspilerName option is assuming that Babel will assign a name when in reality this is not the case. I will do some tests.\nBut yes, it makes sense to have a rule to enforce consistency for stateless components.\n. @ljharb you're right, you may even not need a transpiler at all if you're not using JSX.\n@lencioni maybe a difference between Babel 5 and 6 ? The REPL is still using Babel 5. The <StatelessComponent> case is exactly the sort of things display-name should prevent. But maybe there is some case where the acceptTranspilerName option is assuming that Babel will assign a name when in reality this is not the case. I will do some tests.\nBut yes, it makes sense to have a rule to enforce consistency for stateless components.\n. Thanks!\n. Thanks!\n. Hi, you must enable the react/jsx-uses-react rule to avoid this problem. \n. Hi, you must enable the react/jsx-uses-react rule to avoid this problem. \n. Sorry, I don't understand your point. react/jsx-quotes rule was deprecated in v3.4.0 and will be removed in next major release.\n. Sorry, I don't understand your point. react/jsx-quotes rule was deprecated in v3.4.0 and will be removed in next major release.\n. Thanks. I think I'll add an option to inverse the rule too, with always/never like in the jsx-boolean-value rule.\n. Thanks. I think I'll add an option to inverse the rule too, with always/never like in the jsx-boolean-value rule.\n. You must put react/jsx-no-bind in your configuration file, not simply jsx-no-bind.\n. You must put react/jsx-no-bind in your configuration file, not simply jsx-no-bind.\n. Thanks for this. But, even if I'm ok with the purpose of the rule, I'm a bit reluctant to merge this rule in its actual form since it has a very different way to work beside other rules.\n- Other rules does not offer a way to customize the error message, so it is a bit weird to have this functionality for only this rule.\n- Usage of RegExp is imho more powerful and flexible than a isPrefix property (see the sort-comp rule for example).\nAlso it does not support the official way to manage conditional classes in React components (classnames) but this can be a future enhancement.\n. Thanks for this. But, even if I'm ok with the purpose of the rule, I'm a bit reluctant to merge this rule in its actual form since it has a very different way to work beside other rules.\n- Other rules does not offer a way to customize the error message, so it is a bit weird to have this functionality for only this rule.\n- Usage of RegExp is imho more powerful and flexible than a isPrefix property (see the sort-comp rule for example).\nAlso it does not support the official way to manage conditional classes in React components (classnames) but this can be a future enhancement.\n. Thanks!\n. Thanks!\n. Thank you very much for this. But since it can be a breaking change in some configuration I will wait for the next major release to merge it.\n. Thank you very much for this. But since it can be a breaking change in some configuration I will wait for the next major release to merge it.\n. Sure. I will publish a checklist (maybe tomorrow) of what I would like to pass in next major release.\n. Sure. I will publish a checklist (maybe tomorrow) of what I would like to pass in next major release.\n. Merged, thanks!\n. Merged, thanks!\n. Merged, thanks!\n. Thanks!\n. Thanks!\n. Thanks, but since it's a breaking change I will wait a little before removing this rule.\nI should release a new major version soon but I would like to do a bit of cleanup before.\n. Thanks, but since it's a breaking change I will wait a little before removing this rule.\nI should release a new major version soon but I would like to do a bit of cleanup before.\n. Yep, same problem as #324, but you are on the wrong project ;)\nThe problem is in eslint-plugin-react-native https://github.com/Intellicode/eslint-plugin-react-native.\n. Yep, same problem as #324, but you are on the wrong project ;)\nThe problem is in eslint-plugin-react-native https://github.com/Intellicode/eslint-plugin-react-native.\n. It's should be done during this week-end :)\n. Just published 4.0.0-rc.0 on npm, you can test it by running:\nbash\n$ npm install eslint-plugin-react@next\nLet me know if you find any issue or if you have suggestions about the new recommended configuration.\n. Thanks @lukekarrys, the issue should be fixed in 6643f8775851d765ce922b09f1826d0053d870a6.\nI will publish another RC tomorrow.\n. Just published 4.0.0-rc.1 on npm.\n. Happy to hear it! In this case, I think I will publish 4.0.0 tomorrow (same as rc.1 with a few documentation fixes).\n. 4.0.0 is now published\n. Can you post more details? (stacktrace, .eslintrc config file and code that trigger the error?)\nIt will help us to fix the problem. Thanks.\n. > I checked the global & node_modules eslint versions, both of which are 0.20.0\nIf you are really using eslint@0.20.0 this can explain the error.\nI suggest you to upgrade to latest eslint version and retry.\n. Merged, thanks.\n. Merged #440 instead.\n. > I think it makes more sense to invert the option to be an ignore option.\nI agree, merged. Thanks!\n. Good idea. Merged.\n. Yes, tracking variable reassignment can be very difficult so it is ignored for now.\nI don't know how popular are these patterns, if it's worth it we could try to add support for them.\nAlso I really don't know what amount of work would be required for that, it needs investigation.\n. Thanks, I'll have a look.\n. The option is allow-in-func, not allowed-in-func.\n. Do you use eslint-plugin-react@4.0.0-rc.0 ? If yes I think this is duplicate of #443.\n. - babel-eslint is a parser, it will transform your JavaScript code into an AST that will be used by ESLint to validate your code. You can see what an AST looks like on AST Explorer. ESLint support a few parsers with different capabilities. Babel-eslint is great since it does support all valid Babel code, so it is a good companion if you are already compiling your JavaScript with Babel.\n- eslint-plugin-* are ESLint plugins, they add some additional rules to ESLint. Most of the plugins can be found on npm with the eslintplugin keyword.\n  - eslint-plugin-babel add some rules for some of the Babel experimental features which are not natively supported by ESLint because it is... experimental.\n  - eslint-plugin-react add some rules specifically for React, this mostly include good practices and JSX code formatting.\n. > ```\n\nnpm install -g eslint babel-eslint\n```\n\nSeems your problem come from here.\nBy doing this you are always installing the latest ESLint release, which can introduce some breaking changes if a new major version is released... and this is what happened a few days ago with the release of ESLint 2.0.0.\nSince ESLint 2.0.0 the parser options format changed (migration guide), so with your current configuration the JSX/module support is not enabled.\nYou should replace\n\"ecmaFeatures\": {\n    \"jsx\": true,\n    \"modules\": true\n}\nby\n\"parserOptions\": {\n    \"ecmaFeatures\": {\n        \"jsx\": true,\n        \"modules\": true\n    }\n}\nAnother solution is to use babel-eslint instead of the ESLint default parser (you are installing it but it is not used in your .eslintrc config file), for this add the following line in your .eslintrc\n\"parser\": \"babel-eslint\"\nGenerally speaking you should at least fix the major versions of your dependencies to avoid future breaking changes, for example:\n...\n  - npm install -g eslint@1.x.x babel-eslint@4.x.x\n  - npm install -g eslint-plugin-react@3.x.x\n...\n. babel-eslint does not transpile your code, it just allow you to use the Babel parser (Babylon) instead of ESLint default one (Espree) to parse your code.\nBut can you post your full .eslintrc config file, the code that trigger the error and the eslint/eslint-plugin-react versions ? Thanks.\n. Same as https://github.com/yannickcr/eslint-plugin-react/issues/447#issuecomment-184617282 (modules feature is not enabled)\n. Nice catch, thanks!\n. Thanks!\n. @ljharb what is changing in v15 for the last one ?\n. @ljharb yep, I saw nothing in the blog post so I was wondering. But I added a shared setting for React version in 426b22890452550ac978e66f2f22a0016dc41788 so it should not be very difficult to adapt for v15 if we need to.\n. Thanks. I will review it this week, but I need to do a bit of cleanup in all \"indent-related\" issues first :|\n. Not yet, sorry. I still have a lot of triage to do in the issues first.\n. (Finally) merged, thanks!\n. They are already ignored, but I seems there is a bug with line-breaks.\n``` js\nprops\n.jobs\n.forEach(() => {}); // forEach missing in props validation\nprops.jobs.forEach(() => {}); // No warning\n``\n. Did you test onmaster? Since the fixedprefer-stateless-functionis not yet released on npm.\n. Ok, there is a small bug on how we retrieve the class properties, so we do not catchcomponentDidMount`. I will publish a patch release tomorrow.\n. Merged. Thanks!\n. Merged. Thanks!\n. Yep. I totally forgot the docs on this one :(\n. Merged, thanks!\n. Merged, thanks!\n. Can you post your eslint configuration and a full code example that trigger the error? Thanks.\n. Thanks. Can you also post a React Component that trigger the bug?\n. Ok, thanks @calmdev .\nFor now I tried with:\njs\nclass Hello extends React.Component {\n  constructor() {}\n  shouldComponentUpdate() {}\n  setSomething() {}\n  onDragStart() {}\n  getBound() {}\n  onSomething() {}\n  render() {}\n}\nAnd the airbnb configuration (since it is the one @neiker is using) but all I got is \nsetSomething should be placed after onSomething (react/sort-comp)\nWhich is correct in this case.\n. Thanks @calmdev , I was able to reproduce the bug with your example. I'll fix this.\n. Sorry for the delay. I will try to check this today.\n. Merged, thanks!\n. Thanks!\n. Thanks!\n. Thanks for this! I think there is a small issue in a test case though.\n. Thanks for this! I think there is a small issue in a test case though.\n. Great! Can you squash your commits? Then I think we'll be good to go :)\n. Great! Can you squash your commits? Then I think we'll be good to go :)\n. Merged. Thanks!\n. Merged. Thanks!\n. I was not aware of this functionality of react-router, it's a very special case. Right now I don't see how to handle this but I will think about it. \n. I was not aware of this functionality of react-router, it's a very special case. Right now I don't see how to handle this but I will think about it. \n. I try to reduce false positive/negative when detecting React Components, but it is particularly hard with SFC since they are simple functions and since the linting is made file by file we don't know where/how it will be used.\nRight now I think we are not too bad at detecting SFC since we have covered most of the common patterns used by the community. Of course there is still some edge cases (like the pattern used here by react-router for createElement) that can be problematic. But in this case it is not unfixable imho.\n@mjackson:\n\nCan we perhaps separate out this functionality into an opt-in sfc-display-name rule?\n\nSome people have already asked for an ignore-sfc option for rules like display-name or prop-types. It could be something nice to have.\n\nFWIW react-motion also allows you to specify a children prop that returns React elements. We're currently working on moving the react-router API even more in this direction, so we need a fix here.\n\nBeside the original case of this issue, did you encountered other problematic patterns with react-motion or the future react-router API?\n. @mjackson \n\nThe rule was complaining about this test specifically.\n\nOk, in this was definitely a bug. I made a fix on component detection for this particular case, so it should be better in next release (does not fix the original problem of this issue though).\n. Yes, the only relevant change here is the addition of components.add(node, 0);\nThe second parameter is the \"confidence\", when searching for components we rank them with confidence levels:\n- 2: Component\n- 1: Maybe a component, but we're not sure\n- 0: \"ban\" the node, it will not be considered as a component even if we have a confidence level of 2 for it\nThis is due to the fact that the AST is traversed only one time by ESLint so we need to be sure to store information about components (node, propTypes, etc.) even if we are not quite sure that they are components yet.\nAt the end we only validate the components with a confidence level of 2.\nWith this change if I cannot find a component from an (Arrow)FunctionExpression or if it is in a JSXExpressionContainer (which is the case in your pattern) then we \"ban\" the node, so this way when later we see that it returns some JSX (confidence 2) we do not still consider it as a component, so it will not be validated.\n(Hope I was clear, the Components.js file could use some serious refactoring to be more readable)\n. Merged, thanks!\n. I don't like adding a dependency either.\nBut since this dependency is already used by ESLint I think it will already be installed in all cases (it will even be deduplicated with npm@3).\n. Also I am not totally convinced that it could be a useful rule since sort-comp could already warn you if a method is mistyped (since it will detect an user method in the lifecycle ones).\n. Ho, I forgot that too. Thanks!\n. Thanks for this failing case. I think the problem comes from isReturningJSX where we only check if the ternary condition is returning JSX in one case (since this function is also used to detect stateless components).\n. There is no rules to catch this sort of mistakes right now. Also stateless components can have 2 arguments (props and context).\nHowever, since detecting stateless components is already very difficult, I would rather consider functions with more than 2 arguments as not being stateless components instead of stateless components with a typo in the arguments.\n. Merged, thanks!\n. So, the opposite of jsx-no-literals ? If yes we could make a jsx-literals rule with always/never options.\n. Mmm, apparently the current jsx-no-literals rule only apply outside props.\n. Like @ljharb said, when linting we only check files individually, so we are not aware of components definitions in other files. Because of that we can't know if its requirements are fulfilled.\nYou'll need to rely on PropTypes at runtime for that.\n. Yep, fixed by https://github.com/yannickcr/eslint-plugin-react/pull/535\n. Merged. Thanks!\n. Seems you're not using the latest ESLint but an older version (pre v2.0.0) that does not support config in plugins (this error message was removed from ESLint in v2.0.0-beta.3 https://github.com/eslint/eslint/commit/e3f2683e3698f2be248ef5b1a2508b988203a875).\nI suspect you to have an old ESLint installed globally and the v2.7.0 locally (or the opposite).\n. I find this rule pretty confusing. It seems to be pure stylistic rule but it can actually change how the properties will override / be overrided by the other props.\nThis could makes you introduce some subtle bugs while you try to follow what seems to just be a stylistic rule.\n. jsx-indent was not updated since v4.0.0 so I don't know what happened here.\nCan you give me your eslint, babel-eslint and eslint-plugin-react versions before and after the upgrade?\n. Well. My first intent when writing the jsx-indent rule was to be as close as possible to the original eslint indent rule (actually, most of it is a simple copy-past from the original rule).\nIf I remember correctly the rule assume that a JSXOpeningElement (<h1>) should always start one level deeper than his parent if they are not both on the same line (even if the parent is not a JSXOpeningElement itself, like a LogicalExpression in our case).\nSo... I'm divided here. Both @ljharb explanation and @MoOx expected behavior makes sense to me.\n. Currently no, there is no way with the current rule to do this without enforcing the alphabetical order.\n. Thanks for the details and the fix, but I rewrote the rule to use the component detection and fix #542 at the same time.\n. Ok, seems to be the same issue as https://github.com/eslint/eslint/issues/5573 (part of the rule code come from the eslint no-useless-constructor rule)\n. It does not complain in this case:\n``` js\nvar externalPropTypes = require('./my_module');\nvar Hello = React.createClass({\n  propTypes: externalPropTypes,\n  render: function() {\n    return Hello {this.props.name};\n  }\n});\n```\nSo it should be a bug when accessing something like externalPropTypes.mySharedPropTypes instead of externalPropTypes directly.\n. Well, your function here is a stateless component (it receives some props and returns JSX), so it requires some prop-types.\nWe added support for destructured props in v4.0.0 (see #354), before that this pattern was just not detected.\nIf you does not want to add some prop-types to it you can disable the rule for this component (using a /* eslint-disable react/prop-types */ comment). Maybe we'll have an option to disable prop-types check on stateless components in the future, but it is not implemented yet.\n. Ho ok. I'm agree, that precise pattern should be ignored.\n. Oups, totally forgot this one :|\nToo late for the v5.0.0, but yeah, it should definitively be removed in v6.0.0\n. @romainneutron and @iongion Can you test with the v5.1.1 to see if you still have the issue ?\n. Hi, you can use the ignore option to ignore some props during the validation\n. I'm sorry, when inspecting a component we cannot know from where the props comes from, so we cannot ignore all \"injected\" props at one time.\nBut I don't really see why you do not want to declare these props inside the component. As I can see the component does not makes any difference between \"assigned\" and \"injected\" props, so declaring all of them seems to be the right thing to do. But I am not very experienced with the Redux pattern.\n. From Alex Early's React Tips and Best Practices:\n\nProbably the worst thing you can do it call setState right after a render in componentDidMount() or componentDidUpdate(). While it is tempting to read things from the generated DOM at this point, it means most render() calls will actually call render twice. If a child component does the same thing, it could have up to four render() calls: two from its parent's render, and 2 from its own internal setState(). As you compose components this can lead to property/layout thrashing and exponentially more re-renders as your component hierarchy depth increases.\n. Sorry, missed your PR :( Seems it was fixed in https://github.com/yannickcr/eslint-plugin-react/commit/6950cbd73dd39385326cea233908df8232678450\n\nBut thank you for the fix :)\n. Rebased and merged in https://github.com/yannickcr/eslint-plugin-react/commit/fd35cbf5c22b40838a5e872781c7e4a3512a40b9, thanks!\n. Seems to help, indeed. Thanks.\n. The pattern debate aside, I think it should be ignored by the rule since we cannot check if a return statement is present in the render method in this case.\n. @ljharb Ho. Do you know what code makes it crash ?\n. Ok, the following pattern trigger the crash:\njs\nvar Hello = () => (\n  <div></div>\n);\nI'll do a quick fix.\n. We do not follow variables references, so with this pattern the propTypes order is not checked.\n. > Will this be fixed in the future? Or should we just not use this pattern?\nWe only have access to the AST and it is tricky to follow variables references, so it is not planned to support them. But you can still open an issue for it, if there is enough demand for this feature we could try to see if it is feasible.\nIf you want to be able to use the prop-types related rules (like prop-types or sort-prop-types) you should avoid this pattern for now, sorry :|\n. Yep, maybe it would be more convenient to use a regex (and make it customizable) to check the handler names instead of using a simple prefix like today.\n. This is the intended behavior. This rule only enforce empty React Components to be self-closed, and HTML tags are not concerned.\nI think we could modify this rule to check all type of tags by default, then add some options to filter by type (components and/or HTML tags) if needed.\nIt seems to be the more logical behavior to me, but it will be a breaking change.\n. Mmm, this is bad. Looking at it.\n. Seems to be related to the same \"fixing problem\" as #573.\n. I think we could do both, I'll go for:\n- an allowAllCaps option (Boolean, false by default)\n- an ignore option (Array, [] by default)\n(to follow the same options naming as the other rules)\n. Yeah, functional components detection is pretty tricky so we have different strategies to detect them, and it can happen that some of them are unfortunately ignored.\nI'll try to be less restrictive on the this keyword usage in functional components.\n. Seems to be an interesting rule.\nIt should be feasible, we already have a isReturningJSX utility function that can already do \"jsx fragment functions\" detection (but it doesn't cover all cases, like map/reduce). I think it could be used (and improved) for this.\nI'm definitely interested in this rule. If you can come out with a good solution I'll be happy to merge it :)\n. Thanks.\n. Merged. Thanks!\n. Yes, same rule as #226. I am not convinced of the utility for an option to only warn on required props though. We can discuss it in #226.\n. Thanks for the failing test case, it really helps to figure out the problem.\nFor the fix, I think I will replace isSpaced by the new ESLint isSpaceBetweenTokens function that already ignore comments.\n. global-require is a ESLint rule and import/no-unresolved is a rule from the eslint-plugin-import plugin. Sorry, but I do not see anything related to eslint-plugin-react here :|\nAlso, if you have difficulties to fix the issues reported by ESLint (and no problem with ESLint by itself) I suggest you to ask your questions in the ESLint mailing list or in the ESLint chat.\n. Merged, thanks!\n. @novascreen You're right. We do not validate properties when the prop-type is object because it is too hazardous to try to differentiate native object properties and nested props. So every this.props.item.xxx are accepted.\nWe only do nested prop-type validation on shape, arrayOf, objectOf and oneOfType.\n@InsidersByte To prevent the use of nested props without shape validation I suggest you to use the forbid-prop-types rule to forbid the use of React.PropTypes.object.\n. No problem, you were both very fast to find the issue :)\n. After some tests the regression seems to come from https://github.com/yannickcr/eslint-plugin-react/commit/4e1bcc0020834f06801a6987043e085658e72bd7 so it should be here since v4.1.0\n. I think you're looking for the jsx-no-duplicate-props rule ;)\n. Yes, for reference see the ESLint documentation:\n\nTo configure a rule which is defined within a plugin you have to prefix the rule ID with the plugin name and a /.\n. I am agree with you, actually I'm doing exactly the same thing in some of my projects (render, measure, setState, re-render).\n\nBut since it is pretty easy to do some accidental layout trashing without even realizing it I think it is better to keep this rule in the recommended ones, and use a /* eslint-disable react/no-did-mount-set-state */ comment when justified.\n. @mjackson that's an interesting approach, even if I mostly agree with @ljharb about warnings https://github.com/yannickcr/eslint-plugin-react/pull/636#issuecomment-226657532.\nI'll be definitely interested if you have the time to craft a PR with this.\n. @SirCmpwn I'm not sure about what you are referring to. Should not the allow-in-func option cover this case?\n. @SirCmpwn I'm not sure about what you are referring to. Should not the allow-in-func option cover this case?\n. Since there is some legitimate use cases to use setState here I have removed these rules from the recommended configuration. The rules are still available for who want to activate them manually.\n. Also, to continue in this direction, it could be good to have separate groups for static-method, static-properties, instance-methods and instance-properties.\n. @gitim Yes, but I'm currently in holidays and this until the 1st June, then I will be at React Europe on 2-3 June. So do not expect a lot of activity from me until the 4th June.\n. Thanks!\n. LGTM too, great work!\n. Merged, thanks!\n. @ljharb yes, I'm open to any suggestion.\n. @ljharb yes, I'm open to any suggestion.\n. Merged, thanks! And sorry for the lack of responses.\n. @sassanh yes, it's available in v6.5.0. You can use it with eslint --fix file.js (see ESLint documentation).\n. Merged, thanks!\n. Merged, thanks!\n. I think this rule already adds a lot of value even if this bug is not fixed right now. So I am not against merging this rule with the bug and fix it later on (actually I still need to figure out how to fix it in the prop-types rule).\nAlso I'd prefer to name this rule no-unused-prop-types to match ESLint Rule Naming Conventions.\n. Ho, and thank you for this @EvNaverniouk, this is really great work \u2764\ufe0f \n. Merged, thanks!\n. You can use displayName the same way on a stateless function:\njs\nfunction Foo() {\n  return <span>Bar</span>;\n}\nFoo.displayName = `Wrapper<${someName}>`;\n. Seems to be a useful rule. Merged, thanks!\n. Seems to be a useful rule. Merged, thanks!\n. Seems to be the same issue as #591\nIt should be fixed in the next release, fill free to re-open if it is not the case.\n. @stefanbuck sorry for the delay :(\n. I hope to publish a new release tomorrow :). Merged, thanks!\n. Yep, I plan to do a new release this week (likely before the week-end).\n. Seems related to #540 \n. Seems related to #540 \n. It is the jsx-indent-props rule that is fixable, not the jsx-ident rule (yet)\n. That's a very specific use case, but I am not against adding such option.\nJust a couple of things:\n- I'd prefer to use an ignore option instead of allow (like prop-types or jsx-pascal-case)\n- You are referring to your specific use case in the documentation. I think it can be confusing. Maybe just saying that you can ignore some properties is enough ?\n. Merged, thanks!\n. > There's no way for a linter to know that your superclass extends React.Component - I believe you can use jsdoc to annotate it with something like /* @extends React.Component */ ?\n\ud83d\udc4d But support for JSDoc is not released yet, it should be in the next eslint-plugin-react release.\n. Released in v5.2.0\n. Thanks. It will really help those who are new to ESLint plugins.\n. This is really great!\nLGTM. if it is good to merge for you too I think we can merge it. \n. Merged. Thank you very much :)\n. Well, dangerouslySetInnerHTML has indubitably some legitimate use cases and it's name by itself is already a warning for the users, so I am not against removing the rule from the recommended configuration.\nAlso, like @evcohen suggested, the current error message is not very helpful and can be greatly improved.\n(NB: There is a similar issue about no-did-mount-set-state and no-did-update-set-state #596)\n. @mjackson Yes, it will be merged. But I consider this as a breaking change (not a big one, but still) so it will only be in the next major version (no ETA yet).\n. No problem @evcohen, thanks for the very quick fix \ud83d\ude09 \n. Can you post the source code that trigger the crash? I will try to quickly push a bugfix release.\n. > I also tried on a single file and got the same error.\nWell if you could isolate the piece of code in this file that trigger this error it will be very helpful for me to write a proper test case and a proper fix.\nThanks for your help :smiley: \n. Working on it\n. Thanks for your help, it should now be fixed in v5.2.2\n. Merged, thanks!\n. A rule from a plugin must be prefixed by the plugin name, see ESLint documentation about rules configuration.\nIn your case:\njs\n\"rules\":{\n      ...\n      \"react/jsx-curly-spacing\": [2, \"always\"]\n      ...\n}\n. The react/display-name rule will already prevent this case, it will accept a displayName property or a named export but will throw if you try to do an unnamed export like your example.\n. The react/display-name rule will already prevent this case, it will accept a displayName property or a named export but will throw if you try to do an unnamed export like your example.\n. Hi, I do not see the react/sort-comp rule in your ESLint configuration. Are you sure it is correctly enabled?\n. Hi, I do not see the react/sort-comp rule in your ESLint configuration. Are you sure it is correctly enabled?\n. Yep, It's an edge case an there is nothing we can do to fix this.\n. I'm definitely interested by some rules to limit JSX complexity (another similar request: https://github.com/yannickcr/eslint-plugin-react/issues/603).\nPotential inspiration: ESLint complexity rule and related.\n. @ljharb Thanks for your help, I'm a bit late on this :( I'll try to do a release tomorrow.\n. @ljharb Since adding a peerDepencency is a big change I prefer to consider it as a breaking change. \nI am not ready yet to publish the v6.0.0 (I'd like to add a few more waiting changes in it) so I published it as v6.0.0-alpha.1. You can install it with npm install eslint-plugin-react@next.\n. @ljharb @jokeyrhyme I do not have a lot of time this week but I'll try to do an roadmap before the week-end (like I made for 4.0 #436) \n. LGTM too\nCan you rebase your branch? Then I'll merge it.\n. Merged, thanks!\n. @ljharb I just published v6.6.0-alpha.2 with this fix (among others).\n. Merged, thanks!\n. Merged, thanks!\n. Merged, thanks!\n. Merged, thanks!\n. Merged, thanks!\n. @dozoisch Is this introduces a breaking change in the sort-comp rule?\n. @dozoisch Is this introduces a breaking change in the sort-comp rule?\n. @dozoisch I prefer to not include it in the default configuration for now. We'll wait for the next major release to update it.\nAlso I'm not very experienced in Flow so I trust @acusti and you on this \ud83d\ude09 \nIf it's good for you, you can rebase your branch, remove type-annotations from the default configuration and update the documentation. Then I think we'll be good to go \ud83d\ude03 \n. @dozoisch I prefer to not include it in the default configuration for now. We'll wait for the next major release to update it.\nAlso I'm not very experienced in Flow so I trust @acusti and you on this \ud83d\ude09 \nIf it's good for you, you can rebase your branch, remove type-annotations from the default configuration and update the documentation. Then I think we'll be good to go \ud83d\ude03 \n. Merged, thanks!\n. Merged, thanks!\n. To come back to the ESLint rule\n\nDeprecating is adding a warning. So we plan to add a warning but in the future. I thought that maybe ESLint rule might be a better first idea before we deprecate it.\n\nI'm agree, also adding a rule like this is pretty easy (we've already done something similar for isMounted()).\n. Merged, thanks!\n. Nice. Can you also update the Readme?\n. Thanks, can you rebase your branch? Then I think we'll be good to go :)\n. Merged, thanks!\n. Mmm, I don't quite see what is the current problem.\nCan you add a test that reproduce it and that is fixed with your patch?\n. Merged, thanks!\n. Since 6.0.0 is imminent we could do this, but I don't know if it is a good thing to force instance properties on top in the default configuration.\nWhat is the most common order used by React users here?\n. > should this be the case by default and there would be a new option like disallow-in-func\nI was more thinking about something like this.\n. @ljharb I hope to publish an RC before friday and the final this week-end if there is no major issue.\n. @ljharb no, still planned for v6 :)\n. Yep\n. Still a few changes and I think I'll be good to push an RC in the coming hours.\n. Thanks, just a few small things:\n- Can you rename the rule to no-danger-with-children\n- Pass the recommended to false in the metadata\n- Rebase your branch\nAnd then I think we'll be good to go :)\n. > the Panel is declared as a class\nOk, seems the issue comes from here. I'll have a look.\n. @kentcdodds ok, it's a different problem then. \nCan you open a new issue with your last message? Thanks.\n. Working on it\n. Merged, thanks!\n. Merged, thanks!\n. Great! Can you fix the issues raised by @lencioni?\nAlso I'm not really a fan of the rule name: too long, should start by jsx- like the other rules.\njsx-style-object? Any other idea?\n. Great! Can you fix the issues raised by @lencioni?\nAlso I'm not really a fan of the rule name: too long, should start by jsx- like the other rules.\njsx-style-object? Any other idea?\n. @ljharb A lot of current JSX rules can also apply to createElement. So even if it also apply to createElement I still think it should be prefixed by jsx-, just by consistency with the other rules. \n. Sorry for the delay.\n\nthose rules should be renamed to not have jsx unless that's the only thing they apply to\n\nYeah, in fact the jsx- rules should only be styling rules for JSX since the other ones can apply to creactElement too. A rename would be the solution but I'm not really a fan of renaming rules since it introduces a breaking change for almost no added value \ud83d\ude10. But that's another discussion \ud83d\ude09 \nI'm ok with style-prop-object \ud83d\udc4d \n. Merged. Thank you! \n. Also see ESLint documentation on how to configure rules.\n. Also see ESLint documentation on how to configure rules.\n. Great, thanks!\n. Great, thanks!\n. Working on it.\n. Thanks @petersendidit. The PR was merged, a bugfix release will be published tonight.\n. Thanks!\n. Thanks.\n. Merged, thanks!\n. Merged, thanks!\n. Merged. Thanks!\n. @Darmody I removed it from the README since we do not   usually list the deprecated rules in it.\n. @Darmody I removed it from the README since we do not   usually list the deprecated rules in it.\n. Merged, thanks!\n. Thanks for this.\n\nI leaved this behaviour by-default, but it can break backward compatibility?\nMay be It should be turned off by default?\n\nIf I'm not mistaken, according to ESLint Semantic Versioning Policy this is a breaking change, so I'll wait for the next major release to merge it.\n. Merged, thanks!\n. Merged, thanks!\n. Merged, thanks!\n. Merged, thanks!\n. Thanks. Can you rebase your branch ? Then I think we'll be good to go.\n. Thanks. Can you rebase your branch ? Then I think we'll be good to go.\n. Perfect, thanks!\n. Perfect, thanks!\n. Thanks for the suggestion. I linked all the rules names to the documentation, it should help to navigate to the documentation when we add/update a rule.\n\nDo you generate them now?\n\nNo, I make the changelog by hand at each release.\n. Definitely interested if we can found a way to merge it with the existing jsx-sort-props rule.\n. Since we only use the AST it's very difficult to follow variable reassignments and making it would add a lot of complexity to the rules.\nIn your case I suggest you to use destructuring instead which is handled by the rule:\njsx\nclass TestComponent extends Component {\n    render() {\n        let {name} = this.props;\n        return (\n            <div>Hello {name} </div>\n        );\n    }\n}\n. @mydearxym What warning are you taking about? With destructuring you correctly get the 'name' is missing in props validation warning, which does not trigger with the first pattern.\n@JelteF if you have a solution feel free to submit a PR \ud83d\ude03 \n. @mydearxym ok, seems you are talking about the no-unused-prop-types rule, this issue is about the prop-types one \ud83d\ude09 \n(I am aware of the false positives in no-unused-prop-types, I hope to work on it this week)\n. Working on a fix.\n. Merged, thanks!\n. Merged, thanks!\n. You must enable the react/jsx-uses-vars rule for ESLint to detect variables used in JSX.\n. Seems the rule is not working properly if theskipShapeProps option is set to false, so is it useful to keep this option?\n. Ok for me \ud83d\udc4d . What versions of eslint/eslint-plugin-react are you using?\nAre you sure you're using the local eslint module?\nDo you have the same problem when using eslint in CLI?\n. Same as #848, it's a false warning by npm, everything should be working as expected after the installation.. Same as #848, it's a false warning by npm, everything should be working as expected after the installation.. This is really great, thanks!. This is really great, thanks!. @EvNaverniouk like @ljharb I find this rule useful and I think it would be a shame to remove it (despite the fact that I do not use it myself, because of the false positives \ud83d\ude22).\nImho to make it really useful we should:\n Handle the most popular patterns used by the React community (ideally prop-types and no-unused-prop-types should handle the same patterns).\n Improve the documentation to warn about the false positives and maybe list the handled patterns and/or limitations of the rules.. LGTM, can you rebase your branch and resolve the conflicts? Then I think we should be good to go.. LGTM, can you rebase your branch and resolve the conflicts? Then I think we should be good to go.. Merged, thanks!. Merged, thanks!. Merged, thanks!. Merged, thanks!. Thanks!. Thanks!. Currently PureRenderMixin is only supported on ES5 class.\nIf you can submit a fix I'll be happy to merge it \ud83d\ude03 . Fixed in 6.10.0. Seems you're using babel-eslint v5.x.x. It does not expose key on ClassProperty and we have to rely on another method to get it (using tokens).\nI've fixed the rule to use the tokens as fallback to get the key (the fix should be published in the next release this week)\n. Wow! Great! Thanks for all this work. I'll try to review this PR tomorrow.. Ho, I was more in the idea the release the v7 to be React 15.5.0 compatible and to postpone theses breaking changes for the v8.\nBut I'm ok to do all of this in a single major release.. > the v7.0.0 milestone wasn't edited to v8 so that didn't come across\nyeah, my bad \ud83d\ude10 \n\nI think if we're doing a breaking change we might as well get them all in tho\n\nright, it will avoid people some pain to only have one migration to do\n\nI would have expected react 15.5 compatibility to be non-breaking, and to go in v6\n\nI think this is unavoidable with the changes to createClass and the warnings added to no-deprecated\n. What issues are remaining (beside documentation) ? I think this is the last thing that is holding back the 7.0.0 right now.. Great! Then if there is no issues in RC1, I will release the v7 tomorrow.. Looking at it.. Crap, you're right. Seems to be another issue with multi-line tags. I'll made another patch release shortly. but there is a good chance it will be done tomorrow (it's getting late here).. Reverted https://github.com/yannickcr/eslint-plugin-react/issues/1058 since it introduced this issue.\nI got caught by the [Fix] label. I thought it was only a bugfix, but it also introduce a new indentLogicalExpressions option and is not backward compatible.\nI'll publish the updated version and I'll work on a patch to get this properly fixed.. Reverted https://github.com/yannickcr/eslint-plugin-react/issues/1058 since it introduced this issue.\nI got caught by the [Fix] label. I thought it was only a bugfix, but it also introduce a new indentLogicalExpressions option and is not backward compatible.\nI'll publish the updated version and I'll work on a patch to get this properly fixed.. v6.10.3 is now published. @ljharb I tested it on react-dates and it seems fixed.. v6.10.3 is now published. @ljharb I tested it on react-dates and it seems fixed.. Merged, thanks.. Merged, thanks.. Thanks for your work! And sorry for the delay :). Thanks!. For the third point we already have the no-deprecated rule that can be used.. React 15.5.0 support seems to be complete.\n\nComponent factory now default to createReactClass (you still got the possibility to change it to createClass using the shared settings).\nPropTypes detection is not affected by the changes in React 15.5.0.\nReact.PropTypes and React.createClass were added to no-deprecated.\n\nI will publish a RC for the 7.0.0 (since there is some breaking changes here), you can test it with:\nnpm install eslint-plugin-react@next\nFeedback welcome \ud83d\ude03 \n. Looking at your .eslintrc file it seems you do not have enabled any rules in eslint-plugin-react.\nTo solve your errors you must enable the jsx-uses-vars and jsx-uses-react rules. That way ESLint will correctly mark your variables as used.\nYou can also use the recommended configuration.\n. Looking at your .eslintrc file it seems you do not have enabled any rules in eslint-plugin-react.\nTo solve your errors you must enable the jsx-uses-vars and jsx-uses-react rules. That way ESLint will correctly mark your variables as used.\nYou can also use the recommended configuration.\n. Actually destructuring is not handled for any deprecation in this rule. Mainly because it was not something common at the time it was written. So I think it should not be a blocker for this PR.\nBut, since it is now a very common pattern, I'm working on a patch to add destructuring support to the whole rule.\n. @ljharb like destructuring, it's something that was not handled by the rule, so I think it should be done separately from this PR.\nBut my patch is almost ready, I should submit it tomorrow (I hope we'll be able to ship React 15 support this week).. Thanks!. If you enable the require-default-props rule it will warn you if your defaultProps are not defined correctly.\nThe prop-types rule should do the same for propTypes, but after testing it seems there is a bug here and it consider a static function as valid propTypes definition, which is incorrect.\nI will fix the prop-types rule then by enabling theses two rules you should get the desired behavior.. Different rule, same issue. I will fix this one too.. Can you provide a complete code sample ?\nI tested with:\njsx\nvar Hello = createReactClass({\n  renderSomething: function() {\n    return (\n      <div />\n    );\n  },\n  render: function() {\n    return (\n      <div />\n    );\n  }\n});\nBut I was not able to reproduce the bug.. eslint-plugin-react can not detect which React version you are using, so it warns for every deprecated methods by default.\nYou can specify your React version in the shared settings. This should solve your issue.. @ljharb Yes, and according to these tests it should work correctly. Were you able to reproduce the issue with the React version specified ?. I'm afraid that sort-comp does not handle decorators yet.. Thanks!. I think @relekang is working a on a rule for this, see #943.. @c0debreaker I'm not sure what warning you expect ESLint to trigger here, but we have the no-unknown-property rule that can warn you on differences between HTML and JSX (like className instead of class). @c0debreaker I'm not sure what warning you expect ESLint to trigger here, but we have the no-unknown-property rule that can warn you on differences between HTML and JSX (like className instead of class). Fixed it for quoted properties. I will add template literal support in another patch.. Fixed it for quoted properties. I will add template literal support in another patch.. Thanks!. Thanks!. Happy to hear you solved your problem.\nClosing this since it is not a problem with eslint-plugin-react itself.. Happy to hear you solved your problem.\nClosing this since it is not a problem with eslint-plugin-react itself.. Thanks!. Thanks!. Released in v7.1.0, sorry for the delay.. This plugin should already work with ESLint 4.0.0 since v7.0.1. Official support (no peerDependencies warning) is already merged and should be released with the next version (most likely today or tomorrow).\n. This plugin should already work with ESLint 4.0.0 since v7.0.1. Official support (no peerDependencies warning) is already merged and should be released with the next version (most likely today or tomorrow).\n. Just published v7.1.0 with ESLint 4.0.0 as peer dependency.. @virgofx @planttheidea @Benno007 @lukeapage Released in v7.2.0, really sorry for the delay.. Released in v7.2.0, really sorry for the delay.. @ljharb yep, I'll do a patch release shortly.. @nihgwu If I'm right this pattern was not detected in v7.1.0 and the propTypes validation was just ignored for the component. This is no longer the case since v7.2.0.\nBut https://github.com/yannickcr/eslint-plugin-react/issues/1366#issuecomment-322123945 should have worked, so there was definitively a bug here.\nIt should be fixed in next release.\n. Can you show us the full piece of code that trigger the crash ? It will help us to fix the issue.. Fixed in #1372, should be in next patch release.. Thanks!. Does a release with #1376 and this one are enough to get a good Flow 53 support ? Or is it better to wait for #1393 ?\n(I do not use Flow so I don't really know what is our current support status). Ok, then after merging theses PR I will publish a pre-release version for testing purpose.. I just published 7.4.0-rc.0 (release notes). You can install it with npm install eslint-plugin-react@next.\nFeel free to report any issue \ud83d\ude03 . The following changes were merged to support React 16:\n\nAdd support for fragments to react-in-jsx-scope #1758\nAdd support for React 16.3 lifecycle methods to no-unused-prop-types #1681\nAdd support for React 16.3 lifecycle methods to sort-comp #1767\nAdd support for React 16.3 lifecycle methods to no-typos 3aac310219d378ff5ae3aaa08904a91ba82f836c\nAdd warnings for componentWillMount, componentWillReceiveProps and componentWillUpdate lifecycle methods in no-deprecated #1750 \n\nIs there still something missing for React 16 support ?. Yes I saw that list, but from my point of view #1510 and #1682 are more about improvements of the component detection, which is tricky.\nHowever I missed #1759 (confused it with the same problem in no-unused-prop-types, solved in #1681).\n. Thanks !. Thanks !. Setting the react/react-in-jsx-scope rule to off in your .eslintrc should be enough to disable it:\njson\n{\n  \"rules\": {\n    \"react/react-in-jsx-scope\": \"off\"\n  }\n}\nESLint documentation\n. Setting the react/react-in-jsx-scope rule to off in your .eslintrc should be enough to disable it:\njson\n{\n  \"rules\": {\n    \"react/react-in-jsx-scope\": \"off\"\n  }\n}\nESLint documentation\n. Thanks!. > is it possible that a method could be a functional component ? If not, then we can restrict this method.\nafaik no, but a static method can be.\n\nanyway, the rule doesn't associate the right props to the right component -- I don't know if other similar rules have the same issue, but it's likely.\n\nYes, it's a common issue when we try to associate props to a component \ud83d\ude1e. I will have a look but I never really used Flow so any help is welcome. . Hi @justinanastos, thanks for your contribution \u2764\ufe0f and sorry for the delay. I'm working on a new release and it should be out soon.\nI will also work with @ljharb to avoid theses long delay between release.. Hi @justinanastos, thanks for your contribution \u2764\ufe0f and sorry for the delay. I'm working on a new release and it should be out soon.\nI will also work with @ljharb to avoid theses long delay between release.. @lucaslim As @brettdh noticed, I published a pre-release a few hours ago.\nYou can test it using npm i eslint-plugin-react@next -D.\nIf no major issues are found the final release will be most likely published tomorrow or the day after.. Not that I'm aware of, feel free to push a PR \ud83d\ude09 . Fixed in #1681 . Fixed in #1681 . @Hypnosphi @ljharb Right. I missed this comment, I'll make a proper fix for it.. I hope in the next days.. > In general, it is better to avoid cascading updates like this, but in some cases they are necessary (for example, if you need to position a tooltip after measuring the rendered DOM element).\nMmm, it is exactly for this reason that this rule was created in the first place (but was removed from the recommended configuration since there is some legitimate use cases, see https://github.com/yannickcr/eslint-plugin-react/issues/596).. Actually the rule did not detected the usage since you did not used the standard name for the getDerivedStateFromProps arguments (it should be nextProps and prevState instead of props and state).\nI don't know if this is fixable without getting a lot of false positive.\n. Actually the rule did not detected the usage since you did not used the standard name for the getDerivedStateFromProps arguments (it should be nextProps and prevState instead of props and state).\nI don't know if this is fixable without getting a lot of false positive.\n. @hamlim yes, it should be released in the next few days.. @browne0 This feature was was released in 7.8.0 17 days ago \ud83d\ude09 . @browne0 This feature was was released in 7.8.0 17 days ago \ud83d\ude09 . Thanks for the report @pavlovanton, and for the help to identify the issue @reergymerej.\nAfter fixing this issue I found a couple of other small issues with ESLint 3 (https://github.com/yannickcr/eslint-plugin-react/commit/69b1317532600eec0618352f30231da29f9435c7, https://github.com/yannickcr/eslint-plugin-react/commit/31e4f333ef9f46493dad510483fef38cd8c62f74, https://github.com/yannickcr/eslint-plugin-react/commit/677e1bd41e1711d034dddbf2cbb28698e73a72ec) and they should all be fixed in next release.\nI also updated our Travis configuration to run our tests on different ESLint versions (3.x.x, 4.x.x and next) to be sure we do not introduce some regressions in the future.\n. Thanks for the report @pavlovanton, and for the help to identify the issue @reergymerej.\nAfter fixing this issue I found a couple of other small issues with ESLint 3 (https://github.com/yannickcr/eslint-plugin-react/commit/69b1317532600eec0618352f30231da29f9435c7, https://github.com/yannickcr/eslint-plugin-react/commit/31e4f333ef9f46493dad510483fef38cd8c62f74, https://github.com/yannickcr/eslint-plugin-react/commit/677e1bd41e1711d034dddbf2cbb28698e73a72ec) and they should all be fixed in next release.\nI also updated our Travis configuration to run our tests on different ESLint versions (3.x.x, 4.x.x and next) to be sure we do not introduce some regressions in the future.\n. Thanks \ud83d\udc4d . Thanks for your reactivity, I'll publish a patch release once this is merged.. v7.8.1 released \ud83d\ude04 . Merged, thanks !. Oh, my mistake. I should have better checked the package.json before publishing.\nThanks for the quick fix @ljharb.. Oh, my mistake. I should have better checked the package.json before publishing.\nThanks for the quick fix @ljharb.. I could not reproduce the bug with the default configuration.\n@maerzhase Can you share your rule configuration ?. Thanks, it should have been fixed in https://github.com/yannickcr/eslint-plugin-react/commit/5fc50aa9238768674cf2a2ca1d9676be629a920a. Are you sure this is a regression with v7.12.0 ? I tried with v7.11.1 and I still have the name is missing in props validation error.. Great!\nJust some little things: can you make a Rule Options section and use the same format as the other rules for the config file example ?\nYou can see an example here: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-prop-types.md#rule-options\n. Yep, there is really a lot of different ways to declare/use propTypes, it become hard to check all of them.\n. Should be ok since allowMultiline is the only option authorized by the rule schema.\n. LGTM\n. The hasDisplayName property is true if we find an explicit displayName or if the transpiler can find one.\nI think we should differentiate the 2 \"types\" of names and only warn if this is an explicit displayName.\n. The enabled rule list part should also be moved. \nBut, while I think it's a good idea to make the recommended configuration more visible, it will be a bit weird to have this rule list before the actual full rule list.\n. I think it should be aligned with the return keyword in this case.\n. I don't see the need for the default control, is it not the same as the main option ?\n. What about using true/false instead of always/never? (to get the same behavior as object-curly-spacing)\n. I'd prefer to keep the initial option to get a signature similar to the object-curly-spacing rule.\n. Right, I'm ok to keep always/never in this case.\n. @ljharb If I remember correctly Object.keys is only supported since Node.js 4.0\n. @ljharb  Ho ok, my bad. No reason to not using it then.\n. Why do you have 2 errors here? We should only have one in this case (for the closing tag).\n. Why do you make a .split('(') here?\n. The rule is not in the recommended configuration (yet).\n. Can you indicate the default value here please? \n. Here Hello is not a component (it returns an Array, so no propTypes should be specified)\n. Yes, this should be covered by no-undef. The require-default-props rule should just try its bests to resolve the props and the defaultProps, and give up if it cannot do it.\nIf this test case do not return any error then it should be in the \"valid\" array.\n. You should also update the next line to check for annotation.properties existence, or the rule will keep crashing if there is multiple reassignments\njs\nproperties = annotation && annotation.properties ? annotation.properties : [];. We did not put the react/ prefix in the other titles, I think it's not necessary to put it here either. Ho, did now saw your comment and #1071. Ok then :). Please use the pragma variable instead of the hardcoded React string (you can take the other deprecation as example).. pragma will match other thing than React only if the user has customized it to match something else (with a comment or using the shared settings).. To be coherent with the React version we should default to the latest supported version.\nBut currently a breaking change (or deprecation) in React means a new major version bump for the plugin. Are breaking changes a common thing in Flow ? (I'm afraid this will force us to bump the major version too often).. ",
    "trodrigues": "Oh, that's good to know! I'll subscribe the other issue and follow that. Thanks!\n. ",
    "coveralls": "\nCoverage remained the same at 100.0% when pulling 7234cf9fffa10948a6435a56e1600ac0692b3e20 on Gillespie59:patch-1 into e256cfd151755961429629c0e5b1b0840a8bd283 on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 7234cf9fffa10948a6435a56e1600ac0692b3e20 on Gillespie59:patch-1 into e256cfd151755961429629c0e5b1b0840a8bd283 on yannickcr:master.\n. \nCoverage decreased (-1.92%) to 98.08% when pulling de17bfeaedc1410fb276d5a0aba7cd298f81194c on glenjamin:react-in-jsx-scope into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage decreased (-1.92%) to 98.08% when pulling de17bfeaedc1410fb276d5a0aba7cd298f81194c on glenjamin:react-in-jsx-scope into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 5fec4025a209c8b064f2db1386c5bde7763f0084 on glenjamin:react-in-jsx-scope into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 5fec4025a209c8b064f2db1386c5bde7763f0084 on glenjamin:react-in-jsx-scope into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 5fec4025a209c8b064f2db1386c5bde7763f0084 on glenjamin:react-in-jsx-scope into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 5fec4025a209c8b064f2db1386c5bde7763f0084 on glenjamin:react-in-jsx-scope into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 46b9c97b2edd31a48f03266643ca52a81f108e2c on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 46b9c97b2edd31a48f03266643ca52a81f108e2c on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling ca87883a3b5d88e0a22755345513f12a22a97968 on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling ca87883a3b5d88e0a22755345513f12a22a97968 on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling ca87883a3b5d88e0a22755345513f12a22a97968 on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling ca87883a3b5d88e0a22755345513f12a22a97968 on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling ca87883a3b5d88e0a22755345513f12a22a97968 on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling ca87883a3b5d88e0a22755345513f12a22a97968 on glenjamin:jsx-uses-react into 9c43de0350522c516312f086f44e9899afe8badd on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling 4451e4a25ac1c94f1c8ce4e0b007196af0674bac on lencioni:readme into 8b37ad86cff0e6182a830e0102e380b9065db36a on yannickcr:master.\n. \nCoverage decreased (-1.57%) to 98.43% when pulling 9e670c75ba2088f7c0ccb93363f7728d5c38ba8a on benmosher:master into d79eadcda4f7bb7916659d2d56a81f77c7c8f8fb on yannickcr:master.\n. \nCoverage remained the same at 100.0% when pulling e42ba310aa7bda762889c6bc597414380013278d on benmosher:master into d79eadcda4f7bb7916659d2d56a81f77c7c8f8fb on yannickcr:master.\n. \nCoverage remained the same at 96.73% when pulling 3b5cf97234a10794a5dfcf7be934e44425fbee07 on burnnat:computed-prop-types into 0d7b069208d8101731e8a62cd1893e256c1fda0b on yannickcr:master.\n. \nCoverage increased (+0.03%) to 93.57% when pulling 08d791d818bbf30f5a9f77355611a93d850dcad4 on zertosh:sort-props-spread into 6eac51962350eb8d128d1f8391caa5525d892e50 on yannickcr:master.\n. \nCoverage increased (+0.03%) to 93.57% when pulling 08d791d818bbf30f5a9f77355611a93d850dcad4 on zertosh:sort-props-spread into 6eac51962350eb8d128d1f8391caa5525d892e50 on yannickcr:master.\n. \nCoverage remained the same at 94.46% when pulling ed2c7d5ee335e537e8ae68d67436a24d73fe2629 on zertosh:resort-on-spread into 8f3941ca62f01bc7c3add81a664f90f5aebca41e on yannickcr:master.\n. \nCoverage remained the same at 94.46% when pulling ed2c7d5ee335e537e8ae68d67436a24d73fe2629 on zertosh:resort-on-spread into 8f3941ca62f01bc7c3add81a664f90f5aebca41e on yannickcr:master.\n. \nCoverage remained the same at 94.46% when pulling ed2c7d5ee335e537e8ae68d67436a24d73fe2629 on zertosh:resort-on-spread into 8f3941ca62f01bc7c3add81a664f90f5aebca41e on yannickcr:master.\n. \nCoverage remained the same at 93.73% when pulling d0d998b87c40b3129af88c711510848afc10b5f7 on banderson:enable-jsx-uses-vars-by-default into ac426038dbb8f2e18338be933a11e9ea8a14a486 on yannickcr:master.\n. \nCoverage remained the same at 93.73% when pulling d0d998b87c40b3129af88c711510848afc10b5f7 on banderson:enable-jsx-uses-vars-by-default into ac426038dbb8f2e18338be933a11e9ea8a14a486 on yannickcr:master.\n. \nCoverage remained the same at 93.73% when pulling 85eea912beb439cfa8eb0f1f0e1d34822e025ade on AlexKVal:fix_comment into ac426038dbb8f2e18338be933a11e9ea8a14a486 on yannickcr:master.\n. \nCoverage remained the same at 93.69% when pulling 9a8929bad43625b42c2285bbba063c954b3d7ca6 on AlexKVal:children_props into a07e1fe5cccffe2897468d2efb409f0c33535a4c on yannickcr:master.\n. \nCoverage remained the same at 93.93% when pulling f071cc92d563d021639bcf2fd469098aa863f454 on chriscalo:patch-1 into 75fccc6305bd8e8ae3d6885da604e875906cddbe on yannickcr:master.\n. \nCoverage remained the same at 93.93% when pulling f071cc92d563d021639bcf2fd469098aa863f454 on chriscalo:patch-1 into 75fccc6305bd8e8ae3d6885da604e875906cddbe on yannickcr:master.\n. \nCoverage remained the same at 93.93% when pulling 9026a4fa39445d0947b7406dbf4c3fd1cd1fb759 on AlexKVal:peerDep into 2a3187fdc1e7e6d3e26cb3140aab65cc5b2dbe82 on yannickcr:master.\n. \nCoverage increased (+0.21%) to 94.13% when pulling 4c1a524457a5f276411a0b174a69bde16b0d03cd on AlexKVal:38_sort_propTypes into 76d5cd4f7eadd746531c770d5e93112989923b83 on yannickcr:master.\n. \nCoverage increased (+0.21%) to 94.13% when pulling 4c1a524457a5f276411a0b174a69bde16b0d03cd on AlexKVal:38_sort_propTypes into 76d5cd4f7eadd746531c770d5e93112989923b83 on yannickcr:master.\n. \nCoverage remained the same at 97.041% when pulling b980a7bbd65e552f8cd63b4aec578c1a8b1b2b5e on dthielman:pascal-edge-case into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage remained the same at 97.041% when pulling fc66dedca41dda0c3ebb90280196fa3bcef00517 on coryhouse:patch-1 into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage decreased (-0.07%) to 96.966% when pulling e189d19fa8848e0dad536eb21f2f49b391c9a47c on KevinGrandon:closing_bracket_autofix into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage decreased (-0.06%) to 96.945% when pulling 0f9ff7f9a5e199618f8373c21a02a9153f3825a7 on KevinGrandon:closing_bracket_autofix into 57a59cdb2e4026151c474286a02649e1d4a9a36f on yannickcr:master.\n. \nCoverage decreased (-0.06%) to 96.945% when pulling deb8e4e9dfa7a04077b21541fb008fc38de65a6b on KevinGrandon:closing_bracket_autofix into 57a59cdb2e4026151c474286a02649e1d4a9a36f on yannickcr:master.\n. \nCoverage decreased (-0.04%) to 97.005% when pulling 51fde3cdf1ab7e3fbb9a622e4374d1a28a066ab9 on gausie:feature/explicit-react-component-parent into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage decreased (-0.04%) to 97.005% when pulling 51fde3cdf1ab7e3fbb9a622e4374d1a28a066ab9 on gausie:feature/explicit-react-component-parent into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 97.057% when pulling f3e634c59e8928ab170a9bfa9d056cf0f8778064 on gausie:feature/explicit-react-component-parent into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 97.057% when pulling f3e634c59e8928ab170a9bfa9d056cf0f8778064 on gausie:feature/explicit-react-component-parent into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 97.057% when pulling 875421dd96536b3a00388a249c5fd1815bbc7dfa on gausie:feature/explicit-react-component-parent into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 97.057% when pulling 875421dd96536b3a00388a249c5fd1815bbc7dfa on gausie:feature/explicit-react-component-parent into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 97.065% when pulling 97e2c924943bcbdb3f6da674c010b8d245ea33c2 on adrianton3:prefix-members into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 97.065% when pulling 97e2c924943bcbdb3f6da674c010b8d245ea33c2 on adrianton3:prefix-members into e3c27f9ecea4d71e5fa6d0aa9131fdd1f5c1db75 on yannickcr:master.\n. \nCoverage remained the same at 96.945% when pulling d1c871bd9d5553a592a990abff767ce34b79ce4b on KevinGrandon:fixable_jsx_closing_docs into 85511ad332b74094c630ab49417b0ac7a1eec411 on yannickcr:master.\n. \nCoverage remained the same at 96.945% when pulling d1c871bd9d5553a592a990abff767ce34b79ce4b on KevinGrandon:fixable_jsx_closing_docs into 85511ad332b74094c630ab49417b0ac7a1eec411 on yannickcr:master.\n. \nCoverage remained the same at 96.947% when pulling 9f4465c70c608e66e2c13e63ac497f21c1d67bdc on ahoym:grammar-fix/prefer-stateless-function into aba4f969929c5e765f1597a4706513d8b2fd42ea on yannickcr:master.\n. \nCoverage increased (+0.03%) to 96.973% when pulling c18cfbd6d385f5edef83ab7af5894d94a61440a9 on jseminck:master into 0efb7ad6f1646ef4686d437538f0ba2ff3b217d8 on yannickcr:master.\n. \nCoverage increased (+0.03%) to 96.973% when pulling 76f2096539c4e9f16a3fff3e237459db880b44cf on jseminck:master into 0efb7ad6f1646ef4686d437538f0ba2ff3b217d8 on yannickcr:master.\n. \nCoverage increased (+0.007%) to 96.954% when pulling 39c21e63b23a7577a9ad9ecfa0decce815b1c63a on jseminck:jsx-spread-operator-position into 0efb7ad6f1646ef4686d437538f0ba2ff3b217d8 on yannickcr:master.\n. \nCoverage decreased (-0.02%) to 96.927% when pulling 6480718eaab8949b53b49538a894fb15c5cc6f6c on jseminck:spread-operator into 0efb7ad6f1646ef4686d437538f0ba2ff3b217d8 on yannickcr:master.\n. \nCoverage decreased (-0.02%) to 96.927% when pulling bcc9470e265f323f0f23b5ad0ee23273c44c61a9 on jseminck:spread-operator into 0efb7ad6f1646ef4686d437538f0ba2ff3b217d8 on yannickcr:master.\n. \nCoverage decreased (-0.05%) to 96.754% when pulling 85118d0cf1d2aa84a405074915f90e1a3cf51397 on nevir:patch-1 into ffc2b9eefa937738f9c6d8048de819bd6d222446 on yannickcr:master.\n. \nCoverage decreased (-0.05%) to 96.754% when pulling 85118d0cf1d2aa84a405074915f90e1a3cf51397 on nevir:patch-1 into ffc2b9eefa937738f9c6d8048de819bd6d222446 on yannickcr:master.\n. \nCoverage decreased (-0.05%) to 96.754% when pulling 85118d0cf1d2aa84a405074915f90e1a3cf51397 on nevir:patch-1 into ffc2b9eefa937738f9c6d8048de819bd6d222446 on yannickcr:master.\n. \nCoverage increased (+0.003%) to 96.807% when pulling 4165c0d5586c11f4a2bf5b4601a98cdbe77d26ef on nevir:patch-1 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.803% when pulling 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on lencioni:extentions-extensions into ffc2b9eefa937738f9c6d8048de819bd6d222446 on yannickcr:master.\n. \nCoverage increased (+0.03%) to 96.829% when pulling 2d96bd319fbcc1c8bd48ce029f917fc3c495b34e on lencioni:jsx-filename-extension into ffc2b9eefa937738f9c6d8048de819bd6d222446 on yannickcr:master.\n. \nCoverage decreased (-0.01%) to 96.793% when pulling ecf3599c6db1a4451c0445c5aef1175556580c20 on dtinth:patch-1 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.803% when pulling 47587ff5c87e87c9315c7a17a6eb58458e186dd7 on coryhouse:patch-2 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.803% when pulling a54e3ea0689730bd917bb1c79ad7ace262be4427 on coryhouse:patch-3 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.803% when pulling 08695cc7c1e6079af9756357e51474272bf451a5 on coryhouse:patch-4 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.803% when pulling dc2e72da64548f7b98d25777ae1248ca52631906 on coryhouse:patch-5 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.803% when pulling e7c2efdfb54f6bf6e219acbf5981f19029d2bb47 on coryhouse:patch-6 into 6c46f57f6f4a3c3dc91f98cc9a7da3f379ae6a19 on yannickcr:master.\n. \nCoverage remained the same at 96.793% when pulling 85bb9283fe3c97eadbc71abce0ef87188b1d7e83 on scurker:patch-1 into da6b3ce5b6eaed82350aee09a9a4b7c66322f523 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 96.817% when pulling 10c727ac38e100df74746dd0424ee97ff9a8c62a on Gasparila:master into 63d33cb7f0e46484636fe178f8c8ffaaeaa024e9 on yannickcr:master.\n. \nCoverage decreased (-0.09%) to 96.706% when pulling 980d220b1f49745698ed40b49b1cca4e24dde434 on iamdustan:no-return-value-from-render into 63d33cb7f0e46484636fe178f8c8ffaaeaa024e9 on yannickcr:master.\n. \nCoverage decreased (-0.07%) to 96.754% when pulling 00c0d73cb6246c6832f77ff7bac6e2ef42b9e411 on iamdustan:no-return-value-from-render into 01af82d16e2db2b5530bb9a297186e6b9b1a066f on yannickcr:master.\n. \nCoverage decreased (-0.07%) to 96.754% when pulling 78e0eb7b6c665610987df3330f8204ee3ade26f0 on iamdustan:no-return-value-from-render into 01af82d16e2db2b5530bb9a297186e6b9b1a066f on yannickcr:master.\n. \nCoverage remained the same at 96.818% when pulling 88d4d324ad24808834d49c9b323b5f7d7d574726 on lencioni:patch-2 into be2a4701ec6f6e91d2e0650d422180f4d1a9f82c on yannickcr:master.\n. \nCoverage remained the same at 96.818% when pulling 750f9794f0c6b721cccd52e0c169971e183f7ac6 on mLuby:patch-1 into f84e44bc62518940205e9c0da9e4bc2f1c0e2565 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling 700dab4418de356e10617fd4a098f52384ab414c on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling 52f0f8e2d9d14441fafe012ad64b1d787c04d4e1 on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling 702570d36b8a6da504052e1151bf39c0c1cacb79 on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling 2978369c6a57a45597aef0990bd6fe7f2c246974 on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling d39238136dae53d866febf64183860ac00abdd8b on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling 74b103df9b007f712aa36b111d59617dd0a2b7f6 on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.005%) to 96.823% when pulling 756008b654f5b70a38a2be663cc136bab7f10ebe on gitim:fix-self-closing-comp into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.01%) to 96.83% when pulling 547cb5f178c9eaf96e4759bed90502bfa5cd5411 on EvNaverniouk:240-require-optimization into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.02%) to 96.834% when pulling 94fa138d138a528dc43d46b9a791a72ce0544db6 on EvNaverniouk:240-require-optimization into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage decreased (-0.05%) to 96.769% when pulling ec1419d2eb05d53b915663e9d53c85b3100fd00c on gitim:fix-display-name into 750f9794f0c6b721cccd52e0c169971e183f7ac6 on yannickcr:master.\n. \nCoverage increased (+0.03%) to 96.798% when pulling 0adae88e170056fa54f1ae5f0018f42ed2c2900b on casesandberg:master into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage increased (+0.002%) to 96.771% when pulling f4d0ad4b7ef44ead144c1892c982c48ff6e03f31 on jayphelps:jsx-indent-fix into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage decreased (-0.002%) to 96.767% when pulling cdd2b17bf0757430dee6a0be720d5a1ee4c80cc8 on gitim:fix-jsx-curly-spacing into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage decreased (-0.002%) to 96.767% when pulling 7e4f0d8863dc3c7bd9682f5a163e1eb0b1ca7d6c on gitim:fix-jsx-curly-spacing into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage decreased (-0.08%) to 96.686% when pulling b95b0ef8ffc26db8572d7a074a9a75d6edc6f1fb on EvNaverniouk:226-unused-prop-types into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage decreased (-0.08%) to 96.686% when pulling 0fce5d120366f107c592a554fc45c3f1af669f1a on EvNaverniouk:226-unused-prop-types into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage decreased (-0.08%) to 96.686% when pulling 0fce5d120366f107c592a554fc45c3f1af669f1a on EvNaverniouk:226-unused-prop-types into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage decreased (-0.07%) to 96.699% when pulling a2faeb6fc4ec3db4eb22b0482a542e4a483bd76c on EvNaverniouk:226-unused-prop-types into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage increased (+0.01%) to 96.783% when pulling 67071327da03f2675eda2890e7abe820f3d4883d on benvinegar:no-comment-textnodes into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage increased (+0.01%) to 96.783% when pulling 2e275589a9346964d7831cf84a36db8891cfeba6 on benvinegar:no-comment-textnodes into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage increased (+0.01%) to 96.783% when pulling 2e275589a9346964d7831cf84a36db8891cfeba6 on benvinegar:no-comment-textnodes into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. \nCoverage increased (+0.01%) to 96.779% when pulling c65bfd7b74f96044d2b778e1e4c2287891efdc93 on stefanbuck:fix-618 into 82b3aa9101aa2124b934add61734cec026b4c278 on yannickcr:master.\n. ",
    "BerkeleyTrue": "Wow! Thanks for the quick response! Update works great.\n. Wow! Thanks for the quick response! Update works great.\n. Here is the eslintrc file we are using. We are not using either of those, although we will need modules soon.\n. Yup that workaround works. I'll keep an eye on the issue in eslint use this workaround for now. Should this issue be closed since this an eslint bug?\n. :+1: Woot! \n. Looks like both of these have been merge. Will wait to test next release of eslint to close this.\n. This may crash due to babel itself. Tried to see if babel would parse it. Seems like the REPL just hangs until corrected.\nhttps://babeljs.io/repl\n. Thanks for this!\n. What about removing peer deps entirely. NPM 3 is coming out and does away with all that non-sense in favor or dedupe's and flat trees.\n. @yannickcr Awesome! Thanks.\n. :+1: \n. :+1: \n. ",
    "glenjamin": "Whoops, missed a test case for nested scopes - will add one to bump the coverage back up.\n. Whoops, must have had my editor integration off! Will fix this up.\n. That should be updated now, got caught out by that typo that used to be in master!\n. ",
    "AsaAyers": "Why should children be an exception? I think you should document when a component does accept or require children.\n. It seems to me like most components don't need this.props.children, so to me that makes it extra important to document children in the propTypes.\nI think the option idea is fine. I'm interested in hearing why anyone would want to run this against all other prop types, but never against children. It seems not well thought out to me, but I kind of hope I'm just missing something.\n. It looks like I have a combination of element, node, a few strings, and an arrayOf(...shape(...)).\n. React.PropTypes.any is also an option. If I really had a component that could support 0, 1, or more children I'd probably just stick with .any to document that children is used.\n. yes, I think node is a better option than any, I just hadn't used it much at the time I commented.\n. Not all Components have children. In a couple of my projects I have an <Avatar user={userObject} />\n. IMO if children is difficult to figure out which type to use, you can always use React.PropTypes.any.\n. ",
    "sebastienbarre": "All good points. [UPDATED]\nI think @AsaAyers is onto something, considering the Single Child section in the React doc:\n\nWith React.PropTypes.element you can specify that only a single child can be passed to a component as children.\n\npropTypes: {\n    children: React.PropTypes.element.isRequired\n  },\nIn other cases when this.props.children might be used (or not), this below could probably do the trick:\n```\n  propTypes: {\n    children: React.PropTypes.oneOfType([\n      React.PropTypes.arrayOf(React.PropTypes.node),\n      React.PropTypes.node\n    ])\n  },\n  getDefaultProps: function() {\n    return {\n      children: null // or [] I guess\n    };\n  },\n``\n. @remitbri thanks, I updated my comment above accordingly. What's your default prop value?null?\n. @yannickcr just a quick heads up,babel-eslint` just released 3.0, that might help.\n. Hmmm, I'm not sure this is working.\nclass Card extends PureRender {\n  static displayName = 'Card';\n  render() {\n[...]\nis triggering a Lint error Unexpected Token =\nFor kicks, I tried:\nclass Card extends PureRender {\n  static displayName: 'Card';\n  render() {\n[...]\nand this does not trigger an error. However that's not the ES7 Property Initializers syntax, the former is (with an = sign, see here and here). Am I correct?\n. @MoOx yup, but that's not the issue here, it will complain about the = token with or without a semi.\n. @yannickcr oh, I didn't have ecmaFeatures.classes: true in my .eslintrc, sorry and many thanks for pointing that out.\n. @yannickcr Ha no, I take that back, that wasn't ecmaFeatures.classes. No problem on your side, it was JSCS that was complaining (a pretty useful tool nonetheless). It uses esprima-fb internally for JSX/ES6, which unfortunately doesn't support class properties (facebook/esprima#63) and is being deprecated (facebook/esprima#111). I'll investigate, maybe JSCS will use babel at some point (jscs-dev/node-jscs#1270). Thanks.\n. ",
    "remitbri": "I ended up with React.PropTypes.node to solve my issues\u2026\n. Hmmm, my component is a wrapper, which could stand on its own, so I didn't set a default prop value. Bad practice? I guess if I had to set one then it should be null\n. Actually, @markdalgleish's no-set-state rule only prohibits the use of setState. Shouldn't getInitialState() be avoided as well in this context, i.e if you forbid one you forbid the other as well? \nFrom what I understand from @moroshko's initial question, there's still the problem of doing things like this.state.foo = \"bar\"\u2026 So should the issue be re-opened? Or maybe a new issue should be created for this particular thing?\n. Actually, @markdalgleish's no-set-state rule only prohibits the use of setState. Shouldn't getInitialState() be avoided as well in this context, i.e if you forbid one you forbid the other as well? \nFrom what I understand from @moroshko's initial question, there's still the problem of doing things like this.state.foo = \"bar\"\u2026 So should the issue be re-opened? Or maybe a new issue should be created for this particular thing?\n. Documentation should be updated on the rule page.\n. Documentation on the rule page needs an update\n. Documentation on the rule page needs an update\n. Suggestion: in the nitpicking matter of [levelOfWarning, \"value\"] vs. [levelOfWarning, {key : \"value\"}], perhaps the rule could/should be [levelOfWarning, {\"frequency\" : \"always/never\"] ?\n. Suggestion: in the nitpicking matter of [levelOfWarning, \"value\"] vs. [levelOfWarning, {key : \"value\"}], perhaps the rule could/should be [levelOfWarning, {\"frequency\" : \"always/never\"] ?\n. a bite late, but: shouldn't the name of the rule be prefixed with jsx-?\n. Cool :) \n. ",
    "reggi": "Just to clarify, children should be defined as type node, like this:\njs\npropTypes: {\n  children: React.PropTypes.node\n}\n. ",
    "resistdesign": "I know this is closed, but wouldn't children be inherited from Component? Or is OOP not a thing anymore?\n. ",
    "joaomilho": "@resistdesign actually yeah, OOP is not the main thing anymore, at least in React's world.\n. @resistdesign actually yeah, OOP is not the main thing anymore, at least in React's world.\n. ",
    "jdanilov": "Justin case you're wondering how to do that in Flow, use React.Node as described here:\nhttps://flow.org/en/docs/react/types/#toc-react-node\njs\ntype Props = {\n  children: React.Node,\n};. ",
    "Denly": "PropTypes.node can be an array, so no need the React.PropTypes.arrayOf(React.PropTypes.node) @sebastienbarre \n```\n// Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n. PropTypes.node can be an array, so no need the React.PropTypes.arrayOf(React.PropTypes.node) @sebastienbarre\n// Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n```. ",
    "lo1tuma": "Looking at the code, it would probably also crash with the following example:\njs\nvar props = this.props;\n. Looking at the code, it would probably also crash with the following example:\njs\nvar props = this.props;\n. As mentioned in https://github.com/eslint/eslint/issues/2011, the suggested rule has nothing to do with react. It is a rule specific to the jsx syntax.\n. Maybe prefer-stateless-function would be a better name.\n. The rule should warn for components that are defined as a class or with React.createClass but could be safely written as pure stateless functions.\nThis should be considered as a problem:\njsx\nclass Foo extends React.Component {\n    render() {\n        return <div>{this.props.foo}</div>;\n    }\n}\nThis should not be considered as a problem:\njsx\nconst Foo = function (props) {\n     return <div>{props.foo}</div>;\n};\njsx\nconst Foo = ({foo}) => <div>{foo}</div>;\n``` jsx\n// using other lifecycle methods than render\nclass Foo extends React.Component {\n    shouldComponentMount() {\n        return fasle;\n    }\nrender() {\n    return <div>{this.props.foo}</div>;\n}\n\n}\n```\n``` jsx\n// using state\nclass Foo extends React.Component {\n    changeState() {\n        this.setState({foo: 'clicked'});\n    }\nrender() {\n    return <div onClick={this.changeState.bind(this)}>{this.state.foo || 'bar'}</div>;\n}\n\n}\n``\n. What should happen if the wholeprops` object is passed to an external third party function? Or if you are using the spread operator to pass-through all props to a child component? I guess in such cases the rule should not warn.\n. Looks like a duplicate of #226.\n. ",
    "lencioni": "I'll try to whittle it down. Might take a bit.\n. Ah, it looks like it happens when I am defining an object outside of the component to hold the propTypes, and then assigning it to that variable.\nSomething like:\n``` javascript\nconst myPropTypes = {\n  ...\n};\nconst MyComponent = React.createClass({\n  propTypes: myPropTypes,\n...\n});\n``\n. @andreypopp perhaps that should be handled by a separate rule? In my environment, Vim automatically dedents the/>as soon as I type it, and it is nice to go with the flow. Plus, I think it makes some sense if you think of these angle brackets like you would think of curlies in normal JS.\n. It also looks like theglobalReturn` problem was fixed, so that should probably be removed from this anyway. Want me to push a new version?\n. > Basically this is a warning/error when you reference a function instead of calling it.\nA general rule like that might be useful, but I think it would be difficult to implement. This request is specifically for this.isMounted in React components.\n. Indeed, it looks like isMounted is going away. https://github.com/facebook/react/issues/5465\nPerhaps there should be a rule that prevents the use of it entirely? \n. :+1: \n. Great work on adding this rule. However, I think it should support the following style:\n``` jsx\n<MyComponent\n  myProp=\"...\"\n\nChildren\n\n\n\n```\nThis way you can clearly see where each component begins and ends based on the indentation. This style is especially beneficial when you have nesting:\n``` jsx\n<MyComponent\n  myProp=\"...\"\n\n<MyComponent\n    myProp=\"...\"\n<MyComponent\n  myProp=\"...\"\n\n  Children\n</MyComponent>\n\n\n\n```\n\nWould you be open to adding this as an option to this rule? Should I open a different issue?\n. Ah! I see. Thanks. I think I misread the documentation. :)\n. @steida it looks like you realized a mistake and closed the linked issue--do you still want to see this rule built?\n. Somewhat related: we now have a jsx-no-target-blank rule that enforces target='_blank' links include rel='noopener noreferrer'.\n@Standard8 is this still a rule you are interested in?\n. Somewhat related: we now have a jsx-no-target-blank rule that enforces target='_blank' links include rel='noopener noreferrer'.\n@Standard8 is this still a rule you are interested in?\n. Since you don't have a specific use case for this, I'm going to close this issue out. Feel free to re-open it if a use case presents itself!\n. I did something similar for static methods in #429, if you are looking for an example of how this might be accomplished.\n. @Cellule you should check out eslint-plugin-jsx-a11y! \nI think that a specialized accessibility eslint plugin is best for this, so I think this issue should probably be closed out.\n. I wonder if this would be better as an enhancement to the core no-underscore-dangle rule? http://eslint.org/docs/rules/no-underscore-dangle\n. I wonder if this would be better as an enhancement to the core no-underscore-dangle rule? http://eslint.org/docs/rules/no-underscore-dangle\n. It might be useful to check out react-codemod's ReactUtils to see the methods they use for this kind of thing.\n. I don't think we can accomplish this, so I am closing this issue out.\n. @greim I think you can use the forbid-component-props rule to prevent whatever props you like on your components. https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md\n. This might be less of an issue with React 15, which claims to produce fewer spans.\n. @willklein have you made any progress on wrapping up this rule?\n. @willklein have you made any progress on wrapping up this rule?\n. There are a number of rules that are autofixable now. This issue can probably be closed out.\n. Since object destructuring is a JavaScript feature and not specific to React, I think this rule would be more appropriate in something more general than a React-specific plugin.\n. Yes, definitely.\n. @Daniel15 I might not be looking in the right place, or I might not be running thins in the right way, but I don't see links to documentation on any ESLint errors when I run eslint in my terminal. Can you give us an example of the command you are running and the output you see?\n. I have also confirmed that dot-accessed nested props are checked but nested destructured props are not. Here's a repro case:\n``` jsx\n function Foo(props) {\n   const { bar: { nope } } = props;\n   return ;\n }\nFoo.propTypes = {\n   foo: PropTypes.number,\n   bar: PropTypes.shape({\n     faz: PropTypes.number,\n     qaz: PropTypes.object,\n   }),\n };\n```\n@ianmstew don't worry about opening a new issue, I'll just modify this one.\n. I am also noticing that this gives false errors on pure functional stateless components that are now available as of React 0.14:\njsx\nconst MyComponent = () =>\n  <div>\n    ...\n  </div>;\n. I've done something similar in #703, which might serve as a pretty good start for a rule like this one.\n. Great! I'll submit a PR shortly.\n. I started looking into fixing this by adding the following test case to the valid section of jsx-pascal-case tests\njs\n  {\n    code: [\n      '<svg>',\n      '  <defs>',\n      '    <linearGradient',\n      '      x1=\"-1\"',\n      '      y1=\"0%\"',\n      '      x2=\"1\"',\n      '      y2=\"0%\"',\n      '      gradientTransform=\"rotate(5 .5 .5)\"',\n      '      >',\n      '      <stop offset=\"0%\" style={{ stopColor: BACKGROUND_COLOR }} />',\n      '      <stop offset=\"20%\" style={{ stopColor: SHIMMER_COLOR }} />',\n      '      <stop offset=\"40%\" style={{ stopColor: BACKGROUND_COLOR }} />',\n      '    </linearGradient>',\n      '  </defs>',\n      '</svg>'\n    ].join('\\n'),\n    ecmaFeatures: {\n      jsx: true\n    }\n  }\nand it passed. So maybe this has been fixed somewhere, or the problem exists in some combination of things that aren't true in this test but are true in our environments?\n. I wonder if a more general rule for this could be written.\n. Alright, here's a repro case. It seems to happen when a prop is a property of an item of an array:\n``` jsx\nconst Test = React.createClass({\n  render() {\n    return (\n      \n    );\n  }\n});\nmodule.exports = Test;\n```\n. @gajus instead of disabling the rule, why not add a propType for this prop?\n. Ok! I'm going to close out this issue then. Please feel free to re-open if you can think of a good reason for this. :D\n. I'd be happy to review a PR that adds this as an option.\n. How should such a rule relate to higher-order components?\n. I'm not sure how feasible this is, since you likely will have iterators (e.g. map) returning JSX all over the place that you don't really need to assign to variables like this.\n. I think this is similar to #211.\n. I think this is similar to #211.\n. This seems to have been an issue with peer dependencies and npm 3, and can likely be closed out.\n. Considering there is an option to accomplish what you want here, I think I'm going to close this issue out. Please re-open if there is anything else that needs to be done.\n. > Is it really useful since AFAIK Babel will keep compiling both as named components ?\nAh, interesting. I tried it out in the REPL and you are correct about Babel compiling both as named functions.\nHowever, in addition to what @ljharb mentioned, in the project I am working in (which uses Babel), when I look in the React inspector I see components that are arrow functions called <StatelessComponent> and components that are named functions called by the name of the function. I checked out the transpiled code and, at least with the version and configuration we are using, the arrow function is transpiled to an anonymous function.\nEven if this were not the case, I can imagine that some people would simply want to enforce consistency of always using either named functions or arrow functions across their codebase as a stylistic choice.\n. > Is it really useful since AFAIK Babel will keep compiling both as named components ?\nAh, interesting. I tried it out in the REPL and you are correct about Babel compiling both as named functions.\nHowever, in addition to what @ljharb mentioned, in the project I am working in (which uses Babel), when I look in the React inspector I see components that are arrow functions called <StatelessComponent> and components that are named functions called by the name of the function. I checked out the transpiled code and, at least with the version and configuration we are using, the arrow function is transpiled to an anonymous function.\nEven if this were not the case, I can imagine that some people would simply want to enforce consistency of always using either named functions or arrow functions across their codebase as a stylistic choice.\n. Possibly. I think there might be some overlap here with #412.\n. Possibly. I think there might be some overlap here with #412.\n. I believe this is possible, but I'm not really convinced of its usefulness. I find that an occasional comment explaining a propType is useful, but most props should have clear names instead of relying on comments to explain them.\nIt has been a while since you opened this issue. In your project do you still feel like enforcing that every propType has a jsdoc comment on it is the right way to go, or would such a rule just cause a lot of noise?\nI think if you want to try this out, you could implement the rule for your team somewhere and run with it for a while. After a while, if you still find it useful and think that others would benefit, I'd be open to reviewing a PR.\nI hope this makes sense to you. Let me know if you have any questions! :)\n. Oops, looks like this was already fixed. 270959b3d26c90fe32f8c8a0e0239f9233bc1504\n. Oops, looks like this was already fixed. 270959b3d26c90fe32f8c8a0e0239f9233bc1504\n. Sounds good. Is there anything I can do to help get the next major release out sooner?\n. Sounds good. Is there anything I can do to help get the next major release out sooner?\n. Thanks! If you are thinking about releasing a new version, it would be really swell if #429 could sneak in it as well.\n. Thanks! If you are thinking about releasing a new version, it would be really swell if #429 could sneak in it as well.\n. Sure thing, makes sense!\n. Sure thing, makes sense!\n. This will likely conflict with some of my other open PRs, so it might be best to merge those first.\n. If anyone ends up working on this, it might be worth also checking out #296 while you are in that code, since it is somewhat related.\n. I generally prefer to avoid the ternary altogether:\njsx\n{foo && <b>bar</b>}\n{!foo && <b>baz</b>}\n. I am happy to help review a PR that improves this rule. It sounds like there are a few styles that folks desire, so it would be good if the rule could enforce each style with this rule, chosen via an option.\n. @straku I don't think I fully understand what you are criticizing and what you are proposing. Can you give us some examples of each?\n. This is basically a duplicate of #314, which I've implemented in #703.\n. @ljharb \n\nIt's not just any function that returns JSX - it's functions that return JSX and take a \"props\" (or destructured) first argument, and an optional \"context\" second argument.\n\nNot all SFCs take props though, right?\n. What if we had a rule that warned you about method names that had a small levenshtein distance (maybe <= 3) from lifecycle methods?\n. It would be great if this rule could take into account references to objects in other modules. e.g.\njsx\n// Component-shape.js\nexport default {\n  foo: React.PropTypes.string,\n  bar: React.PropTypes.string.isRequired,\n}\n``` jsx\n// Component.js\nimport ComponentShape from './Component-shape.js';\nconst propTypes = ComponentShape;\nexport default function Component({ foo, bar }) {\n  return {foo}{bar};\n}\nComponent.propTypes = propTypes;\n```\nshould warn about foo but not bar, since bar is required.\n. Yes, I think so. For the never case, there are probably some exceptions when used outside of props (e.g. {' '} is often used).\n. Yeah, that's fair. I could see folks wanting different things in props vs outside props, so having separate rules seems like a decent way to achieve that.\n. Indeed, it is all internal!\n. Are there any changes you'd like to see me make to this PR?\n. @koistya yes, we use .jsx for any file containing JSX.\n. @koistya Indeed, we have! See also: https://github.com/airbnb/javascript/pull/985\n. I tried this out and it seemed to help on the cases I used it on.\n. I think this looks good, thanks for all of your work on this rule. If this code is based off of the prop-types rule code, we currently have a bug in that rule where nested destructured props are not marked as used. (#296) It would be good to include some examples in your tests that demonstrate this.\n. @EvNaverniouk Thanks for doing that! That's not quite what I had in mind. My point was more that if we are introducing code that has bugs that we are aware of, it would be nice to fix those bugs before merging. And actually, I think the bug might be the inverse in this rule (e.g. nested destructuring of a prop in propTypes is incorrectly flagged).\n``` jsx\n function Foo(props) {\n   const { foo: { bar } } = props;\n   return ;\n }\nFoo.propTypes = {\n   foo: PropTypes.shape({\n     bar: PropTypes.number,\n   }),\n };\n```\nAny chance you can add a test case for this, and if it fails, make it pass?\n. @EvNaverniouk Perfect is the enemy of the good, so that sounds good to me. Thanks for your work on this!\n. This is happening because Text is a global in the browser environment.\nHere's the data that ESLint uses to set up the globals for the environments: https://developer.mozilla.org/en-US/docs/Web/API/Text\nAnd here's more information on the Text API: https://developer.mozilla.org/en-US/docs/Web/API/Text\n. Thanks for the contribution!\n. LGTM\n. LGTM! I didn't even realize this was a thing.\n. This is the Law of Demeter\n. > If you have specific examples of problematic patterns please post them in the thread.\n@gaearon I ran into a problematic pattern today where I think I need findDOMNode. This is a bit of an unusual situation and if you can see an alternate solution, I would love to know.\nI am currently working on setting up Happo to do visual regression testing in CI. The basic idea is we have some code that:\n1. renders a React component to the DOM\n2. finds the coordinates the rendered component occupies in the DOM\n3. takes a screenshot of the page\n4. crops the screenshot to match the coordinates\nIn order to get any component's coordinates, we need a reference to the DOM node. Because you can't use ref on SFCs, we have a basic wrapper component that we wrap when rendering these examples:\njsx\nclass Wrapper extends React.Component {\n  render() {\n    return React.Children.only(this.props.children);\n  }\n}\nThen, inside our example, we have some code like:\njsx\nconst container = document.createElement('div');\ndocument.body.appendChild(container);\nlet elemRef;\nconst elem = (\n  <Wrapper ref={(ref) => { elemRef = ref; }}>\n    {example}\n  </Wrapper>\n);\nReactDOM.render(elem, container);\nsetTimeout(() => done(ReactDOM.findDOMNode(elemRef)), 0);\nFrom this DOM node reference, we find the coordinates via getBoundingClientRect().\nPerhaps I've overlooked something, but is there currently a way to achieve this without ReactDOM.findDOMNode()? We thought that perhaps we could wrap it in an inline-block <div> with a ref (which then gives us a DOM node), but that changes the styling characteristics of some components (e.g. display: block elements don't stretch out).\n. @gaearon yes! I actually came to the same realization late last night. Thanks for being my rubber duck.\nI did make one modification in case the component renders null:\njs\nconst elem = container.firstChild instanceof Element\n  ? container.firstChild\n  : container;\n. This looks good. Thanks for your contribution!\n. On this roadmap, you have\n\nEnable allow-in-func mode by default in no-did-mount-set-state and no-did-update-set-state rules\n\nI'm not entirely sure what you want done here? Does this amount to removing the option and just having it always be the case, or should this be the case by default and there would be a new option like disallow-in-func?\n. Thanks for all of your hard work on this plugin @yannickcr! This plugin has greatly helped me and my teams over the past couple of years, and I just wanted to make sure you feel appreciated for the effort you put in here. This is such an valuable tool that you've built. \ud83d\udc4f  \ud83d\udc4f  \ud83d\udc4f \nThinking ahead to future major version bumps, I'm wondering--is there anything that I (or others who are interested) can do to help make sure that things continue to run smoothly? I don't want you to feel like you are running this thing all by yourself.\n. > Would you be interested to be added as contributor @lencioni?\nSure!\n. Rebased and conflicts resolved!\n. This might be related to the jsx-uses-vars rule: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md\n. I believe I found the bug. PR coming soon.\n. Thanks for your contribution! I agree with @ljharb so I am closing this out.\nI actually think the text that is currently there has little value as well.\nThanks again for helping to make this plugin better. \ud83d\udc83 . I think it is fine to allow this as long as we can reasonably detect this type of usage.\n. @oliviertassinari @nkt any thoughts on this proposal or interest in picking it up? :). I think referencing the propTypes property on any object would be good enough.. So, it would error out on things like these:\njs\nFoo.propTypes;\nconst { propTypes } = Foo;\nFoo['propTypes'];\nThere may be other patterns to look for. @ljharb can probably think of some.. Are you referring to class property declarations? That feature is currently only a stage 1 proposal and is not yet part of the standard. You can see the list of active proposals here: https://github.com/tc39/proposals\nMore info on what stage 1 means here: https://tc39.github.io/process-document/\n. It's an interesting thought, but I believe that key is a special \"prop\" that doesn't actually get passed down to the element it is added to. \nHere's a quick example I whipped up to demonstrate: https://jsfiddle.net/e1nmfme9/1/\n. No worries! Thanks for contributing! \ud83d\udc83 \n. @yannickcr @ljharb anything else you'd like to see on this before we merge it in?\n. I plan to merge this soon unless I hear otherwise.\n. Rebased\n. LGTM. Thanks @Kovensky!\n. Yeah, I think the 99% solution is great.\n. What should this be called? void-element-tag-no-children?\n. I thought about that, but I think self-closing may refer to elements that are also able to accept children but happen to be rendered without children, such as div. I'm not totally sold on the void naming either, but it is the language used by React and the HTML spec: https://www.w3.org/TR/html-markup/syntax.html#syntax-elements\n. That works for me!\n. Since this is scoped to DOM elements, perhaps that should be part of the name? In #709 we settled on void-dom-elements-no-children, so perhaps this should be dom-elements-children-or-inner-html or dom-elements-no-inner-html-with-children (or dom-elements-no-danger-with-children, but I worry that \"danger\" may end up being too broad at some point)?\nI think that the dangerouslySetInnerHTML is a React thing, not a JSX thing, so I'm not sure this should come with the jsx- prefix.\n. Thinking about #712, which I think might be named dom-elements-no-inner-html, I think dom-elements-no-danger-with-children might be better actually. Plus it makes me laugh.\n. Perhaps, but I think that would require renaming no-danger to something more general, and giving it options.\nI like keeping them separate, because someone might want to generally enable no-danger, but disable it in a specific situation and still have this protection.\n. Name: dom-elements-no-inner-html?\n. Name: dom-elements-no-content-editable-with-children?\n. Name: dom-elements-no-on-focus-in-or-out?\n. Name: dom-elements-style-is-object?\n. I'd prefer to not add complexity to support such a thing, but since it seems like this would help you out, I think something like this would be acceptable. I think it would be good to mention in the documentation that subclassing React.Component should be avoided.\n. Ah, interesting. Is this documented anywhere?\n. Agreed. I think we should write them all, put out minor releases, and then\nadd them all to recommended config in a major release ASAP. That way we can\nmaximize benefit and minimize pain.\nOn Sat, Aug 13, 2016, 11:09 AM David Petersen notifications@github.com\nwrote:\n\nRenamed and removed it from the recommended rules.\nI do think these type of rules that are catching errors that React will\nthrow itself should be recommend ASAP.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/719#issuecomment-239633938,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAL7zovEh2NROCC1sglDA5j8o_GOzYDrks5qfgg_gaJpZM4JVbyE\n.\n. I think it is a warning\n. This rule should also probably include naming the second argument context for the same reasons. It should also likely apply to React Component class constructors.\n. @benstepp You've done a really great job with your first rule! \ud83c\udf8a \n. LGTM\n. @benstepp It looks like this needs a rebase.\n. @benstepp any chance you can rebase this?\n. Agreed on all accounts! Thanks for rebasing. \ud83d\udc83 \n. Thanks!\n. @zachguo It sounds like utils.isReturningJSX might need to be fixed? That seems like a good area to focus your efforts and would likely help a lot of other people.\n. @zachguo It sounds like utils.isReturningJSX might need to be fixed? That seems like a good area to focus your efforts and would likely help a lot of other people.\n. Thanks for the report! I think we need to update some of our utility methods to better detect these new things. e.g. https://github.com/yannickcr/eslint-plugin-react/blob/763382f8d4ec5961c765bbb71cd2698016da5b53/lib/util/Components.js#L195\n\n@ozum would you be interested in submitting a PR for this?\n. I'm not sure this needs to be a separate rule. It would also be nice if it allowed these function calls as callbacks with an option to disallow, like we do with the disallow-in-func option.\nWhat do other folks think?\n. Ah yes, that would be preferable\nOn Wed, Feb 15, 2017, 11:54 AM Jordan Harband notifications@github.com\nwrote:\n\n@ljharb commented on this pull request.\nIn docs/rules/no-did-update-set-state.md\nhttps://github.com/yannickcr/eslint-plugin-react/pull/742:\n\n@@ -51,7 +51,7 @@ var Hello = React.createClass({\n\n```js\n ...\n-\"no-did-update-set-state\": [, ]\n+\"no-did-update-set-state\": [, , ]\nBoth could be supported with eslint schemas as semver-minor - ie, a \"mode\"\nstring, and then otherwise, an options object.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/742, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAL7zgojwTRK-O-tXmnYP-YhdnJ4BeH8ks5rc1fcgaJpZM4JdpvP\n.\n. Ah yes, that would be preferable\n\nOn Wed, Feb 15, 2017, 11:54 AM Jordan Harband notifications@github.com\nwrote:\n\n@ljharb commented on this pull request.\nIn docs/rules/no-did-update-set-state.md\nhttps://github.com/yannickcr/eslint-plugin-react/pull/742:\n\n@@ -51,7 +51,7 @@ var Hello = React.createClass({\n\n```js\n ...\n-\"no-did-update-set-state\": [, ]\n+\"no-did-update-set-state\": [, , ]\nBoth could be supported with eslint schemas as semver-minor - ie, a \"mode\"\nstring, and then otherwise, an options object.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/742, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAL7zgojwTRK-O-tXmnYP-YhdnJ4BeH8ks5rc1fcgaJpZM4JdpvP\n.\n. It should also skip classes that extend React.PureComponent.\n. Yes, you should be able to do this. Here are some good resources that should help you:\n- http://eslint.org/parser/\n- https://astexplorer.net/#/iT3noROGGb\n. Thanks!\n. Thanks!\n. Perhaps we should add a note to the documentation?\n\nOn Sun, Aug 14, 2016, 9:45 PM Ian VanSchooten notifications@github.com\nwrote:\n\nAh, I see, I was missing that step. And react generates valid DOM nodes\nwith start/end tags when necessary. Thanks for explaining!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/765#issuecomment-239728735,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAL7zieXZz0ZJzfQ8CkoCIua4A3Z0dcAks5qf-7qgaJpZM4JkGie\n.\n. Thanks for the report!\n\nIt was likely 376dc53656f78059fb405d9e30c2f402717f6882 (#702) that broke this for you. This option is the default as of 6.0.0 and was removed in favor of a disallow-in-func option, which you can see in the changelog: https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#600---2016-08-01\nThis has been discussed in #760 and #734.\n. Thanks for the report!\nIt was likely 376dc53656f78059fb405d9e30c2f402717f6882 (#702) that broke this for you. This option is the default as of 6.0.0 and was removed in favor of a disallow-in-func option, which you can see in the changelog: https://github.com/yannickcr/eslint-plugin-react/blob/master/CHANGELOG.md#600---2016-08-01\nThis has been discussed in #760 and #734.\n. I think this might technically be a breaking change, so I'll mark this for the v7.0.0 release.. Thanks!\n. I'm closing this out due to inactivity. @yutin1987 please feel free to re-open.. LGTM, thanks!\n. You can currently either disable this rule or change your component's API.\nIt would be possible to add an option to the rule to whitelist components, but that's not so great because you can have multiple components that share the same name in a codebase but with different APIs and you'd want it to flag on the components where style means the usual thing but not on the components where style means something different. I'm not in favor of adding an option that does this.\nAlso, there are other rules like forbid-component-props that you will have similar problems with.\nI think people generally expect style to be an object in a React codebase, so changing your prop name here would likely improve the readability of your code a little. Some good alternatives might be variant, theme, or color.\n. It's almost correct. render needs to return something.\n. Agreed, this seems like a useful rule but it would be best for a redux or react-redux specific eslint plugin.\nCan you elaborate on your concerns about existing propTypes validation?\n. You might want to check out ImportJS, which is an editor plugin built to do this type of thing.\n. It might not be too hard to add an integration for TextMate. I'd be happy to point you in the right direction and review it if you want to go down that route.\n. Thanks!\n. Just to be clear, this proposal is to flag the following as an error:\njsx\nrender() {\n  return (\n    <span>\n      Welcome, <Name userid='blahblah' />\n    </span>\n  );\n}\nin favor of this:\njsx\nrender() {\n  return (\n    <span>\n      Welcome,\n      {' '}\n      <Name userid='blahblah' />\n    </span>\n  );\n}\nIs that accurate?\n. Yes, I think this would be great to add. It even seems like it would be autofixable.\n. I'd be happy to help review a PR that adds this. What do you plan to call it?\nIt would also be nice to have an option to enforce the opposite.. Thanks!. All feedback has been addressed! PTAL. > Also, what about the .forEach method of a Map or Set?\n@ljharb What do you mean by this question? Are you referring to the name of the rule and documentation mentioning arrays?. @ljharb Yes, these will be caught as well for precisely the reason you mention. Likewise, so will any instance of any class that has one of these methods on it. This is what I was referring to about potential false positives in my commit message.. @ljharb I believe I have addressed your feedback.. Would it be more useful to have a rule that knows what all of the DOM element props can be, and if you use something that isn't one of those it warns? That would have the advantages of working for everyone out of the box, and being specific for each individual node type.. Thanks!. It might also help to share your eslint configuration as well as check to make sure that there aren't any overriding .eslintrc files in intermediary directories.. It would be helpful if you could create a repo that has a minimal reproduction of the issue.. Thanks!. @ljharb go for it. Thanks @CarlRosell! Will you please squash these down to a single commit?. @iancmyers thanks for your contribution!\n@oliviertassinari Thanks for raising this scenario. I'm going to merge this as it is, and we can follow up with an improvement to address that if we need to. One thought is to allow referencing propTypes on objects imported from packages, but we can discuss the details in a separate issue or PR.. What should such a rule be named?. That's not quite right though, since with the callback version you are still using setState and this.state. It would need to be something like no-set-state-object-using-this-state but that feels a little verbose--but maybe that's the best we can do?. Ah, you are absolutely correct. Your suggestion sounds good to me then.. Looks like it. Closing this one as a duplicate of #943.. Sounds good to me. The most simple cases should be easy, but I expect that it will be tricky to get them all. Still a partial solution is better than no solution. @matthargett want to submit a PR? You could probably copy no-did-mount-set-state. \nPerhaps we should consolidate no-did-mount-set-state, no-did-update-set-state, and the proposed no-render-set-state into a single rule?. Thanks for the report! \nUnfortunately, I'm not sure there is any way to reasonably detect if .map is called on an Immutable.js object or something else. Any ideas on how we might solve this?\nIf we can't come up with anything, I think the best we can do is add a note to the documentation about this.. I think \"redundant\" might be more specific than \"useless\". What do folks think?\nAlso, I'm not sure if we should abbreviate shouldComponentUpdate as scu. I think it might be best if the rule was named react/no-redundant-should-component-update.. Thanks!. Thanks!. Thanks for the contribution! I haven't had time to review the code here yet, but I wanted to mention that I think no-invalid-default-props isn't quite the right name for this rule. To me that name implies that the default props are going to be checked against the propTypes validators.\nI'm not quite sure what a good name might be. Maybe something along the lines of no-extra-default-props?\nAlso, I'm not entirely sure this makes sense as a separate rule instead of enhancing the prop-types rule to include this. @ljharb what do you think?. @nfantone FWIW, turning this into a component:\njsx\nconst getName = (user) => (<li>user.name</li>);\ncould be as simple as adding curlies in the signature:\njsx\nconst getName = ({ user }) => (<li>user.name</li>);\nand updating the callsites of course.. \nWe'd be happy to review a PR that improves documentation in a way that would have saved you some time!. \nWe'd be happy to review a PR that improves documentation in a way that would have saved you some time!. It seems like this might make sense for jsx-ast-utils. @evcohen thoughts?. > I don't have much experience in open source :)\nYou are doing a great job! Keep it up \ud83d\udc83 . @ljharb you mean like you did here? https://github.com/yannickcr/eslint-plugin-react/commit/0c3638015b79e72c187d292269a22562da5d4efe. Looks like this needs a rebase. @bebraw in the meantime, does this work with <React.Fragment> instead of <>?. Yeah, I definitely like that better--I was just doing what @yannickcr had written in the plan. I'm going to be afk for the next few days starting soon, so I'll push another version and he can choose his favorite.\n. New version is at https://github.com/yannickcr/eslint-plugin-react/pull/440\n. I wonder if this comparison could reference a variable or something instead of hard-coding <text>\n. I just tried this out with a different rule that has a schema of [] and it produced an error like:\nConfiguration for rule \"plugin/rule\" is invalid:\nValue \"config value\" has more items than allowed.\n. Yes, I think so. I was copying how it is in other rules documentation though so we should probably fix them all at the same time.\n. I see the value in linting for >, since you have provided such a good example of what that can be problematic. However, I'm not so sure about the other characters listed in the defaults here. Can you provide similar reasoning for each of these characters?\n. Yeah, I also found the omission of { curious. In any case, it would be really great if the documentation included an example of why each of the defaults can be problematic.\n. I'm not at all familiar with this namespace syntax, so I'm not really sure if this is correctly marked as an error or not. @ljharb can you verify?\n. Sounds like another good rule would be to prevent a children prop on DOM elements.\n. Ah, right. Good point!\n. #720 \n. These should use jsx, not js, for better syntax highlighting.\n. I think this should go in the recommended config as well. Thoughts @yannickcr?\n. This rule should also warn when Components receive a children prop. For example, this is bad too:\njsx\n<MyComponent children='Children' />\n. nit: I think it would be slightly nicer to use an early return here to keep your code flatter.\n. It might be nice to additionally tell people what they should do. How about this error message?\n\nDo not pass children as a prop. Instead, nest children between the opening and closing tags.\n. Same here. What do you think about this?\nDo not pass children as a prop. Instead, pass them as additional arguments to React.createElement.\n. I believe that React.createElement can take an arbitrary number of arguments. Starting with the third argument they are considered children. This error message should probably be updated to reflect this.\n. I think you need to update your tests to match the new error messages.\n. Will you please include a valid case using React.createElement with MyComponent and children?\n. It might be nice to include an example with multiple children. e.g.\n\njs\nReact.createElement(\"div\", {}, \"Child 1\", \"Child 2\");\n. Also, a valid case where there is at least one non-children prop with React.createElement and JSX.\n. Oh? I usually see lots of blocks with red backgrounds when using js on JSX code. Here's an example.\njs: https://github.com/Khan/aphrodite/tree/436325f8848db974e6f9ffba18afa6af1c426095#api\njsx: https://github.com/Khan/aphrodite/tree/a1fdb520fd9fcc50148a30de2c49c7c1253a604e#api\n. I think this is ready for v6 so might as well include it in recommended.\n. Thanks for the heads up! This PR has been updated.\n. You would set the forbid option to include the props that you want to forbid and not include className/style. This is identical to forbid-prop-types.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md\n. Sure, done!\n. It would be nice to point people toward things like higher order components if they want to use context.\n. Please use jsx here for better syntax highlighting\n. It might be nice to put this in a separate code block to make it more obvious that there are two examples here.\n. Also, it might be nice to change {children} to props to simplify the example, which might make it clearer to folks who haven't encountered destructuring like this before.\n. Did you mean to remove , context from the signature?\n. It would be nice to include examples where:\n- component is an SFC that uses function syntax (not arrow function)\n- context is destructured in the signature\n- the second argument has a name that is not context\n- access of context via shenanigans\n  - (...args) => { args[1] }\n  - function Hello() { arguments[1] }\n  - this['context']\n  - var foo = 'context'; this[foo]\n  - const { context } = this;\n. Not entirely sure. Since that's not part of standard JS yet (still stage 2), you might have to jump through some extra hoops to make sure there is a parser that can understand that experimental syntax.\nIn astexplorer.net it looks like espree fails on this syntax, but babel-eslint does not. So you probably need to specify parser: 'babel-eslint' in your test for these.\n. Might as well. Note: that will likely require a rebase onto origin/master (which you probably want to do anyway).\n. It would be nice to include this example in the html section down below.\n. Also the component section, I guess.\n. It would be great if these used jsx instead of js for better syntax highlighting.\n. I wonder if these messages would be clearer if they included an example of how the rule wants it to be written?\n. js\n'Whitespace is forbidden between `/` and `>`, e.g. `/>`'\n?\n. This could be unnested I think (here and a couple of other places in this rule):\njs\nif (option === 'never' && !adjacent) {\n. This sentence needs ending punctuation.\nAlso, it might be worth mentioning that React will issue a warning for this case.\n. I think we want to wait to enable this in the recommended configuration until the next major version bump, since doing so may end up breaking people's builds.\n. typo: sting -> string\n. Also, I don't think that the string values part of this rule is true.\n. It would be nice for this rule to stick to the type of check that is made by React, which simply verifies that it is null or an object.\nhttps://github.com/facebook/react/blob/85dcbf83/src/renderers/dom/shared/ReactDOMComponent.js#L204\nFor example, these should all be valid:\n- Integer value, e.g. style={{ width: 100 }}\n- Some string values and some integer values, e.g. style={{ color: 'red', width: 100 }}\n- Interpolation in a value, e.g. style={{ border:1px solid ${primaryColor}}}\n- Function call in the value, e.g. style={{ border: borderFactory(1) }}\n- Variable as the value, e.g. style={{ color: red }} and style={{ color }}\n- String concatenation in the value, e.g. style={{ border: '1px solid ' + primaryColor }}\n. I think it might be nice to have a rule that validates the shape of the style object when that can be discerned, but I think that could be a different rule.\n. I don't understand why this is included in the examples--this component has no propTypes. Did you mean to include something like this?\njs\nHello.propTypes = {\n  name: React.PropTypes.string.isRequired,\n};\n. I find the first sentence on this line difficult to grok. I think it would be clearer if it referenced React.PropTypes.shape specifically. e.g.\n\nIn some cases it is impossible to accurately detect whether a React.PropTypes.shape's values are being used.\n\nAlso, please include backticks around any words that are code references (e.g. true).\n. It's not very clear to me what this option does exactly, when I might need it, or how to use it. Will you add a full example to the documentation?\n. I wonder if this function should go in lib/util/Components.js\n. nit: please make these jsx instead of js, for best syntax highlighting\n. This token should match the argument name, so you should update line 222 at the same time.\n. I think we can avoid repeating ESLint documentation and clarify here by calling these \"options\" instead of \"arguments\", and including an example of how to configure it after the text. What do you think about that?\n. I think it might be good to only allow nextProps to work on the specific lifecycle methods it is provided by React. shouldComponentUpdate, componentWillReceiveProps, componentWillUpdate. And, it would probably be better to use positional argument detection for these, since people can name the arguments anything they like.\nAlso, it would be good to support prevProps on componentDidUpdate in the same way.\n. I think you unintentionally added this line, which is causing specs to fail.\n. Will you please also add tests like the null tests but for undefined?\n. I think you have a typo here\n. JSX should be capitalized here and the next line\n. It would be ideal if these used jsx for syntax highlighting instead of just js\n. Thanks for adding tests!\n. It is, but on the next line we see /> again.\n. Codebases may have multiple components with the same name. Would it be more useful to be able to specify a path to a component instead of or in addition to just a component name?\n. Thanks for including the Oxford comma! A+++\n. Sure, I'll expand this document a little. I intended my next sentence to provide the reasoning, but perhaps it needs to be more explicit.. I can see forEach for sure, but filter would be quite unusual. It should be easy enough to include though and I don't see any harm in it, so I'll add these.. This seems to have broken the build for Node < 4. We have a PR that removes support for Node < 4 (#1038) that will un-break this. @ljharb do you think we will merge this soon or should I quick fix this line? I'm in favor of merging your PR now.. Should this be\njs\n// [1, {when: 'always'}]. This comment should probably be updated.. I might be misunderstanding what this is checking for here, but I'm not sure this variable name makes sense. I think isJSXExpressionContainerExpression would be more accurate.\nAdditionally, it might be nice to include a comment with an example of what type of code this identifies.. Also, does this bug exist for folks not using JSX? (i.e. React.createElement)\njs\nReact.createElement(\"a\", { onClick: function onClick() {\n    return props.previousPage();\n  } });. @ljharb After your Node 4+ PR this could get cleaned up a little.. Sounds good. I'll put up a PR shortly.. Oh nevermind looks like you fixed it in e332b08. It would be nice to link to the babel plugin here.. Unfortunately, even importing like this does not ensure that propTypes is explicitly exported from the module (and not just a property on the exported object).\nWhat do you think about making this rule additionally ensure that propTypes is explicitly exported when being imported as well? Alternatively, if there is a rule in eslint-plugin-import that covers this, we should mention it here.\nAlso, this line should be \njs\nimport SomeComponent, {propTypes as someComponentPropTypes} from './SomeComponent';. This is great! Will you please add a note about this and a link to the rule in the documentation?. It might be worth adding some valid cases like:\njs\nconst foo = propTypes\nfoo(propTypes)\nfoo + propTypes\nconst foo = [propTypes]\nconst foo = { propTypes }\nAnd maybe even junk like this (note the lowercase):\njs\nfoo.propTypes\nfoo['propTypes']\nconst { propTypes } = foo. I was thinking lowercase should perhaps be allowed because in React, components must be uppercase. Lowercase means DOM element. But this distinction is unlikely to matter much here. Reusing component detection logic sounds good to me.. I think you may have missed some other lines like this one (e.g. see require-optimization). It might be worth making another pass.. This probably doesn't matter, but I think this regex won't match the first line? Should it be /^\\s*$/ instead? I'm also not sure what token.value represents, so perhaps the \\n is necessary. (see also the regex on line 184)\nIf these end up being the same, it might not be a bad idea to move them to a constant at the module level.. Thanks for providing this context. This is helpful for reviewers.. nit: I find this style of commenting to be pretty awkward. I think this would be best if it was moved inside the conditional branch. Don't worry about this unless you end up touching this again, especially since you didn't write it.. I don't think this is worth supporting.. nit: this should be jsx (here and elsewhere). nit: In #1071 we are adding react/ to lines like this. It would be nice to get that in here if we touch this again.. Why make this an option instead of having it be the default behavior?. It looks like this documentation needs to be updated, since the default order has not been modified yet.\nIt would be nice to open a PR that updates the default and documentation that we could bring in as part of v7.0.0.. nit: these should be jsx. jsx. It might be a good idea to use an options object for these modes instead of positional arguments.\nThat would be a breaking change, so perhaps it should be done in a followup PR.. Yeah, that makes sense. I'll open an issue for that.. #1072. Do we see value in supporting these shorthand options indefinitely, or might we want to deprecate them to simplify in a major release? If we plan to deprecate them eventually, it might be worth noting that here so people can avoid using them now.. It might be worth converting the propWrapperFunctions to a structure with constant time lookup, like a Set, to keep this path fast.. It might be nice to move some of this into a helper function that takes exceptions as an argument, so this code only has to run in the event of a warning.. I find these two ternaries less clear than if/else. I had to work through the logic here, which slowed me down. It might be worth converting.. I'm on the fence about whether this should be never/always, or something more general like exceptions or except. As it is written here, it is possible to have both never and always which would be a little weird. I think it is fine, but I think a unified option might make the documentation a little clearer and the code a small amount simpler. What do you think?. Ah I see. That makes sense.. In addition to casing, it would be nice to flag also anything with a small levenshtein distance. That could be done as a separate PR.\nAnd, if you are interested, it would be really cool to have a similar rule for detecting typos in lifecycle methods: https://github.com/yannickcr/eslint-plugin-react/issues/843\nI wonder if this rule should have a more general name like react/no-typos and make it work also for lifecycle methods?. It seems like this might be pretty straightforward to write a fixer for. Would you be interested in adding that?. I think rule.test(getPropName(prop)) might be more appropriate here (and below). \"specified\" seems redundant in this message. I think you can remove it without losing any meaning. What do you think?. typo? ObjectTypeAnnotations?\nAlso, since this isn't instantiated, it should probably start with a lowercase letter.\nAnd it might be a bit nicer to use a Map instead of a plain object.. > as I never remember if it was prevProps, nextProps, prevState or nextState\nTo be clear, my suggestion is to apply this rule to lifecycle method names, not their arguments. e.g. componentWillMount. A rule that enforces naming of lifecycle method arguments would be interesting, but I think that is definitely a different rule than typo detection.. This should probably use regex.test(str) instead of match (here and elsewhere).. Instead of reassigning the argument here, can we use a new variable?. Yes, that might be a good idea. That can be added in a separate PR though. :D. ",
    "josiasds": "The same error is happening here: https://github.com/shakacode/react-webpack-rails-tutorial/blob/cd35765c0a0d1a755c30944b4879bc12ca8e8163/client/app/stores/commentsStore.js#L8\nThis fixes the error, but I don't know exactly why. Any ideas?\n. ",
    "oliviertassinari": "Shouldn't we remove this rule? https://github.com/eslint/eslint/commit/3988b47a4b17fc1277c0956e2010d07d1e665cc5\n. :+1: Should probably take into account no-multi-comp and be an option of the display-name rule.\n. :+1: \n. :+1: \n. Might be linked to https://github.com/yannickcr/eslint-plugin-react/commit/0b0e4fb867b074f90ea66f41739426f2def8f7e6\n. Ok, thanks!\n. @alitaheri Thanks!\n. @alitaheri Thanks!\n. > We do not follow variables references\n@yannickcr Will this be fixed in the future? Or should we just not use this pattern?\n. > In your example, the propTypes aren't referenced anywhere in the function. Is that reflective of your actual code?\n@ljharb This is the actual code. I have removed the reference. I wanted to be consistent with the other tests.\n. I agree, it's not straightfoward.\nStill, we have access to the scope. I think that it can be done in simples cases like this one.\nE.g. This is how I'm using the binding with babel: https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types/blob/master/src/index.js#L75.\nSure, I'm gonna open an issue. Thanks. \n. I agree, it's not straightfoward.\nStill, we have access to the scope. I think that it can be done in simples cases like this one.\nE.g. This is how I'm using the binding with babel: https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types/blob/master/src/index.js#L75.\nSure, I'm gonna open an issue. Thanks. \n. @lencioni I have missed that proposal. That's a good idea!\nYou are definitely not the only one wondering. That's the biggest risk I'm aware of when using this babel transformation plugin.\nFor instance, @necolas opened an issue closely related to that topic two months ago: https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types/issues/68\nRegarding the implementation, I don't think that eslint is able to resolve imports.\nI'm assuming we are going to need a heuristic. Do we have enough information to build a good one?. @iancmyers Thanks for working on that!\nI have tried an iteration at the babel plugin with no luck.\nreact-native is encouraging the following pattern. We might need an exception.\n```jsx\nimport {View} from 'react-native';\nclass CustomView extends React.Component {\n  static propTypes = {\n    style: View.propTypes.style\n  };\n  render() {\n    return (\n      ..\n    );\n  }\n}\n```. > Why import * as React from 'react'? \nOne important limitation of this change is around React.propTypes and React.createClass that are accessed. With react v15.x, it's raising two warnings:\n\nExplicitly importing the types is more appropriate until React v16 is released as stable.. > Why import * as React from 'react'? \nOne important limitation of this change is around React.propTypes and React.createClass that are accessed. With react v15.x, it's raising two warnings:\n\nExplicitly importing the types is more appropriate until React v16 is released as stable.. @ljharb It's a different topic. This change introduces the warnings with the @latest version of react:\ndiff\n-import React from 'react';\n+import * as React from 'react';\nAnd it's fixed with the @next version of react. @ljharb It's a different topic. This change introduces the warnings with the @latest version of react:\ndiff\n-import React from 'react';\n+import * as React from 'react';\nAnd it's fixed with the @next version of react. ",
    "andreypopp": "Shouldn't /> be indented as well?\n<MyComponent\n  firstProp=\"value\"\n  secondProp=\"value\"\n  />\n. ",
    "ivanoats": "I think we need to wait for https://github.com/eslint/eslint/pull/1951 , https://github.com/eslint/eslint/issues/1911 , and https://github.com/yannickcr/eslint-plugin-react/issues/18 to close , there are quite a few bugs and changes for JSX in ESLint 0.16.x now. \n. ",
    "MoOx": "FYI I am using eslint 0.16.2\n. Maybe related to https://github.com/eslint/eslint/issues/2004\nNot sure.\n. It seems related to https://github.com/eslint/eslint/issues/1911\n. :+1: \n. I am facing the same issue and I am using babel-plugin-flow-react-proptypes that transform the static value to propTypes (so this make sense to be defined before constructor). I will take a look to custom order to \"fix\" this :)\n. FYI, this file looks like this\n``` js\nimport tape from \"tape\"\nimport configurator from \"..\"\ntape(\"statinamic/lib/configurator\", (test) => {\nconst pkg = {\n    homepage: \"https://localhost:8080/statinamic\",\n  }\n  const config = configurator(pkg)\n  test.equal(\n    typeof config.baseUrl,\n    \"object\",\n    \"should return an 'baseUrl' object in the config\"\n  )\n  test.equal(\n    config.baseUrl.hostname,\n    \"localhost\",\n    \"should contain 'hostname' in 'baseUrl'\"\n  )\n  test.equal(\n    config.baseUrl.port,\n    \"8080\",\n    \"should contain 'port' in 'baseUrl'\"\n  )\n  test.equal(\n    config.baseUrl.pathname,\n    \"/statinamic\",\n    \"should contain 'pathname' in 'baseUrl'\"\n  )\ntest.equal(\n    typeof config.consts,\n    \"object\",\n    \"should return an 'consts' object in the config\"\n  )\ntest.end()\n})\n```\n. Oh sorry, I must have not updated correctly my version.\n. With babel-eslint, it seems to be working fine.\n. Seems like a dup of #1446. ",
    "zonak": "I am still seeing the same issue :(\nI have the following installed:\n- eslint@0.17.0\n- eslint-plugin-react@1.5.0\nHave the following .eslintrc:\njson\n{\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"es6\": true\n  },\n  \"ecmaFeatures\": {\n    \"modules\": true,\n    \"jsx\": true\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"rules\": {\n    \"strict\": 0,\n    \"no-throw-literal\": 1,\n    \"quotes\": [1, \"single\"],\n    \"react/no-multi-comp\": 1,\n    \"react/prop-types\": 1,\n    \"react/display-name\": 1,\n    \"react/wrap-multilines\": 1,\n    \"react/self-closing-comp\": 1,\n    \"react/no-did-mount-set-state\": 1,\n    \"react/no-did-update-set-state\": 1,\n    \"react/jsx-uses-react\": 1,\n    \"react/jsx-uses-vars\": 2,\n    \"react/react-in-jsx-scope\": 1\n  }\n}\nUsing the following sample code:\n``` js\nimport React from 'react';\nlet HelloMessage = React.createClass({\n  render: function() {\n    return Hello {this.props.name}!!!;\n  }\n});\nReact.render(, document.getElementById('react-container'));\n```\ngetting the following errors:\nline 3, col 4, Error - HelloMessage is defined but never used (no-unused-vars)\nline 3, col 37, Warning - 'name' is missing in props validation (react/prop-types)\nline 3, col 37, Warning - Component definition is missing display name (react/display-name)\nline 9, col 14, Error - 'HelloMessage' is not defined. (no-undef)\n. ",
    "zigomir": "I think I have same issue. I'm also using modules in ecmaFeatures.\n. ",
    "Cellule": "I tried the workaround and it didn't work for me.\nHowever, I see that wrapping the jsx in a function seems to fix the problem.\nfor instance\n``` js\nvar routes = (function(){\n  return \n<Route\n  name='bonfires'\n  path='/bonfires/?:bonfires?'\n  handler={ Bonfires } />\n\n<DefaultRoute\n  handler={ Bonfires } />\n\n\n})();\n```\nis correctly recognised by the linter.\nIt seems that any jsx not in a function is incorrect\n. I also saw the problem elsewhere (not really a normal use case) and it might pinpoint the issue.\njs\nvar Panel = require(\"react-bootstrap/Panel\");\nvar Application = React.createClass({\n  statics: {\n    componentX: (\n      <Panel> <p> test </p> </Panel>\n    )\n  },\nI get the errors\n4:4   error    Panel is defined but never used          no-unused-vars\n  22:6   warning  'React' must be in scope when using JSX  react/react-in-jsx-scope\n  22:7   error    'Panel' is not defined                   no-undef\n  22:14  warning  'React' must be in scope when using JSX  react/react-in-jsx-scope\nHowever\njs\nvar Panel = require(\"react-bootstrap/Panel\");\nvar Application = React.createClass({\n  statics: {\n    getComponentX: function() {\n      return (\n        <Panel> <p> test </p> </Panel>\n      );\n    }\n  },\n});\nis fine\n. I have been checking your branch and the proposal and I was wondering what happens to custom methods that do not fit any regex. Are they simply ignored ?\nFor instance, does the following produce an error, assuming the default options ?\njs\nclass ComponentX extends React.component {\n  myPrivateMethod() { ... }\n  render() { ... }\n  anotherMethod() { ... }\n}\nAlso, with the regex used for lifecycle and render methods, would a custom method named renderCustom() { ... } be targeted by the rule?\n. I have been checking your branch and the proposal and I was wondering what happens to custom methods that do not fit any regex. Are they simply ignored ?\nFor instance, does the following produce an error, assuming the default options ?\njs\nclass ComponentX extends React.component {\n  myPrivateMethod() { ... }\n  render() { ... }\n  anotherMethod() { ... }\n}\nAlso, with the regex used for lifecycle and render methods, would a custom method named renderCustom() { ... } be targeted by the rule?\n. Personally, I prefer when the render method is last so I can easily find it in any files.\nWould it be possible to setup the config like\njs\nsort-comp: [1, {\n  order: [\n    \"lifecycle\",\n    \"everything-else\",\n    \"^on.+\",\n    \"render\"\n  ],\n}]\nbasically have a keyword that means, anything that don't match a particular pattern would have to be in that spot, possibly sorted or not (I would leave it to the dev to sort them however he feels). \nThat way we could control exactly where methods not following a particular pattern would have to be.\nSo:\njs\nclass ComponentX extends React.component {\n  componentWillMount() { ... }\n  myPrivateMethod() { ... }\n  render() { ... }\n  anotherMethod() { ... }\n}\nwould trigger an error:\n```\n$ eslint example.jsx\nexample.jsx\n  2:2  error  anotherMethod should be placed after myPrivateMethod react/sort-comp\n\u2716 1 problem (1 error, 0 warnings)\n```\nYou could of course put the everything-else keyword after the render method by default and I could simply move it for my personal taste.\n. Personally, I prefer when the render method is last so I can easily find it in any files.\nWould it be possible to setup the config like\njs\nsort-comp: [1, {\n  order: [\n    \"lifecycle\",\n    \"everything-else\",\n    \"^on.+\",\n    \"render\"\n  ],\n}]\nbasically have a keyword that means, anything that don't match a particular pattern would have to be in that spot, possibly sorted or not (I would leave it to the dev to sort them however he feels). \nThat way we could control exactly where methods not following a particular pattern would have to be.\nSo:\njs\nclass ComponentX extends React.component {\n  componentWillMount() { ... }\n  myPrivateMethod() { ... }\n  render() { ... }\n  anotherMethod() { ... }\n}\nwould trigger an error:\n```\n$ eslint example.jsx\nexample.jsx\n  2:2  error  anotherMethod should be placed after myPrivateMethod react/sort-comp\n\u2716 1 problem (1 error, 0 warnings)\n```\nYou could of course put the everything-else keyword after the render method by default and I could simply move it for my personal taste.\n. Maybe you're right.\nThen would\njs\nsort-comp: [1, {\n  order: [\n    \"lifecycle\",\n    \"^on.+\",\n    \"render\",\n    \"^.*$\",\n  ],\n}]\ntrigger an error with the code\njs\nclass ComponentX extends React.component {\n  componentWillMount() { ... }\n  render() { ... }\n  onClick() { ... }\n  anotherMethod() { ... }\n}\nWhere onClick should be placed after componentWillMount?\nIf it's fine, would it still be good if we swap \"^on.+\", and \"^.*$\", where anotherMethod should trigger an error?\n. Maybe you're right.\nThen would\njs\nsort-comp: [1, {\n  order: [\n    \"lifecycle\",\n    \"^on.+\",\n    \"render\",\n    \"^.*$\",\n  ],\n}]\ntrigger an error with the code\njs\nclass ComponentX extends React.component {\n  componentWillMount() { ... }\n  render() { ... }\n  onClick() { ... }\n  anotherMethod() { ... }\n}\nWhere onClick should be placed after componentWillMount?\nIf it's fine, would it still be good if we swap \"^on.+\", and \"^.*$\", where anotherMethod should trigger an error?\n. I didn't know that babel would add it from the file name, it's good to know. However, I am not using babel everywhere yet and I think it would still be useful to have a rule to force the developer to assign a name to its components even when using jsx. \nI suppose the rule could check for export default and not warn when no variable nor display name is specified\n. I didn't know that babel would add it from the file name, it's good to know. However, I am not using babel everywhere yet and I think it would still be useful to have a rule to force the developer to assign a name to its components even when using jsx. \nI suppose the rule could check for export default and not warn when no variable nor display name is specified\n. yes, that's pretty much what I mean. The idea is to make sure you have a displayName even when transpiling jsx\n. That order seems fine and since we can always override it if desired then I'd say this is pretty good.\n. Thanks for sharing this, this is exactly what I was looking for.\n. If this is something we want to add support for. I fiddled with it a bit tonight and I got something working for quite a few nested cases.\nIt checks for shape arrayOf objectOf oneOfType and instanceOf.\nI need to do some additional testing, but so far it look pretty solid. I can event do checks like\nthis.props.a[0][someVar].e and give warning about e if the propTypes are\njs\npropTypes = {\n  a: React.PropTypes.arrayOf(\n    React.PropTypes.objectOf(\n      React.PropTypes.shape({\n        b: React.PropTypes.string\n      })\n    )\n  )\n};\nLet me know if you want me to polish it.\nIn case you're interested to see what I did so far\nhttps://github.com/yannickcr/eslint-plugin-react/compare/master...Cellule:prop_type\n. Indeed and now that I think about it, I think I already read the other issue... my bad\n. Indeed and now that I think about it, I think I already read the other issue... my bad\n. I would like to check into it indeed :), but maybe not today, I'm pretty busy\n. I would like to check into it indeed :), but maybe not today, I'm pretty busy\n. Could you share the exact test.\nI did check the code you shared and I found a bug in jsx-sort-prop-types not handling 'this-format' #123.\nHowever, from what I see, prop-types does handle that case. I'm curious to see what's causing that crash. \n. Could you share the exact test.\nI did check the code you shared and I found a bug in jsx-sort-prop-types not handling 'this-format' #123.\nHowever, from what I see, prop-types does handle that case. I'm curious to see what's causing that crash. \n. Never mind, I got it. I will create a PR for it very shortly.\n. Never mind, I got it. I will create a PR for it very shortly.\n. @AlexKVal I'm really glad this will help improve your library (which I absolutely love btw) :)\n. For now you can circumvent this with the following change\njs\nimport React, {Component} from \"react\";\nfunction someDecorator(ComposedComponent) {\n  class MyDecorator extends Component {\n    render() {return <ComposedComponent {...this.props} />;}\n  }\n  return MyDecorator;\n}\nmodule.exports = someDecorator;\n. For now you can circumvent this with the following change\njs\nimport React, {Component} from \"react\";\nfunction someDecorator(ComposedComponent) {\n  class MyDecorator extends Component {\n    render() {return <ComposedComponent {...this.props} />;}\n  }\n  return MyDecorator;\n}\nmodule.exports = someDecorator;\n. The difference is that in jsx-sort-prop-types it only checks the propTypes declaration and not its uses.\nI was thinking (though I didn't implement it yet) that when checking the uses, you could have the case const aria = this.props[\"aria-controls\"];. Right now, this is ignored by the rule because it's a \"computed\" property. However, I could easily inspect that property, realize it's a literal string value and add the check (there are other implications which is why I haven't done it yet, mostly with case this.props[\"some.thing\"] and name.split(\".\") in the rule).\nTherefore, I left it with that structure to make it easy to add more checks.\nNote that it's possible, but make no sense to do propType: {[\"aria-controls\"]: React.PropTypes.string}; So they are deliberately ignored in the other rule.\n. Since you've changed the signature of the function, you should update its uses.\n- https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/display-name.js#L124\n- https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/prop-types.js#L528\n. ",
    "ericclemmons": "@Cellule's fix worked for me as well.  Thanks!\n. I'm not sure what's considered \"global scope\", but the OP's example (where you use <Route />) is all it took for me.\n. Yet another user here with this issue. Everyone has already stated the case better than I.\n(My specific scenario is rendering content from WordPress' API in React views on the server. These include all manners of tags, but it's trusted content despite the dangerous name)\n. ",
    "JedWatson": "I just came across this in the current published version (1.5.0 with eslint 0.17.1) - haven't had a chance to test against the PR submitted to ESLint yet but thought I'd leave this here for reference.\nI get an odd result listing react-tappable\nWith the following config:\n{\n    \"parser\": \"babel-eslint\",\n    \"env\": {\n        \"browser\": true,\n        \"node\": true\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n        \"curly\": [2, \"multi-line\"],\n        \"no-shadow\": 0,\n        \"no-underscore-dangle\": 0,\n        \"no-unused-expressions\": 0,\n        \"quotes\": [2, \"single\", \"avoid-escape\"],\n        \"react/jsx-uses-react\": 1,\n        \"react/jsx-uses-vars\": 1,\n        \"react/react-in-jsx-scope\": 1,\n        \"semi\": 2,\n        \"strict\": 0\n    }\n}\nI get the following results:\n```\nexample/src/app.js\n   4:4   error     App is defined but never used           no-unused-vars\n  67:13  warning  'React' must be in scope when using JSX  react/react-in-jsx-scope\n  67:14  error    'App' is not defined                     no-undef\n3 problems (2 errors, 1 warning)\n```\nIt's kind of ironic that it throws both the App is defined but never used and App is not defined issues; also React is in scope at the top of the file.\n. :+1: great, thanks!\n. ",
    "r01010010": "adding these rules fixed it for me:\n\"react/jsx-uses-react\": 1,\n\"react/jsx-uses-vars\": 1. ",
    "davis": "i'm still running into the error...\nmy eslintrc:\n{\n  // I want to use babel-eslint for parsing!\n  \"parser\": \"babel-eslint\",\n  \"env\": {\n    // I write for browser\n    \"browser\": true,\n    // in CommonJS\n    \"node\": true\n  },\n  {\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    }\n  },\n  {\n    \"plugins\": [\n      \"react\"\n    ]\n  },\n  // To give you an idea how to override rule options:\n  \"rules\": {\n    \"quotes\": [2, \"single\"],\n    \"eol-last\": [0],\n    \"no-mixed-requires\": [0],\n    \"no-underscore-dangle\": [0],\n    \"react/display-name\": 1,\n    \"react/jsx-boolean-value\": 1,\n    \"react/jsx-no-undef\": 1,\n    \"react/jsx-quotes\": 1,\n    \"react/jsx-sort-prop-types\": 1,\n    \"react/jsx-sort-props\": 1,\n    \"react/jsx-uses-react\": 1,\n    \"react/jsx-uses-vars\": 1,\n    \"react/no-did-mount-set-state\": 1,\n    \"react/no-did-update-set-state\": 1,\n    \"react/no-multi-comp\": 1,\n    \"react/no-unknown-property\": 1,\n    \"react/prop-types\": 1,\n    \"react/react-in-jsx-scope\": 1,\n    \"react/require-extension\": 1,\n    \"react/self-closing-comp\": 1,\n    \"react/sort-comp\": 1,\n    \"react/wrap-multilines\": 1\n  }\n}\n. ",
    "amio": "Strange thing is, the error/warning is reported by the rule it self.\n\nhere's my config:\njson\n{\n  \"env\": {\n    \"es6\": true,\n    \"browser\": true\n  },\n  \"extends\": [\"standard\", \"standard-react\"],\n  \"plugins\": [\n    \"react\",\n  ],\n  \"rules\": {\n    \"react/jsx-no-undef\": 1,\n    \"react/jsx-equals-spacing\": [1, \"always\"],\n    \"react/prop-types\": [1, {\"ignore\": [\"children\"]} ],\n    \"arrow-parens\": [2, \"as-needed\"],\n    \"camelcase\": 2\n  }\n}\n. Ooops, my miss,\nAfter update eslint-plugin-react from '3.15.0' to '4.0.0', problem solved :D\n(I'm using eslint@2.2.0)\n. ",
    "steida": "https://gist.github.com/steida/8882dc774ccf7b8ce611\nI checked only prop-types and self-closing-comp. It worked well with createClass but not in pasted example.\nBtw, you can check it on https://github.com/steida/este \n. With React subclassing the only possible detection is jsx syntax only. There is no other shape you can use to detect React class I suppose.\n. My configuration is here github.com/steida/este\n. I don't remember the case maybe it works already. \n. Good question. Yes, it's ok when all your components are pure.\n. I have another isssue after update.\n27:39  warning  'router.getCurrentQuery' is missing in props validation for Login  react/prop-types\n28:22  warning  'router.replaceWith' is missing in props validation for Login      react/prop-types\n2.5.2 works. File https://gist.github.com/steida/f2b2e9d6df01576c3fee\n. No, I'm using just two methods on prop router, and router is in propTypes.\n. How I should do that?\n. Wow, I didn't know that. Thank you.\n. Hmm, still somehow broken: Warning: Failed propType: Invalid prop router of type function supplied to Login, expected object. \n. I tried everything what was suggested.\n. Ok, I updated gulp-eslint, and it works. Damn, gulp wrappers are more miss than hit.\n. Ups, no it still does not work. If I use shape, this warning is logged:\nWarning: Failed propType: Invalid prop `router` of type `function` supplied to `Login`, expected `object`. Check the render method of `LoginExposeRouter`.\nSo, func is must for React. And eslint-plugin-react needs shape. So this is still an issue to solve.\n. I found it.\nThis code sucks:\njs\nredirectAfterLogin() {\n  const nextPath = this.props.router.getCurrentQuery().nextPath;\n  this.props.router.replaceWith(nextPath || 'home');\n}\nThis code works:\njs\nredirectAfterLogin() {\n  const {router} = this.props;\n  const nextPath = router.getCurrentQuery().nextPath;\n  router.replaceWith(nextPath || 'home');\n}\n. fyi const router = this.props.router isn't validated as well.\n. You can check it here https://github.com/este/este/blob/master/src/client/components/exposerouter.react.js\n. @ljharb Correct me if I am wrong, but this rule is unnecessary when we use flowtype.. Yeah, but if you have flowtyped everything, you need runtime checking only at application boundaries.. I don't want to use defaulProps https://twitter.com/estejs/status/812491172438560769. As for optimizations, link pls?. Why is this rule not removed? It confused me, but it's perfectly valid for tooltips.. ",
    "tleunen": ":+1:\n. Not sure it's worth to work on that one...\n\nThis method is not available on ES6 class components that extend React.Component. It may be removed entirely in a future version of React.\nhttps://facebook.github.io/react/docs/component-api.html#ismounted\n. I think the rule should only check the livecycle functions, not the custom functions.\n. Sounds great! And thanks for the workaround\n. Ok just read the comment from https://github.com/yannickcr/eslint-plugin-react/issues/100. It seems the group \"statics\" from the rule is not what I think it was.\n\nI keep this thing open, since it could be a nice enhancement. Currently, eslint tells me to put propTypes after my constructor, but it doesn't make sense for me :)\n. any update to support the ES7 static property?\n. Yes, you should specify the router as PropTypes.func, because React-Router defines it like that.\nI think the issue is because you are using something 2 levels deep router.getCurrentQuery().nextPath. Because of that, eslint-react wants you to specify getCurrentQuery as well.\n. You should remove the peerDep now :)\n. But your suggestion is not better... It's actually pretty much the same thing.\nA good alternative is to bind the function inside the constructor, or to use babel stage 0 and bind it like this:\nclass A {\n   myBoundFn = () => {\n   }\n}\nOr use the autobind decorator: https://github.com/jayphelps/core-decorators.js#autobind\nBut I think a rule for this is a good idea.\n. Do you know if this is something that has been changed in eslint recently?\nI never explicitly set this rule and everything worked fine but now I have to explicitly set the rule to have the warnings.\nMight be because of a collision with this plugin?\n. Ah ;) Thanks!\n. Thanks for being so fast @yannickcr ;)\n. > Apparently by using a non-=== ref callback, the callback will be called extra times\nCould you elaborate on this?\nAnd yes, maybe a generic rule would be best instead of limiting it to refs.\n. @ljharb, @pl12133 - This should also take the rule jsx-space-before-closing into consideration. No space could be valid if jsx-space-before-closing is set as never.\n. Are we sure it will be in that order?\n. ",
    "bebraw": "@yannickcr Thanks a lot! I ended up using a combination of .eslintignore and eslint --ext .jsx --ext .js.\n. Note that this problem changes form with ES6 type classes. In that case you would do something like\n``` javascript\nexport default class Note extends React.Component {\n  constructor(props: {\n    task: string;\n    onEdit: Function;\n  }) {\n    super(props);\nthis.state = {\n  edited: false\n};\n\n}\n}\n```\nNote that I've annotated my example using Flow but you get the idea. Overall ES6 definitions simplify things a lot since we can declare our defaults at the constructor.\n. Alright, feel free to close. :+1:\n. Alright, feel free to close. :+1:\n. @lencioni Yeah, going with that fixes it.. ",
    "burnnat": "Looks like the Travis failure is unrelated to the code change - seems to be a connection issue, maybe because of the Github DDOS.\n. ",
    "glifchits": "It seems like this would be a feature in ESLint, not just this React plugin. Basically this is a warning/error when you reference a function instead of calling it. I tried searching the ESLint docs for it but I couldn't find anything. I don't know much about ESLint but is it even capable of knowing a variable's type? It seems like quite a challenge, esp. when you consider that we are concerned with object methods (eg. this.isMounted), and globals (which are often functions). Now that I think of it, the global config that is available in ESLint makes no distinction as to its type, so it seems quite unlikely that this feature can exist. Am I right?\n. ",
    "mathieumg": "I'd love something like this as well! :+1: \n. > I think the rule should only check the livecycle functions, not the custom functions.\nI actually would like if it could check the custom functions as well. Something like:\n// Lifecycle methods in the right order. (As mentioned above)\n// Custom methods in alphabetical order.\n// render() method.\n. > I do not want to end with something too complex to configure\nI understand, and while the current proposal suits our needs, minor reconfiguration is not easy. For example, if we want to keep the default ordering for the React methods, but would like to alter the custom filter, we would need to do the following:\njavascript\nsort-comp: [1, [\n  \"displayName\",\n  \"propTypes\",\n  \"mixins\",\n  \"getInitialState\",\n  \"componentWillMount\",\n  \"componentWillUnmount\",\n  \"^someNewPattern.+\",\n  \"render\"\n]]\nNot only do we need to redefine all the lifecycle methods, but a React + ensuing eslint-react-plugin version upgrade could break this configuration. The following would address that issue, but I agree that it might start to get a little too complex configuration-wise:\nDefault configuration:\njavascript\nsort-comp: [1, {\n  order: [\n    \"lifecycle\",\n    \"^on.+\",\n    \"render\"\n  ],\n  groups: {\n    lifecycle: [\n      \"displayName\",\n      \"propTypes\",\n      \"mixins\",\n      \"getInitialState\",\n      \"componentWillMount\",\n      \"componentWillUnmount\"\n    ]\n  }\n}]\nOverride in personal rules:\njavascript\nsort-comp: [1, {\n  order: [\n    \"lifecycle\",\n    \"mycustomrule\",\n    \"^handle.+\",\n    \"render\"\n  ],\n  groups: {\n    mycustomrule: [\n      \"^on.+\",\n      \"something\"\n    ]\n  }\n}]\n. Awesome! Thank you very much!\n. Did you enable the classProperties stage 0 transform in your Babel config?\n. Did you enable the classProperties stage 0 transform in your Babel config?\n. > Isn't it enough?\nIt's not. It's a stage 0 proposal for ES7, classes are a ES6 feature. See https://gist.github.com/jeffmo/054df782c05639da2adb\nYou need to enable the es7.classProperties transform in Babel (by adding it to the optional property) (http://babeljs.io/docs/usage/experimental/) or all the stage 0+ transforms (by setting the stage property to 0). See http://babeljs.io/docs/usage/options/\n. > Isn't it enough?\nIt's not. It's a stage 0 proposal for ES7, classes are a ES6 feature. See https://gist.github.com/jeffmo/054df782c05639da2adb\nYou need to enable the es7.classProperties transform in Babel (by adding it to the optional property) (http://babeljs.io/docs/usage/experimental/) or all the stage 0+ transforms (by setting the stage property to 0). See http://babeljs.io/docs/usage/options/\n. Would be a welcome rule. I personally use:\n``` javascript\n<MyComponent\n  myProp=\"...\"\n\nChildren\n\n\n\n```\n. > Also, about your case, I do not understand why you do not want to document the return of render. In my opinion it should be documented like any other function.\nYou are right, but I find it would be cumbersome and repetitive to always document React's render as it's always gonna be the same. That being said, I think the fault is mine, I shouldn't have put that doc-block-looking comment immediately before the render method, I'll add an empty space in-between like I have done for other sections of my components. (\"React properties\", \"React lifecycle\", \"Own methods\", etc.)\nFinally, thanks for confirming my doubts regarding the limitations of the plugin system!\n. Sure, why not! :+1: \n. Somewhat related: https://github.com/rackt/react-a11y/issues/25\n. Even if it were supported today, I imagine the fact that they're getting imported would be a limitation for static analysis?\n. :tada: Thank you! :grin: \n. :tada: Thank you! :grin: \n. Duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/97\n. Duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/97\n. Are you using 2.5.2? If not, perhaps this PR will help in that regard: https://github.com/yannickcr/eslint-plugin-react/pull/112\nIf you're using master, I imagine this could be causing problem with that: https://github.com/yannickcr/eslint-plugin-react/pull/112/files#diff-531a13f7edd3ed4e7c65c3a7df7052f0R153\n. Are you using 2.5.2? If not, perhaps this PR will help in that regard: https://github.com/yannickcr/eslint-plugin-react/pull/112\nIf you're using master, I imagine this could be causing problem with that: https://github.com/yannickcr/eslint-plugin-react/pull/112/files#diff-531a13f7edd3ed4e7c65c3a7df7052f0R153\n. I'm curious, if you manually add defaultProps after propTypes in the lifecycle configuration, does it solve it? If so, it could be added at the same time as constructor is, see: https://github.com/yannickcr/eslint-plugin-react/issues/97#issuecomment-110283110\n. I'm curious, if you manually add defaultProps after propTypes in the lifecycle configuration, does it solve it? If so, it could be added at the same time as constructor is, see: https://github.com/yannickcr/eslint-plugin-react/issues/97#issuecomment-110283110\n. I'll continue the discussion from https://github.com/yannickcr/eslint-plugin-react/commit/d657ea5bbe6313867b218e7ffe7685fb7ed27327 in here for better visibility, I doubt many people will read that one and/or search for it. \nIn reply to https://github.com/yannickcr/eslint-plugin-react/commit/d657ea5bbe6313867b218e7ffe7685fb7ed27327#commitcomment-11816207:\n\nIn second case the method type can be static, get, static get or none. In third case the property type can be static or none. The static type does not seems to be mandatory.\n\nThis could be another rule, complementary to this one, that validates/enforces the right type of method, for example defaultProps should always be static while state should never be.\nBack to the topic at hand, however. I created a list for what the config \"should look like\" for the different syntaxes, I imagine we only need to find a way that works with as many as possible/the most common ones.\nES5\njs\norder: [\n  'lifecycle',\n  'everything-else',\n  'render'\n],\ngroups: {\n  lifecycle: [\n     'displayName',\n     'propTypes',\n     'contextTypes',\n     'childContextTypes',\n     'mixins',\n     'statics',\n     'getDefaultProps',\n     'getInitialState',\n     // Rest stays the same.\n  ]\n}\nES6 - external class properties\njs\norder: [\n  'constructor',\n  'lifecycle',\n  'es-getters-setters', // Special variable, each get is paired with the same-name set if existing. 'es-getters' and 'es-setters' would be used to have them grouped by get/set instead. I imagine a variant with all of these with '-static' appended could be use to target only the static ones. Otherwise, the static ones could be placed at the beginning by default. \n  'everything-else',\n  'render'\n],\ngroups: {\n  lifecycle: [\n     'getDefaultProps',\n     'getInitialState',\n     // Rest stays the same.\n  ]\n}\nIn this case, the \"static\" properties get set after the class definition, is it our duty to validate their order, there?\nES6 - class methods\njs\norder: [\n  'constructor',\n  'lifecycle',\n  'es-getters-setters', // Technically this would exclude those that are part of 'lifecycle'  but do we want that? Starting to get heavy both configuration and implementation wise.\n  'everything-else',\n  'render'\n],\ngroups: {\n  lifecycle: [\n     'displayName',\n     'propTypes',\n     'contextTypes',\n     'childContextTypes',\n     'mixins',\n     'statics',\n     'defaultProps',\n     'state',\n     'getDefaultProps',\n     'getInitialState',\n     // Rest stays the same.\n  ]\n}\nES7 - class properties\njs\norder: [\n  'lifecycle',\n  'es-getters-setters', // Technically this would exclude those that are part of 'lifecycle'.\n  'everything-else',\n  'render'\n],\ngroups: {\n  lifecycle: [\n     'displayName',\n     'propTypes',\n     'contextTypes',\n     'childContextTypes',\n     'mixins',\n     'statics',\n     'defaultProps',\n     'state',\n     'constructor',\n     'getDefaultProps',\n     'getInitialState',\n     // Rest stays the same.\n  ]\n}\nI guess I'm just brainstorming \"out loud\". :stuck_out_tongue_winking_eye: Most of the time, the difficulty comes from the fact that many syntax styles can be combined/used at once, for example nothing prevents me from using a class definition with a standard getDefaultProps method and a state class property.\n. Totally unrelated, by just out of curiosity, why do you not use the import syntax?\n. But then, it is missing.\n. Perhaps, but then again, if you use it in that very component, it's a good assumption to make it should be explicited in the propTypes, no?\n. > PropType.object becomes useless because as soon as you use any key from that object\nFair point. So I imagine, if you use a property which is itself declared as such (PropTypes.object), it should still error?\n. @steida You are using these props and they aren't in your propTypes.\n. My point, you didn't document getCurrentQuery and replaceWith under router.\n. js\nrouter:  React.PropTypes.shape({\n  getCurrentQuery:  React.PropTypes.func,\n  replaceWith:  React.PropTypes.func\n})\nAny of them can be appended with .isRequired too. See: https://facebook.github.io/react/docs/reusable-components.html#prop-validation\n. That would be a React issue though, can I see what you are giving to the router prop?\n. Didn't you already have an issue about this? See https://github.com/yannickcr/eslint-plugin-react/issues/137#issuecomment-117846606, we even discussed it?\n. My bad, I missed that line. To quote myself from that thread, @steida : \n\nThat would be a React issue though, can I see what you are giving to the router prop?\n. That's what I was wondering, perhaps PropTypes.instanceOf would have been more appropriate.\n. @steida Do you mind posting what exactly the value you are giving to router looks like? Thank you!\n. It works because you go around the problem, your prop is just not getting validated at all anymore. It would help to understand the problem better if you would provide us with an example of the value you give to the router prop, thank you.\n. Do you mean on a React.createElement call that directly wraps a React.createClass call? Otherwise, this would be pretty difficult.\n. That is a runtime thing unfortunately, it's outside the scope of ESLint and its plugins.\n. :+1: +1 \n. So, which break is it? :stuck_out_tongue:  Default to true, but rule also considered with \"always\" if set to false? (Last example I showed)\n\nIf so, I'll update the PR!\n. Might become moot, given https://github.com/eslint/eslint/commit/3988b47a4b17fc1277c0956e2010d07d1e665cc5 ?\n. Done!\n. Refactored this part a bit because it was getting hard to follow! I don't know what your stance is on early returns to avoid deep nesting, but I can change this to an else statement if that is what you prefer.\n. This is a little fragile and relies on the fact that it's the only option and that no one would pass a second parameter that doesn't affect this option, I can change it to leverage hasOwnProperty if you want.\n. Yeah didn't think about the schema, good!\n. ",
    "benmosher": "I'm willing to take a stab at this.\nI feel like at a minimum, array literals can be reported:\njs\n<dl>\n  items.map(item => [<dt>{item.name}</dt>, <dd>{item.desc}</dd>])\n</dl>\nMore generally, I'm trying to think of a case where something like\njs\nobject.method(x => <div>{x}</div>)\n//or\nfn(object, x => <div>{x}</div>)\nisn't an iterator callback. So, at least optionally, feel like reporting on callbacks without keys would report the right situations without a lot of false positives.\n. so my proposal would be jsx-key with no-callback option to disable the callback behavior if a given codebase has situations where it is over-reporting.\n. A thought: this would be considered a warning:\njsx\nconst props = { key: \"x\", foo: \"bar\" }\nreturn [<Hello {...props} />]\nI think that is an acceptable (and unlikely) edge case such that it would not be worth covering.\n. ",
    "zertosh": "@yannickcr This is causing the plugin to throw\n. I was thinking about this a little more and there is another subtly that comes with the spread attribute. The spread attribute can be in any position, and that affects the ultimate value of the props passed. So does it make sense to enforce alpha order for all the attributes or to reset it after a spread? E.g.:\njsx\n// this would warn but it shouldn't because I might want my\n// \"onClick\" to override the one in \"this.props\" - but not\n// the \"onLoad\".\n<MyComponent\n  className=\"cls\"\n  onLoad={this.onLoad}\n  {...this.props}\n  onClick={this.onClick} />\nWhat do you think?\n. See https://github.com/yannickcr/eslint-plugin-react/pull/47\n. @Cellule FYI: Your first example would not get a displayName if you're transpiling with facebook's transform (react-tools/jstransform/reactify/etc). With babel, when using ES6 module syntax, it'll infer the displayName from the filename. http://babeljs.io/docs/usage/jsx/#additional-changes\nEDIT: I'm not saying this rule wouldn't be useful. Just letting you know that that is a thing.\n. @Cellule FYI: Your first example would not get a displayName if you're transpiling with facebook's transform (react-tools/jstransform/reactify/etc). With babel, when using ES6 module syntax, it'll infer the displayName from the filename. http://babeljs.io/docs/usage/jsx/#additional-changes\nEDIT: I'm not saying this rule wouldn't be useful. Just letting you know that that is a thing.\n. heh I just found out about it because no-undef wasn't working on a bunch of new files. Can you publish the fix please?\nFYI, though it's valid JSX, and it's recognized by the parser, babel doesn't transpile it. I think you have to use jstransform or build a custom babel plugin (I think that's what we do).\n. It's in the spec. It's a JSXNamespacedName.\n. Stock babel doesn't transform them. You have to write your own transform to do anything with them.\n. The transpiler supports them insofar as it parses the AST, and supports custom transforms on that node type. I wouldn't call the lack of an out-of-box transform for namespaced JSX a bug. What would you transform them to anyway? The value I see in them is in the ability to write custom transforms.\n. ",
    "unbalancedparentheses": "@MoOx we don't even have to set it on the constructor?\n. ",
    "jorge-pascual": "Hi!\nSame problem here... but the proposed solution appears it's not working...\nhome.js\njavascript\nclass Home extends React.Component {\n    static contextTypes = {\n        executeAction: React.PropTypes.func.isRequired\n    }\n    render() {\n        return (\n            <div>\n                <h2>Home</h2>\n                <p>Welcome to login!</p>\n           </div>\n      );\n    }\n}\n.eslintrc\n{\n    \"parser\": \"babel-eslint\",\n    \"ecmaFeatures\": {\n        \"classes\": true,\n        \"jsx\": true\n    },\n    \"plugins\": [\n      \"react\"\n    ],\n    \"rules\": {\n        \"react/display-name\": 1,\n        \"react/jsx-boolean-value\": 1,\n        \"react/jsx-no-undef\": 1,\n        \"react/jsx-quotes\": 1,\n        \"react/jsx-sort-prop-types\": 1,\n        \"react/jsx-sort-props\": 1,\n        \"react/jsx-uses-react\": 1,\n        \"react/jsx-uses-vars\": 1,\n        \"react/no-did-mount-set-state\": 1,\n        \"react/no-did-update-set-state\": 1,\n        \"react/no-multi-comp\": 1,\n        \"react/no-unknown-property\": 1,\n        \"react/prop-types\": 1,\n        \"react/react-in-jsx-scope\": 1,\n        \"react/self-closing-comp\": 1,\n        \"react/sort-comp\": 1,\n        \"react/wrap-multilines\": 1,\n        \"strict\": 0,\n        \"indent\": [2, 4],\n        \"quotes\": [2, 'single'],\n        \"no-unused-vars\": 0 // see https://github.com/babel/babel-eslint/issues/21\n    },\n    \"env\" : {\n        \"node\": true\n    }\n}\noutput\n```\n/myapp/apps/core/services\n/myapp/node_modules/babel/node_modules/babel-core/lib/babel/transformation/file/index.js:601\n      throw err;\n            ^\nSyntaxError: /myapp/apps/profit/features/login/components/Home.js: Unexpected token (7:21)\n   5 | class Home extends React.Component {\n   6 |\n\n7 |  static contextTypes = {\n     |                      ^\n   8 |      executeAction: React.PropTypes.func.isRequired\n   9 |     }\n  10 |\n    at Parser.pp.raise (/myapp/node_modules/babel/node_modules/babel-core/lib/acorn/src/location.js:73:13)\n```\n\npackage.json\n...\n \"devDependencies\": {\n    \"babel-eslint\": \"^3.0.1\",\n    \"babel-loader\": \"^5.1.3\",\n    \"bundle-loader\": \"~0.5.0\",\n    \"del\": \"^1.1.1\",\n    \"eslint\": \"^0.21.2\",\n    \"eslint-plugin-react\": \"^2.5.2\",\n    \"gulp\": \"^3.8.11\",\n    \"gulp-nodemon\": \"^2.0.2\",\n    \"gulp-util\": \"^3.0.4\",\n    \"gulp-webpack-build\": \"^0.11.0\",\n    \"json-loader\": \"~0.5.1\",\n    \"nodemon\": \"^1.2.1\",\n    \"webpack\": \"^1.4.12\",\n    \"webpack-dev-server\": \"^1.6.5\"\n  },\n...\nAny suggestion?\n. Hi!\nSame problem here... but the proposed solution appears it's not working...\nhome.js\njavascript\nclass Home extends React.Component {\n    static contextTypes = {\n        executeAction: React.PropTypes.func.isRequired\n    }\n    render() {\n        return (\n            <div>\n                <h2>Home</h2>\n                <p>Welcome to login!</p>\n           </div>\n      );\n    }\n}\n.eslintrc\n{\n    \"parser\": \"babel-eslint\",\n    \"ecmaFeatures\": {\n        \"classes\": true,\n        \"jsx\": true\n    },\n    \"plugins\": [\n      \"react\"\n    ],\n    \"rules\": {\n        \"react/display-name\": 1,\n        \"react/jsx-boolean-value\": 1,\n        \"react/jsx-no-undef\": 1,\n        \"react/jsx-quotes\": 1,\n        \"react/jsx-sort-prop-types\": 1,\n        \"react/jsx-sort-props\": 1,\n        \"react/jsx-uses-react\": 1,\n        \"react/jsx-uses-vars\": 1,\n        \"react/no-did-mount-set-state\": 1,\n        \"react/no-did-update-set-state\": 1,\n        \"react/no-multi-comp\": 1,\n        \"react/no-unknown-property\": 1,\n        \"react/prop-types\": 1,\n        \"react/react-in-jsx-scope\": 1,\n        \"react/self-closing-comp\": 1,\n        \"react/sort-comp\": 1,\n        \"react/wrap-multilines\": 1,\n        \"strict\": 0,\n        \"indent\": [2, 4],\n        \"quotes\": [2, 'single'],\n        \"no-unused-vars\": 0 // see https://github.com/babel/babel-eslint/issues/21\n    },\n    \"env\" : {\n        \"node\": true\n    }\n}\noutput\n```\n/myapp/apps/core/services\n/myapp/node_modules/babel/node_modules/babel-core/lib/babel/transformation/file/index.js:601\n      throw err;\n            ^\nSyntaxError: /myapp/apps/profit/features/login/components/Home.js: Unexpected token (7:21)\n   5 | class Home extends React.Component {\n   6 |\n\n7 |  static contextTypes = {\n     |                      ^\n   8 |      executeAction: React.PropTypes.func.isRequired\n   9 |     }\n  10 |\n    at Parser.pp.raise (/myapp/node_modules/babel/node_modules/babel-core/lib/acorn/src/location.js:73:13)\n```\n\npackage.json\n...\n \"devDependencies\": {\n    \"babel-eslint\": \"^3.0.1\",\n    \"babel-loader\": \"^5.1.3\",\n    \"bundle-loader\": \"~0.5.0\",\n    \"del\": \"^1.1.1\",\n    \"eslint\": \"^0.21.2\",\n    \"eslint-plugin-react\": \"^2.5.2\",\n    \"gulp\": \"^3.8.11\",\n    \"gulp-nodemon\": \"^2.0.2\",\n    \"gulp-util\": \"^3.0.4\",\n    \"gulp-webpack-build\": \"^0.11.0\",\n    \"json-loader\": \"~0.5.1\",\n    \"nodemon\": \"^1.2.1\",\n    \"webpack\": \"^1.4.12\",\n    \"webpack-dev-server\": \"^1.6.5\"\n  },\n...\nAny suggestion?\n. @mathieumg not sure... I got classes\": true in .eslintrc. Isn't it enough? \n\"parser\": \"babel-eslint\",\n    \"ecmaFeatures\": {\n        \"classes\": true,\n        \"jsx\": true\n    },\n. @mathieumg not sure... I got classes\": true in .eslintrc. Isn't it enough? \n\"parser\": \"babel-eslint\",\n    \"ecmaFeatures\": {\n        \"classes\": true,\n        \"jsx\": true\n    },\n. Thank you @mathieumg . I'm using gulp+nodemon+webpack and I can't find out how to enter the \"optional\" property. \nI got this is webpack.config.js\nmodule: {\n        loaders: [\n            { test: /\\.css$/, loader: 'style!css' },\n            { \n                test: /\\.js$/, \n                exclude: /node_modules/, \n                loader: require.resolve('babel-loader'),\n                query: {\n                  optional: [\"es7.decorators\", \"es7.classProperties\"]\n                }\n            },\n            { test: /\\.json$/, loader: 'json-loader'}\n        ]\n    },\nand this in .eslintrc\n```\n{\n    \"parser\": \"babel-eslint\",\n    \"ecmaFeatures\": {\n        \"classes\": true,\n        \"jsx\": true\n    },\n    \"plugins\": [\n      \"react\"\n    ],\n\"rules\": {\n    \"react/display-name\": 1,\n    \"react/jsx-boolean-value\": 1,\n    \"react/jsx-no-undef\": 1,\n    \"react/jsx-quotes\": 1,\n    \"react/jsx-sort-prop-types\": 1,\n    \"react/jsx-sort-props\": 1,\n    \"react/jsx-uses-react\": 1,\n    \"react/jsx-uses-vars\": 1,\n    \"react/no-did-mount-set-state\": 1,\n    \"react/no-did-update-set-state\": 1,\n    \"react/no-multi-comp\": 1,\n    \"react/no-unknown-property\": 1,\n    \"react/prop-types\": 1,\n    \"react/react-in-jsx-scope\": 1,\n    \"react/self-closing-comp\": 1,\n    \"react/sort-comp\": 1,\n    \"react/wrap-multilines\": 1,\n    \"strict\": 0,\n    \"indent\": [2, 4],\n    \"quotes\": [2, 'single'],\n    \"no-unused-vars\": 0 // see https://github.com/babel/babel-eslint/issues/21\n},\n\"env\" : {\n    \"node\": true\n}\n\n}\n```\nI will try to figure out how to do it!. Thanks!\n. Thanks @MoOx !\n. ",
    "rbholeraj": "@MoOx, how i deal with static variable and properties now? My code is \nclass ParsedText extends React.Component {\nstatic displayName = 'ParsedText';\nstatic propTypes = {\n    ...React.Text.propTypes,\n    parse: React.PropTypes.arrayOf(\n      React.PropTypes.oneOfType([defaultParseShape, customParseShape]),\n    ),\n  };\nstatic defaultProps = {\n    parse: null,\n  };}\nI got error ,\nERROR in ./~/react-native-parsed-text/src/ParsedText.js\nModule build failed: SyntaxError: /Users/MyMac/WebWork/MyProj/node_modules/react-native-parsed-text/src/ParsedText.js: Unexpected token (23:21)\n  21 |  class ParsedText extends React.Component {\n  22 | \n\n23 |   static displayName = 'ParsedText';\n     |                      ^\n  24 | \n  25 |   static propTypes = {\n  26 |     ...React.Text.propTypes,\n. \n",
    "MatthewHerbst": "@jordanpapaleo transform-class-properties is included in stage-2 preset which stage-1 includes, so do you need to specify it independently as well as you have? I got it working just by adding in babel-eslint as my parser since I already use stage-2. None of the parserOptions seem needed for this specific problem.\n. Also, writing out the PropTypes is good so that in the future you could strip Relay from a component and still know it's data requirements.\nAlso, a rule doing this would not be able to tell you if you were getting a string (from Relay) but actually meant to be getting a number. That's something that PropTypes can check by being between the two.. As alluded to in one of my reply-comments, would your concern be alleviated if the customized list could only be a subset of the full list rather than accepting arbitrary values? I do think having some customization of the option is important for people who might want to use it.\nNoted on style/htmlFor, I'll update, thanks.. @ljharb I've updated based on the discussion. Now the customized reserved list may only be a subset of the actual list. The length of the check got me to move it into its own function to make the core create function easier to read. Let me know your thoughts; thanks for being flexible on this, really appreciated. @ljharb I've fully updated the changes based on what we've discussed, let me know your thoughts, thanks!. *bump @lencioni @yannickcr @EvNaverniouk if any of you have some spare moments, looking for some love <3 thanks!. @ljharb do all 4 reviewers on the PR need to approve it?. @ljharb no - we use Relay, so basically all of our props are within a shape (viewer.x, or deeper). Enabling that option would be akin to turning this rule off for us. I know that no-unused-prop-types has issues with shapes since it mentions that in the description, but there is no such warning in the prop-types rule (though makes sense that the two rules would share some issues).. > but I'm now ignoring all array methods when checking prop types off a member expression\n@cbranch101 out of curiosity, why?. > but I'm now ignoring all array methods when checking prop types off a member expression\n@cbranch101 out of curiosity, why?. @sstern6 Would it be possible to add a deep-destructuring example as well? For example:\n```javascript\nclass MyComponent extends React.PureComponent {\n  propTypes = {\n    foo: PropTypes.shape({\n      // TODO: fill this out\n    }).isRequired,\n  }\nrender() {\n    const { foo: { bar } } = this.props;\n    return {bar};\n  }\n}\n```\nExpected error would be: \\'bar\\' is missing in props validation'\nI ask for this because I've seen cases where sometimes destructuring works on the outer layer but not when you go deeper.. @sstern6 #1422 actually reports the problem noted above, which is why I was hoping to see a deep-destructuring test in the test suite that purportedly tested it heh. Seems #1422 still isn't fixed though. I think the tests you have above are good to add regardless, but I don't think they should be said to fully fix and/or verify #1422 . Amazing, thank you! If there's any way I can help, please let me know. I've taken a glance at it before and didn't really know where to start, but happy to look again.. Wow. The robots liked this being merged!. I was playing with making it a \"default\" option if list wasn't specified; would you prefer that?\nRegarding your general comment, I think it's important to allow the user to customize this list since some people may only want certain \"reserved\" props first. For example, maybe we want key first but all the rest to be alphabetized. I'm open to not allowing that (or, maybe better, to allowing overriding the list with only a subset of the reserved props), but I think without this option this  option won't be as useful.\nfunction isReservedProp(name, list) {\n  var listToUse = list || RESERVED_PROPS_LIST;\n  return list.indexOf(name) >= 0;\n}. Woops! Thanks. I believe that it (line 73) does do that. http://eslint.org/docs/developer-guide/working-with-rules. I'm open to that; I was hoping to let people know what the rule is doing without making them read all the options.. (Part of making this trivial functionality a function was just to match the style of the isCallbackPropName function.). No, right now setting noSortAlphabetically will allow non-reserved to be listed non-alphabetically, but reserved would still need to be alphabetical. Should setting noSortAlphabetically allow reserved to be non-alphabetical as well?. Hmmm. Well, all DOM nodes can take the other props, so I think this is ok; I don't actually know what happens if you set dangerouslySetInnerHTML on a composite component. Either way, I think users not putting dangerouslySetInnerHTML on non-DOM components is something left for a different rule check.. Oh, I was just trying to match the other options, wasn't trying to create new functionality. I'll update so that setting noSortAlphabetically overrides noSortReservedAlphabetically. Is it? I guess my version of \"reserved\" are things that have special meaning in React, which I feel like this kind of does, even though it mimicks \"real\" DOM functionality. (I don't care either way though imho). I think it was a pre-mature optionality (I think I just made that phrase up). I'll remove it - I guess I just was trying to allow over-customization, but maybe someone else can add that in the future if they need it and can present a compelling reason.. Plus, actually, removing that significantly simplifies the option, since now it can be <boolean>|<array> rather than <boolean>|{...}. Updated; it's much less complex now, good catch calling me out on that!. I'll add the tests for them all shortly :)\nRegarding dangerouslySetInnerHTML, from playing around with a fiddle, it seems to have no affect at all on composite components - so it seems to be treated as a \"normal\" prop. I'll add the DOM node check for it.\n(Maybe there should be another rule to ensure people don't use dangerouslySetInnerHTML on composite components? Seems like something that could easily cause bugs for people who expect it to work.). @ljharb tried working on this last night, ran into a small problem: what's the best way to identify if an AST node is a DOM element or not? I saw that void-dom-elements-no-children just creates a map of the ones it cares about, but for this we would care about all of them. Checking if the name starts with an upper-case letter would be a good guess, but would be wrong sometimes. It's not clear to me if node.type or if something in node.attributes can be used for this.\nIf I do just need to hardcode the list, that would mean we wouldn't catch custom DOM elements - is that ok?. > React treats all lowercased names as a DOM element\nI don't believe that's correct, you can name an imported composite component whatever you want and use that within JSX no problem; there's actually a rule in this repo to discourage that: jsx-pascal-case\n(live-edit:) I realized that this rule must have the ability to determine user defined components! I'll utilize the method found in that rule.\n~~Here's how React Test Utils does it (it comes down to check ReactElement.isValidElement). I'll work on it tomorrow and see what we have available on node.~~\n. ",
    "benmarten": "As of today, this got rid of the warning for me:\n.eslintrc\n{\n  \"extends\": \"eslint:recommended\",\n  \"parser\": \"babel-eslint\",\n  \"ecmaFeatures\": {\n    \"classes\": true\n  },\n  ...\n}. ",
    "nshoes": "@benmarten Yep, adding  \"parser\": \"babel-eslint\" to my .eslintrc and installing it solved it for me as well.. I was having the same issue, ran:\nnpm install eslint-plugin-react@5.1.1\nand the error went away.\n. ",
    "rocketraman": "\nSeems it's parser Espree does not support the spread operator in destructuring assignment.\n\nEspree is supposed to support both the destructuring and spread operators. I will raise an issue there. Thanks.\n. FYI: https://github.com/eslint/espree/issues/116\n. Based on the comments in https://github.com/eslint/espree/issues/116, it doesn't look like espree will be supporting this until the notation is standardized. However babel-eslint does handle this case without issue.\n. :+1: \n. ",
    "hugihlynsson": "Yay, great work!\n. Glancing over this quickly, it seems that BusDistance.PropTypes should be BusDistance.propTypes, that is \u2013\u00a0propTypes must start with a lowercase p. This should resolve your problem.. ",
    "JayAndCatchFire": ":+1: for this turned on by default\n. ",
    "banderson": "@yannickcr would you like me to PR this change?\n. @schickling that's definitely a good conversation to have with @yannickcr , but I just PR'd this one change for now. I'd be glad to help out with further changes if that's what's decided.\n. ",
    "schickling": "I would even go a step further an switch on all features that \"make sense\" by default and release a new version with those \"breaking changes\". I find my self copying all those config stuff in the .eslintrc files currently.\n. ",
    "asakura": "Hi\nYes, I do. Is there exist any workarounds?\n. Great, thank you.\n. Now it's working as expected, thanks.\n. ",
    "creynders": "Could it be this regressed? Updated eslint and eslint-plugin-react but it still complains about React being unused.\n. Could it be this regressed? Updated eslint and eslint-plugin-react but it still complains about React being unused.\n. A bit more info: If I set \"react/jsx-uses-react\": 0 it reports 37 React is defined but never used errors, but if I set it to 1, it only reports 15, so it appears that it does work somewhat, but inconsistently.\nAnd yes, we too use the babel parser\n. A bit more info: If I set \"react/jsx-uses-react\": 0 it reports 37 React is defined but never used errors, but if I set it to 1, it only reports 15, so it appears that it does work somewhat, but inconsistently.\nAnd yes, we too use the babel parser\n. Tomorrow I'll dig up the ones that definitely fail on my system when I drop the ignore blocks. Hope it'll tell us some more. \n. Tomorrow I'll dig up the ones that definitely fail on my system when I drop the ignore blocks. Hope it'll tell us some more. \n. These definitely fail with React is defined but never used:\n- https://github.com/keystonejs/keystone/blob/master/fields/types/url/UrlField.js\n- https://github.com/keystonejs/keystone/blob/master/fields/types/text/TextField.js\n- https://github.com/keystonejs/keystone/blob/master/fields/types/key/KeyField.js\nYeah, it's less than I reported, got a few mixed up.\nIt's run with these settings:\nhttps://github.com/keystonejs/keystone/blob/master/.eslintrc\n. These definitely fail with React is defined but never used:\n- https://github.com/keystonejs/keystone/blob/master/fields/types/url/UrlField.js\n- https://github.com/keystonejs/keystone/blob/master/fields/types/text/TextField.js\n- https://github.com/keystonejs/keystone/blob/master/fields/types/key/KeyField.js\nYeah, it's less than I reported, got a few mixed up.\nIt's run with these settings:\nhttps://github.com/keystonejs/keystone/blob/master/.eslintrc\n. Ah, then I totally misunderstand the purpose of this rule. I'm a real noob when it comes to react. Sorry about this then. Thanks for taking your time to check it out.\n. Ah, then I totally misunderstand the purpose of this rule. I'm a real noob when it comes to react. Sorry about this then. Thanks for taking your time to check it out.\n. ",
    "dmnd": "Thanks for pointing that out :blush: \nI copypasted those rules names but must have done something crazy in my editor without noticing.\n. > why specific to JSX/react?\nIt's definitely specific to JSX. I suppose not necessarily React, though. @eddie can you suggest a more appropriate place to open this PR?\n. Looks like I was overzealous with the HTML attribute name. Those seem to be case sensitive. But target=\"_BLANK\" definitely works: http://codepen.io/dmnd/pen/LRPmZE?editors=1010\n. Amended to not include all-caps html attributes.\n. Rebased.\n. Rebased.\n. ",
    "AntouanK": "I get the same error, and I'm pretty sure I got the name right :)\nfor example:\n.eslintrc\n```\n{\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"es6\": true\n  },\n  \"ecmaFeatures\": {\n    \"templateStrings\": true,\n    \"arrowFunctions\": true,\n    \"blockBindings\": true,\n    \"modules\": true,\n    \"forOf\": true,\n    \"jsx\": true\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"globals\": {\n},\n  \"rules\": {\n     \"react/jsx-no-duplicate-props\": 1\n   }\n}\n```\noutput ( I print errors inside a gulp task )\n[gulp] /client/src/scripts/ROOT_STATE.js ln 2, col 1  warning Definition for rule 'react/jsx-no-duplicate-props' was not found\nsame messsage for all the files.\nI use eslint like this ( although it should be irrelevant ):\n```\nconst eslint        = require('eslint');\n//    get a linter reference\nconst linter        = eslint.linter;\n// read .eslintrc\nconst eslintrc      = JSON.parse(\n  fs.readFileSync( path.resolve(__dirname, '.eslintrc') ).toString()\n);\n//  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  lint-scripts\ngulp.task('lint-scripts', () => {\nreturn gulp.src([\n    ${paths.scripts}/**/*.js,\n    ${paths.scripts}/**/*.jsx\n  ])\n  .pipe(\n    tap(file => {\n  let fileContents = file.contents.toString();\n  let messages = linter.verify(fileContents, eslintrc);\n\n  if(messages.length > 0){\n    messages\n    .map(msg => {\n      msg.filePath = file.path;\n      return msg;\n    })\n    .forEach(lintLogger);\n  }\n})\n\n);\n});\n```\n. ",
    "ide": "Would it be possible to make this option configurable ex: strict (false positives) and loose mode (false negatives)? componentDidMount is a common place to set up event handlers so some kind of lenient loose mode could be helpful.\n. Would it be possible to make this option configurable ex: strict (false positives) and loose mode (false negatives)? componentDidMount is a common place to set up event handlers so some kind of lenient loose mode could be helpful.\n. My thinking is that strict mode would use the current behavior, and loose mode would suppress the warning if this.setState is called within a function.\n. @yannickcr Thanks =)\n. Yes, that's perfect. Thank you for the pointers @yannickcr!\n. ",
    "silvenon": "Awesome, thanks so much for this!\n. Yeah, unfortunately I think this rule is prone to false-positives.\n. eslint-plugin-react naively checks just if the element is a part of an arrow expression. I'm setting up a PR\u2026\n. Updated! Sorry for being insanely late :sweat_smile:\nValid cases:\n- [<App key={0} />, <App key={1} />];\n- [1, 2, 3].map(function(x) { return <App key={x} /> });\n- [1, 2, 3].map(x => <App key={x} />);\n- [1, 2, 3].map(x => { return <App key={x} /> });\n- var App = () => <div />;\nInvalid cases:\n- [<App />];\n- [<App {...key} />];\n- [<App key={0}/>, <App />];\n- [1, 2 ,3].map(function(x) { return <App /> });\n- [1, 2 ,3].map(x => <App />);\n- [1, 2 ,3].map(x => { return <App /> });\n. Updated! Sorry for being insanely late :sweat_smile:\nValid cases:\n- [<App key={0} />, <App key={1} />];\n- [1, 2, 3].map(function(x) { return <App key={x} /> });\n- [1, 2, 3].map(x => <App key={x} />);\n- [1, 2, 3].map(x => { return <App key={x} /> });\n- var App = () => <div />;\nInvalid cases:\n- [<App />];\n- [<App {...key} />];\n- [<App key={0}/>, <App />];\n- [1, 2 ,3].map(function(x) { return <App /> });\n- [1, 2 ,3].map(x => <App />);\n- [1, 2 ,3].map(x => { return <App /> });\n. Note sure why coverage fell, it seems to have fallen in /lib/rules/jsx-pascal-case.js for some reason.\n. Note sure why coverage fell, it seems to have fallen in /lib/rules/jsx-pascal-case.js for some reason.\n. Done :smiley:\n. Done :smiley:\n. @eadz really? I don't understand why the former is allowed :confused: \nAnyway, I since changed my mind about this issue. I don't see a reason for this level of control, we already have the allowArrowFunctions option.\n. @eadz really? I don't understand why the former is allowed :confused: \nAnyway, I since changed my mind about this issue. I don't see a reason for this level of control, we already have the allowArrowFunctions option.\n. @eadz oh, I see now. Well, let's see\u2026 Is using an anonymous function directly bad? Does that create a new function on each render?\n1. If yes, this should also be an error, bind or no bind.\n2. If yes, this rule should only apply to bind, not arrow functions too.\nEither way it seems like something needs to change. I don't know how to check whether a new function is created every time if you pass an anonymous function.\n. @eadz oh, I see now. Well, let's see\u2026 Is using an anonymous function directly bad? Does that create a new function on each render?\n1. If yes, this should also be an error, bind or no bind.\n2. If yes, this rule should only apply to bind, not arrow functions too.\nEither way it seems like something needs to change. I don't know how to check whether a new function is created every time if you pass an anonymous function.\n. Also, you have to be careful with this, if you happen to use it.\n. Good idea, done!\n. You can always bypass certain rules in some way, you can do const { props } = this and now using props.foo won't check if foo is defined in propTypes.\nIf a component returns an invalid value, there's not much the plugin can do about it. These concerns are clearly separated. The rule would be just a faster way to see that you forgot to return the JSX.\n. Yes, using callbacks should justify not using stateless components.\n. @vdh I'm pretty sure they are pure by definition, maybe that wasn't comunicated well by the React docs, otherwise we would all rather use classes.\n\nIn an ideal world, most of your components would be stateless functions because in the future we\u2019ll also be able to make performance optimizations specific to these components by avoiding unnecessary checks and memory allocations. This is the recommended pattern, when possible.\n. Just double-checked about those stateless components and you guys are right, they aren't pure. My world just shattered :cry: \n. The official Flow docs never use maybe types for props and recommends using defaultProps if the prop should be optional. If you just set a prop's default value to null/undefined you will get your desired behavior.\n\nI think this issue can be closed.. Let's be patient and buy @jseminck a beer afterwards. \ud83d\ude04 . No idea, my guess is that it's worked that way forever (ever since that API was introduced).. I don't understand, what's the full code? I can't reproduce the error, this test case passes:\n```js\nfunction MyComponent(props) {\n  return {props.foo()};\n}\nMyComponent.defaultProps = {\n  foo: (() => {}),\n}\n```. The following test case works as well:\njs\nclass MyComponent extends Component {\n  render() {\n    return <div>{this.props.foo()}</div>\n  }\n}\nMyComponent.defaultProps = {\n  foo: (() => {})\n};\n(Specifying defaultProps using the static syntax works as well.)\nMaybe your lint error was caused by a more specific case?. This is indeed an issue using the latest version, eslint-plugin-react@7.5.1, but after I linked to latest master it seems to work fine. The only error I'm getting using your code is that state should be below someList, i.e. it needs to be the last instance variable. That's probably intentional because state is special.. The problem there is that there are lots of globals like Math that you probably want to use implicitly, so ESLint can't really know where to draw that line. You could use no-restricted-globals to catch specific mistakes that you often make (I use it to prohibit accidental usage of native Map and Set instead their Immutable.js counterparts).. @anshulguleria if you have an idea for a new rule, you can suggest it in the ESLint repo, maybe I could also help. Then we can continue the discussion there.. Sorry for posting here again, just one more thing. @anshulguleria I believe what you're looking for is eslint-restricted-globals, a sensible collection of globals to forbid.. Good idea, my changes wouldn't catch those cases. I'm also worried about other likely cases, this is a test case that I'm currently trying to get working as valid:\n```js\nimport React from 'react';\nimport { Children as ReactChildren } from 'react';\nconst { Children } = React;\nconst { toArray } = Children;\nReact.Children.toArray([1, 2 ,3].map(x => ));\nReactChildren.toArray([1, 2 ,3].map(x => ));\nChildren.toArray([1, 2 ,3].map(x => ));\ntoArray([1, 2 ,3].map(x => ));\n```\nI need to get used to hunting down variable/import declarations. \ud83d\ude04 . One more question, should CommonJS also work?\njs\nconst { Children } = require('react');. That was my initial thought, but charSet is not an unknown attribute, as the name of the rule implies. That said, I\u2019ll modify the PR, so you decide. \ud83d\ude09. Yeah. As much as I would like for people to write charset instead of charSet, raising an error because of that would not be symmetrical with raising an error for acceptcharset in favor of acceptCharset, because only the latter results into the correct form of the attribute \u2013 accept-charset.\nI'll hold with the changes then until we agree what they should be.. ",
    "EvHaus": "Looks like i can't reproduce this anymore either. Not sure what was causing it. Sorry for wasting your time.\n. I can't reproduce anymore either. I'll reopen if I come across again.\n. Found a very similar issue using the following code:\n```\nimport React, {Component} from 'react/addons';\nexport default class Test extends Component {\n    componentWillUpdate (nextProps, nextState) {\n        console.log(this.props.children.props.children);\n    }\nrender () {\n    return <span/>;\n}\n\n}\n```\nThis results in the following error:\n'children.props is missing in props validation for Test at line 5 col 9. Actually myignore` already has children -- which is why I think this is a bug. My rule is defined as:\nreact/prop-types: [2, {\"ignore\": [\"className\", \"children\", \"id\", \"onClick\", \"style\"]}]\nIt looks like anything that user this syntax this.props.foo.bar is being validated for foo and foo.bar now. This started in 2.6.x and was working normally in 2.5.x\n. Unfortunately no. The following code still fails:\n```\nimport React, {Component} from 'react/addons';\nexport default class Test extends Component {\n    static propTypes = {\n        test: React.PropTypes.object\n    }\nrender () {\n    console.log(this.props.test.someKey)\n    return <span/>;\n}\n\n}\n```\nGives me:\n9:32  error    'test.someKey' is missing in props validation     react/prop-types\n. Are you suggesting that I need to define all possible keys for my prop objects? That's... a bit extreme, no? I understand if the prop type is is \"shape\", but if I say it's an \"object\" then the assumption is that it's a varying object type.\n. Ok, thinking about this some more - I don't disagree.\nHowever, it's going to require PropTypes definitions to be a lot more precise. Basically PropType.object becomes useless because as soon as you use any key from that object -- the PropType validation will fail. So you have to either use PropType.shape or PropType.instanceOf.\n. I'm going to take a stab at writing this rule. Will submit a PR.\n. I've done a first pass at this here: https://github.com/yannickcr/eslint-plugin-react/pull/611 (Instructions on how to test and install are in the PR).\nStill hunting down false positives, but early feedback would be highly appreciated.\n. I've taken a stab at this in the eslint-plugin-cumul8 repo (npm install eslint-plugin-cumul8). Will test this in various codebases before submitting as a PR to eslint-plugin-react Looking to others for testing and feedback.\nDocumentation here: https://github.com/Eight-Solutions/eslint-plugin-cumul8/blob/master/docs/rules/react-require-optimization.md\n. @yannickcr Please change the second rule to require a render method which returns an element to exist. That should resolve this issue.\n. Actually, looking into this closer. You don't even need a render() method for this rule to throw a false positive. The following code also warns about a missing displayName:\n```\n// Throws false positive warning for react/display-name\nclass Test extends Something {\n    test = () => {\n}\n\n}\n```\nHowever, removing the arrow function does NOT:\n```\n// Doesn't throw false positive warning for react/display-name\nclass Test extends Something {\n    test () {\n}\n\n}\n```\n. Confirmed. All good now :) Thanks for the quick fix guys.\n. Confirmed. All good now :) Thanks for the quick fix guys.\n. +1. This is required as of 5.0.0. Abstract components were previously being correctly ignored in version 4.x.x but looks like something broke in 5.0.0\n. @yannickcr Can confirm as well. Seems all good in v5.1.1\n. @ljharb Ah, of course. Forgot about SFCs. Updated rule, added tests here: https://github.com/yannickcr/eslint-plugin-react/pull/601/commits/94fa138d138a528dc43d46b9a791a72ce0544db6\n. Actually, now that I think about it, maybe ignoring SFCs should be done behind an option flag. Since, technically, SFCs are not optimized components so they should throw an error. But at the moment, there is no way to optimize them. So I can imagine some authors might want to ban the use of SFCs for this reason.\nWhat do you think?\n. Alright, I'll leave the rule as is then. Ready to merge?\n. I found one condition where this reports a false positive:\njsx\nclass Hello extends Component {\n    static propTypes = {\n        params: PropTypes.shape({\n            id: PropTypes.string\n        })\n    }\n    render () {\n        const {params} = this.props;\n        const id = (params || {}).id;\n        return <span>{id}</span>;\n    }\n}\nNot sure yet how to get (params || {}).id to get detected properly. Any advise would be welcome. I'll keep looking into it.\nEDIT: I think trying to resolve it will be a losing battle of whack-a-mole. As such, I have added an ignoreShapeProp option to the rule to disable checking of shape proptypes.\n. Merged master into this PR to resolve conflicts. Thanks @mattdell\n. Merged master into this PR to resolve conflicts. Thanks @mattdell\n. @ljharb Rebased.\n. @ljharb Rebased.\n. @ljharb Rebase completed.\n. Looks like some of my tests are failing after merging from latest master. Investigating...\n. Ok. Fixed the conflicts and rebased again. Also added a new commit to fix a bug in the Component.js utility method. I left that as a separate commit so you can clearly see it: https://github.com/yannickcr/eslint-plugin-react/pull/611/commits/fcd9d59271fbdf2874310eb2a226adf092fa6e4a\n. @petersendidit Updated PR to use new ESLint rule format.\n. @dhruska Can you send me a copy of the code that reproduces that?\n. @lencioni Updated PR to clean up the docs as per your recommendations, fixed merge conflicts and rebased.\n. @lencioni Not sure if that's what you had in mind, but I added a commented-out test at https://github.com/yannickcr/eslint-plugin-react/pull/611/commits/f083a13d13cf04331d69e76230d319248156aa13#diff-655c668b4b1964c5be4ff486d879ef45R1980 which can be enabled once #296 is fixed.\n. @lencioni To be honest with you, fixing that bug is a bit beyond my level of understanding of how the component and proptype detection works. However, I'm happy to merge the fix in into this rule once someone solves that bug for the prop-types rule. I've subscribed to it and will keep a close eye on it once a fix is found.\n@yannickcr I've renamed the rule to no-unused-prop-types and rebased again.\n. @tristanbbq Can you please open a new issue with a code sample I can use to reproduce?\n. @tristanbbq Can you please open a new issue with a code sample I can use to reproduce?\n. This will be fixed by https://github.com/yannickcr/eslint-plugin-react/pull/792\n. I've been thinking about the best way to handle this. The only thing I can think of is to build some common conventions into the rule. ie. Any function that uses the following patterns this.props.something or props.something, or nextProps.something or prevProps.something would count towards being considered used.\nIt will prevent false positive warnings, but would also not catch certain cases where the object isn't actually the component props.\nThoughts?\n. I've been thinking about the best way to handle this. The only thing I can think of is to build some common conventions into the rule. ie. Any function that uses the following patterns this.props.something or props.something, or nextProps.something or prevProps.something would count towards being considered used.\nIt will prevent false positive warnings, but would also not catch certain cases where the object isn't actually the component props.\nThoughts?\n. Duplicate of #871. \nThe no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\n. If you set the skipShapeProps option to true, it should stop warning on all shape props. Is that not working?\n. @ljharb That's a valid point. I'll look into whether or not it makes sense to set skipShapeProps to true as a default.\n. @ljharb Just took a few minutes now to look into this but wasn't able to get far. This issue is talking about 2 things:\n\nThe code snippet @smsenesac originally posted is supposedly throwing an error when it shouldn't.\nI cannot reproduce the failure. I added a test for this here: https://github.com/EvNaverniouk/eslint-plugin-react/commit/15e2fd8448e415b1a3961bcbbe62e3e9cdb93580 but the test isn't failing for me. So I wonder if maybe this has already been fixed in another commit.\nSetting skipShapeProps to true by default.\nThis is already done. See latest master code here: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-unused-prop-types.js#L51\n\nDon't think there are any further action items on this issue. Can we close?. The no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\nDuplicate of #819. Will track further discussion of shape props there.\n. I will look into this today.\n. Duplicate of #837. \nThe no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\n. I'm unable to reproduce this on the latest 6.3.0 version. Is this still happening for you @tristanbbq?\n. The no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\nDuplicate of #819. Will track further discussion of shape props there.\n. The no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\nDuplicate of #819. Will track further discussion of shape props there.\n. Before I look into fixing this, out of curiosity, why are you using this pattern for PropType declaration? Why a separate propTypes constant? It's only used in once place.\nI worry about how deep we'll have to scan for props variable re-declarations to properly account for this. For example, you could also theoretically write this code:\nconst propTypes = {something: PropTypes.string);\nconst nestedPropTypes = propTypes;\nMyComponent.propTypes = nestedPropTypes;\nChecking for this would require making several hops across multiple variables to detect where the prop types are actually defined.\n. Fair enough. I'll see what can be done here.\n. The no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\nDuplicate of #819. Will track further discussion of shape props there.\n. The no-unused-prop-types rule does not support shape props at the moment as such detection is very difficult. If you use shape props, I recommend setting the skipShapeProps option to true on the rule.\nDuplicate of #819. Will track further discussion of shape props there.\n. In your example code, text is not used. So the error is displayed correctly. Your component uses props.nested.text but your have a PropTypes defined for props.text.\n. I'm unable to reproduce the issue using the code your provided. The rule currently supports prop checking for componentWillReceiveProps.\nCan you confirm you're running the latest version of eslint-plugin-react (6.3.0)\n. LGTM\n. Closing this for now. Consensus seems to be that it's useful. Hopefully the community and I can help fill in the missing gaps to reduce the false positives.. Nice. Would be really great if this could also support React.cloneElement, ala:\n[].map((item, i) => {\n    return React.cloneElement(someChild, {\n        key: i\n    })\n}). LGTM. We use Flow a lot so I can definitely keep a close eye on this once it gets released to see if it causes any issues, but the test coverage looks good already.. I can take care of the no-unused-prop-types rule. Will look into it early next week.. After review, looks like the no-unused-prop-types and prop-types rules are not affected by the React 15.5 changes as they don't make any assumptions about where the PropTypes object comes from. No changes needed there.. > What about custom propTypes that enforce booleans but aren't PropTypes.bool? For example, mutuallyExclusiveTrueProps from https://www.npmjs.com/package/airbnb-prop-types.\n\nCan there be a way to customize the name of custom propTypes that are booleans?\n\nGood idea. I've added a new propTypeNames configuration option.. @jseminck Indeed. Closing!. @jseminck Indeed. Closing!. I can reproduce this. Will fix.. @ljharb I was wondering about that too. However, Flow's official documentation says this change to the import is required and their codemods make this change as well (see https://github.com/facebook/flow/blob/a4df443a4a4fb5f62b86f03ee8a12a2b1432296a/website/en/docs/react/types.md).\nNot sure if we can get someone from the Flow team to chime in, but it seems totally unnecessary to me as well (and potentially troublesome when using Webpack's Tree Shaking).\n. Yeah, I can confirm that it is indeed a breaking change for the React.Component<> type. Not sure how we want to handle that on the eslint-plugin-react side given that different users might be on different versions of Flow...\n. Yeah, I'd love to test a pre-release of this. I'm sitting on hundreds of Flow-typed components :). Both no-unused-prop-types and prop-types working wonderfully on eslint-plugin-react@7.4.0-rc.0 using flow@0.54.0 for me across all my code bases. Didn't need to change a single thing. Nicely done everyone!\n@jseminck \u2764\ufe0f . Closely related to this issue I'm also seeing the following code:\n```javascript\ntype SomeType = {};\ntype SomeOtherType = {\n    a: number\n} & SomeType;\n```\nResult in the following eslint-plugin-react crash:\nCannot read property 'name' of undefined TypeError: Cannot read property 'name' of undefined\n    at propTypes.types.forEach.annotation (/Users/ev.haus/Git/web-platform/node_modules/eslint-plugin-react/lib/rules/prop-types.js:797:54)\n    at Array.forEach (native)\n    at markPropTypesAsDeclared (/Users/ev.haus/Git/web-platform/node_modules/eslint-plugin-react/lib/rules/prop-types.js:796:27)\n    at Object.ClassDeclaration (/Users/ev.haus/Git/web-platform/node_modules/eslint-plugin-react/lib/rules/prop-types.js:930:11)\n    at EventEmitter.updatedRuleInstructions.(anonymous function) (/Users/ev.haus/Git/web-platform/node_modules/eslint-plugin-react/lib/util/Components.js:666:75)\n    at emitOne (events.js:101:20)\n    at EventEmitter.emit (events.js:188:7)\n    at NodeEventGenerator.applySelector (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/util/node-event-generator.js:265:26)\n    at NodeEventGenerator.applySelectors (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/util/node-event-generator.js:294:22)\n    at NodeEventGenerator.enterNode (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/util/node-event-generator.js:308:14)\n    at CodePathAnalyzer.enterNode (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:606:23)\n    at Traverser.enter (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/linter.js:1035:32)\n    at Traverser.__execute (/Users/ev.haus/Git/web-platform/node_modules/estraverse/estraverse.js:397:31)\n    at Traverser.traverse (/Users/ev.haus/Git/web-platform/node_modules/estraverse/estraverse.js:501:28)\n    at Traverser.traverse (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/util/traverser.js:31:22)\n    at Linter.verify (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/linter.js:1032:24)\n    at processText (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/cli-engine.js:203:31)\n    at CLIEngine.executeOnText (/Users/ev.haus/Git/web-platform/node_modules/eslint/lib/cli-engine.js:668:26)\n    at lintJob (/Users/evgueni.naverniouk/.atom/packages/linter-eslint/src/worker.js:14:20)\n    at process.<anonymous> (/Users/evgueni.naverniouk/.atom/packages/linter-eslint/src/worker.js:52:22)\n    at emitTwo (events.js:111:20)\n    at process.emit (events.js:191:7)\n    at process.nextTick (internal/child_process.js:752:12)\n    at _combinedTickCallback (internal/process/next_tick.js:67:7)\n    at process._tickCallback (internal/process/next_tick.js:98:9). Closing this as a duplicate of #1869. Just curious, why not update the existing jsx-sort-props rule to sort defaultProps instead of create a separate rule? Is there a situations where you'd want proptypes sorted one way, but defaults sorted a different way?. This rule seems to be eerily similar to no-unused-prop-types. Can you help me understand what the major difference is? We might even want to add a note to the README to explain why you might use this over no-unused-prop-types.\nI get that this specifically forces exact definitions in Flow and PropType wrappers, but the underlying reason for that is to avoid unused props in a component -- is that right?. You cannot pass arrays of strings like this:\n'react/jsx-handler-names': ['warn', {\n        eventHandlerPrefix: ['_handle', 'formikProps.handle', 'someOtherThing'],\n        eventHandlerPropPrefix: ['on', 'handler', 'somethingElse']\n}\nHowever, if you want multiple values, you can pass Regex string patterns like this:\n'react/jsx-handler-names': ['warn', {\n        eventHandlerPrefix: '(_handle|formikProps.handle|someOtherThing)',\n        eventHandlerPropPrefix: '(on|handler|somethingElse)'\n}\nI think this issue can be safely closed.. Why not build this logic into the existing no-deprecated rule as opposed to creating a new dedicated rule?. To be honest with you, I don't know of good use cases for it either. I've included it only because the prop-types rule also has this option. And its documentation is exactly as this.\n. Done!\n. Does the default parser support object destructuring? I can't seem to get it to work. I keep getting: Parsing error: Unexpected token }\n. Pushed an update to include an additional test with a default parser for this.\n. Pushed an update to include an additional test with a default parser for this.\n. This is actually already done. See isPropAttributeName() function.\n@yutin1987 Can you please include some code that explains why your change is needed? nextProps should already be supported.\n. I think adding a short description of why you might want to enable this rule would be good. Something like:\n\nIt's a bad idea to use the array index since it doesn't uniquely identify your elements. In cases where the array is sorted, the index will be changed, even though the element representing that index may be the same -- resulting in unnecessary render cycles.. I would add forEach and filter in here as well. It's easy enough to support it for those rare cases where users would iterate over elements in different ways.. We should update this to return errors so we can test for it, perhaps in the event that the type isn't defined. Maybe something like this:\n\ncode: [\n   'function Hello (props: UndefinedVariable) {',\n   '    return <div>Hello {props.name.firstname}</div>;'\n   '}'\n]. Perhaps I'm misunderstanding what the scope of the changes in this PR. I was under the impression that it adds support for Flow types as valid prop assignments via variables. Your original test case covers the fact the the rule properly catches such valid Flow type assignments without error.\nWhat I'm asking for is to add a test case that when a Flow type is defined, but the Flow type is variable is unassigned. I believe this ESLint rule should still throw an error in that case.. Was copy/pasted from another rule's document. Should I remove it?. Thanks. Not all rules were using ES6, wasn't sure which version of Node we're supporting. Will update accordingly.. Oops. Good catch.. null is the default at the moment (ie. the naming checks are disabled). It didn't seem right to enforce my own preferences on all users. Do you think is makes sense to set \"(is|has)*\" as the default?. WIll remove.. I'm not opposed to replacing the RegExp entry to just prefixes, however, that makes the rule much less powerful and less customizable. Having user-supplied regexes in ESLint rules isn't uncommon (eg. http://eslint.org/docs/rules/id-match) when specifying naming conventions for things.\n. Will fix.. Will fix.. Agreed. Will set a default.. For some reason, default schema definition doesn't work for this option. Maybe because it's an array type? Specifying a default at the schema level here never returns anything from config object.. Updated. Thanks!. Fixed. Will change to use .exec() actually, since (after some research) that appears to be the most performant way to execute Regex rules. Hope that's ok.. Agreed. Will remove.. Fixed.. This function is used very heavily across many rules.\nI would not recommend adding this new argument here and instead handling the findParent logic inside the no-unused-prop-types rule directly.\n. I'm guessing that this would only happen address direct map() calls. So if you have a nested map, it would still throw a false positive right? eg.\njavascript\n'const Outer = (props) => {',\n'  let team = props.names.map(() => (',\n'      [\"anotherThing\"].map(() => {',\n'            <Inner innerOne={props.one} innerTwo={props.two} />',\n'      });',\n'    ));',\n'  return <ul>{team}</ul>;',\n'};'. I recently had a legal name change. Nothing to see here ;). It would be best not to check for the type name here in case people want to pass in a type with a different name, eg:\n```\ntype FancyPropsType = {\n   ...\n}\nclass Bar extends React.Component { }\n``. In fact, it would be great to add that as a unit test to ensure it is supported.. Is it better to have{flowVersion: '0.52.0'}be the default so theeslint-plugin-react` upgrade is less likely to break things for people and not force them to have to add this?\nOr, is it better to make 0.53.0 the default to encourage upgrades and easy adoption for new users?\nOr, should we leave as is -- where there is no default and users have to make a conscious choice which they want to pick?\nAny advice here @ljharb?. I've been using Flow since around version 0.40 (about 3-4 months) and this is the first breaking change I've encountered so far. I wouldn't say that breaking changes like this are very common.. \n. What's the reason for this change?. Nevermind. I see now that this is because of the new node_modules dir for tests.. Could we add something along the lines of:\nPlease disable the `jsx-fragments` rule or upgrade your version of React.\nI think it's always a good idea to give users an action to do to help them resolve the error/warning.. Was there a specific reason for this change? The rest of the docs use single quotes ' instead of double quotes \". Maybe we should keep things consistent?. This is already duplicated on line 60 below. I would recommend removing this.. I found this doc section a little hard to understand as a first time user of the feature. Can I recommend the following changes instead?\n```\nCustom link components\nThis rule supports the ability to use custom components for links, such as <Link /> which is popular in libraries like react-router, next.js and gatsby. To enable this, define your custom link components in the global shared settings under the linkComponents configuration area. Once configured, this rule will check those components as if they were <a /> elements.\n```. ",
    "emmenko": "Cool, thanks! :+1:\n. ",
    "andersekdahl": "Sorry for this, I noticed it in a project which allows unused arguments in .eslintrc. Can confirm that this works as expected. \n. ",
    "jonathanong": "aside: from self-closing brackets, i would always like a space before it.\nYes;\njsx\n<div />\nNo:\njsx\n<div/>\n. yes it is! thanks\n. :+1: \nI think sometimes they make sense though. background image makes sense as an inline style sometimes, so i guess there should be an option for CSS properties to allow.\nI don't think there should ever be style tags at all though. I would consider that a separate rule.\n@yannickcr I haven't contributed nor looked at this code before, but if you point me where to look ill be happy to contribute.\n. ",
    "ljharb": "This is now valid in React 16+; a rule would still be useful, but only when the version pragma is < 16.. I'm going to close this; in general, component detection needs some work, but there's been many updates since this was filed.\nNew issues with concrete and actionable improvements are welcome!. Yes, if you want a rule to forbid invalid html props based on the element type, we\u2019d need a different rule.. Getters are bad for perf and maintainability.\n. Getters and setters are an ES5 feature, and ES6 doesn't change their performance profile at all. https://bugzilla.mozilla.org/show_bug.cgi?id=626021 https://bugs.chromium.org/p/v8/issues/detail?id=1239 are two examples I found with brief googling. The maintainability part may be subjective but it's a majority best practice in the JS community to avoid getters and setters, and always has been.\n. That's definitely what I'd recommend, at least until the class properties proposal lands (when you can do static propTypes = { \u2026 }\n. That's definitely what I'd recommend, at least until the class properties proposal lands (when you can do static propTypes = { \u2026 }\n. @joshuapinter you\u2019d have to do const propTypes = { \u2026 } at the top, and assign to the component at the bottom. @yannickcr it's possible the rule has a bug here ^ if a component has instance methods, or instance properties attached in the constructor, it shouldn't be an SFC, because it has state - this is state.\n. That's correct behavior - you should use a shape, or objectOf, on baz.\n. Gotcha, can you file a new issue for that?\n. Gotcha, can you file a new issue for that?\n. All +1's should now be in the form of reactions on the first post - I'll clean up the ones here, and any future ones. Thanks for everyone's interest!\n. @prithsharma please file a new issue for that, and we can take a look. (although then your component doesn't have an explicit name; it's best to use normal functions, not arrows, for SFCs). Exactly right; but I'm also talking about the function's name property, which is useful for debugging, and more reliable when explicit.. @armenzg that seems like a bug. Can you file that as a new issue?. @armenzg that seems like a bug. Can you file that as a new issue?. There\u2019s already a no-typos rule that should handle that.. @ViggoV if so, please file a new issue with as much code and eslint output as possible.. I think that handling special cases of \"not React components\" is out of scope of this plugin, and \"always providing propTypes\" is a strong best practice.. I think that handling special cases of \"not React components\" is out of scope of this plugin, and \"always providing propTypes\" is a strong best practice.. Absolutely, this should be separately configurable for every lifecycle method (defaulting to \"on\" for all) as well as separately configurable to allow an optional list of globals per lifecycle method.. @larrybotha can you provide the code that's being warned on, and can you try it in the latest version of the plugin (v4.3.0)?\n. However, #556 and #216 are related, and I could definitely see the value in a rule that required all props and state to always be destructured at the top of component methods.\n. @b0gok A separate rule, that ideally shares code. A rule called \"sort prop types\" wouldn't make sense applied to default props - so maybe jsx-sort-default-props. @b0gok A separate rule, that ideally shares code. A rule called \"sort prop types\" wouldn't make sense applied to default props - so maybe jsx-sort-default-props. Fixed in #1483.. @kevinSuttle because that could be done in a separate function, there\u2019s no way to statically verify that.. It\u2019s impossible/impractical for an eslint plugin to know what things from separate files do.\nConsider as well a.map(b) and friends.. I think yielding a component in a generator is a very strange edge case, but it should be handled.. I think yielding a component in a generator is a very strange edge case, but it should be handled.. Would love to see this handled, since it's the primary pattern people seem to use for functional stateless components.\n. Any progress on this?\n. Any progress on this?\n. Ideally either the rule should require inline propTypes, or should be able to determine what they are when assigned via a variable.\n. @yannickcr a silent failure is the worst possible way to handle it imo - if the rule can't handle it, then can it please raise an error, saying propTypes are unable to be validated?\nIf the rule can't handle this case, then it's useless, and I'd rather disable it completely than have it give false confidence :-/\n(I recognize that if the object is imported or something it'd be difficult, but in this use case it's an object literal elsewhere in the file, so i'd think the info would be in the AST that esprima generates)\n. @yannickcr a silent failure is the worst possible way to handle it imo - if the rule can't handle it, then can it please raise an error, saying propTypes are unable to be validated?\nIf the rule can't handle this case, then it's useless, and I'd rather disable it completely than have it give false confidence :-/\n(I recognize that if the object is imported or something it'd be difficult, but in this use case it's an object literal elsewhere in the file, so i'd think the info would be in the AST that esprima generates)\n. Awesome! Our use case at airbnb is just a straight object literal, that's referenced higher in the file, so hopefully that's achievable :-)\nFor me, a linter is a gate - i consider a pattern the linter doesn't understand to be forbidden, until the linter can be adapted to handle it (by allowing it or recognizing it). An option to enable this behavior would be great too!\n. Awesome! Our use case at airbnb is just a straight object literal, that's referenced higher in the file, so hopefully that's achievable :-)\nFor me, a linter is a gate - i consider a pattern the linter doesn't understand to be forbidden, until the linter can be adapted to handle it (by allowing it or recognizing it). An option to enable this behavior would be great too!\n. Thanks, this is excellent! Please let me know when it's released :-D\n. Thanks, this is excellent! Please let me know when it's released :-D\n. Looks like this was out in 3.13.0 2 days ago. Thanks!\n. @silvenon yes, creating any function inside render, including an arrow, is bad, because it creates a new one on each render.\nEssentially, what's needed is a rule for \"do not create a new function in a function that returns jsx\".\n. @eadz yes, that is true. and in this case, i'd say that doesn't belong as a stateless component, since it has state - you're just hiding it inside a prop.\n. @eadz which number you're passing to selectTime. I'd recommend maybe something like:\n```\nconst SelectTime = ({ selectTime, children }) => (\n  \n    {children}\n  \n);\nclass SelectTimeDisplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selectTime12 = this.selectTime.bind(this, 12);\n    this.selectTime24 = this.selectTime.bind(this, 24);\n  }\nrender() {\n    return (\n      \n\n12 Hour Display\n\n\n24 Hour Display\n\n\n    );\n  }\n}\n``\n. Yes, and in these cases we've concluded that we can't use them.\n. @vdh yes.\n. @giacomorebonato if the function does not depend onprop, that's absolutely where it should be defined (but above the component, if you follow Airbnb'sno-use-before-define` rule)\n. @davegri the thoughts remain the same - is there a specific question you have?\nBasically, using functions created in the render path as a prop on a non-DOM component prevents that component from being able to avoid rerendering - that's really the slow part. There's no speed lost by creating an arrow function every render to pass as a callback to a DOM element, for sure.. @jakemmarsh altho it\u2019s been awhile, are you still interested in merging this?. I'd think that only the HOC itself would be exported, and so this option would work well with HOCs?\n. Another alternative, if you want a reliable function name, would be to simply not use arrow functions - a normal named function will ensure you always have a name.\n. @travi only if you've enabled function name mangling in uglify (or whatever tool you're using) - which you shouldn't do.. Increasing page weight and adding redundant code just to work around an unwise default in uglify is a really poor solution :-/. In Airbnb's case, we want the camelcase component name to match the camelcase file name - I'd want this to be enforceable too, regardless of the default.\nHowever, this seems like a generic rule: that the name of the default export of a file matches the filename - either camelcase or snake_case - rather than a React-specific rule.\n. I'm going to delete these 4 +1 comments, and any further ones - please follow GitHub etiquette and express that emotion with a reaction on the original post. Thanks!\n. I'm going to delete these 4 +1 comments, and any further ones - please follow GitHub etiquette and express that emotion with a reaction on the original post. Thanks!\n. @ndreckshage eslint-plugin-react is a peer dependency of eslint-config-airbnb - npm 2 will install it automatically, but npm 3 will just give you a warning that you need to install it manually.\n. @gasi I'd say because case sensitive sorting is the default in most computer systems, and i'd be very surprised to find B sorted before a.\n. this seems totally reasonable - i also require either all props + component on one line, or, never more than one thing on the same line.\n. :+1: \n. :+1: \n. @yannickcr this assumes one is always using Babel to compile arrow functions, which is not necessarily the case.\n. @yannickcr this assumes one is always using Babel to compile arrow functions, which is not necessarily the case.\n. @janmarek the issue is that .bind is slow, and creating a new one on every render is going to be just as slow with HTML elements as with anything else.\n. Why are you using bind instead of an arrow function though?\n. @mindjuice onClick={e => this.handleClick(index, group, e)}\n. @janmarek \"a new function\" isn't the problem, Function.prototype.bind is the problem. That is what's slow.\n. @jasonkuhrt if you try with the latest version of this plugin, is this still an issue? I'm happy to reopen if so.. Awesome! :+1: \n. Awesome! :+1: \n. Those don't exist yet. However, it should once they do :-)\n. Those don't exist yet. However, it should once they do :-)\n. (\uff89\u25d5\u30ee\u25d5)\uff89:\u30fb\uff9f\u2727 awesome!\n. (\uff89\u25d5\u30ee\u25d5)\uff89:\u30fb\uff9f\u2727 awesome!\n. @yannickcr yay! version bump soon? :-D\n. @yannickcr yay! version bump soon? :-D\n. v2.0.0 is now released - time to get that out ASAP :-D\n. fwiw, the stack trace points to https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/wrap-multilines.js#L23 - which suggests that context doesn't have a getSourceCode function.\n. yay\n. For one, React needs to be in scope for jsx to work, and you aren't requiring React in any of those files.\n. @landed1 See http://eslint.org/docs/user-guide/configuring. you usually only need .eslintrc, at the root of your project.\n. I think ecmaVersion does need to be 6 or higher, but sourceType module probably sets that.. @xgqfrms-GitHub That's really related to eslint core, and not eslint-plugin-react, so I'm not sure why you posted that here.. Your note doesn't explain how the problem was fixed - it just provides an eslintrc and a warning that can't appear if that eslintrc is used, that core eslint's docs would fix, and that has nothing to do whatsoever with this repo.. I\u2019m not sure, but that\u2019s an eslint issue, not an issue with this plugin.. See https://github.com/facebook/react/issues/1833#issuecomment-182539474 - propTypes aren't going anywhere.\n. Requiring babel-eslint means it has to be a peer dependency, so that would add some burden on everyone wishing to use the plugin.\nHowever, if we want rules that support flow types, it's possible we might need to require that parser.\n. I think what it wants might be more like:\njs\nconst foo = bar\n  ? (<p>\n        {'Bar is true!'}\n    </p>)\n  : (<p>\n        {'Bar is false!'}\n    </p>);\n. It would also be helpful to provide a few examples that only violate one rule each - so we can see each individual modification you'd be interested in.\n. @straku my expectation would be a collection of differing options for each rule, that put together give you the style you like.\n. @fab1an please file a new issue.. Perhaps a v4.0.1 soon? :-)\n. @mvolkmann in \"rules\" in .eslintrc, have jsx-uses-react, jsx-uses-vars and react-in-jsx-scope all set to 2\n. @stoplion how are you running eslint? Typically this happens when you're running eslint on the command line or in an editor, and it's running the global eslint instead of a local one. You'll want to npm uninstall -g eslint just to be sure.\n. I've seen this with <this.state.Handler /> as well\n. Absolutely you do - the same way you do with a \"class\" (using only standardized features):\n``` js\nfunction Foo(props) {\n}\nFoo.propTypes = {};\nclass Bar extends React.Component {\n}\nBar.propTypes = {};\n```\nEverything that takes props and produces jsx should have propTypes.\n. It definitely shouldn't be because I'm pretty sure that doesn't work. With React.createClass, you need to include propTypes in the actual object passed to React.createClass.\n. That's entirely undocumented and discouraged (since createClass is deprecated anyways) - I'm not sure it's a good thing to support.\n. @markwain here is my understanding: when doing DOM diffing to decide if components need to update, function props are compared with ===. If a function that's passed as a prop is created in the render path, then each time it renders, it will be considered different, and everything will need to update, which could be a huge performance hit when nothing else has changed.\nThe \"lexical environment\" of a function stops at its containing function, so in fact a function created inside render is always recreated every time render calls - without exception.\n. @markwain in both of those cases, a new function is indeed created. Both cases should be avoided.\n. @sashafklein yes, you are correct - a stateless functional component can't have any functions passed as props in its render path unless they're passed through untouched from their own props. The proper thing to do is your class-based example (including the autobind)\n. @markwain it warns about bind and arrows (which is an implicit bind) - i agree tho perhaps it makes more sense to create a new rule jsx-no-new-function-props-in-render that subsumes this rule, and includes creation of any functions in the render path.\n. @mjomble .bind on render is very bad for performance. creating new functions in render is negligibly bad for performance.\n. @langri-sha the same advice applies to SFCs. If you need a function, you're best served using a class-based component and a constructor-bound instance method.. @langri-sha I agree in your case, that the only way the SFC will be rerendered is if id or onClick changes, and in a class component it'd be identically efficient - so in your case, an SFC is totally fine. However, it always depends on the exact component implementation, so as a general rule, it's better to avoid creating functions inside the render path.. Similarly, I've noticed that const foo = this.whatever.bind(this); and then prop={foo} doesn't seem to warn either.\n. @iilei yes it is - no functions should be created in the entire render path and passed as props, which is what this rule is attempting to prevent.\n. I think this is basically impossible for a linter - it would have to dynamically evaluate the utils/form file in order to know what the prop types are.\n. @kumar303 the same issues would happen with imported Flow type objects, because linters can not follow imports.\n. @kumar303 the same issues would happen with imported Flow type objects, because linters can not follow imports.\n. I'd love to review a PR for it. It's not a false negative, it's a correct error - but yes indeed, this proposal would stop warning there.\n. @amannn ah sorry, i misread. yeah, in that case it's our SFC detection, since the function returns jsx and isn't a callback, it looks like an SFC.\n. +1, this should parallel http://eslint.org/docs/rules/no-unused-expressions and probably be called no-unused-jsx-expressions\n. I still think it would be useful on its own.\n. @Kerumen i think it's much nicer. Named functions can be easier to read, because their names convey meaning - and arrow functions don't have explicit names. This is also incredibly important for debugging.. @aprilmintacpineda the function being anonymous or named is irrelevant; the only thing that matters is that the identifier name used in JSX to refer to the element starts with a capital letter.\nPrior to React 16, any function that returned a node (null, or a React Element) was technically a component - now, a component can also return an array, a string, or a number.. renderItem should be a component - it should be an SFC, whether it's exported or not.. yes, because \u201caccessor\u201d is a function that returns jsx.. Looks like #1533 fixed this.. I strongly dislike this convention, as _ is used usually to indicate \"privacy\" and not \"user methods\". Since JS does not have privacy, this convention often misleads people into thinking they don't have to test _-prefixed things, or that they can break _-prefixed things without a major version bump.\nIf this rule is to be included, could it please have a configurable prefix?? Ideally, even a required prefix so that it doesn't default to _ and thus implicitly endorse its use.\n. @anthonator that's exactly the best (and identical) solution (you can delete your useless constructor tho)\n. The implicit coercion would be in the component code itself, where it expects a boolean but sometimes gets undefined.\n. I think it's critical that it not break on code that has flow syntax, at the very least, but I'm not sure how critical it is that the initial PR support flow. It'd probably be ideal to include it at the outset, though.\n. No, it's not perfectly fine - children needs a defaultProp too. It serves as documentation, and ensures that the author didn't make a mistake.\nSeparately, having a className prop is not a great idea at all anyways: https://brigade.engineering/don-t-pass-css-classes-between-components-e9f7ab192785 but if you have it, you need the defaultProp there too.\nYou're free not to use the rule, of course, if you don't like the rigor it provides.. If you'd like to open a separate issue requesting that feature, we can discuss it.\nThe benefit of having even an explicit undefined over an implicit one is the same as the universal \"explicit > implicit\" - developers working on that component can know, with certainty, what the value of the prop is.\n(The className argument is not bogus; and in fact when developing you should assume that nobody knows what you're doing - always err on the side of safety). I'd think this is jsx-string-literals-in-props or something - I don't think we'd want this rule to legislate text used outside of props.\n. This is something that can be done at runtime, but at compile time would require parsing the module dependency graph, and evaluating the component module.\nIn other words, this is what PropTypes already do at runtime, and isn't likely to be something that is even possible to statically lint for.\nIn our tests, we override console.warn and console.error so that they throw, and voila, PropType warnings fail tests.\n. (note that arrow functions do not create the same performance issues as .bind)\n. @feugy That's why the best practice is to, in the constructor, do this.foo = this.foo.bind(this) or this.foo = ::this.foo, rather than binding in the render path.\n. It would be super ideal if one of these approaches made it in ASAP. I'd love to include it in the next release of the eslint plugin, which will be a semver-major anyways. (@yannickcr)\n. @jseminck in the future, please rebase and force push instead of closing and creating new PRs - it reduces clutter for maintainers.\n. What's the reasoning for requiring this? The ordering of props matters when using spread, because for example you might want an explicit prop overridden by an object only when the colliding prop exists in the object (when using the spread last).\n. @richard-lopes if you simply omit the method in your base class definition, you'll get an exception anyways. Why do you find you need this Java-like pattern in JS?\n. To answer your original question, I think if you preserve this pattern, then the proper response is to use inline eslint comments to disable the rule in your base classes.\n. @MoOx whether you surround the <h1 /> in parens or not (as other rules/guides require), semantically it's a nested expression, and as such, it should be indented.\n. OK so, jsx-indent handles indentation for everything inside JSX, which includes this JS - namely because the normal indent rule won't handle it.\nI agree with your \"condition1\" and \"condition2\" analogy - but that's not the same thing. Imagine that instead of \"condition2\", you had a multiline array:\n``` js\n// bad\n{\n  condition1 && [\n  1,\n  2,\n  ]\n}\n// good\n{\n  condition1 && [\n    1,\n    2,\n  ]\n}\n```\nThe reason this is the right analogy is because every JSX expression has implicit parens around them - the fact that they're optional to type, like semicolons, doesn't mean they aren't always semantically present (like semicolons). In other words, your original example, with parens added:\n``` js\n// bad\n        {\n          head.title && (\n          \n            { head.title }\n          \n          )\n        }\n// good\n        {\n          head.title && (\n            \n              { head.title }\n            \n          )\n        }\n```\n. @MoOx I agree that with parens, either of the two styles would be appropriate:\n``` jsx\n{\n  foo &&\n  (\n    bar\n  )\n}\n{\n  foo && (\n    \n      bar\n    \n  )\n}\n```\njsx\n// your preferred style without parens\n{\n  foo &&\n  <h1>\n    bar\n  </h1>\n}\nWithout parens, I think your preferred style (the latter) is uncommon and unidiomatic, but does make subjective sense - only while omitting the parens.\nI don't mind adding an option for this indentation, but I'd want it to only allow it when parens around the jsx element are omitted.\nThoughts?\n. Conditionals are different than jsx { } - so while I think eslint's rule should cover it with indent, I don't think that's the right analogy.\n. I think you've established they're not parallel :-) However I think that's a gap in indent, and it's an appropriate thing for jsx-indent to be enforcing.\n. @billyjanitsch do you mind filing a new issue so that it can be more easily addressed?. The tests look good (although the error messages could be more helpful/tailored to the error condition) - I'm not up to the task of reviewing the AST stuff.\n. In that scenario, I'd assume the rule would indeed ignore it, for precisely the reason you suggest. Specifically, any inline function created in JSX props, or, as a JSX child (although it's super weird to pass a function as a child), should not be checked for propTypes.\n. This appears to be duplicated by #550, and is fixed in https://github.com/yannickcr/eslint-plugin-react/commit/d9d7963838ff58499617af09e96f5302dda492ee\n. This is a duplicate of #550 and is fixed in latest master.\n. Sounds like this is fixed - I'll close this now. Please reopen if there's further issues.\n. Sadly, there's no cleaner way to run code in the browser that doesn't run when server-rendering (since componentWillMount runs on the server)\n. @jpollard-cs we just disable the rule in situations like this.\n. Any reason you haven't made those two into SFCs, and returned them via jsx?\nThis kind of seems like a special case you would just disable with an inline eslint comment.\n. You don't have to put them in separate files - but imo simple markup is when it makes the most sense :-)\n. Invoking SFCs directly comes with caveats; in particular, contextTypes and defaultProps won't work as you expect.\nIt's not verbosity, it's the minimum required explicit declaration. If they think propTypes aren't required, then clearly they don't think it's worth being in a component, and they should inline everything.. @mjhm i completely agree - which is why i think SFCs should always have propTypes, no exceptions.. Thanks! Could you please add a test that would have caught this bug, prior to your fix?\n. Does this constitute a breaking change?\n. Actually it seems like not, because it's all internal.\nLGTM.\n. @koistya v10.0 of eslint-config-airbnb also requires this.\n. Linters generally don't look at the contents of other files. Since render is just a stateless function, why not render() { return <Render />; }?\n. @yamalight right but still, that function is an SFC. why not just use it inline in jsx as a component?\n. (Also, the whole point of a react component is that logic and layout for the same component aren't separated)\n. Instance properties are not yet standard - and doing this (instead of render() {) is actually much slower, and I think is something that should be discouraged.\n. @billyjanitsch only in React.createClass, not in class-based components.\n. @yannickcr this change is breaking something in eslint-config-airbnb\nsh\nCannot read property 'name' of undefined\nTypeError: Cannot read property 'name' of undefined\n    at getPropertyName ($PROJECT/node_modules/eslint-plugin-react/lib/rules/require-render-return.js:54:20)\n    at Object.ArrowFunctionExpression ($PROJECT/node_modules/eslint-plugin-react/lib/rules/require-render-return.js:93:40)\n    at EventEmitter.updatedRuleInstructions.(anonymous function) ($PROJECT/node_modules/eslint-plugin-react/lib/util/Components.js:457:75)\n    at emitOne (events.js:101:20)\n    at EventEmitter.emit (events.js:188:7)\n    at NodeEventGenerator.enterNode ($PROJECT/node_modules/eslint/lib/util/node-event-generator.js:40:22)\n    at CodePathAnalyzer.enterNode ($PROJECT/node_modules/eslint/lib/code-path-analysis/code-path-analynpm ERR! Test failed.  See above for more details.\n. I'm afraid I don't - it doesn't tell me which.\n. fwiw I'm not using any proposed ES syntax.\n. Would you please merge #566, #568, #569, #570, all into the same PR? There's no need to even have these be separate commits.\n. @coryhouse for future reference, even in that scenario you can continue editing files, in your fork, on the same branch, and it will add commits to the existing PR.\nI'll manually squash these.\n. Closed via https://github.com/yannickcr/eslint-plugin-react/commit/da6b3ce5b6eaed82350aee09a9a4b7c66322f523\n. In your example, the propTypes aren't referenced anywhere in the function. Is that reflective of your actual code?\n. Closed via https://github.com/yannickcr/eslint-plugin-react/commit/da6b3ce5b6eaed82350aee09a9a4b7c66322f523\n. Closed via https://github.com/yannickcr/eslint-plugin-react/commit/da6b3ce5b6eaed82350aee09a9a4b7c66322f523\n. Closed via https://github.com/yannickcr/eslint-plugin-react/commit/da6b3ce5b6eaed82350aee09a9a4b7c66322f523\n. @mik01aj yes, I think a separate issue is better\n. Seems like a bug to me. That should be <div />.\n. That doesn't make much sense to me - but if it's documented, then it's not a bug.\nHowever, I'd love to see an option added to this rule that requires self-closing tags for every kind of tag, including HTML tags. @yannickcr?\n. Airbnb's React styleguide requires every empty element to be self-closed.\nAlternatively, we could add an option in a minor version, and then flip the default behavior later, in a major?\n. jsx isn\u2019t quite html.. lol, React generates proper HTML, that's not something anyone needs to worry about :-). I like both of these ideas. \"exceptions\" would be useful in a general case.\n. This seems like an extension of the current rule to me.\n. @dirkroorda A component wrapper is itself an SFC component.\n1510 is for tracking support of React 16 fragments.. @dirkroorda the wrapper addProp above is a function that returns an SFC - an SFC factory.. I\u2019d argue that\u2019s not breaking your tests, it\u2019s improving them - by forcing you to split your tests up so that the new component has its own tests.\nIn other words, shallow rendering means each component primarily has tests that test what it renders, and they delegate testing responsibility for those things to their own tests.. For that, enzyme has .dive(). Linters don't have the context of other files - they're meant to do static analysis, not simulate runtime execution by traversing the dependency graph. I agree it would be awesome, but I don't think it's practically possible.\n. This is similar to #226 but slightly different in that it's separately warning on missing required props. I'll leave both open, but I think both could be handled by one rule with an option to restrict enforcement to missing required props.\n. This should probably only apply in React 0.14 and higher - and should apply to React.render in 0.13\n. I believe this is because the item propType is a function, and functions have a name property. @yannickcr, could this be the cause of the bug?\n. These are not false positives. A class-based component that has nothing but a render method should be an SFC instead.\n. @MichalZalecki i'm going to close this, but will be happy to reopen if further clarification is needed\n. Hmm, you're right. I think the documentation is wrong then.\n. @MichalZalecki ah, i think i get the difference - in React 15, SFCs can return null. So, that example should only not be a warning in React 0.13 or 0.14.\n. https://github.com/yannickcr/eslint-plugin-react/issues/564#issuecomment-218013994\n. See http://eslint.org/docs/user-guide/configuring for help configuring eslint.\n. (nit: async/await is not in ES7, it's stage 3 and just a \"future ES proposal\")\n. (nit: async/await is not in ES7, it's stage 3 and just a \"future ES proposal\")\n. A function that returns jsx (ie, that generates a React.createElement) is in fact a stateless functional component - so the rule would expect it to have a display name, propTypes, etc.\nYou're also correct that any solution to #512 would also work here. However, for now I'd recommend just disabling the rule on that line/file.\n. I agree this is a duplicate of #512.\n. @sturmenta neither of those is a named function:\njs\nfunction wrapWithToastProvider(Comp) {\n  return function WrappedWithToast(props) {\n    return (\n        <ToastProvider>\n            <Comp {...props} />\n        </ToastProvider>\n    );\n  };\n}. I'd expect static fields and static methods to both be the last items in the class body, after everything instance-related is done - although I agree that instance fields could belong above the constructor.\n. There's actually a difference between a class method and a function-valued property - handleClick = () => {} is not an instance method, it's an instance property that has a function on it.\n. The difference is that class methods are non-enumerable (properties are enumerable) and they have a [[HomeObject]], which means they're eligible to use super.\n. @ktaras thanks, could you file that as a separate issue?. @ktaras thanks, could you file that as a separate issue?. Just to be safe, could we also add tests with the options object omitted?\n. LGTM but i'll let @yannickcr do the merging since i'm pretty weak on parser code\n. Thanks! Can you add some tests that ensure that SFCs (both normal function and arrow function ones) do not warn with this rule?\n. I think throwing an error on all SFCs, especially when other rules exist to require SFCs whenever possible, is heavy handed enough that it would need to be defaulted off, or omitted entirely.\nSFCs don't need optimization, that's the point.\n. LGTM, but @yannickcr should take a look just to be sure.\nWhat about a shouldComponentUpdate that's the default, i.e., return true?\n. 'Alternative' seems like a really bad option name - it's not descriptive at all, and it precludes other alternatives. @yannickcr, before releasing this, can we improve the option name?\n. PR incoming.\n. PR incoming.\n. PR: https://github.com/yannickcr/eslint-plugin-react/pull/623\n. PR: https://github.com/yannickcr/eslint-plugin-react/pull/623\n. Can you add some non-spread props into your examples, so they can be compared?\nAirbnb's style guide requires that the spaces be omitted for all props, including spread props. Are you proposing making an exception when it's a spread?\n. @casesandberg but specifically - do you want the spacing around spread but not around non-spread props?\n. @casesandberg ok so doesn't jsx-curly-spacing set to \"always\" do what you want already?\n. See https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#always\n. Ahhh ok so it's a bug - sorry, that wasn't clear :-)\n. What does npm ls say? I suspect it will tell you you need v5.1.1 of eslint-plugin-react\n. @Gattermeier please reopen if that doesn't fix your problem.\n. @alayii what does npm ls say? Are you running a local or global eslint?\n. Ah, gotcha. Thanks for clarifying.\n. @EvNaverniouk it'd be nice if you could rebase master instead, so there's no merge commits (and to squash all the \"wip\" commits)\n. @EvNaverniouk it'd be nice if you could rebase master instead, so there's no merge commits (and to squash all the \"wip\" commits)\n. @EvNaverniouk would you mind rebasing this?\n. ping @yannickcr :-)\n. What about false positives where the literal JS comment text is what's desired?\n. @benvinegar want to add documentation for the rule, and include that info in it explicitly? :-D\n. No reason we couldn't change that as part of the next major bump.\n. The 2nd and 3rd lines of the ternary should be indented 2 characters in, since they're not the start of a statement.\n. The examples you've mentioned are exactly how it should be working. Is it working differently?\n. @stefanbuck thanks for the repro repo! It definitely looks like a bug.\n. This is a bug fix, I don't think it should be an option - I think if the test fixtures are wrong, they are what should be fixed. I'll let @yannickcr comment on the implementation.\n. That just means that too many tests were wrong before. When the changes are just \"how many errors\" and not \"it wasn't an error and now it is\", that's not consequential.\n. @stefanbuck I've rebased your PR branch, but there's still some test failures, and I'm unable to push to it. Can you check the \"allow edits\" checkbox on the right hand side of the PR? After that, you can check out my changes and iterate from there.. @stefanbuck I've rebased your PR branch, but there's still some test failures, and I'm unable to push to it. Can you check the \"allow edits\" checkbox on the right hand side of the PR? After that, you can check out my changes and iterate from there.. @stefanbuck thanks; updated. please delete your local branch, fetch, and re-check out the latest changes, and let's see if we can get this ready to land :-). @stefanbuck thanks; updated. please delete your local branch, fetch, and re-check out the latest changes, and let's see if we can get this ready to land :-). Why is it a false positive? SideMenu.Item is a component, and it needs propTypes.\n. aha, thanks for clarifying :-) \n. aha, thanks for clarifying :-) \n. When it's in the same file, this absolutely should work imo.\n. When it's in the same file, this absolutely should work imo.\n. @yannickcr k, this should be gtg :-) thoughts?\n. @yannickcr k, this should be gtg :-) thoughts?\n. ping!\n. Yay, thanks!\nAny idea when the next release will be? I'm waiting on it to release the next eslint-config-airbnb :-)\n. What version of eslint and eslint-plugin-react are you using?\n. What version of eslint and eslint-plugin-react are you using?\n. jsx\n{condition ? (\n  <div>\n    <div> something </div>\n  </div>\n) : (\n  <div>\n    <div> something </div>\n  </div>\n)}\nor\njsx\n{condition\n  ? (\n    <div>\n      <div> something </div>\n    </div>\n  )\n  : (\n    <div>\n      <div> something </div>\n    </div>\n  )\n}\n?\n. Right, I'm suggesting two forms that should satisfy the rule.\nIf those work, and your example doesn't, then it seems like an issue when parens are omitted.\n. To clarify, I think it should be a supported use case, but I don't think it's a good style :-). To clarify, I think it should be a supported use case, but I don't think it's a good style :-). I think that the default should be identical when parens are omitted or not - iow, delete the parens out of https://github.com/yannickcr/eslint-plugin-react/issues/625#issuecomment-253309000 for the style without them.\nThe more compact style requested here should be an option (not the default). It should work with ...args also.\n. It should work with ...args also.\n. @OliverJAsh in your example, super() will set this.props for you - React.Component does not use any of the constructor arguments, to handle this case.. @OliverJAsh in your example, super() will set this.props for you - React.Component does not use any of the constructor arguments, to handle this case.. interesting, fair enough.. In that case, the rule should probably enforce props, context or ...args. @eladcandroid what's your .eslintrc look like? it looks like you're not enabling ES6 parsing (ES5 is eslint's default)\n. @eladcandroid what's your .eslintrc look like? it looks like you're not enabling ES6 parsing (ES5 is eslint's default)\n. @didaquis that\u2019s also expected; class properties aren\u2019t in the language yet, so eslint doesn\u2019t parse them. You need babel-eslint.\nClosing, since both of these questions are answered.. Most rules in general don't have autofixers, so that's not a surprise.\nThis seems like it might be a bug with components referenced off an object (ie, with a dot).\n. Most rules in general don't have autofixers, so that's not a surprise.\nThis seems like it might be a bug with components referenced off an object (ie, with a dot).\n. Ah, good point.\n@rrandom can you try the same example but use English (specifically, ASCII) text as the element contents? I'm wondering if it's a unicode code point issue (versus code units)\n. Ah, good point.\n@rrandom can you try the same example but use English (specifically, ASCII) text as the element contents? I'm wondering if it's a unicode code point issue (versus code units)\n. you'd want () => this.onClick() rather than .bind.\n. @forresto yes, but .bind is far worse than creating an arrow function. Your approach is fine too (although it optimizes better if you do this.onClick = this.onClick.bind(this), because the overall shape of the instance doesn't change)\n. @forresto yes, but .bind is far worse than creating an arrow function. Your approach is fine too (although it optimizes better if you do this.onClick = this.onClick.bind(this), because the overall shape of the instance doesn't change)\n. That should actually be erroring out on the jsx-no-bind rule :-p but this should still be fixed.\n. That should actually be erroring out on the jsx-no-bind rule :-p but this should still be fixed.\n. There's no way for a linter to know that your superclass extends React.Component - I believe you can use jsdoc to annotate it with something like /* @extends React.Component */?\nHowever, I'd recommend using composition instead of inheritance to share behavior, and encourage requireing intl where you need it rather than attaching it to every component.\n. It should work. If it's not, please file a new issue with a test case.. It should work. If it's not, please file a new issue with a test case.. I think I like this change - it's a bit noisier but also more explicit.\nI'll let @yannickcr merge it, but it'd be good if @appsforartists wouldn't mind rebasing down to a single commit first? :-)\n. It's what the \"rebase and merge\" button should be for :-p blindly squashing commits on merge messes with the changelog :-( but no worries if you're editing in the UI.\n. Awesome, love the code sharing\n. This seems like it adds a little value when the prop value is solely the literal undefined - but it wouldn't be able to catch any variables whose contents were undefined, and the conditional case seems like a useful way to conditionally specify a prop.\n. I don't see how it conflicts with #611 - that's checking for unused propTypes within the same component file, at the definition site, while this one checks for undefined props at the rendering site.\nWe already have a rule that checks for literal true, so I think it's helpful to have one for literal undefined as well.\n. LGTM\n. @evcohen this seems like a bad merge - can you force push to the branch and update the PR in-place?\n. @evcohen I think it needs a rebase, NOT a merge, so as to reduce the 56 commits included in this PR to a more manageable number\n. imo warnings aren't particularly useful - they just train people to ignore console output. Ideally things are either off or errors.\n. When you say \"render JS strings\", do you mean, put an actual script block in the page, or show the literal text <script>blah</script>?\nIs it that common to use \"not jsx\" inside React components?\n. The markdown/template approach is a good point, and this is one of our most common use cases for setting innerHTML. I can't believe that adding an actual script block to the page inside a React component is a common use case, and either way, I can't conceive of how it's not a horrific one.\nAt Airbnb we have a component that manually escapes safe HTML tags so that we don't need to set inner HTML, but so content with HTML can be used without exposing us to XSS. This seems like the usual solution for the template solution too (eg https://github.com/rexxars/react-markdown and similar approaches).\nI don't have a strong opinion on whether it should be included in the recommended config or not - but I'm only partially convinced that it's a good thing to allow, primarily by the templating use case.\n. Recommended rules are supposed to cover the common use cases, not the uncommon ones. It's completely expected and acceptable that if you deviate from a linter rule for a good reason, you use an inline eslint comment to override it. The criteria for being a \"recommended rule\" is not \"it's sometimes useful\", it's \"in the majority case, having the rule is more helpful than not\".\nCertainly the name \"dangerous\" makes it unlikely you'd use it by mistake, unless of course you copied and pasted a code example from somewhere on the internet - in which case the linter catching it, and requiring you to explicitly indicate that you did, in fact, intend to do that via an eslint comment - is a good thing.\nTo restate: \"there's a use case\" is utterly irrelevant when discussing whether something belongs in a recommended linter config or a style guide. The only thing that matters is \"in the majority case, having the rule is more helpful than not.\"\n. Again, I don't feel strongly about this specific rule being or not being in the \"recommended\" set.\nHowever, there's tons of \"sometimes necessary\" things that are generally discouraged. Sometimes being necessary in no way guarantees that a thing should be commonly recommended.\n. @DylanPiercey it's a recommended config. It's supposed to be opinionated. If you don't like the opinions (whether they recommend turning this particular rule on or not), then it's pretty easy - don't use the recommended options, and configure it yourself.\n. ping @evcohen \n. It should be raised there - jsx-no-bind is meant to catch all creation of functions in the render path, but especially uses of .bind, which is particularly slow. You want those in the constructor, not in render.\n. Duplicate of #641.\n. Are you running a global or local eslint? What does npm ls print out?\n. Does the normal eslint rule for undefined vars not catch this?\n. Can't really avoid that, I think - if browser is true, then all browser globals are bugs waiting to happen :-/\n. The commit includes automated tests that should verify it's working.\nCan you open a PR that includes a failing test case?. Thanks, that's appreciated! I'll take a look soon.. Aren't the { in jsx interpreted as surrounding JS code itself? I think you might need {'{'} and {'}'} to have literal curly braces.\n. If so, that sounds like a fundamental incompatibility between CSSX and JSX - I don't think that's something eslint-plugin-react can really fix :-/\n. If so, that sounds like a fundamental incompatibility between CSSX and JSX - I don't think that's something eslint-plugin-react can really fix :-/\n. Why is this preferable? Personally I much prefer the former, because then I can make the component an SFC - since it has no state.\n. Here's how I'd write it:\njs\nfunction Component({ array }) {\n   return (\n     <div>\n       {array.map(item => (\n         <MyComponent {...item} />\n       ))}\n     </div>\n  );\n}\nComponent.propTypes = {\n  array: React.PropTypes.array,\n};\nIf a component is complex, partially hiding that complexity by burying it in instance methods is a poor solution imo. When \"everything inline\" is hard to read, that's a strong indicator that your component hierarchy needs to be altered - make lots of small components, rather than big complex ones.\n. Here's how I'd write it:\njs\nfunction Component({ array }) {\n   return (\n     <div>\n       {array.map(item => (\n         <MyComponent {...item} />\n       ))}\n     </div>\n  );\n}\nComponent.propTypes = {\n  array: React.PropTypes.array,\n};\nIf a component is complex, partially hiding that complexity by burying it in instance methods is a poor solution imo. When \"everything inline\" is hard to read, that's a strong indicator that your component hierarchy needs to be altered - make lots of small components, rather than big complex ones.\n. I'm -1 on this rule, because doing an inline map is idiomatic React, because .map doesn't mean it's Array#map, and because doing an autofix for this rule wouldn't be feasible since there's so many ways to work around it.\n(If we do end up adding this rule, then I'd want an alternative rule for eslint-config-airbnb that forbids instance methods that contain iterations, and requires that they be inline + SFCs - but I'd prefer having neither, tbh)\n. I'm -1 on this rule, because doing an inline map is idiomatic React, because .map doesn't mean it's Array#map, and because doing an autofix for this rule wouldn't be feasible since there's so many ways to work around it.\n(If we do end up adding this rule, then I'd want an alternative rule for eslint-config-airbnb that forbids instance methods that contain iterations, and requires that they be inline + SFCs - but I'd prefer having neither, tbh)\n. Let's leave it open for now, until @yannickcr has weighed in.\n. Let's leave it open for now, until @yannickcr has weighed in.\n. Where's your eslint config? Typically it'd be in a .eslintrc file in the root of the project.\n. Where's your eslint config? Typically it'd be in a .eslintrc file in the root of the project.\n. What does npm ls say about all the eslint-related things?\n. What does npm ls say about all the eslint-related things?\n. @FezVrasta just to confirm, if you try with eslint-plugin-react@5.2.2 and eslint@2.13.1?\nCould you also share the code of the component that errors in your editor but not on the CLI?\n. @FezVrasta just to confirm, if you try with eslint-plugin-react@5.2.2 and eslint@2.13.1?\nCould you also share the code of the component that errors in your editor but not on the CLI?\n. If you remove/comment out the static class properties, does the bug still occur?\n. If you remove/comment out the static class properties, does the bug still occur?\n. I believe lowercased components are just treated as HTML element tag strings - ie, no error is expected there.\n. I believe lowercased components are just treated as HTML element tag strings - ie, no error is expected there.\n. Wouldn't it be wiser to wait on updating the rule format, so there can be a version of the plugin that supports both eslint 2 and eslint 3 for awhile?\n. Wouldn't it be wiser to wait on updating the rule format, so there can be a version of the plugin that supports both eslint 2 and eslint 3 for awhile?\n. Yes, ideally we would keep making changes to the eslint \"2 + 3\" version for awhile, so as to give eslint 2 users (and node 0.10 users) as smooth an upgrade path as possible, for as long as possible. The only time this PR will become necessary is after eslint v4 comes out, so I'm inclined not to rush it.\n. LGTM\n. @yannickcr it'd be great to get a release of this :-)\n. @yannickcr thanks! looking forward to releasing a new eslint-config-airbnb ;-)\n. @jokeyrhyme turns out eslint v2 supports the new rule format already (https://github.com/benmosher/eslint-plugin-import/issues/406#issuecomment-231132889) so if you'd like to make a new PR that upgrades the rules, id be happy to merge it :-)\n. @yannickcr understood - in this case I don't think anybody is still using eslint v1 with eslint-plugin-react, but it's good to be cautious. I won't be able to release an updated eslint-config-airbnb without a non-alpha eslint-plugin-react anyways, but as you can see I've got a few more blockers, so within the next week or so would be ideal if that's ok :-)\n. I'm pretty sure that Babel will in fact add the inferred class/function name, per ES6, which will then be used as the display name by React.\nDo you have an example case where this isn't happening?\n. That seems like a Babel bug that I'd file with them. Losing the explicit function name is not OK.\nAs for https://github.com/sheepsteak/eslint-node-6/blob/master/src/component.js#L11 - the Airbnb style guide recommends avoiding arrow functions for SFCs, due to function name inference. However, the JS spec does actually require that TestComponent2.name === 'TestComponent2' in that example - so again I think it's just a Babel bug.\n. This seems answered.. This seems answered.. The only point of doing so would be to ensure compatibility with a future eslint v4, and doing so would break compatibility with eslint v2.\nWhat's the hurry?\n. I've recently learned that both eslint v2 and v3 support this new rule format - so I think that the sooner we convert all the rules, the better.\n. @yannickcr can you bump the alpha? (or better, the major :-) )\n. LGTM. Test failures appear to be related to eslint 3 dropping pre-node-4 support.\n. @petersendidit if you rebase on latest master, your tests should pass.\n. @yannickcr ping :-)\n. MyStatefulComponent.defaultProps({ foo: 'bar' }); is a noop - also, defaultProps can be either a function or an object literal.\nI'm still not sure what the rule you're suggesting is for.\n. In \"examples for correct code\" you have MyStatefulComponent.defaultProps({ foo: 'bar' }); which is not correct code, because that's a noop expression. Correct code would be MyStatefulComponent.defaultProps = foo where \"foo\" is either an object literal, or a function that returns one.\n. - a rule that requires defaultProps be present for all non-required props: strong +1\n- a rule that disallows default arguments in the constructor of a React component: +1\nAre you suggesting anything else?\n. yes, constructor slash SFC.\nOK, in that case I'm +1 on this request  :-)\n. How does this handle that decorators are actually in-scope bindings, and not string names? In other words, the name \"foo\" might mean different things in different files.\n. That's totally a fair point - just wanted to make sure it was considered.\n. Yes, you're correct. If that's erroring out, it's a bug.\n. That's a good point - that's a core rule that prevents use of this in a standalone function. It still might be useful to have one specifically for SFCs, though.\n. This seems like the same as #305, and is definitely a duplicate of #528.\n. At the moment, manually list them out with all settings.\nI think it might be useful to add, alongside \"recommended\", an \"all\" preset (and a test that ensures that all rules exported by the package are present in that preset, of course)\n. Since this is generically named \"type annotations\", does this work with Typescript and/or JSDoc as well, or only with Flow?\n. @alaindresse why would that work any differently using this.domNode? the wrapped component would still work the same with the ref as it would with findDOMNode.\n. With a ref callback that's an arrow function, you will sometimes get null in the ref argument. I'm not sure why this is, though.\n. @gaeron sure, makes sense that it's not a perf problem - but if I haven't unmounted, I wouldn't expect to get anything but a node. Essentially, that's a gotcha to code around in arrow ref callbacks - I'll have to do node => { if (node) { this.foo = node; } }\n. Are there any lifecycle methods or event handlers that could get called between the old callback and the new one? We've seen bugs caused by other code expecting a node, but receiving null.\n. Are there any lifecycle methods or event handlers that could get called between the old callback and the new one? We've seen bugs caused by other code expecting a node, but receiving null.\n. (I edited the above comment to remove the ref callback entirely in the latter example). @leosco The latter is correct; in the former, you're using the implicit return form and conflating \"returning\" with \"assignment\". The latter example uses the explicit return form and thus is more readable.. Now you're just duplicating the underscore, and still misusing the implicit return form of the arrow.. Find a ref that your wrapper Component sets in its own div, and traverse down from there.. Find a ref that your wrapper Component sets in its own div, and traverse down from there.. A ref is state; stateless components wouldn't need refs. Do you have an example?. I think the general idea, is that if you want the ref of a component, it should expose it explicitly via a prop callback, rather than letting you reach in from outside.\nIf you can't wrap it safely in a div, and it's not exposing a ref, then I'd say you may want to consider finding an alternative solution.. @pfhayes please rebase so as to remove merge commits from the PR :-)\n. The location of the component returned in the arrow function is irrelevant - jsx-no-bind would complain here anyways, unless you disabled it for arrow functions.\nIn other words, no-multi-comp doesn't change the situation at all. Whether it's const Foo = /* the definition of foo */ or const Foo = /* something that imports/requires Foo */ it would complain the same.\n. Can you provide a code sample where you think they're related?\n. You'll get a no-multi-comp warning even if you just have one hardcoded <Button> inside <GroupButtons> - jsx-no-bind is not related.\n. There's already an option to ignore stateless components. If you need a more complex component than that, why wouldn't you want it in a separate file, where it can be properly tested?\n. These should probably be a superset of the \"recommended\" config - what about these options https://github.com/yannickcr/eslint-plugin-react/blob/master/index.js#L68-L69 ?\n. Allowing it to be configurable is excellent. However, changing the default order makes it a breaking change. Should this preserve the default order, and be semver-minor, and change the default later?\n. That's a fair point. @yannickcr should weigh in on that.\n. Instance properties are still stage 1, so we don't use them yet at Airbnb. However, since instance properties run almost as if they were in the constructor, i think they absolutely should all be placed just like the constructor - at the top.\n. @klimashkin this needs reviews from more collabs first, and it needs a rebase.\nSeparately, stage 3 is the time when it's safe to start using a feature, so that's when it will become critical to be supported here.. @klimashkin this needs reviews from more collabs first, and it needs a rebase.\nSeparately, stage 3 is the time when it's safe to start using a feature, so that's when it will become critical to be supported here.. That seems good to me.\n. 5 down, 4 to go!\n. It looks like the last 3 issues all have PRs up - how quickly do you think we could get to a v6?\n. @yannickcr there's still one unchecked item on the list - is that punted to v7?\n. Should this be reopened until that's merged?\n. @yannickcr any more things to add to the above checklist, or are we good for a final release? :-)\n. I see rc.1 is out. Is there a planned time to release v6?\n. I'm biased because I work with @lencioni, but I highly endorse his being added!\n. LGTM\n. LGTM\n. Finished the cleanup of this rule in 2f7a462. Since it was never released in a non-alpha, non-rc build, there's no need to keep the old one around in any form.\n. Perhaps it could be more generic and be configurable to require/allow specific function kinds for SFCs.\n. @gaearon but in practice it is not always assigned. In general, explicit > implicit, and a linter rule to require explicit names by disallowing arrow functions is appropriate.\n. @gaearon In the Babel repl, this function has no name:\njs\nexport default (props) => {\n  return <div {...props} />;\n}\nwhich thus would necessitate:\njs\nconst Foo = (props) => {\n  return <div {...props} />;\n};\nexport default Foo;\nbut export-defaulting one thing only from a file inline is also a best practice according to the Airbnb styleguide.\nIn node 4 and later, if you do const foo = () => {};, foo.name is the empty string - I don't know the exact range of node and Chrome versions that this applies to, since the latest Chrome does have name inference, but there are many implementations in the wild that support arrow functions but not name inference.\n. I'm a strong +1 on this - there should never be a space between / and > and I'm horrified that someone would ever come up with that.\n. Also </ Tag> ideally.\n. Let's also rename this rule to jsx-tag-spacing - and then we can deprecate jsx-space-before-closing and copy the tests over.\n. no-unused-vars is a core eslint rule. The use of jsx here shouldn't interfere with it, but if it does, I'd say it might need filing as an issue directly on eslint?\n. @kumarharsh do you see the same behavior when you enable the react/jsx-uses-vars rule?\n. @oliviertassinari eslint-plugin-import is certainly able to resolve imports, but I don't think that's required here - just preventing using .propTypes and similar.. The goal is to be able to strip propTypes but ensure that doing so won't break any code.\nI don't have any intuition about where the best place for the error is, but having it in eslint might let it be caught earlier.. Awesome! Presumably all the authors of open PRs can run the same transformation and the resulting diffs should be just as useful?\n(linking to #686)\n. Yes, definitely they'd want to do a rebase. Always be rebasing!\n. Per the info in the OP, you'd simply not use the rule in that case - the idea is that passing a className is an antipattern, and you'd want to avoid it.\n. LGTM\n. This LGTM! @yannickcr, with this we could deprecate jsx-space-before-closing and have a more general/useful rule.\n. @Kovensky this needs to be freshly rebased. @yannickcr, could you review after that and merge if i's OK?\n. I think the added example is good \ud83d\udc4d but I don't think it resolves #730 whatsoever.\n. It seems like it should be possible within the same file.\n. SGTM\n. SGTM\n. SGTM\n. SGTM\n. SGTM\n. It shouldn't have jsx since it should apply to createElement DOM elements too.\n. It shouldn't have jsx since it should apply to createElement DOM elements too.\n. @yannickcr hm, I feel the opposite - that those rules should be renamed to not have jsx unless that's the only thing they apply to.\n. I don't care about the length; style-prop-object would be fine with me too. I just think that jsx- should be reserved only for things that can only apply to jsx.\n. Were you using spread props, or was it an explicit prop directly on a DOM element?\n. Were you using spread props, or was it an explicit prop directly on a DOM element?\n. I definitely think no-unknown-property should be erroring out on all the same DOM element props that React 15.3 now does.\n. I definitely think no-unknown-property should be erroring out on all the same DOM element props that React 15.3 now does.\n. \"react/prop-types\": 0?\n. \"react/prop-types\": 0?\n. Certainly if eslint itself had a way to specify, in the rule schema, that there was a removed option, it would work. In this case, for example, we could have said something like 'allow-in-func': 'The allow-in-func option has been removed, and there is now a disallow-in-func option.'.\nRegardless, if there's better documentation we could do, we should do it.\n. Certainly if eslint itself had a way to specify, in the rule schema, that there was a removed option, it would work. In this case, for example, we could have said something like 'allow-in-func': 'The allow-in-func option has been removed, and there is now a disallow-in-func option.'.\nRegardless, if there's better documentation we could do, we should do it.\n. @brennie .filter(([, v]) => v === 'bar') will fix your problem, fwiw.\n. @brennie .filter(([, v]) => v === 'bar') will fix your problem, fwiw.\n. The intention is that it's called every render, otherwise it wouldn't get an up-to-date DOM node. Your example gets called every render too. I'm -1 on this change.\n. The intention is that it's called every render, otherwise it wouldn't get an up-to-date DOM node. Your example gets called every render too. I'm -1 on this change.\n. Ah, you're implying that because the function is === that it won't think the prop has changed? I was under the impression that React didn't actually do that optimization.\nHowever, there's also no appreciable performance impact to having it called on every render unconditionally, nor to using an arrow function - and it can be much clearer than an instance method.\n. Ah, you're implying that because the function is === that it won't think the prop has changed? I was under the impression that React didn't actually do that optimization.\nHowever, there's also no appreciable performance impact to having it called on every render unconditionally, nor to using an arrow function - and it can be much clearer than an instance method.\n. @pixelass a constructor-bound instance method - ie, this.foo = this.foo.bind(this), foo(node) { this.something = node; }, and ref={this.foo}.. React doesn't always document best practices.. JSX approximates XHTML, not HTML - and in XHTML every tag can be self-closed.\n. Apparently by using a non-=== ref callback, the callback will be called extra times, sometimes with null. I've thus been led to believe that the best practice is to use a bound-in-the-constructor instance method, not an arrow function, for ref callbacks.\nI think generic rules to govern arrow function styling could apply here, without needing to special-case them to ref callbacks (although making the ref callback be a one-arg function might be a useful rule)\n. I'm not sure what you're posting about - we're quite aware that it's deprecated :-)\n. I'm not sure what you're posting about - we're quite aware that it's deprecated :-)\n. The rule docs talk about the security issue, but I only this is also a UX issue. It's very rude to open new tabs/windows on a user.\nAs it relates to the security issue, however, either you get the full protection of it, or you get none, so I'm not sure what the advantage would be to weaken it. Can you not override the rule specifically on each of the links in question?\n. The rule docs talk about the security issue, but I only this is also a UX issue. It's very rude to open new tabs/windows on a user.\nAs it relates to the security issue, however, either you get the full protection of it, or you get none, so I'm not sure what the advantage would be to weaken it. Can you not override the rule specifically on each of the links in question?\n. You should be preferring a stateless function there, since there's no state. \"PureComponent\" usage doesn't affect this rule by design.\n. You should be preferring a stateless function there, since there's no state. \"PureComponent\" usage doesn't affect this rule by design.\n. js\nfunction App() {\n  return (<h2>Hello</h2>);\n}\n. js\nfunction App() {\n  return (<h2>Hello</h2>);\n}\n. That makes it an instance property, not a prototype property, which isn't really what i'd call \"optimization\".\nDo this instead:\njs\nshouldComponentUpdate(...args) {\n  return shouldPureComponentUpdate(...args);\n}\n. That makes it an instance property, not a prototype property, which isn't really what i'd call \"optimization\".\nDo this instead:\njs\nshouldComponentUpdate(...args) {\n  return shouldPureComponentUpdate(...args);\n}\n. @alberth8 if that doesn't work, you may not have a new enough version of the plugin installed, or you may not have restarted Atom.. I'm -1 on this, per #777.\n. If the user wants to convey their intentions to ignore this rule that prefers components without state be SFCs, they can do that with an eslint override.\nWhile I agree that implementing shouldComponentUpdate means that the component can't be blindly made into an SFC, I think that if a React.createClass implements PureRenderMixin, but in all other respects should be an SFC - that it should be a warning.\n. @tiemevanveen that's true - making an option to prefer-stateless-function like \"ignorePureComponents\" might be worth doing, however?\n. This is a node module. It is meant to run in node, which has console. It is a perfectly valid requirement. There is no unsafe way to use console methods in a node module.\n. Thanks, that's the right place to fix it :-)\n. @dustinmoorenet I'm not sure why atom is linting mid-typing, but you have a syntax error right there, so you should be getting all kinds of errors in the linter. Try render() {} and see what happens?\n. Or, alternatively, noSortAlphabetically - boolean option absence, and a value of false, should always have the same effect.\n. Test cases LGTM.\n. You don't have to; this just ensures it works if you do.. The rule has no way of knowing what props you are using there because it can't know what properties are on it at runtime. Using object spread is dynamic; prefer explicit prop referencing.. :: by itself isn't valid - it definitely should be catching this::foo or ::foo or a::b.c etc though. Can you provide specific code that it's not catching?\n. Fixed by #644.. Do browsers natively treat them as case-insensitive (and does react normalize the case)? If not, they should not be targeted by this rule.\n. I actually agree that this rule should be part of the recommended set. This rule catches bugs often.\n. ah, understood :-)\n. What's the use case for a prop that's not used in the render path?\n. @andfelzapata would you file that as a separate issue?. @kokarn would you please check the \"allow edits\" checkbox on the right hand column on the desktop site, and/or rebase and update the default from \"multiline\" to \"multiline-multiprop\"?. Please do not comment with \"+1\", it adds noise and adds no value - please show your support by adding a reaction emoji to the original post. I'll delete all the existing +1 comments, and any future ones.\nThanks for participating!\n. Please do not comment with \"+1\", it adds noise and adds no value - please show your support by adding a reaction emoji to the original post. I'll delete all the existing +1 comments, and any future ones.\nThanks for participating!\n. @dobesv wow, I think you've nailed it - @laurenkt if you capitalize it propTypes, does your problem go away?. This seems reasonable - but arrow functions exist - why do you need the var self = this pattern?\n. Which cases? Event handlers should be referencing elements using event.target and friends, not with this.\nIf you're using class, then yes, you are explicitly using ES6 :-p\n. There's not really a way for linter rules to know what your other files are doing. (Fwiw, React generally discourages inheriting from components, and encourages using composition to share behavior)\nI believe you can use a jsdoc comment to inform this plugin that your component inherits from a react component but I don't recall the syntax.\n. There's not really a way for linter rules to know what your other files are doing. (Fwiw, React generally discourages inheriting from components, and encourages using composition to share behavior)\nI believe you can use a jsdoc comment to inform this plugin that your component inherits from a react component but I don't recall the syntax.\n. I'd also want the ability to require spread props appear first or last.\n. I'd also want the ability to require spread props appear first or last.\n. In that case, {\"asdf\"} is a javascript string, not a jsx string, so the eslint core rule quotes should apply to that. This is working correctly.\n. In that case, {\"asdf\"} is a javascript string, not a jsx string, so the eslint core rule quotes should apply to that. This is working correctly.\n. @perrin4869 fwiw, your example will break if new props are passed; you'd need to put the same constructor code in componentWillReceiveProps, which is generally why instance vars are a bad practice in React. foo should be called on every render because it might be different, and if it's expensive, the caller of <Foo> should handle caching, not Foo itself.\n. Just because you currently always pass the same one doesn't mean that's a good assumption to depend on.\n. Counting used nextProps in componentWillReceiveProps is a clear win for this rule, certainly.\n. mapStateToProps is a lot harder because it's redux-specific, and not tied to the component.\nHowever, wouldn't a prop only used in mapStateToProps be a prop you want to not pass to the component?. @prithsharma map state to props is meant to take wrapper props and state, and use them to construct a replacement props object. If the wrapped component does not need a prop, that prop should not remain in the replacement props - no other words, if the only use is in mapStateToProps, why would the wrapped component need it at all?. tbh that seems like just a poor design for getLocations; you should call it with this.props instead of including the fallback.. I think it's a bit of both; a linter can't really determine everything - in this case, your code is branching between \"sometimes props, and sometimes a random object\" - this plugin shouldn't be paying attention to properties of a random object.. I don't think it is; nextProps must be ignored, and we can't know when getLocation will be called with one or the other.\nIn general, passing the props object around itself is an antipattern; partly because it inhibits linting, but partly because passing around bags of things is less clear than passing around specific things.. I'm telling you that as a maintainer of this plugin, it's not possible to do it reliably, because it's not always pulling off of this.props. Meaning, if there's any chance whatsoever that the destructuring is not off of a props object, then we can't pay attention to it. I'm sure we could cover your specific case, but doing so would risk doing the wrong thing for other cases, so we will not be covering your particular case. The fact that it's an antipattern means that you have a better way to write your code anyways that remove the need for extra changes in this plugin.. Because sometimes that function will receive props, and sometimes it will be another object. There\u2019s no way for the reader - or a linter - to know for sure that the props object goes down that codepath.\nInstead, always destructure the props object unconditionally where you need it.. It can read it, but what it means is that the value of the object will only be this.props when the function is called with the first argument as missing or undefined - and \u201chow the function is called from everywhere in your program\u201d isn\u2019t something a linter or a human can determine from one file :-). I don\u2019t think it is. The goal is to ensure that, if your code paths are executed, the props are used. with your code, i have no idea if the prop name is a prop (and been validated) or a random object property.. The linter is here to actively obstruct potential bugs - if there\u2019s any chance something is a bug, it should not be merged as-is.. indeed, null and undefined should both be accepted.\n. indeed, null and undefined should both be accepted.\n. @vdh fails in what way?. @vdh thanks, this is now fixed in latest master.. LGTM\n. LGTM\n. Since this is from a year ago, could you file a new issue for your use case?. @yury-dymov in your case, it's only used if they don't pass in a props arg - can I ask what the use case for that is? It seems very un-React.\n. @yury-dymov in your case, it's only used if they don't pass in a props arg - can I ask what the use case for that is? It seems very un-React.\n. If it's a helper method, it shouldn't be an instance method - and then this plugin won't warn on it. Instance methods should use this in all code paths, otherwise they shouldn't be instance methods.\n. If it's a helper method, it shouldn't be an instance method - and then this plugin won't warn on it. Instance methods should use this in all code paths, otherwise they shouldn't be instance methods.\n. @mike-robertson yours is likely a bug specific to Flow; can you file a separate issue for that?. @anshulsahni Can you share more code? Where does that find appear?. Nope, it's marked \"help wanted\". @mrm007 i'd start by adding the relevant test cases to no-unused-prop-types, and then try to make them pass :-D. @mrm007 i realize the tone is snarky, but i'm quite serious - that's the best way to go about fixing it. I'm not actually sure beyond that what AST parsing changes you might need to make to fix the issue; otherwise i'd have made a PR myself :-). @BertelBB I'm confused - why are your lifecycle methods instance properties instead of prototype methods? That seems wildly incorrect.\nRegardless, passing around the entire props object is always going to make linting it untenable - destructure it the first time you interact with it, and pass those items around, and everything should work fine.. Because you're using class property syntax (componentDidMount = anArrowFunction) they're instance properties. You need to be using method syntax:\n```js\nexport default class AccountContainer extends Component {\n    constructor(props) {\n        \u2026\n    }\n    componentDidMount() {\n          this.checkForAccount(this.props);\n        }\ncomponentWillReceiveProps(nProps) {\n      this.checkForAccount(nProps);\n    }\n\ncheckForAccount({ account, ... }) {\n      \u2026\n    }\n\n...\n\n}\n``. Thanks for that summary - I'd say the flow issues should be supported, ideally, by a separate PR is fine; and the issues with shape props are known.. Thanks for that summary - I'd say the flow issues should be supported, ideally, by a separate PR is fine; and the issues with shape props are known.. Linters typically do static analysis - following imports to other files is generally far beyond the scope of a linter. It doesn't matter how many imports - looking beyond the literal source code in that file is what's challenging.\n. Linters typically do static analysis - following imports to other files is generally far beyond the scope of a linter. It doesn't matter how many imports - looking beyond the literal source code in that file is what's challenging.\n. Yes, but ES modules don't exist yet, because the loader spec is not finished - everything transpiles torequire` one way or another.\nNote how I said \"typically\" and \"generally\" - eslint-plugin-import is the only popular one I know of that does, and it only does it for one or two of its rules. I'm claiming that it's out of scope.\n. Yes, but ES modules don't exist yet, because the loader spec is not finished - everything transpiles to require one way or another.\nNote how I said \"typically\" and \"generally\" - eslint-plugin-import is the only popular one I know of that does, and it only does it for one or two of its rules. I'm claiming that it's out of scope.\n. Again, this is still a bug. If it doesn't support shape props, it should not warn on them at all.\n. I'm saying that if that option is required for the rule to be usable when using shapes, then the rule should never check shapes.\n. @EvNaverniouk any progress here?. Seems reasonable.. What version of node does codeship run?\n. What version of node does codeship run?\n. @kouhin as i commented in the other issue, your versions are incompatible - npm ls should be complaining, because you need eslint v3.5 with eslint-config-airbnb v11.1.\n. @chalisegrogan what versions of eslint everything is in your package.json?\n. @chalisegrogan can you rerun it with all the latest of eslint, eslint-plugin-react, and eslint-plugin-jsx-a11y?\n. @chalisegrogan and presumably if you lock eslint-plugin-react to 6.2.0, the error goes away?\n. What's the code this is erroring out on?\n. @kouhin either way, eslint-config-airbnb v11.1 requires eslint v3.5, and you have 3.3 - npm ls is likely reporting an error.\n. For a package like eslint-config-airbnb that has peer dependencies, you should be updating manually.\n. Similarly, should this try to ensure props are not used in constructors as part of this.state assignment?\n. Although using inheritance in this manner is an anti pattern, you can use a jsdoc extends comment to indicate to this plugin that your subclass is a component.. const { hasOwnProperty } = this.props; and then call it that way.\nYou don't want to call functions directly off of this.props anyways, since that will set this.props as the this value in the function.\n. Alternatively, if that's not a prop, Object.prototype.hasOwnProperty.call(this.props, 'modelConfig');\n. LGTM\n. LGTM\n. Can you explain more about why you can't autofix to tabs?\n. Can you explain more about why you can't autofix to tabs?\n. @eelyafi does that mean it's impossible to have a fixer for indent in eslint core?\n. @eelyafi does that mean it's impossible to have a fixer for indent in eslint core?\n. I'm very hesitant to merge an autofixer that doesn't fix all forms of the rule. If we can't support tabs, we shouldn't support spaces, and vice versa.\n. I'm very hesitant to merge an autofixer that doesn't fix all forms of the rule. If we can't support tabs, we shouldn't support spaces, and vice versa.\n. @eelyafi I'm waiting for one of the other contributors to review it.\n. Yes, that should warn.\n. Yes, that should warn.\n. @TrustNik it doesn't cause the same problems as mutating this.state elsewhere - but mutation is never a good thing.\nI can see the argument that the original spirit of this rule doesn't apply to \"within the constructor\", but allowing mutation isn't worth making an exception imo.\n. @TrustNik it doesn't cause the same problems as mutating this.state elsewhere - but mutation is never a good thing.\nI can see the argument that the original spirit of this rule doesn't apply to \"within the constructor\", but allowing mutation isn't worth making an exception imo.\n. It is correct to warn about any mutation.. @ivosabev Assigning to this.state once in the constructor is perfectly fine. Mutating it immediately afterwards is not.. @burabure if you have a pr with tests that can fix any broken behavior, that'd be great.. @burabure if you have a pr with tests that can fix any broken behavior, that'd be great.. @ryndshn assigning to it once is fine; modifying it afterwards is intentionally disallowed.. You don\u2019t. You assign your entire state all at once, in one place. If you can\u2019t do that in a class property, you shouldn\u2019t have a \u201cstate\u201d class property at all - do it all in the constructor.. This is still a bug. If it doesn't support shape props, it should skip them in all cases.\n. Yes, but if it's using false, this should work.. @mturley could you provide the code that was \"wrong\"? the rule shouldn't crash under any circumstances.. Is your environment in strict or sloppy mode?\n. @pfhayes if you have 'use strict', or if you've configured eslint to use sourceType modules, then it's in strict mode. Otherwise it'd be in sloppy mode.\nIf you add 'use strict'; to the top of the test code, does it fail?\n. @pfhayes if you have 'use strict', or if you've configured eslint to use sourceType modules, then it's in strict mode. Otherwise it'd be in sloppy mode.\nIf you add 'use strict'; to the top of the test code, does it fail?\n. @pfhayes are you using babel? any code inside class, or any file using import or export is automatically in strict mode.\n. @pfhayes are you using babel? any code inside class, or any file using import or export is automatically in strict mode.\n. @xeodou if you can provide a test case in a PR, or better, a test case with a fix, then we'd love to merge it!\n. @rauchg The rule documentation should explain it; basically, it's highly likely there's a bug.\nSeparately, it shouldn't impact \"writing stuff\" at all, since straight quotes are typographically incorrect, and you don't need to escape curly quotes.. I don't think this should be recommended. I feel that nested children are the entire value proposition of jsx, and if one is not using them, one should not be using jsx either.\n. Whoops, you're right. In that case, I'm \ud83d\udc4d \n. If this is not encouraging underscore prefixes but instead attempting to detect typos in lifecycle methods, that sounds like an excellent idea.\n. If you have no other .eslintrc files, that should work just fine. Can you provide the command you're running, and the output?\n. If you have no other .eslintrc files, that should work just fine. Can you provide the command you're running, and the output?\n. That's generally the only place you want all your config files, and you'd want to put \"root\": true in it :-)\n. That's generally the only place you want all your config files, and you'd want to put \"root\": true in it :-)\n. I wouldn't recommend installing eslint globally.\n. I wouldn't recommend installing eslint globally.\n. That seems like something worth filing on Atom itself - ideally you should have only locally installed eslints, and Atom should be able to silently ignore repos without an eslint config.. Are you not running npm install in these repos prior to interacting with the source? If you are, why would Atom be failing?. Ah, gotcha.\nIn that case I'd submit a bug to Atom to be silent when eslint isn't found :-). Its intention was to also cover custom components that accept a \"style\" prop, so they can use it to style the root DOM node they might render.\n. I think that allowing string-or-object in the array gives far greater flexibility - that would also let me potentially forbid a prop on one list of components, but not on others.\n. I think that allowing string-or-object in the array gives far greater flexibility - that would also let me potentially forbid a prop on one list of components, but not on others.\n. @EdwardDrapkin imagine a hypothetical future option where you could forbid \"foo\" on a Foo component, but allow \"foo\" on anything else - or where you want to forbid \"style\" on both React and DOM components, but simultaneously forbid \"className\" only on React components.\nThe latter certainly can be achieved with your suggestion, but that won't allow for the former, and that also requires that property names be duplicated in both lists, which can be hard to maintain.\n. @EdwardDrapkin imagine a hypothetical future option where you could forbid \"foo\" on a Foo component, but allow \"foo\" on anything else - or where you want to forbid \"style\" on both React and DOM components, but simultaneously forbid \"className\" only on React components.\nThe latter certainly can be achieved with your suggestion, but that won't allow for the former, and that also requires that property names be duplicated in both lists, which can be hard to maintain.\n. eslint configs are defined in JSON or yaml, so it'd be impossible to provide a function.\nI think adding regex support is unneeded complexity - being able to configure a boolean for DOM and another for React, along with simple component names per-property that can override the booleans, seems like it would cover all the current and potential use cases pretty well.\n. eslint configs are defined in JSON or yaml, so it'd be impossible to provide a function.\nI think adding regex support is unneeded complexity - being able to configure a boolean for DOM and another for React, along with simple component names per-property that can override the booleans, seems like it would cover all the current and potential use cases pretty well.\n. I think I'd prefer:\njs\n{\n  \"property\": <string>,\n  \"allowOnComponents\": <boolean>, // default false\n  \"allowOnDOM\": <boolean>, // default false\n  \"forbid\": <array of component name strings>, // overrides previous two booleans\n}\nwhere passing a simple string \"foo\" as the property name is equivalent to:\njs\n{\n    \"property\": \"foo\",\n    \"allowOnComponents\": false,\n    \"allowOnDOM\": true, // simply so it's not a breaking change\n    \"forbid\": [],\n}\n. I think I'd prefer:\njs\n{\n  \"property\": <string>,\n  \"allowOnComponents\": <boolean>, // default false\n  \"allowOnDOM\": <boolean>, // default false\n  \"forbid\": <array of component name strings>, // overrides previous two booleans\n}\nwhere passing a simple string \"foo\" as the property name is equivalent to:\njs\n{\n    \"property\": \"foo\",\n    \"allowOnComponents\": false,\n    \"allowOnDOM\": true, // simply so it's not a breaking change\n    \"forbid\": [],\n}\n. I think this is looking much better, and I like the additions you've made! I think we'll want to add a very large quantity of test cases, that cover as many interesting combinations of rules as possible.\n. I think this is looking much better, and I like the additions you've made! I think we'll want to add a very large quantity of test cases, that cover as many interesting combinations of rules as possible.\n. @burabure i think perhaps we might want to follow this PR's lead for \"forbidPatterns\", and let the \"dom or component\" options be pattern-specific instead of rule-specific.\n. @EdwardDrapkin would you be alright with @burabure building off your commits to achieve both this PR and #936?\n. Sure, go for it.\n. Thanks for confirming - @burabure, do your thing :-)\n. Yes, both prefer-stateless-function should skip over comps with childContextTypes, and we should have a separate rule that prevents childContextTypes on an SFC.\n. @EvNaverniouk this is how all of our propTypes are defined at airbnb, and in fact is in our styleguide, because propTypes should be at the top of the file since they're important for documentation.\n. @AoDev it can't be analyzed across files; separately, passing the props object around is a huge antipattern. The proper solution is to destructure everything you need, and pass it in to your functions explicitly.. @AoDev it can't be analyzed across files; separately, passing the props object around is a huge antipattern. The proper solution is to destructure everything you need, and pass it in to your functions explicitly.. @AoDev how many props does getSomeValue really need to use? You can also pass the props you need as normal arguments, instead of having to pass an object.. @AoDev how many props does getSomeValue really need to use? You can also pass the props you need as normal arguments, instead of having to pass an object.. Use parens:\njs\nthis.setState((prevState) => (\n  this.isSearchable\n    ? getState(nextProps, prevState.searchValue)\n    : {};\n));\n. I'm relatively sure we have a rule that enforces this spacing in our airbnb config; it's different from object curly spacing because it's not object curlies. Not sure off the top of my head which rule tho.\n. I think that perhaps an option to jsx-curly-spacing that enabled checking of child curlies would be appropriate here?\n. @Kronuz no. https://github.com/yannickcr/eslint-plugin-react/issues/857#issuecomment-255827739. @fatfisz https://github.com/yannickcr/eslint-plugin-react/issues/857#issuecomment-255827739. Yes, children and attributes should be under their own options. Both should be separately configurable to be ignored, or spaces required, or spaces forbidden.. By default, it should do precisely what it does now, to avoid a breaking change.\nFor number 3, I'd say \"children\" etc should either just be false, true, or an object with overrides for things like allowMultiline.. js\n{\n  allowMultiline: true,\n  children: { allowMultiline: false }, // checked + overrides allowMultiline\n  attributes: false, // ignored\n}\njs\n{\n  allowMultiline: false,\n  children: false, // ignored\n  attributes: true, // checked + inherits allowMultiline\n}\n?. Hmm, I don't think they both should have to be always or never at the same time.\nLet's add a new schema instead that gets rid of the string option entirely, only allows an object with allowMultiline and \"foo\" (always or never), and also children and attributes overrides for both?\n(Not yet sure what to call \"foo\"). Maybe let's just call it \"spaces\"?\nThat sounds good. Although, to clarify, { allowMultiline: true, spaces: 'never', attributes; true, children: false } would be the default - \"children\" and \"attributes\" inherit.. Ah, that's a good point. I think leaving spacing as a separately configurable item (in the single-object-config schema, this would be a top-level key), and I think we should come up with a better name for \"foo\" than \"spaces\" - how about when?. It would be helpful if the bug fix is in a separate PR; or at least a separate commit.. Fixed in #1177. Fixed in #1177. That's up to @yannickcr . That's up to @yannickcr . @wmzy if you upgrade to v6.3.0 does this still happen?\n. @yannickcr any update on a release?\n. @kouhin can you confirm if the issue is still present on v6.4.1?\n. Did you figure this out?\n. Your component here is an SFC that happens to be nested under two objects - something with render is likely to be a class-based or createClass component.\nIs the problem that you're code example is being detected as a component, or that it is not?\n. The word \"render\" is special, and a function with a capital letter name in an object literal would be a stateless functional components.\n. Lowercase names are for DOM components in React. Component names only start with an uppercase letter.\n. You can't statically know that the method doesn't exist, because you have no idea what React.Component.prototype implements.\n. What I mean is, this would be a weird React-specific rule, and could only apply to things directly inheriting from React.Component - it would make more sense as a generic class rule, but then it becomes impossible to statically enforce.\n. I'm concerned that it would break in a future version of React, but we could certainly implement it for 0.13, 0.14, and 15.0\n. fwiw, you have render starting 5 spaces in, so that should be invalid with a setting of 4, but otherwise your suggested example is correct.\n. It's now a valid example of correct indentation - altho with wrap-multilines, it'd be:\njsx\n// When is/isn't this valid?\nclass AppWrapper extends React.Component {\n    render() {\n        return (\n            <App>\n                {'Hello'}\n            </App>\n        );\n    }\n}\n. The paren-wrapping is correct - the indentation rule should be doing the autofixing to the format you specified. Similarly, the indent rule should be able to forbid the latter example if you like.. That might be so (I can't check atm, am mobile). If not, then a PR to include checking that case would be great!. Whoops, turns out this is a duplicate of #862.\n@yannickcr this is a pretty sizable blocker for me, could we cut a release ASAP?\n. What's the concrete benefit of this? The rationale for the rule is specifically that you should never, under any circumstances, directly use the \"children\" prop, and should only ever pass children as the third argument of React.createElement, or as jsx descendants.\n. @vdh You'd just do:\n``` jsx\n<MyComponent\n  foo=\"bar\"\n  baz=\"qux\"\n  otherPropWithLongName={10}\n\nLabel Text\n\n```\n\nsince React collapses all the whitespace anyways. If you didn't want the single leading and trailing space, you could do something like:\n``` jsx\n<MyComponent\n  foo=\"bar\"\n  baz=\"qux\"\n  otherPropWithLongName={10}\n\n{\n  'Label Text'\n}\n```\n\nor you'd just disable the rule for a use case where the exact position of whitespaces mattered.\n. That would require rules knowing about other rules' settings, which isn't possible in eslint.\nAlso, you can have React components without using any JSX at all (React.createClass, class) so that wouldn't make sense as a default behavior.\n. Thanks!\n. What you want would exactly match Airbnb's indentation style, so I'm a strong +1 for this.\n. We may want to do a number of these things.\nWe should definitely have an option on max-props-per-line to kick in only when the tag spans multiple lines.\nIf we then still need another rule or option, that's fine.\n. That goes far beyond what a linter is capable of. Spread props are dynamic at runtime and defy static analysis.\n. The rule's severity is all or nothing - either it's an error (when the rule is configured as an error), or it doesn't report at all.\n. @victor-homyakov that's not how eslint works. Rules only have one \"report\" function, and everything matches the configured severity.\n. I think only when the entire props object is spread, it makes sense to mark all properties as used.\n. Since you're using eslint-config-airbnb, install the latest version of it (up to 12 now) using the specific install command in the readme, so that it updates all the peer dependencies also. That will include the latest eslint-plugin-react.\n. Not that command. The multiline shell script here\n. I believe when installing globally everything has to be installed on the same command; however, nothing should ever be installed globally. If you install eslint per-project, it should work fine.\nClosing since this original issue seems resolved.. Can you provide the exact code in question?\n. That's not up to me :-) thanks for all your triage help!. Agreed.\n. I think because extraProps is a rest arg, every prop in it should be marked as used (and it can be statically known in this  case).\n. @wellingtonamaralleitao see #1232 . @snowypowers while i think it makes sense to only throw for the first error as long as the autofixer results in no remaining cases of the error.\n. I'll give this a day or two to be reviewed by other collabs, then I'll merge it in.\n. While a generic rule could be useful, I think a specific rule that requires that <button> have an explicit \"type\" defined would also be helpful.\n. Totally, I think adding both is good.\n. I'm not sure I understand. How could anyone statically determine that in this IIFE that returns an object, the object is meant to represent props?\n. That's some really really specific deduction for one single library. That seems like something that some sort of eslint-config-redux would handle, but not generic React.\nI'm particularly concerned that usage of https://www.npmjs.com/package/react-with-styles would trigger this, short of the very specific import detection.\n. jsx\n<div className={[\n            \"some\",\n            \"stuff\",\n            2 ]}\n        >\nshould not in fact pass - the following should:\n``` jsx\n<div\n  className={[\n    \"some\",\n    \"stuff\",\n    2\n  ]}\n\n```\n\nHowever, I agree your first example should not pass.\n. Although I don't use that style I agree that contents of braces/parens/brackets should always be indented one level deeper than the lines containing the marks, when multiline.\n. @kentor sorry this fell through the cracks - I still think it's a great rule to add.. @TheXardas no, there is no block element in that file.. @TheXardas right but there's no way static analysis can determine that within that file. The only way a linter rule can determine what kind of component a thing is is its name in the file. If someone intentionally names it MyBlock to get around the prohibition, there's nothing a linter rule could do about it (just like if they used an eslint override comment). JSX is like HTML. Children are a special form, that in jsx is provided using nesting, and in createElement is provided using the third argument.\nCertainly you can provide the \"children\" prop, and it works the same - but that's more an artifact of React not wanting to decrease performance, and the implementation detail of \"children are seen in the props object of the rendered component\" rather than something that should be encouraged.\nAdditionally, if there exist some scenarios that are messy and unintuitive (with the children prop), and there exists an alternate form that is always clean and intuitive (with nested children), it's strictly better to use a linter rule to force the alternate form. Things that are useful but sometimes confusing, should be avoided when a clearer alternative exists.\n. XML and HTML and JSX are all similar to each other.\nI agree the React documentation does not indicate that \"children\" is special; I'm suggesting that it's special treatment in the API is part of what makes it so.\nPRs are always welcome to improve documentation.\n. Passing non-elements as children is a really weird pattern.. Either way, the following should work fine:\njsx\n<Route path={to}>\n  {({ match }) => (\n    <li className={match ? 'active' : ''}>\n      <Link to={to} {...rest}/>\n    </li>\n  )}}\n</Route>. Right - it's a component, not an element. The equivalent would be {SomeRoute}, not <SomeRoute />.. From reading the docs, it seems like class properties (a stage 2 proposal) simply don't have a way to configure them, unless they fall in \"everything else\".\nI agree that \"class properties\" should be its own group, and that by default, props should go before state, which should go before other class properties.\n. \"enabled\" is \"eslint severity\" - which is either \"off\", \"warn\", or \"error\", per eslint docs.\nEvery eslint rules' first option is configured this way.\n. Fair point - want to make a PR to change it to say \"severity\"?\n. That's not how an eslint rule can possibly work. severity ONLY determines if a report is a warning or an error. Additional options are ALWAYS required to achieve differing behavior.\n. That's a fair point that perhaps the rule could be named better - but I don't think it's particularly important, since most people set it to \"always\".\nThe documentation uses the term \"warning\" because that is how every single eslint rule on the planet refers to them.\n. That's correct. You should either:\na) use {\"I'm not ok\"} to make it explicit, or\nb) use \u2018 (a curly quote) because straight quotes are typographically incorrect.\n. @tleunen on a mac, \u2325-] or \u2325-}, on windows, alt 0145 or alt 0146 :-p\n. @duane english contractions and possessives should only be curly quotes too. The benefit is that curly quotes can't enclose HTML attribute values, which means the presence of a curly quote is never a bug, but the presence of a straight quote might be one.. @duane technically ' is not an apostrophe; \u2019 is. ' is only used for notating \"minutes\" in degree-minute-second notation.. I understand that's how computers describe it; however, typography, not the ASCII spec, determines what a character is, and what should be used.. I understand that's how computers describe it; however, typography, not the ASCII spec, determines what a character is, and what should be used.. It\u2019s absolutely a problem with your code. That you may not care about correctness doesn\u2019t mean that incorrectness is acceptable to endorse.. Thanks!\n. @yannickcr does it allow all those at once, or can i force one? For my codebases I'd want to force only the last option\n. Awesome, I'd love to see that option added :-)\n. indent is correct here, and I think d0dfc075af92f43ebe25f4bde0fd78820ed295d8 might fix it?\n. The first case is a bug, but the second is correct - the line the starting [ is on determines the indentation for the rest. In other words, it wants:\njsx\n              {condition && [\n                <Tag key=\"a\" onClick={() => {\n                  // some code\n                }} />,\n                <Tag key=\"b\" onClick={() => {\n                  // some code\n                }} />,\n              ]}\n. Yes, good point - it is warning, but not in the right places.\n. @bigslycat on 6.4.1?\n. The bug is that it should be warning in both cases.\n. Ah - if you put React.PureComponent would it behave correctly in both cases?\n. You should always define propTypes.\n. @tmcintire destructuring props in an SFC signature is completely fine, are indeed props, and should be covered here.\n. @nickjanssen there are two answers. the easy/unideal one is to just use eslint ignore comments inline in files that use those props.\nThe proper solution is to file an issue on the third party library to export a proper propType for each of the props they require (even if that's PropTypes.object) so that your code doesn't need to be concerned with the question of \"validating a structure that your code doesn't provide\".. @jtiscione if you have 30 shapes, then you definitely need 30 shapes if you want them properly documented and checked. Although you\u2019re free to disable it, the rule isn\u2019t idiotic; but having a large quantity of unchecked data structures might be.. It wouldn\u2019t be safer; writing that every time is indeed the safest approach. Your frustration is about convenience - inconvenience which is forced on you by these sloppy third party APIs that are providing unpredictable structures.\nReact is the right layer to be doing these validations because every layer should be doing them - at no point should any of your code trust its input implicitly.. @lokori yes, that's right - and ideally you should have a single module that exports this shape so that you can reuse it. Even more ideally, react-router should be exposing this exact propType - I'd suggest filing an issue with them to request it.. @russellr86 ideally react-router would export a propType for the history prop, so you don't have to do that.\nEither way, the amount of usage of a given library (which is used in way less than 99% of all react applications, btw) has no correlation to the likelihood that you're going to use it improperly.. Yes, you should prefer SFCs there. However, the propType rule shouldn't be triggering on those functions - it's just hard to tell the difference.\n. Note the reasons are for maintainability; perf is the least important consideration.\n. This LGTM. Let's get multiple collabs' eyes on it before this gets merged, however.\n. See also #1032.. #1138 / #1377 / #1412 should help, but this might still require further fixes.. Rules can't access other rules' config. If you want 2 spaces, you have to configure both rules.\n. @tswaters there are two rules because JSX isn't part of JS, so eslint core doesn't tend to have rules that can work with it.\n. That does seem reasonable - however, people indent their props in far crazier ways then they indent their object literal keys, so it might get unwieldy.\nThe first step would be enhancing jsx-indent to handle all the props cases, and ship that as a semver-minor - and then later, deprecate/remove jsx-indent-props.\n@yannickcr, thoughts?\n. @HHogg you can instead configure indent to ignore JSX and delegate to eslint-plugin-react, which solves the problem.. https://eslint.org/docs/rules/indent#ignorednodes, with a selector of \"JSX\" should do it.. https://eslint.org/docs/rules/indent#ignorednodes, with a selector of \"JSX\" should do it.. @Wilfred does this solve your issue?. @Wilfred does this solve your issue?. Unless eslint core agrees to make a global \"indent\" setting that the core indent rule reads (and then that jsx-indent could read), there's nothing we can do.. Unless eslint core agrees to make a global \"indent\" setting that the core indent rule reads (and then that jsx-indent could read), there's nothing we can do.. I think it should also allow\njsx\nWelcome,{' '}<Name userid='blahblah' />\nthough, no?\n. This seems similar to (but different from) jsx-no-literals.\n. The point of the rule is so you name your identifier something like handleClick - why would this be different here?\n. If you rename your callback identifier from clickHandler to handleClick, i believe it will pass.\n. This is a great solution to this problem for React.\n. @thejameskyle in React, prior to Flow, props were typed with propTypes. I do accept that typing it this way makes more sense since it's directly using the property name, but at the moment, having types at all is unidiomatic, let alone when there's no associated value (ie, no default prop). Is that allowed in Flow? (specifying the default value along with the type)\n. Thanks for the Flow explanations (I don't use it yet). I'm convinced that support for this belongs in the plugin - i'm just not convinced it belongs in the default ordering. I'm content to be overruled by another collab, however.\n. Closing per https://github.com/yannickcr/eslint-plugin-react/pull/923#issuecomment-312373840. Closing per https://github.com/yannickcr/eslint-plugin-react/pull/923#issuecomment-312373840. Doesn't that mean that omitting the type altogether is better still, because that will also do inference?\n. @zertosh right, but why do you have to annotate it at all?\n. @kurtzur does displaySomething return JSX? if so, our component detection probably things it's an SFC (and it probably should be one)\n. @zimme return (<div>{this.props.items.map(item => (<SFC item={item} />))}</div>);\n. Closed in #949.. Closed in #949.. It seems like a very strange pattern to pass this around, as opposed to passing only the information that onSelectPlace actually needs.\nThere's a limit to how much a linter can follow values being passed around, and passing around this seems certain to defeat many forms of static analysis, as well as being a subpar thing for maintainability.\n. Binding of class methods in the constructor is the proper and idiomatic way to handle these things in React, fwiw. Using arrow functions as class properties is actually much less efficient, because it creates the entire function N times - whereas a constructor-bound prototype method is created once, and the only thing created N times is a tiny wrapper function (the .bind) that calls into the shared, optimizable method.\n. Yes, the bind operator is identical to using .bind, which means you would not want to do it inline.\nThe best is to do this.foo = this.foo.bind(this)/this.foo = ::this.foo; in your constructor, or to add a class property like foo = this.foo.bind(this)/foo = ::this.foo.\n. The issue should stay open in case there is a way to implement it :-) sorry for going offtopic with the code style discussion.\n. @robwise \"numbers\" would all be either app-specific, or microoptimizations that aren't worth calculating :-) It may indeed not make a noticeable difference - but I find it both theoretically more performant and actually more correct and maintainable. \u00af_(\u30c4)_/\u00af \nI'm assuming that if you convert the Flow back to propTypes, that everything's fine - if so, then this is a bug with the plugin's Flow parsing. Could you also try using { onMouseOver, onClick } instead of props?\n. Instead of installing (anything) globally, everything should be installed locally per-project. Peer deps don't work well with global installs.\n. This appears to be based on #886?\n. It would help if you could figure out which file it's crashing on, and specifically which section of code.\nWhat not-spec-finalized babel transforms are you using? Are you using flow or TS?\n. Can you try not destructuring PropTypes.object and see if that fixes it?\n. Thanks - although it's weird to have a rest prop alone, iirc it's valid, so it should work. Thanks for following up!\n. It seems like a very uncommon use case to unmount components - most code I've seen mounts a React component and then never touches it again.\n. @Bonuspunkt can you explain the use case a bit more where you need to unmount?\n. @Bonuspunkt can you explain the use case a bit more where you need to unmount?\n. I think that that is a great idea for a custom rule for \"dijit\" users, but is definitely not a common case for React users. Even in your example, there's no requirement that the unmount happen unless \"destroy\" is called - that's very specific to dijit, i think.\n. I think that that is a great idea for a custom rule for \"dijit\" users, but is definitely not a common case for React users. Even in your example, there's no requirement that the unmount happen unless \"destroy\" is called - that's very specific to dijit, i think.\n. It is assumed that when reading eslint plugin docs, the user is already familiar with how eslint, and all eslint rules, are configured.\n. Can you share your two eslintrc files?\n. In the latter case, the value of this.state.counter is stored by reference in the object passed to this.setState - I don't see the problem. The batching would grab the momentary value of all the counter values, and it'd remain correct.\nIf you passed a function to setState (which I wasn't aware is possible; I've only ever seen an object passed as the first argument) then certainly that function accessing anything on this besides props is dangerous, but that doesn't seem to be what you're warning for here.\nCan you elaborate?\n. I agree that the rule you're requesting is in line with the React docs, however it really seems to me that the React docs are incorrect, as it should be impossible for batching of updates to affect this behavior.\n@spicyj @zpao @sebmarkbage et al: can you help me understand why batching updates would make the example in https://facebook.github.io/react/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous observably different, given that the value of the \"counter\" key is reified synchronously and instantaneously before it's passed into setState, thus this.state and this.props are no longer linked to the values by the time setState is batched?\n. Gotcha - sounds like it's not a common issue now, but might become one later, so this would fall under a \"future-facing best practice\" bucket.\nThanks for explaining!\n. Closed in #1374. Sounds like the error is doing the right thing! Your corrected code is indeed better.\n. That's still returning an assignment. If the eslint rule allows that, it's a bug in the rule.. Ah, it turns out no-return-assign defaults to an option of \"except-parens\". I strongly encourage you to set that to \"always\" instead. The airbnb config will soon begin doing so.. Not every eslint rule is programmatically fixable; many require human intervention and always will - but that's part of why it's so important to make all the ones that are fixable, fixable.\nThanks for the contribution!. Not every eslint rule is programmatically fixable; many require human intervention and always will - but that's part of why it's so important to make all the ones that are fixable, fixable.\nThanks for the contribution!. The proper solution here is to use a named function instead of an arrow function. There's no need to use an arrow here - they're not just a cure-all for \"short functions\".\n. The proper solution here is to use a named function instead of an arrow function. There's no need to use an arrow here - they're not just a cure-all for \"short functions\".\n. I find those examples much more readable than the arrows. A React component is very different from a HOF callback, and having a name is very important. Arrow functions were created to replace callbacks - not to replace normal functions.\nIf you insist on ignoring the decades of best practices that say to always name meaningful functions (like React components) then disabling the rule at the usage site (or overall) is the correct approach.\n. I find those examples much more readable than the arrows. A React component is very different from a HOF callback, and having a name is very important. Arrow functions were created to replace callbacks - not to replace normal functions.\nIf you insist on ignoring the decades of best practices that say to always name meaningful functions (like React components) then disabling the rule at the usage site (or overall) is the correct approach.\n. Actually I think this is probably a good change. @yannickcr?\n. Actually I think this is probably a good change. @yannickcr?\n. @yannickcr why is it a breaking change? Setting that default causes fewer errors, so by eslint's semver policy that's just a patch.\n. Thanks - we shouldn't ever be calling .hasOwnProperty on values directly.\n. Thanks! This is superseded by #957.\n. We can certainly add that simple fix, but this is a systemic problem by the bad practice of calling .hasOwnProperty directly - which this PR nips in the bud. Is this not a change you want to make?\n. OK - now that #956 is merged, let's discuss it :-)\nI do agree that (as I discovered when adding a test for it, which #956 did not do) that hasOwnProperty wasn't the problem here.\nHowever, I'm not sure why adding an additional dependency is a problem; it's transparent to users, and this is a dev tool, not a production tool. Using prototype builtins directly is a huge footgun, and having has available, combined with the lint rule, ensures that developers won't run into it.\n. @yannickcr any update on making this change?. This is now updated - I'm hoping to merge it soon, please review.. \"enabled\" refers to 0/1/2 or off/warn/error, just like every eslint rule in the ecosystem and core is configured.\nIf this change were to be made (adding \"react/\"), we'd have to do it on all the rules - as this is how they're all currently documented.\n. Because tabs vs spaces are very hard to convey in markdown format, all the examples use spaces, but have a comment directly above them describing the intended indentation.\n. \"using local\" means, everything's locally installed and not globally installed. What happens if you run npm uninstall -g eslint and restart your editor?\nAlso, does the error happen on the command line? It's unimportant if it happens in your editor or not.\n. Can you elaborate what +value: string means in flow?\n. Based on my understanding of that blog post, +/covariant is read only, -/contravariant is write only, and objects are invariant by default.  In your example code, I agree the warning should not appear.\nA separate question is what to do about contravariant props, but since you arent supposed to ever mutate props, it seems like you'd never want a contravariant prop, and that should be an error - but that seems like a separate rule.\n. Nothing should be installed globally; install everything locally and it will work fine.\n. That's true, but it's still best to never install anything globally.\n. It's supposed to be installed on every project, and explicitly listed in every project's dependency list.\n. Your changes look great, thanks!\n. @vitorbal Airbnb does not yet use Flow; I don't have any projects I can test flow support on.. That's exactly the plan. https://github.com/yannickcr/eslint-plugin-react/issues/693#issuecomment-234842809\n. If you use React.PureComponent instead of the named import, does the same thing happen?. @lucasbento are you setting your React version correctly in eslintrc? PureComponent doesn't exist before v15.2 or so. That's invalid jsx syntax - I don't think it's a reasonable expectation that rules should work when your syntax is invalid.\nIn other words, even if you disabled that rule, eslint itself should be dying on the syntax.. That's a fair point; that the rule should be silent when there's a parse error. Although, that seems like something eslint itself should be handling perhaps?. Closed in #1319.. Before making a PR, we may want to think about the schema a bit.\nFor example, I can see wanting exceptions - ie, \"require auxiliary verbs for boolean props, except for props that have these names\", or \"forbid auxiliary verbs for boolean props, except for props that have these names\". I can also see wanting to include additional PropTypes in this - in other words, if I have a custom propTypes that is in fact a boolean but has additional validation, I might want the same require/forbid behavior.\nIt's very important to think about how this rule can be extended, even if the initial PR doesn't need to contain all those features.. What schema do you have in mind for allowing the user to specify the propTypes? What about to exempt specific prop names from the rule?. When would that rule be applied? It's not always safe to make a component into a PureComponent, and the linter rule should only be recommending it when it won't break code.. It's definitely about breaking code - eslint rules are certainly subjective, but they should not recommend changes on existing codebases that would make it easy to accidentally break code.\nIf the rule can detect when a component should not be a PureComponent, I'm +1 on it. Otherwise, I'm -1.. To reiterate - just like prefer-stateless-function, I think prefer-pure-component would be a great rule - provided that it's very very cautious about when it warns. Since detecting mutation is hard, perhaps it would be better to enumerate some cases where the rule could know with certainty that changing to PureComponent is safe?. I'm not the only deciding vote, but imo, yes, that's far too strong an opinion.. I think you could maybe use no-restricted-properties in eslint core to forbid React.Component, without an extra rule?. The native way to write this is:\njs\nconst { classNames, min, max } = this.props;\nconst sliderProps = { min, max };\nIt's not scalable or practical for eslint-plugin-react to know what _.pick (or any other arbitrary function) does, and since it can be done easily in native syntax, that's what I'd recommend.. You've got a few problems there.\n1, you don't want to have side effects in a render - specifically setting document.title. 2 tho, you're using an implicit return arrow function, but you have two statements. Change it to an explicit return arrow function and you won't have a syntax error:\njsx\nconst PanelHeader = (props) => {\n  document.title = 'Blah';\n  return <Blah />;\n};. You may want to look into https://www.npmjs.com/package/react-document-title for setting the document title.. It seems like a very useful rule that I'm loath to remove, but I do agree that it could have very many false positives.. @lencioni i mean, aMapOrSet.forEach(x => { somethingElse.push(<div key={x} />); }) or similar. Will these be caught as well, since there's no way to know if aMapOrSet is an array or not?. It's also worth noting that React itself does this for all DOM elements in React v15.3 and later.. Indeed, this is a bit duplicated by #1209.\nHappy to reopen if it can be adapted.. Your \"better\" examples aren't - because if they're 0, they'd be falsy and actually render the zero.\n&& and in jsx should always have the first operator coerced with \u203c to ensure that in the falsy case, it doesn't render anything.\nI think a rule that enforces \u203ca && b over a && b or a ? b : null is great - as long as the same rule can be configured to also enforce a ? b : null over a && b or \u203ca && b.. I think this rule proposal is good - requiring ternaries, or requiring value selection operators - but yes, a separate issue to deal with boolean coercion with value selection operators.. @jamischarles what version of eslint are you using? I thought both plugin and plugins were supported.. It would be good to confirm whether this worked in some versions of eslint, or if it never worked.. Thanks, good enough for me.. Thanks, good enough for me.. It's worth noting that I think it will actually work - it just means there's no point in it extending PureComponent then. I'm \ud83d\udc4d on this rule.. It's worth noting that I think it will actually work - it just means there's no point in it extending PureComponent then. I'm \ud83d\udc4d on this rule.. Using a base class is a bad practice (article by the React team: https://facebook.github.io/react/docs/composition-vs-inheritance.html) - however, this plugin supports a JSDoc-style annotation you can add in a comment above all of your components to indicate they are react components.\nWhat I'd recommend instead is importing shouldPureComponentUpdate in every single component rather than using inheritance to solve that problem (or using a decorator).. Using a base class is a bad practice (article by the React team: https://facebook.github.io/react/docs/composition-vs-inheritance.html) - however, this plugin supports a JSDoc-style annotation you can add in a comment above all of your components to indicate they are react components.\nWhat I'd recommend instead is importing shouldPureComponentUpdate in every single component rather than using inheritance to solve that problem (or using a decorator).. Dupe of #988.. Dupe of #988.. This seems good, but please note that in React Fiber, this probably won't be the case, as you'll be able to use a promise for a component as if it were a component.. This seems good, but please note that in React Fiber, this probably won't be the case, as you'll be able to use a promise for a component as if it were a component.. @taion a promise for a component, is my understanding.. @taion a promise for a component, is my understanding.. Can you elaborate on how it breaks? That change should only have affected component detection on functions.. Can you elaborate on how it breaks? That change should only have affected component detection on functions.. Thanks, that definitely seems like a bug. @taion mind submitting a PR to fix this?. Thanks, that definitely seems like a bug. @taion mind submitting a PR to fix this?. @bharley does it have the same problem if you don't destructure in the signature?\n(on a side note, there's zero reason you need an async function there, since you only have one await and you're not returning anything). Can you share the file on which this is erroring?. Can you share the file on which this is erroring?. (note that it's JSX syntax that requires use of React, not a .jsx extension). If you remove the flow syntax from the file, does the error still happen?. eslint-loader seems to not be compatible with eslint 3 - https://unpkg.com/eslint-loader@1.3.0/package.json. You'll want to upgrade that to the latest, which does https://unpkg.com/eslint-loader@1.6.1/package.json. It should definitely follow in-file propType declarations like that.\nCan you try using PropTypes.object etc, rather than destructuring things off of PropTypes, to confirm whether that's the issue instead or not?. If so, we can close this with a PR containing the test case.. In order to retain eslint v2/node 0.10 compat, this definitely needs to be fixed.. Wouldn't this throw the instant the component is used to create an element? Given that React.createClass is deprecated over class-based components, is it worth adding a lint rule specifically for a legacy form?. @mlee it's not at all a requirement! I'm mainly asking how valuable this will be, given that anyone using React.createClass is already ignoring best practices.. Fair enough. I assumed they were officially deprecated, but it seems only unofficially. createClass components are much much slower than other components because of the autobinding, so it's not just syntax.\nAt any rate I'm still not saying we can't have a createClass rule, I'm just questioning the value of this one in particular.. @derwaldgeist you can't use props like that; render takes no arguments.. A function that returns jsx is treated as a component. In this case, getDetail should be an SFC, not just a jsx-returning function.\nI'm also not sure why you're sticking those functions directly on the TestComponent as opposed to just referencing them lexically in the closure?. refs are generally a code smell - used minimally and by necessity. It would be far better to prevent ref usage than to allow it.. Things that require refs absolutely should expose a prop, like refCallback, that you can explicitly link to an internal ref - as opposed to just having consumers set their own ref prop.. @khankuan it's far better to have an explicit API, rather than to have ref be an implicit one - ie, if that's a feature of your library, then refactoring from a class to an SFC becomes a breaking change.\nref is an escape hatch from React's control of the DOM - it's not a good thing, nor a \"convention\" that library authors should be worried about.. What transform are you using for the not-actually-a-proposal-yet do expressions?. This is a duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/857#issuecomment-255827739. Default values are not the same as defaultProps. The rule correctly reports this as an error.. That's why it's an important rule - it's bad to use default values instead of defaultProps.\nI suppose we could make an option that allows default values but I think the existence of the option would be harmful.. @steida i don't understand why it would be - defaultProps provide important information to the React runtime that default values can't possibly provide. Flowtype replaces propTypes - information that React doesn't actually use at runtime in production.. @steida again, you're talking about propTypes. defaultProps are different, and control runtime behavior - not type-checking. Using default values prevents React from being able to make some kinds of optimizations.. @steida There's no need for a link - by spec, default values are re-evaluated on every invocation of the function. defaultProps, on the other hand, are evaluated once and cached at the module level - across every invocation of the function. Even if React does nothing with regard to them (which I doubt, but haven't bothered to dig up evidence of), defaultProps are more performant than default values.\nIf you don't want to use defaultProps, disable this rule. If you want flow annotations to be equivalent, make sure that your Flow annotations transpile down to defaultProps, and then this rule can and should be adapted to support them - until that time, they're not the same, and defaultProps is staunchly recommended.. The documentation for React suggests a number of bad practices amidst all the good ones - just because they make the framework doesn't mean they're always right :-). The documentation for React suggests a number of bad practices amidst all the good ones - just because they make the framework doesn't mean they're always right :-). That\u2019s not included intentionally; react components (SFCs included) should simply not use default arguments at all.. That\u2019s not included intentionally; react components (SFCs included) should simply not use default arguments at all.. @umidbekkarimov can you provide command line output? How your IDE highlights things is an issue with your IDE; only the command line is important here.\n@alex-deas I believe there might already be an open issue specifically around nested flow types, and another around prop usage inside callbacks.. @jomasti @lencioni any objections to this being merged with my latest changes?. It seems like adding prevToken && in the while condition here fixes it, but I'm not really sure why that's the case (other than that \"a function that can return null is treated as if it never does\"). @yannickcr ping on this one. Yes, at runtime (not with eslint), React will warn that you're creating a <Child> without passing a parentName prop.\nGenerally you want to make console warnings/errors fail your tests, and then you get propType checking in your tests for free.. Totally - a PR to do so is quite welcome.. Because you can't export a default like that. You have to do it in 3 lines.. iow, you're creating a global App variable. You need 1 statement to make the component, 1 to assign propTypes, and 1 to export default (or, 1 statement but using export default Object.assign(function App() {}, { propTypes: \u2026 });. Please do send a PR if you're also able to include a failing test :-). You can easily use this plugin and only enable the jsx rules, or we could add an exported config that only contains those - there's not really a benefit in having it be a separate plugin.. Size doesn't really matter for dev deps.. @karissame I built withShape in airbnb-prop-types specifically so you could do withShape(PropTypes.array, { length: PropTypes.number }) or similar, since React.PropTypes makes that impossible.\nThat said, the plugin should definitely exempt anything on Array.prototype when PropTypes.array or arrayOf is used.. How would you propose detecting a component that extends something else? The presence of a \"render\" method isn't sufficient - Backbone views have a render method, for example - and some subclasses only override lifecycle methods, or only override non lifecycle methods.\nThe current way this is handled is that if a component extends another component, it's ignored - precisely because there's no way to detect them.\nA new generic rule that prohibited all forms of extends that aren't extending React.{Pure,}Component might be useful, though.. Your assumption is incorrect - AST is only based on what code is typed into the file. It's utterly impossible to find \"the parent\" because that might be in another file, or that might be the result of random evaluation.\nThere's no way to know that class Foo extends Bar is meant to be a React component unless a) it's used in jsx or createElement in the file; b) it's annotated with a special jsdoc comment that this plugin supports to indicate it's a react element, or c) unless Bar is literally defined as React.Component in the same file.\nYour desired rule doesn't target any of these cases. This is the type of thing that just needs to be solved with code review, not with a linter.. Note that this plugin already supports an optional annotation comment, but it must not require it, or else the linter rules would miss out on a lot of places it needs to be targeting.. I believe it's undocumented atm, and uses jsdoc syntax.. There seem to be some issues with this rule, so I'm going to hold off adding it to the recommended configuration just yet.. I don't think this needs to hold back v7 either way; it can just be bumped to v8 if v7 is otherwise ready.\nThat said, I think the problem is more that conceptual issue that there are legitimate use cases for using an index as the key, and the rule can't statically determine them - so it might be too strong a rule to enable by default in a config.. (#1170 is an example of why I think this rule probably can't be in the recommended set). @jeffvandyke you can use the string itself as the key, if they're unique. Obviously if they're not unique, you'd need an index - at which point, you'd use an override comment.\nIt is definitely appropriate to have an eslint rule that works for the 99% case, but requires an override comment for the 1% case - it happens a lot.. You could always disable the entire rule project-wide; since based on what you're describing, the rule isn't adding value for you.. @PatNeedham yes, which is a place where you'd disable the rule. The rule assumes that the common case is for rendering arrays that do contain unique items.. Why? <option value> is equivalent and more concise.. <option value={true} /> should be outputting the same thing. In other words, if you want the syntaxes to match you should do <option value={String(true)} /> instead of relying on React to coerce for you.\nI don't think an option to allow this case is a good idea.. In that case I'm going to close this; happy to reopen if you want to continue making the case for the option.. eslint documentation itself describes how to configure eslintrc and specify plugins. http://eslint.org/docs/user-guide/configuring#configuring-plugins. That's just static class properties (which are a stage 2 proposal) - definitely those should be covered as well, but since it's just sugar for CustomView.propTypes = \u2026, it shouldn't be difficult.. This is actually likely to become very important with React Fiber, so I think this is a good idea for a rule (specifically, if you use a value from this.state in your setState call, you should be passing a function to setState instead of an object). no-set-state-using-this-state?. With the callback version, you're using prevState, not this.state, that's the whole point. I'm fine with your more verbose name tho.. Why is it OK to add a ref on DOM elements?\nThe examples seem to imply that string refs are ok and callback refs are not. Could you make sure the examples for both valid and invalid contain inline callback refs as well as string refs?. This is unrelated, but you want to use an npm run-script, or ./node_modules/.bin/eslint, not hardcode the path to the JS file.\nThis looks like there's some kind of code you might be using that eslint-plugin-react's jsx-indent rule is crashing on. If you open up that file (/Users/jakereps/Developer/caporasolab/q2studio/node_modules/eslint-plugin-react/lib/rules/jsx-indent.js, and on line 236, add console.log(context.getFileName()), and you check the last filename eslint reports before crashing, could you share that file's code?. Those links now show the same block - if you could provide the code that broke, it's definitely a bug we should be able to fix.. Why would a handler function need to begin with \"_handle\"? Can you share your eslint config?. Also, what is Component here?. It's not idiomatic to extend anything but React.Component directly in react components, so this absolutely should not be default behavior.\nIf this is a pattern you insist on using, then perhaps we may want to add support for a config setting for \"componentWrappers\", or \"components\" - ie, things that, when extended, are still considered components - but all that said, this isn't a good pattern to be using.. You can also set null or undefined as the default, since all non-required props allow those.. That's because class properties aren't \"es7\" (which was published in June of 2016), they're a stage 2 proposal, and as such, eslint core doesn't parse them yet.. All of the rules docs omit the react/ prefix, by convention.. As long as they're all the same, I'm happy :-) it'd be nice to update this PR to do all of them, but a separate one is fine too.. @adnasa it looks like this needs a rebase, and it seems like #1078 has found a file that your PR doesn't update.. @adnasa it looks like this needs a rebase, and it seems like #1078 has found a file that your PR doesn't update.. @adnasa would you mind rebasing so as to remove the merge commit?. @adnasa would you mind rebasing so as to remove the merge commit?. I've updated the PR to be allowGlobals and default to false, so this is covered.. The first problem is intentional, as it looks for anything that could be a createElement call first, then refines.\nThe second is clearly a bug.. The first problem is intentional, as it looks for anything that could be a createElement call first, then refines.\nThe second is clearly a bug.. I believe that if the bug was fixed, only React createElement calls would be matched.. I believe that if the bug was fixed, only React createElement calls would be matched.. Doesn't that change React to createElement, which isn't the same thing? Or is the default pragma React.createElement?. It's important to note the caveat that it only works when not using anything off of React except for createElement - don't forget React.Component, React.Children, React.isValidElement, React.PropTypes, etc.. Neither of those things is a part of the language, and \"types\" is entirely unrelated to the reasons eslint-plugin-react needs to know about the React and createClass pragmas (which relate to using alternative renderers to React itself).. It seems like we\u2019d need a setting to specify \u201ccreateElement\u201d and whether it should chain it off the pragma or not.. Since makeComp is not a component, it's an HOC, are you saying that MyComponent isn't being treated as a React component in the second example?. Since makeComp is not a component, it's an HOC, are you saying that MyComponent isn't being treated as a React component in the second example?. aha, thank you.. aha, thank you.. Yeah you need to use the command line - in the future, please have a collab do it for you instead of opening up a duplicate PR. Yeah you need to use the command line - in the future, please have a collab do it for you instead of opening up a duplicate PR. It's not really about \"cooperation\", but certainly both rules should be able to detect used props in nextProps identically.. It's not really about \"cooperation\", but certainly both rules should be able to detect used props in nextProps identically.. It was reverted in https://github.com/yannickcr/eslint-plugin-react/commit/e9fb52d332e15686865952371c333b19af13eede#diff-aca6d5d9aa8669fa64844849538bc0a0 And nobody\u2019s tried to add it back yet.\nSince it was a bug - a temporary one - it seems a silly thing to be afraid of. You can upgrade and remove the parameter and you\u2019ll be fine.. It was reverted in https://github.com/yannickcr/eslint-plugin-react/commit/e9fb52d332e15686865952371c333b19af13eede#diff-aca6d5d9aa8669fa64844849538bc0a0 And nobody\u2019s tried to add it back yet.\nSince it was a bug - a temporary one - it seems a silly thing to be afraid of. You can upgrade and remove the parameter and you\u2019ll be fine.. I agree with @lencioni's naming comments.. @jomasti what do you think about my v14/v13/v15.0/v15.1 question?. @jomasti what do you think about my v14/v13/v15.0/v15.1 question?. @jomasti hm, that's a fair point - considering it'd just \"do nothing\" in a React where PureComponent also does nothing, it's probably not worth doing.. @jomasti hm, that's a fair point - considering it'd just \"do nothing\" in a React where PureComponent also does nothing, it's probably not worth doing.. I'll merge this tomorrow if there's no objections.. I'll merge this tomorrow if there's no objections.. Hmm, that makes sense that \"invalid\" isn't the best name. extra works, I suppose - or no-superfluous-default-props, or some other synonym?. I do think it belongs as a separate rule since it warns on defaults, not prop types.. A defaultProp for a required prop is arguably not \"useless\" since it may serve as documentation (not that I would ever use the option that allows it) so I don't think that's the right word.\nunnecessary could work too (along with extra or superfluous).\nno-unused-default-props would be good but there's no safe way to tell if the user uses it, only if React will use it.\nLet's keep bikeshedding on the name, might as well pick the best one now.. What about default-props-match-prop-types?. I think default-props-match-prop-types is good, and checking for matching types would be enabled in that rule via an additional option :-). I think matching the types will likely only be possible when using the built-in PropTypes validators, or else it'd have to actually pull in and evaluate any custom prop types - but that's a discussion for that separate PR.\nI think \"match\" doesn't necessarily connote \"types match\", which is why I don't think having the option to match types is a blocker. I mainly just want to get this in, and I think that's a good enough name \u00af\\_(\u30c4)_/\u00af . Sorry for the delay. I'll give this another day or so, and if there's no objections, I'll merge it.. Sorry for the delay. I'll give this another day or so, and if there's no objections, I'll merge it.. @webOS101 yes, thanks, that'd be great!. (Unrelated, but you may want to check out enzyme rather than creating your own renderers). @nickbouton would you mind filing a new issue about it?. If you'd like to add your test in a PR, that'd be great :-). There's not really a good way to detect SFCs without treating all jsx-returning-functions as components.\ngetMessage is a function that returns jsx, so it should instead be an SFC (from an idiomatic React standpoint).. Then the rules requiring that all used props have propTypes wouldn't be able to catch components where propTypes has been forgotten.. The idiomatic approach here in React is to always make a component rather than a jsx-returning function. Doing so just happens to avoid issues with this plugin's component detection.\n@sfletche all the rules have to work in concert. Certainly we could add a global setting that would treat functions that have no React statics attached as non-SFCs, but that doesn't seem like a satisfying solution.\nIs there a reason that both of you can't change your function to an SFC?. It would allow you to add propTypes to each of those subcomponents, test them separately, and allow React to do more optimization on the render tree.\nAt any rate that's orthogonal to the issue here, for which we don't have a good solution.. That's our policy in Airbnb's codebase and it tends to work out just fine, ftr.\nAt any rate, one possible component detection modification could be that if a jsx-returning-function that has no React statics (propTypes, defaultProps, contextTypes, childContextTypes, etc) is both invoked as a normal function, and not used in a jsx element context, in the same file, we could treat it as \"not a component\". That seems like it'd cover at least a few of these use cases without reducing the utility towards actual components?. @lancempoe i'd either inline that logic directly inside render, or i'd make it a separate component.. Logic in a render (or a logic function invoked in a render) is totally fine! As long as render is purely based on props and state (pure in the no-side-effects sense) then it's great.. That naming convention also identifies, by convention, any function used as a constructor, so there's no way that would work.\nIn general, don't worry about performance at all until after everything is correct, working, and tested. SFCs are more appropriate than renderFoo methods; use them until your app has speed issues.. Indeed, it should be:\njsx\nfunction Hello (props) {\n    return (\n        <div\n            className=\"hello\"\n        >\n            Hello\n        </div>\n    );\n}\nor\njsx\nfunction Hello (props) {\n    return (\n        <div className=\"hello\">\n            Hello\n        </div>\n    );\n}. I took the liberty of rebasing this - it was pretty tricky. I'll merge once tests pass.. In other words, forbidding spread props, but just of the entire props object?\nThis seems pretty useful. I'd actually want to forbid spread props in all cases, so that maybe could be configurable.. @thoiberg you can use https://npmjs.com/prop-types-exact on each of your components to help catch that, but the linter rule is also great :-). If instead of overloading getInitialState, you made getInitialState and cWRP both call into the same shared closed-over function, would everything work?\nI'm not sure supporting any arguments to getInitialState (which takes none, and is part of the severely deprecated React.createClass pattern) is a good idea.. Ah, I'd misunderstood - this isn't React.createClass, you're just using the method name \"getInitialState\".\n```js\nfunction getInitialState(props) {\n  const { email } = props.params;\n    return {\n      email\n    };\n}\nclass Foo extends React.Component {\n  static propTypes = {\n    params: PropTypes.object.isRequired\n  };\nstate = getInitialState(this.props);\ncomponentWillReceiveProps(nextProps) {\n    this.setState(getInitialState(nextProps));\n  }\n}\n```. Using the default value means it's branched on using both, and that's not something that can be statically determined.. Passing the entire props object around is an antipattern anyways. Destructure it and pass things as separate arguments.. @RiddleMan it's up to you; generally it's better for the maintainers when a PR isn't a WIP, but generally it can save some back-and-forth reviews for you if you put it up sooner than later.\nIf you don't mind the review iterations, I'd wait til you have it working (with tests) :-). Did you figure it out?. With babel-eslint, you don't need any of those parserOptions.\nI'm not sure why you're getting that error tho - is this on the command line, with a locally installed eslint?. Also, upgrade to eslint 3 - v2 is obsolete.. Good, eslint shouldn't be installed globally :-)\nwhat's wrong with keeping v2 is that it's not the latest, and you should always strive to be on the latest version of things.\nwhat version of babel-eslint is it?. @akshaymodi9 same solution - upgrade to latest everything, and make sure sourceType is set to \"module\" somewhere in your config.. No, we can\u2019t; no, it\u2019s not; this is something you have to configure for yourself in your own app.\nThis has been answered; closing.. It would absolutely be helpful to gist the source file it crashes on, thanks!. @phyllisstein I assume https://gist.github.com/phyllisstein/04036a187aa4c2d4195a67cefb4170cb#file-button-jsx-L112-L119 is the problem - if you remove https://gist.github.com/phyllisstein/04036a187aa4c2d4195a67cefb4170cb#file-button-jsx-L113 does the problem go away? (if not that, this?). Interesting - probably because it's an arrow function class property. If instead (which would be much more performant) it was a true instance method, and you did this.handleClick = this.handleClick.bind(this) in the constructor, I suspect it'd work.\nThanks though, this should be very helpful to fix the bug.. Yes, in the constructor once, instead of thousands of times once per render.. Yes, that's true. But at that point the meat of the function isn't in an optimized prototype method, its newly created on every render. Constructor-bound prototype methods are the best approach.. @Hypnosphi yes, you're right that your example isn't about the render path. However, https://github.com/yannickcr/eslint-plugin-react/issues/1101#issuecomment-297098189 still applies.. Yes, please do that. It will take much longer if it needs to wait for a major release, and this PR's diff will be cleaner.. @yannickcr @lencioni @EvNaverniouk ping for review. @wbinnssmith would you mind freshly rebasing this? after that, i'll give it a rereview, and then merge ASAP if there's no objections from other collabs.. @wbinnssmith would you mind freshly rebasing this? after that, i'll give it a rereview, and then merge ASAP if there's no objections from other collabs.. You don't need to create a new RuleTester instance - the constructor argument is just the default parser options; each valid/invalid example can also provide its own parser options.. Sorry for the inconvenience; I've just merged a refactor to start using arrow functions. Would you mind rebasing?\nI'll merge within the next day or two, if no objections, after that's done.. Whoops, this needs documentation. @wbinnssmith, if you could file a PR to fix #1351, that'd be great!. What is [].suppoerted? that's not a property that would exist on arrays?. What order does it want if you do initialized = true; (ie, if you remove the type annotation)?\nI suspect that the \"type annotations\" ordering isn't considering initializers as being type annotated - since initialized: boolean is flow-only, but initialized: boolean = true is a normal thing that's flow-annotated.. Right - because \"initializes a value\" takes precedence over \"type annotation\". This seems correct to me.\nIf you want the type annotation up top, I think you should use two statements - initialized: boolean and then initialized = true.. That is entirely accurate - if NotFound expects a prop, it should be defining that prop in propTypes.\nreact-router may provide propType definitions for it already, but whether they do or not, you'd still need to explicitly connect them.. That sounds like a much better propType :-). Duplicate of/related to #56 . Yes, that seems reasonable.. No, the spec for await means that the line after the await will be async no matter what is returned.. ahh, i see what you mean. sure, async functions execute synchronously until the first await, and if that code path isn't traversed, it will remain sync.. You're right; we'd have to treat a setState as sync unless all possible code paths included at least one await.. Rarely isn\u2019t the same as never; it\u2019s better to overwarn than underwarn here imo.. I\u2019d prefer to fix the default so it properly warns.. There's no news; the state of this issue is that it is still awaiting a PR.. There's no news; the state of this issue is that it is still awaiting a PR.. Closing pending a repro.. @yannickcr it'd be great to get a release out with this fix in it; any chance you'll have time soon?. We need to support both versions of flow, so reverting it wouldn't work by itself . Seems reasonable. However, this rule would have to warn any time the entire props object is passed to a function (which is a bad practice anyways) because that makes it impossible (in most cases) to determine if it's being mutated.. @pgangwani #1416 isn\u2019t merged yet.. You can read the PR to find out the challenges.\nReally, stopping mutation isn\u2019t something that can be done with static analysis - you can do it in your tests more reliably.. This is how I'd indent your code:\n```jsx\nconst header = this.props.header ? (\n  <HeaderElement\n      className=\"myclass myclass2\"\n      isExpanded={this.state.isExpanded}\n\n{this.props.header}\n\n\n ) : null;\n```\n\nDoes that example help?. @yannickcr #1118 has some extra test cases.. Thanks, all fixed!. This is a duplicate of #1117 - thanks for the extra test cases!. Replaces #1078. Should this only apply when the react version setting is >= v15.3?. (also, why use an expression in that example and not class Foo extends \u2026?. That\u2019s just defeating the purpose of the rule. Might as well turn it off.. @vkosovskikh I'm not sure what your question is.. Ah yes, by not returning ReactDOM.render. Good call :-). @MatthewHerbst no, not necessarily.. The proper way to handle this is not to pass the entire props object around. It's not practical or often possible for the plugin to follow references, and the only thing that should get a props object is an element.\nIn other words, pull status out prior to passing it to the function.. That test was removed here: https://github.com/yannickcr/eslint-plugin-react/commit/6e5f688065aa218d71742dc4b31929c16ab1078d#diff-93c6a0eb3f976d39af0b0a8843ddba24L215\nand then restored here: https://github.com/yannickcr/eslint-plugin-react/commit/e9fb52d332e15686865952371c333b19af13eede#diff-93c6a0eb3f976d39af0b0a8843ddba24R215\nIntentional or not, this feels like a flaw in the rule - literals should have their indentation enforced just like anything else.. That test was removed here: https://github.com/yannickcr/eslint-plugin-react/commit/6e5f688065aa218d71742dc4b31929c16ab1078d#diff-93c6a0eb3f976d39af0b0a8843ddba24L215\nand then restored here: https://github.com/yannickcr/eslint-plugin-react/commit/e9fb52d332e15686865952371c333b19af13eede#diff-93c6a0eb3f976d39af0b0a8843ddba24R215\nIntentional or not, this feels like a flaw in the rule - literals should have their indentation enforced just like anything else.. It's still open, so I don't think so.. Sounds great!\nYou can also mark the rule itself as deprecated in its metadata.. Closed with #1070.. Why \"void, Props, void\"? props are the first argument to the constructor; what's the first void for?. can you explain a bit about how Flow handles that syntax in a generic way, such that I'd use it on a non-React component?. @phpnode would you mind rebasing this on top of latest master? #1236 may also be related/overlap with this PR.. @phpnode would you mind rebasing this on top of latest master? #1236 may also be related/overlap with this PR.. @jseminck can you confirm that #1377 made this PR obsolete?. That seems like a reasonable argument. I'm good with just adding this rule.. Of course there is; an empty string.. null, of course - it has the same typeof value for a reason.. #1232 hopefully has solved this; we can reopen after the next release if not.. @mqklin could you file a new issue about that?. Yes, that's a fair point.. I think an option added to the current rule would be great; we could default it to false for now and true in a later semver-major PR.. @EvNaverniouk I think it's a flaw in the prop-types rule in particular that any validator named \"shape\", for example, assumes the semantics of PropTypes.shape - but you're right that that means it's not a blocker for React 15.5.\n@kentor if that's the case, then perhaps we should default createClass to createReactClass when the version is 15.5+?. Thanks - we have more v7 PRs that need to be merged before a real v7 can go out, but as long as breaking changes can go in between RCs this is fine :-)\nI'll close this for now.. In the future it'd be preferable to ask maintainers to add your commits to the original PR; replacement PRs are clutter.. Nah at this point it's open, we'll continue with that :-). Can you provide the exact linting errors you're getting?. My guess is if you fix the real error on line 2, the false error on line 6 will disappear.. My guess is if you fix the real error on line 2, the false error on line 6 will disappear.. That isn't calling anything; that's defining a method named \"render\" on your class, which React calls for you. You don't need to import a render method.. That isn't calling anything; that's defining a method named \"render\" on your class, which React calls for you. You don't need to import a render method.. K, one more confirmation - if you name Button as anything else - specifically, something that if lowercase wouldn't be an HTML tag name - do you still get the error?\nIf not, it should be a straightforward bug for us to fix :-). K, one more confirmation - if you name Button as anything else - specifically, something that if lowercase wouldn't be an HTML tag name - do you still get the error?\nIf not, it should be a straightforward bug for us to fix :-). It would have impact on bundle size for any app, including CRA - although treeshaking may mitigate that a bit. . I disagree; i think everything that's not initializing state belongs in componentWillMount.\nAsync requests in the constructor have the same issues; neither us often a problem in practice.\nI'm a strong -1.. I disagree; i think everything that's not initializing state belongs in componentWillMount.\nAsync requests in the constructor have the same issues; neither us often a problem in practice.\nI'm a strong -1.. Side effects in JS never belong in constructors. If React advises that, they are wrong.. Side effects in JS never belong in constructors. If React advises that, they are wrong.. Indeed, fiber may change the timing of some of these things. But fiber isn't out yet, and if the issue is doing async things prior to the first render, then constructor vs componentWillMount has the same problem.\nIn other words, I'm still not seeing a reason to discourage componentWillMount - you've only talked about async setStates initiated prior to mounting.. Indeed, fiber may change the timing of some of these things. But fiber isn't out yet, and if the issue is doing async things prior to the first render, then constructor vs componentWillMount has the same problem.\nIn other words, I'm still not seeing a reason to discourage componentWillMount - you've only talked about async setStates initiated prior to mounting.. I'm not sure where you get \"significant number\" - that github issue is full of people who simply don't see a need for the method, with very very few claiming that its use should be discouraged.\nSo yes, I'm opposed to adding the rule at all.. I'm not the only collaborator; this should remain open pending the others' thoughts.. I'm not the only collaborator; this should remain open pending the others' thoughts.. Afaik there's still active discussions going on with core devs about it; I don't believe they've made a compelling case. Note that Facebook doesn't server-render, and their position on componentWillMount is one that is not shared by other stakeholders that do server-render.. Afaik there's still active discussions going on with core devs about it; I don't believe they've made a compelling case. Note that Facebook doesn't server-render, and their position on componentWillMount is one that is not shared by other stakeholders that do server-render.. My comment stands, as does this one.. My comment stands, as does this one.. To clarify; my preference is to not include the rule, so that nobody is ever able to turn it on.. To clarify; my preference is to not include the rule, so that nobody is ever able to turn it on.. It\u2019s not yet possible to recommend alternatives for every use case, nor have they actually been deprecated yet.\nWhen React provides enough replacements for cWM etc, then we\u2019ll definitely make linting rules to cover them.. It\u2019s not yet possible to recommend alternatives for every use case, nor have they actually been deprecated yet.\nWhen React provides enough replacements for cWM etc, then we\u2019ll definitely make linting rules to cover them.. This seems handled by #1750.. (linking to #1144). (linking to #1144). @yannickcr i'm fine with not handling destructuring in this PR (especially if you're working on adding it asap), but named imports should be handled, no?. @Adzz here would be great, thanks :-) please rebase them all down to a single commit.. @Adzz here would be great, thanks :-) please rebase them all down to a single commit.. Sure, that'd help. However, that's a requirement to use any eslint plugin; it's in eslint's own docs.. Sure, that'd help. However, that's a requirement to use any eslint plugin; it's in eslint's own docs.. Why is that a problem?\nThe point of the rule is that defaultProps are explicit' it doesn't matter at all what their value is.. It's not required by JavaScript. It's required by this rule, since an explicit undefined is much much better than an implicit one.. @enricotelesca yes, and in fact that would increase performance of obj if obj.bar were ever set to something else, because it would be doing it without changing the \"shape\" of the object.. I can't conceive of how this could ever become a problem. Why are people doing this in the first place?\nThe issue with jsx-no-bind is primarily that .bind is slow, and only secondarily that creating any new functions in the render path prevents === optimizations and increases GC (this turns out to not be that bad for performance in actual practice).\nIf we want to handle other patterns, what about creating new arrays and objects in the render path? What about function calls that do this and return them into the render path?. I can't decide if I'm -1 or +1 on it; I think a generic configurable rule that tries to prevent any new creation of things in the render path might be more useful? but that also might be too hard to achieve.. Fixed in #1341 :-). @sigorilla this is a bug in jsx-ast-utils; see https://github.com/evcohen/jsx-ast-utils/issues/31. @Dimon70007 this does help to develop apps - and bad practices (like not providing default props for optional prop types) need to be obstructed.\nRegardless, this opinion and debate do not belong on this issue, or on this repo.. @Dimon70007 this does help to develop apps - and bad practices (like not providing default props for optional prop types) need to be obstructed.\nRegardless, this opinion and debate do not belong on this issue, or on this repo.. It should perhaps be recommended when allowing arrow functions; but it's too heavy imo to make it recommended when it blocks all new function creation, since .bind is the primary source of performance issues.. From an ideological standpoint, yes. But unnecessary renders aren't that slow in practice.. The error is exactly correct - you defined a propType without defining a defaultProp for it.\nI agree that the property name showing up as \"undefined\" in the error message is a bug.. @Ralf8686 this issue is over a year old; please file a new issue if you're having trouble.. Both React.createClass and React.PropTypes are officially deprecated as of v15.5; but we should still fix this case.. Ah, when the PR says fixes #x github does it for me :-)' (on merge)\nFixed in #1303.. React.createClass is officially deprecated as of React v15.5; we should still fix the former case tho.. Closed in #1223.. @yannickcr @lencioni @EvHaus thoughts?. These aren't exclusive options, they're use cases :-) also there's two lists, which \"option 2\" do you have in mind?. Yes, that's what it's already doing - but in my example, I need \"always require an explicit name\", because I never want to rely on name inference.. Please be sure to absolutely not include a yarn lockfile; we don't use yarn, and non-apps shouldn't have lockfiles.. I'd say a separate linter plugin is the right solution here; this plugin is for react.. Can you share your component code?. You haven't defined salesmenActions in your propTypes (which is what the error message says).\nEvery prop you use needs to be explicitly defined in propTypes.. You defined \"salesmen\" already - define salesmenActions in a similar way.\nThis seems like more of a question about how React PropTypes works tho, and not about this eslint plugin. I'm going to close, but feel free to continue the discussion here.. There's no way for the rule to know if .map is being called on an array or not; you'd have to disable the rule overall, or override it for this one case.. This is fixed in v7 - the new allowGlobals option will default to false. Setting it to true will replicate the current behavior.\nThis also happens with Text, for example.. Hi! Please share text, not screenshots of text, so we can help you best.\nYour screenshot has 4 errors; 2 of them will be resolved if you add dispatch: PropTypes.func to your propTypes.\nThe array error is because the rule wants you to use arrayOf, and be explicit about the contents of the array, as well.. I would prefer people default to filing issues first; defaulting to stack overflow is the best way to make sure the core devs can't instantly tell you the solution to your common problem.. Then you would disable the rules - but since it's a massive best practice across the entire ecosystem to have them, I don't recommend it.. Then enable the rules in the files that have them.\nNo matter how large the project, even if adding propTypes everywhere is a massive change, then that's what's needed.. What about if you have explicit whitespace instead?:\njsx\nconst Item = ({ id, name, onSelect }) => (\n  <div onClick={onSelect}>\n    {id}\n    {': '}\n    {name}\n  </div>\n);. Thanks for clarifying.\nWhile it's decidely a best practice to make whitespace explicit instead of relying on jsx to handle it intuitively, your original case is clearly a bug.. If so, we can close this with a PR containing the test case.. Seems like with #1179 and #1180 merged, this needs a rebase?. @fatfisz please rebase on the command line and force push, so that there's no merge commits. Git logs aren't history, they're change logs - nobody ever needs to know how many times you merged master. Also, merge conflict resolutions in a rebase are preserved for future cherry pickers; conflicts resolved in a merge potentially force developers to re-resolve the same conflicts. It also generally takes precisely the same amount of time to solve a conflict in a merge as it does in a rebase.. Commits should ideally be atomic and thus each represent a conceptual change. Naive squashing is fine, but it can cause two changes to be combined where they should be separate.. (The appveyor failure appears to be an npm install fluke, so i'm going to merge as-is). (The appveyor failure appears to be an npm install fluke, so i'm going to merge as-is). @102 https://github.com/yannickcr/eslint-plugin-react/issues/1251#issuecomment-307773556. @102 https://github.com/yannickcr/eslint-plugin-react/issues/1251#issuecomment-307773556. @rosskevin would you open a new issue for that, that links back to this one? The OP is fixed; your issue is slightly different :-). Are you sure? Only React 15.5 prints that out. What does npm ls say?. try npm ls | grep react?. ahhh right, sorry. yes, that message is coming from this plugin.\nI originally expected the deprecation warning would only print out on React 15.5 (per the version you specify in your config), but it seems it applies with all v15 versions.\n@yannickcr, what do you think about restricting this check to 15.5+ only?. @yannickcr right, but if I specify in settings that your version is \"15.0\" or \"15.4\" - as opposed to \"15.5\" - then i'd expect not to get this warning.. Ah, thanks for clarifying.\n@almirfilho have you specified v15.4 in your settings?. Thanks, good to start somewhere.. Thanks, good to start somewhere.. I believe this may be fixed with #1218. Please reopen after the next release if not.. I believe this may be fixed with #1218. Please reopen after the next release if not.. It should not; defaultProps are not the same as ES6 destructuring (although both only apply to undefined). In addition, defaultProps provides information to React, which handles the defaulting; by using ES6 defaulting, you're depriving React of the ability to optimize based on it.. #666 may be relevant here.. My interpretation of the original intent of the rule is to require a defaultProps entry for each non-required propType, not to prevent undefined property values (especially since undefined is a valid defaultProps value).. Flow is not a complete replacement for PropTypes, as there's many things custom propType validators can do that Flow can't. I don't see the issue in using both Flow and defaultProps.. Any chance you're using the airbnb eslint config (which doesn't yet support v7 of eslint-plugin-react) and v7 of eslint-plugin-react? If so, npm ls should tell you your dependencies are invalid.\nIf not, what version of eslint-plugin-react are you using?. That rule only exists in v7 - it was added in #1139.\nYou won't be able to enable it until eslint-config-airbnb releases a new semver-major that supports v7 of eslint-plugin-react.. Prettier doesn't \"solve\" this; the goal is to be able to lint against it without modifying any files.. Prettier doesn't \"solve\" this; the goal is to be able to lint against it without modifying any files.. I agree the props there should be indented 1 level in.. I agree the props there should be indented 1 level in.. #1317 isn't quite ready yet, according to its OP.. The linked PR was closed, so this is again in need of someone willing to write a fix.. What I\u2019d suggest to make it work best is to wrap multi line jsx in parens.. Duplicate of #1184. That sounds like a good idea. It should probably check for any case variant of propTypes and defaultProps and contextTypes etc, and ensure that none of them exist unless they're the proper casing.. We could call it no-static-typos or something. (Fixed in #1209). Seems like you'd need a new rule for that.. Seems like you'd need a new rule for that.. Correct, all rules need a \"react/\" prefix. A PR is welcome.. Fixed in #1192.. @suwigyarathore no it's not? https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md#rule-options\nThe issue was in the docs; prop-types in your eslint config will never work.. That's expected when there's no options.. If you have an Icon component, what do you still need <i> for?. (forbid-elements can ban <i>, and forbid-component-props can ban className, but there's definitely not currently a way to combine these, or provide a filter on the value). I absolutely could see the value in banning specific combinations of \"component\" and \"prop\" - however, I think that it would get potentially very complex to let you ban specific prop values on top of that. Would banning className on i only, solve your problem?. In that case, perhaps a schema enhancement on forbid-component-props is in order, so you can do ['badProp', { component: 'i', prop: 'className' }, 'otherBadProp']?. @dgcoffman can you clarify what \"stopped working\" with 7.7, and would you be able to figure out if it worked in 7.5 and 7.6?. I\u2019m confused; in that example, it\u2019s decorsting \u201caVariable\u201d - so that\u2019s what should get sorted (the decorator name just goes along for the ride). Maybe so. Either way tho, the decorator name is irrelevant since it\u2019s not the thing being sorted; we\u2019d have to do something special to allow you to specify that you want the decorator name to apply.. React itself will issue those warnings.. No, eslint doesn't duplicate every runtime warning. Your tests have to handle that.. That's something static, defined in the file.\nTo warn on what you want, eslint-plugin-react would have to duplicate the list of valid DOM element props from inside React.. Oops, good call :-). Oops, good call :-). After making the updates, please rebase this down to a single commit :-) thanks!. (note, class properties aren't ES7, which came out in June of 2016, they're stage 2 - so they're not ES anything yet)\nsubrender is a function that returns JSX, so in general, that's a component - whereas a class method is not. Separately, both for correctness and performance, you want that to be a class method that's manually bound in the constructor.. (note, class properties aren't ES7, which came out in June of 2016, they're stage 2 - so they're not ES anything yet)\nsubrender is a function that returns JSX, so in general, that's a component - whereas a class method is not. Separately, both for correctness and performance, you want that to be a class method that's manually bound in the constructor.. That's unfortunate, but \"encouraged by the React team\" doesn't mean they're right :-)\nBasically, instead of creating N functions, one for each instance, you'd instead have 1 prototype function for all instances, and the only part that would be created N times is the this.foo = this.foo.bind(this) - leaving the engine able to optimize the \"meat\" in the prototype method. This is a JS thing, not specific to react. Public class properties are appropriate for data; not for functions/methods.. That's unfortunate, but \"encouraged by the React team\" doesn't mean they're right :-)\nBasically, instead of creating N functions, one for each instance, you'd instead have 1 prototype function for all instances, and the only part that would be created N times is the this.foo = this.foo.bind(this) - leaving the engine able to optimize the \"meat\" in the prototype method. This is a JS thing, not specific to react. Public class properties are appropriate for data; not for functions/methods.. > But manually binding in the constructor, then setting it as a property on the instance does the same thing, so in those cases there would be no performance benefit.\nThat's only true if you only new the component once. If it's constructed multiple times, then you absolutely get a benefit when using the constructor-bound approach.\ntbh, I'd still say that renderIcon should be an Icon SFC, no matter how simple it is.\nRegardless, eslint-plugin-react has no way of knowing that a function that returns JSX isn't a component, unless it's a class method (which technically could be a component, but is highly unlikely to be).. > But manually binding in the constructor, then setting it as a property on the instance does the same thing, so in those cases there would be no performance benefit.\nThat's only true if you only new the component once. If it's constructed multiple times, then you absolutely get a benefit when using the constructor-bound approach.\ntbh, I'd still say that renderIcon should be an Icon SFC, no matter how simple it is.\nRegardless, eslint-plugin-react has no way of knowing that a function that returns JSX isn't a component, unless it's a class method (which technically could be a component, but is highly unlikely to be).. Interesting - do you see the same behavior when you omit the type notations?. Interesting - do you see the same behavior when you omit the type notations?. In that case, it seems like it's a bug with the Flow parser, since it should probably not alter the way non-type-annotated nodes are parsed.. In that case, it seems like it's a bug with the Flow parser, since it should probably not alter the way non-type-annotated nodes are parsed.. While unnecessarily quoted keys isn't my preferred style, I agree this should work. I think it should also work as a computed template literal with no interpolations.. While unnecessarily quoted keys isn't my preferred style, I agree this should work. I think it should also work as a computed template literal with no interpolations.. That seems like you just haven't configured babel to handle class properties - remember that it's not part of the spec yet, it's a stage 2 proposal.. That seems like you just haven't configured babel to handle class properties - remember that it's not part of the spec yet, it's a stage 2 proposal.. The no-deprecated rule should handle this.. The no-deprecated rule should handle this.. Flow isn't always a replacement for propTypes - you can do things with custom propTypes that you can't do with Flow.\nA rule that required you use Flow types instead of the built in prop-types package might make sense, but I'm not sure how valuable it'd be.. Flow isn't always a replacement for propTypes - you can do things with custom propTypes that you can't do with Flow.\nA rule that required you use Flow types instead of the built in prop-types package might make sense, but I'm not sure how valuable it'd be.. I strongly endorse https://npmjs.com/airbnb-prop-types; you can get much more useful warnings than Flow is capable of giving you ;-)\nA new rule, require-flow-vs-proptypes is probably good, that starts out with no options and only warns against React.PropTypes/prop-types.. I strongly endorse https://npmjs.com/airbnb-prop-types; you can get much more useful warnings than Flow is capable of giving you ;-)\nA new rule, require-flow-vs-proptypes is probably good, that starts out with no options and only warns against React.PropTypes/prop-types.. This sounds great - essentially, \"must be on the same line, or must be on its own line that matches the indentation of the opening tag\"?\njsx-closing-tag-location, perhaps.. This sounds great - essentially, \"must be on the same line, or must be on its own line that matches the indentation of the opening tag\"?\njsx-closing-tag-location, perhaps.. (Done in #1215). (Done in #1215). I'd love to add this to the airbnb config, since this is precisely what our style guide requires.\nI feel like this might be better as an option to jsx-wrap-multilines, but I could be convinced it should be a new rule.. I'd love to add this to the airbnb config, since this is precisely what our style guide requires.\nI feel like this might be better as an option to jsx-wrap-multilines, but I could be convinced it should be a new rule.. There's four existing syntaxes: declaration, assignment, return, arrow - this could be a fifth. Maybe standalone?. There's four existing syntaxes: declaration, assignment, return, arrow - this could be a fifth. Maybe standalone?. Those two changes sound good.. Those two changes sound good.. I would also expect the latter.\nWhich rule is warning on it if you omit --fix?. It seems like #1475 covers this.. Can you provide examples of what warnings you get with prop-types that you don't get with React.PropTypes?. Can you provide examples of what warnings you get with prop-types that you don't get with React.PropTypes?. We'd need the actual component code that was causing warnings.. We'd need the actual component code that was causing warnings.. @ipiz it's Button.propTypes, not Button.PropTypes.. @sharbel-keyvalue could you provide the actual component code that's causing your warnings?. Detecting spelling mistakes seems like a slippery slope.. Detecting spelling mistakes seems like a slippery slope.. Indeed, I'm talking about assigning it outside the class - this should apply to the currently-standard Foo.propTypes = {} as well as the not-yet-standard class properties form.. We have Components.detect used elsewhere in the project which should be able to handle that for you.. Components.detect?. Components.detect?. I expect, from the implementation, that computed property names are ignored. I'm asking for tests to ensure they are ignored - to prevent them accidentally being considered in the future, and to ensure that considering them is a breaking change.. What if you set the default to undefined?. What if you set the default to undefined?. To me that sounds like a flow bug - maybe types should be compatible with defaultProps. It'd be great if you filed a flow issue and linked it here.. To me that sounds like a flow bug - maybe types should be compatible with defaultProps. It'd be great if you filed a flow issue and linked it here.. Everything in js always has a value - when a maybe type is omitted, it'd be undefined, so at a minimum, that's what flow should allow. Equating undefined and null is also reasonable, if they decide to do it.. Everything in js always has a value - when a maybe type is omitted, it'd be undefined, so at a minimum, that's what flow should allow. Equating undefined and null is also reasonable, if they decide to do it.. @romulof defaultProps are important runtime information that's needed, and only having a flow type deprives the runtime of that info.. Good catch!. Good catch!. You're right that this is a bug in Flow (you should be able to specify a defaultProp of undefined, or possibly null).\nThis is a duplicate of #1210, and the Flow issue is https://github.com/facebook/flow/issues/3982.. You're right that this is a bug in Flow (you should be able to specify a defaultProp of undefined, or possibly null).\nThis is a duplicate of #1210, and the Flow issue is https://github.com/facebook/flow/issues/3982.. That's intentional. SFC default values are not a substitute for defaultProps.. That's intentional. SFC default values are not a substitute for defaultProps.. Then the solution is to make the implementation shorter, clearly :-)\nFor one, React applies defaultProps on its own; it can't read into default values.. Then the solution is to make the implementation shorter, clearly :-)\nFor one, React applies defaultProps on its own; it can't read into default values.. shouldComponentUpdate takes nextProps - what happens if you name the argument that?. shouldComponentUpdate takes nextProps - what happens if you name the argument that?. If instead of a Flow type, you used standard .propTypes, do you get the same error?. If instead of a Flow type, you used standard .propTypes, do you get the same error?. Thanks, it seems like we need to make no-unused-prop-types work with shouldComponentUpdate.. Thanks, it seems like we need to make no-unused-prop-types work with shouldComponentUpdate.. The workaround would be an eslint override comment.. The workaround would be an eslint override comment.. #1232 hopefully has solved this; we can reopen after the next release if not.. I'm not sure what react-codemod has to do with anything.\nIt sounds like a great idea to make this rule autofixable, but I think it might be complex because eslint's autofixing can only do text replacement, so it might require multiple passes to sort properly.. I'm not sure what react-codemod has to do with anything.\nIt sounds like a great idea to make this rule autofixable, but I think it might be complex because eslint's autofixing can only do text replacement, so it might require multiple passes to sort properly.. I agree with you that it should be handled in a separate rule.. I agree with you that it should be handled in a separate rule.. Thanks!\n1, 2, and 3 are more appropriate for eslint-plugin-import. If you can't currently cover it with existing rules, please file issues there (and we can discuss further).\n\n\nClass properties are not yet a part of the language - they're only stage 2 - so I think it's way too premature to create a rule requiring their use. Regardless, this should be a core rule once it's stage 4, not part of eslint-plugin-react (since you'd want to enforce it for every kind of class).\n\n\nthis is unnecessary; if it's not used, eslint's \"no-unused-imports\" or \"no-unused-vars\" will catch it.\n\n\nThis seems like a great rule for us! Can you file a separate issue just for this one rule, so it can be tagged appropriately?\n\n\nI don't think this rule should ever be on by default anywhere, but it seems like a legit rule to create. Can you file a separate issue just for this one rule, so it can be tagged appropriately?\n\n\nThis is untenable, since you can't statically know if a given variable has a primitive or not within it. Effectively, this would prohibit anything but a literal primitive value in props, which wouldn't be useful.. Thanks!\n\n\n1, 2, and 3 are more appropriate for eslint-plugin-import. If you can't currently cover it with existing rules, please file issues there (and we can discuss further).\n\n\nClass properties are not yet a part of the language - they're only stage 2 - so I think it's way too premature to create a rule requiring their use. Regardless, this should be a core rule once it's stage 4, not part of eslint-plugin-react (since you'd want to enforce it for every kind of class).\n\n\nthis is unnecessary; if it's not used, eslint's \"no-unused-imports\" or \"no-unused-vars\" will catch it.\n\n\nThis seems like a great rule for us! Can you file a separate issue just for this one rule, so it can be tagged appropriately?\n\n\nI don't think this rule should ever be on by default anywhere, but it seems like a legit rule to create. Can you file a separate issue just for this one rule, so it can be tagged appropriately?\n\n\nThis is untenable, since you can't statically know if a given variable has a primitive or not within it. Effectively, this would prohibit anything but a literal primitive value in props, which wouldn't be useful.. One concern I have is that enabling this rule might encourage people to move clean inline jsx into renderFoo methods (instead of separate components, which would be the best).\n\n\nIt'd be great if this rule could also traverse to functions and instance methods to count the jsx; stopping counting only at component boundaries, not at function boundaries.. React components should never inherit from a \"base class\" - only from React.Component/React.PureComponent.. React components should never inherit from a \"base class\" - only from React.Component/React.PureComponent.. Why not, because inheritance is an inferior form of code reuse than composition, and even the React team strongly discourages it.\nThe workaround for you here is to use a jsdoc-style \"extends\" comment to annotate your class that it's a React component. I'm not sure of the exact syntax off the top of my head.. Why not, because inheritance is an inferior form of code reuse than composition, and even the React team strongly discourages it.\nThe workaround for you here is to use a jsdoc-style \"extends\" comment to annotate your class that it's a React component. I'm not sure of the exact syntax off the top of my head.. No. You can tell by clicking on the commit hash - 61b65a0 - and seeing that it's in master, but there's no version tags that it's in.. Nope; React would have no way to know you'd done that, so it wouldn't trigger a rerender. You should only change state with this.setState.. @supra28 i'm not sure what error you mean. can you file a new issue?. You can put a .eslintrc file in that directory with whatever overrides you want.\nHowever, it's still a better idea to explicitly specify the defaultProps, even if a reducer provides it - because if it always provides it, make it required; and if it doesn't, then you need a defaultProp for when it doesn't.. You can put a .eslintrc file in that directory with whatever overrides you want.\nHowever, it's still a better idea to explicitly specify the defaultProps, even if a reducer provides it - because if it always provides it, make it required; and if it doesn't, then you need a defaultProp for when it doesn't.. ```jsx\nfunction TabBarIcon({ tintColor }) {\n  return (\n    \n  );\n}\nTabBarIcon.propTypes = {\n  tintColor: PropTypes.string,\n};\nResourcesScreen.navigationOptions = {\n  tabBarLabel: 'Resources',\n  tabBarIcon: TabBarIcon,\n};. ```jsx\nfunction TabBarIcon({ tintColor }) {\n  return (\n    \n  );\n}\nTabBarIcon.propTypes = {\n  tintColor: PropTypes.string,\n};\nResourcesScreen.navigationOptions = {\n  tabBarLabel: 'Resources',\n  tabBarIcon: TabBarIcon,\n};. (This is awesome, btw, thanks!). Since this needs to wait for other collabs to review before merging, I'd say we'll play it by ear.. @RiddleMan if you're able to rebase this, it'd be great to land it :-). @RiddleMan if you're able to rebase this, it'd be great to land it :-). It's more complex. It needs to work with const { createElement } = React; \u2026 createElement(\u2026).. @moimikey that works great when it's invoked with zero arguments - but it wouldn't address that createElement(props) would trigger the same logic, no?. I'd think so, since there's a pragma setting to rename it if you like - ie, you can make \"MyCreateElement\" be your React.createElement function, but then that becomes a reserved word.. Adding a new dep is fine imo, but it should definitely be in a separate PR :-). Sure, it's worth making an additional PR for docs.. omit shouldn't matter, it's being referenced in your onMeasure handler.\nThis should be fixed; however, I'd recommend destructuring all your prop values out at the top of render, which would work around this problem.\n(also, you forgot to omit children). There's no way for any linter to know what you're dynamically picking - you should instead destructure those out like const { currentSubmission, addLocation, submissionFieldChange, cancelSubmission } = this.props;, and then it'll be able to detect it.. No, it's because someRandomPickFunction(this.props, 'any prop name') is impossible to statically determine as accessing \"any prop name\" on this.props. That's metaprogramming, and metaprogramming obstructs linting.\nThe proper solution is to statically reference all prop names out of this.props, which then enables many kinds of static analysis to be done on it.. @SuEric ah, sorry. that doesn't seem to be the entire code; could you provide the entire render method?. I'm not seeing why you wouldn't want to destructure everything that comes out of props in the top line of render?. I think there's a limit how much static analysis can be done to determine where props are used in the render path; the proper solution imo is to always destructure all props and state at the top of every instance method you use them in.. Maintaining a state machine in the linter rule to backtrack whenever a this.props reference is seen, and then later only warning on unseen ones, is a bit tricky. If it seems easy you are more than welcome to submit a PR that enhances the rule!\nIn general, though, destructuring all props and state at the top of the function makes things more readable - it places them right next to the arguments, so it's easier to reason about all the conceptual inputs to the function all in one place, and as a side benefit, all the linting rules about props suddenly give you much more value.. Closed in #1331.. This should certainly be fixed; but you may want instead to destructure the props in the signature, which would avoid this problem.. I think we'd need that behavior under a new option - but I like it, because renderFoo methods should always be SFCs.\nYour latter example shouldn't be an SFC, it should be a  class with a constructor-bound instance method. Using :: inline there is incorrect.. I'm going to merge this today if there's no objections.. @yannickcr any chance of a release soon, to get this fix in?. Sorry for the inconvenience; I've just merged a refactor to start using arrow functions. Would you mind rebasing?\nI'll merge within the next day or so, if no objections, after that's done.. The rule is for when you render anything that might be a PureComponent; not if the component in question is one.\nWhen you need to pass a function to an event handler that varies on props/state, you should only use a constructor-bound instance method.\nI do agree that ignoring DOM components in this rule makes perfect sense, though (as an option).. Yes, absolutely it would. The change to drop node < 4 is recent, and we just haven't gone through and updated everything to use patterns node 4 supports.\nWe also have to go through and convert every var to const or let, for example, as well as convert inline function callbacks to arrows.. So, setting aside \"errors while you're typing\", which isn't something that needs supporting, it looks like <div key />inside a .map throws this error?. In that case, it's setting the key to true - which is not a use of the index. Separately, it's making the key be the same, which defeats the purpose - but ensuring the key is unique across items is something that React could check at runtime, not something a linter rule could reliably enforce.. What errors do you get?\nIt looks like you're dynamically extracting prop values; there's no way a linter could know that's what you're doing. It'd be better to either hardcoded them everywhere, or, dynamically compute them everywhere.. why wouldn't you want to do <Toggle value />?. It sounds like then you wouldn't want \"ignore\", you'd instead want a setting that enforced \"always\" for that prop.. It sounds like then you wouldn't want \"ignore\", you'd instead want a setting that enforced \"always\" for that prop.. Although I don't personally agree with that style, an option to the rule to allow this works.\nWhat about, only with \"always\", a \"never\" option - and only with \"never\", an \"always\" option? Both options would be a unique array of prop names.. Although I don't personally agree with that style, an option to the rule to allow this works.\nWhat about, only with \"always\", a \"never\" option - and only with \"never\", an \"always\" option? Both options would be a unique array of prop names.. PR up: #1250. PR up: #1250. ping for reviews :-). ping for reviews :-). @yannickcr @lencioni @EvNaverniouk if you have a chance to review this that'd be appreciated :-). @lencioni updated per your comments; i'll merge tomorrow if there's no other issues.. The peer dep would need to be ^3 || ^4 for it work with both v3 and v4 - which it looks like it is, as of e7836b58a8c2da479d15866d0b7b4801554b7f1c - but that's unreleased.. The peer dep would need to be ^3 || ^4 for it work with both v3 and v4 - which it looks like it is, as of e7836b58a8c2da479d15866d0b7b4801554b7f1c - but that's unreleased.. @dustinsoftware are there other rules that could benefit from this information?\nIf so, maybe we should move it to \"settings\", and read from it in multiple rules?. Nope, not yet.. @mqklin because you haven't explicitly defined it as a propWrapperFunction in your eslintrc.\nPlease file a new issue if you still have questions instead of commenting on a merged PR.. @mqklin because you haven't explicitly defined it as a propWrapperFunction in your eslintrc.\nPlease file a new issue if you still have questions instead of commenting on a merged PR.. Please file a new issue for this breakage.. @rosskevin your attitude isn't going to help get this fix in; I'd rather close it out of hand and never accept the fix into the project, than entertain it :-/\nThere are plenty of style rules that projects follow that can't be linted for, and just because something isn't linted for doesn't mean you don't have to follow that style. Style isn't \"triviality\".. k, rebased it for you on top of a stricter master.. I would instead recommend const { isReturning, departureDate } = this.props.. (That said, this sounds like something worth fixing). createClass is deprecated; so you shouldn't be using it anyways.\nThat said, the bug should still be fixed.. createClass is deprecated; so you shouldn't be using it anyways.\nThat said, the bug should still be fixed.. This seems right.\nHowever. Perhaps createClass is a better default value for that pragma.. This seems right.\nHowever. Perhaps createClass is a better default value for that pragma.. props.yyy should only be allowed in class contexts if props can be statically determined to be this.props.. I think that it makes much more sense for React to own this, than for anyone in the ecosystem to do so - since React has the same logic internally. enzyme could also benefit from this.\n@gaearon et al, what do you think?. Fwiw, something for custom components already exists in airbnb-prop-types - require('airbnb-prop-types/build/helpers/getComponentName'). It'd just be better if it was a canon React implementation instead.. @gaearon in general terms, as the community creates packages like that, would react be willing to commit to adding regression tests for them, to prevent unknown breakage when react makes a new release? That's really the sole reason I think it'd be important to have it be \"from React\".. @gaearon https://github.com/facebook/react/issues/10051. I don't see the propTypes for Setup?\nalso, please provide code in text form, instead of screenshots :-). I definitely think that const { current } = props; will fix it, but thanks, I think this makes the bug clear :-). Happy to rereview after a rebase.. Certainly not with a duplicate PR, which I can never delete from my git history :-( Posting a link to the branch would be more than sufficient.. I've rebased this properly and pushed the changes up to here and to #1676.. I've rebased this properly and pushed the changes up to here and to #1676.. That's still considered \"children\", afaik - why not <div dangerouslySetInnerHTML={'<span>stuff</span>'} />?. Fair point - both your example and https://jsfiddle.net/ljharb/69z2wepo/80986/ implies it's a bug in eslint-plugin-react.. \"This rule prevents characters that you may have meant as JSX escape characters from being accidentally injected as a text node in JSX statements.\" - it's not because those entities are invalid, it's because it's impossible to know from looking at it if you meant it, or made a mistake.\nIn other words, they're not OK, because the programmer's intention is not clear.. Why are you using straight quotes in your text? That's typographically invalid - you should only be using \u201c \u201d \u2018 \u2019.. If external resources provided you with text that had spelling and grammar errors, wouldn't you want to fix those? Using straight quotes in text is a typography error.\nRe point 2, you can trivially set up your computer to autocorrect straight quotes to curly quotes in non-code contexts.\nIn general, I think that if you want exceptions to this rule, you'd be better off just disabling it.. Indeed, lots of sites use straight quotes when they shouldn't - linters are for those who want to do the right thing :-)\nI'd definitely not want an option that allowed for generic configurability, because many of the characters the rule blocks would be dangerous to allow - but I wouldn't block an option that specifically allowed straight quotes, if other collabs are inclined to add it.. @aij ' should be curly quotes in all prose contexts where it's not referring to \"minutes\" (as in, DMS notation).. A PR to improve the docs is always appreciated :-). A PR to improve the docs is always appreciated :-). Just to confirm; are you sure you're not inheriting settings from anywhere else?\nreservedFirst can only be an array or a boolean; it defaults to false.\nCan you confirm that npm ls exits successfully?. When npm ls exits nonzero, nothing can be expected to work properly, and often in the eslint ecosystem people can have incorrect peer deps installed.. Alternatively, if you can come up with test cases that don't already exist that fail, that would be super helpful!. buildText is conceptually an SFC, and should actually be one - not a function.. Thanks! \"stateless functional component\".\nClosing as \"works as intended\".. The proper solution is {'//'}, as opposed to encoding entities directly.. I think that the common convention to indicate intentionality in jsx string literals is with curlies; we could also support using html encodings, but i think that\u2019s also likely to be an error, like //.. I think that the common convention to indicate intentionality in jsx string literals is with curlies; we could also support using html encodings, but i think that\u2019s also likely to be an error, like //.. @dustinsoftware any chance you'd mind following up with some test cases for template literals?. Thanks!\nI think it'd be better, rather than only adding this option to individual rules, to also add it to \"settings\" (like the React pragma).\nBasically, individual rule settings would take precedence, and lacking that, the global settings would be used.. No use case specifically; just aiming for maximum configurability.\nLet's keep it how you have it for now, and we can add the specific-rule settings later if needed.. This needs to be merged before the next release, so if I don't hear any objections by Monday, I'm going to merge it.. I wonder if, like Components.detect, we could make a PropTypes.detect function that would make this logic reusable?. react/jsx-uses-react. Looks like both rules are good here :-). Was this done manually, or solely with eslint --fix?. What's the rationale for not wrapping multiline jsx in parens just because they don't have children?\nThe rationale for wrapping it is that the parens form a group across multiple lines, aiding readability.. In propTypes, nested objects are invalid unless they're PropTypes.shapes. I assume nested objects in Flow types are valid for Flow.\nIf so, this sounds like a bug.. Thanks!\nLet's not add requireForBlockBody just yet.\nAs for shorthand-methods, that might be a good idea, but I don't think it's required. Are all these changes autofixes? It'd be ideal if all the autofixing changes went in one commit, and any manual changes in their own commits.\n(Please rebase from the command line, not merge, so as to avoid merge commits). Thanks!\nLet's not add requireForBlockBody just yet.\nAs for shorthand-methods, that might be a good idea, but I don't think it's required. Are all these changes autofixes? It'd be ideal if all the autofixing changes went in one commit, and any manual changes in their own commits.\n(Please rebase from the command line, not merge, so as to avoid merge commits). You definitely don't need to ever scrap a PR!\nHm, npm test shouldn't cause or prevent a merge commit, unless you clicked the \"update branch\" button in github (which always creates a merge commit).\nIf it's too much trouble I'm happy to rebase it for you; extra commits and frequent force pushes are fine tho :-). You definitely don't need to ever scrap a PR!\nHm, npm test shouldn't cause or prevent a merge commit, unless you clicked the \"update branch\" button in github (which always creates a merge commit).\nIf it's too much trouble I'm happy to rebase it for you; extra commits and frequent force pushes are fine tho :-). Take your time; I'm happy to step in when needed. Always better to fix an existing PR than to create clutter by opening up a new one :-) Just make sure not to delete your remote branch, or the PR will be unrecoverable!. Take your time; I'm happy to step in when needed. Always better to fix an existing PR than to create clutter by opening up a new one :-) Just make sure not to delete your remote branch, or the PR will be unrecoverable!. @dfilipidisz certainly this needs a rebase since it contains merge commits - if it's become untenable to do that, perhaps we reset the branch to master, rerun the codemods, and force push up the results?. @dfilipidisz yes, all your steps look good. You can use force-with-lease but since you're the only one pushing to that branch on your fork, it doesn't really matter.. I agree that this rule should enforce the second example. To make it non-semver-major, we'd need to add a new option conditional.. I agree that this rule should enforce the second example. To make it non-semver-major, we'd need to add a new option conditional.. Enabling rules by default should wait for a separate semver-major PR, released after the non-major changes are released.. Sorry for the inconvenience; I've just merged a refactor to start using arrow functions. Would you mind rebasing?. @jseminck sorry about the conflict :-). I can't reproduce that issue locally; I've reran the master build. If that passes, then it's not a transitive dependency being updated.\nWhat version of node are you using?. I can't reproduce that issue locally; I've reran the master build. If that passes, then it's not a transitive dependency being updated.\nWhat version of node are you using?. Since the travis master build failed, this time I rm -rf node_modules && npm install, and now I can reproduce it.. Fixed by 65b746edb07080ac3a8c66cd12c532f1a1adc5cb. Absolutely not; only apps should have lockfiles, never published packages.. Thanks! In JS, it's idiomatic to use null over undefined, but both should work.. Worth fixing, but I have no idea why you'd ever want a variable called \"props\" in a React component :-). (cardProps seems like the better name, since props looks like it's the GenericThankYou props \ud83d\ude09). Fixed in #1365. Refs are great; if they stopped working within the v4 line it's a bug with eslint.. Please file a bug with them about the breaking change, and link it here?. I'm not sure I understand what's wrong with the current schema. { $ref: '#/definitions/basicConfig' } is just a macro for { \u2026 the basicConfig object }, is it not?\n. so how is that not an eslint bug? it seemed to work fine before.. Closed in #1292.. That it's not exported is irrelevant; eslint-plugin-react identifies all jsx-returning functions as components - and there are plenty of components internal to a file that still need propTypes.\nWhy does TreeView take a function, instead of a React element?. A pure function that returns a React element is an SFC (Stateless Functional Component). SFCs have propTypes and defaultProps.\nIt'll be checked by React if TreeView renders it in a component context - if it doesn't, then it should.. @yannickcr it'd be great to release this as a semver-patch ASAP (assuming nothing minor or major is already in master). @ZebraFlesh in fact this PR is not necessary for upgrading to eslint 4.2.0; the v4.2.0 upgrade is necessary to avoid an error. This PR enforces the schema - without this PR, invalid configs pass.. @lukeapage yes, exactly - it logs an error message (which is easily ignored) but no longer fails. You're welcome to wait, but it's not really \"blocking\", it's just slightly inconvenient :-). This is a warning message (from eslint 4), not an error message.. Since an SFC can have props, context arguments, we'd need a linter rule that forced you to name the arguments that, when not destructured - I'm not sure how we could in a practical sense figure out what mistake you made.. I think that a separate rule to enforce React-provided parameter names might be the only way to approach this problem.. In this case, someFunctionName is an object method that returns an element - ie, it's a component. I'm not sure why you're not just exporting the function directly?\nHowever, are you expecting that the concise method name would be \"someFunctionName\" when ignoreTranspilerName is true?. I'm not sure I understand the use case for mixing in a component; and renderFoo methods (functions that return jsx) should instead be components, in every case.. There's no way for a jsx linter plugin to differentiate between \"a function that returns an element\" and \"a component\". Thus, this project has chosen to consider all functions that return elements, \"components\".\nYou can disable the rule with config or override comments if it doesn't work for you.\nTotally separately, I'd strongly discourage your mixin pattern; renderContent and renderHeader should be separate components (SFCs, ideally), and you shouldn't be using createReactClass at all, since it's been deprecated since React v0.14.. That's an unclosed element; what's the full source?. Any chance the upgrade isn't bumping eslint-plugin-react? If you do the upgrade and then npm install eslint-plugin-react, what happens?. It's likely the spread that's doing it.. Can you confirm by removing it temporarily?. I don't think there's a workaround short of disabling the rule entirely for that file.. Try disabling the ignoreTranspilerName option.. It shouldn't; class Foo extends React.Component {} has a legitimate, non-transpiler name of Foo. ignoreTranspilerName should only be bypassing name inference; which applies to anonymous and arrow functions in particular.. ah, maybe I'm misunderstanding it - in which case https://github.com/yannickcr/eslint-plugin-react/issues/1297#issuecomment-314932009 makes sense to me.\nHowever, this is the reason the airbnb style guide forbids arrow function SFCs - because relying on name inference is brittle.\nI'm not sure what option name would make sense here. Thoughts?. Let\u2019s merge that into master to close this issue :-). That rule has been merged but not yet released.. With that option turned off, do you still see the errors?\nIf enabling the option creates new warnings for non-strings, then yes, that's a bug.. Thanks, that'd be great!. I'll give it another day, then I'll merge it if there's no objections by then.. Sorry for the inconvenience; I've just merged a refactor to start using arrow functions. Would you mind rebasing latest master? I'll merge ASAP after that's done.. Can you provide sample code? What happens with eslint-plugin-react v7.1.0?. What happens if you remove the \"exact\" pipes? Same error?. Thanks, want to make a PR correcting it? :-). Closed in #1316. There's no easy way to handle Object.assign that wouldn't fail to handle _.assign, for example. Some kinds of mutation can't be linted against.. Proxy is a runtime thing - not something a linter can do - and is both not supported on all platforms, and incredibly slow.. It's difficult to catch every case.\nIn the meantime, I'd suggest always destructuring all props and state and context at the top of your functions, which has the side benefit of bypassing this problem.. I feel convinced this already exists, but can't find it anywhere.\nThis is an essential thing to cover; it definitely should be a rule.\nIt would need to be separately configurable for props and children (curlies are often needed for children for explicit whitespace) to require, forbid, or ignore.. @jackyho112 essentially what I mean is that the rule configuration must allow an option like { props: 'always', children: 'never' } (where always/never/ignore are the three valid values). I mean the former - \"always require\", \"always prohibit\", and \"ignore the rule\". Thanks! (It'd be great if you reused #1349 instead of opening up a new PR). Yes, thanks - closed by #1349.. Yes, thanks - closed by #1349.. Sorry for the inconvenience; I've just merged a refactor to start using arrow functions. Would you mind rebasing?. ```jsx\nfunction shouldBeComponent() { // this should warn, because it should be a component\n  return ;\n}\nfunction SFC(props) {\n  return {shouldBeComponent(props.foo)};\n}\nSFC.propTypes = {\n  foo: PropTypes.any\n};\n.jsx\nfunction shouldBeComponent() { // this should warn, because it should be a component\n  return ;\n}\nfunction SFC(props) {\n  return {shouldBeComponent(props.foo)};\n}\nSFC.propTypes = {\n  foo: PropTypes.any\n};\n```. (Related to #1229)\nLet's rebase this and make sure it's still valid?. (Related to #1229)\nLet's rebase this and make sure it's still valid?. That sounds like a flow bug, not a bug with the react eslint plugin?. That sounds like a flow bug, not a bug with the react eslint plugin?. This plugin lints that you're using React correctly; by that you're using Flow correctly - I don't think this plugin is the right place for it. Thanks for filing!. This plugin lints that you're using React correctly; by that you're using Flow correctly - I don't think this plugin is the right place for it. Thanks for filing!. Someone coming forward with a PR would be helpful; however, #1317 may have mitigated this and isn't yet released, afaik.. There must be something else going on - the test cases (https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-sort-props.js#L106, https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-sort-props.js#L162) seem pretty solid.\nCan you provide a full repro case, not just with options omitted?. There must be something else going on - the test cases (https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-sort-props.js#L106, https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-sort-props.js#L162) seem pretty solid.\nCan you provide a full repro case, not just with options omitted?. So you want to ban single-line elements? What about <div />?. So you want to ban single-line elements? What about <div />?. Thanks, I think that's clear now.\nWhat's the rationale for this rule? How would you propose the inverse behave, when someone wants to force one-line elements, and how would that interact with max-len?. For one, I would certainly be in favor of a rule that prevented multiple components in a single line - ie, preferring <div />\\n<span /> over <div /><span />, regardless of length.\nRegarding length issues, wouldn't the max-len rule warn on lines that are too long?. I see <div class=\"clear\"></div> and <div class=\"comment-form-error js-comment-form-error\" style=\"display:none\">There was an error creating your Issue.</div> on this very page in Safari on one line.\nIn general I prefer writing a component on a single line whenever it's possible to do so - and while there's plenty of rules that don't conform to my personal style, I find that deciding how the rule could be built and configured via options such that i would use it, is a useful process. I'm trying to understand the value beyond \"i want it that way\".. (also it'd be great to have the PR title explain the change being made, and confine the issue reference to the OP description). Looks like it might be an issue with union types?\nDo you get the same bug with the latest eslint 3, and with eslint 4?. @AKFourSeven can you provide code that errors that\u2019s not using flow?. Closing as a duplicate of #327. This is by design; functions that return jsx should be SFCs.. Indeed, once you've spread \"attributes\" out, the plugin can no longer follow that it's from props.\nI'd recommend explicitly destructuring all props you need out of this.props at the top of every function you need them in.\nIt sounds like your second code block is a bug, though.. Does #1475 cover this?. This one will need a rebase prior to merging.. I've rebased this on the command line to remove the merge commit, and it seems like perhaps this test case is already in master?. Yes. In eslint 4, you have to configure the indent rule to ignore JSX if you want anything besides what they enforce by default.. The docs for that rule don't mention either member expressions (your example) or namespaces, so it's probably an omission.\nBoth should be accounted for - I believe the spirit of the rule is that anything.PascalCased and anything:PascalCased should both be allowed.. Could you file a new issue instead?. This seems fine to me, since those are invalid identifiers, they shouldn't work in the first place.. The jsx parser should be throwing on it because it's invalid JS. The regex for this rule shouldn't need to check it, because it should be impossible for it to receive that in the first place.. #1336 is not an issue; identifiers can not start with numbers.. That's a bad idea, as it creates N functions when you have N instances.\nThis is how you should do it:\n```jsx\nclass App extends Component {\n// option 1\n  constructor(...args) {\n    super(...args);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  // or option 2\n  handleChange = this.handleChange.bind(this);\nhandleChange(value) {\n    this.setState({\n      remaining: value,\n    });\n  }\nrender() {\n    ...\n  }\n}\n```. Definitely wanted, thanks :-). Planning to merge this soon.. eslint core doesn't support them yet, but we can certainly add commented-out tests for it (and add real tests using babel-eslint).\nSeems like we need (if we don't already have them) \"static-properties\", \"instance-properties\", \"private-static-fields\", and \"private-instance-fields\".. It is; and it should be an SFC instead.\nYou're right that skipping method syntax in component detection should help here; but renderFoo methods are an antipattern anyways.. That does seem reasonable, yes.. I don't have an article, but because you're expanding the public API on a component, with something that's conceptually important enough to separate yet somehow not important enough to you to have its own propTypes safety?. That's what it is; a function that returns jsx is a component, and a function returning a function that returns jsx is an HOC/component factory.. In that case, your mapped items lack a key, so they\u2019ll trigger a React error. What happens if you add a key?. I believe this is fixed in master but not yet released.\nA (better anyways) workaround is to destructure all props at the top of the function.. That's up to @yannickcr.. What happens on the command line? Editors often have linter bugs that are in fact a bug in the editor, so it's important to eliminate that variable from the equation.. Seems from the stack trace that the linter is passing the filename to stdin code, and that might have a bug.\nCan you reproduce the failure on the command line from stdin?. I'm not sure how that's related to eslint, or eslint-plugin-react? Linters wouldn't be run in the browser.. @yannickcr 5ad93b4 is a crasher, so it'd be good to cut a quick patch release with that in it :-). Fixed in #1372.. If someone is using inheritance (a hugely bad antipattern), like class Foo extends BaseComponent {, a jsdoc comment can be used to \"trick\" eslint-plugin-react into thinking it extends React.Component.. I'd recommend doing that with a babel transform to change React.Component to your base component, and definitely not putting an unidiomatic pattern in your code.\nAlternatively, you could also define componentDidCatch when needed, and you could use that babel transform only on components where that was defined.. What's the error? TheComponent is an SFC that takes props - you need TheComponent.propTypes = propTypes;. Any setPropTypes middleware only applies to the wrapped HOC coming out of enhance - which is good - but you also need them on the wrapper - on TheComponent.. It doesn\u2019t matter that it\u2019s injected; TheComponent should still declare that it needs it.. Did you figure this out?. Did you figure this out?. jsdoc-style comments generally always require /** - the convention is that the extra star is an explicit signal. i don't think it'd be a good idea to cover single-star comments.. I agree that this is a bug - it should entirely ignore computed property keys when the contents aren't a string literal.. What's your space-before-function-paren set to?. Fixed with #1411. By creating a \"bar\" property on the props object inside the component, the rule shouldn't warn that something that wasn't actually passed in as a prop is missing a propType.. Right, I don't consider it usage, or an untyped prop.\nIt's weird, but it should still work :-). Can you elaborate on \"works\"?\nDo you have Object.freeze defined as a wrapper function in settings?. That seems like it's a bug in the prop-types rule then (without propWrapperFunctions, you should definitely get a warning there).. Duplicate of #1367.. @setek please file a new issue, and ideally include the code it's crashing on :-). @setek please file a new issue, and ideally include the code it's crashing on :-). It's pretty common (also import { bool } from 'prop-types'), but a separate PR is fine.. Thanks!. @np-8 can you file that as a new issue?. Yes, it would require a major version bump.. Why import * as React from 'react'? There's no need to do that; import React from 'react'; is correct.. That's horrific; it's one of the least usable parts of TypeScript.. and yes, it also makes tree-shaking impossible unless you can statically determine every key accessed on a ModuleRecord.. If the types are in the react package, then they should be importable directly. If they're not normal named imports, import * shouldn't be able to bring them in, per spec.. The outline makes sense; in that case it's a poor choice for a codemod unless it's super smart about when it uses .. @oliviertassinari this is because you're supposed to use the prop-types and create-react-class packages as of v15.5, which work all the way back to 0.13 - so React.PropTypes isn't ever appropriate anymore anyways.. @oliviertassinari this is because you're supposed to use the prop-types and create-react-class packages as of v15.5, which work all the way back to 0.13 - so React.PropTypes isn't ever appropriate anymore anyways.. ohhh i see what you mean, gotcha. that seems like a reason to use import React from 'react' instead anyways.. ohhh i see what you mean, gotcha. that seems like a reason to use import React from 'react' instead anyways.. @johnhaley81 i'm confused; what's <P: { open?: boolean }> doing there exactly? I'd expect something like type P = { open?: boolean }; higher up in the file.. This issue is a generic one for 0.53 prop types support; are bound generics new in 0.53?. Hm, that's a pretty major breaking change - are we sure* the order was flipped?. I think we'll need a flow version setting just like we have for React.. I was not aware it was legal to omit one of the three types in prior Flow versions; given that, then I think we can safely up the default flowVersion (and we should still keep that setting for future changes). I think we're on the same page; this won't be a breaking change.\nI think we should absolutely add flowVersion; it should not default to anything; and when flowVersion is absent only, it should use the fallback logic that you describe.\nIn the future, if we want to add Flow-version-specific behavior, we'll already have a documented setting to use for it.. Yes, it would be ideal if every rule supported this syntax; a separate PR is fine.\nIf there's logic that can be shared, let's put it in a separate file in this PR, in anticipation.. Yes, it would be ideal if every rule supported this syntax; a separate PR is fine.\nIf there's logic that can be shared, let's put it in a separate file in this PR, in anticipation.. @willdurand please file a new issue. This might be fixed by #1372 and #1375. cc @jseminck . No, it does not.\nThe only proper solution (even with class properties) is:\n```jsx\nclass Foo extends React.Component {\n  constructor (...args) { super(...args); this.handleClick = this.handleClick.bind(this); } // if not using class properties\n  handleClick = this.handleClick.bind(this); // if using class properties\nhandleClick() {\n    const { callback, baz } = this.props;\n    callback(baz);\n  }\nrender() {\n    return ;\n  }\n}\n``. @Palisand specifically, the boundhandleClick` is state, and as such, you need a stateful component.\nIt's impossible for a linter to cover everything that might be in a style guide, so we have no requirement to lint for everything in the guide. Things that require human judgement often go unlinted, intentionally.\nSFC optimizations don't change the fact that the child component you're rendering might not have those optimizations - and the parent component shouldn't possess that knowledge about the child.. What error is thrown?. This seems like a bug - although I can't conceive of why you'd want to create a component in the constructor like that.. What kind of warning?. I'm waiting for reviews from other collaborators.. What version of flow are you using?. @jseminck there's covariant (+) and contravariant (-), at least. @jseminck there's covariant (+) and contravariant (-), at least. This seems like a bug in no-typos - we should only be looking for typos on React.PropTypes or on an import/require of prop-types.. This seems like a bug in no-typos - we should only be looking for typos on React.PropTypes or on an import/require of prop-types.. @jseminck also require('prop-types') in any form.. @zxlin using webpack to get magic implicit imports isn't necessarily a use case we should be handling or encouraging, imo.. @jseminck also React.PropTypes, hopefully :-). @bastoune it\u2019s not used in any of the code you showed; please show the entire component instead of eliding parts of it.. @bastoune it\u2019s not used in any of the code you showed; please show the entire component instead of eliding parts of it.. It's not realistic for a rule to always be exhaustive; there's often a way to trick them.\nHowever, it seems reasonable that an arrow function in the same scope should be warned on.. It's not realistic for a rule to always be exhaustive; there's often a way to trick them.\nHowever, it seems reasonable that an arrow function in the same scope should be warned on.. beforeClosing might be </ - does the rule already handle <?. Closed by #1641.. It\u2019s published in v7.6; are you sure you\u2019re running a local eslint?. It\u2019s published in v7.6; are you sure you\u2019re running a local eslint?. no-undef is an eslint core rule; i'm not sure how it relates to eslint-plugin-react?. no-undef is an eslint core rule; i'm not sure how it relates to eslint-plugin-react?. The airbnb guide requires that the ={true} be omitted; you can configure jsx-boolean-value however you like.. @xareelee if you read the link I provided, you can configure it with \"always\" or \"never\".. Try enabling the https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md rule.. The latter isn't necessary here; just the createClass pragma.. How does this PR compare to #1387, which already handles #1386?. That's because the rule hasn't been released yet.\nYou can see on https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-typos.md that the commit is not contained in any release tags yet.. I've rebased this, and one test is still failing.. I've rebased this, and one test is still failing.. Notably, the one failing test is just about failing to remove a space from before a }; no comments are removed.. Notably, the one failing test is just about failing to remove a space from before a }; no comments are removed.. I'm thinking a schema like this:\njson\n{\n  \"enableInstanceMethods\": true,\n  \"instanceMethods\": [\"push\", \"shift\"],\n  \"enableStaticMethods\": true,\n  \"staticMethod\": [\"Object.assign\", \"Object.defineProperty\"]\n}. The value in providing both a boolean and an array is that a shared config (like the airbnb config) can specify the array without having to enable it, and users can enable it without having to copy/paste the array.\nObject.assign is always safe when an object literal is the first argument :-) Regardless, Object.assign = function () { return 42; } would be totally safe and mutation-free.. Indeed, that should not complain because it's not passing the new function as a prop anywhere.. The rule is to avoid new functions being created and passed as props to an element (it should really apply not just to jsx, but to createElement calls as well).. It's hard to evaluate without an actual PR; I'd love to look at the test case and docs changes in particular that you're suggesting.. Sounds like this is resolved; PRs to improve docs are always appreciated.. Because you're using reduce to build up propTypes with metaprogramming, there's no way for static analysis to figure out what your prop types are.\nI strongly suggest explicitly hand-writing them out.. If your prop types are coupled such that changing one array causes a corresponding change to cascade through your component hierarchy, you may want to use hardcoded prop names precisely so that's not the case.\nIt's not just a linting limitation; one of the points of propTypes is to serve as documentation, and the more explicit you can be, the better - for humans, not just for the linter.. Shape props have known bugs; do you have skipShapeProps enabled?. That seems like an improvement to be made.. oh, great! Could you open a PR with these test cases, and then we can close this issue?. @jseminck would you mind one more rebase and rerun? Please ping me when its done and I'll merge asap. Thanks!. @LestaD a) the issue is with staleness, not with \"i only want one commit\", b) github's squashmerge and rebase merge are terrible features that pollute the git log; rebasing PRs and using a fast-forwardable merge commit is far superior.. The rule is jsx-wrap-multilines, not wrap-multilines. Your eslintrc has an error.. Hmm, sorry, I guess I misread.\nIs this happening on the command line? It's weird that there's a google URL in the error message.. Is webpack running eslint for some reason? If so, what happens if you run eslint directly?. OK, so what happens if you run npx eslint .?\n(Generally it doesn't make any sense for your build server to run your linter; that's usually done as part of CI instead). It's quite frequent that \"running eslint on anything but directly on the command line\" causes issues, so it's always important to ensure that you can reproduce the issue there.\nFor example, often, editors (and probably webpack) need to be restarted after any node_modules changes in order to pick them up; but the command line command does not have this problem.. Very weird. Glad you figured it out!. I'm not sure I understand. What indentation do you use for your JS, and why would you want that to be different for JSX?. I'm confused why you'd want to enforce indentation rules in jsx if you're not already enforcing them in JS?. Try setting ignoredNodes to ['JSXElement', 'JSXElement *']?. Right, but the first component is jsx - I'm still having trouble understanding why you'd want any part of your code to have inconsistent indentation with any other part.. Right, but the first component is jsx - I'm still having trouble understanding why you'd want any part of your code to have inconsistent indentation with any other part.. I do understand that you can configure that; but I still don't understand why anyone would want to configure the indent rule such that every expression wasn't set to 1.\nIt seems like to achieve what you want, we'd need an additional option for initialIndentationLevel, which defaulted to 1. I'm still pretty -1 on adding it tho.. Having a different indentation for continuations is super weird imo; it's common in Java, and sometimes in Ruby, but almost never appears in JS. However, that does explain your use case a bit - although \"JS \u2192 JSX\" isn't a continuation.. What's your .eslintrc?\n\ncontents of the file, so nobody has to download it\n\n```jsx\nimport React from 'react';\nimport { getIconName } from '../../helpers';\n\nconst Foundation = window.Foundation;\n\nconst AgSelectCampaignItem = React.createClass({\n\n  propTypes: {\n    onChangeCampaign: React.PropTypes.func.isRequired,\n    item: React.PropTypes.object.isRequired\n  },\n\n  selectCampaignItem(e) {\n    e.preventDefault();\n\n    const { item, onChangeCampaign } = this.props;\n    onChangeCampaign(item);\n    Foundation.libs.dropdown.closeall();\n  },\n\n\n  render() {\n    const { item, hasPla } = this.props;\n    let icon = null;\n\n    if (this.props.hasPla) icon = ;\n    return (\n\n        {icon} {item.display_name}\n      \n);\n  },\n\n\n});\n\nexport default AgSelectCampaignItem;\n```\n\nNote that createClass is deprecated as of React 15, and so you may need to specify the pragma to \"createClass\" per https://github.com/yannickcr/eslint-plugin-react#configuration. 1) do not install anything globally\n2) try not to use sudo\n3) when installing locally, peer deps must be manually installed also.. An empty string shouldn't be valid.\nfalse might be useful, however.. @AlexanderNaiden add:\njsx\nSwitcher.defaultProps = {\n  isSmall: false,\n};. Done in #1509.. Great! Sounds like this can be closed for the time being.. Can you rebase and force push, so tests are rerun?. There's no practical way for a linter to reliably follow that kind of dynamism around your file.\npropTypes serve as documentation, and ABC and XYZ's propType objects should be distinct. Try this:\njs\nXYZ.propTypes = {\n  onClick: ABC.propTypes.onClick,\n};. No, \"eval\" isn't something any linter can do.\nSeparately, making new objects for propTypes once per component has no measureable performance cost, but not doing it can have measureable clarity cost.. Unlikely isn't impossible, however.\nUsing semantic HTML attributes is still part of a11y, including data- attributes.. Adding these things only when the pragma is set to 16+ seems great; provided that the default is not changed prior to React 16 getting actually released.\nIf we're going to do this, let's take the opportunity to put the list of lifecycle methods in a single place :-). https://github.com/yannickcr/eslint-plugin-react/labels/react%2016 has a list; particularly:\n - #1510 \n - #1759 \n - #1682 . In case 1, does method return JSX? If so, it's a component according  to this plugin, so \"props\" isn't just a name.. Yes, that should also warn, if possible.. Yes, that should also warn, if possible.. @gpeal you need to specify it in propWrapperFunctions: https://github.com/airbnb/react-dates/blob/c464d43476191699567793097d09d21d98466cbb/.eslintrc#L16 is an example. @gpeal you need to specify it in propWrapperFunctions: https://github.com/airbnb/react-dates/blob/c464d43476191699567793097d09d21d98466cbb/.eslintrc#L16 is an example. I'll close; if this is still an issue, please file a new one.. It's an issue always, it's just that now we detect prop types better.\nThere's really no way around this without encoding special knowledge of connect in this plugin. I'd recommend using override comments for these cases.. @anchaljain123 passing around the full props object is an antipattern, and also makes it unlintable. Try destructuring all the props you need off of it first, before you pass it into any of the specs functions.. This overlaps with #997.. I'm a bit hesitant to have Flow-only rules in a non-flow-specific eslint plugin, but I agree that such a rule would be a good thing to have if using Flow.. I'm a bit hesitant to have Flow-only rules in a non-flow-specific eslint plugin, but I agree that such a rule would be a good thing to have if using Flow.\nWith PropTypes, you can use https://npmjs.com/prop-types-exact to get the same behavior; maybe the rule could recommend both?. This isn't eslint-plugin-mithril or eslint-plugin-hyperapp tho; it's eslint-plugin-react.. That's a fair point, but in all those cases, the assumption is that they're using the same jsx format.\nIf we did make this change, we'd probably want a setting that's an object map of normal prop names, to alternatives, eg:\njson\n{\n  \"react\": {\n    \"propsMapping\": {\n      \"className\": \"class\",\n      \"htmlFor\": \"for\"\n    }\n  }\n}\nWe'd then have to update all the rules that reference any prop names, and run them through the propsMapping before applying checks.\nThat said, I'm a -1 on adding the complexity to this plugin. Perhaps other contributors will disagree.. ```jsx\n  test('renders default state correctly', () => {\n    const tree = renderer.create(\n      \n\n\n    ).toJSON()\nexpect(tree).toMatchSnapshot()\n\n})\n. @mrchief then try:jsx\n test('renders default state correctly', () => {\n    const tree = renderer.create((\n      \n\n\n    )).toJSON()\nexpect(tree).toMatchSnapshot()\n\n})\n. @mrchief then try:jsx\n test('renders default state correctly', () => {\n    const tree = renderer.create((\n      \n\n\n    )).toJSON()\nexpect(tree).toMatchSnapshot()\n\n})\n``. @ezzatron a single JSX element (containing all its children) is a single method. All multiline constructs should be wrapped by parens, brackets, or braces so that it's explicitly clear what the single value is. Certainly this helps with ASI hazards, but it also visually helps group a JSX element without needing to look solely for the closing jsx tag.. @ezzatron a single JSX element (containing all its children) is a single method. All multiline constructs should be wrapped by parens, brackets, or braces so that it's explicitly clear what the single value is. Certainly this helps with ASI hazards, but it also visually helps group a JSX element without needing to look solely for the closing jsx tag.. @Chudesnov it's still relevant because things inside{ }, in a jsx context, follow JS rules, whereas everything else in a jsx context follows jsx rules. jsx hides the function calls; it *can not* hide the cognitive overhead of needing to know about the contexts and when to switch between them.. @Chudesnov it's still relevant because things inside{ }, in a jsx context, follow JS rules, whereas everything else in a jsx context follows jsx rules. jsx hides the function calls; it *can not* hide the cognitive overhead of needing to know about the contexts and when to switch between them.. Fixed in #1563. Nope. Both of your examples are allowed, but the docs only mention the first one, since it's generally preferred (and more readable) than the second.. It sounds like we'd need another possible value for the three syntaxes: instead oftrue/false, we'd want an enum ofignore/parens/parens-separate-lines(or some better name for the last option).. Slated for a future release.. I believe this has been released.. Can someone restate, in the latest version, exactly what\u2019s not working as desired here? (Not about changing the defaults, just about an impossible configuration that you need). That sounds like something worth doing.. Is the error fixed if you add{}inside theshapecall?. I've never seenshape` used without an object literal, but React doesn't require it, and regardless, we shouldn't crash on it.. Fixed in #1504.. @FDiskas please file a new issue; commenting on a closed issue isn't going to help anything get fixed.. Yes, camelCase does not include any underscores whatsoever.. Presumably we're just not checking the node type for async arrow function expressions in a class property (probably not non-arrows either?).. Presumably we're just not checking the node type for async arrow function expressions in a class property (probably not non-arrows either?).. Fixed in #1939.. https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-brace-presence.md may be what you want?. https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-brace-presence.md may be what you want?. Ah - yes, if you\u2019re talking about a template literal with interpolations, there\u2019s no rule for that.\nThat wouldn\u2019t be a safe rule, however, since wrapping in a template literal toStrings the value - so it\u2019s not unnecessary (in a way that can be statically determined).. Ah - yes, if you\u2019re talking about a template literal with interpolations, there\u2019s no rule for that.\nThat wouldn\u2019t be a safe rule, however, since wrapping in a template literal toStrings the value - so it\u2019s not unnecessary (in a way that can be statically determined).. @jseminck I\u2019m not asking about the rule implementation, I\u2019m asking about users in their own codebase - also, object spread is trivially transpileable with Babel to Object.assign, or to any other package name via transform-replace-object-assign.. @jomasti it could; but propWrapperFunctions is meant to convey \"this function returns an object\", which \"exact\" prop functions also do.\nHowever, this rule deals only with \"exact prop wrapper functions\" - Object.freeze, for example, is a valid propWrapperFunction but not a valid exact prop wrapper function.. @jomasti oh lol i got confused, yes, i was thinking about the other one.\nYes, this rule should just use propWrapperFunctions, good call :-D. cc @jackyho112 . cc @jackyho112 . Basically any function that returns jsx is considered a component by this plugin, and conceptually, all your \"render\" methods should indeed be separate components with their own propTypes, defaultProps, and tests (if they're exported).. Basically any function that returns jsx is considered a component by this plugin, and conceptually, all your \"render\" methods should indeed be separate components with their own propTypes, defaultProps, and tests (if they're exported).. This is also a duplicate of #512.. This is also a duplicate of #512.. Please rebase this one more time; tests should pass now :-). Please don't open new PRs; there's always a way to fix the first one if you don't close it.. @b0gok the ideal is for you to add @fsmaia to your fork, so they can update this PR directly - if not, then @fsmaia, please post here a link to your commits on your own fork, and I'll add them for you. Please do not open up a duplicate PR.. Also, please rebase and force push this so as to remove merge commits.. Also, please rebase and force push this so as to remove merge commits.. Yes, just like that.. @mytharcher it\u2019s an antipattern to pass around the entire props or state objects; and it basically prevents any form of static analysis on it. Destructure it first, and explicitly pass the members you need.. @aij that\u2019s incorrect; undefined will always be replaced by a defaultProp or an argument default. React doesn\u2019t differentiate absent from undefined (which is the proper thing to do). Since 0.13 at least, that's how it's behaved; I can't speak to before that.. @oliverjam if you're suggesting a modification to the rule (like an option) that would make it more useful when using flow, i'd love to hear about it! if you're just suggesting that the rule doesn't make sense at all when using flow, then you can just turn it off :-). @oliverjam if you're suggesting a modification to the rule (like an option) that would make it more useful when using flow, i'd love to hear about it! if you're just suggesting that the rule doesn't make sense at all when using flow, then you can just turn it off :-). Any idea on which file this is breaking, and what the code looks like?. i think console.log(context.getFilename())?. Thanks, that's very helpful.. There\u2019s no need for more comments; this is a bug, and it\u2019s waiting for a fix - PRs are welcome.. @mrchief if npm ls exits nonzero, nothing can be expected to work. You\u2019ll have to roll back the airbnb config too if you want to roll back.. @alexvb can you file a new one for it instead?. @alexvb can you file a new one for it instead?. Does a lint rule need to be enabled?. The master build was passing before; odd.. In that case it seems like the autofix would need to be:\njsx\n<div>\n  {'foo '}\n</div>\nbut i'm not sure it's practical to preserve the space in situations like this; the best practice when a space is important is to put it inside a string inside curlies, for reasons like this.. No, we can't justify that - you're correct.. Let's start just bolding the adverb, and let's add the instructions to a CONTRIBUTING.md?. Regression test added.. Nope, i can\u2019t. Only @yannickcr can do releases.. React's docs can recommend whatever they like; omitting ={true} is considered a best practice in the wider community, and for boolean props, it makes the element read more nicely.\njsx has a number of things that break the idea that \"consistency with JS\" is critical, and this is one of the ways I think the deviation is an improvement.\njsx is html, conceptually, even if it's implemented as syntactic sugar - so consistency with HTML is more important.. Of course jsx is closer to HTML than JS; otherwise why bother with the sugar?. Then at that time, this can be re-evaluated. In the meantime, I\u2019d say you can just set the rule to \u201calways\u201d if you prefer.. Very strange usage; but yes, it should work.. Yes, I think it does.. Yes; an SFC has no reason to use this at all. @ardok in react, components should never extend other components. Prefer composition over inheritance.. @ardok in react, components should never extend other components. Prefer composition over inheritance.. @ardok there's no way to statically know it's a component if it's not directly extending React.Component - but you can use an \"extends\" comment to note it - see https://github.com/yannickcr/eslint-plugin-react/issues/1856#issuecomment-400458910. @ardok there's no way to statically know it's a component if it's not directly extending React.Component - but you can use an \"extends\" comment to note it - see https://github.com/yannickcr/eslint-plugin-react/issues/1856#issuecomment-400458910. In this case it should indeed warn on both.. No literals includes template literals :-). I don't think a rule could catch this, because there's no guarantee that the user wants the space there - and in fact, they might not want it. That's why the best practice is to be explicit.. It might not be safely autofixable at least; but sure, it'd be interesting to see the test cases in a PR.. It\u2019s a required prop. You didn\u2019t provide it.\nThe linter lints against components; the render call shouldn\u2019t even be in the same file as the component anyways.. That's not something that's possible for a linter to know - linters do static analysis; you're asking for runtime analysis - which is what React is already doing for you.. Will merge this tomorrow if no objections.. Could you add a bunch more valid and invalid examples? That would help evaluate the usefulness of the rule.. The pattern you're using - a tagged template string - is very strange, magic, hard to optimize, and impossible to lint reliably.\nHaving a linter plugin that can parse the template literal to do static analysis on it is something that I'd say belongs in a \"styled components\"-specific linter plugin, and definitely not in a broadly React-focused plugin.. I'm sure it's possible, yes - but that's a lot of complexity that a plugin for React shouldn't have to deal with - a plugin specifically for styled-components would have to deal with it.. @kpavankotesh that's just a random function; an eslint plugin has no reliable way to know for sure that you invoked it with this.props;. @kpavankotesh that's just a random function; an eslint plugin has no reliable way to know for sure that you invoked it with this.props;. Thanks for the report!. Thanks for the update; the first example was just two throwaway statements :-)\nThis seems like a (totally obscure, strange, edge, but valid) bug. Thanks for the report and the repro repo!. Interesting - it'd be useful to figure out if it's a bug in babel-eslint (which is possible), or a bug in this plugin when using babel-eslint (which is also possible).. If it\u2019s only with babel-eslint, then i think you\u2019d need to file an issue there.. thanks!. Sound great to me - as long as it does a \"safe\" thing when it encounters things that aren't statically analyzeable, like imported shapes, spread props, etc. It'd also be super fancy if spread props worked when the object literal it referenced was defined in the same file.. Yes, exactly - basically, what's safe is not creating false positives.. As for the name, button-has-type might work?. I'll give this a day, and then merge if there's no objections.. Thanks!. The features on master haven't been released yet. https://github.com/yannickcr/eslint-plugin-react/blob/v7.4.0/docs/rules/jsx-curly-spacing.md is the latest released docs.. When you are checking the docs, be sure to set the tag to match the version you have installed. If you\u2019re still seeing an issue, please file a new one.. Try const handleChange = input.onChange; first.. Ah, fair point. If the same code (with const { input } = this.props; and then using input.onChange) passes in a non-SFC, then there\u2019s definitely a bug.\nThe bug might be that the SFC warns, or that the stateful component doesn\u2019t warn, but either way they should behave the same.. It shouldn't be acceptable in general because flat props are way better than nested ones :-)\nHowever, I agree that it should be equally acceptable to this rule.. cc @sharmilajesupaul; a review would be great :-). Will merge this tomorrow if no objections.. I'll merge this tomorrow if no objections.. @jseminck @alexzherdev is this PR still useful, now that #1911 and friends have landed?. Are there test cases here we could salvage?. An autofix would absolutely silence the warnings, but the point of this rule is to catch likely bugs - and the likely bug is that the entities are supposed to be in a jsx context. That can't be autofixed; a human needs to determine the fix.. An autofix would absolutely silence the warnings, but the point of this rule is to catch likely bugs - and the likely bug is that the entities are supposed to be in a jsx context. That can't be autofixed; a human needs to determine the fix.. In the case of straight quotes, those are typographically incorrect - the proper fix there is to use curly quotes if it\u2019s prose. Again, i don\u2019t think that\u2019s something that can be safely programmatically fixed.. In the case of straight quotes, those are typographically incorrect - the proper fix there is to use curly quotes if it\u2019s prose. Again, i don\u2019t think that\u2019s something that can be safely programmatically fixed.. @modosc all that's required to fix it is that you take your literal text, and wrap it in explicit jsx curlies, and one of the JS quote styles. If it's catching human-intended prose, then you should be replacing your straight quotes with curly quotes.\nThis:\njsx\nrender() {\n  return (<pre><code>echo 'eslint --fix \"path/to/file\"' >> ./autofix</code></pre>);\n}\nshould instead be, for example:\njsx\nrender() {\n  return (<pre><code>{`echo 'eslint --fix \"path/to/file\"' >> ./autofix`}</code></pre>);\n}\n@benjie this is not intended to catch your example of \"code in a pre\" - it's intended to catch mistakes like in the rule documentation.. @modosc all that's required to fix it is that you take your literal text, and wrap it in explicit jsx curlies, and one of the JS quote styles. If it's catching human-intended prose, then you should be replacing your straight quotes with curly quotes.\nThis:\njsx\nrender() {\n  return (<pre><code>echo 'eslint --fix \"path/to/file\"' >> ./autofix</code></pre>);\n}\nshould instead be, for example:\njsx\nrender() {\n  return (<pre><code>{`echo 'eslint --fix \"path/to/file\"' >> ./autofix`}</code></pre>);\n}\n@benjie this is not intended to catch your example of \"code in a pre\" - it's intended to catch mistakes like in the rule documentation.. @stevemao sure, that sounds like a great improvement - a PR would be most welcome.. We should be supporting what is, not what the documentation claims things are. It seems like the attribute arrives in the HTML in every browser prior to React 16.1; whether it has functionality or not isn't particularly relevant.. We should be supporting what is, not what the documentation claims things are. It seems like the attribute arrives in the HTML in every browser prior to React 16.1; whether it has functionality or not isn't particularly relevant.. What happens if you use object spread:\njs\nreturn { ...propTypes, dispatch: PropTypes.func.isRequired };\n?\nIn general, it's pretty tough for a static analysis tool to figure things out when you use metaprogramming.. It's a stage 3 proposal, which will likely land in ES 2018, and is shipping in multiple browsers already, so I'd say it's safe to use :-). Yes, please open a new issue. Thanks!. @billyvg can you file a new issue, please?. @yannickcr this, and #1545, should be released ASAP in a v7.5.1.. @yannickcr this also should go in a v7.5.1, ASAP. @jomasti if it were a global setting, then other rules could access it to \"unwrap\" propTypes for their own uses.. @jomasti if it were a global setting, then other rules could access it to \"unwrap\" propTypes for their own uses.. @jomasti right; the idea is that i'd be able to move forbidExtraProps etc out of propWrapperFunctions and into this new setting.. @jomasti right; the idea is that i'd be able to move forbidExtraProps etc out of propWrapperFunctions and into this new setting.. I guess an alternative schema for the existing setting could be: \njson\n\"propWrapperFunctions\": [\n  \"Object\",\n  { \"property\": \"freeze\", \"object\": \"Object\" },\n  { \"property\": \"forbidExtraProps\", \"exact\": true }\n]. I guess an alternative schema for the existing setting could be: \njson\n\"propWrapperFunctions\": [\n  \"Object\",\n  { \"property\": \"freeze\", \"object\": \"Object\" },\n  { \"property\": \"forbidExtraProps\", \"exact\": true }\n]. @maxammann that support already exists; see the \"propWrapperFunctions\" setting in the readme.\nThis PR needs to be updated per the above comments.. We could modify the dep range, and for eslint 3 in Travis.yml manually downgrade it?. Breaks other tests on eslint 3?. So what is it exactly about this pr that causes this breakage?. Duplicate of #1543.. Duplicate of #1543.. No, because it shouldn't be dealing only with jsx - it should be able to catch React.createElement calls as well.. No, because it shouldn't be dealing only with jsx - it should be able to catch React.createElement calls as well.. Duplicate of #1543.. Duplicate of #1543.. Wow, that actually seems like it's a bug in eslint core; either \"default\" should be respected or it should throw.\nRegardless, it's also a bug in this rule that we're lacking these tests.. Wow, that actually seems like it's a bug in eslint core; either \"default\" should be respected or it should throw.\nRegardless, it's also a bug in this rule that we're lacking these tests.. @Hypnosphi try v7.5.1? This seems like a duplicate of #1542.. @Hypnosphi try v7.5.1? This seems like a duplicate of #1542.. @ardok your stack trace implies it's only a bug in react/default-props-match-prop-types. It should still be valid for Flow v0.52 and below, regardless.. Stateless React Components should not use JS default values; that needs to be a defaultProp.. Stateless React Components should not use JS default values; that needs to be a defaultProp.. defaultProps are introspectable by React and other tools; default arguments are not. #1184 has more discussion on it.. @lydell very true! the ternary case would probably have to be explicitly handled; however, I'd say that the rule should be forcing a single, hardcoded type value - and that you should conditionally render two different elements if you want two types.. The type should not be dynamic, full stop.\nIf you want the type to be one of the 1, 2, or 3 options, use if/else and hardcode those three.. The type should not be dynamic, full stop.\nIf you want the type to be one of the 1, 2, or 3 options, use if/else and hardcode those three.. Only twice, since reset buttons are a terrible UX pattern :-). It shouldn\u2019t be dynamic because all three button types have wildly different semantics - i can\u2019t conceive of when you\u2019d want a submit button randomly changing to be an entirely different kind of button, or vice versa.\nA submit button must be inside a form; a regular button must have some kind of javascript behavior - these are different components/elements, not just two flavors of the same thing.. Yes, that is certainly true! However, the primary point of the rule is to ensure that button is used safely.\nIf we wanted to make a generic rule that governed input types, that would also force them to be static (and I'd encourage you not to make a non-private generic input component that takes \"type\" as a parameter, for the reasons I mentioned above). I'm not familiar with any HTML 6 nor any plans for it in the near or far future, nor any plans for any new button type ever. When one appears, the server shouldn't be controlling that - it should only be explicitly supported in the UI.. @josephshambrook at the least, make a propType that used oneOf, so you\u2019re not just wildly accepting any random string (or worse, \u201creset\u201d).\nUsing an override comment inside a component where you\u2019re knowingly violating a best practice is indeed the proper way to handle it.. If your propType warnings are properly set up to fail your tests, there\u2019s no need to check it in production.. If your propType warnings are properly set up to fail your tests, there\u2019s no need to check it in production.. Each rule documentation should already indicate whether it\u2019s fixable; if it doesn\u2019t, please file an issue/PR.\nEither way, we\u2019d want a separate list of recommended rules - it\u2019s a common use case to want to know what rules you\u2019re enabling; it\u2019s not common to want to list all fixable rules (and there\u2019s eslint-find-rules for that anyways).\nI suppose we could indeed add info to each recommended rule indicating that it\u2019s in that config.. Each rule documentation should already indicate whether it\u2019s fixable; if it doesn\u2019t, please file an issue/PR.\nEither way, we\u2019d want a separate list of recommended rules - it\u2019s a common use case to want to know what rules you\u2019re enabling; it\u2019s not common to want to list all fixable rules (and there\u2019s eslint-find-rules for that anyways).\nI suppose we could indeed add info to each recommended rule indicating that it\u2019s in that config.. Ahhh so to rephrase, you want the root list to have all that info inline? That sounds like a great idea. My only concern is that it\u2019d be ideal to have a way to make sure this info is always correct - like a test that compares the markdown to the actual rule metadata.. it seems like the debounce is the issue.\nIn general, you shouldn't have arrow functions in class properties anyways; try this instead (it will be much more performant and lintable and much more importantly, more testable):\njs\ndebouncedUpdate = debounce(this.update.bind(this), 2000);\nupdate(cellsetId, options) {\n  this.setState((prevState, props) => {\n    const {updateQueue} = prevState;\n    const {updateCells} = props;\n    updateCells(cellsetId, updateQueue, options);\n    return {\n      updateQueue: [],\n    };\n  });\n}. wow, i'd never expect to see an IIFE ever again in a world with modules :-) interesting find!. @saiichihashimoto could you file a new issue with the code that\u2019s causing the crash, along with the stack trace?. @saiichihashimoto could you file a new issue with the code that\u2019s causing the crash, along with the stack trace?. v7.6.1 is released; please file a new issue if there's still problems :-). v7.6.1 is released; please file a new issue if there's still problems :-). Changing the schema of the existing rule would be a breaking change; leave that the same, and let's update this one.. @jseminck that's a great idea :-) more tests is always better!. Thanks, a PR would be great (not sure what an MR is). You're using an unsupported version of node and npm. Upgrade to 4 latest, or better, 6 or 8 or 9; and you'll get a new enough npm.. Thanks!. Only @yannickcr can publish a release; we'll have to wait for them to do so.. Thanks, looks like it might be a bug in no-danger-with-children.. altho i'm confused; how does ...props work when const props shadows it?. This actually just looks like it should be invalid syntax, but eslint itself shouldn't crash like this.\nInstead of here, can you file this on eslint itself?. Reopening; this is indeed an issue with the rule.. @hamlim @silvenon in which version of React did it stop warning about keys inside React.Children?. As long as React 0.13 also didn't warn, then I think we're good :-) otherwise we'd need to warn on older React versions.. You can specify PropTypes.exact in propWrapperFunctions, but we should handle this by default.. @dustinsoftware Sorry for the delayed response. I think the current implementation in this plugin only allows a single identifier to be used; however, I would expect it to be enhanced to also support { property: \"exact\", object: \"PropTypes\" }.. I think this is something you should write in your own custom plugin; even in an environment where test IDs are used for integration tests, it would be a horrible idea to force it on every single component :-/\nI also can't think of a way (that is both generic and useful) that could be added here.. Certainly that makes it less hazardous, but this just doesn't sound to me like it would ever be generic enough to belong in this plugin.. This seems good; what\u2019s the use case?. It wouldn't be. React.Fragment exists in v16.2, but not Fragment.. That should work fine (it transpiles to React.Fragment) but babel 7 beta is required to parse it; which means you'll need babel-eslint.. Either way, the OP's code as-typed shouldn't crash.. Either way, the OP's code as-typed shouldn't crash.. @asafda so it only breaks for you on a class-based component? (a function is a React Component too). @AlexMarvelo any chance you could help narrow that down to which file/code is causing the error? One trick is to temporarily edit /Users/mac/dev/hitask-web/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:656 and add console.log(context.getFilename()) above it (i might have the method name wrong). Can you share the contents of bootstrapUtilsSpec.js? I'd rather roll forward with a fix than revert #1507.. ah, perhaps the concise method? If you change other() {} to other: function () {} or other: () => {}, does it avoid the crash?. What if you run ./node_modules/.bin/eslint src --fix?. I\u2019m confused then; i don\u2019t see any crash, just the npm script exiting nonzero (presumably due to eslint errors).\nSorting is a tricky thing to autofix correctly, fwiw.. I think arrow function class properties should be categorized as non-components.. This is a duplicate of #1471.. @m10 can you file a new issue for that?. In this case, open is used in a JS context, so eslint-plugin-react wouldn't pay attention to it. Have you enabled the core no-undef rule?. @PoliakovMaksym the stateful component error seems correct to me; you're not using anything there that requires it be stateful.. No, there's not - and a rule like that would be a very bad idea. The correct ordering of spread props is very context-specific - in your first example, the inline className overrides a passed-in className; in your second one, the inline one overrides it.\nWhich of those is correct is always entirely dependent on your use case, so it wouldn't make sense to enforce that with a linting rule. That's something unit tests should cover.. Linter rules apply to projects, across files - this kind of thing would only apply per call site, not even for an entire component.. It's a bad antipattern to pass around the props or state objects; in addition to making it impossible for a linter to check on the usage of props or state, it also makes it harder to reason about the contents of those objects.\nSeparately, accessing this.state should definitely be allowed inside the callback argument to this.setState.. Please check in v7.6.0 (and v7.6.1 when released, if you're using object spread) and we can reopen if it's still occurring.. Please check in v7.6.0 (and v7.6.1 when released, if you're using object spread) and we can reopen if it's still occurring.. #1610 should fix this.. @MatthewHerbst you can't know statically if .map is on an array or not.. @MatthewHerbst you can't know statically if .map is on an array or not.. @cbranch101 this needs a rebase; I tried doing it but it wasn't a clean one.. @davidlewallen if you could make a branch that has these commits, rebased and passing tests, and you post a link to it here (without creating a duplicate PR) then I'd be happy to update this PR with your rebase/additions :-). @davidlewallen if you could make a branch that has these commits, rebased and passing tests, and you post a link to it here (without creating a duplicate PR) then I'd be happy to update this PR with your rebase/additions :-). If the rule conflicts with your use case, override the rule for that use case.\n(linking to https://github.com/yannickcr/eslint-plugin-react/issues/785#issuecomment-351663543). That's because eslint-ignore-line isn't a thing; just eslint-disable-line and eslint-disable-next-line.. That's because eslint-ignore-line isn't a thing; just eslint-disable-line and eslint-disable-next-line.. This seems like something that the parser should error out on; this might need to be filed on babel-eslint.. @Aequitas737 altho you shouldn't put arrow functions in class fields, that seems like it should work. Can you file a new issue?. @pfhayes i'm confused; you're saying that npm test failed with this error? O.o. @pfhayes i'm confused; you're saying that npm test failed with this error? O.o. @pfhayes generally it helps to temporarily add console.log(context.getFilename()) right before the line that throws in the plugin; that way you can find the code triggering it. @jomasti's example is great too, but it'd be helpful to confirm that that's what caused your issue too.. @pfhayes generally it helps to temporarily add console.log(context.getFilename()) right before the line that throws in the plugin; that way you can find the code triggering it. @jomasti's example is great too, but it'd be helpful to confirm that that's what caused your issue too.. @grajagandev do you mean any unchecked property accesses? Generally in eslint plugins, eslint is supposed to provide some guarantees in the node structures returned, so there'll be tons of them in this repo that aren't a problem. What would be most useful is something that knows about eslint/babel-eslint node types, and warns when those accesses are incorrect.. @grajagandev do you mean any unchecked property accesses? Generally in eslint plugins, eslint is supposed to provide some guarantees in the node structures returned, so there'll be tons of them in this repo that aren't a problem. What would be most useful is something that knows about eslint/babel-eslint node types, and warns when those accesses are incorrect.. This is an eslint plugin; anything that can use eslint with vscode should also be able to use this plugin.. Thanks! Indeed tho, closing as a duplicate of #1610 :-). The solution is to add propTypes to VideoList:\n```js\nimport PropTypes from 'prop-types';\nVideoList.propTypes = {\n  videos: PropTypes.arrayOf(PropTypes.shape(\u2026)); // whatever this.state.videos is\n};\n. @jaaberg that'd be great; also{foo + 'bar'},{foo + bar}and{'foo' + bar}?. @jaaberg that'd be great; also{foo + 'bar'},{foo + bar}and{'foo' + bar}?. @jaaberg what about a schema like this:json5\n{\n  \"forms\": , // default false\n  \"links\": , // default true\n}\n```\nThat way it's an easy change to flip the default from false to true in the next semver-major, and the schema is also extensible if we want to add other categories in the future?. @jaaberg what about a schema like this:\njson5\n{\n  \"forms\": <boolean>, // default false\n  \"links\": <boolean>, // default true\n}\nThat way it's an easy change to flip the default from false to true in the next semver-major, and the schema is also extensible if we want to add other categories in the future?. No thanks. If prettier ever becomes compatible with the airbnb config, I'd support using it, but until then, eslint is the only way I think a project should be formatted.\nSeparately, git hooks are not an enforcement mechanism, and can never be relied on in a repo.. No thanks. If prettier ever becomes compatible with the airbnb config, I'd support using it, but until then, eslint is the only way I think a project should be formatted.\nSeparately, git hooks are not an enforcement mechanism, and can never be relied on in a repo.. This seems like the sort of thing you'd want to enforce using a combination of a custom prop name, and a PropTypes.oneOf check on the receiving component. I don't think this is something a linter should be checking; nor is it something it can check when the value isn't static.. Looks like a duplicate of #626. @joetidee no, see #626.. @joetidee no, see #626.. It\u2019s not practically possible to track type deps across files. Typically, Props needs to always be defined in the same file, although shapes can be shared.. I believe so, yes.. Yes, closing as a duplicate, thanks.. Yes, closing as a duplicate, thanks.. No key here is being set to an array index; we don\u2019t have a rule that checks for this.\nI don\u2019t believe it\u2019s possible to get anything but undefined from props.key anyways, so it\u2019d be the same as not passing it.. Using spread here offers only two options:\n1. The current situation, where you need to either explicitly use them all or use an override comment\n1. When you use spread, all state properties are marked as used, rendering the rule entirely useless, silently\nWhich would be more useful?. In that case, passing this.props or this.state anywhere is a massive antipattern; so doing it should be very inconvenient.. @mockdeep if you reference props.foo more than once in the function, that has overhead that's avoided if you extract it once and reference the extracted value.. @Dzieni certainly if you only reference it once, there\u2019s no object lookup benefit. But the other benefits still apply.. Yeah, it probably is negligible - I don't have benchmarks offhand. In normal cases, I'd say \"getters\", and that's resoundingly significant, but for props/state (objects react creates) that's a nonissue.\nEither way, the other benefits I mentioned apply :-). It sounds like almost all the utility of this requested option is for \"i want to ignore the rule when there's only one prop\" - would that be accurate?. Probably so; but I'd prefer to leave both open until we're sure :-). @sbaechler there\u2019s no way to statically know that; it\u2019d have to error on every non-html element.\nThere\u2019s also no way for any eslint rule to reliably catch any instance methods of anything, including map/filter.. @sbaechler it only matters for pure components or any component that implements sCU or any component that might do those things at any time in the future. I\u2019m not sure how you\u2019d be able to enforce it at the consumer site with or without types; the component itself would have to declare that it\u2019s pure, and the linter plugin would have to reach across files to determine that.. If we change the detection helper itself to not fire for a confidence level of zero, do any tests fail?. That seems like it would be an improvement.. This is a duplicate of #1471 and is fixed in the next release.. What happens if you comment out the handleContextRef = line?. oh, i do see indentation issue there - you need one more space before </div>, and thus </Form> - not sure if that's relevant tho.. @alexpriceonline @eaardal if either of you could submit a PR with a failing test case, that'd be appreciated.. If you use prettier and eslint, the order of that sequence is critical; you need to run eslint after prettier.. If you use prettier and eslint, the order of that sequence is critical; you need to run eslint after prettier.. Sounds like this is an incompatibility with babel 7 (which is not released yet); I\u2019ll leave this open until it is so we don\u2019t forget.. If so, that'd be a bug with prettier, not this plugin. Does it happen when you use eslint by itself?. (jsx-pascal-case applies to component names, not to attribute names). It might be the no-unknown-property rule, which explicitly has crossOrigin in it: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-unknown-property.js#L115. Thanks! We'll want to make sure that only throws when the version pragma is 15.5.0 or greater.. Nope, your PR seems solid :-). I think that by default, it definitely should warn on it; however, I'd be open to adding an option that explicitly allowed this case.. I think that by default, it definitely should warn on it; however, I'd be open to adding an option that explicitly allowed this case.. I wouldn't call it \"softening\"; just making it more accurate :-) but yes, I'm also open to that.\nFor an option name, allowInPropTypes? (since it's already a subset of \"foreign propTypes\"). I wouldn't call it \"softening\"; just making it more accurate :-) but yes, I'm also open to that.\nFor an option name, allowInPropTypes? (since it's already a subset of \"foreign propTypes\"). We do already have https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md, but it sounds like you're asking for \"after\", which that doesn't quite cover.\nThis seems reasonable, but I don't think a new rule for \"after\" is the right approach. Maybe a new rule for all this.state usage, that has options for \"in\" and \"after\" (and thus is extensible for anything moving forward), and deprecating the existing rule?. We do already have https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-access-state-in-setstate.md, but it sounds like you're asking for \"after\", which that doesn't quite cover.\nThis seems reasonable, but I don't think a new rule for \"after\" is the right approach. Maybe a new rule for all this.state usage, that has options for \"in\" and \"after\" (and thus is extensible for anything moving forward), and deprecating the existing rule?. <span>{\u2018&times;\u2019}</span> is identical; does it not function the same for you?. <span>{\u2018&times;\u2019}</span> is identical; does it not function the same for you?. ah, interesting. So you'd need to use innerHTML to render it, i guess. Is there a reason you can't do {'x'}? that seems like it'd be more legible.. ah, interesting. So you'd need to use innerHTML to render it, i guess. Is there a reason you can't do {'x'}? that seems like it'd be more legible.. Sorry, i mean, why can\u2019t you use the actual Unicode character for \u00d7 ?. Sorry, i mean, why can\u2019t you use the actual Unicode character for \u00d7 ?. I'm not sure about that specific technique, but I'm very open to adding test cases that fail with the current method, and then fixing the implementation to pass those tests.. I'm not sure about that specific technique, but I'm very open to adding test cases that fail with the current method, and then fixing the implementation to pass those tests.. v7.7.0 is released.. What would be most useful would be providing the code that causes the no-access-state-in-setstate rule to crash.. What would be most useful would be providing the code that causes the no-access-state-in-setstate rule to crash.. This is actually correct; the linter has no way of knowing if boo is called with the actual props object, or some random object.\nThe proper solution is to destructure foo at the callsite, and pass that into boo.. This is actually correct; the linter has no way of knowing if boo is called with the actual props object, or some random object.\nThe proper solution is to destructure foo at the callsite, and pass that into boo.. cc @pfhayes . cc @pfhayes . This should only apply when the React pragma is >= 16.2; on earlier versions, it should probably warn on both.. This should only apply when the React pragma is >= 16.2; on earlier versions, it should probably warn on both.. @alexzherdev yes, I'd expect that just like we have a pragma for React and createElement, we'd need one for Fragment.\nAutofixing to <> is thus safe; i think we'd just always autofix to React.Fragment since React is sure to be in scope.. @alexzherdev yes, I'd expect that just like we have a pragma for React and createElement, we'd need one for Fragment.\nAutofixing to <> is thus safe; i think we'd just always autofix to React.Fragment since React is sure to be in scope.. The fragment pragma would be needed in either case - in \"always syntax\", as the thing to forbid and to convert from - in \"never syntax\", as the thing to allow and to convert to.\nThe fragment pragma would be set to Fragment, and we would always autofix to <${reactPragma}.{fragmentPragma}> when applicable.. You can\u2019t use jsx unless React is already in scope.. Oh sure - i don\u2019t think we have to account for that in the first iteration, tho.. Hmm. I\u2019d say it\u2019s intended but unexpected behavior. Maybe we could add an option that would enable checking text indentation?. Hmm. I\u2019d say it\u2019s intended but unexpected behavior. Maybe we could add an option that would enable checking text indentation?. Disabled by default would be necessary to avoid a breaking change.\nYou raise a good point that inside pre or textarea (possibly others), the whitespace might be significant.. I\u2019m confused; does React even work with this?\nAt any rate, React themselves provides a codemod that can convert all your non-mixin-using createClasses to class-based components; is there a reason not to use that?. @abenitesDC fair. Those linked docs don't mention PropTypes, but I verified manually that indeed, it works in either form.\nWe should indeed modify the prop-types rule to detect static PropTypes with createClass components as well.. Did you specify an ordering? The default ordering doesn\u2019t include instance methods or instance variables.. Anything that's not explicitly specified is grouped under \"everything-else\", per the docs.. They\u2019re not yet part of the language, and when the rule was created, they didn\u2019t exist yet :-). That would be a breaking change; next time we do one, we can change that default. For now, you\u2019ll need to manually specify your ordering.. Thanks, will review soon.. If we can come up with a way to generically configure \"propTypes that are functions that must take a non-empty argument\", that'd be great.\nI'm curious tho - are you actually seeing people using shape({}) or arrayOf() as a way to bypass these restrictions?. In that case, I'd recommend exporting the shape object from the child and using it on the parent, so that you get the error sooner :-). babel has a jsx parser; it's not a React parser.. That syntax requires babel-eslint; but we should have a test with the default parser that covers Hello.propTypes = { \u2026 } instead.. yep, those all look the same :-). Separately, it's not a rebase if there's a single merge commit in it.. Separately, it's not a rebase if there's a single merge commit in it.. I've replaced your branch with a proper rebase of #1260.. I've replaced your branch with a proper rebase of #1260.. I'm intentionally leaving it open so that if any changes are needed to #1260, they can be simultaneously pushed here - this minimizes the permanent pollution in the git graph by combining the two PR refs to the same sha.\nIt will be automatically closed when the other is merged.. I'm intentionally leaving it open so that if any changes are needed to #1260, they can be simultaneously pushed here - this minimizes the permanent pollution in the git graph by combining the two PR refs to the same sha.\nIt will be automatically closed when the other is merged.. (For posterity: subclassing React.Component is considered a very bad antipattern, and the community as well as the React team advises against it)\nThe /** @extends React.Component */ comment needs to go on the subclass - on the thing that is trying to pretend it extends React.Component. In your example code, you have it on SafeComponent but you need it on TestEslint.. (For posterity: subclassing React.Component is considered a very bad antipattern, and the community as well as the React team advises against it)\nThe /** @extends React.Component */ comment needs to go on the subclass - on the thing that is trying to pretend it extends React.Component. In your example code, you have it on SafeComponent but you need it on TestEslint.. hmm, not sure. https://github.com/yannickcr/eslint-plugin-react/blob/cfd1c3461d01a14a92f665ae89498b1c407085ea/lib/util/Components.js#L240 should work.. hmm, not sure. https://github.com/yannickcr/eslint-plugin-react/blob/cfd1c3461d01a14a92f665ae89498b1c407085ea/lib/util/Components.js#L240 should work.. is sourceCode.getJSDocComment(node); throwing, or returning null?. It doesn't seem like we have tests for this behavior; we should add them when fixing this.. The proper way to use the indent rule with react/jsx-indent is to tell the indent rule to ignore all the JSX nodes.. You need more ignored nodes than that. See https://github.com/airbnb/javascript/blob/e9fff7adbf6dd4e3723c12849c407aafd429cf0f/packages/eslint-config-airbnb-base/rules/style.js#L141. I'm not sure a rule exists; your third example looks fine to me (the prop alignment would need fixing, ofc, but that's a separate rule) - but your second example; why would someone want that to pass?. A combination of closing bracket location, closing tag location, jsx-first-prop-new-line, jsx-indent-props, jsx-indent, jsx-one-expression-per-line, jsx-tag-spacing, and jsx-child-element-spacing, seems like it would be able to handle it?. Our component detection likely requires a component to return JSX.\nIt becomes very very difficult to detect if an SFC that returns no JSX is in fact a component. A temporary workaround should be to add a comment above the SFC that says /* @extends React.Component */.. Note that you can also return a React.Fragment or <>.. Note that you can also return a React.Fragment or <>.. @leonaves if it's not a component, then it doesn't have \"props\" - it has arguments, and it can't have propTypes.. @leonaves if it's not a component, then it doesn't have \"props\" - it has arguments, and it can't have propTypes.. A PR would be great :-). I added a passing test linked to this issue; we\u2019d definitely need a repro case.\n@gbedardsiceupgrade can you try to reproduce this on v7.7.0?. @Leonard-Li777 can you share the code it\u2019s crashing on?. I\u2019m not sure what you mean - the default values are listed in the docs. Is there a reason you think that the default shouldn't just be improved?. In general I agree that custom messages are useful; however for this case, I'm still not sure what custom message anyone could provide that wouldn't be better as the unconfigurable default.. Thanks, this looks great!. It would be dangerous to enforce object spread props on any particular order, as you might intend props before it to be overridden, and props after it to override.\nThe collision between options sounds like it might be a bug.. What error do you get from your example?. In your example, the shorthand prop is on the bottom.\nCan you provide example code and config, combined with actual and expected output?. We should avoid a breaking change.. We should avoid a breaking change.. That seems like it\u2019d be a problem with almost any mutations; perhaps a more generic rule (not react-specific) that prevented mutating imports/requires?. Mutating things you don\u2019t own is generally considered always problematic.. Tbh I\u2019d see it as a core rule; if they reject it, then the import plugin.. I don\u2019t think doing it just for defaultProps would be useful; youd also need to do it for propTypes, contextTypes, childContextTypes, and whatever React introduces in the future. A generic rule would be better.. I suspect a lot of rules will need to be updated to support fragment syntax.. Related: #1579, #1661, #1706. Since babel 7 is required for <>, and is not yet released, let\u2019s leave this open until it is, so we will be sure to fix it.. See #1956. onClick isn\u2019t an unknown prop tho?. Either way, implementing linting for this new React runtime warning seems like a good idea.. What\u2019s your eslint config? Class properties aren\u2019t part of JavaScript yet.. It\u2019s a bug with npm and eslint. You have to pin espree at v6, i think.. The specific solution is https://github.com/eslint/espree/issues/393#issuecomment-433348355. I don\u2019t believe the airbnb eslint config is compatible with CRA without ejecting - the dependency warnings you\u2019re seeing mean that nothing can be expected to work until they\u2019re fixed.. The airbnb config already sets those parserOptions - only the parser change is likely needed.. What's needed now is a PR.. Any chance you could provide the code that it\u2019s erroring on?. @louisscruz indeed; the code examples using class properties would need to be tweaked so as not to use them.. In that case we can leave this unmerged for awhile until we\u2019re ready for a breaking change.. defaultProps are different than function defaults (runtime-inspectable, for one); you\u2019re supposed to use defaultProps - with flow as well.. Closing in favor of #1694.. It's related in that this plugin currently has no support for fragments, and any fix for that will address it for all the rules.. Hmm, that part I'm not sure about - I'd assume it's just a new node type that our rules aren't listening for.. Yes, they would - but hopefully in the same PR :-). Using setState directly inside didMount or didUpdate might be fine, but if you use it inside didMount or didUpdate after an async action, then it will definitely cause problems (nothing in those links disagrees with this).. @Tomekmularczyk the proper way to do that is now to use getDerivedStateFromProps, i believe.. @Tomekmularczyk the proper way to do that is now to use getDerivedStateFromProps, i believe.. The jsx rules deal with jsx syntax, not file extensions.. Absolutely you can. Have you tried, and found them not to work?. Can you elaborate, with code examples, and explain why you\u2019d want it to be different?. We'd need to also account for createClass components; but if we had all three, and all three defaulted to true (or, we had an \"ignore\" object with all three defaulting to \"false\", which is probably better) that could work.. Using always/never seems most appropriate here. Want to make a PR?. Using always/never seems most appropriate here. Want to make a PR?. The always/never one you suggested, with \"class\", \"createClass\", and \"SFC\" as options, would be great.. The always/never one you suggested, with \"class\", \"createClass\", and \"SFC\" as options, would be great.. The first one - { ...rest } - seems like a hack around the rule; I think we should change the rule to add an option that forbids accessing properties off of a rest prop. (in other words, rest.children would be an error).\nThe second one is a bug - the argument shouldn't need to be named \"props\" to be caught.\nAs for the third one, i'd say it's an antipattern anyways to have logic like that in a class field, because you'd also need duplicate logic in componentWillReceiveProps, so I think the proper fix for that is \"move that to the constructor\".. The first one - { ...rest } - seems like a hack around the rule; I think we should change the rule to add an option that forbids accessing properties off of a rest prop. (in other words, rest.children would be an error).\nThe second one is a bug - the argument shouldn't need to be named \"props\" to be caught.\nAs for the third one, i'd say it's an antipattern anyways to have logic like that in a class field, because you'd also need duplicate logic in componentWillReceiveProps, so I think the proper fix for that is \"move that to the constructor\".. You do, always (with state that depends on props), need to duplicate the logic in two places; at construction and in cWRP. I'm suggesting that it would be cleaner code to have the initialization-time part in the constructor rather than in a class field.. You do, always (with state that depends on props), need to duplicate the logic in two places; at construction and in cWRP. I'm suggesting that it would be cleaner code to have the initialization-time part in the constructor rather than in a class field.. I\u2019m not convinced it shouldn\u2019t report an error there; i tend to think this use case should not be permitted in a class field.. I\u2019m not convinced it shouldn\u2019t report an error there; i tend to think this use case should not be permitted in a class field.. Correct; the error means you're not allowed to use a class field for this case.. @joggienl yes, that's what that means. you should use a constructor for that case.\n@kamronbatman as should you. also note, your SomeComponent has a bug - it's setting state based on initial props, but you don't have a componentWillReceiveProps or getDerivedStateFromProps, so your component will be broken on rerender.. @joggienl yes, that's what that means. you should use a constructor for that case.\n@kamronbatman as should you. also note, your SomeComponent has a bug - it's setting state based on initial props, but you don't have a componentWillReceiveProps or getDerivedStateFromProps, so your component will be broken on rerender.. I think that's a needed constructor. However, I do think adding this as an option also makes sense.\n1740 might need to be merged first, however.. I think that's a needed constructor. However, I do think adding this as an option also makes sense.\n1740 might need to be merged first, however.. This seems a bit heavy handed; while I agree with the design principle, it's not really reasonable for a rule to ban any non-pure/non-SFC component (note that SFCs aren't necessarily pure by any means) from rendering anything besides a custom component. What about Something's props and children?. This seems a bit heavy handed; while I agree with the design principle, it's not really reasonable for a rule to ban any non-pure/non-SFC component (note that SFCs aren't necessarily pure by any means) from rendering anything besides a custom component. What about Something's props and children?. @kof specifically, there's about 9,000 React components in airbnb's codebase, and my hunch is that about 7,000 of them would fail this rule. That seems heavy-handed to me.. @kof specifically, there's about 9,000 React components in airbnb's codebase, and my hunch is that about 7,000 of them would fail this rule. That seems heavy-handed to me.. Certainly it can be. What I'm trying to suggest is that it's a bad rule because it would be forcing separation that isn't needed to ensure a clean codebase.. Certainly it can be. What I'm trying to suggest is that it's a bad rule because it would be forcing separation that isn't needed to ensure a clean codebase.. What's the rest of your .eslintrc file? Do you have any other eslintrc files in your repo?. What's the rest of your .eslintrc file? Do you have any other eslintrc files in your repo?. Certainly, I would expect adding \"react/no-did-mount-set-state\": 0, to the \"rules\" array in your eslintrc would disable the rule. How are you running eslint?. Certainly, I would expect adding \"react/no-did-mount-set-state\": 0, to the \"rules\" array in your eslintrc would disable the rule. How are you running eslint?. It might be a gulp issue; can you try using npx eslint so that it runs a local eslint, directly?. It might be a gulp issue; can you try using npx eslint so that it runs a local eslint, directly?. aha! What if you add \"plugins\": [\"react\"] to your .eslintrc?. As a sibling of \u201crules\u201d. It\u2019s the same as suppressing an error on any eslint rule (with the plugin thing being the only difference). Can you run npm ls and confirm it\u2019s exiting zero?. No, that\u2019s the right command; if you were missing peer deps it would show errors.\nThis isn\u2019t a url, it\u2019s a rule name - the \u201creact/\u201c means it\u2019s part of eslint-plugin-react.\nIn addition to .eslintrc, is there any file with \u201ceslint\u201d in the name anywhere else in your project?\nAlso, can you try \u201droot\u201d: true to your eslintrc? (You might have an .eslintrc file higher up, like in your home dir). I\u2019m asking if there could be other eslint config files (theres multiple supported file names) that are affecting the settings.. If you have things configured to forbid a prop name, then you can't use it on any component.\nI'm not sure what you're asking here.. If you have things configured to forbid a prop name, then you can't use it on any component.\nI'm not sure what you're asking here.. jsx\nreturn [\n  (\n    <div>\n      ...\n    </div>\n  ),\n  (\n    <div>\n      ...\n    </div>\n  ),\n];\n^ is in fact the correct code for it; I would recommend disabling any autoformat that isn't eslint.. @devautor it implies that return (); is invalid JS, so eslint is unable to parse it at all. It has nothing to do with this plugin; it's just invalid code.. @devautor it implies that return (); is invalid JS, so eslint is unable to parse it at all. It has nothing to do with this plugin; it's just invalid code.. I\u2019m pretty sure re-exports aren\u2019t supposed to make the variable available in your module; if this works then it might be a bug in babel. You have to import something to use it.. Ouch, that\u2019s a problem. The bug is with curly brace presence (they are necessary around whitespace) and maybe also with self-closing-comp (inline elements with a space inside aren\u2019t necessarily empty).\nThese need to be fixed soon.. cc @sharmilajesupaul . We still should fix react-self-closing-comp to not treat inline HTML elements as empty when they contain whitespace (it should autofix them to a single space, perhaps). We still should fix react-self-closing-comp to not treat inline HTML elements as empty when they contain whitespace (it should autofix them to a single space, perhaps). instanceOf should probably be forbidden entirely, since instanceof doesn\u2019t work cross-realm and isn\u2019t robust.. Cross-realm means, effectively, from an iframe or node\u2019s vm module.. http://2ality.com/2014/12/es6-symbols.html section 4 mentions it a bit, for one.. http://2ality.com/2014/12/es6-symbols.html section 4 mentions it a bit, for one.. @ferhatelmas if you could provide a failing test case (on a branch in your fork), and link it here, i'll add it to the PR and we can get this in.. cc @alexzherdev if you're interested in taking a look at this one, i'm happy to add any commits you like to this PR branch :-) (cc #1824). cc @alexzherdev if you're interested in taking a look at this one, i'm happy to add any commits you like to this PR branch :-) (cc #1824). It\u2019s not necessarily required, but it is ideal. Different parsers produce different AST node names, with different node schemas, so its useful to run them all through multiple parsers.. Fixed by #1733.. Fixed by #1733.. Indeed it is; but it's still a bad idea to create an arrow function inline. Make it a constructor-bound instance method and you'll avoid this error.. Indeed it is; but it's still a bad idea to create an arrow function inline. Make it a constructor-bound instance method and you'll avoid this error.. foo(props) { return <DummyComponent {...props} />); }, this.foo = this.foo.bind(this) in the constructor, and render={this.foo} on the Route.. foo(props) { return <DummyComponent {...props} />); }, this.foo = this.foo.bind(this) in the constructor, and render={this.foo} on the Route.. I would expect this:\n```jsx\nexport const Foo = () => (\n  \nFoo\n<style jsx>\n  {`\n    .foo {\n      padding: 1rem;\n    }\n  `}\n</style>\n\n\n);\n. I would expect this:jsx\nexport const Foo = () => (\n  \nFoo\n<style jsx>\n  {`\n    .foo {\n      padding: 1rem;\n    }\n  `}\n</style>\n\n\n);\n```. The bug here is that the one liner fixes it; there\u2019s no reason you need a literal inside curly braces there.\nWhy are you trying to convert a jsx string literal into a JS string literal with no interpolations?. The bug here is that the one liner fixes it; there\u2019s no reason you need a literal inside curly braces there.\nWhy are you trying to convert a jsx string literal into a JS string literal with no interpolations?. Actually the oneliner fixes it because it assumes that the whitespace surrounding the literal is significant, so that\u2019s correct behavior, but the question still remains.. Actually the oneliner fixes it because it assumes that the whitespace surrounding the literal is significant, so that\u2019s correct behavior, but the question still remains.. Consistency i buy - I\u2019m not sure what else it\u2019d be than a string, and you can add interpolations directly with jsx.\nI think it\u2019d be worth exploring some test cases in a PR to see what would break by adddressing this.. Consistency i buy - I\u2019m not sure what else it\u2019d be than a string, and you can add interpolations directly with jsx.\nI think it\u2019d be worth exploring some test cases in a PR to see what would break by adddressing this.. Yes, with \u201calways\u201d (a setting i have zero understanding of why anyone would want), I\u2019d expect those to be correct.. Please, go for it!. I think they're different enough that they should remain separate.. I\u2019m confused why you\u2019d mutate the object after assigning it (it\u2019s much slower and messier), but yes, this is a bug - specifically, it shouldn\u2019t warn on LHS member chains off of state or props, only RHS.. I\u2019m confused why you\u2019d mutate the object after assigning it (it\u2019s much slower and messier), but yes, this is a bug - specifically, it shouldn\u2019t warn on LHS member chains off of state or props, only RHS.. @leohxj in that case, it\u2019s correct. Do const { name } = this.props; before the state assignment, and do both in the constructor (iow, don\u2019t do things in class property initializers that depend on props or state). @leohxj in that case, it\u2019s correct. Do const { name } = this.props; before the state assignment, and do both in the constructor (iow, don\u2019t do things in class property initializers that depend on props or state). @leohxj of course it will work; the reason not to do it is because it makes things much less clear when reading the code.. I don't think it's an oversight; there's no way to programmatically deal with single-letter words in a PascalCase/camelCase algorithm. I think the accepted solution is to either not use abbreviations, or to allow \"all uppercase\".. Convenience isn't the priority; destructuring the props serves many useful purposes: for instance, for function props, it ensures they're not called with the this value as the props object.\nOptimize for reading, not writing: in other words, convenience when writing code does not matter in the face of improving the readability of the code.\n(Separately, a component that small should be an SFC, not a class-based component, and neither of those two components likely have any performance benefit by being a PureComponent). @pferreir i agree that in the tiny percentage of cases where you're using a single prop or state value, it's slightly awkward to have to write the destructuring - but in the cause of minimizing future diff churn, when inevitably someone adds a second prop or state field, the change is much more minimal when they'd destructured in the first place.. @pferreir i agree that in the tiny percentage of cases where you're using a single prop or state value, it's slightly awkward to have to write the destructuring - but in the cause of minimizing future diff churn, when inevitably someone adds a second prop or state field, the change is much more minimal when they'd destructured in the first place.. @ThiefMaster those sound like they should be SFCs, where they can be destructured in the component's arguments.. @ThiefMaster those sound like they should be SFCs, where they can be destructured in the component's arguments.. @UchihaVeha considering that both will throw a React error when message is undefined, i think neither look particularly good. Here\u2019s how i would write it:\njsx\nfunction SnackBarConnected(props) {\n  const { message } = props;\n  if (!message) { return null; }\n  return <SnackBar {...props} />;\n}. @UchihaVeha considering that both will throw a React error when message is undefined, i think neither look particularly good. Here\u2019s how i would write it:\njsx\nfunction SnackBarConnected(props) {\n  const { message } = props;\n  if (!message) { return null; }\n  return <SnackBar {...props} />;\n}. @UchihaVeha in both cases, you should use an explicit return, so that you can add a destructuring statement above:\njsx\nconst myComponent = (props) => {\n  const { user: { email } = props;\n  return (\n    <div>\n      <span>{props.user.email}</span>\n      <Account {...props} />\n    </div>\n  );\n};\njsx\nconst myComponent = ({ user, ...props }) => {\n  const { email } = user;\n  return (\n    <div>\n      <span>{email}</span>\n      <Account {...props} user={user} />\n    </div>\n  );\n};. @UchihaVeha in both cases, you should use an explicit return, so that you can add a destructuring statement above:\njsx\nconst myComponent = (props) => {\n  const { user: { email } = props;\n  return (\n    <div>\n      <span>{props.user.email}</span>\n      <Account {...props} />\n    </div>\n  );\n};\njsx\nconst myComponent = ({ user, ...props }) => {\n  const { email } = user;\n  return (\n    <div>\n      <span>{email}</span>\n      <Account {...props} user={user} />\n    </div>\n  );\n};. @dolsem I definitely prefer the second one, altho I think you've identified a current problematic case - specifically that this:\njs\nshouldComponentUpdate({ uri }) {\n  return this.props.uri !== uri;\n}\nwill still warn on this.props.uri - I think the rule needs an option that toggles whether it forces destructuring when a renaming would otherwise be necessary.. This actually seems like a duplicate of #1629.. This actually seems like a duplicate of #1629.. @dandonahoe that example is exactly the worst hazard - this.props is now the receiver (the this value) of the prop function, and you\u2019ve just exposed yourself to a much larger class of bugs by implicitly passing the props object elsewhere.\nEven if there was an option like this (which I\u2019m not inclined to add) it would never allow you to avoid destructuring a function prop.. @dandonahoe that example is exactly the worst hazard - this.props is now the receiver (the this value) of the prop function, and you\u2019ve just exposed yourself to a much larger class of bugs by implicitly passing the props object elsewhere.\nEven if there was an option like this (which I\u2019m not inclined to add) it would never allow you to avoid destructuring a function prop.. You\u2019re missing that in JavaScript, the object the method is called in gets implicitly passed as the this value to the function.. You\u2019re missing that in JavaScript, the object the method is called in gets implicitly passed as the this value to the function.. @AlicanC that's specifically the footgun that must be avoided - this.props.anything() is an antipattern and must never appear anywhere in code. That's the primary reason I'm unlikely to ever agree to add a \"count\" to this rule.. It\u2019s not \u201ctons\u201d, and this is a javascript linter, not a Flow or TS linter. Are you honestly trying to say tho that you strictly type your functions to have no this value, and that the type system thus doesn\u2019t force the same code?. eslint certainly can prevent you from calling props functions with the props object as the this, unintentionally, and this rule helps with that. Types aren't necessary for \"right and wrong\" nor do they exhaustively determine that.\nUsing types to paper over incorrect engineering - like returning a value from onButtonPress when you have no intent to use it - is not a good use of types. That must be onButtonPress = () => { this.props.doThing(); } and if your types aren't enforcing that, they're not helping you.\nIf you need to turn off a rule because your developers refuse to learn best practices, you're welcome to do that - but that doesn't mean the rule should be weakened.\nI'd certainly be open to making this rule more autofixable, however, if that would ease the burden.. @AlicanC i'd be open to modifying the rule to add an option that specifically only enforced destructuring on function invocations, and also to a PR that adds autofixing, which should address the \"hard\" complaint.. @yardenhochman separately, you should never put arrow functions in class fields - but why it's better is that in your second example, the login prop gets this.props as its this value, which unnecessarily exposes your props object to consumer code.. @alexzherdev certainly it could already be bound, or be an arrow function, or simply not use this. However, that\u2019s impossible to know inside the component in question.. @malyzeli the loginUser prop there could mutate its this - changing your props, and making your component rendering nondeterministic.. Makes sense. Maybe we could change the schema (preserving back compat) so that \"forbid\" can be an array of strings and/or objects following this schema:\n{\n  propName: string,\n  custom: forbid|allow|ignore, // default \"forbid\"\n  html: forbid|allow|ignore, // default \"forbid\"\n  forbiddenComponents: [], // array of forbidden component tagNames,\n  allowedComponents: [], // array of allowed component tagNames\n}. \"custom\" and \"html\" would be only allowing an enum of \"forbid\", \"allow\", or \"ignore\", and would apply to all custom and all HTML components, respectively.\nAlthough yeah, maybe we only need \"forbid\" or \"allow\" here.. no, i still think the rule name should be forbid-component-props, i'm just talking about adding a backwards-compatible alternate schema.\nI like your suggested schema - \"overrides\" with an object, same forbid/allow enum.. ah, good point :-) in that case, we'd just need overrides, and the enum value would just be \"allow\". Why is navigationOptions an arrow function instead of a static method?. Sine the method doesn\u2019t use \u201cthis\u201d there\u2019s no reason for it to be an arrow function (it\u2019s pretty rare for static things to care about the receiver).\nIf you convert it to a static method, does your linting issue go away? If so, perhaps you could PR a fix into the react-navigation documentation?. Sine the method doesn\u2019t use \u201cthis\u201d there\u2019s no reason for it to be an arrow function (it\u2019s pretty rare for static things to care about the receiver).\nIf you convert it to a static method, does your linting issue go away? If so, perhaps you could PR a fix into the react-navigation documentation?. This seems reasonable; but what about the false positive case, where the dynamic link is internal?\nI'd hate to force people to disable the entire rule in that case.. This seems like it could be closed by #1784?. This seems like it could be closed by #1784?. hmm, that should definitely work.. @JustFly1984 please file a separate issue for that.. @HenriBeck i know it's been awhile; but did you have to delete the fork? This still seems useful, and I'd prefer not to have to have a different PR.. That's just appveyor; it simply hasn't been released yet.. I'm not sure using an X parser is ever too heavy a task to parse X :-). I'm not sure using an X parser is ever too heavy a task to parse X :-). An alternative would be to make an npm run-script that generates this list automatically, and then the CI check would simply be \"run the check, and fail if there's a diff\".. An alternative would be to make an npm run-script that generates this list automatically, and then the CI check would simply be \"run the check, and fail if there's a diff\".. @ybiquitous i'm not concerned with a large diff since it can be in a different commit; is it OK if we do it in this PR?. jsx\nconst { [prop]: foo } = this.props;\nBut you shouldn\u2019t be dynamically reaching into props; exposing that kind of unfettered prop access to children totally violates the data model of React.. jsx\nconst { [prop]: foo } = this.props;\nBut you shouldn\u2019t be dynamically reaching into props; exposing that kind of unfettered prop access to children totally violates the data model of React.. I\u2019m not sure that it is; we use string interpolation since translations always eventually need to be statically analyzeable.\nIn that case, why wouldn\u2019t the user just pass name directly into the Param? What\u2019s the point of the indirection?. I\u2019m not sure that it is; we use string interpolation since translations always eventually need to be statically analyzeable.\nIn that case, why wouldn\u2019t the user just pass name directly into the Param? What\u2019s the point of the indirection?. fwiw, the way we do it is basically \njsx\n<T\n  t=\"Hey %{name}, you want to do something %{bold_tag_start}bold%{bold_tag_end}?\"\n  html\n  bold_tag={<em />}\n/>\nwhich works with our many non-JS systems that also do translation (and with mobile, that doesn't necessarily use HTML to style things). fwiw, the way we do it is basically \njsx\n<T\n  t=\"Hey %{name}, you want to do something %{bold_tag_start}bold%{bold_tag_end}?\"\n  html\n  bold_tag={<em />}\n/>\nwhich works with our many non-JS systems that also do translation (and with mobile, that doesn't necessarily use HTML to style things). In that case I think the dynamic keys are the ugly part; I think destructuring is a fine way to do it.\nThat said, it might be ok to have an option that relaxes the requirement when the property is computed from a variable name - I just think the whole problem can be avoided entirely.. That\u2019s really outdated; can you try v7.7.0?\nAlso please note this is the link to the docs for 6.4.1: https://github.com/yannickcr/eslint-plugin-react/blob/v6.4.1/docs/rules/jsx-no-duplicate-props.md. That\u2019s really outdated; can you try v7.7.0?\nAlso please note this is the link to the docs for 6.4.1: https://github.com/yannickcr/eslint-plugin-react/blob/v6.4.1/docs/rules/jsx-no-duplicate-props.md. it's the default setting, but it's possible there was a bug there at one point; have you tried on v7.7?. it's the default setting, but it's possible there was a bug there at one point; have you tried on v7.7?. Since that\u2019s not determined until often long after the rule was added, that would complicate the release process a lot.\nYou can look at the documentation for any arbitrary tag on Github; here\u2019s for the latest: https://github.com/yannickcr/eslint-plugin-react/tree/v7.7.0/docs/rules. Since that\u2019s not determined until often long after the rule was added, that would complicate the release process a lot.\nYou can look at the documentation for any arbitrary tag on Github; here\u2019s for the latest: https://github.com/yannickcr/eslint-plugin-react/tree/v7.7.0/docs/rules. I\u2019m reopening this so i can sync the refs later to avoid cluttering the git graph; I\u2019ll close it as part of merging #1750.. I\u2019m reopening this so i can sync the refs later to avoid cluttering the git graph; I\u2019ll close it as part of merging #1750.. This seems to have been improperly rebased; @sergei-startsev, would you mind rebasing it?. When the value passed into shape is defined in the same file, it would be ideal to resolve it. Separately, if the value is defined elsewhere, we should ignore it instead of crashing.. When the value passed into shape is defined in the same file, it would be ideal to resolve it. Separately, if the value is defined elsewhere, we should ignore it instead of crashing.. Let\u2019s update the warning text at least.\nShould we maybe move these methods behind an option then?. @gaearon Thanks for your comment!\nRegarding your suggestions:\n\nPRs that add deprecation warnings aren't merged without a look from somebody on the React team.\n\nSounds good! How should I best ping you all?\n\nDeprecation lint warnings aren't introduced until we actually deprecate a feature in React (which hasn't quite happened yet).\n\nThat sounds reasonable, but even a runtime warning is imo a deprecation in React.\n\nDeprecation lint warning messages must include links to codemods and migration instructions.\nDeprecation rule documentation page must include links to codemods and migration instructions.\n\nSounds great; a PR to update any existing docs/messages is most welcome.\n\nDeprecation lint rule is not added to \"recommended\" preset until the next React major. In other words, we want people to see React runtime warnings first, and update at their own pace. They can they opt into checking deprecations with a linter. But we want React runtime warnings to be the primary mechanism, and the linter being an opt-in way to avoid regressing. It should never be the case that somebody picks a popular or \"recommended\" preset, and that preset contains warnings we haven't even had a chance to surface at runtime in React.\n\nThis unfortunately isn't feasible, because eslint requires the entire rule be enabled or disabled wholesale - and we don't want to make separate deprecation rules for each version of react. Certainly enabling any rule in a preset is a semver-major change, as should be causing any additional warnings by enabling an option.\nI'm not sure I agree that runtime warnings should be the primary mechanism; runtime warnings are incredibly easy to miss, suppressed in production, and the linter is a far more effective way (in a large organization, at least) to get attention on these warnings.. ahhh, you're right, i misread the merge date. i'll update my comment.. I think it'd be a bit weird to have a second place to configure a React version - at the very least, it sounds like there's a bunch of deprecations in the rule that are activating at React versions that are lower than they should be - a PR to fix that (even if it hoists the warnings to 16.999) would be appreciated.. Reopening due to https://github.com/yannickcr/eslint-plugin-react/issues/1751#issuecomment-377501937. Reopening due to https://github.com/yannickcr/eslint-plugin-react/issues/1751#issuecomment-377501937. Hm, that\u2019s a fair point - however i think that if you\u2019re doing that, it\u2019s reasonable to require setting your version pragma to 16.3, since that\u2019s what you\u2019re simulating.. Hm, that\u2019s a fair point - however i think that if you\u2019re doing that, it\u2019s reasonable to require setting your version pragma to 16.3, since that\u2019s what you\u2019re simulating.. @mrbinky3000 have you set your react version pragma to 16.3?. @mrbinky3000 have you set your react version pragma to 16.3?. That does seem like that should work.. That does seem like that should work.. @mrbinky3000 that does help, a lot. Would you mind filing a new issue with all this info, and link to it here?. @mrbinky3000 that does help, a lot. Would you mind filing a new issue with all this info, and link to it here?. @canda have you set your react version in settings?. @danielepiccone can you file that as a new issue?. That\u2019s because the fix isn\u2019t released yet.. @plysik as you can see on this very page, the issue is closed with a commit, which means the fix is in master. As you can see from the commit, it\u2019s been released since v7.8.\nIf you are having a problem, please file a new issue.. This seems like a good idea, provided that we don't have to maintain our own copy of the list of valid tag names - we'd need to find a way to use the same list React itself does.. This seems like a good idea, provided that we don't have to maintain our own copy of the list of valid tag names - we'd need to find a way to use the same list React itself does.. If we need react to publish some of this logic, then let's file an issue to ask them for it.. If we need react to publish some of this logic, then let's file an issue to ask them for it.. This is actually intentional, and in a future version of React key I believe won't be possible to spread, it will only be allowed statically provided.\nThe key should always be hardcoded; it's not a normal prop.. This is actually intentional, and in a future version of React key I believe won't be possible to spread, it will only be allowed statically provided.\nThe key should always be hardcoded; it's not a normal prop.. Sure, a PR to add that to the jsx-key docs would be great!. Sure, a PR to add that to the jsx-key docs would be great!. Can you elaborate?. Can you elaborate?. I'm aware of those deprecations, but I'm not sure why it suddenly means that componentDidMount - which is NOT deprecated - would be able to have a setState call in it.. I'm aware of those deprecations, but I'm not sure why it suddenly means that componentDidMount - which is NOT deprecated - would be able to have a setState call in it.. An extra render is definitely a performance issue; but an extra render with different state causes a user-visible flash.. An extra render is definitely a performance issue; but an extra render with different state causes a user-visible flash.. @kentcdodds thanks for the clarification. do you then agree with the OP, that as of v16.3, these two rules no longer have value?. Seems like the actionable thing to do here is, when the React version pragma is >= v16.3, these rules should no-op.. @steida people still use Reacts older than 16.3.. @dantman that sounds great! However, we'll also want to make sure this change only applies after whichever React version added fragment support.. This may be resolved with the next release; I'll leave it open to check.. @evan-scott-zocdoc can you file a new issue?. @evan-scott-zocdoc can you file a new issue?. @evan-scott-zocdoc sure. could you provide the exact code and warnings you get?. @evan-scott-zocdoc sure. could you provide the exact code and warnings you get?. Thanks, looks like it's def still an issue.. Thanks, looks like it's def still an issue.. I think if the method name is getDerivedStateFromProps on the component, then the prop names should be irrelevant?. I think if the method name is getDerivedStateFromProps on the component, then the prop names should be irrelevant?. @bengeorge because those were the argument names on componentWillReceiveProps.\nIt doesn't really matter tho, you shouldn't have to name the arguments anything special.. @Hal-pan please open a new issue with actual text (not screenshots of code, please); commenting on a closed one makes it hard to follow through with a fix.\nHowever, this fix hasn't been released yet - so you may need to wait for the next release before it's fixed.. Can you elaborate a bit by providing the code that you expect to warn? Separately, i'm not sure why prettier's \"recommended\" config would be enabling any of the rules in this plugin - typically you have to do that manually (prettier is just for formatting).. This should already be addressed by the jsx-no-bind rule, with the default options.. In what context is TABLE_HEADERS used?. Indeed, the tr there is at the 4th level, and the th's each on the 5th.\nI don't think being self-closing matters, or else the lines with two non-self-closing th tags in a row wouldn't have incremented the count - but there's definitely a bug here with the reported count in the error message.. This was fixed in #1565 and #1414. I'll add your test case to master to be sure.. @alexhalf could you file a new issue for that?. @alexhalf a new issue, meaning, not this closed one :-). I think destructuring props off of this is pretty rare, but i agree it should work.. If you enforce that multiline jsx has wrapping parens, then the indent rules can ensure what you want.. Closed in #1771.. There's a few more react 16 things I'd want to try to include first.. Are dangerous attributes added, typically? Web standards seem to be pretty intent on avoiding new footguns like that.. Somewhat, but if that paranoia means people will get tons of lint errors until you update the config to allow the new attr, they might just turn off the rule - which would be worse than adding one to \"forbidden\" later.. Arrow functions are not instance methods though :-/. To use let in node 4, the file must have 'use strict'; at the top.. @joe-denea it's now fixed in nvm itself, on travis - I've reran the errored builds.. Ah, good call. I'll try to fix that too.. @LeonardoGentile it\u2019s not a false positive, the property name is supposed to be propTypes, not PropTypes. There\u2019s a separate \u201cno typos\u201d rule you may wish to look into.. Can you paste the actual warning message (and denote the line it points to)?. Separately, if you truly only want to render once, you\u2019d want a normal class component with a shouldComponentUpdate that returns false.. @johnunclesam what if you extends React.PureComponent (instead of bringing it in as a named import)?. @michaelhogg an arrow function in a class property is resoundingly not an instance method - it's simply a data property that happens to have an arrow function (which, for the record, is a bad practice - never use arrow functions in class properties). Thus, a class field should not be sorted along with actual instance methods.. @michaelhogg thanks for the in-depth response :-)\nok, so:\n1. classMethod() {} should indeed be considered an \"instance method\". This is a good bug fix - however, it's possible this will be noisy enough that we might want to consider it semver-major just in case.\n1. bar = () => {} is not an instance method (unrelated to any best practices discussion about arrows in class properties) and classifying it as such is a bug that we should fix asap. I think it should only be an \"instance variable\", and we should not differentiate by \"bound methods\" because foo = this.foo.bind(this) would also be included, so it makes things more complex.\n1. The popularity of a bad pattern is a justification for linter rules and style guides to be stricter about it, to promote education. The React docs should be updated as well.\n1. Renaming the existing groups to be both less correct, but potentially more clear to people who don't know how the language works, is an interesting (definitely semver-major) proposal.\n1. Defaulting to include instance methods is a good change, but a semver-major one.\nThis PR should only include maybe item 1, and definitely item 2. The others should be filed as separate issues and discussed separately :-). @michaelhogg thanks for the in-depth response :-)\nok, so:\n1. classMethod() {} should indeed be considered an \"instance method\". This is a good bug fix - however, it's possible this will be noisy enough that we might want to consider it semver-major just in case.\n1. bar = () => {} is not an instance method (unrelated to any best practices discussion about arrows in class properties) and classifying it as such is a bug that we should fix asap. I think it should only be an \"instance variable\", and we should not differentiate by \"bound methods\" because foo = this.foo.bind(this) would also be included, so it makes things more complex.\n1. The popularity of a bad pattern is a justification for linter rules and style guides to be stricter about it, to promote education. The React docs should be updated as well.\n1. Renaming the existing groups to be both less correct, but potentially more clear to people who don't know how the language works, is an interesting (definitely semver-major) proposal.\n1. Defaulting to include instance methods is a good change, but a semver-major one.\nThis PR should only include maybe item 1, and definitely item 2. The others should be filed as separate issues and discussed separately :-). Indentation should be handled by the indent and react/jsx-indent rules; it's typical and common for autofixers to need to work in tandem.. Yes, that seems reasonable. We could perhaps add an option to jsx-indent that covered plain text?. Yes, that seems reasonable. We could perhaps add an option to jsx-indent that covered plain text?. I don\u2019t know if it would be easy, but i think the rule definitely needs two options - one for plain text content, and another for elements with only one child.. I don\u2019t know if it would be easy, but i think the rule definitely needs two options - one for plain text content, and another for elements with only one child.. The only fix, besides someone submitting a PR here, is disabling the rule for the time being.. That sounds right, and that'd be great - I think that yes, allowSingleChild would be a superset of allowPlainTextOnly, so maybe better would be allow that can take text or single-child, where \"text\" covers \"any non-element children\"?. ok fair, maybe just \"text or numbers\" for the text option?. in that case, let's call the options single-child vs literal vs none (the default)?. Yes, I think that the option should only take effect if the single child is on the same line as opening and closing tags.. In this case, that's just the type of whatever's passed into navigationOptions - that provides no guarantee that this.props.navigation is used.\nThe real issue is that you're passing the entire props object around, which is both an antipattern and impossible to lint properly. If you extract navigation prior to calling navigationOptions, you won't run into trouble.. How does react-navigation get your props object in the first place?. Again; none of those are actual props - they're arguments that react-navigation or whatever is passing to those functions.\nThose shouldn't be propTyped - propTypes are only for things that your component directly receives as props.\nCan you share the entire component code?. I understand you want to declare flow types on the function arguments.\nHowever, the no-unused-prop-types rule doesn't care about random function argument types, it only cares about component props.\nComponent methods don't get props - they get arguments. The only thing in a class-based component that's \"props\" is this.props, and anything you need out of it should be explicitly destructured instead of passed into a function.\nIn other words, here's your props:\n - SocialTradersCarousel's data: https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-first-js-L59\n - PortfolioScreen's navigation: https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-second-js-L90 and https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-second-js-L93 and https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-second-js-L118.\nNow that's established, I do see that the flow type is specifying what the props are - and that no-unused-prop-types is warning on them means that the plugin is picking that up.\nWhich of these two components is getting the warning? As I've said, https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-second-js-L41 is not a prop usage, so the use of the NavigationScreenProp flow type there is irrelevant. https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-second-js-L80-L96 is what should be counting navigation as used (that you should never use arrow functions in a class property, and only constructor-bound instance methods isn't the actual issue, but it's worth mentioning), as well as https://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e#file-second-js-L118 inside render.\nWhat external libs are the issue in your gist?. ahh i think i see the issue - you\u2019re using render props, which are functions that return jsx, thus this plugin is considering them components.. For the first one, that seems like a useful rule.\nFor the second one, why should it warn? A class-based component doesn't necessarily have to have state.. That certainly seems more reasonable :-). @alexzherdev a pure component only rerenders when its props change. If a component has state, it needs to rerender when state changes as well, which means it's not pure.. oh, good point - in that case, the first one no longer seems useful.\nThe only remaining item in this issue is then \"if this.state is read, we should check if the state is initialized?\". I think you're missing that a \"closing bracket\" is referring to /> - } is a curly brace, not a bracket :-)\nTry <Component onChange={(e) => set('string', e.target.value)} />. Yes, the crashing part is a clear bug if you're on the latest eslint. What version do you have installed, and does npm ls exit zero?. Yes, the crashing part is a clear bug if you're on the latest eslint. What version do you have installed, and does npm ls exit zero?. ok, so it looks like your node_modules is invalid. Try rm -rf node_modules && npm install. ok, so it looks like your node_modules is invalid. Try rm -rf node_modules && npm install. @reergymerej thanks, that\u2019s very helpful. We\u2019ll have to figure out how to restore eslint v3 support, since changing the peer dep is semver-major.. @reergymerej thanks, that\u2019s very helpful. We\u2019ll have to figure out how to restore eslint v3 support, since changing the peer dep is semver-major.. The linter rule can't track all the possible ways you could mutate a component to add a display name; you could use _.extend(Foo, { displayName: 'foo' }) as well, and there's no way to statically know what it's doing.\nOne point of this rule is that you shouldn't use an arrow function as an SFC - you must use a normal named function.. jsx\n<div>\n  <div>\n{/* eslint-disable-line react/jsx-indent */ /*\n      comment\n*/}\n  </div>\n</div>\n?\nEither way, that would require a special jsx-indent option for comments - and that's something i wouldn't want to add unless the core indent rule had the same option.. jsx\n<div>\n  <div>\n{/* eslint-disable-line react/jsx-indent */ /*\n      comment\n*/}\n  </div>\n</div>\n?\nEither way, that would require a special jsx-indent option for comments - and that's something i wouldn't want to add unless the core indent rule had the same option.. @jhicken i was on mobile, so I couldn't try it myself, but it was a suggestion to see if it would work.\nWhat I meant was, I think react/jsx-indent should not add any options that indent doesn't have, specifically so that both rules can format code in the same ways.\nI'm not sure what could possibly work here, due to the issues you're pointing out. Is \"differentiate with syntax highlighting, not indentation\" not an option?. @jhicken i was on mobile, so I couldn't try it myself, but it was a suggestion to see if it would work.\nWhat I meant was, I think react/jsx-indent should not add any options that indent doesn't have, specifically so that both rules can format code in the same ways.\nI'm not sure what could possibly work here, due to the issues you're pointing out. Is \"differentiate with syntax highlighting, not indentation\" not an option?. I\u2019d strongly recommend not tying linting into the build - they\u2019re two unrelated concerns.\nI don\u2019t think it\u2019s been explored. If you want to give it a shot, I\u2019m happy to review.. I\u2019d strongly recommend not tying linting into the build - they\u2019re two unrelated concerns.\nI don\u2019t think it\u2019s been explored. If you want to give it a shot, I\u2019m happy to review.. Oh I totally agree that the linter should gate any merging, and certainly any deploying - but for local dev that's not a concern, and the build should be testable even before the linter passes :-)\nSounds good, I'll review whenever you have time.. Oh I totally agree that the linter should gate any merging, and certainly any deploying - but for local dev that's not a concern, and the build should be testable even before the linter passes :-)\nSounds good, I'll review whenever you have time.. I think that since it can generate false positives, it should be behind an option.. I think if you can expand the error so it applies to an inline spread-\"href\", that would be generally useful?. Yes, that's generally true - but spreading props is an antipattern anyways, so it also might be OK to allow the checks to be bypassed in that case.. Can anyone affected by this share their eslint config, and also more of the stack trace?. @taddei I have a fix already, I just need a regression test.. aha, thanks, that did it :-). @jethrolarson that might be #2104 - can you add your details to that issue?. @dylanvann instead, a new issue should be filed - but luckily #2131 was filed and fixed already, and will be included in the next release.. k, i added a test thanks to your tip in the linked issue. will merge once tests pass.. Hmm, good point.\nInitially, I wanted the new methods to only apply when the React version pragma is 16.3+ - since these are already runtime deprecation warnings in React 16.3+. Perhaps that's a change we should make now?\ncc @sergei-startsev / #1750. In that case they\u2019d have runtime warnings, so the eslint warnings would be catching those sooner.\nFor the eslint ecosystem, the standard isn\u2019t \u201cany new errors is major\u201d, it\u2019s more nuanced than that. I don\u2019t think that means you want ~, either - i think it means that if a new release suddenly causes linter errors, it\u2019s supposed to be something you should have been doing in the first place. If you set the 16.3 pragma, it\u2019s assumed that you\u2019re following React 16.3\u2019s conventions already.. There\u2019s no way for a linter to statically know what \u201cget\u201d does. You should be destructuring range out of this.props, not using a traversal function on it.. https://github.com/swagger-api/swagger-ui/blob/d256ae87d310b40fb9fd5cc52ec2aa7db55b28ca/.eslintrc Doesn\u2019t specify a react version pragma, so as far as eslint is concerned, it\u2019s a React 16.3 project.\nIf you specify your react version, you\u2019ll get appropriate error messages.. Adding a warning for that sounds like a great idea.. @alasdairhurst there's always cases, however, where that constitutes a bugfix - ie, the bug was \"it wasn't warning\" and now it is.. That build ran with v7.8.0 (see the branch name), the PR you linked and the bugfix it contains is in v7.8.1.. What is your full eslint config?. @lynxtaa you should be specifying a version pragma in \"settings\" (see the read me), but I don't think that's it. Could you also share the entire component code in question?. ok, what warning do you get with that component?. aha, this seems to be a bug in the sort-comp implementation then - since the lifecycle methods are typically instance methods, but getDerivedStateFromProps is a static method.\ncc @joe-denea / #1771 which has tests for the \"valid\" case for this method, but not for the \"invalid\" case.. Fixed in #1795.. Fixed in #1795.. @noygal this isn't something that's possible to lint for, because we can't statically know that renderFunc is called with undefined every time.\nIt's a far better pattern regardless - and one that's easy to lint - if you pass x into renderFunc every time, or, if you make it an SFC instead.. Personally I don't think that rule should ever be enabled.\nSince your component is stateful, you shouldn't actually do anything to \"optimize\" that component.. Personally I don't think that rule should ever be enabled.\nSince your component is stateful, you shouldn't actually do anything to \"optimize\" that component.. I suppose you could make it a PureComponent - but overusing PureComponent doesn\u2019t \u201coptimize\u201d, it often slows things down.\nIf you do a setState in another lifecycle method, does the optimize rule still warn?. I suppose you could make it a PureComponent - but overusing PureComponent doesn\u2019t \u201coptimize\u201d, it often slows things down.\nIf you do a setState in another lifecycle method, does the optimize rule still warn?. I\u2019d just disable the rule; i don\u2019t know why we included it in the first place.. I\u2019d just disable the rule; i don\u2019t know why we included it in the first place.. This would be a terrible idea as class fields should never have arrow functions. The proper pattern is to constuructor-bind instance methods (your \u201cbad\u201d example). This would be a terrible idea as class fields should never have arrow functions. The proper pattern is to constuructor-bind instance methods (your \u201cbad\u201d example). For all of these reasons, but first and foremost because it's an abuse of class fields, which create own instance properties. Methods should be on the prototype; class fields are for instance-specific data.. For all of these reasons, but first and foremost because it's an abuse of class fields, which create own instance properties. Methods should be on the prototype; class fields are for instance-specific data.. @alexzherdev not exactly, because the \"meat\" of the function is still shared on the prototype, and thus optimized. The trivial bind-proxy can't be avoided, but at least that way we're minimizing the amount of un-shared code.. @Hypnosphi it's entirely possible that browsers will be able to optimize away the performance consideration, but it's still bad to put functions in class fields both conceptually, and for testing, so performance really isn't the important point.. @Hypnosphi it's entirely possible that browsers will be able to optimize away the performance consideration, but it's still bad to put functions in class fields both conceptually, and for testing, so performance really isn't the important point.. It\u2019s possible that our component detection breaks with the TypeScript parser. Do the errors still occur if the files are converted to regular JS?. It\u2019s possible that our component detection breaks with the TypeScript parser. Do the errors still occur if the files are converted to regular JS?. I also see that this only seems to complain about context; so maybe there\u2019s a specific bug around that facet of the rule. . I also see that this only seems to complain about context; so maybe there\u2019s a specific bug around that facet of the rule. . @bradennapier that's a separate issue (and definitely a bug) - can you file that as a separate issue?. Indeed, as it should - you should do this instead:\njs\nfunction MyClass() {\n  // stuff\n}\nMyClass.defaultProps = {\n  style: null,\n};\nMyClass.propTypes = {\n  style: ViewPropTypes.style,\n};\nexport default MyClass;. Indeed, as it should - you should do this instead:\njs\nfunction MyClass() {\n  // stuff\n}\nMyClass.defaultProps = {\n  style: null,\n};\nMyClass.propTypes = {\n  style: ViewPropTypes.style,\n};\nexport default MyClass;. @offero because if it doesn't need to be a class, it shouldn't be - functional components are always preferred because they have no inherent mutable state.. If that option were added, it\u2019d have to disallow functions in the child position as well.. If that option were added, it\u2019d have to disallow functions in the child position as well.. https://unpkg.com/eslint-plugin-react@7.9.0/package.json indeed it does.\n@yannickcr did you perhaps npm install npm-check without --no-save or --save-dev before publishing?. https://unpkg.com/eslint-plugin-react@7.9.0/package.json indeed it does.\n@yannickcr did you perhaps npm install npm-check without --no-save or --save-dev before publishing?. I've published a v7.9.1, with updated deps, and the correct package.json.. I've published a v7.9.1, with updated deps, and the correct package.json.. You may want to use npx npm-check rather than installing it in the future :-). You may want to use npx npm-check rather than installing it in the future :-). Probably unrelated, but import * as React is always incorrect - it\u2019s only import React from \u2018react\u2019. Can you confirm you\u2019re using flow? Usually only old and broken TypeScript docs ask for that incorrect syntax.. I think it'd be useful if it was configurable both ways - ie, i could use it to require OR forbid implementing them as static class properties.\nAlso, don't forget displayName and contextTypes.. How about react/component-static-property-style?. not \"always\" because that isn't clear what it means.\nI'd expect it to take this schema:\n 1. a string, either \"static public field\" or \"property assignment\" (the names can be bikeshed)\n 1. an object that has keys for propTypes, defaultProps, contextTypes, and displayName, that takes the same string as above - which can override the default \"everything mode\" set above.. This is correct; also, using static getters like this is a big performance hit. Use Icon.defaultProps = instead.. I'm not sure how there would be a memory leak from an object created once and assigned as a property.\nIt might make sense to make a separate category for \"static getters\", but it's absolutely an antipattern to use them in the first place.. I don\u2019t think it\u2019s related to #1808.\nThe default ordering has statics before lifecycles: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#rule-details so this seems like a bug.. @maerzhase what's your entire config tho? specifically, things like parser and parserOptions and settings. The airbnb config doesn\u2019t allow async functions.. Since class fields are still stage 3, and not yet supported by default eslint, I'm not sure this is worth having as a rule yet - but this sounds like a great rule.. @lukyth that sounds reasonable to me! want to make the PR?. I'm confused. if it's isRequired, then it's not implicitly false - an explicit false MUST be passed.\nIn other words, if you're treating absent the same as false, then it's NOT required, so it shouldn't have it - and then the defaultProp absolutely should specify false so that you're being explicit with your types.. I don\u2019t see the rationale for enabling such a flag.\nAlso, it\u2019s not useless to ensure that a boolean prop is always typeof boolean.. The first one should be throwing at runtime, since this.state is undefined. in that case, I would certainly expect a warning there.. The rule only allows assigning this.state in the constructor. It is never OK to mutate it.. Sure - first, the state = {} in the class body is equivalent to putting this.state = {} in the constructor just after the super call. The bug is that the warnings aren\u2019t the same in those two cases.\nSecond, the rule is designed to prevent any mutation of the state object after it\u2019s created. So, you should see a warning inside the forEach, but also on the randomId line.\nIn other words, you should build up the entire state object before assigning it to the instance.. The point of the rule is to forbid mutating state in the constructor ever. It does, also, have an effect - mutating an object after creation is slower than creating it all at once.. Additionally, mutation of any kind is always a code smell, especially in react. If you want a different object, clone it and assign the new one.. Seems reasonable, as long as it's only for custom components.. Hmm, yes - state is a public class field, it's not \"lifecycle\".\nPutting public fields before the constructor - no matter what kind of data they contain - seems reasonable to me. We can't change the defaults without it being semver-major, but we should at least make it possible to change this.. Sure, but that doesn\u2019t make it nonbreaking.\nWe could queue it up and just wait until it\u2019s time, but it\u2019d be ideal to find a nonmajor improvement to make now.. It's tough to evaluate without a PR, to be honest.. You shouldn't need to do this to avoid circular dependencies - B should never be mutated outside of its own module.\nHow are you exporting A and B?. If B is requireable, then it's just as exposed as A :-) However, if you're going to have circular dependencies - something you should avoid strenuously - you can't use the otherwise best practice of module.exports =. Do exports.A = A; and exports.B = B, and then your circular dependencies will work fine.. Indeed; I\u2019d recommend passing an element instead :-). cc @b0gok . Why was this closed? Extra PRs creates repo clutter :-/\n(replaced by #1819). @hornta would you mind checking the \"allow edits\" checkbox on the right hand side of the PR?. @evosch yep! Then you can post the link here, and i can merge it in to the PR if needed.. Just noticed https://github.com/hornta/eslint-plugin-react/pull/1 was filed. I'll pull that in soon.. You can configure jsx-no-bind to allow arrow functions.\nHowever, there's no way to use inline render props that doesn't create a new function on every render (the spirit of the rule). What you'd have to do is:\n```jsx\nclass Foo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.renderOne = this.renderOne.bind(this);\n    this.renderTwo = this.renderTwo.bind(this);\n  }\nrenderOne() {\n    return ;\n  }\nrenderTwo() {\n    return ;\n  }\nrender() {\n    return (\n      \n\n          {this.renderOne}\n        \n    <Route\n      path=\"/route2\"\n    >\n      {this.renderTwo}\n    </Route>\n  </Switch>\n);\n\n}\n}\n```. I've commented there, it's not a good answer.\nAs for \"how much is the gain\", there's never a way to quantify performance outside of profiling each specific app.. Is the issue that #1795 needs to be reverted, or that the regex checking needs to be done in a second place?. Is the issue that #1795 needs to be reverted, or that the regex checking needs to be done in a second place?. that makes sense. Can someone put up a PR?. @jamesparksart hi - this repository is for a specific software project, which isn't related at all to your question. Separately, individual repositories aren't the proper place to ask for general programming help.\nI'd recommend Stack Overflow or IRC.. (if those test cases already exist - because the bug is about class fields - then my bad). That\u2019s be great - generally it\u2019s nice to have every test case repeated, one for each parser.. I don't consider them deprecated yet, because there's not a replacement for all of their use cases.. This is something very specific to connect; see https://github.com/yannickcr/eslint-plugin-react/issues/811#issuecomment-285901942\nI think you\u2019ll need an override comment for this one.. What is your version pragma set to? If you don\u2019t have one, it defaults to the latest.. The first step would be a semver-minor change, adding in sort-default-props without removing jsx-sort-default-props (but deprecating it).\nLater, when it's time for a semver-major, we could then remove the jsx- one.. Yes, and yes.. Yes, and yes.. The indentation shouldn't need to be correct; the jsx-indent rule handles that (not the indent rule).\nIf you disable the indent rule, are the extra lines added?. I'm not sure why the former would be particularly useful; it'd also make for code churn if you suddenly started or stopped making it rely on previous state.. can you elaborate on what MyComponent is doing that would legitimately distinguish between these?. \"lifecycle\" only handles instance methods, since gDSFP is the first such static method (the others are static properties, or instance methods).. I think gDSFP should either be removed from the lifecycle list, or, it\u2019s presence in the lifecycle list should override its inclusion in \u201cstatic-methods\u201d.. I think gDSFP should either be removed from the lifecycle list, or, it\u2019s presence in the lifecycle list should override its inclusion in \u201cstatic-methods\u201d.. jsx-uses-vars wouldn't be involved, because the h1 variable isn't, in fact, used in the jsx - because component names that are lowercased are HTML elements, not custom components.\nIn other words, this would be handled by a core rule - no-unused-vars - and is not related to jsx or react at all.\nIt seems like you want to name it something capitalized, like H1?. Our component detection will need to add support for forwardRef.. Our component detection will need to add support for forwardRef.. As for node 4, no, we should not drop support for it (nobody should). I\u2019ll look into the failing tests.. As for node 4, no, we should not drop support for it (nobody should). I\u2019ll look into the failing tests.. ahhh well true, in that case for eslint 5 only, we should definitely not be testing on node 4.. ahhh well true, in that case for eslint 5 only, we should definitely not be testing on node 4.. Sounds good, I\u2019ll update this PR later today.\n(linking back to https://github.com/airbnb/javascript/issues/1834). Sounds good, I\u2019ll update this PR later today.\n(linking back to https://github.com/airbnb/javascript/issues/1834). I\u2019m hoping to do that tonight or tomorrow.. I\u2019m hoping to do that tonight or tomorrow.. Released in v7.10.0. Released in v7.10.0. @alexzherdev yep!. @alexzherdev yep!. How are you creating the <Button> element? Note that null doesn\u2019t trigger defaults, but undefined does.. How are you creating the <Button> element? Note that null doesn\u2019t trigger defaults, but undefined does.. Oh, i see that this is the linter reporting it. This seems like a bug.. Oh, i see that this is the linter reporting it. This seems like a bug.. It is required to be static for a number of reasons; one is that it\u2019s lintable, but also because each kind of button is a fundemantally different component/element - they\u2019re not just different \u201cflavors\u201d of button.. @truckingsim what i'd expect is that you'd have that Button component wrapped by SubmitButton and ResetButton components, and inside those you'd override the rule for the dynamic type - but you wouldn't need that anywhere else.\n(ofc, this is separate from the issue that reset buttons are terrible UX and shouldn't ever be on the page). If you can come up with a way for the rule to assert that the prop has a propType (or flow/TS type) that only permits one of the proper values, and that that prop is the dynamic value passed in, then that absolutely seems like something that could be allowed.\nI'm not sure how to implement that, but I'd be happy to review a PR that achieves that.. It should definitely check for the pragma setting, altho I\u2019m not sure why you\u2019d ever be creating DOM elements in a React application. Thanks!. In that particular case i agree it looks messy; I\u2019m not sure how to generically allow it when it\u2019s inline with text without having things like long links be inlined.. In that particular case i agree it looks messy; I\u2019m not sure how to generically allow it when it\u2019s inline with text without having things like long links be inlined.. See #1855; I think they're related.. See #1855; I think they're related.. @Mindaugas-Jacionis two things that relate to each other, cross-referencing each other, shouldn't be confusing.. It's definitely not useless; in this case, it doesn't cover the most dangerous problem:\njsx\nhandleClick = () => this.props.foo();\n// passes `this.props` as the `this` value, which exposes it to code that could mutate it.\nSeparately, you never want to put arrow functions in class fields, so I wouldn't recommend that being a one-liner anyways :-). The props object should not be mutated, but is in no way immutable.\nAs for arrow functions in class fields, you always want instance methods with a constructor-binding (doing a constructor-bind along with an arrow function is redundant) for performance, clarity, and testability.\nThere isn't an eslint rule yet, but as soon as it's stage 4, I plan to add one to eslint core.. @jeffvandyke sure. With class fields, you can also do:\njsx\nfoo = this.foo.bind(this);\nfoo() { }. @jeffvandyke sure. With class fields, you can also do:\njsx\nfoo = this.foo.bind(this);\nfoo() { }. This is on eslint 5; does it occur on eslint 4?. The indent rule has to be disabled for jsx nodes to be compatible with react/jsx-indent, fwiw.. The indent rule has to be disabled for jsx nodes to be compatible with react/jsx-indent, fwiw.. @alexzherdev could we add that test case in a PR to close this issue?. @RLesser we\u2019re up to v7.11 - try updating to the latest.. @RLesser we\u2019re up to v7.11 - try updating to the latest.. @hornta ah, have you specified your react version in your settings? gDSFP only applies in react 16.3+. @hornta ah, have you specified your react version in your settings? gDSFP only applies in react 16.3+. @jsnajdr looks like eslint 3 is failing on the endLine parts?. I believe #1848 will cover this.. Having a hierarchy of React components is a very very big antipattern that's extremely discouraged by the React team, as well as the entire React community - you should prefer composition over inheritance.\nThere's a JSDoc comment that you can use to indicate to this plugin that your class is intending to be a React component, see https://github.com/yannickcr/eslint-plugin-react/issues/1220#issuecomment-303617161\n(see #986, #1048, #827, #1220, etc). The JSDoc comment will allow you to lint your legacy code while you gradually fix it :-). The JSDoc comment will allow you to lint your legacy code while you gradually fix it :-). @kud i could see adding a separate option for \"detect\" (using the \"version\" as a fallback), which did require('react').version - want to open an issue or PR that adds that?. (Note that it'd have to use process.cwd(), and the resolve package, to get the proper require path). Yes, absolutely it's intended.. Yes, that is true. However, with that behavior, the airbnb config would probably remove that setting.\nWith \"detect\", it'd probably use that, though.. v7.12.0 is released.. Can you provide output from the command line, to ensure it's not an issue with Atom?. Can you provide output from the command line, to ensure it's not an issue with Atom?. So if you run eslint with --fix on the command line, you don't see this behavior?. So if you run eslint with --fix on the command line, you don't see this behavior?. Sounds like it's a bug with Atom then. I'll close, but happy to reopen if needed.. Sounds like it's a bug with Atom then. I'll close, but happy to reopen if needed.. @adalbertoteixeira with what code do you see what error on the command line?\nThis might be better filed on eslint-plugin-react.. oh lol my bad, i got confused.\nI\u2019ll reopen.. Looks like it, thanks.. indeed, this is already shipped.. indeed, this is already shipped.. @HenriBeck I suppose it could be; but this issue is about the default-props-match-prop-types rule not understanding covariant syntax (and presumably contravariant as well).. @HenriBeck I suppose it could be; but this issue is about the default-props-match-prop-types rule not understanding covariant syntax (and presumably contravariant as well).. Why did you close #1866 and open this, instead of updating that PR?. Why did you close #1866 and open this, instead of updating that PR?. @peter-mouland in the future, please update the original PR instead of replacing it. I\u2019ll be happy to walk you through it if you have trouble.. @peter-mouland in the future, please update the original PR instead of replacing it. I\u2019ll be happy to walk you through it if you have trouble.. Specifically, this rule should require that all props be typed as covariant (with a +). Specifically, this rule should require that all props be typed as covariant (with a +). Go for it!. I personally don't think require-optimization is a rule that should ever be enabled; too often, checking if the component should update is slower than actually rerendering.\nSo yes, I think it's fine to turn it off.. I\u2019m not sure what you mean - where is it activated by default?. The rule is disabled by default. It won't be removed, no, because there are some folks that want it (for reasons I can't understand).. The rule won\u2019t be removed - there\u2019s no need to RFC anything.. What React version is specified in your eslint config's \"settings\"? If it's not 16.3+, then the plugin won't know it's a lifecycle method.. To satisfy the rule, you either need to configure it to allow inline arrow functions, or you need a constructor-bound instance method.. In general, it's a minor performance hazard. In this case, it's on a DOM component, so it's fine.. Yes - DOM/html components (ie, host nodes, like div, span, etc) don't have the same pitfalls here that custom components do. Namely, they're not PureComponents, so there can't possibly be any rendering performance hit (only the minimal hit of \"creating new functions\"). Absolutely - we should be using Components.detect in this rule: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-access-state-in-setstate.js#L24\nsimilarly to https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-deprecated.js#L43. Want to make that change? :-D. I've pushed up an initial WIP commit; it won't fix the problem quite yet. One will need to check like is done here to ensure that the setState call is inside a React component.\nIf anyone else wants to help, please do not submit a new PR - post a link to your commits here, and I'll happily pull them into this one.. Duplicate of #1800.\nAn option would be great.. Fair point; I'll reopen.. There\u2019s already a rule for no unused state; does that work?. Indeed; typos should only be checked on React.PropTypes and the prop-types package.. Closing, but will reopen if it\u2019s still an issue.. If you want class fields to be sorted in a certain place, you'll need to configure the rule yourself to do so. It doesn't seem like there's any issue with this plugin, though?. Can you share the code that it crashes on?. You don\u2019t seem to be setting a React version number in settings - in what way is the rule not working for you? If you\u2019re asking about React 16 deprecations, you\u2019d have to be using v16.3+.. The eslint plugin can\u2019t know which version you\u2019re using unless you explicitly tell it in your eslint config. See https://github.com/yannickcr/eslint-plugin-react#configuration. ahhh - so no those methods aren't warned by this plugin yet, mainly because there's not yet a complete replacement for all of their use cases.\nThey'll continue to work in React 17, so there's no hurry to move away from them.. React itself might be giving these warnings, but I don't think we've enabled them here yet.. There are many deprecated things beyond those three new lifecycle methods.. ha, ok, then in that case it should be warning. What if you set your version to 16.4?. I mean, changing the eslint config. The version of React you\u2019re actually using is irrelevant; the plugin only knows about what\u2019s in your settings.. Can you share the entire component code that\u2019s not warning, but should be?. What happens if you extend React.Component, instead of the destructured Component?. This is very confusing, given the tests: https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-deprecated.js. Definitely you want to uninstall any global eslint stuff; almost everything should only be installed locally. Glad you figured it out!. This seems a reasonable rule, as long as it covers all three component types.. Fixed in #1939.. Related to #1884.\nThis would only be able to catch cases like return or return undefined; there\u2019s plenty of other ways you could return undefined. I\u2019m not sure how valuable this would be as a rule.. I'd expect the first example to give you a missing propType warning for \"actions\". Would you think this has to be a new rule, or would you think an existing rule should be covering it?. It seems like it would specifically be concerned with the case of a plain object literal being used as a propType value?. Custom propTypes are very common, so in no way should propTypes be restricted to PropTypes values.. Maybe no-invalid-prop-types, and it could ensure that every propType value was either a function, the return value of a function (like PropTypes.oneOf), or something imported/required?. It needs a rebase and fixed tests.. @anna93 that\u2019s a variable, not a class field.. @zslabs if with the option enabled you still get a warning there, please file a new issue. @jquense I'm not sure you're understanding the thread - while I do see how passing a new object created every time in render will break PureComponent-like optimizations, that doesn't change the underlying best practice - not FUD - that unintentionally passing around objects is expanding the API of your component.\nThere's nothing wrong with anyone claiming anyone is doing it wrong - that they're \"the React docs\" don't mean they're always doing things the best way.. I'll merge tonight if no issues are raised.. In that case, the type is incorrect. propB doesn\u2019t belong in the types for the inner piece - the decorator should be adding the propType itself. . Jest no longer supports node 4, for example, but we must continue to do so.. @hellatan if you can submit a PR that fixes the appveyor build without moving off of mocha, that would be great :-). I\u2019m not sure we need to do it yet; it\u2019s a significant change and this is a large project. Probably don\u2019t invest the time just yet :-) we do have https://github.com/yannickcr/eslint-plugin-react/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22 tho. I think what you want is this:\njs\nthis.setState({ isAuthenticated: value }, ({ isAuthenticated }) => {\n  localStorage.setItem(\"isAuthenticated\", JSON.stringify(isAuthenticated));\n});\n(you also don't want to ever put functions in class fields, but that's unrelated to this issue). Please provide a gist or actual copied code; screenshots aren\u2019t really useful. Also, can you get the same output on the command line?. If it's only happening in atom, then it's definitely an issue with that package.\nI don't personally use atom, so i can't help :-/. Not really - functions that return JSX are components, according to our component detection.\nHowever, this seems like a case where the rule should be able to determine that's not a component.. This is the same case where we should be able to determine that the function is not a component because it\u2019s defined inline, in a jsx context, as an arrow function.. That's ref - it should be rel.. Are you sure that's the only eslintrc you're using, and are you sure you're using everything locally installed?. That definitely sounds like a bug.. Such a rule would need to support both directions: forcing class fields, and forbidding them.. I\u2019d think you\u2019d set the rule to \u201cstatic class field\u201d or \u201coutside the class body\u201d, and then separately disable propTypes, defaultProps, contextTypes, etc (ie, set them to \u201cignore\u201d).\nAlso, the rule should forbid (or require as a third option) static getter methods for these things.. If someone isn't able to use class fields yet (they're not yet part of the language) and yet still wants to force static properties to go inside of the class body, they'd need to require it.\nAdditionally, having it be autofixable (ideal), and able to go in all directions, helps migrate a codebase to the inevitable future, static class fields.. @ThiefMaster \"with babel\" in no way means \"with proposals\" - eslint can't parse stage 3 features, for example, and using babel-eslint isn't a great solution because it enables parsing of all features, not just the ones you're transpiling. Separately, airbnb won't use class fields until there's a lint rule that can forbid ever putting functions in them, for reasons I've gone into elsewhere on this repo.. @alexzherdev it'd belong in eslint core, and they don't support anything til it's stage 4.. @kylemh a static-property-placement rule ensuring placement of all of: propTypes, defaultProps, contextTypes, childContextTypes, displayName would be great - the options I'd expect would be \"above\", \"below\", \"static getters\", or \"class fields\", based on what the ecosystem already does. PRs welcome.. Ordering, yes - but this is about placement and style (sort-comp doesn\u2019t govern things outside the class, for example). Closing as a duplicate of #1807.\n@dmason30 yes, that's why #1807 has help wanted on it.. lol ah. if i can find the time, of course! My time however is very limited.. It\u2019d be great to support that :-). @alexzherdev yes, i think a patch would be ideal. Happy to review a PR asap.. Relying on the defaults is unsafe; in the next major version I\u2019m probably going to make that throw.\nPlease add an explicit React version to your settings.. @techieshark it means the linting behavior would differ based on whether react was installed on disk or not.. @techieshark it means the linting behavior would differ based on whether react was installed on disk or not.. You definitely don't ever want to pass around the props or state object; we need to get this fixed.. @jaybekster nope, that's why the issue is still open. @jaybekster nope, that's why the issue is still open. Thanks!. I\u2019m not sure what your question is, or how bash relates to the React plugin.. I\u2019m not sure what your question is, or how bash relates to the React plugin.. Fixed by #1932, duplicate of #1928.. Fixed by #1932, duplicate of #1928.. Since arrow functions exist, I\u2019m not sure why you\u2019d need the obsolete this var pattern ever again - but it seems like something we should be able to support.. Since arrow functions exist, I\u2019m not sure why you\u2019d need the obsolete this var pattern ever again - but it seems like something we should be able to support.. Understood :-) i just mean that var self = this shouldn't really ever appear in any code authored in an ES2015+ environment.. Understood :-) i just mean that var self = this shouldn't really ever appear in any code authored in an ES2015+ environment.. Duplicate of #1928.. Duplicate of #1928.. What does \"breaks\" mean?. What does \"breaks\" mean?. Closing as a duplicate of #1922, then.. Let\u2019s add test cases for that, if they\u2019re missing, because that also seems like a case we want to handle.. Let\u2019s add test cases for that, if they\u2019re missing, because that also seems like a case we want to handle.. Indeed; don't worry about those errors, I habitually rerun them when i see them.. Indeed; don't worry about those errors, I habitually rerun them when i see them.. How would you determine whether comments attach to the thing before, or the thing after?. How would you determine whether comments attach to the thing before, or the thing after?. js\npropTypes: {\n  baz: PropTypes.any,\n  foo: PropTypes.any,\n  // ^ this is a foo, but the others don't need explanation\n  bar: PropTypes.any,\n}. js\npropTypes: {\n  baz: PropTypes.any,\n  foo: PropTypes.any,\n  // ^ this is a foo, but the others don't need explanation\n  bar: PropTypes.any,\n}. However, I\u2019d say the current behavior is a bug, so your plan is probably a strict improvement.\nPerhaps a plugin setting, that defaults to \u201cabove\u201d, that determines comment attachment?. (At plugin level tho, not rule). Any rule that moves code around :-) I\u2019ve found over time that many rule configs belong instead as settings, and it\u2019s easier to plan ahead.. Will merge later today if no objections.. I'm confused; is WellnessScore a React component?. so, setting aside that using inheritance in components is considered an antipattern, the react eslint plugin can't possibly know that WidgetComponent is a react component. You'd have to annotate each component with a jsdoc comment to indicate that it extends React.Component for detection to work properly.\nHowever, the crash on \"not a component\" is a real bug that needs fixing.. I think that this is a bug, but also, you shouldn\u2019t ever be using props in initial constructor state - you want getDerivedStateFromProps. Otherwise when props change, you might forget to update \u201cbeta\u201d. That\u2019d be an edge case, and even then I\u2019d say the component should rerender when it gets an updated prop.. @Jmenache note that your pattern is not correct unless you also use setState in componentWillReceiveProps - and the replacement for that pair is indeed to use gDSFP.. Certainly that's another workaround, but that seems much less performant and clean.. Certainly that's another workaround, but that seems much less performant and clean.. What does npm ls print out? If it exits nonzero, your dep graph is invalid.. The Airbnb config has an empty string as the message, but disables the rule:  https://github.com/airbnb/javascript/blob/685f37be39fd01bcfdd349de9acdcd5a50414520/packages/eslint-config-airbnb/rules/react.js#L405\nIf you are enabling it, you\u2019ll have to configure the message yourself.. Altho a boolean is an invalid value for target, the rule shouldn\u2019t be crashing.. You can rename whole destructuring using a colon.. This error means that something in your package graph (not this plugin) requires eslint 2 or 3, and you have, presumably, 4 or 5.\nI'd strongly suggest not using grunt-eslint, but either way, peer dep issues are something you have to resolve within your own project.. This error means that something in your package graph (not this plugin) requires eslint 2 or 3, and you have, presumably, 4 or 5.\nI'd strongly suggest not using grunt-eslint, but either way, peer dep issues are something you have to resolve within your own project.. In that case, I'll close this now.. In that case, I'll close this now.. Is ViewPropTypes imported from somewhere?. (linking to your comment here: https://github.com/yannickcr/eslint-plugin-react/pull/1857#issuecomment-415091579). Just because there's a default doesn't mean you shouldn't always be providing an explicit value.\nRepeating https://github.com/yannickcr/eslint-plugin-react/pull/1857#issuecomment-415171990:\n\ni could see adding a separate option for \"detect\" (using the \"version\" as a fallback), which did require('react').version - want to open a PR that adds that?\n(Note that it'd have to use process.cwd(), and the resolve package, to get the proper require path). You have to update your package.json every time that happens; I\u2019m not sure also updating eslintrc is much harder.. You have to update your package.json every time that happens; I\u2019m not sure also updating eslintrc is much harder.. @bhardy that seems like a different issue; if you have the settings object with a react version you shouldn't get a warning at all.. @bhardy yes please :-). @mohsinulhaq it would be more explicit than relying on React never hitting v999. The downside would be a lack of explicit configuration with respect to which React version you\u2019re using, i suppose.. @manuelbieh require('react/package.json').version; but once the next release goes out, you can use \"detect\".. v7.12.0 is released.. Making that the default would be a breaking change.. When we get around to the next major, we surely will. There\u2019s no hurry tho; you can maually set it for yourself.. If they follow the link, they\u2019ll see they can use \u201cdetect\u201d.\n\nAnd sure, we could warn them of that, but there\u2019s zero harm from explicitly specifying a default.. Good catch; a PR to add it to the docs would be appreciated.. @eeriee if updating to the latest doesn\u2019t fix it, please file a new issue with your config and your plugin version. I'll wait to merge this til we've updated all the relevant rules.. Fair point; altho nobody's complained. I guess we should fix that.. Fair point; altho nobody's complained. I guess we should fix that.. There's no timeline. It will be released when a maintainer has time to do it, and not before.. v7.12.0 is released.. That's confusing; the class field example is actually wildly incorrect - propTypes needs to be static on the class, not an instance field.\nWe have almost your exact example in our test cases, so it seems like something else is going on. Can you share your full eslint config?. That's confusing; the class field example is actually wildly incorrect - propTypes needs to be static on the class, not an instance field.\nWe have almost your exact example in our test cases, so it seems like something else is going on. Can you share your full eslint config?. React doesn't have a v16.3.14, btw, it only goes up to v16.3.2 before v16.4. However this, just like static get propTypes, is a red herring.\nThis should definitely work. cc @alexzherdev any ideas?. cc @alexzherdev . cc @alexzherdev . @alexzherdev what about createReactClass components tho?. @alexzherdev what about createReactClass components tho?. @blackbird91 hm, the rule might not be covering misusing a static getter in that fashion; if you make it TestComponent.propTypes = { object: PropTypes.object }, does it warn as expected?. @blackbird91 hm, the rule might not be covering misusing a static getter in that fashion; if you make it TestComponent.propTypes = { object: PropTypes.object }, does it warn as expected?. @blackbird91 please provide text, not screenshots - screenshots of code aren't nearly as helpful :-/. @bdwain see #2046.. v7.12.1 is released; closing. Please file a new issue if there's still problems :-). import * as from CJS Modules is TS\u2019 broken module system; you\u2019d have to enable synthetic imports to get it to work properly.. Component detection is probably recognizing it as an SFC since it returns null; this seems like a case where we should have less confidence because a) it's named not in PascalCase, b) it's a class field.\ncc @alexzherdev . @alexzherdev in this case it should be reporting a lower confidence than 1, because it's a class field, and because it's not named in PascalCase.. It's definitely a breaking change; it'd be ideal to ship this now under an option, and then we can flip the option in the next major if desired.. It's definitely a breaking change; it'd be ideal to ship this now under an option, and then we can flip the option in the next major if desired.. @nikolas it definitely does; it\u2019s listed there under \u201cdetect\u201d. Regardless, if it didn\u2019t, we\u2019d need to fix the docs, not remove the warning.\nI believe this issue should be fixed now in v7.12.4; closing.\nPlease file a new issue if it\u2019s not.. @nikolas it definitely does; it\u2019s listed there under \u201cdetect\u201d. Regardless, if it didn\u2019t, we\u2019d need to fix the docs, not remove the warning.\nI believe this issue should be fixed now in v7.12.4; closing.\nPlease file a new issue if it\u2019s not.. Can you provide the code for the entire component?. How is is an opinionated rule? It\u2019s an error to omit propTypes imo.\nEither way, it\u2019s \u201crecommended\u201d not \u201cerrors\u201d, so it\u2019s supposed to be opinionated.. I\u2019m pretty sure some of the things in the a11y plugin are more than just errors, and I\u2019ll be sure to add many more opinionated settings to it in the next major version.\nRecommended mean recommended; that implies an opinion. That eslint chooses not to make recommendations beyond errors is its choice; we prefer to help users by recommending things that will do them good :-). Note that the prop-types rule is satisfied by Flow/ts types; and every layer always needs type checking. That an app is small doesn\u2019t make it immune to errors, and propTypes catch errors.. It shouldn\u2019t; you can use both propTypes and static types.\nNote, however, that a react component has two type signatures: the external props (which is what propTypes map to) and the internal props (with defaultProps applied). To correctly type your component you have to specify both (TS and Flow each have different ways to do this, and i think their default behavior is incorrect - which is, using the internal types as the external interface).. Thanks, definitely a bug.\ncc @alexzherdev . It will be included in the next version, whatever that is and whenever it's ready.. Personally i find the \"after\" examples much better and less ugly, but clearly that's subjective.\nOne issue is that if your something is a function, and you call it inline, you'd accidentally pass this.props as the this value - always destructuring all props, regardless of quantity or location, is what's safe.\n(Separately, I'd encourage you to avoid renderFoo methods and prefer SFCs)\nThe only thing I can think of that makes sense would be an ignore array that takes AST selectors - but that's a lot of complexity and power to enable users to allow a sneaky footgun.. What is the code that it\u2019s warning on? Are you sure you don\u2019t have any other eslintrc files? You can see here that the recommended config doesn\u2019t touch that rule.\nPerhaps the issue is that the rule is called \u201cno-console\u201d, not \u201cno_console\u201d?. It means to enable this rule: https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/named.md which has its own documentation.. Yes, it means enabling import/named (setting it to 1 or 2).\nAs for \u201csettings\u201d, all rules can use those.\nExplicitly exported propTypes are not safe to remove, because that\u2019s an indication that it\u2019s safe to rely on their presence in production.. This seems like a duplicate of #1952 . The issue in #1967 is because it's inside a class field, and also because it's being returned from a function itself. The solution is to fix component detection so it has a low confidence when either of these things is true.. @sergei-startsev yes, that could be a react component. however, #1967 isn't related to that snippet.. In this case, it\u2019s a function that uses no jsx, doesn\u2019t take any props argument, and references this - that seems like it should have a low enough confidence that it\u2019s not treated as a component.. If it\u2019s accessing this, and not using it for props/state/context, it\u2019s probably not a component, even for this rule. . That seems like yes, it is a component.\nI think it\u2019s fine if you have a function that uses this, that has no clear indicators that it\u2019s not a component, in a codebase that\u2019s using React, to force the use of disable directives. The majority case will be that it\u2019s trivial to apply React linting rules only to a React part of the codebase.. I still think there\u2019s an opportunity here to improve our detection heuristics, though. Just because I\u2019m comfortable with false positives doesn\u2019t mean i don\u2019t also want to minimize them.. This could use a rebase.. This could use a rebase.. @alexzherdev node 5 is an allowed failure; eslint 5 also requires node 6+ now, so it's fine.. It's definitely a bug; it shouldn't crash. \"using prettier\" isn't a solution.\nCould you provide the code that it's erroring on?. hmm, the parens shouldn't make a difference. Let's leave this open until we can reproduce.. Having both eslintConfig and eslintrc seems very wrong; I\u2019m not sure which eslint prefers but I\u2019d recommend deleting one.. Ah - when ejecting CRA app you end up with invalid dependencies; that\u2019s indeed the solution.\nYou should delete the eslintConfig in your package.json, it\u2019s left over from before you ejected.. Specifically, the linked example talks about how ComponentWithChildren is rendered - its actual implementation makes zero difference whatsoever.\nThis, imo, is not something that is lintable in any reliable way.. Precisely because children could be memoized or primitives, is why i think this doesn't make sense as a lint rule.. The problem is that I think this rule will create confusion, by targeting the wrong thing.\nThis is a problem that should be solved at runtime by looking for excessive renders - potentially by monkeypatching PureComponent to track when they happen.. hm, i don't think there is a good way :-/ however, you could construct a test directory with a package.json and a node_modules and a react dir with its own package.json, and require that?. The import plugin does it in its tests, as well.. The import plugin does it in its tests, as well.. v7.12.0 is released.. This seems like a very niche use case; if it\u2019s trying to address the issue of conditionally rendering the wrong thing, it\u2019s not doing enough, and if it\u2019s only trying to address the return error, I\u2019d say the prop-types rule would handle that - iow, this component is missing a required propType.. React.Fragment is only available in 16.2+; fragment syntax requires babel 7 - this isn\u2019t really a broadly available solution yet.\nI still feel like this is a runtime warning, not a linter warning. If we did handle it in a rule, we\u2019d have to figure out if a propType is required or not (and this isn\u2019t statically possible on a custom propType), and only error when it\u2019s optional or when the propType is missing.. React.Fragment is only available in 16.2+; fragment syntax requires babel 7 - this isn\u2019t really a broadly available solution yet.\nI still feel like this is a runtime warning, not a linter warning. If we did handle it in a rule, we\u2019d have to figure out if a propType is required or not (and this isn\u2019t statically possible on a custom propType), and only error when it\u2019s optional or when the propType is missing.. $methodName($argList) { return $methodBody; }?. Duplicate of #1955.. cc @alexzherdev . It's got nothing to do with flow types. The point of using destructuring assignment is two fold: 1) it makes it much clearer to have only one extraction point for props in a function, and 2) it prevents the footgun of this.props.foo() implicitly passing this.props as the this value to this.props.foo.\nIn other words, this rule is about style, clarity, and preventing bugs, and is utterly unrelated to propTypes or flow types.. To set that option, configure the rule with [2, { \u201cenforceDynamicLinks\u201d: \u201calways\u201d }] instead of just 2.. Closed in #1988. I think that if it reduces readability to supply defaults for all the optional props your component has, that might be an indicator that your component has too many props :-/. I don't see any tests of function declarations tho (arrows are only ever expressions). Maybe valid-html-element-attributes? We could handle aria attrs as well by using the same deps that eslint-plugin-jsx-a11y does.. Indeed, not all things are autofixable.\nPRs to improve autofixability are always great, but ordering rules are never fully autofixable.. Why on earth is render a class field instead of an instance method?. Separately, I would expect config to be left marked as unused, because it is unused - the default settings for no-unused-vars, for the \"args\" setting is indeed after-used, but I would assume this is something eslint can figure out.\nIf it's not figuring it out, then I think that's a bug in no-unused-vars - specifically, it might have to wait to do its checking on program exit to ensure all the variables have time to be marked as used.. cc @alexzherdev any chance this is fixed already on master?. In this case, we\u2019re determining it\u2019s an SFC because it\u2019s a function that destructured it\u2019s first parameter, and sometimes returning null - but I\u2019d expect that being a property of an object - especially if it\u2019s an object passed to a constructor or a function - should downgrade its confidence so that it doesn\u2019t report. Additionally, the function\u2019s name is not PascalCased.. Every React component absolutely should have a name, for debugging purposes. No component (SFC or not) has to.. Who said anything about duplicating an identifier? displayName is the override mechanism - the primary method is a function\u2019s name.. Either way, this is off topic. What makes an SFC - or not one - is fact, not up for debate.. Most SFCs aren\u2019t necessarily arrow functions, because the Airbnb style guide forbids them - either way, the absence of a name surely won\u2019t mean it\u2019s not an SFC, but the presence of one might.. v7.12.0 is released. Is this issue still a problem?. Yes, auto fixing is pretty subtle, and it allows for complete confidence that it avoids the regression. \u201cToo many tests\u201d is a good problem to have :-). This repo is for eslint-plugin-react; that rule is in eslint core. That it's applying to jsx doesn't change that :-) please file it there instead.. I definitely want to avoid a breaking change.. (I'm going to hold off merging it for awhile while the 7.12 release settles down). cc @alexzherdev . I don\u2019t agree that fragment syntax should be treated the same as array brackets - the first example imo is the correct one.\nIt would add a lot of complexity to the rule to make alignment options be different for any arbitrary element, fragment syntax or not, and i don\u2019t think it\u2019s warranted.. I don\u2019t think it\u2019s the same - which indentation kind to alwsys use, or whether to always or never use semis, aren\u2019t the same as \u201clet\u2019s treat this one jsx element type differently than all the others\u201d.. Fragment syntax is nothing more than sugar for React.Fragment, so it absolutely shouldn\u2019t be treated differently there.. That\u2019s an argument for both fragment syntax and React.Fragment to be treated differently than other elements (although that means the component is different, but in no way is the element different), but not an argument to treat fragment syntax differently than React.Fragment.. Also, you\u2019re wrong; React.Fragment can be fully polyfilled in React 16.0 or 16.1, and even partially polyfilled in any React.. You\u2019d do it by wrapping them in a div, basically.\nI understand the aesthetic argument - but i think fragment syntax looks much more like an element than like an opening array bracket.. Then you could do it with mutating the DOM directly and using document fragments \u00af_(\u30c4)_/\u00af there\u2019s lots of ways, but it\u2019s not really the point.. There\u2019s no way for it to statically know that, so no - the type should be explicit to ensure it\u2019s always present and valid.. The comment you linked to says it has to be inside a function - not inside a conditional check.. The condition would have to be one that prevents an infinite loop, which isn\u2019t something that\u2019s be statically knowable.. That\u2019s the latest spec; for which browsers is this true/are there any browsers for which this is not true? It seems safer to specify both.. @seancrater I don't; the spec is often aspirational, and doesn't describe historical (noncompliant) engines.\nIn general, if any version of any browser ever required both, then we should use both for the foreseeable future.. It's not a false positive; the intention is to only use the propTypes if they're explicitly exported, so that they can be safely stripped out in production.\nThe best approach is likely explicit repetition, or else overriding the rule in this instance.\nAre you using a babel plugin to strip propTypes in production?. @csantos1113 You\u2019re looking for the allowInPropTypes option, released in v7.7.. Fixed by #2040.. Also see #1633 and #1888.. HTML elements aren't pure - React has to parse it and compare every single time anyways. It's only on class-based pure components that referential equality matters.. Can you elaborate on the use case?. I\u2019d expect that you\u2019d want to make a single shared themePropType, and that one would use PropTypes.object, or PropTypes.objectOf, etc, and use an eslint override if needed.. Right - what i mean is, you shouldn\u2019t have a bunch of PropTypes.objects littered around your codebase - instead, make one file, themePropType.js:\njs\n// eslint-disable-next-line react/forbid-prop-types\nexport default PropTypes.object; // or better, PropTypes.objectOf(something)\nAnd then anywhere there\u2019s a theme prop, import themePropType from \u2018./themePropType\u2019, and then theme: themePropType.\nThat way, if you ever want to change what a \u201ctheme\u201d should be, you only have to do it in one place - and then you can use a single eslint-disable comment instead of needing to make your overarching rule config more complex.. The problem here is that forbid-prop-types might have a, b, c - but you might only want to ignore a on prop foo. Configuring that is much more complex than a standalone \"ignore\" list.\nAdditionally, since your use case is to support an antipattern (repeating a prop type in multiple places, instead of putting it in one shared single source of truth), i'm not sure the complexity is warranted.. I don't think allowing too-broad ignoring of forbidden propTypes is a good start - these things are forbidden because they're always terrible, and it's better to make ignoring them hard, then to make using them easier.. Sure, that seems reasonable.. There\u2019s no policy and no set timeline; things get released when maintainers have time to do so.. v7.12.0 is released.. map isn\u2019t a loop; I\u2019d expect the rule to apply to both loops and array iteration methods.\nWhat\u2019s not working here? the multi line jsx is wrapped.. What is eslint-react? This is eslint-plugin-react, which is the source of the rule in question.. That\u2019s a static method - define it inside the class (part of ES6).. Sure, i suppose so, altho there\u2019s no reason to ever define it outside the class.. @nkprince007 what version of react is in your eslint settings?. You haven\u2019t specified a React version in your eslint settings. See https://github.com/yannickcr/eslint-plugin-react#configuration. Gotcha. gDSFP was added in 16.3, so you\u2019ll need to override that setting with the actual React version you\u2019re using.. This style of alignment, while common in other languages, is wildly unidiomatic and uncommon for JS. Can you point to any popular style guides where this is common?\nSeparately, if the multi line example is going to force at least 1 space around the =, then I\u2019d expect the single-line example to do the same. Alignment, obviously, would only apply when multiline.. I\u2019m not sure what you\u2019re asking; you\u2019re never using Persons after it\u2019s assigned - the warning is correct.. Given that last example, I\u2019d not expect the warning - can you show the entire component file, and the exact command line output?. This seems correct and answered.. Yes, technically that linked commit is a semver-major, and it'd be great if you filed an issue on that repo about it.\nWe'll have to peg to v20 of that dep in the meantime, then.. Inheritance in react is a huge antipattern that is widely discouraged; class-based components should only ever extend React.Component (or PureComponent).. I\u2019m not sure what you mean - a string is the only valid value for an input\u2019s \u201cvalue\u201d prop.. That should be corrected by the jsx-indent rule. Is it not?. If neither the core indent rule, nor the jsx-indent rule, are fixing it, then it\u2019s definitely a bug in jsx-indent.\nIn general, autofixes rarely produce proper indentation, and rely on indent rules to clean up that aspect.. Yes, it currently requires multiple lines. See #1855. No, it\u2019s not a false positive. Even if you aren\u2019t using the return value, it\u2019s still being passed into the promise.\nThe curly brace version is correct.. You still have to enable jsx in your eslint config yourself.. ah, this is an eslint bug. Run npm ls and you\u2019ll see your dependency graph is invalid. Either downgrade to eslint 5.7, or follow these instructions.\n(Note that parsing errors are always unrelated to a specific plugin; so this issue should have been filed on eslint itself). It seems reasonable to add a \"type\" field to all the rules.\nI think we'll have to decide case by case which rule is which type.. This is a good rule (altho until enzyme supports rendering non-nodes, a fragment with a non-node child is still necessary, so perhaps that should be controllable via a separate option).\nBoth forms - syntax and API - should be checked.. I think both options are a good idea.. @joshuakelly go for it, that's what the \"help wanted\" label is for :-). @joshuakelly go for it, that's what the \"help wanted\" label is for :-). There's no need to ping people individually, or even to file this issue :-). When someone has time, a release will be cut, and prior to that, a release is impossible - because nobody has the time to do it.. You\u2019re certainly free to do that, but that\u2019s not actually helping anything - all it\u2019s going to do is make bug reports harder to triage and solve, which will take up even more of our time.. Good call, and yeah, I\u2019d suggest that \u00af\\_(\u30c4)_/\u00af since you can install from github, that seems like a much easier approach that makes it an explicit choice by the user to use an unstable version.. v7.12.0 is released.. https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md. I don\u2019t agree that that destructuring is unnecessary - I\u2019d be fine with a rule that forbade spreading props at all, but being more explicit is better than silently passing things through.. I find that it makes sense for any component - it serves as documentation.. I don\u2019t think there is one, but some kind of rule that blocks namespaced components might make sense.. Technically this is perfectly valid jsx; it's putting a text comma and semicolon in the markup. If Android crashes on it, that's a pretty serious bug I'd file on react native directly.\nYou could probably use https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md to catch these, however.. Certainly the as version is better, since it doesn't create an additional binding inside your module, but the = version should still work.. In that case let\u2019s add the test case in a PR and close the issue. It\u2019s possible this is a bug fixed in master but not yet released.. I\u2019m confused; you should never use arrow functions in class fields, and rarely use them in the render path - why are these not instance methods?. You have to also configure the react/jsx-indent rule.. You have to also configure the react/jsx-indent rule.. I believe you also need to configure the indent rule to ignore jsx nodes.. I believe you also need to configure the indent rule to ignore jsx nodes.. I\u2019d suggest using https://npmjs.com/eslint-config-airbnb and then you won\u2019t have to configure anything.. I\u2019d suggest using https://npmjs.com/eslint-config-airbnb and then you won\u2019t have to configure anything.. If that\u2019s the case, then it might be a bug with this plugin - fixed in master, but not yet released.. If that\u2019s the case, then it might be a bug with this plugin - fixed in master, but not yet released.. I'm confused; the first one already doesn't warn: https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-no-target-blank.js#L37\nAs for the others - see https://mathiasbynens.github.io/rel-noopener/. \"opener\" is never recommended, so I would expect those to warn as well.\nThe same logic seems to support not allowing \"referrer\" either.. I'm confused; the first one already doesn't warn: https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-no-target-blank.js#L37\nAs for the others - see https://mathiasbynens.github.io/rel-noopener/. \"opener\" is never recommended, so I would expect those to warn as well.\nThe same logic seems to support not allowing \"referrer\" either.. If something is only safe on newer browsers, then it\u2019s not safe, and shouldn\u2019t be permitted.\nWhat cases do you have where you want the referrer header sent?. If something is only safe on newer browsers, then it\u2019s not safe, and shouldn\u2019t be permitted.\nWhat cases do you have where you want the referrer header sent?. hmm. so it's not even about external URLs, it's about certain special cases of dynamic URLs where you'd prefer to not even have to specify opener/referrer?\nConsidering that force-opening links in a new tab is inherently a hostile UX interaction, and even more so for links on the same site, I'm not inclined to let the default behavior allow either opener or referrer.\nIs there a rule option you could think of that would be simpler than eslint override comments or removing the blank target, that would support your use case?. hmm. so it's not even about external URLs, it's about certain special cases of dynamic URLs where you'd prefer to not even have to specify opener/referrer?\nConsidering that force-opening links in a new tab is inherently a hostile UX interaction, and even more so for links on the same site, I'm not inclined to let the default behavior allow either opener or referrer.\nIs there a rule option you could think of that would be simpler than eslint override comments or removing the blank target, that would support your use case?. Allowing an explicit referer seems reasonable. The common case will be a link with neither attribute, and it won\u2019t open the door for opener.. The rule (which, it must be noted, is incompatible with server rendering, and so is totally fine to disable) is about setting state - it's irrelevant what state you're setting.. The rule (which, it must be noted, is incompatible with server rendering, and so is totally fine to disable) is about setting state - it's irrelevant what state you're setting.. This sounds like an excellent rule, and I'm very much in favor of it. A PR is appreciated!\n(Note, however, that it's also acceptable to access these things in event handlers - any component method or function that is only referenced by passing it in as a prop to an element, and never directly invoked). This sounds like an excellent rule, and I'm very much in favor of it. A PR is appreciated!\n(Note, however, that it's also acceptable to access these things in event handlers - any component method or function that is only referenced by passing it in as a prop to an element, and never directly invoked). Even if guarded, if initial render behavior differs between client and server, that\u2019s a bug - so there shouldn\u2019t be any use outside of those methods, even guarded.. That would cause a render mismatch, i believe - if you want to conditionally render into a portal, you\u2019d need to do that using state set in componentDidMount.. All rules are off by default, unless you extend a config that enables them.. All rules are off by default, unless you extend a config that enables them.. I\u2019m not sure what the error is in the first example - can you share the command line output?\nThis rule can be configured, for example, to sort callbacks (\u201con*\u201d) last - what is your rule config?. I\u2019m not sure what scratch is, but presumably its react config sets up the sort-props rule.. What React version have you set in settings?. That\u2019s probably ok since it can be polyfilled in older react versions.. @VincentLanglet an incorrect fixer can break any code; a correct fixer for this rule must not move anything across the boundary created by a spread prop.. @VincentLanglet an incorrect fixer can break any code; a correct fixer for this rule must not move anything across the boundary created by a spread prop.. Right - the proper thing there is for the autofixer to ignore that change, leaving behind an un-auto-fixable error that you\u2019re forced to manually address.\nPerhaps I\u2019ve misunderstood tho; you want an option that does not force sorting across spread boundaries, whether autofixed or not?. Right - the proper thing there is for the autofixer to ignore that change, leaving behind an un-auto-fixable error that you\u2019re forced to manually address.\nPerhaps I\u2019ve misunderstood tho; you want an option that does not force sorting across spread boundaries, whether autofixed or not?. In that case, this option requested in #2178 would, when enabled, just make the autofixer go from \"partial\" to \"full\".. In that case, this option requested in #2178 would, when enabled, just make the autofixer go from \"partial\" to \"full\".. Sure, i can see how that\u2019d be confusing.. If you mean the sort-comp rule, you can configure it with \u201cinstance-variables\u201d per the docs.. It\u2019s possible it doesn\u2019t work with typescript, of course. What is your exact config?. That issue is closed.\nI think this is typescript specific - JS doesn\u2019t use the private keyword. Separately, instance variables refers to public properties.\nI\u2019m not sure we support JS private fields, let alone TS ones.. Not being in the recommended list isn't solely the issue - if no-unsafe is going to be creating new errors for any existing consumer of it, it's potentially a breaking change.. Certainly separating it out to get the non-breaking parts in sooner is a great idea. It'd be great, however, if we could find a way to avoid the breaking changes on no-unsafe as well.. This isn\u2019t really possible to do with static analysis - but you can (and should) use https://npmjs.com/prop-types-exact and configure your tests to fail on propType warnings.. Prop names can be statically checked within the component itself, because we can reasonably force the author to write them statically - but not all consumers will even necessarily be linted (think a published package, not a top-level app) or necessarily following the same linter config or code style (think different teams in a larger monorepo). Separately, adding cross-file linting is a huge complexity and performance burden, so even if it were a reliable approach, it\u2019d not necessarily be a good idea.. For what it's worth, I really wish this was possible - but since it's not, I'd prefer a rule like #1547/#1455 . This is a tricky one, because if it\u2019s any falsy value besides a number, it will work properly.\nOnce the nullish coalescing operator lands, and that\u2019s a better alternative, it might make more sense to have a rule - right now, such a rule would probably be more noisy than helpful, I\u2019m afraid.. Relying on the implicit truthiness of .length anywhere imo is a bad idea (for this reason as well as many others) - if you always do a strict number comparison with .length, you won't run into the problem there at all (which the airbnb styleguide requires, ftr).. I don't think it's really something a linter can do - there's no guarantee a length property is even a number (not that I can think of a use case for that). I think at some point the solution is always going to boil down to actual tests.. Please do not create duplicate PRs - if the PR isn't updated by its creator, then it simply won't ever be merged.. ES7 is ES2016 - you might be thinking of \"class fields\", which is a stage 3 proposal (ie, it's ES Nothing Yet).\nThanks, we'll try to repro this.. I\u2019d prefer a fourth option, that uses an object map lookup - never a switch, and ideally not string manipulation :-). A PR with the 4 solution seems like a good place to start, thanks!. By using shape or objectOf instead of object. In this case, PropTypes.shape({ root: PropTypes.string.isRequired }). @EzequielDeSimone-Reflektion the inner one should be a shape tho, not object.. Using instanceOf (correction from InstanceOf) is unreliable at best, however. If you want to bypass the spirit of the rule, use an override comment.. The rule is to forbid certain propTypes from being used.\nA very common way to configure it is to forbid object and array, because these are very non specific types. Instead, you\u2019d want to use objectOf and arrayOf, and provide a propType for the contents of the array.. I'd include the explicit import, and remove it as a global from your \"globals\" configuration.. Can you share the contents of the file it's erroring on, and the exact error message on the CLI, complete with line number?. I'm not really sure how it's feasible. To be sure, a hardcoded string key where the only variable part is the index is the same as using only the index, and that should be avoided.. What happens if you use an actual method, instead of an arrow function in a class field (which I\u2019d recommend never doing)?. Let\u2019s file a new issue for both of those not complaining; I\u2019m going to close this one.\nUsing an arrow function in a class field prevents the problem of sending different === references to the function in every render (as opposed to inline functions); but it makes testing harder (because you can\u2019t mock out the implementation before rendering) and prevents optimizations by creating a new function per instance, instead of sharing the \u201cmeat\u201d on the prototype and only creating a .bind per instance.. Good call, this should be fixed.. v7.12.0 is released.. Sure, this seems like a reasonable addition.. This looks great, but since it will introduce new warnings, it\u2019s a breaking change. Can we hide this new behavior behind an option?. A constructor for a React Component has to call super(props) for this to work properly.. @alexzherdev it's necessary for any use of this, and it'll throw an error if you attempt to reference this before calling super().. ah - so the issue is that you forgot to bind the instance method.\nI\u2019m not sure if this is really something that can be reliably caught with linting, as opposed to with unit tests.. (Separately, inheritance in React is a large antipattern; code should be shared via composition, not inheritance). The former case should be covering color and caption, and the spread should just be props that are impossible to statically analyze.\nconst { props } = this definitely shouldn't break anything that uses this.props.. v7.12.0 is released; is this still an issue?. That\u2019s impossible to fix with a linter; I\u2019d recommend spreading in both B.propTypes and B.defaultProps so there\u2019s no confusion about where the source of truth is.. @aw-davidson correct, this is the intended behavior.. Spreading shared propTypes into a component's propTypes is not an antipattern, it's a good pattern.\nAt some point, linting can't catch everything, and you have to let your unit tests catch things :-). I believe this is fixed in latest maser, but not yet released.. I believe this is fixed in latest maser, but not yet released.. It definitely shouldn\u2019t, since hasOwnProperty should never ever under any circumstances be called directly on anything. You want Object.prototype.hasOwnProperty.call(obj, key) instead.. It definitely shouldn\u2019t, since hasOwnProperty should never ever under any circumstances be called directly on anything. You want Object.prototype.hasOwnProperty.call(obj, key) instead.. Very true! Hopefully everyone has that rule enabled.\nWhich, is why I don't think the destructuring-assignment needs any special rules around it.\nSeparately, there's literally no value in checking if a prop is passed or not - undefined and \"absent\" should always be treated the same, no exceptions - based on that, I'm going to close this.. Very true! Hopefully everyone has that rule enabled.\nWhich, is why I don't think the destructuring-assignment needs any special rules around it.\nSeparately, there's literally no value in checking if a prop is passed or not - undefined and \"absent\" should always be treated the same, no exceptions - based on that, I'm going to close this.. That might be tricky; not everyone uses ESM, so it might need to be const React = require(\u2018react\u2019), for example.. That might be tricky; not everyone uses ESM, so it might need to be const React = require(\u2018react\u2019), for example.. Perhaps, but generally eslint rules avoid config options solely for autofixes, and anything to do with guessing the module system usually needs manual work to fix.. Perhaps, but generally eslint rules avoid config options solely for autofixes, and anything to do with guessing the module system usually needs manual work to fix.. In this case, your actions propType should not be object, it should be shape, and specify that doSomething is a function.. Now that is a bug - accessing things chained off of this.props should error, but not things off of this.\ncc @alexzherdev . Thanks everybody; if you have different code that's erroring, please post it. If you're just experiencing the same issue, please add an emoji reaction to the original post.\nThis is an accepted bug; we just need someone to work on it.. v7.12.1 is released.. @ajfarkas \"required\" means that element creators can omit it at runtime; it doesn't mean that when provided it doesn't have a contract to adhere to.. cc @alexzherdev . Could you provide the code that leads to this?. Closed in #2099.. @nicofrand can you file a new issue with the details?. Specifically, the code that makes it crash - but if it\u2019s generating the same error, then I\u2019ll reopen.. More than 9 hours after I\u2019ve merged it, I\u2019m sure.\nReleases, as always, are done when a maintainer has time, and can\u2019t be done any faster.. I\u2019ll try to find time today.. @remcohaszing can you please file a new issue?. @the-spyke please file that as a new issue, and we\u2019ll fix it asap. v7.12.1 is released.. https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/jsx-wrap-multilines.js#L165 implies that either the before or after token was null, and not being checked.\nAdded in #1576 / cc @sharmilajesupaul \n. I\u2019m really not sure :-) as long as the fix comes with lots of test cases, at least some of which fail absent the fix, i think maybe 1 > 2 > 3?. Not sure if this is fixed by the unreleased #2099 or #2098. Thanks for confirming.. Thanks for the great repro code; that helped a ton :-). v17.12.1 is released.. The rule definitely shouldn't crash - but static defaultProps can only ever be an object literal, not a function. The legacy createReactClass pattern is the one that had a function for things like that.. Can you update to v7.12.1 and see if it's still crashing?. Also, do you know what rule it's crashing on?. Ah, I didn't even see that - yes, the IIFE should work fine wrt React.. @jethrolarson by any chance, can you share the code that it's erroring on?. The OP's test code doesn't crash on master.\n@jethrolarson I understand. if you edit lib/rules/forbid-prop-types.js line 128 to console.log(context.getFilename()) (i think), it should print out the file at least?. I suppose we could; it'd be pretty intrusive to other plugins tho. It seems more like something eslint itself should be handing.. Perfect, I'm able to repro.. @murphy1312 can you file a new issue?. cc @jomasti. @samsch thanks, could you file that as a new issue?. The first code block there is not crashing for me on master.. Can you provide the text output instead of the image, as well as the code on which it\u2019s crashing?. Also, #2095 may have solved it, but is not yet released.. v7.12.2 is now released.\nHappy to reopen if it's still an issue.. It'd be great if we could separate out the fixes into a separate PR from the new rule.. I think the current schema for the components array would work fine as a plugin-level setting; we can enhance it in the future as needed.. Duplicate of #1855 . That\u2019s not actually necessary - try this:\njs\n    let menuItemPropTypes;\n    menuItemPropTypes = {\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      path: PropTypes.string,\n      menuItems(...args) {\n        return PropTypes.arrayOf(PropTypes.shape(menuItemPropTypes))(...args);\n      },\n    };\nMutation after the fact is almost never required.. Ah, true. I\u2019ve updated my post.. This is fixed in master; I'll close it with your test case.. This is fixed in master; I'll close it with your test case.. v7.12.4 has been released.. v7.12.4 has been released.. In the examples, you\u2019re not using typical HOC patterns - you\u2019re returning a function call which receives a jsx element as an argument (instead of passing a full component into an HOC, and using the return result as another component). I don\u2019t know how a linter could possibly realize that those function calls return jsx themselves, nor how functions returning non-jsx values could be detected as components.. Happy to reopen if you\u2019re still having trouble.. Probably so, but this fix passed the test :-) improvements welcome!. Indeed, I'd expect that to be set. What's the output of npx eslint --print-config path/to/some/JS/file?. >```json\n\n\"react\": {\n     \"pragma\": \"React\",\n     \"version\": \"16.0\"\n   },\n```\n\nthis should definitely be working; I'll look into it.. I've added some more tests to master, that pass. I'm going to assume this is fixed on master but not yet released; I'll reopen if it's still a problem after publishing the next release.. I've added some more tests to master, that pass. I'm going to assume this is fixed on master but not yet released; I'll reopen if it's still a problem after publishing the next release.. v7.12.4 has been released.. v7.12.4 has been released.. I assume you're extending the airbnb config, which requires that .js files actually be JavaScript.\nIf you don't like the rule, override it in your config, but you're better off renaming the file.. Yes, those are indeed not autofixed for that reason.\nAre they warned on? I\u2019d expect those curries to be considered necessary due to jsx syntax.. v7.12.4 has been released.. v7.12.4 has been released.. Since it's an eslint core rule, it would have to be a change in eslint itself.. Hmm, in this case the component is actually unnamed - and React.memo can't possibly infer the name (because that's not how JS name inference works).\nIn other words, this is correct as is.. If you use a named function instead of an arrow function (as is best practice for components, always) does the rule pass?. If you use a named function instead of an arrow function (as is best practice for components, always) does the rule pass?. I'm going to close this; happy to reopen if it turns out to be an actual issue with the plugin.. I'm going to close this; happy to reopen if it turns out to be an actual issue with the plugin.. @ThiefMaster simple solution there, use a default export :-D. (On a side note, there's zero reason for render to be an arrow function in a class field; that should be an instance method)\nI've added a test case that passes; that suggests this is fixed on master but not yet released. I'm happy to reopen if the next release doesn't fix it.. (On a side note, there's zero reason for render to be an arrow function in a class field; that should be an instance method)\nI've added a test case that passes; that suggests this is fixed on master but not yet released. I'm happy to reopen if the next release doesn't fix it.. v7.12.4 has been released.. v7.12.4 has been released.. In this case, getNameDiv is actually being detected as a component (which it should be; prefer components to render functions).\nI'm not sure how we could rule out getNameDiv as being a component without ruling out many valid use cases.. In this case, getNameDiv is actually being detected as a component (which it should be; prefer components to render functions).\nI'm not sure how we could rule out getNameDiv as being a component without ruling out many valid use cases.. Certainly that\u2019s subjective; personally I\u2019d find it much more readable for noNames to be inline jsx, and for namesTable to be a separate component.\nLet\u2019s leave this open in case there\u2019s a way to handle it.. Certainly that\u2019s subjective; personally I\u2019d find it much more readable for noNames to be inline jsx, and for namesTable to be a separate component.\nLet\u2019s leave this open in case there\u2019s a way to handle it.. I'm going to assume that Sample extends React.Component or else it wouldn't be detected as a component?. I'm going to assume that Sample extends React.Component or else it wouldn't be detected as a component?. I've added passing test cases to master. If you can provide more info such that I can reproduce the failure, I'll be happy to reopen this - otherwise it might be fixed on master but unreleased.. I've added passing test cases to master. If you can provide more info such that I can reproduce the failure, I'll be happy to reopen this - otherwise it might be fixed on master but unreleased.. Ah, well that\u2019s ancient :-) can you update it from 7.4 to 7.12.4 and try again?. Ah, well that\u2019s ancient :-) can you update it from 7.4 to 7.12.4 and try again?. Thanks; the repro code helps a lot. Any idea what file it\u2019s crashing on?. Thanks; the repro code helps a lot. Any idea what file it\u2019s crashing on?. Sorry, I meant what rule, not what file :-)\nTo reiterate, this code crashes:\njsx\nlet items = [];\nlet testData = [{a: \"test1\", displayName: \"test2\"}, {a: \"test1\", displayName: \"test2\"}];\nfor (let item of testData) {\n    items.push({a: item.a, b: item.displayName});\n}\nreturn items;\nand this code does not:\njsx\nlet items = [];\nlet testData = [{a: \"test1\", displayName: \"test2\"}, {a: \"test1\", displayName: \"test2\"}];\ntestData.forEach(item => {\n    items.push({a: item.a, b: item.displayName});\n});\nreturn items;. cc @alexzherdev for some direction in the props code :-). The rule should already be autofixable - see these tests:\n - https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-fragments.js#L124\n - https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-fragments.js#L140\n - https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-fragments.js#L151-L154\netc.. Editors often have to be restarted before they can pick up config or node_modules changes; the command line is the source of truth. Glad it\u2019s working.. There\u2019s a lot of ways to bypass it; it\u2019s not really practical to try to catch them all. The rule is meant as a helpful warning not to rely on indexes in a key, when your items have a unique signature.. I\u2019m not sure. We can certainly detect this specific pattern, but I\u2019m not sure how valuable it\u2019d be, especially considering that x.toString() is an anti pattern (prefer String(x)). What do you think?. How could it possibly do that in an untyped language like JavaScript?. eslint autofixers are supposed to leave the code in a passing state, and most importantly to not change how code behaves. I'm not sure how much value this would add.. This should definitely be fine since it's in an attribute.. What's your eslint config?. k, looks like a legitimate bug. Well that's true - the \"no literal\" rule explicitly forbids string literals. (it's not in curly braces, so it's a string literal). We'll need a PR to this plugin to fix it.. Absolutely!. Sure, a separate PR to improve CONTRIBUTING.md is always great.\nAs for noStrings; https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md says \"Enforces no string literals used as children, wrapped or unwrapped.\" - that means it should only apply to children, not props, which seems like the bug.. Can you share the original code as text? screenshots of text are nearly impossible to work with.. @TankRyze is your issue that you didn't like the warning, or that you think it was warning with the wrong depth?. @iiison i marked it resolved because you indicated you'd incorporate it. There's no reason for a rule called \"literals\" to differentiate between string and template.. @iiison i marked it resolved because you indicated you'd incorporate it. There's no reason for a rule called \"literals\" to differentiate between string and template.. Typically, render functions should be SFCs - however I agree that in this case (an object literal member, and a name that doesn't start with a capital letter) it shouldn't be detected as a component.\n(also, this.handleClick is very brittle, since if someone does const { renderNode } = object it will break, and a standalone render function is typically invoked without any receiver). It definitely should!. @jenil94 that'd be great, thanks. I assume that the mechanism our rule uses to \u201cnotify\u201d the core rule that a var is used also needs to do the same for the typescript rule.. You may be referring to ES6 name inference, by which anonymous functions infer their name from the variable they\u2019re assigned to - this applies to normal functions, arrow functions, and classes.. Minification doesn\u2019t require name mangling; that\u2019s just uglify\u2019s very unsafe default.. It's supported by everything but IE 9-11, and you can polyfill it there using https://npmjs.com/function.prototype.name - fair point tho that maybe they should be separate options.. See #1855.. The goal of the rule is to prevent ever accessing anything directly off of the props object - not merely to ensure destructuring is used. While in this case (= this.props.form) it's fine, if it were = this.props.getStuff(), that would be a problem, because getStuff would get access to this.props as its receiver (this value).. Share your entire eslint config?. Share your entire eslint config?. This isn't really something we can statically analyze - in general, you shouldn't be passing around the entire props (or state) object. If you destructure props in the constructor, and pass something in explicitly, it should work fine.. This isn't really something we can statically analyze - in general, you shouldn't be passing around the entire props (or state) object. If you destructure props in the constructor, and pass something in explicitly, it should work fine.. In your specific simple case, it could certainly be done - but, anyone from outside the file could call doSomething with an object that's not the props - so it's simply impossible to statically know it for all circumstances, only for a subset of usage patterns.\nI don't think it's worth the complexity to try to target only some of the patterns, when the entire thing can be avoided by not having the antipattern of passing the props object around.. In your specific simple case, it could certainly be done - but, anyone from outside the file could call doSomething with an object that's not the props - so it's simply impossible to statically know it for all circumstances, only for a subset of usage patterns.\nI don't think it's worth the complexity to try to target only some of the patterns, when the entire thing can be avoided by not having the antipattern of passing the props object around.. I'm sure it's subjective, but I would argue that in that case, you'd want to do this:\nconst { a, b, c } = props;\ndoSomething({ a, b, c });\nYou can still pass an object, but it's not the actual props object, it's an explicit object you created.. I'm sure it's subjective, but I would argue that in that case, you'd want to do this:\nconst { a, b, c } = props;\ndoSomething({ a, b, c });\nYou can still pass an object, but it's not the actual props object, it's an explicit object you created.. I see that as a feature, not a bug, since if you do forget, your tests will fail :-). I see that as a feature, not a bug, since if you do forget, your tests will fail :-). This seems answered - don't pass the props or state objects anywhere.. This seems answered - don't pass the props or state objects anywhere.. What is jsxFrag?. What is jsxFrag?. It's nice that babel supports that comment syntax, but this eslint plugin does not, and never has done.\nWhat this plugin supports is explicit settings in your eslint config: https://github.com/yannickcr/eslint-plugin-react#configuration . It's missing from that documentation, but it's looking for a pragma setting called \"fragment\", as you can see here.\nA PR to add that pragma to the readme would be much appreciated.. It's nice that babel supports that comment syntax, but this eslint plugin does not, and never has done.\nWhat this plugin supports is explicit settings in your eslint config: https://github.com/yannickcr/eslint-plugin-react#configuration . It's missing from that documentation, but it's looking for a pragma setting called \"fragment\", as you can see here.\nA PR to add that pragma to the readme would be much appreciated.. I suppose we could accept a PR that added that support - presumably it's new, with React 16.2.. I suppose we could accept a PR that added that support - presumably it's new, with React 16.2.. I'm a bit confused why createElement and Fragment would come from different packages. Can you explain the use case?. I suppose that makes sense, but it's a bunch of extra complexity.. I don't believe you can fully customize CRA eslint settings without ejecting.. I'm not familiar with customize-cra, but if the react eslint setting isn't propagating, then it's probably a bug in that.. Thanks, this seems answered. Good catch!. Try removing your package-lock and updating everything; if that doesn\u2019t fix it, try https://github.com/eslint/espree/issues/393#issuecomment-433348355. in this specific case, someObject doesn't actually exist - can you share the entire component code where it fails?. I agree, your initial post seems like a bug.. Seems to be, closing as a duplicate of #1280.. Seems to be, closing as a duplicate of #1280.. That particular rule was merged in #1945, only 24 days ago, and has not yet been released to npm.\nThus, you can't enable a rule that doesn't yet exist in a released version.. There's no timeline; when a maintainer has time to do so. In this case, it'll be a minor, so I'll also look through the open PRs and make sure there's no new features or bugfixes that need merging first.. Does this only happen if the function is named memo?. Right, but I mean if you name it something that's not \"memo\" - because React.memo is a special thing - does the lint rule still warn>?. Thanks, in that case the issue is that the code checking for React.memo needs to also ensure memo comes from React.. Thanks, in that case the issue is that the code checking for React.memo needs to also ensure memo comes from React.. You can\u2019t possibly know it\u2019s unused statically - anything that imports Component could reference Component.prototype.someMethod or similar.. Similarly, you never directly use, say, componentDidUpdate, but React does - and there\u2019s no way for a general purpose linter to catch things like that.. I suppose that might make sense for a React class component, sure. maybe no-unused-class-component-methods. Anything with the help wanted label, without a linked PR, is always up for grabs.. Because you're conditionally destructuring it, in some code paths the prop will be unused, and in some the state will be unused.\nInstead, unconditionally destructure it from BOTH props and state, and conditionally use it instead.\n(imo it shouldn't be passing for the non-destructuring form either). Because you're conditionally destructuring it, in some code paths the prop will be unused, and in some the state will be unused.\nInstead, unconditionally destructure it from BOTH props and state, and conditionally use it instead.\n(imo it shouldn't be passing for the non-destructuring form either). Yes; I\u2019m suggesting you shouldn\u2019t do either, and should instead do:\njsx\nconst { value: propValue } = this.props;\nconst { value: stateValue } = this.state;\nconst value = this.isUpdatedByChange ? propValue : stateValue;. Yes; I\u2019m suggesting you shouldn\u2019t do either, and should instead do:\njsx\nconst { value: propValue } = this.props;\nconst { value: stateValue } = this.state;\nconst value = this.isUpdatedByChange ? propValue : stateValue;. Yes, in eslintrc, and at the top level (see https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/react.js#L470 for an example).\nWhat version of eslint do you have?. Yes, in eslintrc, and at the top level (see https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/react.js#L470 for an example).\nWhat version of eslint do you have?. If you downgrade to 5.14.0 or 5.13, do you still see the problem?. If you downgrade to 5.14.0 or 5.13, do you still see the problem?. The ordering shouldn\u2019t matter; JSON schema, which eslint uses to validate its config, doesn\u2019t care about order.. Maybe it has to appear after \u201creact\u201d in the plugins dir tho, so that it can be made valid?. @samsch a PR to improve the docs would be appreciated, both here and in eslint core.\nThe options are shown on our readme.. @samsch a PR to improve the docs would be appreciated, both here and in eslint core.\nThe options are shown on our readme.. Nope, looks fine. Why do you think there's a problem?. Nope, looks fine. Why do you think there's a problem?. What error?. What error?. What does eslint --print-config show?. Did you figure it out?. This is very strange - why would you want to create a new renderPhoto function on every render of Foo, rather than hoisting it outside?\nEither way, this should indeed work.. This is very strange - why would you want to create a new renderPhoto function on every render of Foo, rather than hoisting it outside?\nEither way, this should indeed work.. Although I\u2019d strongly recommend that pattern, yours should certainly work if possible.. I very much don\u2019t agree that this would be good. A correct fixer will never move anything across a spread boundary, and while it\u2019s fine to use linting rules to block language syntax, using linting rules to willfully break language syntax is not ok.. Gotcha, that makes sense. Thanks for clarifying.\nAn option to only enforce sorting within spread boundaries seems like a good addition.. Is this TS or Flow?. It's very surprising that TS allows that; Foo<T> looks like a type, but the first item in a jsx element has to be a value.. See https://github.com/yannickcr/eslint-plugin-react#configuration - specify a react version of \u201cdetect\u201d in settings in your eslintrc.. Does the rule warn on Child2?. Can you provide the code this is failing on?. I'm aware of the changelog; I published it. Can you elaborate on what code is erroring and what error you receive?. Note that the current rule does Object.keys(require('prop-types'));, so as long as you have the latest prop-types package installed, everything should Just Work.. That's a good question :-) it'll probably have to be something like:\nallOf: [\n  {\n    oneOf: [\n      bothEnforce,\n      htmlEnforceCustomIgnore,\n      htmlIgnoreCustomEnforce\n    ],\n  },\n  exceptionsSchema\n]. ah true, that's a good point.\nI'd like the schema to be as explicit as possible. If both are \"ignore\", then exceptions must not be empty.. resolve already has PnP compatibility (via https://github.com/browserify/resolve/pull/170). If it's not working, please file a bug on yarn.. What warning do you get exactly?. What version of eslint-plugin-react do you have?\nAlso note that prettier conflicts with many eslint rules, including this one - you\u2019ll need to also extend the prettier react config to disable those.. Also extend prettier/react, according to the prettier docs.. The spread is basically impossible to statically analyze; but I\u2019d still expect the error on foo, since it\u2019s defined statically.. ahhh right, that's why. Because we can't determine if bar is present or not, we currently treat a spread as \"all possible props\".\nIf we errored on bar here, and you'd actually brought it in via the spread, then you'd be forced to silence the false positive, or to duplicate the bar declaration.. I\u2019d suggest avoiding spreading props entirely; one big benefit is regaining the static analysis that doing so prevents.. renderComponent here effectively is a component, and so it should have propTypes.\nEither way, instead of defining it on every render, you should define it outside of SomeComponent, and pass name into it as an argument.. Yes, it's (or should be) either a render prop or a component if it returns jsx.\nPassing around a props object is a massive antipattern; using it via closure is the same.\nI think if you insist on using this style, you'll have to use an override comment to disable the rule.. I agree that there's a bug here; the plugin should be able to figure out that renderComponent isn't using the props argument - ie, the warning i'd expect here is that SomeComponent isn't using the \"name\" prop (as opposed to the one you're getting).. cc @alexzherdev for props detection. This is an eslint/npm bug. Try https://github.com/eslint/espree/issues/393#issuecomment-433348355. Wrap it in parens?. Hmm, this rule should be ignoring non-DOM elements. Can you provide the full code and full warning text?. Why is there a newline after the colon? I\u2019d suggest:\njs\nfoo: (\n  <div />\n). Right - I\u2019d suggest the latter, precisely because the desired indentation otherwise is very ambiguous. I think to address your issue we\u2019d have to add in a bunch of special handling for \u201cnewline after a colon\u201d style.. instead of making \"absence\" and \"falsy\" be different, would it be better as a breaking change to rename the option to something like \"ignoreTranspilerName\"?\n. :+1: \n. this would need to be a full dependency since it's not related to actually developing the module.\n. Is this line a mistake? If not it might be better in a separate PR.\n. fixed in https://github.com/yannickcr/eslint-plugin-react/commit/da6b3ce5b6eaed82350aee09a9a4b7c66322f523\n. this should probably be the default case, to automatically get support for newer react versions.\n. should the message also vary based on React version?\n. ah, if versionUtil already has \"this or greater\" semantics, then this is totally fine. however, i feel like your initial approach might be better because it explicitly has a default case in the code.\n. seems legit\n. i like the else because then i don't have to know how versionUtil.test works.\n. We should indicate which is the default here - \"component\" i think.\n. i wonder if rather than \"all\", this should have the format { component: true, html: true } - that allows for other categorizations, and works just as well for the default of { component: true, html: false }\n. || true means it will never be false, so i don't think this is good notation. I'd just provide the default object:\njs\n\"self-closing-comp\": [\"error\", {\n  \"component\": true,\n  \"html\": false\n}]\nI think it's pretty self-apparent that you can override them with your own booleans\n. why do you need the babel-eslint parser for jsx object spread? that should only be needed for JS object spread.\n. hm, i wouldn't expect that one to need it either\n. As far as I know, React itself doesn't support \"class\" or \"for\", and requires \"className\" and \"htmlFor\". Can you point to some documentation that allows for this usage?\n. if we're going to use an example, let's use \"error\" instead of \"warn\" - warnings are often ignored and thus mostly useless :-)\n. it'd be nice if we could require via path, ie, var propName = require('jsx-ast-utils/propName') rather than having to pull everything in and grab one property - but obv this is not a blocker :-)\n. Yeah, that's a good point. My hope was to actually remove the need for the initial option - ie, to allow \"always/never\", OR the options object, but I don't know enough about eslint rules to configure that. Is that possible?\n. I suppose that's reasonable, but what if someone later wants a third option? Using strings is extensible, using booleans forever limits us to two options.\n. ok - so to sum up, i'll remove \"default\" since the initial option covers that.\n. How else would you make a prop conditionally present?\n.  Can we also add a test for foo.bar::baz and foo::bar?\n. can this not be bumped to 6.1.0?\n. since this is just testing the start of a quasi-comment, does it need the \"m\"?\n. ah right, i'm assuming the text node will be split up by lines, and that's not likely to be the case.\nCould we add your example as a test, to prevent a regression?\n. ah, understood, thanks for clarifying :-)\n. Sadly the only place it exists is https://github.com/eslint/eslint/blob/master/lib/cli-engine.js#L220\n. this seems like it might be common behavior that all the rules could use - and that some may already have implemented?\n. Is there a reason that isReturningJSX isn't already checking for a return statement?\n. I think it makes sense for \"is returning JSX\" to accept any kind of function, and it should be able to accurately return a boolean.\n. can we also cover the render() { case?\n. similarly here with render() {\n. since the ordering of \"rel\" and the spread props seems to matter, should we also have a test for one where \"rel\" appears first?\n. @yannickcr is there any reason this uses for..in instead of Object.keys(\u2026).forEach(\u2026)?\n. I think it's important to add, to prevent a regression - if there's already order-dependent bugs, there could easily be more added later.\n. @yannickcr Object.keys is ES5, and is supported since node 0.6.\n. I'm fine with separate, but either way :-)\n. can we also ensure that {'>'} is allowed, by adding a test for it?\n. whoops, missed that. thanks, that works.\n. wait, why is babel-eslint required? the default parser should be able to handle all of these examples.\n. if it works when removed, then i'd say please do :-) if not, then obv you should keep it\n. ah - we may need to enable the jsx parser option.\n. See https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-sort-props.js#L15-L20\n. Yeah that'd require .some or similar. Separate PR is fine.\n. this seems like it now no longer verifies that every rule is included?\nIt is important to have a test that fails when someone adds a new rule but forgets to add it to \"all\"\n. can we also add a test for the \"line-aligned\" option? We might want to add explicit tests for all of them.\n. I can see how the max-len rule might overlap sometimes with this rule, but all the places I want to use this one wouldn't hit max-len.\n. Generally this section of rules tells you when it's useless to use the rule. Using max-len doesn't make it useless.\n. I'm not sure it needs mentioning. Many rules happen to overlap in some cases, but aren't conceptually exclusive rules - this case applies.\nI guess \"if you are not using jsx, or if you are primarily concerned with line length and the max-len rule is sufficient for you\" but I'm not sure what value it adds.\n. if you supply an option when the schema is [], does it error out? ie, does it have additionalProperties: false behavior implicitly?\n. Awesome, thanks for confirming :-)\n. would this not need a \"react/\" prefix?\n. Sounds good.\n. I think <<div> is just as problematic as </div>>, and {<Foo />}} and {{<Foo />} so those seem obvious to me (let's add {?)\nI'm not sure I see the purpose in having double or single quotes in here, though.\n. I had no idea this syntax was a thing (test added in e5e29cec / #219) - the official docs don't mention it either.\n@zertosh, could you verify this is correct? Also, can you link to where in the JSX spec this syntax is supported? If it's solely a custom addition then I don't think it's something we should try hard to support.\n. Thanks! What would it transform to that's different than a dot?\n. Is that a bug filed on babel, or an intentional decision?\n. what i meant was, conceptually what is the purpose of that production in the JSX spec, if the recommended transpiler doesn't support it?\n. I guess that was my question, what would you transform them to anyways. If it's just meant as an otherwise useless injection point, then that makes sense.\n. How about\nSelf-closing JSX elements must not have whitespace between the `/` and the `>`\nand\nJSX closing tags must not have whitespace between the `<`, the `/`, and the tag name.\n?\n. In this case it'd be jsx-no-space-in-closing tho.\n. yeah, that's true. perhaps making this rule handle all of those would be helpful?\n. Can we also add a test that sets the \"children\" prop explicitly, in both cases?\n. I see you've added it for React.createElement, but not for the jsx example.\n. It's very wrong but we should still cover it :-)\n. I'd say on any elements - children should be actual children (in React.createElement as well)\n. I've been told js gives better highlighting than jsx, even for JSX content.\n. I agree, but that change could be considered breaking whereas this change is minor. If this is going to make it into v6 then that's fine, though.\n. That does look better :-) either way's fine, but i'm pretty sure it's come up before. Maybe Github improved the highlighting since.\n. we should assert instead that every rule is either in deprecatedRules or all, rather than just skipping the deprecated ones.\n. fwiw !!foo and Boolean(foo) are equivalent, except that the former is faster, and can't be forged\n. Sounds good, keep it as Boolean for now then. We can change it to !! separately, if desired.\n. If i want to forbid certain props on Components, but not forbid className/style, how do I do that?\n. It might be good to explicitly note that the default value of this option is ['className', 'style']\n. i think you need to fix some merge conflicts :-)\n. let's also ensure it works with extends React.PureComponent\n. If someone sets an invalid pragma value, shouldn't the plugin error out, instead of trying to fix it for them?\n. should this be componentDidMount?\n. It should be, though, since it's already a React error.\n. at the very least, let's make sure this function does not use the harmful convention of pretending a leading underscore is somehow \"private\" :-) also, there always needs to be a space between ) and {.\n. these should all autofix with a space before the />.\n. Yes, that's exactly what i'm suggesting. <div /> is correct, not <div/>\n. I think multiple would be ok, but we'd want to encourage single.\n. That's true - but I don't think eslint exposes that information from one rule to another. If it does, we should absolutely obey it.\n. Please do update the documentation to be correct :-)\nAs long as the combination of those rules (jsx-space-before-closing set to never, and this one) yields code that passes the linter, I think this works great :-)\n. Why revert it? The default fix for this rule should be the same as the default spacing on jsx-space-before-closing - which is to include the space. \"never\" is an edge case.\n. Yes but someone may not have enabled jsx-space-before-closing - I want the burden of running that extra autofixer to be on someone who has chosen \"never\" - which is a very unconventional choice - not on the vast majority of JSX authors who always put a space there.\n. nope, that looks fine to me!\n. not a big deal, but class examples should be using concise method syntax - i'm actually not even sure it will work with the : syntax you've got here. (ie onClick() { not onClick: function () {\n. what does props: Props desugar to in Flow? Does this whole line just get removed, because it's just a type declaration, or does it have another effect?\n. Let's just make this say \"these elements\" to avoid having to update the count in the future.\n. a warning\n. I still think this pattern should be considered a warning - being a PureComponent does not mean this is better as a stateful component.\n. Agreed\n. Being a PureComponent does not make it stateless either - the two things are orthogonal. I'm saying prefer-stateless-function is far more important than prefer-optimization.\n. I think this documentation needs to be updated to describe the option?\n. I don't think we need the === true :-) also we should probably check the boolean first to avoid the possibly unnecessary isPureComponent call.\n. I agree - let's not attempt to explain severity levels here. That knowledge is a prerequisite for using an eslint plugin, since it's required to use eslint.\n. Thanks, fixed in 9f764599a537728e7ac9fa332d0ac6e3a6deb788\n. Thanks, fixed in 9f764599a537728e7ac9fa332d0ac6e3a6deb788\n. Thanks, fixed in 9f764599a537728e7ac9fa332d0ac6e3a6deb788\n. can we also test all these cases with the destructuring being done inline in the signature? ie, constructor ({ something }) {?\n. this isn't actually ES6 - it's using a stage 2 proposal for public class properties.\nThe current standard JS way of doing this is Hello.propTypes = { \u2026 }, after the class definition.\n. can we also have a test case that uses the default parser (ie, not using class properties)\n. here too\n. it does, but you have to specify ecmaVersion as 6 or higher in parserOptions (which should be done anyways)\n. They can also destructure it inline, so we should support that too.\n. Can this just be '\\t' instead of the character code?\n. can we add a comment here detailing what cases are not covered? Ideally we'd also add skipped/commented-out test cases for that future work.\n. actually this would be static propTypes = () => { - i don't think propTypes is expected to be anything but a data property.\n. This seems like something that will vary per prop name. Perhaps the enhancement should be that forbid can have strings or objects, and if an object, it can be something like { \"property\": \"foo\", \"includeDOM\": true }?\n. Yes, I'm not sure why we have the getter version, and the \"fourth\" type is in fact the most standard. The third type there isn't actually valid because of the static keyword, but I think you mean its use in React.createClass, which is fine.\n. Let's not worry about consolidating them in this PR, but please do add a Hello.propTypes = { \u2026 } variant.\n. the two \"default\" booleans need to be on the object, not on the outer config object. not sure how to denote this tho.\n. unless you're suggesting that they'd be top-level settings as well? if so, i do think i like that.\n. i think the schema is missing defaultAllowOnComponents?\n. i think we can maybe set this to false, so nobody accidentally passes an invalid config option?\n. the schema also seems to be missing allow, which i think should probably share a schema with forbid? (ie, reuse the array schema in both)\n. can we use input.forEach here, instead of a for loop?\n. '\u2026 on ' + tag + ' components'?\n. for each of the tests you're using for React.createClass, let's please also add a test case for an SFC, and a class-based component.\n. yeah that's a good point, it might constitute a breaking change. probably best to leave it true for now.\n. is there not a top-level allow as well?\n. Hm, yeah i guess if i wanted to override a forbid i'd now just modify the object inside the array. This is fine as-is.\n. Ah, that's another thing - we should check for React.createElement calls too (ie, non-JSX) :-)\n. There are a number of rules that address both - however, I'm fine if this rule covers jsx right now, but is expanded to non-JSX in a future PR.\n. These parens are unnecessary. It also might be better to check skipUndeclared first?\n. let's not necessarily enable this for every test - can we enable it just for the new tests?\n. I'm not 100% on it either way - it just seems like it'd be useful to test the parser with common (non-experimental) options.\n. I'm not sure why - this is the PR that adds experimentalObjectRestSpread. but i don't think this needs to block if other maintainers think it's fine.\n. Gotcha, that's a fair point.\n. Let's also include some tests where the tagname and first prop are on the same line, but there's another prop. Also, please add variants of all tests that include spread props\n. Is this not just a bar prop?\n. Ah gotcha\n. wait, why is this not a warning? The JSX tag is spanning multiple lines, so it should look like:\njsx\n<Hello\n  foo={{\n    \u2026\n  }}\n/>\n. hmm, i misunderstood the purpose of this option - it seems like Airbnb's config already matches multiline, and we wouldn't use this particular option.\nThis thus seems like it does match what you're looking for.\n. instead of adding an additional option, could we just choose any arbitrary indentation style, and rely on the indent autofixer to correct it?\n. If we did want to add the option, I think we'd want to make it be an object so that it's extensible in the future.\n. Yes, it might require two passes of --fix but I think that's OK.\nAnd yes, the default should match whatever indent defaults to.\n. this rule should also check React.createElement usages as well.\n. i think maybe a better object schema would be:\n{ component: 'button', replacement: 'Button', message: 'hey yo buttons suck, use Button' } - where \"replacement\" and \"message\" would both be optional.\nThat way you can use the object form for everything, and the string form is just a convenience.\n. I'm actually kind of confused what the point is of replacement elements is, unless it's to autofix or populate the message - but \"message\" would handle the latter, and an autofixer would need only a single replacement to be able to work. So, why multiple?\n. oh sure, \"element\" makes more sense\n. <Modal /> is the same as React.createElement(Modal), and I'd expect the same setting to forbid both.\nI'm not sure about the latter example.\n. I think using a path would require using require.resolve combined with the file's dirname/process.cwd(), on both the provided path as well as the import/require path in the file, which might be dynamic.\nI think that would be more robust, but I think there's already a lot of other rules that solely use the component name, so I think it'd be OK to keep with that pattern for now.\n. I'm not sure we're on the same page here - <Modal /> is identical to React.createElement(Modal). React.createElement('Modal') is the same as <{'Modal'} /> which is simply invalid react/jsx.\nIn other words, if Button is forbidden, i could still do const NotButton = Button; <NotButton /> and work around this rule.\n. I agree with your summary (although I'm pretty sure React.createElement won't work at all with strings that aren't DOM components)\n. could you also add examples with an SFC, and with a class-based component?\n. hmm - why would \"foo\" lowercase catch \"Foo\", which is a distinct property in JS?\n. no - it's for \"stateless functional component\" - ie, a function that takes props and returns JSX\n. I wonder if we should just use the deprecated property to dynamically build up the deprecatedRules list?\n. lol i see this in your OP now. yeah i think it might be worth it - getAllRules().filter(x => x.deprecated) seems like it should be a viable approach\n. this seems like the react/ prefix won't actually be there for the deprecated rules?\n. That seems odd to me but I believe you that the behavior won't be changed by this PR - so while I think all the exported rule name should have the prefix, that clearly is out of scope of this PR. Thanks for clarifying!\n. hm, that's a good point. thanks\n. I'm a big -1 on including this in the default. Outside of Flow, you would never want to declare the props instance property anywhere, nor mutate it or assign to it directly.\n. If someone is not using Flow, and they did in fact have props = {} as a class property (setting aside that nobody would ever do that in React), would this sorting category affect it?\n. I agree - let's not merge this without the fix for this.\n. Alternatively you can just bring in a dep like https://www.npmjs.com/package/string-repeat\n. I'd rather leave the broken but correct test, and comment it out, than leave this incorrect test. Could we do that?\n. In general, left-pad in no way changes that more deps is better. left-pad was only a problem for people that were already ignoring a decade of best practices and depending on third-party registries for their dependencies.\nIn this case, keeping your join trick is fine too.\n. This is waiting on @snowypowers removing the indentation option.\n(also, s/utilise/utilize)\n. Accepting user string input into regexes is a bad idea. I'd prefer we accept a limited subset, like just \n. This line is problematic, especially creating the same regex more than once.\n. Good call on that part :-) passing user input into RegExp is still an issue.\n. i like this - we should also add ignoreComponents that defaults to false.\n. having options where absence and false are not the same is a very bad idea - it'd be better to rename this to checkDOMNodes and default it to false.\n. I understand what you were trying to do here, but I'm explicitly saying that regular expression patterns never belong in an eslint config. This is also the position of the eslint core team, fwiw.\n. Wildcards of \"\" seem very reasonable - but general regex syntax, implied or otherwise, is dangerous. eslint uses git-ignore iirc to match patterns, but that (and glob/minimatch) tend to apply to filenames, not strings.\n. woof, ok. thanks\n. indent should not be passed separately - it should just use 4 spaces (the indent default) and the individual indent rules should handle autofixing them.\n. these examples are DOM nodes, not Components\n. i think your code here is making the false assumption that there's only two kinds of nodes, DOM and Component. nodes can also be strings, numbers, arrays\u2026 are we sure this is the right way to check \"is dom node\" and \"is component\"? I feel like we have functions for this in the codebase already.\n. https://github.com/yannickcr/eslint-plugin-react/pull/850#issuecomment-258027762\n. shouldn't we only return true inside the if? otherwise it will only ever run on the first value of node.attributes - is that intended?\n. I guess the some then is just a nicer way of doing [0] and then having to check if it's defined?\n. sounds good \ud83d\udc4d \n. should this check for null also, since React ignores them both?\n. ah, good to know, thanks\n. right, i'm suggesting always ignoring cases or either that appear after a spread prop.\n. what about reduce, reduceRight, find?. since configs come from JSON and YAML, when would it be an instanceof RegExp?. i'm very concerned about using full user-provided regex patterns without sanitizing them.. why does this test need to use babel-eslint? all of these examples should use the default parser.. Yes, exactly that.. Then instanceof is not reliable (due to cross-realm issues) and so we should be converting it to a string and parsing it.. Either way, the schema should require it be a string, since rule schemas don't permit JS-only values, afaik.. The default parser, but when ecmaVersion set to 6 or higher, and jsx set to true.\nIt should use the default parser because that's the important one it works with - if you also want to test that it works with babel-eslint that's fine, but that's secondary.. users using a shared config that then run with --fix makes it an issue.. I think that rules should not have ways of configuring them that don't work in all three contexts - in other words, not a regex ever, only a string (or other formats that can work in JSON or YAML). This is also eslint core's policy.. I'm saying that the user of eslint should be protected against a malicious or accidental config, that might come from a plugin or a shared config.\nWhich means that the person who writes the pattern can't be trusted to mark it as safe - and neither can the user - which means the rule itself has to ensure that nothing unsafe can possibly happen.. That's certainly one way to do it - or alternatively, [{ pattern: \"SomePattern\": caseInsensitive: true }] perhaps?. there's no need to use babel-eslint here - let's test this with eslint's default parser, which fully support async function now.. Actually, given \"eslint\": \"^2.0.0 || ^3.0.0\" in package.json, i think we probably do need to stick with babel-eslint here - we'd have to raise the peer dep requirement to be able to rely on the default parser. Let's leave this as-is for now.. won't this prevent import { createElement } from 'react'; from being detected?. There's no need to use Map if the keys are strings; you can just use a normal object.. js\nreturn variables.find(function (variable) { return variable.name === name; });. Let's also add cases for var { createElement } = React; and var createElement = React.createElement;.\nProbably too difficult to cover var c = React.createElement; tho.. might as well update both then ;-). oops, sorry, if that's what it's doing then this is correct :-). altho i'm confused about the instanceof Map check - when will that be false? eslint requires node 4 or later.. why is this necessary? i wouldn't expect the display-name tests to enable jsx-no-undef. similarly, why would the core undef rule be enabled for jsx-no-undef tests? Rule tests should start with zero rules enabled except for the rule under test.. Why is there an \"errors\" section in the \"valid\" section?. This should be using localeCompare, not <, but that's out of scope for this PR. That's covered by the no-undef rules, is it not?. What would be a test case that would trigger that?. Using a * here won't translate to a footnote below - I think perhaps leaving this paragraph alone, and adding a second paragraph that describes \"never\", would be better.. we'll need to add \"considered warnings\" and \"not considered warnings\" examples for the \"never\" option as well.. I don't think adding an object property is the best schema here - I think we want to be able to do:\n```\n[\"error\", \"never\", {\n  \u2026\n}]\n[\"error\", \"always\", {\n  \u2026\n}]\n[\"error\", { // implies \"always\"\n  \u2026\n}]\n``. No, we absolutely must fix this first, since otherwise it's a semver-major change, and we need to publish master *before* a semver-major line.. No worries; I pushed up https://github.com/yannickcr/eslint-plugin-react/commit/e332b08694de6271674bdf2182f03b399306ba82 to fix it. Good call; I'll include this in my PR.. I think json format is the most common by a massive amount, so that's the format we should stick to in docs.. eslint-plugin-react still supports node 0.10, so please usearray.prototype.findhere instead (after this is merged, i'll update #1038 to switch back to.find). none of the code in this test requires object rest/spread or babel-eslint; could these tests just stick with espree?. it'd be helpful if the error could include the position of the warning, so that editors can jump the cursor right to it. I'm not sure why lowercase matters - I agree that cases where it's an object or array literal should be valid, butclass foo extends React.Componentshould have the same restrictions (someone could alwaysimport Foo from './foo'and use it just fine). I think this plugin already has some component detection logic we could reuse?. will a node always have a.parentproperty?. That seems like it'd be a breaking change - an option now, flipping the default later, seems safer. Both could be supported with eslint schemas as semver-minor - ie, a \"mode\" string, and then otherwise, an options object.. Per #1071, this should probably have a \"react/\" prefix.. is the \"return true\" important? if not, i'd maybe put a comment here or something to indicate \"any code can go here\" (same throughout). doesnodealways have akeyproperty?. doesnodealways have anid` property?. Might there be one in the future? It would probably be good to be defensible here.. This test case doesn't need babel-eslint - let's use the default parser whenever possible.. The sourceType is required for anything using the default parser, but it's unnecessary for anything using babel-eslint.\nIdeally, every test case that uses babel-eslint would also have a corresponding test case using the default parser, and babel-eslint tests would only be for features that eslint core can't handle (like flow types, or proposals). Specifically I think it should be applied to this specific test, and if we want to make things consistent holistically, that can be a separate PR.. I don't think any of these spaces are needed; do we typically visually align these comments in other rules?. Let's cache the property name rather than calling the function twice.. Will node.parent always have a .parent node?. Let's cache the property name here rather than calling the function thrice.. in that case (that our rules already are inconsistent) then don't worry about it; it can be cleaned up in a separate PR.. I don't know much of anything about AST nodes, I just want to avoid a crash in the future when a new node type comes out. does this also happen if propTypes are assigned outside the class body (ie, using only stage 4 features)? if so, could we add a test case that uses the default parser instead of babel-eslint?. this seems to suggest that there will be places that props and nextProps are interchangeable - that doesn't seem right to me.. there's no need to use babel-eslint here; let's just use normal Hello.propTypes =, and use the default parser. will every node have a property property? If not, the .name could crash when encountering unexpected node types.. This was my request, per https://github.com/yannickcr/eslint-plugin-react/pull/1078#discussion_r101881565. What about backticks?. Backticked strings require computed property brackets:\njs\n{ [`complete?`]: number }\nDoes this not work with flow?. Will this string always have matching quotes? or would it be better to do an unconditional replace that looks for a starting '/\" and a matching token at the end?. i think the defaults should go here, not on line 86. RESEVED \u2192 RESERVED. this is just \"is in list\" if it takes the list argument; it'd probably be better to define this function so that reservedList is available via closure, and this function would take only the name?. can we ensure that additionalProperties are disallowed on the object form? (not sure if line 73 covers this or not). I can see an argument for allowing a custom sorting of the reserved list - but by calling it \"reserved\", that means it's not something the user can change. In other words, \"foo\" isn't considered \"reserved\" by React, thus it should never be considered \"reserved\" by anything else.. actually now that i think of it; isn't dangerouslySetInnerHTML a special prop only on DOM nodes?\nI think you may want separate lists for DOM nodes, and custom components.. to confirm: if noSortAlphabetically is set to true, then this option is ignored?. I would think that noSortAlphabetically would be a universal setting. although, if it is, that probably makes this setting a bit more complex.\nCan you elaborate on the use case for wanting alphabetical sorting, but not wanting it to apply universally? (or the inverse). It does nothing on a composite component; what I mean is, it's a normal (non-reserved) prop on them.. I'm still questioning the need for different sorting here tho - can you elaborate on the use case for wanting alphabetical sorting, but not wanting it to apply universally? (or the inverse). I still think dangerouslySetInnerHTML should only be considered \"reserved\" on DOM nodes, even if the schema has a single list.. I also don't see any tests that exercise this prop - please add tests that cover every \"reserved prop\" :-). Hmm - React treats all lowercased names as a DOM element, I think; but either way I think node.type will only be a string when it's a DOM element.. Adding things to the recommended rules is a breaking change, so it should be in a separate PR regardless.. Changing which rules are recommended is semver-major, so that definitely shouldn't be done in this PR.. let's use \u203cx instead of Boolean(x) to coerce to booleans - and in this case, \u203ccomponent && !component.mutateProps is sufficient. can this use component.mutations.forEach instead of a loop?. it might be nice if this error message held more information - in the message, or by providing source locations.. what if item doesn't have a .object property?. let's use Object.keys(list).forEach if it's an object, and if it's an array, list.forEach - for..in should be avoided.. (same here - adding rules to the recommended set is semver-major, so let's remove this). What about things like this.props.list.push('foo'), or other array mutators? What about delete this.props.name, or Object.defineProperty(this.props, something), or Object.assign(this.props, something)?. if you want to truly cover things for newbies, you may want to include npm init and eslint itself.. The version numbers may vary, but it's important that the eslint version matches the peerDependency version in eslint-plugin-react.. esLintConfig \u2192 eslintConfig, but also that key only applies to package.json. In the far more common .eslintrc (not .eslint.rc) you just put the json object directly.. let's just make an array literal here instead of splitting an awkward multiline string. nit: this would read clearer to me as !a || !b instead of !(a && b). is it a guarantee that node will have openingElement which will have name? or is there any possibility this could throw?. also node 0.10 doesn't have startsWith or endsWith, so we'll want to use .slice(0, 1) and .slice(-1) here. I would be fine with making it stronger, but there's no such thing as \"super caps\". this is no longer necessary, since master now only supports node 4+. so this can be const variable = variableUtil.variablesInScope(context).find(item => item.name === name);. and this. and this can be return propTypes.find(prop => prop.name === name);. we support node 4+ now, so let's use a Set instead of an array here. This is invalid syntax. Do you mean import React, { PropTypes } from 'react'?. That would import a named import called \"React\", which doesn't exist.\nThe syntax I supplied is the correct one.. this is const { React, PropTypes } = require('react'); which is invalid - React.React isn't a thing.. this seems like it's removing the old schema, which makes it a breaking change - the idea would be to allow all existing configuration possibilities to continue to work, but provide an alternative that people could migrate to.\nSpecifically, this also means that (separate from bugfixes) zero existing tests should be modified, and should all continue to pass.. can we keep this test case as well?. Now that we support node 4+, all these can just be parserOptions (only the new examples; we'll change all the rest in their own commit). Sure, that's fine, I suppose.. good call, i didn't realize it was duplicated. i'm not familiar with the \"definitions\" rule schema key - what version of eslint added this?. It seems like some of the <App foo={bar} /> tests have been removed - for any code pattern, we need explicit tests for a) no options, b) all explicit options on the old (current) schema, c) all explicit options on the new schema, d) autofixes. Yes please :-) when existing test cases are utterly untouched, it adds confidence that a change is not breaking.. Wow, awesome. I had no idea.. maybe instead of enumerating \"four\", we should just say \"These are the possible configurations:\" and then nobody needs to update it in the future?. This is the default value.. const. Will node.parent always have a type property that's a string or an array?. Please also add identical test cases that use the default parser.. Rather than add a string option, let's add this to the options object, for future extensibility.. ftr tho, this shouldn't ever happen, since straight quotes are typographically incorrect - and this would be a bug in the highlighter. I'm not sure this is worth mentioning.. would this not be true?. Please add (react/no-static-typos) on this line.. This shouldn't be fixable - it's not safe to do so.\nIt's a great rule to prevent people doing this by accident - but autofixing these can cause actual behavior changes in production. eslint core's policy is to never allow autofixes that could break code.. what about childContextTypes?. It still has many purposes; but dealing with quotes isn't one of them imo :-)\nFine to leave the text as-is.. It's not that it has to just be stylistic - but generally eslint errs on the side of caution to avoid breaking code.\nIf this rule warns, it'll only be for two reasons: 1) a typo, which is totally autofixable - and 2) a badly but intentionally chosen name, and the user needs to know to manually rename it.. These tests don't need an ecmaVersion specified, nor rest/spread enabled. Since we have node 4+ now, let's just use Object.keys().forEach - then no guard is needed.. In that case I'd prefer to rewrite it to use .filter in lieu of the continues, and .find in lieu of the breaks and returns.\nHowever, to keep this PR small, we can stick with this guard (which should have been here in the first place).. //google.com/foo is an external link - please add a test case ensuring that protocol-less URLs still treated as external.. s/var/const/g. I agree; we should only use const and let.\nRegardless, we shouldn't add new instances of var - a mix is preferable to that.\nI'd prefer manual modification to a codemod.. I'm not sure why this line needs to be changed; assignment isn't mutation.. Might be simpler to invert the if and put the report inside. s/on/in, and add a period at the end. Also lets backtick class. I feel like this shouldn't be valid; altho maybe this rule shouldn't be handling it.. let's use let here.. I'm not sure this is accurate unless it can fix all errors that the rule warns on.. i kind of feel like the prior form was more readable; a bunch of \"nots\" seems easier to understand to me than a bunch of positives, negated. We should probably also add \", which includes arrow functions assigned in class properties\" or something similar.. It most certainly is not the recommended approach.\nThat said, it does avoid the creation of functions in the render path, so you're right that it doesn't belong here.. The recommended approach is a constructor-bound instance method, so the  meat of the function can be optimized. . I don't have a resource to point to; I just mean that the bulk of the code can live on a shared prototype method, that is thus invoked many times (and shared across all instances), so that can get optimized - then the only part that's \"one per instance\" is the bind-proxy. With the class property approach, your function (which has, say, 6 lines of code) gets recreated for every instance, so the engine can't optimize those 6 lines - since every instance has a distinct copy of those 6 lines of code.. all these vars should probably be let/const. Why does the fixer output an arrow function for SFCs?\nThis will run afoul of, for example, the airbnb style guide, which only allows named functions as SFCs. If we instead defaulted to a normal named function here, other rules would be able to convert it to an SFC.\nAlso, converting from a class declaration to an expression isn't always a safe change; the only safe replacement for class is a function declaration (which will be an expression when in expression position).. This probably shouldn't include the semicolon either, unless the original text did. arrays don't have .includes until node 6; we need to use indexOf or https://npmjs.com/array-includes here.. That seems like something another rule should be handling.. I'd say we might want to deprecate them (string options are horrible for extensibility), but there's not really any pressing need to.. sure, why not. i think this would be better as an array of unique strings - that way multiples could be provided.\nLet's also rename it to \"propWrapperFunctions\". please add uniqueItems: true so that jsonschema enforces uniqueness. square brackets should not have spaces inside them, please remove those. this line isn't needed; please remove. Indeed, it should, but since that's the style used a few lines down in the same file, I'd hope it'd be apparent :-). let's make an initial schema that's extensible; in other words, { \"max\": <number> } instead of just the number.. in new code, let's use const/let over var. let's also include the current max length in the message, like max-len does.. let's set this to 6, since we shouldn't need ES2017 for this rule. similarly, this feature isn't required here. that's a really great point. this should definitely be converted to a Set.. var propWrapperFunctions = new Set(configuration.propWrapperFunctions || []);. PropTypes.bool - .boolean isn't a thing (same throughout). regex or RegExp. We should be using Components.detect in all our rules; is there a reason this paragraph needs to exist?. const?. i think all the PropType test cases are invalid - s/boolean/bool/g.. Yeah, this seems more like a project-level thing, not a rule-level thing.. what's the default for this option?. i'm really really not a fan of user-supplied regexes, and passing unsanitized input into new RegExp can definitely cause catastrophic backtracking and other malicious regexes to be invoked.\nCan we simplify this somehow, perhaps requiring a list of prefixes?. usually we just do \u203cx instead of Boolean(x), nbd tho. this can probably be 6/2015, yes?. i don't think we're using this feature in these tests. Since if not, the rule does nothing by default, yes.\nThe ideal scenario is that nobody ever needs to write a regex, except for the minority edge cases.. Can we put the default here, in the schema, and use minLength: 1 to avoid the empty string?. Similarly, can this default go in the schema instead?. Let's add uniqueItems: true and minItems: 1. i guess you can't have a default array in jsonschema.\nin that case, a ? a : b should always be a || b :-). Let's avoid for..in; can we use Object.keys().forEach here instead?. I'd prefer to not even allow this as an option, if possible - meaning, to only have the object schema.. const - or a function declaration. please use the has package rather than in, to avoid traversing the prototype chain.. const. these chained lines should be indented one level further in. const. both of these should be const. const. const. const\nAlso, what happens if I pass a value of 0? This looks like it will always set 0 to 3. Please add some tests for values of 0 - ie, no nesting allowed.. const. \"gotten\" seems like an odd word choice; maybe \"found\"?. To me, \"exceptions\" means \"these things are not checked\" - the semantic here is, everything is forced to something: some things are forced to always, and some to never.. Why isn't zero a valid value? I'd think prohibiting nesting entirely is a totally valid option.. i think this should be made to work with 0.. If that's true, then a max of 1 would permit <div /> but forbid <div><span /><div>; is that what the current PR's docs and test cases indicate?. Specifically, I want it to be configurable so I can forbid any nesting whatsoever - a depth of 0 means \"flat\", so in fact <div /> has a depth of zero.. will context.settings always exist and be an object?. this should probably be node.arguments.length > 0?. in v8, accessing an arguments index that's greater than length deoptimizes, so it'd be a performance issue - altho in this case it's not an arguments object, so it's probably fine :-). if they're both strings, this can be return a.localeCompare(b);. autofixers are supposed to always be safe; it's not safe to automatically put spread props on the end because that might change the override order.\nIn other words, any element that has spread props is simply not safely autofixable - so if we still want to autofix situations without spread props, then we shouldn't be making any changes to elements with spread props.. for example, this might be totally valid, because this.props might contain b and/or a, and the dev might want to override their values.. sorry if i wasn't clear - i'm afraid this is also unsafe. Any element with a spread prop can not be touched in any way that would alter overrides of the spread object. So, in <App a=\"c\" b=\"b\" {...this.props} c=\"a\" d=\"d\" />, you could sort the list of [a, b], and the list of [c, d] - but a and b must always remain before ...this.props, and c and c must always remain after it.\nOnly a human has the knowledge to safely alter this, and that can only be done manually.. I don't think a fixer is safe here; there's no way to know if it's intentional or not.. +1 on all 3 points, nice catch. Even if we're planning on extending it in the future but not yet, then we should rename the rule to be more generic.. exec mutates; test doesn't - test might be better.. Sounds great!. Leaving a reminder to myself later to change this to .find. This could really just be .map(Number). is babel-eslint needed for all these test cases? It'd be ideal to use the default parser whenever possible.. hm, i'm kind of confused - what's the typeof node.value if it's an object, or a function? Can you add some test cases for that?. So when would the typeof not be \"string\"?. Interesting. Arrays and objects and regexes and functions are all literals too, so it's weird they wouldn't show up. Thanks for explaining.. this change doesn't seem like an improvement; it increases the number of mutations.. The test case specifically had React.PropTypes, and React.createClass - are these not necessary to trigger the bug?. I see what you mean. Could you point to the other lines you'd need an || [] on, if you reverted these lines?. Why this change?. what in this test needs babel-eslint?. similarly here, what in this test needs babel-eslint? this test seems like it'd work with ES6.. jsx spread works in ES6 or above in the default parser with parserOptions: { jsx: true } - there's definitely no need for babel-eslint for it.. There's no need to use babel-eslint for spread props; so let's revert this change and keep it on the default parser.. I'd prefer to avoid for..of in favor of .forEach or .map. nothing about this test case should require babel-eslint; can it use the default parser instead?. Are there any tests for this change, btw?. I'm a bit confused\u2026 {...props} in a child context isn't anything; that shouldn't work. Spreading is a JSX attribute thing, and a JS iterable thing, and a JS object thing - but not a child thing.. <span>{...props}</span> is invalid jsx - if babel-eslint parses it, it's a bug in babel-eslint.. function. I'm ambivalent; my general preference is to avoid mutations, but I don't feel super strongly about it. I'll leave it up to you :-). In this case, the duplicated test isn't a duplicate; one imports React, and the other doesn't, and it's intentional to check both.. It's not the same test; I see 4 different variations: arrow, non-arrow, and destructured, and non-destructured.. It seems super weird to me that getParentComponent infers the node rather than taking it as an argument (not your code ofc, just thought I'd comment). This test implies that Comp1's prop1 prop should be marked as used, because Comp2 references its propType; but in fact I think it shouldn't - could you move this test to be invalid instead of just deleting it?. I think that it ideally should support this use case, but our mechanism of detecting components may make it difficult.. babel-eslint isn't needed for any of these new tests; let's please prefer the default parser whenever possible.. tl;dr: if they don't generate a syntax error with the default parser, they don't need babel-eslint :-)\nGenerally tho, the default parser supports everything that's actually in JS. Things that aren't in JS (or aren't yet), like class properties, require babel-eslint.. keeping the tests is great! i just want them using the default parser :-). sure, that seems reasonable too.. js\nvar getterIndex = methodsOrder.indexOf('getters');\nif (getterIndex > 0) { indexes.push(getterIndex); }. js\nvar setterIndex = methodsOrder.indexOf('setters');\nif (setterIndex > 0) { indexes.push(setterIndex); }. Thanks for cleaning these others up too :-) I didn't realize you were following an existing pattern.. s/pops/props\ncan this function be defined at file level, so it doesn't need to be recreated every time set is run?. T3stComp0nent isn't in PascalCase; this specific example should fail.. shouldn't this example only pass when skipShapeProps is false, but fail when it's true?\nIf so, could we add an explicit config option?. ok so this should either mean \"name and age and greeting\", or \"name and age, or greeting\" - in the former case, \"age\" is missing, in the latter case, \"greeting\" and \"name\" are mutually exclusive. Shouldn't this be an error?. const { props } = this;?. const { aProp } = this.props;. just to clarify; this example should work identically both with and without skipShapeProps?. (fwiw i think this was fine to leave as a normal function). why would this suddenly start giving two errors?. We should try to avoid generating the extra error.. please add output: '<App a b />'. Please add output: <App key={2} a b /> (assuming that's the expected output). this should probably still specify the default?. also here?. any particular reason to change these from arrows?. also here?. Please spell out \"constructors\" - letters don't cost money, but confusing abbreviations can.. can you also (just in case) add a test with export const propTypes = \u2026 to this rule too?. <3. Hopefully nothing; I'm just making sure that an export declaration works just as well as a variable declaration :-). hmm - with reservedFirst tho, the expected output should be <App dangerouslySetInnerHTML={{__html: \"EPR\"}} key={2} b />, no?. ahhhh true! good call :-) could you add an \"e\" prop as well, so it's clear that it's being sorted as a regular property?. these wrapping parens aren't necessary. Object.keys(require('prop-types'))?. This is good advice when the semantic is \"increment\", but referencing this.state inside a setState call doesn't necessarily mean that the dev doesn't want s \"snapshot\".\nWhat happens with:\njs\nconst { value } = this.state;\nthis.setState({ value: value + 1 });\n?\nThis is conceptually the same code, but it might be a useful way for the author to indicate that this is an intentional ordering.. What about changing the places calling this method to be \":exit\"?. so, first - i think rather than squashing the quote style into the string value, this should be an object.\nHowever, quote style is something that another rule should handle. This one should just pick a default - i'd go with double quotes - and let the jsx-quotes rule handle correcting it.. i think we should override the linting rule rather than avoid using \"FIXME\". this might be the wrong rule name. also here. let's use multiple props in this example so we can show that it allows either single or double quotes (one of each). good call; this definitely should be supported.. the third might be context. Since we've checked this syntax in 0.52, it must be a breaking change to default to 0.53.\nMy strong preference is to initially release a semver-minor with the default as 0.52, and then later release a semver-major that bumps the default to Flow latest.. This isn't very clear; \"begin with\" only makes sense when followed by a string. If it's a regex (which it shouldn't be) then it'd need something like \"match pattern\".\nWhat about \"Prop key for ${propValue} (matches pattern /^(${eventHandlerPropRegex}|ref)/) must begin with ${eventHandlerPropPrefix}\"? (don't forget the ref part). Could we also add a test that makes ++ invalid inside the constructor?. ?. why do these tests need to be removed?. please use >= 0 here rather than relying on implicit truthiness checks. doesn't this mean that if it's not specified, it throws?. I don't see why it should be legal; it's mutating this.state after it's assigned.. should this example use double quotes consistently?. should both of these examples use the same quote style?. these should probably both use the same kind of quotes. these should probably both use the same kind of quotes. please use the Oxford comma - in this case, after \"quotes\". is it expected that the quote style is unchanged for prop?. Fair enough.. Sorry if I wasn't clear; when no version is specified, I want the logic to be \"guess which flowVersion it is\" - specifying a flow version can't be required, or else it's a very large breaking change.. Ah, i see what you mean.\nI guess that's OK, but i feel like maybe returning null here would be easier to deal with than try/catch.. For semver-minor PRs, it makes me happier when tests are only added :-). return string.replace(/^([\"']).*($1)$/, '') or similar?. why would we want to strip all prefixes? only + and - exist, as far as I know.. can this repeated function be extracted out into a shared file?. I'd prefer to have explicit support; I'd rather it not silently risk doing the wrong thing when an unanticipated prefix exists.\nI definitely don't want the plugin to crash when a new prefix is found - but i might want it to warn on the prop.. \"_\" doesn't make anything private; this change makes them fully public. Let's revert these back to functions so that the available prototype methods don't change.. yes please. this is broken; you're now only exporting an object with detect, instead of the entire Components constructor.\nI think you want module.exports = Object.assign(Components, { detect(rule) { \u2026 } });. new require('eslint-plugin-react/util/Components') would stop working, however, and that's part of the API.. I'd say when it's time to make a major bump, this file should just export the detect function directly, if that's what we want.. Can you add a test case where a defaultProp is omitted for a ? prop type, and there's no error? Alternatively, you could just remove the defaultProp for \"bar\" here.. i'm not seeing anything that adds to this set?\nIf it otherwise crashes because this doesn't exist; then let's initialize it in every case.. this should probably be \"prop\" - in jsx, elements have props, and \"attributes\" are something HTML elements have (which jsx isn't). why does this option need to change?. why does this option need to change?. Does that mean that \"declaration: true\" now doesn't check as much as it used to? That would make this a breaking change.. Similarly, does that mean that \"assignment: true\" now doesn't check as much as it used to? That would make this a breaking change.. Is there any way we could avoid making it breaking?\nLike if condition is absent, it uses the old behavior, but if it's present (true or false) then it uses the new behavior?. Yes, definitely we'd want to separate that in the next major - but for now, we'd be able to add these new options as semver-minor.. rather than storing across files and clearing; we may want to instead assign classInfo.aliases = new Set() at program entry?. i can't decide if this style, or early-returning each place this var is assigned, is better. since this is reducing to a boolean, could it use some or every, and that way it will bail early?. instead of reusing types here, can we use multiple vars and use const?. We could rename the function instead :-). What is the typeof guarding against here? This allows null, for example.. Can these two functions live somewhere they can be shared across the rules that currently duplicate them?. i don't see how this can safely be considered a mutation; list could be anything with a \"push\" method, there's no way to know it's an array.. If we're going to support builtins like Object.assign and Object.defineProperty (where's Object.defineProperties btw), we'd need to support a way to allow this to be extensible - in other words, to allow devs to specify a custom function name, and which argument(s) are mutated as well.\nI don't think we should support functions in this way in the initial version of the rule.. please ensure that all examples properly use semicolons.. although i don't think we can safely check for any of these, you're also missing the other array mutator methods: splice, reverse, sort, fill, copyWithin.. js\nif (!propsNodes[id]) {\n  propsNodes[id] = node;\n}\nreturn propsNodes[id];. what happens if the range only has one item, and that item is toString?. getId can return a falsy value - that would get coerced to a string here, and probably provide undesired results.. Fair, but since it's being used as an object key, without any prefix, there's still the possibility that it could conflict with an Object.prototype key.. I think putting it behind an option is a great compromise - what about two booleans, and two lists of 1) instance methods, and 2) static methods? That way the instance method list could default to ARRAY_MUTATIONS, and the static method list could default to ['Object.assign', 'Object.defineProperties', 'Object.defineProperty'] - and both booleans would default to false.\nThat way most people wouldn't touch the lists at all, they'd just enable the booleans - but those who wanted to update the lists could do so.. Yes, I'm just not that familiar with what the AST could return. If range always contains > 1 item, then this is totally safe when node is truthy.. this might be helpful to move to a helper method, so that this function's code can be simpler.. is mutation an array? If not, the wrapping brackets aren't needed.. Can we make component.propMutations always start out an empty array, so we don't need this check?. Gotcha; makes sense.. I don't imagine that an empty array will slow things down much, compared the the speedup and clarity of not having to ever check for truthiness.. looks like your codemod removed a bunch of comments. please restore them all. Boolean options should always default to false, so that absence and false are equivalent - this implies that anyone who hasn't passed an explicit true here, will get the warnings.\nRegardless of what you want the default behavior to be, the booleans should be named such that they can default to false.\nSeparately, why do you think this behavior should be on by default, especially since there's caveats?. I don't think this should be restricted to Object statics - there's Reflect statics that mutate too, and users might provide a single identifier (like lodash.assign) that they'd want to be warned on as well.. Defaults need to be safe; the instance methods in particular are not safe by default.\nIf the chance is nonzero, it's not an acceptable amount.\nI'd be fine defaulting the static methods to be enabled, because as you say, the only way that'd be a problem is if someone intentionally broke the environment.. That was my intention with allowing the option - I should be able to put any foo.bar string in there and have it work. Specifically, I want it to work for import assign from 'object.assign'; assign(), and import lodash from 'lodash'; lodash.assign().. We should support both eslint < v4.7, and >= v4.7, and this code should be made to fail as expected in both ranges.. Until other maintainers have weighed in, my vote remains that instance method mutations (which is a better name than \"array method\", and I'd like that changed also) are not safe to enable by default.\nAnything less than 100% correct isn't a safe default.. Instead of Object and Reflect statics, this really needs to just be \"statics\" - all of them should appear in the same list, and I should be able to define other static methods on other objects (like eslint's no-restricted-properties rule) and have it work.. To clarify; I think that the code warning or not warning should behave identically in 4.6 and 4.7 - I don't really care which we pick, as long as it doesn't change.\nIf that's not possible, then that will mean 4.7 was a breaking change, and eslint core needs to revert something so that it again works as expected.. eslint core handles it with { object: 'Object', property: 'assign', message: 'some custom message' } - I'm not sure why we couldn't handle it the same way (as no-restricted-properties). { property: 'lodash' } is used in eslint core to refer to the bare identifier.. in that case, we need to explicitly ignore it in eslint ^4.7.. Yes, but I don't think there's much of a way around that, since adding awareness of imports/requires would be a bit impractical.. I think all the lodash/underscore methods should not be included by default; that's presuming that more people use those libs than do.\nTests should certainly ensure these would work, ofc :-). presumably we'd want the default to be \"always\" on all component types; releasing the rule with only SFC support means we couldn't default class and createClass components to \"always\" without a major release. s/Should/Must/g?. it's not that you should use it, it's that you must because of the rule. releasing only SFC support would be a minor.\nLater releasing class-based component supported, defaulted to \"ignore\", would also be a minor.\nHowever, later releasing class-based component supported, defaulted to \"always\", would be a major.\nThere's not a problem per se about releasing a major release, but it's always best to minimize breaking changes.\nMy use case for non-SFC components is that I want all this.props, this.state, and this.context properties destructured at the top of every function that uses them (that also includes context in SFCs).\nIt would be great if one rule could handle all of these cases - if not, I'd expect this rule to only ever handle SFCs (props and context), and a new rule to be added for \"inside non-SFC functions\".. i think class is probably the best name, unfortunately.\nI agree ignoring next/prev props is fine for now, in SFCs, it'd be props and context, and in class-based and createClass components, it'd be this.props and this.state and this.context.. i think the word \"must\" here is better than \"should\". can we also handle createClassComponents here?. most of these test cases don't need babel-eslint; can we use the default parser wherever possible?. this should probably mention createClass components as well. also here. s/consostent/consistent\nalso, please use an Oxford comma after state. let's make sure all propTypes and defaultProps mentions are surrounded by backticks.\nAlso, \"to be able to find necessary declarations easier at a later time\" and \"becomes a burden to maintain\". Can you elaborate about the spread attribute?\nI would expect that sorts do not cross a spread boundary, but d, a, ...obj, c, b would be sorted into a, d, ...obj, b, c. should we not keep this test against \"the default\"?. should we not keep this test against \"the default\"?. Yes, I think they should be separate options - i think it'd be fine to add it in a separate PR, but I don't think this should be merged with class handling both :-/. For one, createClass components are often legacy, and legacy things need different rules. Mainly though, all three are actually distinct constructs - createClass components have different behavior than class-based components, in particular around auto-binding all the \"instance\" methods;\nI think that it'd be fine to allow a string or an object option, where the string option is a single setting for all components - but the object option is intended to allow fine-grained control, so it's supposed to be not monolithic by design.. consostent \u2192 consistent, and please use an Oxford comma after \"state\". If the lack of whitespace before \"foo\" is important, then it's just as important after \"foo\" - meaning, this example can't be autofixed.\nHowever,\njsx\n<div>\n  <span /> foo <input />\n</div>\ndefinitely should become:\njsx\n<div>\n  <span />\n  foo\n  <input />\n</div>. Sure, that'd be great!\nAs long as the autofix is not changing the resulting whitespace that's rendered, we're good.. whoops, thanks - want to make a PR to clean it up? :-D. this can cause issues due to rules that strip trailing spaces; i think this needs to remain as foo {\"bar\"}, untouched.. this trailing space should be removed, if the space on the next line is being explicitly preserved?. also here?. right - but the jsx parser doesn't ignore the space in between foo {\"bar\" } - so to make it the same, with an autofix, you'd need:\njsx\nfoo\n{' '}\n{'bar'}. i agree that no-trailing-spaces could do the cleanup, but it seems easy enough to .trim() any newly autofixed lines :-). does this work independent of what \"props\" is called?. I think it's important that it handles that from the get-go.. imo the indentation of test cases in a non-indentation rule isn't that important, as long as it's readable.. let's also add non-warning patterns (and test cases) for destructured props/context. nit: MemberExpression(node) {. does isReturningJSX return true when something returns null?\nAlso, in React 16, components can return strings or arrays, so I'm not sure this detection will be reliable moving forward.\n\"React 16 fragments\" will probably be something we have to solve in a separate PR anyways tho, so no need to address that now (i filed #1510). can you also add a test case for value({options, value, validate}) {?. what would the output be if you wanted this autofixed?. why is this an error? are you going to keep a list of inline-by-default elements? What about when the display is changed via css?. awesome, i was going to ask about contextTypes :-). Let's also add a test case with Foo.defaultProps = {}, that doesn't use the babel-eslint parser (also this test case shouldn't need it either). If you felt like adding them here, that'd be super awesome :-D. Unless there's already a package that keeps the list of inline elements up to date, i'd be hesitant to hardcode it in this package.. The real ideal would be if we could use React's list directly.. i think we can remove all these extra spaces; it's not aligned anyways. also here. This is basic eslint documentation; individual rule docs don't tend to explain this.. Not a blocker then, altho i don\u2019t think any rules should have this.. is this necessarily equivalent? context.getScope() won't be the same as node.parent.parent, necessarily.. Did react remove support for this property? I\u2019m reasonably sure it was supported at the time this list was created. What version dropped support for it?\nThe lowercase one is just a generic custom property name; there\u2019s no need to include it in the list at all.. In that case, it should be present unless the React version declared in the settings is 16.1+.. which test case exposes this missing inConstructor check?. also here, which test case exposes the need for this check?. also here. also, which test cases warrant this change from just checking willReceiveProps, to checking all the lifecycle methods?. could you add a comment here that links to the source of this list?. should this be made into a Set instead?. !node.params.length is node.params.length === 0, so this is now redundant with the \"< 2\" comparison. let's remove the former.. This is a great default, but there's also import { forbidExtraProps } from 'airbnb-prop-types', and I'm sure others might have a similar package. Can this be made configurable?. lol whoops, good catch. i'll fix.. this should be set to false. this array should be forced to be unique. these items should have a minLength of 1. this should be reverted; individuals' IDEs' clutter shouldn't pollute upstream repos. You can add this to your global gitignore tho!. sorry, to clarify: 0 items in the array is OK, but an empty string should not be.. this is definitely necessary, and will not work without it being present somewhere (note that if using a shared config, like the airbnb config, it might be declaring this for you). gotcha, thanks.. We should probably put this higher up, and change \"can\" to \"should\" - the react version in particular is pretty important.. @there's already an eslint core rule to cover this: no-useless-constructor.\nOnce class properties are stage 4, and actually in the language, there will doubtless be an eslint rule to prefer-class-properties, which would then reduce the constructor down to being useless, which that core rule would then eliminate.\nIn other words, I don't think there's any benefit to having a React-specific rule for an already-half-solved problem that applies to the entire language.\n(Additionally, you should have a constructor if you're doing anything in it that can't be done with class properties - and there are definitely use cases for that). i think this one needs to be )}> on the next line. i'm concerned about this approach; there's other things that have a .map method. How can we know this is an array?. this is a good fix; but this should be able to go in a separate PR. In the case of the prop-types rule, names isn't inside a map, so it should be caught regardless.. Right - I'm saying that the bug fix for prop-types can be to consider these return statements, even if it ignores the code inside the .map callback.. I'm thinking that the prop-types issue can be solved without having to guess that .map is \"array map\".\nThen separately, this rule may be able to avoid making the same guess.. Is the wording of this sentence consistent with the other rules?. I don't think eslint pays attention to default here, fwiw.\nAlso, could we add minLength: 1? nobody should need to configure an empty string. Let's also include a test case that has const { toArray } = Children, and another that has something called toArray and Children that aren't imported from React.. I think if we're making this configurable, then instead of using a template literal to interpolate propName and config.rule, we should use eslint's built-in string templating - that way the configurable message can use placeholders for those two things.. Yes, definitely.. this shouldn't need babel-eslint; can you either add a duplicate test case (one using the default parser, and one using babel-eslint), or, remove the parser line and only test using the default parser?. you've made this have 3 spaces of indentation from A.propTypes =; not that it really matters in tests, but can you revert the extra spaces?. good fix here. why this change?. why this change?. isDestucturedVariableDeclaration \u2192 isDestructuredVariableDeclaration. let's be a bit stricter here and check for typeof === 'function'? Also, this will include Object.prototype methods.\nAlso, what about when a method is shimmed/polyfilled onto Array.prototype in their code, but not in the node process that eslint is running in? I'm not sure this is a safe way to check it.. same question here about typeof. !config.links || node.parent.name.name !== 'a'?. hm, i'm not really sure. i'm not a fan of ternaries that select booleans, but as-is might be more readable in this case.. This shouldn\u2019t work. Passing around the entire props object is a massive antipattern anyways, but in this case, there\u2019s no guarantee that nobody isnt calling it at runtime with \u201cnot a props object\u201d.\nThe correct and only solution here is to destructured the props first, and pass individual props into the methods.. this should just be module.exports = docsUrl. Yes. The default needs to be ignore.. this needs to be \"allow\".. Let's make sure to add a test case for this :-). Does this mean that if i do <div {...someRandomThing} /> it will cause props not to be marked as unused, as well?. That should be marked as used because other resolves to the props object. If it doesn't resolve to that, it should not be marked as used.. That's a good question, and I'm not sure. You may need to set up visitors for a bunch of other node types, and keep track of their names and what name they point to?. that's probably a better place to leave it then wrongly marking them as used :-). why is this marked deprecated?. please add another test like this that uses the default parser. same with these 2 tests; please duplicate them so there's 1 for babel-eslint and 1 for the default parser.. is there any chance a MethodDefinition could have a node without a value, or a node.value without a params, or a node.value.params without a 0th item?\nit'd be ideal if this was more defensive (like you're already doing below), so the rule doesn't crash.. please add a duplicate test that uses the default parser. are we sure that the node will always have 4 parents?. might as well create this var above the conditional, so it can be reused in there?. Also, rather than checking for AssignmentExpressions, is there a way we could create a visitor for AssignmentExpression instead?. this is a super weird line break; can this all go on one line? (line length limits aren't important). similarly, please revert this back to one line. also here, this should be one line.. typeof seen === 'undefined' please :-) either way, there's no need for void 0 in code that only runs in a node environment.. let's replace this with crossorigin, so that it tests that this is an invalid property?. Good question.\nMaybe we should make a shared utility function isInAssignmentExpression that walks upwards until it finds an AssignmentExpression?. Program, certainly. Not so sure about FunctionExpression.. i think we can collapse the else if and the else together, and just do parent = parent.parent, and let the while condition catch it? (also, maybe null would make more sense than false). this kind of seems like you maybe ran prettier on the output; could you revert all those unrelated changes?. having code: `\\n seems like it achieves that?. Thanks, makes sense :-) rebased, will merge soon.. these new methods should only be checked if the React version pragma from settings is >= 16.3.. This should probably be pluralized; Methods returning JSX should be written as stateless functional components. what about computed methods? like ['foo']() { return <div /> } or [Symbol()]() { return <div />; }?. hm, we should probably change the error message to add \" and be in camelCase\", otherwise this one's pretty confusing. ah yes, good call. This PR is about the no-typos rule; but it has prefer-stateless-function changes. Let's remove all the parts that aren't about no-typos :-). since forEach ignores its return value, this should be an explicit-return arrow function instead.. i'm confused about this - every string that has the same contents is the same string by identity, iow 'abc' === 'abc'. Why do we need == here?. Perhaps there's invisible characters in the strings? When you run into the difference, try comparing .length (altho then == would fail too). All strings in JS that have the same contents are ===.\nSpecifically, == is \"=== after type coercion\", so if they're both typeof \"string\", == and === are identical, by spec.. yep, exactly; implicit return should only be used where the return value matters.. if the test wrongly passes, we should move it to the \"invalid\" section, even if it's commented out for now.. This isn't actually needed, and to be fully correct, it'd be props, context. It's a fine change tho.. this can be return name; now?. In that case, what about constructor(...args) { super(...args); ? that way people copying the example will always forward all args.. should this use .find instead of .filter?. Let's just call this \"message\", but let's also improve the default such that as few people as possible would need/want to customize it.. onCilck \u2192 onClick. probably this whole chain should be rewritten for clarity; at the least, let's use parens so as to not mix && and || :-). I think that this if condition can fit on one line :-). aligned with what? opening tag, closing tag, first used prop name, tag name, etc?. Yes, I think it's very important to have an automated fixer for as many things as possible.. Seems like it's aligned with the first prop?\nWhat happens with:\njsx\n<C a b c\n   d\n     e\n       f\n/>\nWhich is properly aligned, d, e, or f?. I think that this rule should only cover prop indentation. I'm not sure what your specific question is tho, could you provide a code example?. let's do node && node.parent here just to be sure it won't crash :-). Yes, that's not prop indentation - indentation is only \"start of line + whitespace + thing\". let's make sure this list is unique. let's remove the redundant parens on the ternary conditionals here and below. This should be added to no-deprecated; since that rule already deals with methods, including lifecycle methods.. There may not be an existing example, but the rule still deals with any depreciations - otherwise it\u2019d be called no-deprecated-static or something :-). can we supply messages in all these three, that ideally suggest replacements and link to the react docs on the deprecation?. good change. can all these tests be migrated to use the errorMessage helper as well?. hmm, i'm actually not comfortable recommending the constructor here - side-effecting things should never go in a constructor, and there's still some use cases for componentWillMount that aren't covered by \"constructor\" or \"getDerivedStateFromProps\".\nI wonder if maybe we should also add an \"ignore\" array of method names; ie so I can configure the rule to ignore componentWillMount but warn on the rest.. I guess the unsafe one; but it'd still probably be a good idea to add an ignore list.. is the loc no longer required because eslint gets it off the node?. i'm not sure what this rule is, but please remove it from this PR :-). ahh, ok. yes, thanks, a separate PR for it would be great.. A separate issue for the \"UNSAFE_\" methods would be ideal.. this line should be de-indented. please revert all unrelated formatting changes in this PR. Put didCatch directly before WillUnmount.. specifying this by default makes this a breaking change; please revert that piece.. Please add a test case that parses with the default parser and also covers all the new lifecycle methods.. class Foo {} Foo.getDerivedStateFromProps = \u2026 should work fine outside the class body. ah true. you could do static getDerivedStateFromProps() { } since it's a method tho?. you may need to specify the ecmaVersion as 2015 or higher, which is fine. this could technically be a breaking change; is there a reason to swap the order of state and getInitialState?. Makes perfect sense :-) I didn't notice this was just the docs.. what if node.value.object is falsy?. Should we add something about doing it safely, so the HOC code path works both with and without propTypes present?. the default parser should be sufficient here; please either add a duplicate test (one using default, one using babel-eslint) or, since this is all ES6 syntax, just have the one using the default parser.. please revert this; specific IDE files should go in your personal global gitignore, and not clutter every repo you use.. we should be able to make a Set on line 38, so this doesn't need to be O(n). this can be stored prior to the \"if\", so we don't have to extract it multiple times.. Because that's only one of the use cases for componentWillReceiveProps, so it's not always the right recommendation.. So that a human can look at it and make a human judgement about which to use.. I think that no-deprecated can and will warn against them, but not until every use case of them has a replacement (this is not currently the case).. Let\u2019s extract the first argument in a variable higher up so we don\u2019t have to repeat the lookup.. Modes are not a conceptual pattern I'd want to encourage, \"strict\" or otherwise.\nI don't think a \"no-unsafe\" rule makes sense when for users of React < 16, it is perfectly safe, and for users of React >= 17, the methods won't work at all.\nThe purpose of these deprecations from React is to encourage people to migrate to replacements as early as possible, so the breaking change in v17 that removes the old ones will be as painless as possible. When React 17 comes out, we'll certainly lint against invalid lifecycle methods, including newly-invalid ones - but I'm not sure how much value we'd get out of warnings in React 16 outside of no-deprecated.. In that case, a separate \"no-unsafe\" rule, that only focuses on UNSAFE_ methods, seems reasonable.. this test case doesn't require babel-eslint, let's remove this line. i think it's fine to have different messages, but \"static class property\" is a conceptual term prior to the feature landing in the language, so i think that'd be reasonable.. the message should explain why, and link to more info. these tests should include position information, so that we can test that part as well. This seems like a check we could do earlier, and prevent even returning any visitors in the first place?. enabling new rules in an exported config is a semver-major change; please set this to 0 for now.. ditto. sorry for being unclear :-) now we\u2019re not testing eslint 4. Can you change al the \u201cnext\u201ds to \u201c4\u201ds?. let\u2019s remove this line. This seems like it could return immediately if true, cleaning up the rest of the function . does this have to be a switch? it's so much more verbose than if/elses would be.. could this be a .map instead of a for loop?. this seems like a list of lifecycle methods that should be a shared constant array, available in multiple rules. i think we can use // eslint-disable-next-line no-console here. i think we should be forcing charset; HTML also supports CHARSET and cHaRsEt, but lowercase is the very dominant convention.. hmm, that is true. I suppose it\u2019s a slight overreach of this rule to force it.. no need, i think this makes sense as-is. hm, why is this unused exactly?\nCould this change be done in a separate commit/PR?. I definitely disagree; I consider switch to almost always be less readable than an alternative, and certainly less maintainable. It'd be great to go with all if/else.. it'd be great to at least make it separate commits, even if it stays in this PR :-). In JavaScript, in fact, the popular opinion is that switch is terrible and should be avoided. A random Stack Overflow post that isn't JavaScript-specific isn't particularly relevant to JavaScript.\n\nDone.\n\nThanks!. I think the UNSAFE_ methods should only be included in this array when the React version in settings is 16.3+ - same with gDSFP, gSBU, and cDC (for 16.0+). Since we're talking about a JS project, the context \"in JavaScript\" should be assumed. I offer no opinion here on use of switch in languages irrelevant to this repository (namely, everything that's not JavaScript).\nGoogle, as well as common style guides (jslint, for example, since the 90s; airbnb's; etc), can all be consulted for information on that.\n - https://javascriptweblog.wordpress.com/2010/03/08/caseagainstswitch/\n - https://ericleads.wordpress.com/2012/12/11/switch-case-considered-harmful/\n - https://hackernoon.com/rethinking-javascript-eliminate-the-switch-statement-for-better-code-5c81c044716d\n - https://medium.com/tandemly/whats-wrong-with-the-switch-statement-in-javascript-c560e8ea3c0b\n - https://codeburst.io/alternative-to-javascripts-switch-statement-with-a-functional-twist-3f572787ba1c\netc.. If someone is using React 15, React 16 lifecycle methods should not be sorted in the lifecycle group - because for them, they aren't lifecycle methods. Similarly, if someone is using React 17, where componentWillMount theoretically does not exist, cWM should not be sorted in the lifecycle group - because for them, it's not a lifecycle method.. ah lol, you're right about jslint, i misremembered.\nEither way, avoiding switch statements is still a best practice (in JavaScript, obviously).. i guess i'm confused why we need a separate list of lifecycle methods, if this is just \"the user's config\". should this not fall down to line 200?. Hmm.\nLet's keep this as-is; thanks for your explanation.. includes is not available on node 4; please use the array-includes package instead of relying on the native method.. array literals, and object literals, should probably have separate controls. does this need a jsx- prefix? couldn't it also apply to React.createElement?. for DOM components sure, but i meant, i should be able to configure this rule to only warn on object literals, or to only warn on array literals.. I think it should handle dots, yes - and if bracket notation is supported, that too (but i don\u2019t think it is). To clarify; it should handle any number of nested member expressions.. This test has been eaten by a grue.. no space after the function name. This sorting function should probably be defined at file level, since it\u2019s pure?. please use slice over substring/substr. does isShapeProp ensure that the value has a non-empty arguments? What about PropTypes.shape()?. nbd but .slice() works too. please use slice over substr. I'm a bit confused here; how can the linter statically know that there's no bar = foo defined in the class or the constructor?. If you have a component that doesn't reference props or context, then there's other better mechanisms for anything that hangs off of this - so the rule should warn on it, and you should refactor to use an SFC.. good catch, yes.. let's say this instead: when true, and passing a function as children, it must be in prop position and not child position.. what about generators or async functions? is there a more generic way to catch all functions?. awesome, thanks. maybe test cases with these would be good tho :-D. when set to \u201cnever\u201d, this should still apply - you could maybe have foo = function () { const { a } = this.props; }.call(this), or when do expressions land, you could have foo = do { const { a } = this.props; a; }. shouldn't https://github.com/yannickcr/eslint-plugin-react/pull/1909/files#diff-d73ce54079fb0715f60db27176a09fb6R135 also be updated?. this should use https://npmjs.com/object.values for back compat with older nodes.. also here. it'd be really nice if eslint exposed some kind of \"is function\" helper :-/ but lacking that, should we have one ourselves?. this should probably use object spread?. is there a reason the options would differ across rules? if not, maybe it makes more sense to put these in \"settings\"?. new Set takes null and undefined quietly, so i'm not sure the || [] is needed.. is there another way to write this function so it doesn't use arguments?. not a huge deal, but it'd be great to avoid a switch statement. oh right, if we're not using babel here then we have to stick to Object.assign. an alternative is creating multiple functions rather than overloading this one?. if/else, or a map, yes. they don't suffer from unintentional fallthrough.. I think this kind of change could be peeled off into a separate pr, and landed first?. I think we could consider it a bug that the rule missed it previously.. Let's try to add a test case that would fail here.. Let's try to add a test case that would fail here.. for..in should be avoided; can this use normal array iteration methods?. this doesn't need to be two concat calls, it can be arr1.concat(arr2, arr3). let's use the object.fromentries package here.. please use slice, never substring. I think this can be changed to:\njs\nif (node.key && node.key.value) {\n  return node.key.value;\n}\nreturn sourceCode.getText(node.key || node.argument);. Yes, precisely that, but also because it doesn't support negative indices, and because using string slice has the same API as array slice, so it's more intuitive.. this should probably set warnedForMissingVersion = true as well?. i think this basedir is the default? probably best to specify it either way tho. ah, fair enough. yes, absolutely - good call.. even more than \"not necessary\", i'd say it's a strong antipattern. we should avoid for..in - can this use Object.keys(list).forEach instead?. \"Don't use arrow functions for lifecycle methods\". ah yes, it would - let's set this to false.. let's have this message be more like {{propertyName}} is a React lifecycle method, and should not be an arrow function. Use an instance method instead.. good call, let's set this to false. That's a great idea, yes - let's move it to a util file.. can we also use this list in the other places in the codebase that use lifecycle methods?. i know this code is already in master, but this makes the test cases very inscrutable :-/\ni feel like i'd much rather see an explicit output example for each input.. it seems like the effective change here is changing && to ||?. will scope always have an object block property?. Is this meant to be checking the same thing twice?. Nah this is good, just making sure i understand.. the key needs to be quoted, since it's json. is this line necessary, since it's how every single eslint rule is configured?. this seems redundant, since it's on lines 18-19. yes, that would be great!. maybe if (list[component].invalidProps && list[component].invalidProps.length > 0)?. Object.keys(list).filter(component => !list[component].hasDisplayName).forEach?. (component, i) and then we don't need to ++ it, nor have let i = 0 above.. Object.keys(list).filter(component => !isValid(list[component])).forEach?. Object.keys(list).filter(component => mustBeValidated(list[component])).forEach?. Object.keys(list).filter(component => mustBeValidated(list[component])).forEach?. Object.keys(list).filter(component => list[component].propTypes).forEach?. Object.keys(list).filter(component => !list[component].hasSCU).forEach. Object.keys(this._list).filter(i => this._list[i].confidence < 2).forEach?. Object.keys(this._list).filter(j => this._list[j].confidence >= 2).forEach?. new Set(Object.keys(detectionInstructions).concat(Object.keys(propTypesInstructions), Object.keys(usedPropTypesInstructions)))?. let's use !! instead of Boolean(. if we cant get the whole condition on one line, let's put each condition on its own line. no need for the else. also here (ie, the no-else-return eslint rule). name in Object.prototype would be better, so as not to trigger getters. this is just:\njs\nif (node.properties.length > 0) {\n  markPropTypesAsUsed(node.parent);\n}\nthe forEach seems useless?. Object.keys(list).filter(component => mustBeValidated(list[component])).forEach?. These extra newlines here seem odd - why is this allowed to be here?. That makes sense (although I\u2019d want it stripped, this probably isn\u2019t the rule for it). i'm a bit confused why the previous propTypes refactor didn't remove isPropType, but this defaultProps refactor is able to remove isDefaultProp. can you elaborate?. ah ok, gotcha. so all the isPropType stuff will be able to be removed in a followup.. maybe \u201cprefer\u201d shouldn\u2019t be in the rule name, since that\u2019s only one of the settings. What attributes besides \u201ckey\u201d are possible here?. What if someone already has <Fragment? I\u2019d expect to warn on that, if it was destructured from React.. Technically React.Fragment isn\u2019t syntax, it\u2019s api - maybe jsx-fragments with either \u201csyntax\u201d or \u201celement\u201d or something.\nI\u2019d say the default should probably be \u201csyntax\u201d even though that requires babel 7.. I don\u2019t think we have to handle it in the autofixer - but i think we do need to handle it in terms of warning.. Is it worth using a Set here instead of an array?. i think we have a utility function for \"is a function\". i have a strong aversion to allowing users to provide regexes; would allowing * be sufficient?. item.slice(1, -1). I think at any position would be fine - altho i'm not sure how complex this makes the algorithm.\nIt'd also be fine to start with just \"at the beginning\" and/or \"at the end\", to be simpler, and allow use only of startsWith/endsWith.. Escaping regular expressions is a very very hard problem, and passing user input into the RegExp constructor will likely be a bug farm, where the answer used to close the issue will be \"that's not a valid regex\", over and over.. is it worth supporting both, as well? ie, *Foo*?. this seems like it could be const enclosingScope = isArrowFunction ? utils.getArrowFunctionScope(scope) : scope;. if you run those test files in isolation, do they pass?. i do not think it makes any sense to add this as a configuration option; if it's useful, it should be in the message for everyone.. this line doesn't match line 144 above; i think you need to also check that method !== node.key.name?. let's please add a \"valid\" rule for static getDerivedStateFromProps, and also an invalid one for static getDERIVEDStateFromProps :-). I\u2019m not sure the Math.sign is needed at all; comparators can return any negative or positive number.. Let\u2019s add a space after the colon, and it\u2019d be good to have some kind of boundary markers around the text - backticks or curly quotes, maybe?\nSeparately, I\u2019m not sure if the trimming is a good idea - if it\u2019s a literal, the whitespace could be important.. no, i mean !== - if the name is equal when lowercased, but the same, then it isn't a typo and shouldn't be reported.. as long as the checks cover a) the proper spelling and capitalization, b) any miscapitalization, c) any misspelling, and then those three with 1) static and 2) instance, then we should be good.. I don't think this should be considered used in the general case - with true, obviously, the entire ternary reduces to const { foo } = this.state; - but if the condition isn't \"always true\", then the state is unused in some cases, so it's appropriate for the rule to warn about it.\nYou should be unconditionally destructuring out of state.. The rule is \"no typos\", both should be covered? or are you saying the earlier check covers it.. I would expect both to be considered unused. Let\u2019s fix that bug instead.. I can't think of any - you should always be unconditionally extracting from state, and then conditionally using those values.. what is this line for? i don't see any new tests.. Performance is the least important concern; creating variables is free; and the cost of a single property get is effectively free as well.. Comparators are supposed to only return a negative, positive, or zero number - previously it returned a boolean here.. That sounds like a great improvement.. maybe it\u2019s worth adding \u201cin eslint settings\u201d?. i think this is now fixed, so now we can use ^ again. yes, good call. This comment is meant to be all one line - let\u2019s move all the comment bits to a single comment inside the array?. Instead of .find and this return, return .some directly?. There\u2019s a minor performance issue that applies only to functions, which is that the same function object isn\u2019t optimized until it\u2019s been called multiple times - so if you create a new one on every render, you\u2019re resetting the progress on optimizing that function.. True, but there was only one item in the array :-) the new items could be added below the last line of the comment, but it seems cleaner to fix the comment. this description should remain, since it's still valid given the proper version settings.. these are a semver-patch.. nit: let's just return { here and define the literal in one go? alternatively, this can be defined at module level and doesn't really need to be recreated every time. why? a minor is for adding new options - this isn't adding a new feature, it's just removing warnings for 16.3-16.6 users. Can you explain more?. I'm talking about this repo :-). instead of making an object and mutating it, let's create it all in one literal? the various objects can be stored in variables and assigned like { componentWillMount, UNSAFE_componentWillMount: componentWillMount } etc.. This should check the pragma setting, and not be hardcoded to \u201cReact\u201d. Please restore all these blank lines, they help readability. Can we add a forbid test that use the default parser?. suggestion\n    const options = context.options[1] || {};\n    const checkAttributes = options.checkAttributes || false;. maybe also tests that cover providing custom alternatives?. Should these kick in only when the React version setting is 16.3 and 16.6 respectively?. This should use the pragma setting instead of hardcoding \u201cReact\u201d. Probably not, no - but it might be weird to see a warning about a React feature that you can\u2019t use yet.. Yes, definitely. If they\u2019re not now, it\u2019s a bug :-). Yeah that\u2019s a fair point too. I\u2019m not really sure whether it\u2019s better to keep it simple and run the checks always, or to only run the checks when the version dictates.. we could even simplify this name to isCreateElement?. these should be tightly specified - either a string, or an object with the proper \"char\" + \"alternatives\" schema. instead of modifying this test, can we duplicate it and modify the duplicate?. it's json schema - so you'd do something like:\nforbid: {\n  oneOf: [\n    { type: 'string' },\n    {\n      type: 'object',\n      properties: {\n        char: {\n// etc\n        },\n        alternatives: {\n// etc\n        }\n      },\n      additionalProperties: false\n    }\n  ]\n}. Should this live in a shared utility?. Is this still failing? It'd be useful to figure out which version of 3.x this api was introduced in.. does this conflict with TS node names at all?. Let's make sure to document both \"detect\" and the explicit form, like so:\nsuggestion\n      \"version\": \"detect\", // React version, \"detect\" automatically picks the version from your project's package.json. You can also use `16.0`, `16.3`, etc, if you want to override the detection value.. i'd expect components to be a property of the same object that enforceDynamicLinks is. suggestion\n  return Array.from(propWrapperFunctions, func => {. suggestion\n    }\n    if (func.property) {. suggestion\n            },\n            additionalItems: false,\n            uniqueItems: true,. Do we need this schema change now that we have the setting?. This isn\u2019t equivalent, because the first one has .property and not .object.. I\u2019m not really sure - a regression test would help make that clear.. i feel like we could make a separate helper to get the \"array of components\"?. If we backported the eslint API, would that work?. Is there a way we could runtime-detect these APIs, and provide a reasonable degraded experience for older eslint users?. yeah that's what i meant - applying fewer fixes when they weren't good enough.. I made this change; i believe the linter was rrroring on something so i changed them all.\nif we want consistency, we should lint our markdown, but also, double quotes is the most common/idiomatic style for jsx attributes in the ecosystem, so I\u2019d prefer we go with that.. maybe instead of removing these tests entirely, we should add an option that makes them valid?\nIn other words, have the bug fix be \"no longer error on props by default\", but have an option to error on props, so those who want this behavior have a trivial means to get the errors back?. Yep! Then you can keep all these tests, but add an option to make them pass.. what if there\u2019s no firstParam? Can you add a test that covers that?. ah, gotcha. so many implicit guarantees when working with eslint rules :-). why only template? i'd expect any literals to be detected by this option. suggestion\nset to `false` by default. why do these test cases need to be deleted? if it's behind an option, they should remain passing.. i'm confused, why would this be deprecated?. similarly, why deprecate this?. How have the semantics changed (for users who haven't added the new pragma settings)?. Right but why would jsxPragma even exist in the common case for users of this plugin, if it doesn't do anything for them?. yes - when the empty option is set, I think the message should be more specific.. something like\njs\nimport PropTypes from 'prop-types';\nObject.keys(PropTypes)\n?. i'm a bit confused here; are we already sure by the time propType comes in that it's off of prop-types? Or if i have import { shape } from 'airbnb-prop-types, will that trigger it?. this doesn't really make sense to me as a schema; i think it'd be better to have forbidEmpty: true alongside forbid.. Track where it's imported/required from, and ensure it's 'prop-types'?. each variable should be declared by itself, please. let's also be sure to support React.PropTypes. suggestion. This needs to come from the pragma setting, so it can be overridden - not hardcoded to \"React\".. OK, so. To support your first 3 cases:\n1. currently not supported - createElement is hardcoded off of the pragma.\n2. currently uses pragma; localName is fine to also support via an inline comment, but pragma should remain the only way to configure this in settings.\n3. currently uses fragment in getFragmentFromContext, and then pairs that here with pragma - if jsxFragPragma should override both, then that's fine to support as an inline comment, and maybe we could make the fragment setting be either a string (paired with pragma), or an object where either is supported?\n4. without specifics i'm not sure what we need to do here.\nIt seems like we should maybe do these new features as separate PRs.\nThe first one seems to be 3 - ie, add support for an alternative schema in fragment, that inline jsxFrag comments hook into.. ah, i see what you're saying. I suppose this is fine as-is, then.. instead of modifying this test, could you add a new one?. what happens in this function if node doesn't have an openingElement, or if that doesn't have a name? (specifically, what about <>?) If this requires the type be \"JSXElement\", please make this function throw explicitly when node has the wrong type.. is this mutation necessary?. True - but they do indeed change; I just added a new one a couple weeks ago (see #2188 where this technique actually prevented a bug). suggestion\n        if (/Spread(?:Property|Element)$/.test(curr.type)) {. when would we expect to reach here, if it's a JSXElement node? An explicit exception would catch parser bugs more quickly.. suggestion\n      if (node.length < 1) {\n        return null;\n      }. suggestion\n          return this.getComponentNameFromJSXElement(body);. suggestion\n        }\n        if (body.type === 'BlockStatement') {. let's use https://npmjs.com/object.values here.. could this be a map and a .filter(Boolean), rather than mutating an array inside a forEach?. Can you add a test for a fully anonymous SFC - ie, something for which component.displayName || component.name will be undefined?. Naming is hard :-) what do you think about calling this nodeWrapsComponent?. \"don't worry much about maintainability\" is a bit snarky and passive aggressive. Let's reword.. Let's elaborate here on why it helps maintainability - this should talk about a) avoiding passing unintentional extra props, b) being explicit about what props are received and written, c) avoiding react warnings when invalid HTML props are passed to HTML elements, etc.. suggestion\n      JSXSpreadAttribute: function (node) {. suggestion\n  create: function (context) {. Don't forget the new contextType.\nsuggestion\nThis rule allows you to enforce where `childContextTypes`, `contextTypes`, `contextType`, `defaultProps`, `displayName`,. suggestion\n`childContextTypes`, `contextTypes`, and `displayName` will  enforce the `static public field` rule.. suggestion\nIf you have no placement preference for React's static class properties.. Please don't use .map for side effects; instead of this, let's do:\njs\nconst fromEntries = require('object.fromentries');\nconst schemaProperties = fromEntries(classProperties.map(property => [property, {enum: POSITION_SETTINGS}]))l. can we make this rule autofixable?. i'm not sure anyOf is needed here. also please use fromEntries here.. seems like this should use .find instead of .some plus a variable reassignment?\njs\nconst name = Object.keys(propertiesToCheck).find(propertyName => {\n  return propertiesToCheck[propertyName](node);\n});. It\u2019s fine if we want to try to do that as a followup; the real value in this rule imo is if it can autofix tho :-). If this has no errors, it should be in the \u201cvalid\u201d section, not the \u201cinvalid\u201d section. can we add similar test cases for the \"always\" option?. suggestion\n  return !!(. ",
    "gausie": "Is there a way we could do a decorator-style comment above a class manually to inform the parser that the class is a descendent of a Component and lint it thusly?\n. Is there a way we could do a decorator-style comment above a class manually to inform the parser that the class is a descendent of a Component and lint it thusly?\n. Whoops! Quite right.\nOn 25 Mar 2016 01:46, \"Jordan Harband\" notifications@github.com wrote:\n\nIn package.json\nhttps://github.com/yannickcr/eslint-plugin-react/pull/513#discussion_r57411882\n:\n\n@@ -25,6 +25,7 @@\n   \"devDependencies\": {\n     \"babel-eslint\": \"6.0.0-beta.6\",\n     \"coveralls\": \"2.11.8\",\n-    \"doctrine\": \"^1.2.0\",\n\nthis would need to be a full dependency since it's not related to\nactually developing the module.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/513/files/f3e634c59e8928ab170a9bfa9d056cf0f8778064#r57411882\n. \n",
    "AlexKVal": "I've forgot it. My bad :)\nI've added it as fixup into docs commit https://github.com/AlexKVal/eslint-plugin-react/commit/d2676bc\n. A quick look exposed that the failure is caused by:\nwith this code I've got warning\njs\n<Router.RouteHandler />\nand with this code the warning disappears\njs\n<Router />\n. Great job ! :+1: \nBTW this PR on react-bootstrap passes OK :wink: \n. I am sorry, I forgot to note it explicitly that I'm checking it all against the latest versions:\neslint@0.23.0\neslint-plugin-react@2.5.2\n\nI've checked it against the latest at this moment commit now\nIt throws the next error:\n(exactly because of that line 'aria-controls': ariaControls,,\nI've checked it by commenting it out)\n```\nreact-bootstrap/ on pr/857 \n\u203a npm run lint                \n\nreact-bootstrap@0.23.4 lint /Users/alexkval/src/js/react-bootstrap\neslint ./\n\n/Users/alexkval/src/js/eslint-plugin-react/lib/rules/prop-types.js:436\n        isIgnored(name.split('.').pop()) ||\n                      ^\nTypeError: Cannot read property 'split' of undefined\n    at reportUndeclaredPropTypes (/Users/alexkval/src/js/eslint-plugin-react/lib/rules/prop-types.js:436:23)\n    at EventEmitter.Program:exit (/Users/alexkval/src/js/eslint-plugin-react/lib/rules/prop-types.js:521:9)\n    at EventEmitter.emit (events.js:129:20)\n    at Controller.controller.traverse.leave (/Users/alexkval/src/js/react-bootstrap/node_modules/eslint/lib/eslint.js:736:25)\n    at Controller.__execute (/Users/alexkval/src/js/react-bootstrap/node_modules/eslint/node_modules/estraverse/estraverse.js:393:31)\n    at Controller.traverse (/Users/alexkval/src/js/react-bootstrap/node_modules/eslint/node_modules/estraverse/estraverse.js:481:28)\n    at EventEmitter.module.exports.api.verify (/Users/alexkval/src/js/react-bootstrap/node_modules/eslint/lib/eslint.js:721:24)\n    at processText (/Users/alexkval/src/js/react-bootstrap/node_modules/eslint/lib/cli-engine.js:201:27)\n    at processFile (/Users/alexkval/src/js/react-bootstrap/node_modules/eslint/lib/cli-engine.js:226:12)\n    at /Users/alexkval/src/js/react-bootstrap/node_modules/eslint/lib/cli-engine.js:322:26\n```\nIt seems @Cellule would be interested to take a look into it :wink: \n. package.json from react-bootstrap project\njs\n\"eslint\": \"1.0.0\",\n\"eslint-plugin-react\": \"^3.1.0\",\nhttps://github.com/react-bootstrap/react-bootstrap/blob/master/package.json#L58\nhttps://github.com/react-bootstrap/react-bootstrap/blob/master/package.json#L63\nAs you can see - all works fine without this PR :wink: \nI hope it helps :cherries: \n. :+1: :smile: \n. why not \njs\nreturn (key.type === 'Identifier') ? key.name : key.value;\nhere https://github.com/yannickcr/eslint-plugin-react/pull/123/files#diff-6149d4075a6f3125f18ce8c87bb253cbR39 you've done it like that:\njs\nreturn node.key.type === 'Identifier' ? node.key.name : node.key.value;\nOf course it is just a matter of taste :cherries: \n. Thank you for the explanation :cherries: :smiley: \n. ",
    "voronianski": "@yannickcr cool, that works!\n. @yannickcr cool, that works!\n. ",
    "kl3ryk": "I think bug is here: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/prop-types.js#L168 becuase there is no name property.\n. ",
    "kevinrenskers": "I'm also not using React, but this project is still extremely useful. One more rule that could benefit from the same sort of config would be \"react-in-jsx-scope\". Instead of having a hardcoded id of \"React\", it would be great to make this configurable as well.\n. ",
    "gmathieu": "No worries. Thanks for the quick response and creating this repo!\n. ",
    "dsernst": "https://github.com/eslint/eslint/issues/3034 covers this issue as well. One tip suggested by @michaelficarra is to use the following form:\njsx\n    render: function () {\n        return 0,\n            <div>\n                <span>Hello</span>\n            </div>\n    },\nIt's a little weird, but it silences the no-extra-parens error and maintains the balanced line spacing.\n. I'm seeing this as well:\n``` jsx\nexport default function AuthScreen({ auth }) {\n  return (\n    \n      Hello, {auth.full_name}\n    \n  )\n}\nAuthScreen.propTypes = {\n  auth: React.PropTypes.shape({\n    full_name: React.PropTypes.string.isRequired,\n  }),\n}\n```\neslint error:\n17:16  error  'auth.full_name' PropType is defined but prop is never used  react/no-unused-prop-types\n. ",
    "jackwilsdon": "It looks like this was fixed in eslint/eslint#7926 (v3.14.0+), you can now do the following;\nJSON\n{\n  \"rules\": {\n    \"no-extra-parens\": [ \"warn\", \"all\", { \"ignoreJSX\": \"none|all|multi-line|single-line\" } ]\n  }\n}\nIn the case of this issue, it sounds like you want multi-line;\n\nallows extra parentheses around no/all/multi-line/single-line JSX components.\n\n. ",
    "pwmckenna": "@yannickcr if someone were to whip up a PR for this, should it be backwards compatible with regards to rule setting in .esslintrc etc?\n. good suggestion! https://github.com/yannickcr/eslint-plugin-react/pull/225\n. @jimbolla made a new branch/pr (all the naming changed)\nthis pr still addresses https://github.com/yannickcr/eslint-plugin-react/issues/215\n. @yannickcr just added a test that verifies support for nested props. I'll get started on some documentation now. I'll flatten these commits once the docs are looking good.\n. documentation added! \n. updated the docs to mention the suggested replacements for the default forbidden prop types, then squashed. should be good to merge once checks pass.\n. also: I'm happy to write this rule if it would be accepted\n. ",
    "bgw": "@yannickcr Fixed.\n. Seeing as we have an outstanding PR depending on this commit (facebook/react#4007), is there a chance you'll cut a new release soon, or would you recommend we use a git commit hash in our dependencies?\n. Awesome! Thanks!\n. ",
    "adambabik": "I have the same error. I used the following versions of the libraries: eslint@0.22.1, eslint-plugin-react@2.5.0 and babel-eslint@3.1.13.\nCode:\n``` javascript\n'use strict';\nimport React from 'react';\nclass HelloMessage extends React.Component {\n  render() {\n    return HelloWorld!;\n  }\n}\nReact.render(, document.body);\n```\n$cat .eslintrc\njson\n{\n  \"parser\": \"babel-eslint\",\n  \"plugins\": [\n    \"react\"\n  ],\n  \"rules\": {\n    \"strict\": 0,\n    \"global-strict\": 0,\n    \"quotes\": [1, \"single\", \"avoid-escape\"],\n    \"react/display-name\": 0,\n    \"react/jsx-boolean-value\": 1,\n    \"react/jsx-no-undef\": 1,\n    \"react/jsx-quotes\": 1,\n    \"react/jsx-sort-prop-types\": 1,\n    \"react/jsx-sort-props\": 1,\n    \"react/jsx-uses-react\": 1,\n    \"react/jsx-uses-vars\": 1,\n    \"react/no-did-mount-set-state\": 1,\n    \"react/no-did-update-set-state\": 1,\n    \"react/no-multi-comp\": 1,\n    \"react/no-unknown-property\": 1,\n    \"react/prop-types\": 1,\n    \"react/react-in-jsx-scope\": 1,\n    \"react/self-closing-comp\": 1,\n    \"react/sort-comp\": 1,\n    \"react/wrap-multilines\": 1\n  },\n  \"env\": {\n    \"browser\": true,\n    \"es6\": true\n  },\n  \"ecmaFeatures\": {\n    \"jsx\": true,\n    \"modules\": true\n  }\n}\n$ eslint app.jsx\n```\napp.jsx\n  5:6  error  HelloMessage is defined but never used  no-unused-vars\n\u2716 1 problem (1 error, 0 warnings)\n```\nI tried to find the root of the problem and it turned out that for the simplest case:\njavascript\nclass A {};\n<App />;\nthere are two variables with name A. One in scope: scope: { type: 'global', ... } and the second in scope scope: { type: 'class', ... }. The function markVariableAsUsed() marks only one of them with eslintUsed = true (the inner one I guess), so eslint reports an error.\n. ",
    "Standard8": "I don't have a specific use case for this at the moment, and unfortunately never got round to writing one. With the jsx-no-target-blank rule, all we would have needed would have been either checking everything had target='_blank' or everything had rel='...'.\n. Thanks!\n. Forgot to say, this is a regression in 2.6.0.\n. Here's a diff for test cases against current master:\ndiff --git a/tests/lib/rules/jsx-no-undef.js b/tests/lib/rules/jsx-no-undef.js\nindex e1e9c17..355ae41 100644\n--- a/tests/lib/rules/jsx-no-undef.js\n+++ b/tests/lib/rules/jsx-no-undef.js\n@@ -34,6 +34,15 @@ ruleTester.run('jsx-no-undef', rule, {\n     code: '/*eslint no-undef:1*/ var React, App; React.render(<App />);',\n     parserOptions: parserOptions\n   }, {\n+    code: '/*eslint no-undef:1*/ var React, app; React.render(<app />);',\n+    parserOptions: parserOptions\n+  }, {\n+    code: '/*eslint no-undef:1*/ var React, app; React.render(<app.Foo />);',\n+    parserOptions: parserOptions\n+  }, {\n+    code: '/*eslint no-undef:1*/ var React, app; React.render(<app.fake.Foo />);',\n+    parserOptions: parserOptions\n+  }, {\n     code: '/*eslint no-undef:1*/ var React; React.render(<img />);',\n     parserOptions: parserOptions\n   }, {\nThe app.fake.Foo test fails.\n. ",
    "dugokontov": "It would be nice to have this enhancement, since it is hard to force some naming convention for properties.\n. It would be nice to have this enhancement, since it is hard to force some naming convention for properties.\n. ",
    "aequasi": "Oy yeah. Unfortunate. I have a lot of getters and setters that i dont want to be randomly sorted throughout my class.. Oy yeah. Unfortunate. I have a lot of getters and setters that i dont want to be randomly sorted throughout my class.. ",
    "infolock": "I'll go ahead and post this to the eslint issues list instead then.  Just wanted to make sure I was following the pathway to them is all.  Thanks\n. I'll go ahead and post this to the eslint issues list instead then.  Just wanted to make sure I was following the pathway to them is all.  Thanks\n. fyi, https://github.com/eslint/eslint/issues/2780  << fixed by upgrading to 0.23.0 of eslint\n. fyi, https://github.com/eslint/eslint/issues/2780  << fixed by upgrading to 0.23.0 of eslint\n. ",
    "stremlenye": "Destructuring listing works fine for case with this.props\njs\nlet {firstname} = this.props;\nbut rule can't handle case of destructuring this object:\njs\nlet { props: { firstname } } = this\n. As I see it's two different issues. \nThe first is about destructuring, the second is handling shape clause.\nAs I've got from the estree docs there are different mechanics to investigate if property was supplied to shape func or as plain object.\nAs for me to get such deep analysis is out of the scope of the eslint rule. It looks like a static type check.\n. Thx @yannickcr \nDo you need a new issue to be created for my clause?\n. ",
    "davidgilbertson": "This may be related, or a new issue, but I have this problem:\neslint-plugin-react version: 2.6.2\neslint version: 0.24.0\nIn .eslintrc I have \"react/prop-types\": 2\nMy code: const {stores, section} = this.props.content;\nAnd the propTypes:\njavascript\nSection.propTypes = {\n    content: PropTypes.shape({\n        section: PropTypes.object.isRequired,\n        stores: PropTypes.object.isRequired\n    })\n};\nResults in the error 'stores' is missing in props validation for Section   react/prop-types (and same error for section)\nIf I define my propTypes like this I don't get an error, but this is not what my propTypes should look like.\njavascript\nSection.propTypes = {\n    content: PropTypes.object,\n    stores: PropTypes.object,\n    section: PropTypes.object\n};\nOf course if I define my consts like this I also don't get the error:\njavascript\nconst stores = this.props.content.stores;\nconst section = this.props.content.section;\n. Thanks for the quick reply, guys. Created issue https://github.com/yannickcr/eslint-plugin-react/issues/136\n. @yannickcr That is awesome! Thank you so much.\n. ",
    "mtscout6": "Sadly true, unless something like ternjs or any other comprehensive static code analyzer could be used but that would be a core eslint issue to address.\nI'm just trying to wrap my head around a clean way to share propType definitions across multiple components in an ES6 world. With ES5 using a Mixin would be the preferred means. However, seeing as React proper has not explicitly declared deprecation of React.createClass it still seems as though it's on the horizon at some point. My hopes in presenting this is partly to see if there is an existing solution or any prescribed methods to address such a use case.\n. Thanks for the quick turn around on this :)\nOn Sun, Jun 14, 2015, 14:41 Alexander Shemetovsky notifications@github.com\nwrote:\n\nI've checked it - all is working fine, again. [image: :tada:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/110#issuecomment-111874890\n.\n. \n",
    "jquense": "So eslint 1.0. does support spread, and as of a few versions ago babel-eslint also exposes the original babel ast node type on the translated eslint node as ._babelType which is also helpful for getting spread info.\nHowever as @yannickcr said if the value is being imported from another file, eslint just doesn't expose cross file info like babel could. The more unlikely case of defining the proptypes, to be spread, in the current module, could be resolved to not error in most cases.\n. deprecating findDOMNode is a an alarmingly upseting idea... Unless you are adding back getDOMNode(), it's going to make writing a large amount of react code just so so terrible. \"Add and extra DOM node to use callback refs\" is really really untenable for a ton of use cases; along with, effectively making interop with css frameworks not written with react almost impossible. \n. not to mention it effectively just ignores the fact that multiple layers of HOCs are the norm now thanks to mixin \"deprecation\" :P\nThis sounds like an idea from folks who nicely own every single component they use. for those using libraries... oof\n. Sorry if I sound annoyed, these sort of drastic changes can feel like they are coming out of the blue. A proper RFC process for this stuff would really be helpful here. \nto add to @taions point, so also for focus management, which is required for accessible components, right now react just offers nothing useful for that problem which requires dropping down to DOM nodes, and not wrapping ones in the HOC case. imperative methods sort of work but are often and frustratingly obscured by HOCs, and just not possible for function components. \nThe extra DOM nodes are often presented as a \"just do that\" sort of simple solution but I feel like that ignores that layout and styling in the DOM is extremely intolerant to adding in bonus nodes. not to mention the lack of semantic value. To be honest I think most often the reason want folks want fragments (maybe one of the most requested API changes?) in the first place is exactly to avoid these bonus nodes.\nI appreciate the desire to really abstract away the DOM as a render target,  but these escape hatches are important not the least of which because the DOM is not particularly a good target for this sort of thing and wildly quirky (I encourage folks to look at the react event code to see just what is needed for consistency on that front). \nSaying you can only drop to the host objects via function refs feels like a line drawn against an arbitrary and unhelpful line. Escape hatches should be used prudently and judiciously but they should be easily and constitently accessible, otherwise they aren't useful in any case. This is the same problem with stateless function components not being ref-able. there is no real reason to think someone would not need the escape hatch for those components over classy ones. \nit seems like if findDOMNode is blocking other features then perhaps change they way it works,  instead of removing it? Personally I'd be fine if it sometimes returned an array of nodes vs a single one, jQuery has done this with a ton of success forever\n. > And this pattern works just as fine with functional components as it does with classes.\n\nIf you think it\u2019s problematic can you please point out why?\n\nThe main problem is that it requires all potential children to expose this sort of API. For an environment that owns all their components fine, that is a pattern that works*. Most of us however are cobbling together applications from lots of smaller libraries, getting every one of them to expose a ref prop is unlikely and fraught.\n*More to the pattern itself though, it requires the consumed child to make the choice about whether it will expose it's DOM node. At first glance this sounds like encapsulation but its not; I'd argue its actually leaking implementation details. A child component cannot reasonably make the choice that no consuming parent will ever need to access its rendered node. The Api's that depend on/need findDOMNode are exactly the sort that don't work with this pattern. Positioning for instance is a concern that belongs to the parent not the child. It's unfortunate that the DOM doesn't allow us to express this  in terms of the parent always (flexbox does which is one reason its great) but providing the escape hatch, for this DOM limitation, doesn't belong to the child.\n\nWhat would you expect to get as a reference to a functional component?\n\nThe the DOM node of the component, like host components. Sorry for being a bit unclear my problem with the lack of ref-able function components is not that you don't get an instance (agree that makes no sense). The real problem is the same as i'm describing above, its that the component has to make an arbitrary choice about whether it allows an escape hatch to be used, i.e. accessing the underlying host node. Again, this is just not a choice a component can make, it has zero information necessary to make that choice. (I know you can wrap them in a stateful component, but come on, the DX of that is terrible). So we are in positions where we have to not use Function components on the off chance one of them needs to be measured in order to render a tooltip e.g. @taion's above example. \nI think both me and @taion are on board that most times you should be using a ref for host node access. What is concerning though is that the escape hatches that make React super flexible and un-frustrating when working with the DOM are slowly being neutered by placing them behind gatekeepers that lack the context necessarily to allow their use.\nThere seems to be this side effect of api design choices that makes escape hatches harder and harder to use. This does de-incentivize use, but that hurts those of us that need them and makes it harder to provide helpful components and encapsulate the use of those escape hatches away from the consumer. Instead what's happening is we need to now involve our users more and more in the ugliness of FFI use by requiring they expose props for refs, or not use Function components. This seems counter intuitive, I'd be nicer to see more work going into solving the reasons why ppl need these escape hatches before actually or effectively removing them.\nSorry if my tone is harsh, It stems from a these changes that make our lives harder as maintainers. I realize also that folks may not have the same issues as us at React-Bootstrap, but most UI libs are not actively dealing with interop with non-react stuff. I feel like our use case is important, and also a bit more indicative of what folks working on brownfield applications face, especially those who don't post on the eslint-react-plugin repo :P \n. also a quick side point, CSS flexbox is extremely intolerant to extra wrapping nodes. On one hand this is one reason why fragments would be awesome, but that would be negated by HoC's needing to wrap in extra divs :P\n. @gaearon not all of positioning involves subtrees. @taion's example is a good one still: the Button can have a ref, but you need to use findDOMNode to access the position info in order to display the overlay.\njsx\n<Button ref={c => { this.button = findDOMNode(c); }} />\n<Position target={this.button}>\n  <Tooltip>Some tooltip</Tooltip>\n</Position>\nOr:\njsx\nclass ButtonWithTooltip extends React.Component {\n  componentDidMount() {\n     renderToolTipInSubtree({ \n        target: ()=> findDOMNode(this)\n     })\n  },\n  render() {\n    // cannot wrap in a div, as it will not longer work in `ButtonToolbar` or ModalFooter\n    return <Button {...this.props}/>\n  }\n}\nThe above is a good example of who should own the use of the escape hatch. Button should not have to think about whether someone might want to display the tooltip. I don't think it makes sense  for the button author to ask themselves: \"May this need to be measured? Maybe! so no Function component and provide a ref prop\"\nThe other use case is needing to measure, oneself.\n``` jsx\nclass ElementQuery extends React.Component {\n  componentDidUpdate() {\n    let node = findDOMNode(this);\n    let visible = node.offsetWidth > this.props.width;\nif (visible !== this.state.visible) \n  this.setState({ visible })\n\n}\n  render() { \n    if (this.state.visible)\n      return React.Children.only(this.props.children)\n    return null;\n  }\n}\n```\n\nYou mentioned the focus use case, but isn\u2019t it reasonable for third party React input components to always provide imperative focus() method?\n\nI agree though, again, the use HoC's for everything and Function components makes imperative methods mostly not an option anymore. Being able to drill down to the component node to focus it is often the only viable option, and well behaved input components should handle a native focus() correctly.\nThe above are simplistic examples of course that could have alternatives, I am providing them in the context of earlier conversation about how wrapping nodes aren't always feasible, and buttonRef props being leaky and semantically wrong.\n. > I\u2019m not quite convinced components that require this don\u2019t already know this.\nI don't think every component should have to think about where someone might want to display a tooltip over it, which is what I mean here.\n\nDo I understand correctly that the only reason why you have to use Button\u2019s DOM node (and not a wrapping node) is because it\u2019s a part of a CSS framework like Bootstrap which forces direct parent-child relationships and doesn\u2019t allow extra DOM nodes?\n\nIts not just bootstrap, somethings just can't be reasonably styled to handle either <button> or <div><button/></div>. In the case of a button group if you need to do something \n``` css\n.btn-group > *:not(:first-child, :last-child) {\n  border-radius: 0;\n}\n// and so on...to get buttons that are neatly styled next to each other\n```\nYou could right that as .btn-group .btn {} but that makes nesting stuff hard and just is flat out impossible with css-modules see for more context there.\nIt's easy to say \"just write your styles in a way that is agnostic to DOM structure\" but that often just not possible.\n. > Is there some reason why a component might not be aware that it has to be used in a specific parent DOM structure?\nsure, most library components. We provide <Button>, its not possible for us to know that that user is going to write a <ButtonTabList> that uses Button. Or in the case where you are using Button from library A and Tooltip from library B. on a philosophical note.\nOn a more philosophical point it seems like an odd to me that HoC's should add DOM nodes, when the pattern is often used as a way to compose in behavior, not structure.\nTo be clear, we don't need findDOMNode specifically, we need a way to get at a component's rendered output without that component needing to explicitly opt in to that, or make it super simple to forward to the right node in the child, in the way that style and className work. The problem is that unless that pattern is explicitly defined by React the contract will differ from library to library making the idea of Overlay, or Position primitive that can be used in a wide range of contexts impossible. e.g. RB will have elementRef, while MUI has nodeRef, etc etc. tho I still consider that solution suboptimal to the current findDOMNode api. \n. > Do I understand correctly that relying on Button\u2019s className and writing stylesheets using it directly in expressions like .stuff > .button in other components is considered acceptable usage?\nwhen building on top of a UI framework like bootstrap or similar? sure, the class names are generally considered the api to the css framework. Admittedly React components allow an ergonomic way to avoid that, however, even limiting that wouldn't solve the problem:\n``` css\n.my-button-group {\n   display: flex;\n   align-items: space-between;\n}\n.my-button-group > * {\n  flex: 1;\n}\n```\nUses no reliance on library classNames (and is the recommended approach for css-modules), but would break hard if the button child was wrapped in a div. It is also not easily written to handle an either a button or a button wrapped in a div. \nNote that these examples assume one HOC, but having more isn't unreasonable either when you are trying to build lower level composable utilities, think: withTooltip(measurable(Component)) is each supposed to add another div?\n. > I still think it\u2019s reasonable to have this as a lint rule, as the use case is relatively rare and can easily be confined to a very specific sort of component (like Measurer etc).\ndefinately, on the same page there :)\n. come on this is bad advice, extracting and constructing a new context object in render is the anti-pattern and causes unnecessary context updates. Forcibly making all context single scalar values is a weird way around this that offers limited improvement while deepening the component tree unnecessarily. Moving the context value to a single state property artificially isn't objectively a better option essentially when the component is only a provider, it's state is the value.\nKeeping the rule the way it is is certainly the prerogative of the project and maintainers but claiming that the react docs are actually doing it wrong, and your opinions about readability and what constitutes maintainability is FUD. . come on this is bad advice, extracting and constructing a new context object in render is the anti-pattern and causes unnecessary context updates. Forcibly making all context single scalar values is a weird way around this that offers limited improvement while deepening the component tree unnecessarily. Moving the context value to a single state property artificially isn't objectively a better option essentially when the component is only a provider, it's state is the value.\nKeeping the rule the way it is is certainly the prerogative of the project and maintainers but claiming that the react docs are actually doing it wrong, and your opinions about readability and what constitutes maintainability is FUD. . ",
    "rafaelchiti": "Meanwhile would be useful if we can set an exception so we can disable this linting when using spread operators, does that make sense?\n. ",
    "simonewebdesign": "Thanks!\n. Thanks!\n. ",
    "vicentedealencar": "Hmm... I didn't know about that, thanks for you responses\nSo I am sticking with this comments for a while\n. ",
    "tcoopman": "I've just updated everything today and I cannot reproduce it anymore. \n. I've just updated everything today and I cannot reproduce it anymore. \n. Is there some kind of benchmark that shows that recreating the function is bad for performance?\n. Is there some kind of benchmark that shows that recreating the function is bad for performance?\n. ",
    "NickStefan": "Im noticing now that in babel, the jsxPragma option takes a string that would look like: \njsxPragma : 'dom.createElement'\nHowever, in this pull request I assumed one would set the eslint config settings as:\njsxPragma: 'dom'\nI gravitated there as it was more direct information in solving the problems specific to me (linter not recognizing my class definitions). However, I can see the value in keeping it consistent. If people would prefer 'dom.createElement' as the jsxPragma setting, then I can definitely edit this PR.\n. Im noticing now that in babel, the jsxPragma option takes a string that would look like: \njsxPragma : 'dom.createElement'\nHowever, in this pull request I assumed one would set the eslint config settings as:\njsxPragma: 'dom'\nI gravitated there as it was more direct information in solving the problems specific to me (linter not recognizing my class definitions). However, I can see the value in keeping it consistent. If people would prefer 'dom.createElement' as the jsxPragma setting, then I can definitely edit this PR.\n. Updated the uses :)\n. ",
    "scothis": "This is my first eslint rule. Any and all feedback is most welcome.\nI intend to continue creating rules to enforce the Airbnb style guide.\n. This is my first eslint rule. Any and all feedback is most welcome.\nI intend to continue creating rules to enforce the Airbnb style guide.\n. ",
    "rpl": "@yannickcr here is a small tweak I'm using to introduce your awesome React-related custom eslint rules on one of the projects I'm working on (which is firebug/rdp-inspector, pull request firebug/rdp-inspector#48) which doesn't use jsx syntaxes in the render method and the React components with missing displayName weren't detected as expected.\nThis is my first experience on an eslint plugin, let me know if this fix is ok or if it needs any more tweaks. \n. @yannickcr here is a small tweak I'm using to introduce your awesome React-related custom eslint rules on one of the projects I'm working on (which is firebug/rdp-inspector, pull request firebug/rdp-inspector#48) which doesn't use jsx syntaxes in the render method and the React components with missing displayName weren't detected as expected.\nThis is my first experience on an eslint plugin, let me know if this fix is ok or if it needs any more tweaks. \n. ",
    "aruberto": "I am also getting the same error. Did some tinkering with dependencies. eslint-plugin-react depends on babel-core which in turn depends on acorn-jsx. When I downgrade RReverser/acorn-jsx to 1.0.3 (1.1.0 was released about 1.5 hours ago) the error does not occur (just providing this info for debugging purposes to help fix the issue, not suggesting that people should downgrade acorn-jsx).\n. ",
    "choonkending": "@aruberto What a champion! I had the same issue and downgrading acorn-jsx to 1.0.3 works! Thanks heaps (I'm debugging).\n. ",
    "andrevinsky": "I edited .eslitrc to contain this line:\njson\n    \"react/sort-comp\": [1,\n      {\n        \"order\": [\n          \"constructor\",\n          \"lifecycle\",\n          \"everything-else\",\n          \"render\"\n        ]\n      }],\nStill, I get this:\n28:2  warning  defaultProps must be placed after componentWillUnmount  react/sort-comp\nfor the ..\n``` jsx\nclass AccountInfo extends Component {\nstatic propTypes = {\n    accountId: PropTypes.string.isRequired\n  };\n//noinspection Eslint\n  static defaultProps = {\n    accountId: ''\n  };\n```\n. And.. I am still getting this error regarding the constuctor placement:\nCreateAccount.js\n   36:2   warning  constructor must be placed after componentWillUnmount  react/sort-comp\n  134:16  warning  Empty components are self-closing                      react/self-closing-comp\n  139:16  warning  Empty components are self-closing                      react/self-closing-comp\n. ",
    "okonet": "Yes, the code is not valid, but the issue I had is that Intellij IDEA was showing a notification that ESLint had an error verifying my file, which IMO wasn't a case since I wasn't ready typing it.\n. And thanks for such a quick resolution! :sparkles: \nWill you publish a new version on npm soon?\n. I'm also wondering how is HOCs like this should be re-written then? \nhttps://github.com/okonet/react-container-dimensions/blob/master/src/index.js\n. @cAstraea you can use https://github.com/airbnb/enzyme\n. @cAstraea you can use https://github.com/airbnb/enzyme\n. OMG can this please be merged soon?. ",
    "vith": "@yannickcr It's a problem for users running the linter in realtime. I get a popup about the uncaught TypeError in atom through linter-eslint as I'm typing a new class definition.\nRelated: https://github.com/AtomLinter/linter-eslint/issues/66\nI can't reproduce anymore after switching to your master branch in my package.json:\njson\n\"eslint-plugin-react\": \"git://github.com/yannickcr/eslint-plugin-react.git#master\",\nSo I think 228548f worked. Thanks. :+1: \n. ",
    "josephfinlayson": "class ImageCarousel extends React.Component {\n    a = \"b\"\n   constructor(){ \n   }\n   render(){}\n}\nIs this kind of behaviour possible to specify, all class properties/property initialisers allowed to go at the top?\n. @yannickcr  @tleunen \nWe've done it at Hubrick, have a look and see if it can be ported\nhttps://github.com/hubrick/eslint-plugin-classes/blob/master/tests/rules/order.js\n. ",
    "davezuko": "Any progress on this? Just curious because my team's been running into this issue and it would be nice to have support directly from eslint-plugin-react. This plugin is awesome; having this would just seal the deal.\nThanks!\n. ",
    "CosticaPuntaru": "please do not forget about static function/props\n. ",
    "unimonkiez": "Hey, when are you expecting to publish this fix?\nBtw for all interested, for the meanwhile I added this to my .eslintrc to support both sorting of react's classes and my es6 classes using this plugin - \n\"sort-class-members/sort-class-members\": [2, {\n  \"order\": [\n    \"[static-properties]\",\n    \"[static-methods]\",\n    \"[properties]\",\n    \"[conventional-private-properties]\",\n    \"constructor\",\n    \"[lifecycle]\",\n    \"render\",\n    \"/^render.+$/\",\n    \"[everything-else]\"\n  ],\n  \"groups\": {\n    \"lifecycle\": [\n      \"displayName\",\n      \"propTypes\",\n      \"contextTypes\",\n      \"childContextTypes\",\n      \"mixins\",\n      \"statics\",\n      \"defaultProps\",\n      \"constructor\",\n      \"getDefaultProps\",\n      \"state\",\n      \"getInitialState\",\n      \"getChildContext\",\n      \"componentWillMount\",\n      \"componentDidMount\",\n      \"componentWillReceiveProps\",\n      \"shouldComponentUpdate\",\n      \"componentWillUpdate\",\n      \"componentDidUpdate\",\n      \"componentWillUnmount\"\n    ]\n  }\n}],\n\"react/sort-comp\": 0\nAfter you change it will be something like this:\n\"sort-class-members/sort-class-members\": [2, {\n  \"order\": [\n    \"[static-properties]\",\n    \"[static-methods]\",\n    \"[properties]\",\n    \"[conventional-private-properties]\",\n    \"constructor\"\n    \"[everything-else]\"\n  ]\n}],\n\"react/sort-comp\": [2, {\n  order: [\n    'constructor',\n    'lifecycle',\n    'render',\n    '/^render.+$/',\n    'everything-else'\n  ]\n}]\n. Hey, when are you expecting to publish this fix?\nBtw for all interested, for the meanwhile I added this to my .eslintrc to support both sorting of react's classes and my es6 classes using this plugin - \n\"sort-class-members/sort-class-members\": [2, {\n  \"order\": [\n    \"[static-properties]\",\n    \"[static-methods]\",\n    \"[properties]\",\n    \"[conventional-private-properties]\",\n    \"constructor\",\n    \"[lifecycle]\",\n    \"render\",\n    \"/^render.+$/\",\n    \"[everything-else]\"\n  ],\n  \"groups\": {\n    \"lifecycle\": [\n      \"displayName\",\n      \"propTypes\",\n      \"contextTypes\",\n      \"childContextTypes\",\n      \"mixins\",\n      \"statics\",\n      \"defaultProps\",\n      \"constructor\",\n      \"getDefaultProps\",\n      \"state\",\n      \"getInitialState\",\n      \"getChildContext\",\n      \"componentWillMount\",\n      \"componentDidMount\",\n      \"componentWillReceiveProps\",\n      \"shouldComponentUpdate\",\n      \"componentWillUpdate\",\n      \"componentDidUpdate\",\n      \"componentWillUnmount\"\n    ]\n  }\n}],\n\"react/sort-comp\": 0\nAfter you change it will be something like this:\n\"sort-class-members/sort-class-members\": [2, {\n  \"order\": [\n    \"[static-properties]\",\n    \"[static-methods]\",\n    \"[properties]\",\n    \"[conventional-private-properties]\",\n    \"constructor\"\n    \"[everything-else]\"\n  ]\n}],\n\"react/sort-comp\": [2, {\n  order: [\n    'constructor',\n    'lifecycle',\n    'render',\n    '/^render.+$/',\n    'everything-else'\n  ]\n}]\n. ",
    "harriha": "Ran into the same issue right after it was introduced, excellent that you @yannickcr got it fixed already, insanely fast action, thanks a lot! \n. ",
    "ericwooley": "Unfortunately it's a proprietary project, so I can't post the source. But Maybe I can narrow it down. Is there a way to turn on debug mode or something to that affect?\n. ",
    "jsg2021": "A file like this triggers it for me:\nexport default {\n    componentWillMount () {\n        let {foo} = this;\n    }\n};\n. I believe the displayName of function components is the function's name... so if it's anonymous, the component is also anonymous... i agree with @iam4x , function components shouldn't be bound to this lint rule. It's a different animal.\n. I believe the displayName of function components is the function's name... so if it's anonymous, the component is also anonymous... i agree with @iam4x , function components shouldn't be bound to this lint rule. It's a different animal.\n. That code pen does not prove that it's an intentional feature. That's just where the property is looked for on the prototype/class. In the case of simple function components, it's the same place.\nAdding a Comp.displayName = \"foo\" after the function's declaration is a bit counter to the spirit of these new style components. imo.\nI wasn't advocating writing anonymous components. I was just using it as an example.\n. That code pen does not prove that it's an intentional feature. That's just where the property is looked for on the prototype/class. In the case of simple function components, it's the same place.\nAdding a Comp.displayName = \"foo\" after the function's declaration is a bit counter to the spirit of these new style components. imo.\nI wasn't advocating writing anonymous components. I was just using it as an example.\n. I've seen many components split rendering into helper methods on the component... and I would not consider them to be \"stateless\" components... yet this rule is tripping up on those helper methods.\nexample, this could be a mixin:\n``` es6\nimport React from 'react';\nimport HeaderWidget from './Header';\nimport FooterWidget from './Footer';\nexport default {\nrenderHeader () {\n    let {page} = this.state;\n\n    return React.createElement(HeaderWidget, {\n        //etc...,\n        page\n    });\n},\n\n\nrenderFooter () {\n    let {page} = this.state;\n    if (!page) {\n        return null;\n    }\n\n    return React.createElement(FooterWidget, {\n        //etc...,\n        page\n    });\n}\n\n};\n```\nignore the stupidity of this example, but the idea is that methods either within the component or mixins are not themselves \"stateless\" components. they are just helpers.  They could have many or no arguments. \nin my opinion, it's too complicated to identify stateless components or helpers... so lint rules that were built with previous assumptions about components need re-evaluating...  \ntl;dr: imo, the no-muli-comp rule should only apply to Stateful (traditional) Components.\n. I've seen many components split rendering into helper methods on the component... and I would not consider them to be \"stateless\" components... yet this rule is tripping up on those helper methods.\nexample, this could be a mixin:\n``` es6\nimport React from 'react';\nimport HeaderWidget from './Header';\nimport FooterWidget from './Footer';\nexport default {\nrenderHeader () {\n    let {page} = this.state;\n\n    return React.createElement(HeaderWidget, {\n        //etc...,\n        page\n    });\n},\n\n\nrenderFooter () {\n    let {page} = this.state;\n    if (!page) {\n        return null;\n    }\n\n    return React.createElement(FooterWidget, {\n        //etc...,\n        page\n    });\n}\n\n};\n```\nignore the stupidity of this example, but the idea is that methods either within the component or mixins are not themselves \"stateless\" components. they are just helpers.  They could have many or no arguments. \nin my opinion, it's too complicated to identify stateless components or helpers... so lint rules that were built with previous assumptions about components need re-evaluating...  \ntl;dr: imo, the no-muli-comp rule should only apply to Stateful (traditional) Components.\n. I was under the impression this.state = {} was a valid state reset/replacement.. Same with node 10.0.0 & eslint 4.19.1. Surething. . Surething. . ",
    "ryanflorence": "I'm getting this same error messages with this code:\n``` js\nimport React from 'react'\nlet debugContainer = document.createElement(debugContainer)\ndocument.body.appendChild(debugContainer)\nlet styles = {\n  position: 'fixed',\n  top: 0,\n  right: 0,\n  width: 400,\n  bottom: 0,\n  background: '#444',\n  color: '#f0f0f0',\n  padding: 5,\n  overflow: 'scroll',\n}\nexport default function debug (Component) {\n  let oldRender = Component.prototype.render\nComponent.prototype.render = function () {\n    let { state, props, context } = this\n    let { name } = this.constructor\n    setTimeout(() => {\n      React.render(\n        \n          {JSON.stringify({ name, state, props, context }, null, 2)}\n        ,\n        debugContainer\n      )\n    }, 0)\n    return oldRender.call(this)\n  }\nreturn Component\n}\n```\nYes, this is the kind of code I write when nobody is looking :eyes: \nEdit:\nThis is my workaround, just don't destructure in there:\n``` js\nimport React from 'react'\nlet debugContainer = document.createElement(debugContainer)\ndocument.body.appendChild(debugContainer)\nlet styles = {\n  position: 'fixed',\n  top: 0,\n  right: 0,\n  width: 400,\n  bottom: 0,\n  background: '#444',\n  color: '#f0f0f0',\n  padding: 5,\n  overflow: 'scroll',\n}\nexport default function debug (Component) {\n  let oldRender = Component.prototype.render\nComponent.prototype.render = function () {\n    setTimeout(() => {\n      React.render(\n        \n          {JSON.stringify({\n            name: this.constructor.name,\n            state: this.state,\n            props: this.props,\n            context: this.context\n          }, null, 2)}\n        ,\n        debugContainer\n      )\n    }, 0)\n    return oldRender.call(this)\n  }\nreturn Component\n}\n```\n. > How else would you propose detecting SFCs so that rules can be applied?\nI think you just have to check if it's anonymous or not. If anonymous, it's not a component.\n``` js\n// don't warn\n ()}/>\n// warn\nconst Thing = ({ foo }) => ()\n```\nNote, maybe anonymous means something else, another way to phrase this is \"is the function we think is a SFC assigned to a variable or not?\"\n. What's wrong w/ keeping your current metric and adding \"assigned to a variable\"? Is there ever a case where you have a SFC that isn't assigned to a variable?\n. assigned to variable OR default export\n. Sounds good.\n\nHowever, it's far better imo to have an overly-active lint rule that can be overridden with comments, than to have one that misses otherwise lintable errors.\n\nDon't forget that many people like myself will just disable the rule when it's this noisy around false positives (I use these react-motion render props all over the place) and the end effect is no linting for any propTypes, or if they're a beginner be totally confused, so I tend to think the other direction :)\n. I have a few thoughts\n1. If there was never a use-case for rendering unescaped HTML then React wouldn't have allowed it in the first place.\n2. historically every html-outputting (template) system has had this mechanism to render unescaped content, raw in rails IRB, {{{triple stash}}} in handlebars, ! in haml, etc.\n3. Any app that has user generated content (Learning Management Systems, CRMs, basically anything with a WYSIWYG, this app right here in front of us--Github)\n4. I've worked with several trusted APIs that send safe, raw HTML content (like the github API) that I need to render to the page as is.\nI'd absolutely remove this from the recommended rules.\n. >  converting DOM to VDOM is cake.\nIt's about a billion pounds more cake than just trusting developers to use an API with the word \"dangerous\" in the name correctly, and on the sever you don't have a browser environment to let you cheat on the parsing.\n. > However, there's tons of \"sometimes necessary\" things that are generally discouraged.\nLinting seems to exist to catch mistakes.\nThere are use cases for using set state in didUpdate, but there's a high chance people will be doing something weird, so that makes sense as a linting rule to require you to dance around.\nIt would be incredibly surprising to me if somebody accidentally rendered unescaped HTML with React. That's why I think it doesn't make sense to have it as a linting rule at all, let alone as a recommended one.\nIt's not catching mistakes, it's just a nuisance.\n. ",
    "tmcw": "@yannickcr any work needed to get this ready to merge?\n. This was caused by something like:\njs\n        <div className={`strong fill-lighten0 pad1 contain small icon ${typeLabel[type].icon}`}>\n          {typeLabel[type].displayName}\n       </div>\nPretty sure having an object with a displayName property is confusing eslint-plugin-react.\n. This was caused by something like:\njs\n        <div className={`strong fill-lighten0 pad1 contain small icon ${typeLabel[type].icon}`}>\n          {typeLabel[type].displayName}\n       </div>\nPretty sure having an object with a displayName property is confusing eslint-plugin-react.\n. ",
    "robcolburn": "To be clear, we mean something like\njs\npropTypes: {\n  cat: PropTypes.string,\n  blob: PropTypes.shapeOf({\n    name: PropTypes.string\n  })\n}\nrender(){\n  return <Dog name={this.props.blob.name} {...this.props.dog} />\n}\ndog is not specified as a propType\nThat would be awesome! But, yeah, that does seem difficult with just an AST.\n. Thanks!\n. ",
    "DianaSuvorova": "@ljharb, can we close? [prop-types] takes care of this. . Oh, I like this proposal. @ljharb  this doesn't seem like it has been implemented yet. How about new [jsx-content-spacing]?. By now all of the issues reported here have been fixed. \nExcept for the first one (reported by @Eschon) where only one false positive remains handleFriendrequest.This prop is only used inside a list of components that is being generated inside a map function.\nI think generally suggested react style for this is to have a separate listItem component. So i don't think we are going to fix this use case.\n. @ljharb  I have created a PR with (what I think) all of the valid use cases discussed in this thread.\nMost of them are fixed already. I found only one reported by @robguy21, that needs to be investigated (I commented it out and will look into it).  Please let me know if missed any other valid cases from this issue. Thanks!. @ljharb  I have created a PR with (what I think) all of the valid use cases discussed in this thread.\nMost of them are fixed already. I found only one reported by @robguy21, that needs to be investigated (I commented it out and will look into it).  Please let me know if missed any other valid cases from this issue. Thanks!. @ljharb, here is the summary of this thread. \nThere are 3 separate types of errors were reported/discussed here:\n - PropTypes.shape officially this rule doesn't support it . By default the options for this rule  is [{skipShapeProps: true}]. There are quite a few  people reported test cases that uses PropTypes.shape (including the very first one) without any modification their test cases passes as I demonstrated in a PR. As soon as one sets [{skipShapeProps: false}] these cases are going to fail. \n\n\nDestructuring assignment. This works just fine. The problem is that destructuring assignment is often times  used with shape type. Thus it is really easy to assume that it is a problem.\n\n\nFlow Components. This is the one I though needs to be checked but then I realized it is a flow. So I am not really sure what's this library strategy for supporting flow. For this rule I would propose to skip flow components (can be a config option) unless there is a better ideas. This can be done as a separate ticket/PR.\n\n\nWith that I think we can actually close this ticket. I will update my pr to format the tests correctly. But there is going to be no code change. \nLMK your thoughts.\n--Update---\nPR is updated \ud83d\ude03 . @ljharb, here is the summary of this thread. \nThere are 3 separate types of errors were reported/discussed here:\n - PropTypes.shape officially this rule doesn't support it . By default the options for this rule  is [{skipShapeProps: true}]. There are quite a few  people reported test cases that uses PropTypes.shape (including the very first one) without any modification their test cases passes as I demonstrated in a PR. As soon as one sets [{skipShapeProps: false}] these cases are going to fail. \n\n\nDestructuring assignment. This works just fine. The problem is that destructuring assignment is often times  used with shape type. Thus it is really easy to assume that it is a problem.\n\n\nFlow Components. This is the one I though needs to be checked but then I realized it is a flow. So I am not really sure what's this library strategy for supporting flow. For this rule I would propose to skip flow components (can be a config option) unless there is a better ideas. This can be done as a separate ticket/PR.\n\n\nWith that I think we can actually close this ticket. I will update my pr to format the tests correctly. But there is going to be no code change. \nLMK your thoughts.\n--Update---\nPR is updated \ud83d\ude03 . if the rule is using options: [{skipShapeProps: true}] (it is default), it would skip validation. Should be closed.. @ljharb this issue can be closed. Fixed in #1303.\nThe test case discussed in the thread is line 1319 here . @ljharb this issue can be closed. Fixed in #1303.\nThe test case discussed in the thread is line 1319 here . This is fixed.\n@ljharb  I'd be happy do it myself if you give me rights to close tickets.\nThanks :). First 2 are fixed. For the 3rd there are nuances.But the simplest array.map use cases are supported Need to close this ticket. Thanks!. @marcelmokos, seems like your change would fix the issue. You may just need to add few test cases. Why don't you create a PR for this repo?  \n**I will be happy to help if you have any questions \ud83d\ude03 . Here is another test case to repro the error:\njs \nconst invalidJSX = () => {\n  return (\n    <svg >\n          <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#myIcon\"></use>\n    </svg>\n  );\n};\nI understand that this is invalid jsx. But the error it throws makes no sense (TypeError: name.toLowerCase is not a function). \nI think the better idea for the linter in general would be just skipping invalid syntax.\n. @sompylasar, could you please provide complete test case for the behaviour you are describing? . @sompylasar , let's continue this discussion there. flow as well. Need a label. @ljharb  I want to take a look into supporting flow soon. Gathering use cases. Thank you!. first use case here is a known issue with the rule when using an intermediate variable to store props/parts of props.\nSecond is fixed on master.. This looks like a flow issue. Can we add a label please :) @ljharb thank you!. @developer239, I think the plugin acts correctly here. params.propId is not used in PostsBaseContainer. It is used in connect(mapStateToProps, mapDispatchToProps)(PostsBaseContainerWithQueries) component. You may want to configure  that prop type  on that one instead. I have created a PR with both correct and incorrect props configurations. . @ljharb  this was fixed in https://github.com/yannickcr/eslint-plugin-react/pull/1341 Thanks!. I will work on it.. I will work on it.. @ljharb , do you usually close issues after fix was merged to master or released or you follow some other process?. Got it. Will follow that. Thanks!. @ljharb I think this issue should be closed.. @jaromero  thanks for reporting this issue and documenting all the options you tried.\nThe issue here is that for all practical purposes  buildText function looks like a valid react component since it is a function and returns JSX. \nAlso this react component is defined inside another react component SampleComp. So the append props is only considered to be used inside inner react component.\nTo account for this case we could have considered any component declared inside another component to be a helper method.\nAlthough this would break few tests from a different rule (prop-types that actually is no-undefined-props) that allows for nested components definitions as a valid test case.\nclass DynamicHello extends Component {\n  render() {\n    const {firstname} = this.props;\n    class Hello extends Component {\n      render() {\n        const {name} = this.props;\n        return <div>Hello {name}</div>;\n      }\n    }\n    Hello.propTypes = {\n      name: PropTypes.string\n    };\n    return <Hello />;\n  }\n}\nDynamicHello.propTypes = {\n  firstname: PropTypes.string,\n};\nSo the question to maintainers @ljharb, @jseminck  whether we want to add the reported use case to the list of known issues/limitations for this rule suggesting few work arounds, or reconsider nested components tests like one above from prop-types rule or a better option.\nI created a PR to illustrate the issue.\n. @ljharb , this sounds good to me. I will create a PR to update docs for this rule adding known issues/limitations section. What SFC stands for?. @ljharb should we close this then \ud83d\ude09 . @ljharb should we close this then \ud83d\ude09 . @ljharb, looks like this will take some more time. Neither babel nor es6 parser gives any indication that {...props} is being used. And it has nothing to do with component being a thing (thanks for catching that issue with invalid spread for babel ).\nSo this\njs\n return <SomeComponent {...props} />;\nis parsed into:\n\nnote 0 children in arguments. If I use props without spread, I see children there.\nWhat dependency do you think this problem starts from? Would it be an eslint/espree issue?\nUpdate: Nevermind, it shouldn't have children it should have props. I will look into that and update PR. Thanks for your help!!. @ljharb sorry for so many updates. I squashed my change into 1 commit and it is ready for re-review. Thanks!. @lencioni, when would you be able to take a look at this PR?  This is my first PR for the repo so I am not sure what is the normal turn around here.\nThank you,\nDiana. @ljharb, no problem. Should be all set.. @ljharb , let's close this \ud83d\ude42 . @Robinfr It looks like your case works with master as well as with v7.1.0. Which version are you using?. @Robinfr It looks like your case works with master as well as with v7.1.0. Which version are you using?. @Robinfr, thanks for the updated example. It did uncover a bug in the rule.  I created a PR to fix it.  Stay tuned for the next release!. @Robinfr, thanks for the updated example. It did uncover a bug in the rule.  I created a PR to fix it.  Stay tuned for the next release!. Whoops. This branch is way behind master. Let me reopen this PR once it is up-to-date. . Whoops. This branch is way behind master. Let me reopen this PR once it is up-to-date. . @ljharb , I am done updating this PR. Thanks \ud83d\ude04 . @ljharb , I am done updating this PR. Thanks \ud83d\ude04 . @ljharb should be all set. thanks :). @dkrutsko generally it does. Do you have a complete use case I can take a look at?. Second code block was a bug with the latest release. But should be fixed on master.. @ljharb Thanks, I might have messed up my branches.... @ljharb  can you please close the ticket then #1233. Thanks!. Thanks @karl-run  for providing super concise repro example and also possible workarounds.\nThe problem was that flow props ignored plugin configurations skipShapeProps so it tried to validate it. So \"fix\" is ignoring shape props during validation.\nValidating shape props correctly is a whole different issue and is well known for this library.  I might look into that eventually \ud83d\ude42 \n. Whoops, I got carried away, closing too many tickets at once.\nNone of the cases  I added would work with skipShapeProps: false except for #933. Issue #1008 looks like a  legitimate error. I think the rest should be kept open if we want to fix flow props validation.  I updated a PR. thanks! . Done. Thanks. @ljharb updated. const { bools } = PropTypes are not supported. if it is a common use case I would prefer doing it  in a separate PR. @ljharb this should be ready then.  Except for import { bool } from 'prop-types' && const { bools } = PropTypes which will be tackled separately . @ljharb , FYI, this is ready for review.. @ljharb Ready for re-review\nclass Foo extends React.Component {\n  render() { return this.foo(); }\n  foo() {\n    return this.props.children; // should be warned when \"always\"\n  }\n} \nvar Hello = React.createClass({\n      render: function() {\n        return <Text>{this.props.foo}</Text>;\n      }\n    });\nTwo above examples are added to test cases. \nChanged should to must. I am not a big fan of must but I trust your judgement.\n. I think that never setting doesn't really makes sense for class component. As it would flag any\nconst { foo } = this.props.\nIn SFC never is only enforced within the argument.\nFor example this test is invalid:\n{\n    code: `const MyComponent = ({ id, className }) => (\n      <div id={id} className={className} />\n    );`,\n    options: [{SFC: 'never'}],\n    errors: [\n      {message: 'Must never use destructuring props assignment in SFC argument'}\n    ]\n  }\nwhile this one is valid:\n,{\n    code: `const MyComponent = (props) => {\n      const { id, className } = props;\n      return <div id={id} className={className} />\n    };`,\n    options; [SFC: 'never']\n  }\n\nI'm also wondering if class-based components and createClass components should have separate configurability?\n\nI would do it separately if it is a popular request.\nI added explicit always test cases (which match default ones). And few more tests for class components. Hope it covers everything.\n. @ljharb , btw I am squashing any new commits I add. It may look the last commit was 8days ago but I just pushed the change.. @ljharb, this is ready for review . @ljharb, this is ready for review . @ljharb anything else is missing for this PR?. @hendrikswan, yeah, but I don't have permissions to merge to master.. First of all for some reason the same test were copy-pasted  4 times. I had to remove this test all together because it was never validated correctly. Current implementation is not able to detect correctly nested definition of components (subRender technically is a react component). I don't think this is a common/idiomatic react style so I assume we shouldn't support it.  . this is the test reported for the issue. This didn't matter. But I updated the test so it is identical to the one reported.. Yeah, I agree it is not exactly an improvement. \nReason I added it - so usedPropTypes it is an empty array when there is no usedPropTypes instead of null. Otherwise anywhere we loop through it we would need to check if it is an array or not.\nI can remove it and add few checks in the rule file - I don't mind either way. Let me know what is preferable.. this component uses JSX spread  few lines above.So it needs babel.. yes, here es6 would do.. to detect usage of a spread operator (that is handled in JSXSpreadChild I added to the rule) SomeChild has to be a valid react component (this is a babel-eslint thing). Originally when component was invalid, babel didn't detect any props passed to it.. Just one place actually: \nlib/rules/no-unused-prop-types.js:236\njs\n    function isPropUsed(node, prop) {\n      for (let i = 0, l = node.usedPropTypes.length; i < l; i++) {\n        const usedProp = node.usedPropTypes[i];\n        if (\n.... as far as I can tell spread works with es6 but jsx spread inside a component does not. Simply removing babel and adding parserOptions fails with : message: 'Parsing error: Unexpected token ...', \nI am happy to try any suggestions you might have.\n```js \n  {\n    code: [\n      'const PagingBlock = function(props) {',\n      '  return (',\n      '    {...props}',\n      ' );',\n      '};',\n  'PagingBlock.propTypes = {',\n  '  nextPage: PropTypes.func.isRequired,',\n  '  previousPage: PropTypes.func.isRequired,',\n  '};'\n].join('\\n'),\nparserOptions: Object.assign({}, parserOptions, {ecmaVersion: 2017})\n}\n\nerror:js\n    AssertionError: Should have no errors but had 1: [ { ruleId: null,\n    fatal: true,\n    severity: 2,\n    source: '    {...props}',\n    message: 'Parsing error: Unexpected token ...',\n    line: 3,\n    column: 12 } ]\n      + expected - actual\n  -1\n  +0\n\n  at testValidTemplate (node_modules/eslint/lib/testers/rule-tester.js:415:20)\n  at Context.RuleTester.it (node_modules/eslint/lib/testers/rule-tester.js:545:25)\n\n``. responded above. I guess I have to add that the reason it worked before is that the component was invalid by itself so the parser wouldn't try to parse the props ofSomeChild`. And that way the linter didn't know that props are actually used. That was ok before this change (where components with 0 used props were simply not validated). If we want to validate components with no props used, we need to make sure that where they are actually used, the code is syntactically valid. \nIn other words if I keep this test as it is it would fail with nextPage and PreviousPage are not used error.. > I'm a bit confused\u2026 {...props} in a child context isn't anything; that shouldn't work. Spreading is a JSX attribute thing, and a JS iterable thing, and a JS object thing - but not a child thing.\nI guess it is getting late...  I am not sure I understand  what you mean .. But I agree regrdless\ud83d\ude03 . Oh I see, good point. Let me update the test so SomeChild is a thing then. I will look into creating the issue with babel-eslint.. Ok I will bring this back.. will be gone. Thanks.. Got it. Makes sense. Is ti ok if I delete these tests though. Do you agree that this rule technically doesn't support this use case.. The fix was easy. Changing type from JSXChildSpread to JSXAttribute spread...Thanks for catching this. I will go read about JSXChildSpread though... maybe it is some beta feature....  I reverted that change from Components file.. Done.. yeap. @jseminck , thanks for the review.  You are correct about some function. Updated it to be more concise. As for reduce I have only used it for very simple logic. If you can rewrite this fnc, I will be happy  to try it and copy paste your code if it works :). @ljharb added a comment here with some explanation for the change. LMK if there is a better place for it.. it didn't happen yet. But it is a fair concern.  I will update. \n. yeah, it is possible.. Done \ud83d\ude04 . Gone. Thanks!. yeah, it doesn't have any effect. The props are not shape. . Good point. Thank for taking a look at this!. Good idea !. I am not sure about your major release concern. Would releasing only SFC support require a major release? What's the problem eith having to do a major release?\nIrrespective of that I have only one use case for \"other\" component types as per issue #278 and I am not particularly keen about it.  Are you? Maybe it would make sense to have this rule for SFC only?. hm, what do you mean?. Ok, well in this case I can  try to add the rest of the logic to this pr.\nSo both of the component types will enforce context and props. Class component will in addition enforce state. \nConfig structure would be: { SFC: always/never/ignore,  class: always/never/ignore} (I don't like name class is there a better term?)\ndefault: { SFC: always, class: always }\nthere is also a nextProps, prevProps which I would ignore for now.\nDoes this make sense?\n. @ljharb, do you suggest createClass as additional option? So it would be [SFC, createClass, class]?  If so can it be done as a separate PR? Right now class option includes createClass. . hmmm, could you explain rationale behind that? To me this rule almost can be monolithic (cover all possible react components with a single setting). I can see the need for SFC vs Class components distinction, but not class vs createClass. What is the use case?  . I agree, technically if we are going to list component types, we should list them all. But even though it is very little code to be added to support the 3rd createClass option, I am not very comfortable adding a special config option for a deprecated functionality. Additionally the  difference in behaviour between class and createClass component doesn't seem to be related to what this rule is checking (in both props are referenced with this.props right, or am I wrong?).  \nSo seems like the single string option controlling all components is an acceptable solution for both of us and is common pattern across the library. I will update my pr shortly. . @ljharb I added an incremental change to switch to a single string option so it might be easier to review. . ",
    "HurricaneJames": "That will fix the immediate problem, but I think it is still problematic for anybody who is writing custom validators. Also, it seems somehow wrong to impose functionality from a separate third party library on a React linter. I assume the problem is because it is named shape and there is no way to know if it is React.PropTypes.shape, MyCustomValidator.shape, or even the badly spelled Raect.PropTypes.shape?\nThis was not a problem up through v2.5.0. What changed between v2.5 and 2.6 that this became a problem?\n. I just created an issue in the react-immutable-proptypes repo, HurricaneJames/react-immutable-proptypes#6. I think we can solve this by renaming shape to contains in ImmutablePropTypes. Looking at the eslint-plugin-react code, it appears that contains should bypass your sub-validation stuff. If I have time I might try to write something similar to shape that uses get/getIn to validate sub-props too, assuming you would be amenable to accepting such a PR?\n. ",
    "vanwagonet": "I was using 2.6.4. I updated to 2.7.0 and now I get:\nnode_modules/eslint-plugin-react/lib/rules/prop-types.js:474\n          propTypes.parent.type !== 'AssignmentExpression' &&\n                          ^\nTypeError: Cannot read property 'type' of undefined\n    at markPropTypesAsDeclared (node_modules/eslint-plugin-react/lib/rules/prop-types.js:474:27)\n    at node_modules/eslint-plugin-react/lib/rules/prop-types.js:596:9\n    at Array.forEach (native)\n    at EventEmitter.ObjectExpression (node_modules/eslint-plugin-react/lib/rules/prop-types.js:592:23)\n    at emitOne (events.js:82:20)\n    at EventEmitter.emit (events.js:169:7)\n    at Controller.controller.traverse.enter (node_modules/eslint/lib/eslint.js:724:25)\n    at Controller.__execute (node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (node_modules/estraverse/estraverse.js:495:28)\n    at EventEmitter.module.exports.api.verify (node_modules/eslint/lib/eslint.js:717:24)\n. Now I gotta track it down, that was linting my whole product's source code...\n. ok, looks like it was one of my distribution files that was supposed to be ignored that caused the error. I'm pretty sure giving you 827 KB of minified code isn't going to be very helpful.\nProperly ignoring that file, 2.7.0 fixes the original reported problem. Thank you!\n. ",
    "lambert-velir": "Is this a problem again?  I have the latest version installed eslint-plugin-react@3.3.1.\nI have a line: const product = this.props.products.find((p) => p.id === id);\nthat has a lint error 'products.find' is missing in props validation (react/props-types)\n. ",
    "rbardini": "I'm also facing this issue with eslint-plugin-react@3.3.1.\njs\nvar column = this.props.metadata.find(column => column.name === filterColumn.name);\nresults in 'metadata.find' is missing in props validation even though the metadata prop type is specified as PropTypes.arrayOf(PropTypes.object).\n. ",
    "kasperekt": "Yep, that was the case. Thank you @yannickcr \n. ",
    "CalebMorris": "Need to fix tests\n. Need to add tests\n. That seems like a good alternative to blanket ignoring, although I would want to be able to mix the configuration with the current method. Mainly for the case like the children prop that I ignore.\nMaybe use the _ key or some other reservation to specify a global ignored key with support for the exclusive form if they don't need the specific. Do you have any opposition to this?\n\"react/prop-types\": [2, { \n  \"ignore\": {\n    \"_\": [\"children\"],\n    \"user\": [\"get\"]\n  }\n}]\nAs to the discussion in #145 it doesn't look like there is a PR up for that, do you know if anyone has started one?\n~ Edit\nMore specificaly, if anyone was working for checking for custom validator on non-React.PropTypes props\n. @yannickcr Renamed. Any other suggestions?\n. ",
    "DanielSundberg": "Ok that solves the problem, I just copied the section from the readme. \nMy excuse will have to be that the format for the \"plugins\" section was slightly different from the other sections.\n. Changelog says \"Add jsx-intent rule\", so the rule seems to be named \"jsx-intent\"? Here you talk about \"jsx-indent\"?\nI'm not native in english but intent is something else than indent in my vocabulary...\nThe eslint rule for JS is called \"indent\".\n. Ok, I can see now that the rule is actually called \"jsx-indent\", perhaps just a typo in the changelog then...\n. ",
    "feross": "Thanks!\nOn Wed, Jul 15, 2015 at 4:01 PM Yannick Croissant notifications@github.com\nwrote:\n\nAfter testing, * does not seems to accept pre-release versions since npm\n2.\nI switched to >=0.8.0 || ~1.0.0-rc-0, it should do the trick.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/154#issuecomment-121772172\n.\n. Let's get this merged!\n. \n",
    "doctyper": "I'm still seeing this issue when trying to install eslint@^1.0.0-rc-1 + eslint-plugin-react@^2.7.1. Here are my dependencies for reference:\n\"dependencies\": {\n    \"eslint\": \"^1.0.0-rc-1\",\n    \"eslint-plugin-react\": \"^2.7.1\"\n  },\n  \"peerDependencies\": {\n    \"eslint-plugin-react\": \">=2.x\",\n    \"eslint\": \">=0.23.0\"\n  }\nAnd the error:\n```\n\u276f npm install\nnpm ERR! Darwin 13.4.0\nnpm ERR! argv \"node\" \"npm\" \"install\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v2.13.0\nnpm ERR! code EPEERINVALID\nnpm ERR! peerinvalid The package eslint@1.0.0-rc-1 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer eslint-plugin-react@2.7.1 wants eslint@>=0.8.0 || ~1.0.0-rc-0\n```\n. Please ignore, I immediately saw my problem :). Needed to update my eslint in peerDependencies.\n. Same, I don't think a deprecation should cause an lint failure.\n. ",
    "Daniel15": "Isn't the displayName automatically set by the JSX transformer? I've never set it manually on React.createClass-style React components.\n. Yeah, either of those are not ideal as they both create a new bound function on every single render call. Garbage collectors don't like that. I'd say that both of those patterns (.bind and arrow functions) should be caught by a lint rule :stuck_out_tongue: \nMaybe I'm old-school but I don't mind manually binding in the constructor (this._onClick = this._onClick.bind(this)). The autobind decorator @tleunen  linked to looks pretty fancy though.\n. A good variant of this rule would be to only allow setState from \"container\" components (ie. components with a \"Container\" suffix). The pattern we follow in my team (Facebook ads interfaces) is that UI components generally have no state and take everything via props, and container components wrap the UI components and connect them to stores. The container components only use state, no props. In this case we'd only want the \"no setState\" rule to apply to UI components, not container components.\n. > Can you also add the new rule to the README.md file?\nWill do :) Just let me know if any other changes are required, and I'll do all the updates at the same time.\n. Thanks! I just added the rule to the readme.\n. In general, a new function is created every time the \"function\" keyword is\nencountered, regardless of if you use bind or not. In your example, the\n\"bar\" function only exists inside the closure crested by the \"foo\"\nfunction. Every call to \"foo\" results in a new closure, and thus a new\ninstance of \"bar\" too. There's nothing special about bar, it behaves like\nany other variable.\nSome smarter optimisations could be done (such as having just one copy of\n\"bar\" with copy-on-write semantics in case you set properties on the\nfunction itself, like bar.executedAt = Date.now()) but I don't think any\nJavaScript engine does that today.\nSent from my phone.\nOn Mar 18, 2016 6:00 PM, \"Jason K Frank\" notifications@github.com wrote:\n\nHello ES6 experts!\n@Daniel15 https://github.com/Daniel15 mentioned above that:\nA bind call or arrow function in a JSX prop will create a brand new\nfunction on every single render. This is bad for performance...\nLooking at docs such as those from Mozilla, I can see that .bind()\ncreates a new function, corroborating what @Daniel15\nhttps://github.com/Daniel15 mentioned. However, I am curious about the\narrow function. I have not been able to find something that says that\nthe arrow function would do something similar as far as making a copy (and\nthus bad for performance in the render method). Can someone provide a link\nto a source explaining how the arrow function is similar to bind() in this\nregard?\nI also thought that maybe it had to do with how arrow functions get\ntranspiled - perhaps that they would end up using bind() once\ntranspiled. But I have not been able to confirm that either. For example, this\ntest\nhttps://babeljs.io/repl/#?evaluate=true&presets=es2015%2Creact%2Cstage-2&experimental=true&loose=true&spec=false&code=function%20foo()%20%7B%0A%20%20const%20bar%20%3D%20()%20%3D%3E%20%7B%0A%20%20%20%20console.log(this.id%2C%20arguments)%3B%0A%20%20%7D%0A%20%20bar()%3B%0A%7D%0Afoo.call(%7Bid%3A%2042%7D%2C%20'lol')%3B%0A\non Babel's online editor shows that this ES6:\nfunction foo() {\n  const bar = () => {\n    console.log(this.id, arguments);\n  }\n  bar();\n}\nfoo.call({id: 42}, 'lol');\ntranspiles to:\n'use strict';\nfunction foo() {\n  var _this = this,\n      _arguments = arguments;\nvar bar = function bar() {\n    console.log(_this.id, _arguments);\n  }; // <----------- Notice .bind() was not added\n  bar();\n}\nfoo.call({ id: 42 }, 'lol');\nIn summary, can someone please show how the arrow function has the same\nperformance problems that bind() suffers from in React's render method?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/274#issuecomment-198596305\n. Benchmark.js tests might not show the full story, as the main perf cost comes from garbage collection rather than the actual runtime performance of the code itself. It's possible that you're not hitting garbage collection while testing and thus not experiencing a GC pause. It's probably worth watching memory consumption while running the test.\n\nDoes your test mount a brand new component every time, or does it update the props on the existing component? I don't see the source code of the render function used in the benchmark suite, is that just the standard ReactDOM.render? A more realistic benchmark might just mount the component once and then do lots of setState calls to re-render the component. I'm not sure if that would affect the results though.\n\nThe React docs, on their \"Communicate Between Components\" page advocate using bind() to solve this passing-of-arguments problem.\n\nYeah, I'm not a fan of that part of the documentation. I may send a pull request to update it too.\n. Thanks for your benchmarks @dtinth! Very useful :)\n\nMostly it is that creating a new object or function to pass as props to child component every time sometimes breaks PureRenderMixin (or shallowCompare), as this.props.onClick !== nextProps.onClick is always the case. This is the only case I\u2019ve found where performance issue is noticeable.\n\nYeah, this is what I found too. I should have highlighted it more thoroughly in the docs. You could write your own shouldComponentUpdate but it's usually good to follow the \"happy path\" of allowing PureRenderMixin to work as-is.\nFeel free to send a pull request to make this clearer in the docs :) \n. The fact that creating a new function on render breaks PureRenderMixin is\nstill worth keeping in mind, especially for components that are high up in\na component tree.\nSent from my phone.\nOn Mar 19, 2016 7:26 PM, \"Jason K Frank\" notifications@github.com wrote:\n\n@dtinth https://github.com/dtinth Thanks for the follow up tests - very\nhelpful!\nBased on the tests that @dtinth https://github.com/dtinth has shown,\nI'm not seeing a benefit of using this linter rule, pending possible\ngarbage-collection performance research from @Daniel15\nhttps://github.com/Daniel15 or others. I'd love to hear from anyone\nthat has research on these issues.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/274#issuecomment-198833126\n. Duplicate of #240\n. You can make the callback a method on your component and then do ref={this._foo}.\n. @eadz - That's an oversight, the function() { } syntax should be caught by the lint rule too. I didn't implement that in the lint rule since I haven't actually seen that style in any live code.\n\nIn any case, you can just disable the lint rule if you don't agree with it :stuck_out_tongue: \n. Yeah, I've found that this is one of the main limitations of stateless components. If you have a callback that's the function of a prop, it will create a new function on every render, and there's not really a way to avoid that. I still use React.createClass syntax in all but the most basic components.\n. Performance is the main reason. Specifically, garbage collection. In a large app, it's good to try and reduce the number of allocations (eg. functions and temporary arrays) as pauses due to garbage collection make the app feel much slower whenever they occur.\n. @giacomorebonato  - No issue with that at all, although my personal choice is to write function handleClick(e) { as it looks more like 'regular' JavaScript and is shorter to write :) \n. > And if it's a Dom element it's fine to create on render?\nIt'll still cause issues with garbage collection if it's on a hot codepath, as it creates a brand new function on every render call. Smaller apps likely won't encounter those issues though.. Yeah, that name is much nicer :+1: \n. Yeah, that name is much nicer :+1: \n. Looks like this was implemented as require-render-return, at least for the simple cases.\n. Looks like this was implemented as require-render-return, at least for the simple cases.\n. I hit something similar again today:\njavascript\n      {sections.map(section => {\n        <AdsHelpTrayContentList\n          contentList={section.items}\n          key={section.title}\n          title={section.title}\n          onItemSelected={props.onItemSelected}\n        />\n      })}\nCan you see the problem?\n...\nI used { } instead of ( ) in the arrow function for the map call, so the function wasn't actually returning anything. \ud83d\ude20 . Sounds like an enhanced version of jsx-sort-props. There's already a callbacksLast configuration option.\n. Sounds like an enhanced version of jsx-sort-props. There's already a callbacksLast configuration option.\n. > Why are people doing this in the first place?\nThat is what I'd love to know \ud83d\ude1b  It's a pattern I stumbled upon today - I found ~100 places in our codebase that were doing something similar to this. A few of them were from people that didn't have much experience writing React code. I posted an group post in an internal group and someone said \"This is such an easy mistake to make when you're somewhat new to react\"\n\nprevents === optimizations and increases GC (this turns out to not be that bad for performance in actual practice).\n\nEvery little bit counts when you have a large app \ud83d\ude03  The app I deal with at work has over 300 Flux stores and probably thousands or tens of thousands of components in total. It's death by a thousand cuts if you have little GC-unfriendly patterns like this all over the place. Things like bind in render are particularly bad as an entire subtree could re-render unnecessarily.\nIt's fine if this is not merged, as I can just add it to our internal lint rules (we've already forked a few of the rules in this repo to adjust them to better suit our use cases). I just thought other people might find use in it.. This is a really na\u00efve check for bind (it just checks for calls to any method called.bind) but I figure it's Good Enough\u2122. I hope nobody has objects with methods calledbind` and uses them in this context. I imagine that's an edge case. :stuck_out_tongue: \n. Oops, thanks! I'll change that tomorrow. Not sure how I missed that :(\n. Alphabetical order please :smile: \n. \"NEVER\" in all-caps is a bit strong, maybe change it to \"Never\"? :). ^^ Further to that, you probably also want to catch this:\nconst {list} = this.props;\nlist.push('foo');. ",
    "fsmaia": "A related rule proposal: could we have a rule to component variable name matches filename?\nIt would be also nice to be able to enforce that component name matches parent folders too.\nMaybe it could have a parameter to choose naming convention.\nFor this scenario, an example:\n- Filename: src/components/Foo/Bar.js\n- Valid:\nclass FooBar extends React.PureComponent {}\n- Invalid:\nclass Foo extends React.PureComponent {}. Any advances? I have some spare time, may I help?. Any advances? I have some spare time, may I help?. Added some SFC examples in the documentation and tests. Had to change the rule source, 'cause unnecessary/commented code was useful right in SFC scenario.. @ljharb: Are we ready to merge? Any further work or change needed? Thanks. Done! Should I fix these typos in sort-prop-types and jsx-sort-props documentation too? Their introduction are identical.. ",
    "donabrams": "Ooh, I thought this was extracting React.DOM instead of just the render methods (thus affecting jsx). The beta build in NPM supports your take. Sorry about that!\n. This is definitely still useful to avoid warnings, but not as critical as I thought previously (silently ignore the attribute).\n\n. The aria-* restriction could go in js-a11y, but the data-* rules would be irrelevant there. This is also clearly a react/jsx constraint and not an accessibility helper which is why it's documented in the 2nd paragraph of https://facebook.github.io/react/docs/dom-elements.html rather than just in https://facebook.github.io/react/docs/accessibility.html\nCurrently this rule does apply to custom AND host components. I could have restricted it to just host/HTML components, but the performance would suffer and complexity of the rule would increase with little reward: I find it very unlikely that custom components would have an attribute key named data-* or aria-* except as pass-throughs to HTML components.. ",
    "evandavis": "Has this been updated on NPM? I'm still getting the error.\n. My hero. ",
    "cassus": "I see this style spreading, it was in some presentations on React Europe conf. It's also the recommended style in https://github.com/gaearon/redux\n. Good workaround, thank you!\nShall we leave this issue open?\n. ",
    "TamerShlash": "@moretti how were you able to bypass the issue?\n. @moretti @yannickcr thanks, I actually had a bug in my code, my fault :)\n. @yannickcr when running:\nstandard && webpack --config webpack.prod.js\nIt crashes with:\n```\nstandard: Unexpected linter output:\nTypeError: Cannot read property 'type' of undefined\n    at markPropTypesAsDeclared (/usr/local/lib/node_modules/standard/node_modules/eslint-plugin-react/lib/rules/prop-types.js:450:27)\n    at /usr/local/lib/node_modules/standard/node_modules/eslint-plugin-react/lib/rules/prop-types.js:572:9\n    at Array.forEach (native)\n    at EventEmitter.ObjectExpression (/usr/local/lib/node_modules/standard/node_modules/eslint-plugin-react/lib/rules/prop-types.js:568:23)\n    at EventEmitter.emit (events.js:129:20)\n    at Controller.controller.traverse.enter (/usr/local/lib/node_modules/standard/node_modules/eslint/lib/eslint.js:724:25)\n    at Controller.__execute (/usr/local/lib/node_modules/standard/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/usr/local/lib/node_modules/standard/node_modules/eslint/node_modules/estraverse/estraverse.js:495:28)\n    at EventEmitter.module.exports.api.verify (/usr/local/lib/node_modules/standard/node_modules/eslint/lib/eslint.js:717:24)\n    at processText (/usr/local/lib/node_modules/standard/node_modules/eslint/lib/cli-engine.js:201:27)\nIf you think this is a bug in standard, open an issue: https://github.com/feross/standard\n```\nHowever, when running:\nnpm run build\nIt gives proper error reporting:\n```\n\n@0.0.0 build /Users/tamer/git/project/public\nstandard && webpack --config webpack.prod.js\n\nstandard: Use JavaScript Standard Style (https://github.com/feross/standard)\n  /Users/tamer/git/project/public/app/components/pages/Users.jsx:188:10: Missing space before function parentheses.\nnpm ERR! Darwin 14.3.0\nnpm ERR! argv \"node\" \"/usr/local/bin/npm\" \"run\" \"build\"\nnpm ERR! node v0.12.4\nnpm ERR! npm  v2.10.1\nnpm ERR! code ELIFECYCLE\nnpm ERR! @0.0.0 build: standard && webpack --config webpack.prod.js\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @0.0.0 build script 'standard && webpack --config webpack.prod.js'.\nnpm ERR! This is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     standard && webpack --config webpack.prod.js\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/tamer/git/project/public/npm-debug.log\n```\nI'm not sure which version that happened with, but since I didn't do any updates, it should be the same as the current which is 2.7.1.\nSorry if that's not helpful, I'm still new to the modern JS world.\n. ",
    "guocheng": "Got it \n. ",
    "jbrumwell": "Just ran into this same problem, we have a render method declared but it doesn't return a JSXElement directly so it gets ignored (sort-comp rule);\nsomething along the lines of;\n```\nrender() {\n   const method = this.state.loading ? 'renderLoading' : 'renderList';\nreturn this method ;\n}\n```\n. ",
    "epmatsw": "So I'm running into this issue in a slightly different variant. I'm actually looking at running sort-comp on the output from CJSX, which gives me a render which looks like\nreturn React.createClass({\n  render: function() {\n    return React.createElement(\"div\", null, this.props.test);\n  },\n  displayName : 'Table'\n});\nBecause the render contains compiled JSX rather than actual JSX, it gets skipped.\n. I'm also unfortunately not sure what code exactly is triggering this. It's coming from somewhere in our gulp-eslint process, which makes it a bit hard to track down :/\n. I think I've figured it out. We're destructuring React to get {PropTypes}, so the propTypes that triggers the crash looks like:\npropTypes: {\n        items: PropTypes.arrayOf(PropTypes.object).isRequired,\n        renderCard: PropTypes.func.isRequired,\n        actions: PropTypes.object,\n        multiActions: PropTypes.object\n      }\nI would guess that the plugin expects only React.PropTypes, which causes the error.\n. Then again, maybe not. Changing to React.PropTypes did not seem to fix it.\n. Not entirely fixed it seems.\nReact.createClass({\n  propTypes: {\n    options: optionsType\n  }\n});\n. ~~Should be fixed by #234, but that hasn't made it into a release yet.~~\nWhoops, that was wrong probably.\n. This is a pretty frustrating bug actually. I'm getting multiple display-name errors per file now, because functions like _renderRow that return JSX and are used inside of a component's render are being detected as their own components. I don't know how to fix it, but I feel like sub-renderers like my case are a reasonably common pattern...\n. This is a pretty frustrating bug actually. I'm getting multiple display-name errors per file now, because functions like _renderRow that return JSX and are used inside of a component's render are being detected as their own components. I don't know how to fix it, but I feel like sub-renderers like my case are a reasonably common pattern...\n. @iam4x That's an interesting question too. There's no mention of it in the 0.14 release notes, but it seems like displayName should be supported. It's a semi-defacto-standard not-React-specific thing after all.\n. @iam4x That's an interesting question too. There's no mention of it in the 0.14 release notes, but it seems like displayName should be supported. It's a semi-defacto-standard not-React-specific thing after all.\n. The displayName can be calculated implicitly by using the function name, or specified explicitly using displayName. The react dev tools will use displayName for function components if provided (http://codepen.io/epmatsw/pen/dYZxwB), which makes me think that that's an intentional feature of function components.\nYou can write \"anonymous\" traditional components, but it's generally agreed as a bad practice, as evidenced by this rule. Since from a debugging perspective the two types of component are indistinguishable, I don't think it makes sense to treat them differently. Perhaps a reasonable compromise would be to add an opt-out flag to allow function components to not have a displayName?\n. The displayName can be calculated implicitly by using the function name, or specified explicitly using displayName. The react dev tools will use displayName for function components if provided (http://codepen.io/epmatsw/pen/dYZxwB), which makes me think that that's an intentional feature of function components.\nYou can write \"anonymous\" traditional components, but it's generally agreed as a bad practice, as evidenced by this rule. Since from a debugging perspective the two types of component are indistinguishable, I don't think it makes sense to treat them differently. Perhaps a reasonable compromise would be to add an opt-out flag to allow function components to not have a displayName?\n. Do any of the suggestions in this issue help? It looks like PropTypes is not being picked up as the actual PropTypes, which is making eslint think it should show up in the \"everything else\" group, just before render, and is making it miss on the prop-types rule as well.\n. Although I haven't used static in my code before, that thread indicates you'll need to use babel-eslint as your parser, and will need to enable es7 features within it. I would refer to the eslint and babel-eslint documentation for instructions on that, although it appears that there are some snippets in the other issue that could be helpful.\nAlso, it's totally possible that I'm barking up the wrong tree. Just seemed like a similar issue :)\n. We're still using ES5-style classes (compiled Coffeescript \ud83d\ude33), so that's probably something to do with this. The offending code looks like:\n```\nTest.prototype.renderCell = function(item, index) {\n        return React.createElement(\"td\", {\n          \"key\": index\n        }, item.title);\n      };\n  Test.prototype.render = function() {\n    return React.createElement(\"tr\", null, this.props.items.map(this.renderCell));\n  };\n\n```\nFull Gist: https://gist.github.com/epmatsw/350777c3731de0f77fba\nAnd yeah, bad suggestion on the first one. Context totally slipped my mind.\n. We're still using ES5-style classes (compiled Coffeescript \ud83d\ude33), so that's probably something to do with this. The offending code looks like:\n```\nTest.prototype.renderCell = function(item, index) {\n        return React.createElement(\"td\", {\n          \"key\": index\n        }, item.title);\n      };\n  Test.prototype.render = function() {\n    return React.createElement(\"tr\", null, this.props.items.map(this.renderCell));\n  };\n\n```\nFull Gist: https://gist.github.com/epmatsw/350777c3731de0f77fba\nAnd yeah, bad suggestion on the first one. Context totally slipped my mind.\n. The reason it's getting flagged is that the display-name rule treats functions that return JSX as stateless react components (link), since they sort of technically could be. You might be able to get around it by turning on the acceptTranspilerName option. This is yet another case where it might be good to have an ignoreStatelessFunctionComponents option, but I'm not sure what @yannickcr's thoughts on that are.\nTangential question: what font is that? I love the === and => rendering.\n. ",
    "probablyup": "Nevermind, I see it's just named something different. Sorry!\n. ",
    "dozoisch": "@yannickcr With eslint 1.1.0, it doesn't match anymore though!\n. So weird... Seems like a bug!\n. If people that use flow can use my branch and tell me if it works properly for them, that would be cool! It's based on 6.0.0-alpha.1\n\"eslint-plugin-react\": \"https://github.com/dozoisch/eslint-plugin-react#typeannotations\",\n. @ljharb I suspect it could. I'm not sure how the ast looks for these. I'm using the typeAnnotation field from the ast which seems generic. I have no problem renaming if that's the case! But I was following the name of the ast prop.\nEdit: TypeScript nodes don't seem to be called TypeAnnotations in babel.\n. Any update on this! I can change the rule name if that is what is needed.\n. @yannickcr Anything missing/to change? I'd rebase the branch at the same time.\n. @yannickcr Let me know if you want me to do anything. I'll rebase if everything is ok\n. @yannickcr Let me know if you want me to do anything. I'll rebase if everything is ok\n. @yannickcr the change it introduces is that it will now check for type annotation fields to be present a the top by default. \nI can create the type category (like it is right now) but not include it in the default configuration, if that being on by default is not a wanted behavior.\n. @yannickcr the change it introduces is that it will now check for type annotation fields to be present a the top by default. \nI can create the type category (like it is right now) but not include it in the default configuration, if that being on by default is not a wanted behavior.\n. Perfect will do that today :)!\n. Perfect will do that today :)!\n. @yannickcr rebased & updated! Let me know what you think!\n. @yannickcr rebased & updated! Let me know what you think!\n. Ok, fixed the class issue!\n. Ok, fixed the class issue!\n. @yannickcr :) should be good now!\n. @yannickcr :) should be good now!\n. whoop true that! You're  actually right.\n. It gets completely removed!\nhttp://babeljs.io/repl/#?evaluate=true&lineWrap=false&presets=es2015%2Ces2015-loose%2Creact%2Cstage-0&experimental=true&loose=true&spec=false&code=type%20Props%20%3D%20%7B%20a%3A%20number%20%7D%3B%0Aclass%20B%20%7B%0A%20%20props%3A%20Props%3B%0A%20%20%0A%7D\n. ",
    "madcapnmckay": "We're also blocked from updating to v1.1.0. Any chance we can get this dependency updated?\nNPM v2.13.3\n. ",
    "raybooysen": "Thank you, I didn't spot this on the first read.\n. ",
    "vilppuvuorinen": "I run into the same issue while working with feross/standard. I ended up adding a propTypes.parent check to the three condition blocks two of which are described above.\n. Unfortunately at least I am unable to provide that. I cannot find a commit where the error was present and the lacking verbosity would have made it almost impossible to narrow the responsible code down. However, I had to disable linting for a couple of weeks due to this error. Luckily it is quite simple to fix by fiddling through node_modules and does not seem to be present currently.\n. ",
    "janpaul123": "I have another case that triggers this error message:\njs\nconst SomeComponent = React.createClass({\n  propTypes: SomeOtherComponent.propTypes,\n});\nThis is a common pattern in our codebase for wrapping components that transparently pass through properties to a child component.\n. Sweet, thanks!\n. Nice suggestion. We would want to use this at @remix with the initialRegex option! \ud83d\udc4d . Alternatively, the forbid-component-props rule could be more like the forbid-prop-types rule, where we check it when defining prop types, instead of when instantiating a component. That way you can easily ignore the rule in legitimate cases, without having to ignore the the rule every single time you use the component.. ",
    "nkbt": ":+1: \n. @tleunen why?\n. Oops sorry, wrong repo\n. Yep would be nice to fix this one.\n``` js\nimport H1 from '../../../UI/Elements/H1';\nimport A from '../../../UI/Elements/A';\nconst TermsOfService = () => (\n  \nTerms of Service\n\n);\n```\n. Fixes #505\nCan we get it in please?\n. @yannickcr yeah, I completely understand that from the AST point of view, but there is a subtle difference between a component and lambda.\nSimplified example:\n``` js\n// This one needs props validation, it is a component\nconst IAmStateless = ({name}) => (\n  {name}\n);\nIAmStateless.propTypes = {\n  name: React.PropTypes.string\n};\nconst JustContainer = ({children: render}) => (\n  {render({text: 'Whatever'})}\n);\n// Lambda inside does not need props validation, it is lambda\nconst App = () => (\n  \n    {({text}) => }\n  \n);\n```\nThe other problem is that you cannot really specify propTypes for lambdas =). Unless using something really weird like Object.assign\nWe ended up disabling the rule in place temporarily, but that is not something we would like to do all the time.\nCan the rule be updated to check if it is lambda and not assigned to any variable? I think it is legit case to automatically skip propTypes check (since you cannot really specify them)\nThanks!\n. Thanks!\n. ",
    "lamuertepeluda": "bash\nUNMET PEER DEPENDENCY eslint@^2.0.0 || ^3.0.0\nwith eslint v3.3.1\nShouldn't peerDependency have been removed or is this plugin not supposed to work with eslint 3.3.x?\n. Npm v3.10.3\nNode v6.4.0\n(latest)\nTried both local (as devDependency) and global installation of eslint-plugin-react. Eslint installed globally.\n. @ljharb do you mean is global installation that causes troubles? \nI use to install eslint and plugins globally because I have several projects managed in the same way, and I don't want to have node_modules replicated 100 times in my dev directory. Plus, I use nvm to manage node versions, I do eslint --init, ...\nProbably this is more a npm issue, then, because semver also returns correctly.\n. ",
    "greim": "Sometimes custom elements pass className through to a DOM output element. For example react-router's <Link/>:\nhtml\n<Link class=\"foo\"></Link>\nThis is an error, but no-unknown-property won't catch it because it isn't a DOM element. Is there a blanket way to flag all instances of class= since it's almost always an error?\n. @lencioni This works, thank you!\n. ",
    "Primajin": "Sorry for digging up this old issue here, but is there a way to lint against no-known-property?\nBear with me for a second: What I mean is when people pass props down to custom components, but use attribute names, that are actually native HTML ones, like id,title,name, disabled and so on. There are global ones and ones that can only be used on specific elements. See List - so it would also be good to lint against \"this attribute is not allowed on this element\"\njsx\n<p title=\"See this when you hover me\">Everything is fine here</p>\nvs.\njsx\nimport P from '../myCustomComponent';\n...\n<P title=\"See this when you hover me\">Is this an attribute or prop?</P>\nExpected\njsx\nimport P from '../myCustomComponent';\n...\n<P hoverTitle=\"See this when you hover me\">This is better</P>\nThanks for consideration.\nEDIT: Ohhh wait isn't that https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-component-props.md ?. Cool, opened #1990 . Sounds great. ",
    "xjamundx": "Sorry for the lack of test!\n. Sorry for the lack of test!\n. I think this is a good idea\n. because of this line import { connect } from 'react-redux' and also the connect()\n. @ljharb I'd argue redux is pretty huge https://www.npmjs.com/package/redux, but you're right a redux specific plugin may make the most sense. Wondering how it would work with the existing propTypes validation if it was separate though \ud83e\udd14 \n. ",
    "fantasy8-me": "As eslint-plugin-react itself is a plugin of eslint, and changes in eslint did have chance to break it's plugin, I think keep it in peerDependency still make sense.\nDepends on the chance that changes in eslint might break eslint-plugin-react, use a less strict version might be a good idea. At least it gives the flexibility to user of choosing a proper eslint version.\nFor my case, eslint 1.1.0 fix a bug that border me much, so raised this issue\n. ",
    "bbirand": ":+1: \n. :+1: \n. ",
    "jimbolla": "Digging through the eslint source code, I found this line where it seems to resolve that alias. It looks like right now, that functionality is hardcoded to that one name, with no obvious way of adding your own aliases. I'm guessing in v1, use of this feature would look something like:\n{\n    \"extends\": [ \"eslint:recommended\", \"node_modules/eslint-plugin-react/conf/recommended.json\" ],\n}\nAnd then conf/recommended.json would be something like:\n{\n    \"ecmaFeatures\": {\n        \"jsx\": true,\n    },\n    \"rules\": {\n        \"react/display-name\": 1,\n        \"react/jsx-boolean-value\": 1,\n        \"react/jsx-curly-spacing\": 1,\n        \"react/jsx-max-props-per-line\": 1,\n        \"react/jsx-indent-props\": 1,\n        \"react/jsx-no-duplicate-props\": 1,\n        \"react/jsx-no-undef\": 1,\n        \"react/jsx-quotes\": 1,\n        \"react/jsx-sort-prop-types\": 1,\n        \"react/jsx-sort-props\": 1,\n        \"react/jsx-uses-react\": 1,\n        \"react/jsx-uses-vars\": 1,\n        \"react/no-danger\": 1,\n        \"react/no-did-mount-set-state\": 1,\n        \"react/no-did-update-set-state\": 1,\n        \"react/no-multi-comp\": 1,\n        \"react/no-unknown-property\": 1,\n        \"react/prop-types\": 1,\n        \"react/react-in-jsx-scope\": 1,\n        \"react/require-extension\": 1,\n        \"react/self-closing-comp\": 1,\n        \"react/sort-comp\": 1,\n        \"react/wrap-multilines\": 1\n    }\n}\n... or whatever is decided to be the \"recommended\" rules to use.\n. ",
    "mattyod": "I was getting an error thrown as i was -1. To be honest I didn't dig much deeper as this got my lint system working on .jsx files with an npm command:\n\"lint\": \"eslint . --ext .jsx,.js\"\n. I was getting an error thrown as i was -1. To be honest I didn't dig much deeper as this got my lint system working on .jsx files with an npm command:\n\"lint\": \"eslint . --ext .jsx,.js\"\n. Thanks for the quick resolution.\n. Thanks for the quick resolution.\n. ",
    "moroshko": "197 Looks like a good start\n. #197 Looks like a good start\n. @yannickcr When can we expect to see this on npm?\n. @yannickcr When can we expect to see this on npm?\n. @yannickcr Thanks! Looking forward to it.\n. @yannickcr Thanks! Looking forward to it.\n. ",
    "markdalgleish": "Ha, didn't realise you opened this issue! Perfect timing :smile: \n. Ha, didn't realise you opened this issue! Perfect timing :smile: \n. #197 was merged, this issue can be closed now :tada: \n. #197 was merged, this issue can be closed now :tada: \n. :+1:\nI think merging it in and improving it gradually is a good idea. I'd be keen to make this more comprehensive.\n. :+1:\nI think merging it in and improving it gradually is a good idea. I'd be keen to make this more comprehensive.\n. ",
    "michaelBenin": "I'm actually running into the opposite.\nI'd like to enforce parens in the return statement.\nFor example:\njsx\nrender() {\n    return (\n      <html>\n      <Head />\n      <body>\n      <Header />\n      <main className=\"main\" role=\"content\">\n        {this.props.children}\n      </main>\n      <Footer />\n      <script src=\"//localhost:35729/livereload.js\" async></script>\n      <script src=\"//localhost:3001/static/bundle.js\" async></script>\n      </body>\n      </html>\n    );\n  }\nThis way my html stays nicely indented and readable. \nBut the parens are enforced in my jsx, it says this is breaking the rule. \n. ",
    "bartvde": "Okay, thanks for the feedback. I'll do just that for now.\n. thanks, that was part of the problem. Then I ran into https://github.com/eslint/eslint/issues/4102 but not an issue for here.\nThanks again for pointing me in the right direction.\n. ",
    "mkenyon": "I noticed that this is a duplicate of #133.\n(Though I think it's a good idea.)\n. ",
    "gajus": "Sorry, you are right. It would be:\njs\n<div foo={`foo`} />\n. I have raised an issue with babel, https://github.com/babel/babel/issues/2309. Lets keep this open until Babel decision is made.\n. @markdalgleish Can you be more specific?\n. > the function need to return some JSX or a call to React.createElement\n@yannickcr another method would be to check if the first parameter is props, as that would be almost always the case by convention.\njs\n(props) => {};\n. @yannickcr still in the plan to release this over the weekend?\n. > @gajus instead of disabling the rule, why not add a propType for this prop?\nI wish I'd remember. There was a reason, I cannot think what it was off top my head.\n. Reading the error more closely, it is looking for + property in defaultProps, not children.\nThis appears related to https://github.com/yannickcr/eslint-plugin-react/issues/961.\nA bug.. @yannickcr can this be assigned a bug label?. ",
    "alawatthe": "Thank you for the quick answer :-) and sorry for having that typo in there -.-\nWhen looking at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static and http://www.ecma-international.org/ecma-262/6.0/#sec-static-semantics-isstatic, it looks like the =is also not totally right, as static only allows method definitions...\nProbably I should move the propTypes out of the class.\n. Thanks again :heart_eyes:\n. ",
    "catalin-luntraru": "You can always use ES6 getters, so the class becomes\nexport default class Greeting extends React.Component {\n  static get propTypes() {\n    return {\n       count: React.PropTypes.number.isRequired\n    }\n  }\n  render () {\n    return <h1>Hello, world! {this.props.count} greetings from me!</h1>;\n  }\n}\n. @ljharb I couldn't find anything on google about performance issues. Care to share?\nThe maintainability part is very subjective.\n. @ljharb Thanx for the links. I learned something new today.\nSo I guess the best option here is to use Greeting.propTypes\n. ",
    "ChadRidings": "Ran into this today while building a boilerplate using React 16 (Webpack 4, Babel 7) ...\nIf the solution is declare propTypes outside of the class, then I have no issues with that solution.\n```javascript\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nexport default class Taco extends Component {\n    render() {\n        return (\n            {this.props.taco.sauce}\n        );\n    }\n}\nTaco.propTypes = {\n    taco: PropTypes.shape({\n        sauce: PropTypes.string\n    })\n};\n```. @joshuapinter I have transform-class-properties working fine in my build if you want to use it as a boilerplate for your project.  At the very least it will help you understand how to config which files to play together.  Here...\nin package.json...\n{\n  \"name\": \"chads_react_boilerplate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A React boilerplate.  React 16, Webpack 4, Babel 7\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --open --mode development\",\n    \"build\": \"webpack\"\n  },\n  \"author\": \"Chad Ridings\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.4.2\",\n    \"react-dom\": \"^16.4.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.0.0\",\n    \"@babel/plugin-transform-runtime\": \"^7.0.0\",\n    \"@babel/preset-env\": \"^7.0.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.0.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-eslint\": \"^9.0.0\",\n    \"babel-loader\": \"^8.0.2\",\n    \"css-loader\": \"^1.0.0\",\n    \"eslint\": \"^5.5.0\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"node-sass\": \"^4.9.3\",\n    \"react-svg-loader\": \"^2.1.0\",\n    \"sass-loader\": \"^7.1.0\",\n    \"style-loader\": \"^0.23.0\",\n    \"webpack\": \"^4.17.2\",\n    \"webpack-cli\": \"^3.1.0\",\n    \"webpack-dev-server\": \"^3.1.7\"\n  }\n}\nin your .babelrc file...\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-react\"\n    ],\n    \"plugins\": [\n        \"@babel/plugin-transform-runtime\",\n        \"@babel/plugin-proposal-class-properties\"\n    ]\n}\nin your .eslintrc file...\n{\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n        \"ecmaFeatures\": {\n            \"jsx\": true,\n            \"modules\": true\n        }\n    },\n    \"env\": {\n        \"amd\": true,\n        \"browser\": true\n    },\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\"\n    ],\n    \"settings\": {\n        \"react\": {\n            \"pragma\": \"React\",\n            \"version\": \"16.4.2\"\n        },\n        \"propWrapperFunctions\": [ \"forbidExtraProps\" ]\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"rules\": {\n        \"semi\": 2,\n        \"react/jsx-uses-react\": \"error\",\n        \"react/jsx-uses-vars\": \"error\"\n    }\n}\nand in your webpack.config file ...\n```\nconst webpack = require('webpack');\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        filename: 'bundle.js',\n    },\n    devServer: {\n        inline: true,\n        contentBase: './dist',\n        port: 8080\n    },\n    module: {\n        rules: [\n            {\n                test: /.js$/,\n                exclude: /(node_modules)/,\n                loader: 'babel-loader',\n                options: {\n                    'presets': [\n                        '@babel/preset-env',\n                        '@babel/preset-react'\n                    ]\n                }\n            },\n            {\n                test: /.css$/,\n                use: [\n                    { loader: 'style-loader' },\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            includePaths: ['./src/styles']\n                        }\n                    }\n                ]\n            },\n            {\n                test: /.scss$/,\n                use: [\n                    { loader: 'style-loader' },\n                    { loader: 'css-loader' },\n                    {\n                        loader: 'sass-loader',\n                        options: {\n                            includePaths: ['./src/styles']\n                        }\n                    }\n                ]\n            },\n            {\n                test: /.svg$/,\n                use: [\n                    { loader: 'babel-loader' },\n                    {\n                        loader: 'react-svg-loader',\n                        options: {\n                            jsx: true\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n```. ",
    "joshuapinter": "@ChadRidings Is there any issues with moving the Taco.propTypes declaration above the export default class Taco extends Component {?\nI find it more intuitive to find out what a class expects for props as close as possible to the start of the class definition.. @ljharb Yuk. \ud83e\udd2e I'll wait get the transform-class-properties plugin working. Thanks!. Really appreciate that, @ChadRidings. We're using a CRA app that isn't ejected so we don't have access to .babelrc or webpack.config. However, we're using react-app-rewired to inject some plugins so maybe I can get it working through that.. ",
    "hallister": "This is actually fixable by wrapping the Tag in a React.createElement and it will work for any element (including strings) so closing this.\n. Thought this was fixed, but it is not. If the return function of the render is a React.createElement the react/prop-types validation simply won't fire at all:\njavascript\nexport class Test extends React.Component {\n    render() {\n        return React.createElement(\n            'div',\n            this.props,\n            this.props.children\n        );\n    }\n}\nreact/prop-types won't ever fire if you return a ReactElement this way. I've tested this with several other props as well to no avail. Putting a return (<div/>); above the return will fire all react/prop-types properly.\n. Just bumped to 3.3.2 and still no luck. Here's a gist of a simple React (es6 + experimental) that doesn't throw any prop-type warnings/errors:\nhttps://gist.github.com/hallister/7a450c921a9907a87cd9\n. Hey thanks for the versions, didn't realize I was running on a fairly dated eslint (whoops!). Problem solved.\n. ",
    "playpauseandstop": "I believe all you need is using static propTypes property instead.\n. Yep, I want be able to configure two different styles for self-closing and non-self-closing tags.\n. I ran into same problem today with this code,\njs\n  render() {\n    const {label} = this.props;\n    return <label className=\"...\">{label}</label>;\n  }\nFrom my perspective it happens, cause ESLint seeing defined label var in current scope and considers warning for pascal-case in <label> JSX tag.\nps. I fixed the error with const {label: labelText} = this.props;\n. ",
    "iamstarkov": "but I get it, thank you\n. ",
    "evocateur": "+1 for splitting them up.\n. No problem, glad I could help!\n\nOn Sep 16, 2015, at 01:52, Yannick Croissant notifications@github.com wrote:\nGreat! Thank you very much for this!\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "EdHubbell": "You are absolutely correct - Using a local .eslintrc file solved the issue for me. Thanks, @yannickcr - I'm seeing all kinds of linting errors in my .jsx files now. Looking forward to attacking them.\nThanks for the help and the excellent library. ~Ed\n. ",
    "oluckyman": "sorry I was not clear. I mean that jsx-curly-spacing: [2, 'always'] enforce space padding inside curly braces. Like so:\njsx\nattr={ true }\nit is ok while inside curly braces you have variables/string/numbers. But the objects are space padded too:\njsx\nobj={ { attr: true } }\nI would like to have ability to collapse these curly braces but still have jsx-curly-spacing: [2, 'always'].\nIn other words, this snipped should be valid:  \njsx\n<Component\n  key={ i }\n  title={ 'Component ' + name }\n  style={{ color: \"black\" }}\n  someProp={{ one: 1, two: 2 }}\n  />\n. thanks, it would be great! \ud83d\ude4f\n. ",
    "SystemParadox": "As part of this would it be possible to add an exception for closing brackets in multiline expressions?\nLike this:\n<div>\n    { isFoo && (\n        <Foo />\n    )}\n</div>\nPerhaps the most sensible solution to this would be to add an option to make jsx-curly-spacing ignore multiline expressions completely?\nThanks\n. Oops my bad. Should be sorted now. Thanks.\n. My reasoning is that \"must\" is absolutely not appropriate for warnings as it is misleading. The reverse is not true - \"should\" can also be used for errors without causing confusion. \"must\" is very definite, whereas \"should\" is a more lenient and flexible term.\nAdditionally:\n- eslint is primarily and linting and style tool. It is far more likely that rules will be configured as warnings rather than errors, as they are not essential for program correctness\n- even rules configured as errors are not necessarily fatal, depending how eslint is being used. This is the case in my setup, where eslint is run after the normal compilation step.\n- the sort-comp rule in particular makes very little sense as an error and is likely to only ever be used as a warning\nI haven't noticed any other instances yet, but at the moment this rule is causing confusion both for me and my coworkers.\nThanks.\n. Excellent. Thanks very much.\n. ",
    "mjw56": "Thanks @yannickcr, still groking ESLint. Will read up on that link. Thanks again for making this plugin.\n. ",
    "mik01aj": "+1, I have the same problem. \nI also type React.propTypes instead of React.PropTypes,  function instead of func, boolean instead of bool and I'm sometimes tempted to type obj instead of object.\n. :+1: Thanks!\n. +1. I often use _.noop as a handler in my tests. I'd like to ignore this specific case.\n. should I open another issue for making this regex configurable so that I can exclude _.noop?\n. @lencioni, I can't now. Maybe next week. If anyone else would like to work on it, please go ahead :)\n. That's why I didn't write \"you MUST disable this rule\". I see it like a suggestion.\n. Okay. Perhaps you can just propose some other wording to mention the possible rule overlap?\n. ",
    "willklein": ":+1: I have done this a lot. The abbreviations are inconsistent.\nI was presenting on how to write lint rules at my React user group last night, and we live coded a first pass: https://github.com/willklein/scaling-best-practices/commit/901534ba2cdb2f4a1de190e018d4a5bb4b1c9833\nNeeds more test cases and a few conditions. I'll see if I can get this wrapped up in the next week.\n. This just bit me... do we ever mark rules as unreleased in the README? Would we be open to that?. Cool, that's a good point. I have this terrible habit of referring to READMEs on GitHub as the documentation. Not being sarcastic, it's just my tendency. \ud83d\ude04 . ",
    "samsch": "Bumping an old issue with a new case:\njsx\nclass A extends React.Component {\n  render() {\n    return <a href={this.props.href} >{this.props.children}</a>;\n  }\n}\nA.PropTypes = {\n  href: React.PropTypes.string.isRequired,\n  children: React.PropTypes.node.isRequired,\n}\nThis code will be linted by react/prop-types as missing prop types for href and children. The subtle problem here is that A.PropTypes = ... should be A.propTypes = ....\nCould this rule find and warn/error on a case where prop types are being set in a component property other than propTypes?\n. The fix in 7.12.3 works for export default React.memo(Component);, but still gives a false positive if you wrap the function directly:\n```jsx\nimport React from 'react';\nconst Test = React.memo(props => (\n  {props.children}\n));\nexport default Test;\n``. This led me on a bit of a chase around for a bit too. An explicit note thatsettings` is a top level config item in the eslint config would be great, perhaps referencing https://eslint.org/docs/user-guide/configuring#adding-shared-settings\nIt would also be helpful to know if what's shown is the effective default if you don't set anything yourself.. This led me on a bit of a chase around for a bit too. An explicit note that settings is a top level config item in the eslint config would be great, perhaps referencing https://eslint.org/docs/user-guide/configuring#adding-shared-settings\nIt would also be helpful to know if what's shown is the effective default if you don't set anything yourself.. ",
    "oguzbilgic": "@gaearon You might wanna chime in to this, based on your tweet.\nhttps://twitter.com/dan_abramov/status/656585973552324608\n. ",
    "gaearon": "I agree that's a cool thing to have.\nI don't have time or expertise to help with implementation at the moment.\n. I agree that's a cool thing to have.\nI don't have time or expertise to help with implementation at the moment.\n. I added failing test cases in https://github.com/yannickcr/eslint-plugin-react/pull/260.\n. Thanks for a quick fix!\n. Thanks for a quick fix!\n. This is similar but encourages you to use ES6 class over createClass:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/prefer-es6-class.js\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prefer-es6-class.js\nYou might use this as starting point, but of course this rule will be more complex.\n. This is similar but encourages you to use ES6 class over createClass:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/prefer-es6-class.js\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prefer-es6-class.js\nYou might use this as starting point, but of course this rule will be more complex.\n. Whoops, seems like duplicate of #214.\n. Whoops, seems like duplicate of #214.\n. In my opinion it seems like one of those cases where the only reason people want shortcuts is because they\u2019ve been exposed to shorter magic syntax. Shorthands might seem \u201cnice\u201d but they actually make less sense coming from a beginner\u2019s perspective. It\u2019s easier to learn how the system works once than remember that topDOMNode is automatic but for everything else you need to use refs, or that this.node is somehow going to turn into a magic ref but there is just one such ref. As for the string suggestion, we won\u2019t go with it because string refs are problematic by themselves, and so we want to get away from them as well.\n. > @timdorr I agree, but as @gaearon said: \"We want to deprecate it eventually (not right now) because it blocks certain improvements in React in the future.\" I think this definitely warrants an additional warning in React.\nDeprecating is adding a warning. So we plan to add a warning but in the future. I thought that maybe ESLint rule might be a better first idea before we deprecate it.\n. > Suppose that I want to create a behavior component that acts on the DOM of its provided child\nYes, HOCs like this would have to wrap their content in an extra <div>. This sounds bad until you see that the whole concept is flawed.\nPeople often request that React adds support for returning multiple nodes from render (\u201cfragments\u201d). Imagine we implement this. Now any component can either return zero, one, or many nodes.\nSomebody changes one of the \u201cmeasured\u201d components to return two nodes in some state. What should findDOMNode return? First node? An array?\nWhether a component returns many nodes is its implementation detail. It should be possible to change it without breaking any code in other components, but this would not work with our HOC. So the pattern itself is problematic.\nThere are two solutions:\n1. Make HOC add a wrapping <div>. This is the easiest way to preserve encapsulation.\n2. If absolutely necessary, instead let HOC inject a callback prop like refToMeasure so wrapped component can use <div ref={this.props.refToMessure}>. This is identical to how my last example works. Components explicitly exposed nodes they want to.\nReading nodes of child components is like wanting to access their state. This is not a pattern we should support or allow (even if it is technically possible). If it was unsupported from day one, I don\u2019t think it would be much of a controversy. However it is less obvious that the pattern is problematic because it\u2019s been possible for a while. \n. > If we could setup a callback ref on a children passed as prop, the findDOMNode could then be removed.\nYou can as long as children are DOM elements. You can check for that with this.props.children && typeof this.props.children.type === 'string'. In this case, to attach a callback ref, you can use cloneElement with a ref callback that calls the original ref function if it exists, and then does whatever you needed.\nFor reasons above you cannot do this on custom components. \n. @perrin4869 I described this use case in the very first post in this thread. You can get the DOM node without findDOMNode(), just use a ref.\n. > Isn't the TextField a good example? I also have a video component enriching the video DOM element, which I need to access props and methods (play(), pause(), paused, currentTime, etc). Is there a reason I would not let the parent access the video DOM node?\nIn this case you can put them on the TextField instance. Then the parent will have a ref to that instance, and call methods on it. And TextField will use its own ref to DOM element.\njs\nplay() {\n  this.node.play()\n}\netc\nIt\u2019s more typing but it\u2019s also more explicit and doesn\u2019t leak implementation details.\n. If you have specific examples of problematic patterns please post them in the thread. This is exactly what I did in the post, and it would really help us weigh on this decision (and maybe think of better alternatives). It would help us a lot if you could do the same thing. You might think your concerns are obvious and we are intentionally ignoring them. In reality it's not at all obvious what you are concerned about without code samples. Thanks!\nI also believed I explained above in this thread why findDOMNode API is fundamentally incompatible with some features long requested by the community (such as fragments). We are not deprecating it just because we enjoy deprecating things. :wink:\n. Please feel free to file a discussion on React repo, sure!\n. > This is the same problem with stateless function components not being ref-able.\nWhat would you expect to get as a reference to a functional component? Since it doesn\u2019t have an instance, it\u2019s not clear what you are suggesting.\n. @lencioni \nWouldn\u2019t this work for your use case?\njs\nconst container = document.createElement('div');\ndocument.body.appendChild(container);\nReactDOM.render(example, container);\nsetTimeout(() => done(container.firstChild), 0);\n. @taion \n\nThe case where this comes up most acutely is having a positioner component for e.g. tooltips and overlays.\njs\n<Button ref={c => { this.button = c; }} />\n<Position target={this.button}>\n  <Tooltip>Some tooltip</Tooltip>\n</Position>\nFor  to work as a generic component that can e.g. calculate the size of its child, then position it appropriately relative to its target, it needs to be able to get the child's DOM node.\n\nPlease correct me if I\u2019m wrong, but in this use case it seems like Position content would not be a part of the downward rendering tree anyway. I\u2019m assuming that <Position> is going to render <Tooltip> to a different tree root (i.e. as a portal).\nIf my assumption is correct, you render this.props.children into another <div> anyway (like this this._mountNode). So you should have access to this._mountNode.firstChild as well. Sure, it\u2019s not \u201cReacty\u201d, but that\u2019s the point: you are intentionally breaking enapsulation and accessing the platform-specific tree, so it makes sense that you use platform APIs for this.\nOr maybe I misunderstand what <Position> does (which is why I asked for more complete examples).\n(Note: it\u2019s an official team\u2019s position, just something I think makes sense. I may be wrong.)\n. @jquense\n\nto add to @taions point, so also for focus management, which is required for accessible components, right now react just offers nothing useful for that problem which requires dropping down to DOM nodes, and not wrapping ones in the HOC case. imperative methods sort of work but are often and frustratingly obscured by HOCs, and just not possible for function components.\n\nI\u2019ve used the \u201cref prop\u201d pattern extensively and found it to work really well for this.\nI believe I\u2019ve specifically shown this example in the first post but I will repeat it with some comments:\n``` js\nclass Field extends Component {\n  render() {\n    return (\n      // Note: ref={this.props.inputRef}. I'm delegating ref to a prop.\n      // This will work through many layers of HOCs because they pass props through.\n      \n    )\n  }\n}\nclass MyComponent extends Component {\n  componentDidMount() {\n    // It doesn't matter how many levels of HOCs above I am:\n    // I will still get this DOM node right here.\n    this.inputNode.focus();\n  }\nrender() {\n    return (\n      \n        {/ Please note: I\u2019m not using ref={}, I\u2019m using my own inputRef={} prop./}\n        Hello,  this.inputNode = node} />\n      \n    )\n  }\n}\n```\nAnd this pattern works just as fine with functional components as it does with classes.\nIf you think it\u2019s problematic can you please point out why?\n. > Positioning for instance is a concern that belongs to the parent not the child.\nIn case of positioning, don\u2019t you already pull the child out into a new tree where you have access to the DOM? See https://github.com/yannickcr/eslint-plugin-react/issues/678#issuecomment-237840983.\n\nA child component cannot reasonably make the choice that no consuming parent will ever need to access its rendered node.\n\nI\u2019m not sure I\u2019m following without a specific example. (I answered to all specific examples above so far, I think.)\nYou mentioned the focus use case, but isn\u2019t it reasonable for third party React input components to always provide imperative focus() method? I don\u2019t really see why this would be unexpected for those component libraries. Again, a specific example we could look at would be helpful here.\n. On the opposite, it is deliberate that we pass null on unmounting so that your field gets nulled too. This is to prevent potential memory leaks.\n. Even before unmounting, you are passing a new function. So it gives null to the old function and node to the new function. There is normal (even if a bit non-obvious) and there is no reason to guard against this. Your code should already handle null because it has to handle unmounting. Please trust React to call it with the node after calling it with null during the update. React has tests for this. :wink:\nWhat am I missing?\n. I don\u2019t know the ref code that well but if you had issues with them, please try to isolate them and file bugs against React.\nAs far as I can see from the source, the refs get detached (called with null) before the internal state related to <div> (\u201cthe host instance\u201d) is updated. Later, all refs get attached (called with DOM nodes) during the flush, which is currently synchronous in React unless you use unsupported extensions (like rAF rendering). There is indeed a period where you might not have refs, but as far as I see we don\u2019t call lifecycle methods on the component itself during this period.\nI can imagine that if <A> contains <B>, and <B> calls a callback passed down from <A> in its componentWillUpdate, and that callback accesses a ref to <B> on <A>, it might be null at this point. I\u2019m not sure why we don\u2019t just keep the old ref attached in this case but this is really a discussion we should have in a React issue.\n. Can you completely remove it? That's what React did. This attribute only works for IE8 and lower. React stopped supporting them more than a year ago. . While I appreciate the good intent behind this change, I think it was a mistake and has caused some damage. To be clear, it's our mistake that we haven't engaged with this plugin's maintainers to ensure it matches our strategy. Let's try not to repeat this mistake.\nIt's a big problem that people still see this rule and think those methods are already \"deprecated\". It makes our messaging inconsistent and, worse, spams people's consoles. It makes updating React seem like a difficult thing to do. A lot of people think ESLint messages are React messages, and just pick a popular config that includes this rule.\nIn React, we prefer runtime warnings first so that we can effectively coalesce them. We put great care into our runtime warnings, and include links to migration instructions and codemods. This rule has no link to migration instructions, so people assume they need to rename methods by hand. Its documentation includes no upgrade instructions whatsoever.\nAgain, it's our fault we didn't look into this before, but it's a huge cost to the community who aren't necessarily educated about codemods. This reflected badly on React ecosystem.\nIn the future, I'd like to propose that:\n\nPRs that add deprecation warnings aren't merged without a look from somebody on the React team.\nDeprecation lint warnings aren't introduced until we actually deprecate a feature in React (which hasn't quite happened yet).\nDeprecation lint warning messages must include links to codemods and migration instructions.\nDeprecation rule documentation page must include links to codemods and migration instructions.\nDeprecation lint rule is not added to \"recommended\" preset until the next React major. In other words, we want people to see React runtime warnings first, and update at their own pace. They can they opt into checking deprecations with a linter. But we want React runtime warnings to be the primary mechanism, and the linter being an opt-in way to avoid regressing. It should never be the case that somebody picks a popular or \"recommended\" preset, and that preset contains warnings we haven't even had a chance to surface at runtime in React.\n\nHope this makes sense! Again, I'm thankful for everyone's effort on this \u2014 but we can do better to educate the community and avoid a bad perception of complex upgrade paths. It pains me to think of all the beginners who had their terminals spammed with hundreds of warnings and no accessible explanation about e.g. codemods.. I suggest the following plan (I can do it myself):\n\nChange no-deprecations doc page to include a list of deprecations (as separate subheaders), and links to recommended migration path instructions for each of them.\nLink each method warning to the relevant section of no-deprecations rule.\nEnsure recommended preset doesn't yet include these particular deprecations (since they're not even deprecated inside React yet).\n. If you absolutely think this rule is necessary then it would be good to document good use cases for refs, for example triggering focus, selection, and imperative animations. These are important use cases and can be hard with React declarative model.. \n",
    "c089": ":heart_eyes_cat: \n. ",
    "victorpavlenko": "Now, what to write, instead of react / jsx-quotes?\nJust jsx-quotes are not executed.\n. ",
    "olalonde": "Same problem here. Is there a workaround for this?\n. Thanks. I'm using airbnb's eslint, so I guess I'll have to wait for this issue to be closed: https://github.com/airbnb/javascript/issues/513\n. ",
    "jackwanders": "@olalonde now that @yannickcr has published a patch, you could just ensure that your'e installing 3.4.1 (note that you'll continue getting deprecation messages via console.log). Your other options are to either update your eslint-plugin-react dependency to stay south of 3.4.0 (e.g. specifying ~3.3.2 in your package.json), or to ensure you are using an eslint version >= 1.4.0 and changing your .eslintrc to use the jsx-quotes instead of react/jsx-quotes\n. ",
    "edorivai": "Oh, I see the patch was a fix of another issue. And I realize it would be fixed by actually fixing the deprecated rule. Thing is, I'm extending the eslint-config-airbnb-es5 configuration. So this would mean that my Webstorm eslint integration would fail everytime one of the eslint-config-airbnb-es5 rules becomes deprecated.\nDo you think there'd be another way of notifying about deprecation, while keeping the checkstyle output valid XML?\n. ",
    "petersendidit": "Ok should be fixed up to handle\njavascript\nmodule.exports = {};\n. Seems like the jsx-first-prop-new-line.md  rule with the multiline option does exactly this.\n. The example code provided isn't setting proptypes for the Tab component.  It needs something like this:\njavascript\nTab.propTypes = {\n  Count: PropTypes.number\n};\n. renderSuggestion is a stateless functional component.\n. javascript\n  // eslint-disable-next-line react/no-multi-component\n  renderSuggestion = (suggestion) => {\n    return (\n      <span>{suggestion.name}</span>\n    );\n  };\n. Should we enhance the doc's for this rule to show a few more of these examples? Seems like this is going to be a common issue while the community learns how to use refs without findDOMNode.\n. I just rebased #699 so it should be able to be merged cleanly. \n. Should be, might be a little weird since their branch will be trying to do the same changes as this one. Though its possible that running the tool and then doing a rebase might clean things up for them.\n. I can work on this. What should this rule be named? jsx-no-children-and-dangerouslySetInnerHTML ?\n. I can work on this\n. Anything else needed to get this merged?\n. New commit should take care of the comments. Let me know if there is anything else.\n. Renamed and removed it from the recommended rules.\nI do think these type of rules that are catching errors that React will throw itself should be recommend ASAP.\n. What should this be named? sfc-argument-names?\n. I like react-component-argument-names.\nreact-component-props-context-argument-names seems very wordy and don't know if adds that much value. The error given will tell you what the argument should be named.\n. Seems difficult for this rule to know when the space is intentional vs a result of some refactoring. The rule currently supports <div>{' '}</div> as valid. Which helps the rule know that the space is intentional. Seems like if we make the rule support <div> </div> it could miss the more likely case where it was a left over from refactoring.\nSeems like it might be better to update the documentation for the rule to show that <div>{' '}</div> is valid.\n. Giving a stateless functional component propTypes works just fine.\njsx\nexport default function Foo({ children }) {\n  return <div>{children}</div>;\n}\nFoo.propTypes = {\n    children: React.PropTypes.node\n};\n. Yea been hoping to get back to fixing up this rule. Hoping I can do it sometime this weekend.\nYes the name is long but I think it accurately describes the rule. \n. Yea been hoping to get back to fixing up this rule. Hoping I can do it sometime this weekend.\nYes the name is long but I think it accurately describes the rule. \n. Checking that the style object values are stings has been pulled out and addressed the other comments.\n. So what is the decision on the name? Are we going with jsx-style-object or are we sticking with the longer name?\n. Renamed the rule. Let me know if there is anything else left to do.\n. I can work on a fix.\n. There is a pull request for the fix that hasn't been merged yet. \n. #773 should fix these problems.\n. This is a duplicate of #771 which was fixed by #773 that was released in 6.1.2\n. This is a duplicate of #771 which was fixed by #773 that was released in 6.1.2\n. If the code uses the JSDoc  @extends comment with React.Component or React.PureComponent it will pick up that its a component.\njsx\n/** @extends React.Component */\nclass Hello extends ChildComponent {\n  render() {\n    return <div>Hello</div>;\n  }\n}\n. If the code uses the JSDoc  @extends comment with React.Component or React.PureComponent it will pick up that its a component.\njsx\n/** @extends React.Component */\nclass Hello extends ChildComponent {\n  render() {\n    return <div>Hello</div>;\n  }\n}\n. react-intl's <FormattedNumber> component also has a style prop that isn't a object.  I thought about adding a whitelist but think the \"correct\" way to solve this is for those components to rename the prop. The style name already has some baggage.\n. Should this be an option of jsx-max-props-per-line?\n. The rule is checking if there is a default prop for non required props.\nYou can set a noop function as the default:\njs\nCmp.defaultProps = {\n    onChange: () => {}\n}\n. I had a look in to this and was able to get some close but wasn't able to fix this completely.  I was able to add the correct handling for CallExpression but the real problem boils down to component.getParentStatelessComponent not being able to figure out what the actual component is. \nThe current logic of getParentStatelessComponent decides that the arrow function provided as the callback to map is the component. This is hard to fix since with really it is a stateless functional component (it is a function that returns JSX).\ngetParentStatelessComponent correctly identifies Foo as component when Components.detect is called. A possible way to \"fix\" the detection of walking back up the scope, like in this case, would be to keep walking up arrow functions and see if we hit a component that we already know about.. This is very similar to #1477 but fixable because the prop usage isn't in an arrow function that is an attribute to a JSX node.  My research into fixing #1477 will work here.. Should handle this case much better now. Added a test case for when the second argument to the setState updater is not named props and is not destructured. Let me know if there are other test cases that should be added.. While looking at how to implement this here is some thoughts I had.\nRight now getParentStatelessComponent only verifies a few of the items above. It doesn't verify the name of the component starts with a capital letter nor does it check if it returns JSX or the number of arguments.... It's not as simple as updating getParentStatelessComponent to handle those cases because we have rules that are depending on getParentStatelessComponent finding \"components\" that don't match all the rules.\nExample being the display name rule wanting to find this as a component and making it invalid because it doesn't have a display name.\njs\nimport React, { createElement } from \"react\";\nexport default (props) => {\n  return createElement(\"div\", {}, \"hello\");\n};\nRight now the Components util stores its confidence of the node being a component (0=banned, 1=maybe, 2=yes) but the list method on Components doesn't have a way to ask for \"maybe\" components.\nWe might have to define what of those above rules are required to be a \"maybe\" component, update list to be able to return both \"maybe\" and \"yes\" components on request and then update the rules to ask for the both when needed.. @Hypnosphi https://github.com/yannickcr/eslint-plugin-react/blob/d672588cc39334e215ff5993f859f159fc977d57/tests/lib/rules/no-children-prop.js#L40-L50. Without the m modifier things like this would fail:\njavascript\n<div>\n  asdjfl\n  /* invalid */\n  foo\n</div>\n. It's already a test https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-comment-textnodes.js#L170\n. I agree. Sounds like we should move it to the utils provided by the Components utility?  What should it be named? There is already a isReturningJSX that does the bulk of this work but this deals with finding the ReturnStatement\n. It currently expects a ReturnStatement or a ArrowFunctionExpression to be passed in. \n. We could make the default for the case statement to find a return the ReturnStatement\n. Updated it to make isReturningJSX to handle more nodes.\n. Added\n. Added\n. Good idea. Added.\n. Didn't even think about passing a children prop in JSX. Seems just wrong to even do such thing. Will update the rule.\n. Added\n. This should use the new eslint rule format\n. This should use the new eslint rule format\n. This should use the new eslint rule format\n. This should use the new eslint rule format\n. This should use the new eslint rule format\n. This should use the new eslint rule format\n. What should the rule for validating the style object be named?  style-prop-is-valid?\n. Oops meant to add those. Fixed.\n. Not yet, working a better version that will handle more cases. This code doesn't handle destructuring or anything like that.. \ud83d\udc4d Added the test case.. Doesn't seem to be any tests for contextTypes.. Most of this list is already defined elsewhere, should we make this list shareable so its easier to maintain?\nhttps://github.com/yannickcr/eslint-plugin-react/blob/7dce90a4f570847b33eaefddb8d9bb7d6eca9dc5/lib/rules/no-typos.js#L14-L29\nhttps://github.com/yannickcr/eslint-plugin-react/blob/6b239a7c71eb2d7060edd5f48f74f138ff89736e/lib/rules/no-unused-prop-types.js#L23-L24. ",
    "mydearxym": "@ljharb   sorry for not make my self clear\n``` js\nclass Foo extends React.Component {\n    const bar = this.props.bar;\nrender: function () {\n    return <div>{bar.baz}</div>\n}\n\n}\nFoo.propTypes = {\n    bar: React.PropTypes.shape({\n        baz: React.PropTypes.string      // not ok, Prop defined but not used\n    })\n};\n```\nthis is ok:\njs\nclass Foo extends React.Component {\n    render: function () {\n        return <div>{this.props.bar.baz}</div>\n    }\n}\nFoo.propTypes = {\n    bar: React.PropTypes.shape({  \n        baz: React.PropTypes.string      // ok\n    })\n};\n. yes, i opend #847\n. ",
    "Jhawins": "+1 this seems necessary since we check for props missing a proptype definition we should also check for proptypes never being used\n. ",
    "jamesdwilson": "Maybe we could just have it have options to issue warning or not if props object is passed to a third party function or using a spread operator? Instead of throwing the baby with the bathwater.\n. ",
    "CrazyAlvaro": "@EvNaverniouk Thank you for add this rule here, Evgueni. During our development here, we found that this rule checks propType used under this.props but not under nextProps. In some cases we only need to update specific props by using nextProps.foo. Would it be nice if we could check on both this.props and nextProps?. ",
    "montemishkin": "Yes, I set Babel's jsxPragma option to \"react.createElement\".\nJust in case it matters, I'll note that I use webpack to run my js files through the babel-loader, so the loader configuration ends up looking something like this\nloaders: [\n    {\n        test: /\\.js$/,\n        loader: \"babel?stage=0&jsxPragma=react.createElement\",\n    },\n],\nYour suggested order of priority looks good to me.\nThanks for looking into this!\n. ",
    "jerrysu": "Awesome. Thanks! :+1: \n. Same issue:\n/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/util/Components.js:113\n      return sourceCode.getText(node.parent.callee) === 'React.createClass';\n                                           ^\nTypeError: Cannot read property 'callee' of null\n    at Object.context.react.isES5Component (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/util/Components.js:113:44)\n    at Object.context.react.getParentES5Component (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/util/Components.js:183:35)\n    at isPropTypesUsage (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/rules/prop-types.js:31:63)\n    at EventEmitter.MemberExpression (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/rules/prop-types.js:561:11)\n    at EventEmitter.emit (events.js:129:20)\n    at NodeEventGenerator.enterNode (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/lib/util/node-event-generator.js:42:22)\n    at CommentEventGenerator.enterNode (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/lib/util/comment-event-generator.js:98:23)\n    at Controller.controller.traverse.enter (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/lib/eslint.js:782:36)\n    at Controller.__execute (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/node_modules/estraverse/estraverse.js:495:28)\nSeems to be occurring for this code for me:\nfor (var key in envDefault) {\n  process.env[key] = process.env[key] || envDefault[key];\n}\n. Same issue:\n/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/util/Components.js:113\n      return sourceCode.getText(node.parent.callee) === 'React.createClass';\n                                           ^\nTypeError: Cannot read property 'callee' of null\n    at Object.context.react.isES5Component (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/util/Components.js:113:44)\n    at Object.context.react.getParentES5Component (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/util/Components.js:183:35)\n    at isPropTypesUsage (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/rules/prop-types.js:31:63)\n    at EventEmitter.MemberExpression (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint-plugin-react/lib/rules/prop-types.js:561:11)\n    at EventEmitter.emit (events.js:129:20)\n    at NodeEventGenerator.enterNode (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/lib/util/node-event-generator.js:42:22)\n    at CommentEventGenerator.enterNode (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/lib/util/comment-event-generator.js:98:23)\n    at Controller.controller.traverse.enter (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/lib/eslint.js:782:36)\n    at Controller.__execute (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/Users/jerrysu/Remind/r101-frontend/node_modules/eslint/node_modules/estraverse/estraverse.js:495:28)\nSeems to be occurring for this code for me:\nfor (var key in envDefault) {\n  process.env[key] = process.env[key] || envDefault[key];\n}\n. ",
    "naddeoa": "Found another example to contribute. This doesn't work:\n``` javascript\nvar optionPropType = {\n    value: React.PropTypes.string.isRequired,\n    label: React.PropTypes.string.isRequired\n};\nvar DropdownView = React.createClass({\n    propTypes: {\n        widthNamed: Dropdown.propTypes.width,\n        optionPrompt: React.PropTypes.string,\n        selected: optionPropType,\n        options: React.PropTypes.arrayOf(React.PropTypes.shape(optionPropType))\n    }\n});\n```\nThen, I noticed that I was actually passing in a plain object to propTypes.selected. I made optionPropType a React.propType.shape and that fixed it:\n``` javascript\nvar optionPropType = React.PropTypes.shape({\n    value: React.PropTypes.string.isRequired,\n    label: React.PropTypes.string.isRequired\n});\nvar DropdownView = React.createClass({\n    propTypes: {\n        widthNamed: Dropdown.propTypes.width,\n        optionPrompt: React.PropTypes.string,\n        selected: optionPropType,\n        options: React.PropTypes.arrayOf(optionPropType)\n    }\n});\n```\nEDIT:\nSpoke too soon, that didn't work. Doing this did though:\njavascript\nvar DropdownView = React.createClass({\n    propTypes: {\n        widthNamed: Dropdown.propTypes.width,\n        optionPrompt: React.PropTypes.string,\n        selected: React.PropTypes.shape({\n            value: React.PropTypes.string.isRequired,\n            label: React.PropTypes.string.isRequired\n        }),\n        options: React.PropTypes.arrayOf(Dropdown.propTypes.option)\n    },\n});\nI guess the issue is just with referencing objects defined in the same file?\n. ",
    "theogravity": "We were missing grunt-cli in our package list and installed it, now works. Unsure how that would impact anything though since eslint isn't using grunt here. Just wanted to note how we fixed it on our end.\n. ",
    "evansolomon": "Got it. Thanks.\n. ",
    "TSMMark": "For the record, you can now use the \"type-annotations\" group to determine where you would like to place your type annotations. https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#rule-options\n\ntype-annotations. This group is not specified by default, but can be used to enforce flow annotations to be at the top.. Sort-comp does not work for me either. Opened #1490. @ljharb Yes indeed.\n\nHowever, maybe it could be configurable to conditionally support either of the following variants:\njsx\n<A>{whatever()}</A>\njsx\n<A>\n  {whatever()}\n</A>. @ljharb I would be happy to when I get the chance. Never worked in this codebase before, but I assume jsx-max-props-per-line.js is probably a good starting reference point.. @ljharb Done in #1497 . It's merged. Closing . > I gather that you're choosing an indent of zero, so that the indent rule can correct it properly?\nThat's right. \n\nThere are only tests for components. Should it also warn on <div><span>Hello World</span></div> ?\n\nNot sure why that would make a difference, but I added a case for ya.. Hey @ljharb I spec'd out what I think is the best approach for handling white space. Basically, it comes down to not handling it and letting the user fix each case on their own. ptal if you could: 799dfa68accaaa50b38f01d176d96ad83c898864\nIf y'all agree I'll implement this behavior in the next couple days. For the record, I am attempting to handle all autofix cases and it is proving rather difficult.\nEdit: Just discovered isSpaceBetweenTokens and it looks like this might be exactly what I need to make this work.. @ljharb Well, I had to throw everything out and start over, but now we can handle all cases! \ud83d\ude0c \nHow's it look?. @ljharb I totally agree that if your whitespace is important you should contain it in curlies. But can we really justify the autofixer breaking code, even if the code is \"bad\"? If yes, what do you say I apply that same logic to #1497 when handling whitespace? (it's driving me nuts trying to handle it lol). Sure thing. Anything I need to do other than the following?\n\nadd a file in docs/rules/\n\nupdate readme with a link. Sure thing. Anything I need to do other than the following?\n\n\nadd a file in docs/rules/\n\nupdate readme with a link. See #1552. See #1552. Hey guys how will this affect users of fat-arrow / instance-bound-functions in the future?. @ljharb I believe white space in jsx is differnt from HTML and in your example the two jsx snippets are actually rendered differently. foo in the first snippet will be rendered to the DOM with a whitespace on either side, while foo in the second snippet will have no whitespace.\n\nHowever, even if I'm correct the rule still does need to be patched. Currently, the autofix does change the rendered whitespace under certain conditions, which is obviously unacceptable.. Using curlies and transforming into a string literal with spacing on either side seems the most accurate. Is this acceptible?\njsx\n<div>\n  <span />\n  {' foo '}\n  <input />\n</div>. foo and {\"bar\"} are 2 different expressions and I don't want them on the same line. JSX parser ignores trailing spaces such as these, however, I'll see if I can kill them, as per https://github.com/yannickcr/eslint-plugin-react/pull/1497#discussion_r147555957. JSX parser already ignores trailing spaces, and no-trailing-spaces will chop them off anyway... but let me see if I can get rid of them. My thought process was the JSX output is identical so I would not need to handle them. Yes, if you look on the next line 117 you will see {\\' \\'}. It results in the same output after JSX parsing. I am following the guidelines:\n\nSince all rules are run again after the initial round of fixes is applied, it\u2019s not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.\n\nhttps://eslint.org/docs/developer-guide/working-with-rules#applying-fixes\nThe trailing space in the output foo is inconsequential. Its only impact is offending no-trailing-spaces, which, as stated in the guide, is not our concern here.. See latest commit, best I can do right now. As you said, this does trim the newly autofixed nodes; however, it does not handle cases where the 'Literal' node is the first node on the line because it does not need to be placed on a new line, requiring no report/fix for that node.\nExample:\nhttps://github.com/Vydia/eslint-plugin-react/blob/1344f1dad2478d15a378d681128206bf969c733b/tests/lib/rules/jsx-one-expression-per-line.js#L714. My bad!. ",
    "trevordmiller": "I ran into this today; here is an example:\n\n. Thank you for all your great work @yannickcr! Your plugin has been very useful :)\n. I also really like proptypes and personally use them, but in my eyes it doesn't fit the recommended pattern followed by eslint itself and other eslint plugins where the recommended setting is for errors only.\n\n\"It\u2019s an error to omit propTypes imo\"\n\nI think there are a few valid situations where you wouldn't want proptypes:\n1) When using a full-blown type checker like typescript/flow\n2) Small React apps that don't pass a lot of props or export any public facing components\n3) When piping props down multiple layers; the top layer should have type checking, but the sub-layers probably don't need to re-define all the proptypes of the parent.\nProptypes are in the \"advanced\" section of the React docs and are no longer a part of the React project - they are in a separate prop-types repo not in React.\nSo to summarize: I think proptypes are awesome and I personally \"recommend\" them, but if eslint-plugin-react were to use recommended the way eslint and other eslint plugins use it (for errors only, not opinionated tooling), I feel it doesn't fit.\nAnyways, that's my 2 cents. Not too big of a deal but wondering what others think :)\nThanks for such a great plugin!. ",
    "dbrans": "I don't think eslint will ever be able to know the difference between a function that returns jsx and a React \"stateless component\", without a hint like a propTypes member.\n. ",
    "kumarharsh": "@gajus - what if someone does this:\n({name, id}) => {};\n. FWIW, I've used this function in one of my codemods:\n```\nconst isPossiblyPureComponent = path => {\n  if (path.parent.node.type === 'CallExpression')\n    return isPossiblyPureComponent(path.parent);\n  else if (path.parent.node.type === 'VariableDeclarator')\n    return true;\n  return false;\n};\nj(file.source)\n    .find(j.ArrowFunctionExpression)\n    .filter(\n      p => isPossiblyPureComponent(p)\n          && (\n            p.node.body.type === 'JSXElement'\n            || j(p.node.body)\n                .find(j.ReturnStatement)\n                .find(j.JSXElement)\n                .nodes()\n                .length\n          )\n    )\n```\nwhich did the trick of detecting Pure components pretty well, although it's I think too heavy\n. @ljharb - If I'm not mistaken, theoretically you can do:\nMyComponent.displayName = \"MyComponent\";\nto retain the component name. Although it'll be writing characters to save a few characters ;). Actually, I was in two minds where to file it, and I tried to reproduce the same with normal javascript, but can't get eslint to show the same behaviour...\nFor example, eslint does show proper errors in this case:\n``` js\nimport Button from './Button';\nimport Input from './Input';\nexport function f() {\n  return new Input.Button();\n}\n``\n. @ljharb yes,jsx-uses-vars` is already set in eslintconfig. @lencioni's PR seems good :)\n. ",
    "camloken": "If you have no logic in your component you can even make it a bit more concise:\n```javascript\nconst MyComponent = (props) => (\n   \n{props.firstname}\n\n);\nMyComponent.propTypes = {\n   firstname: React.propTypes.string,\n};\nexport default MyComponent;\n```\nNotice there is no return statement or curly brackets on the component.. ",
    "armenzg": "If it helps someone, I was having trouble with this ('post' is missing in props validation (react/prop-types)):\n```javascript\nexport default Post = ({ post }) => (\n  {post.title}\n);\nPost.propTypes = {\n  post: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\nbut this did not have anymore issues:javascript\nconst Post = ({ post }) => (\n  {post.title}\n);\nPost.propTypes = {\n  post: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\nexport default Post;\n```. @ljharb I've filed it:\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1447\nThanks!. ",
    "amackintosh": "I just had this issue and it turned out to be a typo that wasn't highlighted by ES Lint.\nProblem:\n``` javascript\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { NavLink } from 'react-router-dom'\nimport { Wrapper, Button, Menu, MenuItem } from 'react-aria-menubutton'\n// these two props were being highlighted as missing proptypes (which was actually true)\nconst ListActionsMenu = ({ thingRoute, serialNumber }) => {\n  const MENU_ITEMS = [\n    \n\n/${thingRoute}/view/${serialNumber}}>View\n,\n    \n\n/${thingRoute}/edit/${serialNumber}}>Edit\n,\n    \n\n/${thingRoute}/deactivate/${serialNumber}}>Deactivate\n\n  ]\nreturn (\n     null}>\n      \n\n\n\n{MENU_ITEMS}\n\n\n  )\n}\n// but, it was due to this capitalized P\nListActionsMenu.PropTypes = {\n  thingRoute: PropTypes.string.isRequired,\n  serialNumber: PropTypes.string.isRequired\n}\nexport { ListActionsMenu }\n```\n@yannickcr @ljharb I figured I would just drop this example scenario in here, in case it is desired to analyze for any API hardening.\nI was really confused why it was saying there was no prop types, and that would have been a 2 second fix if ES Lint had warned me that PropTypes needed a lower case p. I can see how it could be tricky to add a case for such anomalies though.\nIt could be nice to somehow get a red underline on Something.PropTypes = { if there is a capital P.. ",
    "ViggoV": "This seem to still be an issue. For stateful components missing prop-types are detected, but for a stateless functional component I get zero errors. eslint 5.12.0 and eslint-plugin-react 7.12.3.\nI believe it has worked before, probably with an older React version, but I am not entirely sure. I was wondering if it could have something to do with multiple HOC wrappers, but both the functional and stateful components I am looking at are using more or less the same set of HOCs.. Update: Turns out my SublimeLinter vs. CLI discrepancy was due to me missing the --ext .jsx flag in the CLI. The main issue, however, remains.. . Ah, so the issue is the connect functions around the jsx itself? That makes a lot of sense! I just got smarter, thank you \ud83d\udc4d \nI'll a workaround.. It worked smoothly! Thanks for the quick and friendly reply \ud83d\udc4d . ",
    "Kerumen": "I noticed my mistake and deleted my message but you answered before, ups!\n. What about decorators ?\nI have a class with the CSSModules decorator attached and it triggers react/prefer-stateless-function but I can't write it as a SFC because babel throws Leading decorators must be attached to a class declaration.\njs\n@CSSModules(styles)\nclass Button extends Component {\n  render() {\n    <button styleName=\"button\"></button>\n  }\n}\n. Yep right! I always wrote the decorator so I forgot the good ol' syntax. Thanks :)\n. Related https://github.com/yannickcr/eslint-plugin-react/issues/491#issuecomment-196749779\n. @ljharb Really? This is clearly not a nice solution.. . @ljharb Really? This is clearly not a nice solution.. . @yannickcr Thank you!. I did exactly like the prop-types rules. It means that this one is wrong too.\nWhat do you suggest? This regex is only used one time.. I pushed a try. I split the regex into 2 variables. It leads to more conditions. Tell me if you prefer this version.. ",
    "mxstbr": "Is this by chance being worked on? This would be a great addition that'd be much appreciated!\n. ",
    "calebmer": "For some context the following component should not generate errors with the prop-types rule:\n``` js\nimport React from 'react'\nimport Relay from 'react-relay'\nfunction User ({ user }) {\n  return {user.name}\n}\nexport default Relay.createContainer(User, {\n  fragments: {\n    user: () => Relay.QLfragment on User {\n        name\n      },\n  },\n})\n``\n. Is this being worked on?\n. What if we added another rule where assignment of props was treated as an error? That way, practically, this sort would only affect types.\n. This approach is recommended by the [Flow documentation](https://flowtype.org/docs/react.html). I agree that outside of Flow you would never ever want to do this, and that\u2019s why I think it\u2019s fine to make this addition. If you\u2019re ever assigning toprops(even in Flow you aren\u2019t assigning), it will result in a bug. However, when you do whether it be for TypeScript, Flow, or any other arbitrary type checker or JavaScript intelligence tool there is an idiomatic place to put theprops` attribute, the top of the component class.\nI\u2019m also going to cc @thejameskyle on this one to see if he wants to make a comment.\n. Yes, however I think the point is moot because you\u2019re right. Nobody would ever do that in React.\nSimilar in this list are he mixins, statics, and getDefaultProps identifiers. Sorting by these properties would be affected even if the user was not using React.createClass. If I had a simple ES6 class that extended from React.Component and for whatever reason maybe I wanted to add a static getDefaultProps method, the rule would require it to go under the constructor and above state. There is actually a possibility I may want to use an identifier reserved for React.createClass instantiate outside of React.createClass. There is practically 0 chance I\u2019d want to assign props outside of type information.\nYou may argue that React.createClass is a part of the React library and so even if there are edge cases, they are fine because it\u2019s all expected library behavior. To that I would counter that Flow is part of the React ecosystem, and it may as well be considered part of the library especially as there has been some discussion in the past of deprecating propTypes and instead using only Flow types (although this is highly unlikely). Secondly, there is precedence in this plugin for supporting \u201cthe idiomatic Flow way.\u201d The react/prop-types rule in fact supports the props: {} format when detecting unspecified props.\n. ",
    "FredyC": "Ah I see, that doesn't look so bad except it's two extra lines. Hmm. Do you think it would be possible to extend the rule so it can recognize alignment to return keyword ?\n. ",
    "csilvers": "I think it's not just return.  (We are seeing this same issue, and would prefer not to have the extra parens.)  For instance, we'd like to be able to do\nvar x = <App\n      ...\n   />;\nA rule that makes sense to me is something like \"equal the indentation of the line where the tag started\".  But I don't know if that gives bad results in other situations.\n. (It may be difficult to resolve this in general, since who knows what value the var will have at runtime, but maybe a good solution would be to ignore such vars if they are actually var or let, but to examine their contents if they're const.  We are looking to change this code to use const anyway.)\n. ",
    "mridgway": "Also good to check for in render: Date.now(), new Date(), Math.random().\n. ",
    "hamiltondanielb": "OK thanks, I'm going to fork and give it a shot.\n. The problem was without emcaFeature Module and Modules activated, this rule would fail for export default class Hello extends React.Component { I added the test case for this scenario, no code changes\n. ",
    "rhysd": "OK, I added test to ensure the issue is fixed and it passed.  I believe it's ready to merge.\n. ",
    "mmrko": "Ditto. I wonder if it were enough to just apply this rule on functions that are declared at the top level and return JSX...\n. ",
    "iam4x": "@yannickcr I don't think display-name should be used on plain function component or did I miss something?\nCan we just disable checking for display-name on component function?\n(ps: Thank's for the plugin :100:)\n. ",
    "seeliang": "thanks for the update \n. thanks for the update \n. ",
    "teosz": "It happens for me :\n```\nimport React from 'react';\nconst requireAuth = () => {};\nexport default (props) => {\n  const { dispatch } = props;\n  const checkAuth = requireAuth.bind({ dispatch });\n  return (\n    \n  );\n};\n```\nversion 3.15.0\n. ",
    "AlicanC": "@teosz, where is your propTypes? Your code should look like this:\n``` javascript\nimport React from 'react';\nexport default function StatelessComponent(props) {\n  const {\n    // ...\n  } = props;\nreturn (\n    // ...\n  );\n}\nStatelessComponent.propTypes = {\n  // ...\n};\n```\nNote: I don't use arrow functions because they are anonymous and will probably obfuscate some of the errors I get.\n. Not having this was problematic for us in this case:\n```javascript\nclass MyComponent extends Component {\n  // How it was (good)\n  onButtonPress = () => {\n    analytics.track('buttonPressed');\n    this.props.doThing();\n  }\n// How it become (bad)\n  onButtonPress = () => {\n    analytics.track('buttonPressed');\n    const { doThing } = this.props;\n    doThing();\n  }\n// What I dream of (off topic, but I had to mention \ud83d\ude01)\n  @track('buttonPressed')\n  onButtonPress = () => this.props.doThing();\n}\n```. @dandonahoe IMO your problem is better solved by something like #1968.\n@ljharb IMO the footgun is not this.props.func(), but this itself. this should be typed and checked by Flow/TS. Until then, I'd rather not make my team write tons of extra chars for this very minimal possibility.. All I mean is that this is a type issue. ESLint can't prevent me calling a function with wrong arguments and it can't prevent me calling a function with wrong this. It doesn't know types so it doesn't know what is right or what is wrong. We use Flow and it doesn't know it either, but if one of these tools is going to solve this issue properly it's Flow (or TS) and not ESLint.\nIf we go back to this example:\njavascript\nclass MyComponent extends Component {\n  onButtonPress = () => this.props.doThing();\n}\nTo achieve this we type all of our callbacks () => mixed so the return value of doThing() can not be used accidentally. We also heavily avoid using classes or this so we are covering that too. What we have done is get rid of the foot so this footgun has nothing to shoot at.\nIf we ever wanted to be 100% sure about this, we would need something like https://github.com/facebook/flow/issues/452 and not some ESLint rule that says \"I don't know if what you are doing is right or wrong, so I will disallow it completely, including the valid cases\". This is sloppy and is not something we want.\nI can also assure you that I am not one of those \"Let's rename const to cnt so we save two chars.\" people on ES Discuss. As I've said on #1968, this ESLint rule was already one of our verbal rules, but I ended up seeing hundreds of violations from other developers in my team (even after being corrected in reviews multiple times) and I had to let it go. These rules are enforced on actual humans and your humans might be okay with this, but our humans are resisting it, so I like the idea of enforcing this rule with ['error', 'always', { selectors: [\"FunctionBody\"], maxAmount: 1 }], but not with ['error', 'always']. We are trying to be a fun-to-work-at startup and not a we-get-bored-in-cubicles company. \"This bad thing might happen some time in the future so you have to code like this all the time, every day.\" is just not fit for our culture so I rather increase my reviewing time a little bit to save a lot more time for the developers.. What does this have to do with react/destructuring-assignment though? Why not make a separate rule for disallowing props.method() and let this rule be used for styling purposes?\nI understand that you have your best practices, but we have our own too. To us, this isn't a case of \"developers refusing to learn best practices\". Our developers do not refuse to learn best practices, our developers are under-experienced and I don't want to throw hard-to-follow rules at them.\nWe've had people quit because the job was too hard. I've had people contacting me asking for help because they were losing their minds trying to figure something out. This isn't about reaching the best code quality, it's about reaching the best code quality without making people shout at their laptops and go to sleep with impostor syndrome. We even have developers who don't have to fix ESLint/Flow/Jest errors, I checkout their branches and fix the errors for them.\nNow, if we could have this rule to be configurable as { selectors: [\"FunctionBody\"], maxAmount: 1 } it would help our developers and reduce the time I spend on reviews. Our code would be more maintainable than before, and you could still configure it the way you want.. Shouldn't we have something like react/no-call-props to disable this.props.func() then?. ",
    "lemonmade": "Thank you for resolving this so quickly!\n. Thank you for resolving this so quickly!\n. We are getting bit by this too. Here's my minimal example to reproduce:\n```js\n// index.js\nimport React from 'react';\nexport default class MyComponent extends React.Component {\n  constructor() {\n    this.state = {used: 1, unused: 2};\n  }\ncomponentDidUpdate() {\n    this.setState(({unused}) => ({\n      used: unused * unused,\n    }));\n  }\nrender() {\n    return {this.state.used}\n  }\n}\n```\n```json\n// package.json\n{\n  \"name\": \"test\",\n  \"eslintConfig\": {\n    \"parserOptions\": {\n      \"ecmaVersion\": 6,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n          \"jsx\": true\n      }\n  },\n    \"plugins\": [\"react\"],\n    \"rules\": {\n      \"react/no-unused-state\": \"error\"\n    }\n  },\n  \"dependencies\": {\n    \"eslint\": \"^4.19.0\",\n    \"eslint-plugin-react\": \"^7.7.0\"\n  }\n}\n```\nError: Unused state field: 'unused' (react/no-unused-state). ",
    "kentcdodds": "Now that I think of it, the opposite would be handy as well. If you reference this.state in a pure component of course it wouldn't actually work, but to have that linted would be helpful I think.\n. Ah, yes, my bad. Appears to be identical. Closing\n. Based on the ESLint docs, if loc isn't provided, it defaults to node.loc so I figured we could just do the same and save ourselves an if statement :). Note the recurssion here.. Woot! These changes fix this case and we can now auto-fix this!. I think that Literal indentation should be touched as it doesn't make a difference in the resulting HTML (different for JSXExpressions, but that doesn't apply here).. Question stands... It would require more logic in the fixer and I don't think it's worth the complexity.. This is the only relevant bit for the indentLogicalExpressions option.. This function came from the JSXOpeningElement function below. I extracted it to make use of it else where. The only changes from what was there before is the two if statements before the var indent = ( assignment.. This code was simply refactored to getOpeningElementIndent. I just tried out changing it to ^ and it results in an additional extraneous error in one of the test cases. Specifically:\njavascript\nfunction MyComponent(props) {\n    return (\n    <div\n            className=\"foo-bar\"\n            id=\"thing\"\n    >\n      Hello world!\n    </div>\n    )\n}\nBecause token.value is actually everything between the > and the </div> (which includes a \\n). I was in the area and updated the commenting style. I also find it confusing as it is.. Great, I went ahead and removed the commented-out code.. ",
    "SpainTrain": ":+1: Thanks for fixing this!  Will this drop in a new version soon-ish?  :heart: \n. Think this is dupe of #790?\n. ",
    "luiscarli": "I'm also having a prop-type check problem in my stateless functions.\nIn my case when I have a function with a implicit return there's no warning for missing propTypes.\nFor example:\njsx\n// no react/prop-types warning in this case\nconst Annotation = props => (\n  <div>\n    {props.text}\n  </div>\n)\n. ",
    "Intellicode": "I would like to use this feature too, probably I could have a go at a plugin if more people are interested!\n. I have created a separate plugin for this since its react-native specific. \n. Sure! Thanks for the link :) I'm pointing them right back to the generic React plugin as well for non-react-native specific rules.\n. Sure! Thanks for the link :) I'm pointing them right back to the generic React plugin as well for non-react-native specific rules.\n. Good point, I'll do some research and if I come across the discussion you mentioned, I'll reference it here.\n. \"React also supports using a string (instead of a callback) as a ref prop on any component, although this approach is mostly legacy at this point.\" https://facebook.github.io/react/docs/more-about-refs.html so indeed a rule to prevent using this.refs would make more sense.\n. Sure! I'll add them tomorrow :)\n. Sure! I'll add them tomorrow :)\n. @yannickcr I've implemented your suggestions, let me know if there is anything else :)\n. @yannickcr I've implemented your suggestions, let me know if there is anything else :)\n. @yannickcr Sorry, my latest change to adding titles was not pushed correctly, should be good now and also I squashed all commits :)\n. ",
    "Prinzhorn": "Thanks. From now on everyone searching for \"React\" is defined but never used shall find this issue.\n. ",
    "jasonkylefrank": "Hello ES6 experts!\n@Daniel15 mentioned above that:\n\nA bind call or arrow function in a JSX prop will create a brand new function on every single render. This is bad for performance...\n\nLooking at docs such as those from Mozilla, I can see that .bind() creates a new function, corroborating what @Daniel15 mentioned.  However, I am curious about the arrow function.   I have not been able to find something that says that the arrow function would do something similar as far as making a copy (and thus bad for performance in the render method).  Can someone provide a link to a source explaining how the arrow function is similar to bind() in this regard?\nI also thought that maybe it had to do with how arrow functions get transpiled - perhaps that they would end up using bind() once transpiled.  But I have not been able to confirm that either.  For example, this test on Babel's online editor shows that this ES6:\nfunction foo() {\n  const bar = () => {\n    console.log(this.id, arguments);\n  }\n  bar();\n}\nfoo.call({id: 42}, 'lol');\ntranspiles to:\n```\n'use strict';\nfunction foo() {\n  var _this = this,\n      _arguments = arguments;\nvar bar = function bar() {\n    console.log(_this.id, _arguments);\n  }; // <----------- Notice .bind() was not added\n  bar();\n}\nfoo.call({ id: 42 }, 'lol');\n```\nIn summary, can someone please show how the arrow function has the same performance problems that bind() suffers from in React's render method?\n. @Daniel15 Ok, so the issue with arrow functions is not that they create a new function in the same way that bind() does, but rather that the runtime has overhead involved in creating the closure necessary to execute them?  That makes sense.\nI have 2 follow-up questions.\n1. The suggested means to handle this problem (in the linter rule readme) is to create a separate React component to handle the callback situation.  There must additional overhead involved in initializing and rendering this extra React component (e.g., lifecycle methods, render(), etc.).  So how does that added overhead compare to the overhead that would be incurred if you used arrow functions instead?  I assume someone has tests comparing these 2 approaches right?  Does anyone have a link for one?\n2.  The React docs, on their \"Communicate Between Components\" page advocate using bind() to solve this passing-of-arguments problem.  Their example is a list example:\n```\n   var handleClick = function(i, props) {\n   console.log('You clicked: ' + props.items[i]);\n   }\nfunction GroceryList(props) {\n   return (\n     \n       {props.items.map(function(item, i) {\n         return (\n           {item}\n         );\n       })}\n     \n   );\n   }\nReactDOM.render(\n   , mountNode\n   );\n   ```\nIs their example different somehow (i.e., is bind() not a performance problem in their case)?\n   @Daniel15 You work at Facebook, right?  If that example has the same performance problem, is there any chance you'd have some pull to get the docs updated to show the \"proper\" way?  It would be a lot less confusing for us React noobs then!\n. @dtinth Those are great tests!  Thanks for running them!\nYour second set of tests (where you compare using bind(), closures, arrow functions, and React.createElement) seem to indicate that arrow functions are significantly faster than using bind().  So what happens if you run your \"Single component with bind()\" vs \"Two components without bind()\" tests using arrow functions instead of bind()? \n. @dtinth Thanks for the follow up tests - very helpful!  \nBased on the tests that @dtinth has shown, I'm not seeing a benefit of using this linter rule, pending possible garbage-collection performance research from @Daniel15 or others.  I'd love to hear from anyone that has research on these issues.\n. @dtinth Follow-up questions about your last test (\"One component with arrow functions...\"):\n1. Was that with the production version of React?\n2. Your \"4 function tests\" (where you compare using bind(), closures, arrow functions, and React.createElement) seemed to indicate that arrow functions are considerably faster than bind().  Why then do you think that these last tests did not show improved performance over the bind() version?\n. ",
    "maketroli": "@epmatsw mmm but how do I adapt it to my code ? sorry, I am very new on this.\n. @epmatsw yes I am using babel-eslint. Thanks.\n. ",
    "zerkms": "I also mentioned PropTypes capitalisation at http://stackoverflow.com/questions/33378699/error-proptypes-must-be-placed-after-render?noredirect=1#comment54551612_33378699 but OP mentioned it changes nothing.\n. Relevant (or a duplicate?): https://github.com/yannickcr/eslint-plugin-react/issues/816\n. Relevant (or a duplicate?): https://github.com/yannickcr/eslint-plugin-react/issues/816\n. ",
    "larrybotha": "@yannickcr getting this on eslint-plugin-react v3.16.1\n. This is bizarre... but it doesn't happen anymore... perhaps after fixing other linting errors. If that's even possible.\nIt was a simple function on an array prop:\njs\nhasAllData() {\n  return this.props.fields.every(field => !!field);\n},\nAnyways, with v.4.3.0 it's all good too \ud83d\udc4d \n. ",
    "elijahsmith": "awesome, thank you @yannickcr \n. ",
    "b0gok": "@roadhump it's a very good proposal! \ud83d\udc4d \n@lencioni should it be a separate rule or just extension for jsx-sort-prop-types?. @roadhump it's a very good proposal! \ud83d\udc4d \n@lencioni should it be a separate rule or just extension for jsx-sort-prop-types?. @ljharb ok, I'll try to implement it. @ljharb ok, I'll try to implement it. @fsmaia sorry, haven't free time for a while. So help is welcome :). @fsmaia sorry, haven't free time for a while. So help is welcome :). @ljharb ok.\n@fsmaia I added you as collaborator in my fork.. > Can we add some good and bad examples in the docs that use spreads?\n@ljharb do you mean something like this?\n```js\nconst defaults = {\n  foo: \"foo\"\n};\nconst types = {\n  foo: PropTypes.string,\n  bar: PropTypes.string\n};\nfunction MyStatelessComponent({ foo, bar }) {\n  return {foo}{bar};\n}\nMyStatelessComponent.propTypes = types;\nMyStatelessComponent.defaultProps = {\n  ...defaults,\n  bar: \"bar\"\n};\n```. Added more tests with spreads and examples.. @hornta I think it's an artifact from here (where it's necessary of course):\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/sort-prop-types.js#L156\nIn case of regular props it was added for this case for example:\n```js\nclass First extends React.Component {\n  render() {\n    return ;\n  }\n}\nFirst.propTypes = forbidExtraProps({\n    a: PropTypes.any,\n    z: PropTypes.string,\n    onFoo: PropTypes.func,\n    onBar: PropTypes.func\n});\n```\nWhen there is a callback around props definition. I'm not sure if this is necessary in case of default props.\n\ud83d\udc4d for attentiveness.. ",
    "sanderpick": "Strangely, I'm seeing this on 3.2.0 as of a few hours ago. Any idea how that could be possible? \n. Strangely, I'm seeing this on 3.2.0 as of a few hours ago. Any idea how that could be possible? \n. No more issues... thank you for the speed @yannickcr !\n. No more issues... thank you for the speed @yannickcr !\n. ",
    "rayhatfield": "I'm seeing this too. Might be blowing up here: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/util/Components.js#L113\n. ",
    "oliversong": "+1\n. ",
    "Zenwolf": "I am getting the same error after installing version 3.7.0:\n/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:113\n      return sourceCode.getText(node.parent.callee) === 'React.createClass';\n                                           ^\nTypeError: Cannot read property 'callee' of null\n    at Object.context.react.isES5Component (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:113:44)\n    at Object.context.react.getParentES5Component (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:183:35)\n    at Object.context.react.getParentComponent (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:170:23)\n    at Object.detectionInstructions.FunctionDeclaration (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:337:28)\n    at EventEmitter.updatedRuleInstructions.(anonymous function) (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:375:41)\n    at EventEmitter.emit (events.js:117:20)\n    at NodeEventGenerator.enterNode (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/lib/util/node-event-generator.js:42:22)\n    at CommentEventGenerator.enterNode (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/lib/util/comment-event-generator.js:98:23)\n    at Controller.controller.traverse.enter (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/lib/eslint.js:782:36)\n    at Controller.__execute (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/node_modules/estraverse/estraverse.js:495:28)\nVersion: 3.7.0:\nmattjaq:shared-ui mjaquish$ npm list eslint-plugin-react\nshared-ui@1.0.0 /Users/mjaquish/git/shared-ui/shared-ui\n\u2514\u2500\u2500 eslint-plugin-react@3.7.0\n. I am getting the same error after installing version 3.7.0:\n/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:113\n      return sourceCode.getText(node.parent.callee) === 'React.createClass';\n                                           ^\nTypeError: Cannot read property 'callee' of null\n    at Object.context.react.isES5Component (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:113:44)\n    at Object.context.react.getParentES5Component (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:183:35)\n    at Object.context.react.getParentComponent (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:170:23)\n    at Object.detectionInstructions.FunctionDeclaration (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:337:28)\n    at EventEmitter.updatedRuleInstructions.(anonymous function) (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint-plugin-react/lib/util/Components.js:375:41)\n    at EventEmitter.emit (events.js:117:20)\n    at NodeEventGenerator.enterNode (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/lib/util/node-event-generator.js:42:22)\n    at CommentEventGenerator.enterNode (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/lib/util/comment-event-generator.js:98:23)\n    at Controller.controller.traverse.enter (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/lib/eslint.js:782:36)\n    at Controller.__execute (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/Users/mjaquish/git/shared-ui/shared-ui/node_modules/eslint/node_modules/estraverse/estraverse.js:495:28)\nVersion: 3.7.0:\nmattjaq:shared-ui mjaquish$ npm list eslint-plugin-react\nshared-ui@1.0.0 /Users/mjaquish/git/shared-ui/shared-ui\n\u2514\u2500\u2500 eslint-plugin-react@3.7.0\n. @yannickcr Ah, great! My mirror hadn't picked up that version yet :) Thanks!\n. @yannickcr Ah, great! My mirror hadn't picked up that version yet :) Thanks!\n. ",
    "nickstamas": "3.7.1 fixed https://github.com/yannickcr/eslint-plugin-react/issues/286 for me, but now I'm seeing this error. Throwing the error on this file https://github.com/erikras/react-redux-universal-hot-example/blob/master/src/containers/App/App.js\n. ",
    "mjrussell": "Ah sorry for the dup, was only looking at the open issues\n. Ah sorry for the dup, was only looking at the open issues\n. ",
    "luisrudge": "Thanks @yannickcr!\n. Thanks @yannickcr!\n. ",
    "tylermcginnis": "I'm getting errors on both of those as well but without extending Relay.Mutation, just normally with createClass.\n. I'm getting errors on both of those as well but without extending Relay.Mutation, just normally with createClass.\n. I don't want to highjack this issue so I'll open a different issue. \n. I don't want to highjack this issue so I'll open a different issue. \n. Ah sorry! I assumed I had the most recent version since I downloaded this morning. Thanks again!\n. Ah sorry! I assumed I had the most recent version since I downloaded this morning. Thanks again!\n. ",
    "joshthecoder": "This snippet seems to trigger the issue:\n```\nimport { Mutation } from 'react-relay';\nexport default class MyMutation extends Mutation {\n  static fragments = {\n  }\ngetVariables() {\n    this.props.foo;  // This seems to trigger the issue.\n  }\n}\n```\n. ",
    "taion": "Possibly related to #295.\n. Thanks!\n. ~~This also triggers for arrow functions declared in static class properties, such as for Relay mutations.~~ Against 3.7.1, the following is detected as a React component and incorrectly triggers relevant ESLint rules:\n``` js\nimport Relay from 'react-relay';\nexport default class WidgetMutation extends Relay.Mutation {\n  static fragments = {\n    widget: () => Relay.QLfragment on Widget {\n        id\n      }\n  };\ngetMutation() {\n    return Relay.QLmutation { widget };\n  }\ngetFatQuery() {\n    return Relay.QLfragment on WidgetPayload {\n        widget\n      };\n  }\ngetConfigs() {\n    return [{\n      type: 'FIELDS_CHANGE',\n      fieldIDs: {\n        widget: this.props.widget.id\n      }\n    }];\n  }\ngetVariables() {\n    const {widget, ...props} = this.props;\n    const {id} = widget;\n    return {id, ...props};\n  }\n}\n```\nIt is not detected as such against 3.6.3.\n. The case where this comes up most acutely is having a positioner component for e.g. tooltips and overlays.\nConsider:\njsx\n<Button ref={c => { this.button = c; }} />\n<Position target={this.button}>\n  <Tooltip>Some tooltip</Tooltip>\n</Position>\nFor <Position> to work as a generic component that can e.g. calculate the size of its child, then position it appropriately relative to its target, it needs to be able to get the child's DOM node.\nTo be compatible with e.g. Bootstrap styling, it's not generally possible for a component like <Position> to render an extra <div>.\n<Position> just adding a ref to its child is insufficient, since its child may well be some composite component (e.g. <Tooltip> above) rather than a DOM component.\n. The category in general is utility components that need to interact with the DOM nodes belonging to their children, for functionality such as positioning, animation, &c.\nIf you control all of your own styling, then perhaps the extra <div> is acceptable, though not ideal. If you don't control your CSS, then adding an extra <div> can be a non-option.\n. Is there an issue tracking this on facebook/react?\nIt's a bit weird to discuss it here. The lint rule is fine, and I think we all agree that many or even most uses of findDOMNode are better handled with a ref on a DOM component.\nThe eslint-plugin-react repo is not the right place to discuss whether findDOMNode should exist as a React DOM feature.\n. In the position example, a lot of cases can just be handled with position: absolute. No need for a subtree there.\n. We're trying to write primitives that can be used in multiple contexts. React-Bootstrap is one of those contexts, but it's not the only one.\nEvery external CSS library that needs to interop with React for things like popovers should not be required to bundle its own specific overlay wrapper.\n. The other issue with the \"ref prop\" approach is that it requires you to have control of everything that you render, if you need to avoid extra DOM nodes.\nFor example, if <MyComponent> renders a <div>, then it could use a ref prop. However, if <MyComponent> renders something like <MyCustomCard>, then <MyCustomCard> needs to know about that same ref prop and attach that to its DOM node. With additional composition, this adds a lot more clutter.\nMore problematically, if the top-level view component exists in a separate library, then this becomes close to intractable.\n. FWIW, I don't think we're far apart on this.\nIt's fine for it to be an opt-in for a component to expose a way to get its own DOM node, but this needs to be an ecosystem-wide convention.\nSomething like a pass-through nodeRef is unnecessarily clunky, though. Really it sounds like what you're describing is something like an opt-in version of the old getDOMNode.\n. Again, to be clear, we don't have a problem per se with encouraging refs \u2013 but we really need the React team to promulgate some sort of standard for \"this is the name of the prop to use for the ref to get to the DOM node\". Otherwise interop across component libraries is a hopeless cause.\nJust settle on nodeRef or elementRef or whatever. But pick something and give it the official imprimatur. I'm not interested in inventing something myself only to find that other libraries use different conventions, and we're stick with no ability to interoperate for months without extra shims. That's no good.\n. (and ideally also make it work appropriately with DOM elements)\n. BTW see https://github.com/facebook/react/issues/11401\nSo unless that's changed, that likely will be the future \u2013 DOM components implement a hostRef plain prop that calls back with the DOM node.. See http://www.unicode.org/Public/10.0.0/ucd/NamesList.txt. The Unicode spec explicitly glosses U+2019 as the \"preferred character to use for apostrophe\":\n2019    RIGHT SINGLE QUOTATION MARK\n    = single comma quotation mark\n    * this is the preferred character to use for apostrophe\n    x (apostrophe - 0027)\n    x (modifier letter apostrophe - 02BC)\n    x (heavy single comma quotation mark ornament - 275C). ' (U+0027), the apostrophe, is also not the right character to use for minute notation, if we want to be specific. That's actually \u2032 (U+2032), the prime character.\nI`m not sure there are any cases where ' (U+0027) is the preferred character, though obviously it\u2057s convenient and easy to use in many cases.\nI think it's quite fair to discourage the use of that character via lint rules, though.. A promise for a component or a promise for an element?. A promise for a component or a promise for an element?. I'm not sure what you mean. A promise for a component class? These aren't that, and there are no component instances involved here anyway.\nThese would be component classes that try to render a promise for elements, which wouldn't be the same as the parent of one of these components trying to render a promise for elements.. I'm not sure what you mean. A promise for a component class? These aren't that, and there are no component instances involved here anyway.\nThese would be component classes that try to render a promise for elements, which wouldn't be the same as the parent of one of these components trying to render a promise for elements.. Can't reproduce. See test cases added in #992.. Can't reproduce. See test cases added in #992.. And in fact the PR should be expected to do the exact opposite, since the only added cases blacklist component detection.. And in fact the PR should be expected to do the exact opposite, since the only added cases blacklist component detection.. I was following the convention down the file in\njs\n    }, {\n      code: [\n        'var Hello = function(props) {',\n        '  return <div>Hello {props.name}</div>;',\n        '}'\n      ].join('\\n'),\n      parser: 'babel-eslint',\n      errors: [{\n        message: '\\'name\\' is missing in props validation'\n      }]\n    }, {\n      code: [\n        'function Hello(props) {',\n        '  return <div>Hello {props.name}</div>;',\n        '}'\n      ].join('\\n'),\n      parser: 'babel-eslint',\n      errors: [{\n        message: '\\'name\\' is missing in props validation'\n      }]\n    }, {\n      code: [\n        'var Hello = (props) => {',\n        '  return <div>Hello {props.name}</div>;',\n        '}'\n      ].join('\\n'),\n      parser: 'babel-eslint',\n      errors: [{\n        message: '\\'name\\' is missing in props validation'\n      }]\n    }, {\nShould those be changed as well?. ",
    "atomanyih": "https://github.com/yannickcr/eslint-plugin-react/issues/226\n. ",
    "aryzle": "Display-name rule should only be a warning anyway, right? My testing code is failing when rendering this component\nexport class Form extends Component {                                           \n    render () {\n        ...\n    }\n}\nAt the bottom of the file I have export default CreateTeamForm;\n. acceptTranspilerName is set to true, this is the test code that breaks it btw:\nreturn TestUtils.renderIntoDocument(\n    <Provider store={store}>                                            \n        {() => <CreateTeamForm {...props} />}                           \n    </Provider>\n);\n. ",
    "ianmstew": "In version 3.11.2 I can confirm dot-accessed nested props are checked, but destructured nested props are not.  Should I open a new issue on this?\nFor example, const nope = this.props.bar.nope will generate an error, but const {bar:{nope}} = this.props will not.\n. ",
    "gpbmike": "This is exactly what I was looking for thanks.\n. ",
    "keithamus": ":+1: awesome, thanks so much @yannickcr. Really appreciate this project and your work btw!\n. @eballeste I haven't used react in a while but if I recall, we ultimately resovled to only ever use functional stateless compoments for everything except for components needing the low level life cycle hooks which would naturally get much closer scruitiny. If I was maintaining any react codebases anymore that's the direction I'd certainly move in. . ",
    "jakemmarsh": "Fixed alphabetical order and squashed commits @yannickcr \n. Done! @yannickcr \n. Not sure why the checks have failed?\n. No worries about the delay @yannickcr. I'll work on differentiating between the two types of names ASAP\n. No worries about the delay @yannickcr. I'll work on differentiating between the two types of names ASAP\n. sorry @ljharb, I'm no longer working with this rule.. Good point, updated\n. added\n. ",
    "doque": "Got it. Should be prefer-double.\n. ",
    "dapetcu21": "It's https://github.com/tonsky/firacode :)\n. About stateless components:\nI see the value in having an ignore option, though there are certain rules that simply make no sense with stateless components (like display-name)\n. Still, that's not the only rule where you might want to have ignoreStatelessFunctionComponents.\nIn the example above, the intent is to write a react-native Navigator.NavigationBar route mapper. eslint-plugin-react thinks those are stateless components even though they aren't.\nSince it's a bit hard to differentiate stateless components from just functions returning JSX, what would be the preferred way of disabling other checks like react/no-multi-comp in these situations?\n. You're welcome \ud83d\ude0a\n. ",
    "IanVS": "I am also wondering the same thing, if there's a good way to avoid adding them all manually as exceptions.  In my case, I'm using a formsy-react decorator, and don't want to get linting errors on the methods it provides on this.props.\n. Issue should probably be closed.\n. I would also love to be able to use:\ncondition\n? <div>\n     <div> something </div>\n  </div>\n: <div />\nrather than \ncondition\n? <div>\n    <div> something </div>\n</div>\n: <div />\nThe closing  is aligned to the opening tags, rather than the ? and :.\nWould this be possible to add as an option?. Ah, I see, I was missing that step.  And react generates valid DOM nodes with start/end tags when necessary.  Thanks for explaining!\n. Ok, looks like we'll need to wait for https://github.com/eslint/eslint/issues/8594.  Thanks.. ",
    "wuct": "I also run into this issue when I am using acdlite/recompose. It turns out that moving propTypes up to a HOC / decorator is not only a sugar but also necessary. For example, when a component is wrapped in a HOC, one can not get its propTypes from outside unless its propTypes is declared in the outermost HOC.\n``` javascript\n// set propTypes in the component\n@pure\nclass Foo extends Component {\n    static propTypes = {}\n}\nexpect(Foo.propTypes).to.be.an('undefined');\n// set propTypes in the outermost HOC\n@setPropTypes({})\n@pure\nclass Bar extends Component {}\nexpect(Bar.propTypes).to.be.an('object');\n``\n. I also run into this issue when I am using [acdlite/recompose](https://github.com/acdlite/recompose). It turns out that movingpropTypesup to a HOC / decorator is not only a sugar but also necessary. For example, when a component is wrapped in a HOC, one can not get itspropTypesfrom outside unless itspropTypes` is declared in the outermost HOC.\n``` javascript\n// set propTypes in the component\n@pure\nclass Foo extends Component {\n    static propTypes = {}\n}\nexpect(Foo.propTypes).to.be.an('undefined');\n// set propTypes in the outermost HOC\n@setPropTypes({})\n@pure\nclass Bar extends Component {}\nexpect(Bar.propTypes).to.be.an('object');\n```\n. ",
    "jochienabuurs": "any progress on this topic?\n. ",
    "arronmabrey": "@yannickcr and all I added a simple test case that exposes an issue I came across while working with https://github.com/acdlite/recompose\nhttps://github.com/yannickcr/eslint-plugin-react/pull/762\nHopefully this can help bring attention to this issue.\n. ",
    "monsieurnebo": "We need this !. ",
    "yvele": "PS: I'm right now using the ignore option of react/prop-types as a workarround for my decorated proptypes. @giuseppepaul Sure!\n\"rules\": {\n   \"react/prop-types\" : [\"error\", { \"ignore\": [\"foo\", \"bar] }]\n}. @giuseppepaul Sure!\n\"rules\": {\n   \"react/prop-types\" : [\"error\", { \"ignore\": [\"foo\", \"bar] }]\n}. ",
    "giuseppepaul": "@yvele I'm trying to do this but struggling to get it working, could you show me what your .eslintrc looks like?. @yvele I'm trying to do this but struggling to get it working, could you show me what your .eslintrc looks like?. ",
    "SampsonCrowley": "Just to leave another option, I export the proptypes for a decorator then destructure them into the connected class.\nDecorator\n```js\n...\n...\nexport const authPropTypes = {\n  authorize: PropTypes.func,\n  isLoggedIn: PropTypes.bool,\n  login: PropTypes.func,\n  logout: PropTypes.func,\n  userProfile: PropTypes.object\n};\nexport default function withAuth(ComposedComponent) {\n  ...\n}\n```\nDecorated:\n```js\n...\nimport withAuth, {authPropTypes} from 'decorators/with-auth';\n@withAuth\nclass Header extends Component {\n  static propTypes = {\n    checked: PropTypes.bool,\n    toggleMenu: PropTypes.func,\n    ...authPropTypes\n  }\n...\n}\n```\n. ",
    "damianobarbati": "Any progress on this? It's so annoying to duplicate all the component proptypes around the codebase or importing/spreading them all over. \ud83d\ude14. Any solution for this?. @VladislavAnkudinov @astorije did you find solution for this?. +1 for this. ",
    "jayphelps": "Seeing this as well. Adding this simply for SEO:\nError while loading rule 'react/no-multi-comp': Can't add property react, object is not extensible\n. Abandoning due to lack of response from maintainers. \n\nEdit: I didn't mean this in a \"fuck you guys for not responding\" way. I PR'd this in May and hadn't received a response from any of the maintainers; and I don't have cycles to revisit in-depth at the moment. There are crazy number of perfectly valid reasons someone didn't respond, I'm not judging. Don't read into more than that \ud83d\udc83 \n. @ljharb oooo when I tried to rebase, I discovered it appears this has already been added in #830. Our two implementation seem mutually exclusive. Do you know if there is something this fixes that #830 did not?\n. @mmiller42 oh! my PR takes a different approach that does support that. Instead of trying to insert or remove indention, it just always just replaces the indention entirely using fixer.replaceTextRange.\nI've rebased and updated my PR, uncommented the tests which weren't working in #830 but now are. Seems OK, but it's been a while since I've looked at this code so definitely have a critical eye.\n. Note that I have not fixed the pre-existing issue of the previously mentioned odd output in the test:\njs\nfunction App() {\n  return (\n    <App>\n  <Foo />\n</App>\n  );\n}\nPresumably, #830 just didn't catch that.\n. > I'd rather leave the broken but correct test, and comment it out, than leave this incorrect test. Could we do that?\nDone.\n. lmk if there's anything else I missed \ud83c\udf89\n. Is this multiple fixes to separate indention cases?. It's just a bit hard for me to follow with the various changes for separate things. I don't have enough cycles to fully understand it so I can't give a sign off, but it generally looks good. There were a couple changes you made that are opinionated--you called them out with comments.. Could you perhaps edit the original post to include a summary of the changed behaviors?. I would expect the output to be\njs\nfunction App() {\n  return (\n    <App>\n        <Foo />\n    </App>\n  );\n}\nWhy is it not?\n. @ljharb a fix included in this PR or a fix elsewhere? \n@CiGit had said this:\n\nTo have the output you (and I) expect, the way errors are computed should be changed. ie JSXElement's indentation compared to something like ROOT - 1line, not to its direct parent / opening tag.\nIMO that's an other issue\n\nIf I understand correctly, this will require detection logic changes. I unfortunately don't have cycles to dig that deep into the internals at the moment. If anyone else does, feel free to continue--I don't need commit \"credit\" hehe\n. This previous code used String.prototype.repeat() which is ES2015. I can switch back to using that instead of the join() trick I used, if it's a safe to assume repeat is supported.\n. just let me know which way you'd like. to me it seems silly to bring in a lib since the join trick is short, simple, and I think fairly obvious what it does. \ud83d\ude0f  aka left-pad\n. ",
    "machadogj": "@jayphelps +1, I ended up here while trying to report the issue!\n. Awesome work guys!\n\nOn Nov 20, 2015, at 8:39 PM, paulmartinezatdocker notifications@github.com wrote:\nJust tested the latest version and my issue has now been resolved.\nThanks guys!\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "begizi": "Same here. Great job! :+1: \n. ",
    "aarongreenwald": "I did something along these lines in this PR to eslint-plugin-react-native but now I'm realizing perhaps it's not specific to React Native and could be useful here. But I don't do anything with the style tag. \nAlso, this rule only checks for object literals directly inside JSXAttributes with style in the name. It makes an exception for object literals that only have properties with variable values, so that you can use state or props in styles inline.\n. ",
    "jseminck": "@lambdabaa, It turns out eslint-plugin-react-native has this rule. It's not pretty to use that for a web app \ud83d\ude04 ... see: https://github.com/yannickcr/eslint-plugin-react/issues/1325\nPerhaps we should port it over to here.... Seems like there is already an open PR: https://github.com/yannickcr/eslint-plugin-react/pull/427\nAnd there are other issues and users asking for the same functionality: https://github.com/yannickcr/eslint-plugin-react/issues/410\nSo would be nice to include this one way or another. I'm up for trying to improve this specific implementation or helping out with the other PR if needed.\n. Closing this as it also contains other commits. Will create a different fork and make a new PR from that.\n. Fair point. \nWe do not have these cases where we have overridable and required props mixed together. We just have a bunch of objects that we pass around and eventually spread into smaller components. We just use a mix of begin and end placement and otherwise have to correct it manually during code reviews .\nBut I understand that your use case can be quite common, perhaps way more than ours. If you think the rule is not applicable to most projects then feel free to dismiss it.\n. If the return is wrapped in an if statement then it also doesn't work:\n``` js\nrender() {\n        var test = true;\n    if (test) {\n        return <div></div>;\n    }\n    else {\n        return <div></div>;\n    }\n}\n\n```\n. I tried to fix this in https://github.com/jseminck/eslint-plugin-react/commit/2a51f2399df3424411543d38c41f8bf3bac10253 and https://github.com/jseminck/eslint-plugin-react/commit/0bf8e3f57bdd2e245da4e0c64f9c1385e5dd5f24\nIt now works with switch and if statements. I also added tests for a nested if and switch statement. \nAdditionally added another commit that makes sure that every child of the if and switch statements has a return statement:\n@yannickcr  @ljharb  would be good if any of you could take a look at the code as I'm not really all that familiar with ASTs. It was quite challenging (but definitely a fun exercise).\n. I'll look at improving the error message(s) and documentation and then make a PR.\nAlso I ran into the same issue reported in https://github.com/yannickcr/eslint-plugin-react/issues/542 already, e.g. that render() methods in classes that do not extend React.Component also are linted. Perhaps I'll have a look at that too as it is also stopping us from being able to use this rule.\n. This should be fixed. @wx2228. what version of eslint-plugin-react do you use? If using the latest, could you provide sample code of what is failing? Then I can look into it. Thanks!. Strange. This case is supported and has tests for it: https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prefer-stateless-function.js#L42. This can probably be closed now that we have the no-typos rule? Any specific cases that we want to add/support can go to that rule instead.. I'll take a look at this rule, since it was just recently requested again in https://github.com/yannickcr/eslint-plugin-react/issues/1217\nIt looks pretty easy to add:\n\nValidate the MethodDefinition name\nValidate that the method is declared in a PureComponent (for which a helper already exists)\n\nProbably will need some help with the actual rule name and errors + docs. I suppose no-useless-scu is not a good name, as we want to warn the user not to extend React.PureComponent when they want to override shouldComponentUpdate?. I'll take a look at this rule, since it was just recently requested again in https://github.com/yannickcr/eslint-plugin-react/issues/1217\nIt looks pretty easy to add:\n\nValidate the MethodDefinition name\nValidate that the method is declared in a PureComponent (for which a helper already exists)\n\nProbably will need some help with the actual rule name and errors + docs. I suppose no-useless-scu is not a good name, as we want to warn the user not to extend React.PureComponent when they want to override shouldComponentUpdate?. Nevermind. There is a PR already. Missed it.. Nevermind. There is a PR already. Missed it.. I've adding support for this in https://github.com/yannickcr/eslint-plugin-react/issues/1393 which is still WIP. Will add these test cases but I'm quite sure they work already.. Could not reproduce this on master. Tried with both 2 and 4 spaces as indent. @pfarnach can you check if this is still an issue with latest release?. Could not reproduce this on master. Tried with both 2 and 4 spaces as indent. @pfarnach can you check if this is still an issue with latest release?. @RiddleMan, how is your POC going? Did you manage to continue working on it? I would love to take a look as well, perhaps see if I can help out if needed.. @RiddleMan, how is your POC going? Did you manage to continue working on it? I would love to take a look as well, perhaps see if I can help out if needed.. Hello,\nI ran your latest test case in a PR where we fixed the following issue: https://github.com/yannickcr/eslint-plugin-react/issues/1183 - and in there the test case passed! Prior to the changes from that specific PR, the test case was failing.\nRemoving the .map() code in the render() would make the component valid under the current implementation.\nSo I am quite confident those changes are also fixing the issue that you see here. And yes I would think that this to be a bug. Do others agree?. Hello,\nI ran your latest test case in a PR where we fixed the following issue: https://github.com/yannickcr/eslint-plugin-react/issues/1183 - and in there the test case passed! Prior to the changes from that specific PR, the test case was failing.\nRemoving the .map() code in the render() would make the component valid under the current implementation.\nSo I am quite confident those changes are also fixing the issue that you see here. And yes I would think that this to be a bug. Do others agree?. I was not aware of this PR!\nYes. It should cover the same functionality as this PR and more ( the new syntax ). This PR contains more test cases though. I will add them as well to make sure they all pass. \nEdit: I was a bit confused initially. I thought this PR was about no-unused-prop-types rule but it was about prop-types rule.\nJust to clarify:\nEven though this PR was made before, the support for Flow in prop-types was added in https://github.com/yannickcr/eslint-plugin-react/pull/382 and then enhanced in https://github.com/yannickcr/eslint-plugin-react/pull/1377\nIt seems all the functionality that this PR added is already supported for prop-types. But for the no-unused-prop-types rule we are still missing some functionalities, but https://github.com/yannickcr/eslint-plugin-react/pull/1412 is the first step to adding that support.\n. I could try and take a look at this. Not sure how far I will get.\nI see that the same issue exists with shouldComponentUpdate and nextProps: https://github.com/yannickcr/eslint-plugin-react/issues/1213. I could try and take a look at this. Not sure how far I will get.\nI see that the same issue exists with shouldComponentUpdate and nextProps: https://github.com/yannickcr/eslint-plugin-react/issues/1213. Hi,\nThis issue seems fixed in https://github.com/yannickcr/eslint-plugin-react/pull/1106 - E.g. it should work on the 7.0.0 release (which was released after this issue was created.). @joetidee can you please let me know what version you use and what is failing for you?\nJust to be clear, the example code from the original issue works. See below for a more concise example:\nThe following example passes eslint-plugin-react test cases so it should work\n```js\nclass Hello extends Component {\n  static propTypes = {\n    foo: PropTypes.string\n    bar: PropTypes.string\n  };\ncomponentWillReceiveProps (nextProps) {\n    if (nextProps.foo) {\n      return true;\n    }\n  }\nrender() {\n    return ({this.props.bar});\n  }\n}\n```\nThe following example  does NOT pass eslint-plugin-react test cases so it should NOT work\n```js\nclass Hello extends Component {\n  static propTypes = {\n    foo: PropTypes.string\n    bar: PropTypes.string\n  };\nshouldComponentUpdate (nextProps) { // replace componentWIllReceiveProps with shouldComponentUpdate\n    if (nextProps.foo) {\n      return true;\n    }\n  }\nrender() {\n    return ({this.props.bar});\n  }\n}\n```\nI identified a few issues:\n\nThe parameter has to be named either props or nextProps. Calling it foo will not work. (not sure if there is a rule for that)\nWe only support nextProps for componentWillReceiveProps, but not for other React lifecycle methods (e.g. shouldComponentUpdate(nextProps) and componentDidUpdate(nextProps)\nWe also do not support componentDidUpdate(prevProps) due to a combination of both points above.\n\nI'll get one or a few PR-s out for this within the next few days. As I believe we might as well fix all three points but it may be better to handle them one issue at a time. :)\n. Hi,\nThis issue seems fixed in https://github.com/yannickcr/eslint-plugin-react/pull/1106 - E.g. it should work on the 7.0.0 release (which was released after this issue was created.). @joetidee can you please let me know what version you use and what is failing for you?\nJust to be clear, the example code from the original issue works. See below for a more concise example:\nThe following example passes eslint-plugin-react test cases so it should work\n```js\nclass Hello extends Component {\n  static propTypes = {\n    foo: PropTypes.string\n    bar: PropTypes.string\n  };\ncomponentWillReceiveProps (nextProps) {\n    if (nextProps.foo) {\n      return true;\n    }\n  }\nrender() {\n    return ({this.props.bar});\n  }\n}\n```\nThe following example  does NOT pass eslint-plugin-react test cases so it should NOT work\n```js\nclass Hello extends Component {\n  static propTypes = {\n    foo: PropTypes.string\n    bar: PropTypes.string\n  };\nshouldComponentUpdate (nextProps) { // replace componentWIllReceiveProps with shouldComponentUpdate\n    if (nextProps.foo) {\n      return true;\n    }\n  }\nrender() {\n    return ({this.props.bar});\n  }\n}\n```\nI identified a few issues:\n\nThe parameter has to be named either props or nextProps. Calling it foo will not work. (not sure if there is a rule for that)\nWe only support nextProps for componentWillReceiveProps, but not for other React lifecycle methods (e.g. shouldComponentUpdate(nextProps) and componentDidUpdate(nextProps)\nWe also do not support componentDidUpdate(prevProps) due to a combination of both points above.\n\nI'll get one or a few PR-s out for this within the next few days. As I believe we might as well fix all three points but it may be better to handle them one issue at a time. :)\n. The problem seems to be the combination of ignoreCase: true and callbacksLast: true\ncallbacksLast is looking for a pattern: on[A-Z]:\nfunction isCallbackPropName(name) {\n  return /^on[A-Z]/.test(name);\n}\nHowever, ignoreCase: true is calling toLowerCase():\n```\n          if (ignoreCase) {\n            previousPropName = previousPropName.toLowerCase();\n            currentPropName = currentPropName.toLowerCase();\n          }\n      ... other code ....\n\n       if (callbacksLast) {\n          var previousIsCallback = isCallbackPropName(previousPropName);\n          var currentIsCallback = isCallbackPropName(currentPropName);\n       }\n\n```\nThe bug was introduced in 7.0.0. Specifically here - where the check for the isCallbackPropName() was moved from before if (ignoreCase) to  after this condition.\nhttps://github.com/yannickcr/eslint-plugin-react/pull/1134/commits/6e18e40896ab3d22be5376675affad240ea4d4f9#diff-bf26edcfae7aa27411d9a791b4eb8a8eL74\nSeems like a simple fix, moving it back to it's original position does not break any tests. Will create a PR that includes a test case containing these two properties as defined options.. The problem seems to be the combination of ignoreCase: true and callbacksLast: true\ncallbacksLast is looking for a pattern: on[A-Z]:\nfunction isCallbackPropName(name) {\n  return /^on[A-Z]/.test(name);\n}\nHowever, ignoreCase: true is calling toLowerCase():\n```\n          if (ignoreCase) {\n            previousPropName = previousPropName.toLowerCase();\n            currentPropName = currentPropName.toLowerCase();\n          }\n      ... other code ....\n\n       if (callbacksLast) {\n          var previousIsCallback = isCallbackPropName(previousPropName);\n          var currentIsCallback = isCallbackPropName(currentPropName);\n       }\n\n```\nThe bug was introduced in 7.0.0. Specifically here - where the check for the isCallbackPropName() was moved from before if (ignoreCase) to  after this condition.\nhttps://github.com/yannickcr/eslint-plugin-react/pull/1134/commits/6e18e40896ab3d22be5376675affad240ea4d4f9#diff-bf26edcfae7aa27411d9a791b4eb8a8eL74\nSeems like a simple fix, moving it back to it's original position does not break any tests. Will create a PR that includes a test case containing these two properties as defined options.. I have been taking a look at this issue as I wanted to familiarize myself with the codebase a little bit. I managed to reproduce the issue through tests, and found a fix for it. Though I have no idea if the fix is valid or not. It does not break any other tests, though.\nI will make a PR with the fix later today or tomorrow. Then anyone more experienced with the code can take a look. Even if my fix is not correct it might help someone else figure out what the issue really is.\nFor clarification, this also works (declaring anotherCallback before callback):\n```jsx\nexport default function SomeComponent(props) {\n    const anotherCallback = () => {};\nconst callback = () => {\n    props.a(props.b);\n};\n\nreturn (\n    <SomeOtherComponent\n        name={props.c}\n        callback={callback}\n    />\n);\n\n}\nSomeComponent.propTypes = {\n    a: React.PropTypes.func.isRequired,\n    b: React.PropTypes.string.isRequired,\n    c: React.PropTypes.string.isRequired,\n};\n```. I have been taking a look at this issue as I wanted to familiarize myself with the codebase a little bit. I managed to reproduce the issue through tests, and found a fix for it. Though I have no idea if the fix is valid or not. It does not break any other tests, though.\nI will make a PR with the fix later today or tomorrow. Then anyone more experienced with the code can take a look. Even if my fix is not correct it might help someone else figure out what the issue really is.\nFor clarification, this also works (declaring anotherCallback before callback):\n```jsx\nexport default function SomeComponent(props) {\n    const anotherCallback = () => {};\nconst callback = () => {\n    props.a(props.b);\n};\n\nreturn (\n    <SomeOtherComponent\n        name={props.c}\n        callback={callback}\n    />\n);\n\n}\nSomeComponent.propTypes = {\n    a: React.PropTypes.func.isRequired,\n    b: React.PropTypes.string.isRequired,\n    c: React.PropTypes.string.isRequired,\n};\n```. I will take a look at this.. I will take a look at this.. While looking into: https://github.com/yannickcr/eslint-plugin-react/issues/1282 - I also ran into some of the issues mentioned above.\nWhen fixing the following:\njs\n{myCondition && \n  <div>\n    <p>Hello World</p>\n  </div>\n}\nThe current auto fixer would return:\njs\n{myCondition && \n  (<div>\n    <p>Hello World</p>\n  </div>)\n}\nWhich IMHO looks rather ugly. And I could not find any other ESLint rule that would format this into what we want (see below). I did manage to write the fixer in a way that it returns this for this specific case, but the code is quite fragile and probably would need a good set of unit tests to confirm it works correctly in all cases.\njs\n{myCondition && (\n  <div>\n    <p>Hello World</p>\n  </div>\n)}\nMy initial fixer implementation:\njs\nfunction(fixer) {\n  const rightNode = node.expression.right;\n  return [\n    fixer.insertTextAfterRange(sourceCode.getTokenBefore(rightNode).range, ' ('),\n    fixer.insertTextBeforeRange(sourceCode.getLastToken(node).range, ')')\n  ];\n}\nSo in addition to the above ticket and the points mentioned in here, I think it's needed to take a deeper look into this rule and see if it can be made more useful! . While looking into: https://github.com/yannickcr/eslint-plugin-react/issues/1282 - I also ran into some of the issues mentioned above.\nWhen fixing the following:\njs\n{myCondition && \n  <div>\n    <p>Hello World</p>\n  </div>\n}\nThe current auto fixer would return:\njs\n{myCondition && \n  (<div>\n    <p>Hello World</p>\n  </div>)\n}\nWhich IMHO looks rather ugly. And I could not find any other ESLint rule that would format this into what we want (see below). I did manage to write the fixer in a way that it returns this for this specific case, but the code is quite fragile and probably would need a good set of unit tests to confirm it works correctly in all cases.\njs\n{myCondition && (\n  <div>\n    <p>Hello World</p>\n  </div>\n)}\nMy initial fixer implementation:\njs\nfunction(fixer) {\n  const rightNode = node.expression.right;\n  return [\n    fixer.insertTextAfterRange(sourceCode.getTokenBefore(rightNode).range, ' ('),\n    fixer.insertTextBeforeRange(sourceCode.getLastToken(node).range, ')')\n  ];\n}\nSo in addition to the above ticket and the points mentioned in here, I think it's needed to take a deeper look into this rule and see if it can be made more useful! . There's a PR for it.. There's a PR for it.. Tackled your comments. I was not aware of childContextTypes - it is not something I have had to use before. If there are any properties that should be added please let me know.  It's pretty trivial to add them - we just have to make sure the test cases are added as well.\nAlso I wanted to ask: as I was working on this, I thought that it might be worth it to detect small spelling mistakes as well. We should be able to easily detect 1-letter spelling mistakes. But I am not sure how far this plugin wants to go? . Tackled your comments. I was not aware of childContextTypes - it is not something I have had to use before. If there are any properties that should be added please let me know.  It's pretty trivial to add them - we just have to make sure the test cases are added as well.\nAlso I wanted to ask: as I was working on this, I thought that it might be worth it to detect small spelling mistakes as well. We should be able to easily detect 1-letter spelling mistakes. But I am not sure how far this plugin wants to go? . The default parser throws an error. I assume that is the case because the class properties proposal is still stage-0 and it is not supported by espree (which is the default parser). \nThis is the error that the test then gives: https://astexplorer.net/#/gist/da19b693a7a3d48bcc3fb249180b5295/a5875bd2c21133f64ce9f397ff82adb5e37da26a\nPlease correct me if I am wrong, would need guidance what exactly needs to be changed. :)\nEdit: Did you mean that the following should also be validated? Because currently this is not checked and does not throw a warning. \njs\nclass Hello extends Component [}\nHello.pRopTyPeS = { ... } // should throw an error because of casing issues?\nI did remove the require(\"babel-eslint\"); at the top of the test file. That seems like it was not needed.. I added tests and support for assignment outside the class.\nBut I cannot get it to work when assigning on a stateless function component: I am not sure how to detect whether the function is a stateless function component or just some random function yet.\n```js\n      function MyComponent(props) {\n        return {props.name};\n      }\n  QuestionList.PrOpTyPeS = {\n    name: PropTypes.string.isRequired,\n  };\n\n```. I spent quite a bit of time on this but no luck so far. I cannot figure out how to properly detect a stateless function component so that the following becomes invalid:\njs\nfunction MyComponent() { return (<div>{this.props.myprop}</div>) };\nMyComponent.pRoPTyPeS = { myProp: PropTypes.string }\nBut the following is valid (since it is not a stateless component):\njs\nfunction SomeRandomFunction() { return {} };\nMyComponent.pRoPTyPeS = { }\nI tried using components.isReturningJSX but didn't get anywhere.\nI added all the test cases, maybe someone else has any idea?. I spent quite a bit of time on this but no luck so far. I cannot figure out how to properly detect a stateless function component so that the following becomes invalid:\njs\nfunction MyComponent() { return (<div>{this.props.myprop}</div>) };\nMyComponent.pRoPTyPeS = { myProp: PropTypes.string }\nBut the following is valid (since it is not a stateless component):\njs\nfunction SomeRandomFunction() { return {} };\nMyComponent.pRoPTyPeS = { }\nI tried using components.isReturningJSX but didn't get anywhere.\nI added all the test cases, maybe someone else has any idea?. So I finally managed to fix this. I also rebased everything unto the latest master.\nI ended up extending Components.findReturnStatement to also work when passing in FunctionDeclaration node. Previously, it would not work for this specific node.\nThis way, I could now use utils.isReturningJSX to properly detect a functional stateless component compared to a normal function..\nI tried various other approaches from the existing Components API but nothing wold make the tests pass as I expected them to.. Could you please elaborate a bit more what you mean exactly?\nI added a test case for this, as this was currently causing a crash:\nclass First extends React.Component {}\n      First[\"prop\" + \"Types\"] = {};'\n      First[\"context\" + \"Types\"] = {};'\n      First[\"childContext\" + \"Types\"] = {};'\n      First[\"default\" + \"Props\"] = {};\nAnd yeah - this is not supported. E.g. First[\"deFauLT\" + \"prOps\"] = {} will not error.. I understood why we want the test cases. I just wasn't 100% sure that I understood correctly what you meant with \"computed static property names\".  \nI understood this was used for:\n```js\nconst myObj = {\n}\n```\nBut I don't see how this syntax can be used to declare these properties.  The tests I added are basically what this would transpile to:\njs\nconst myObj = {}\nmyObj[\"myKey-\" + getIndex()]: \"myValue\nI hope that's all that is needed to finalize this, as I'd like to start focussing on the next steps. :). I understood why we want the test cases. I just wasn't 100% sure that I understood correctly what you meant with \"computed static property names\".  \nI understood this was used for:\n```js\nconst myObj = {\n}\n```\nBut I don't see how this syntax can be used to declare these properties.  The tests I added are basically what this would transpile to:\njs\nconst myObj = {}\nmyObj[\"myKey-\" + getIndex()]: \"myValue\nI hope that's all that is needed to finalize this, as I'd like to start focussing on the next steps. :). To expand upon ljharb his comment, and for anyone else reading this in the future. This syntax is supported:\n/**\n * @extends React.Component\n */\nexport default class Hello extends MySuperClass {\n   ...\n}\nAnd\n/**\n * @augments React.Component\n */\nexport default class Hello extends MySuperClass {\n   ...\n}. To expand upon ljharb his comment, and for anyone else reading this in the future. This syntax is supported:\n/**\n * @extends React.Component\n */\nexport default class Hello extends MySuperClass {\n   ...\n}\nAnd\n/**\n * @augments React.Component\n */\nexport default class Hello extends MySuperClass {\n   ...\n}. Just out of curiosity, how large is your project? \nI see a lot of differences with my output, e.g. for me no-unused-vars is much slower but react/no-unused-prop-types and react/sort-comp are much faster.\nRule                           | Time (ms) | Relative\n:------------------------------|----------:|--------:\nimport/no-nodejs-modules       |  6059.752 |    27.7%\nreact/no-unused-prop-types     |  1304.725 |     6.0%\nreact/prop-types               |  1191.717 |     5.4%\nno-unused-vars                 |  1151.751 |     5.3%\nreact/no-direct-mutation-state |  1041.367 |     4.8%\nreact/no-string-refs           |   986.259 |     4.5%\nmax-len                        |   943.344 |     4.3%\nreact/sort-comp                |   655.701 |     3.0%\nindent                         |   651.466 |     3.0%\nreact/no-deprecated            |   580.024 |     2.7%\nThis project has about 40k lines of code in 1000 files for the source. And about 50k lines of code in 750 files for the tests. Number of React components is around 225.. I ran this on my code-base which only uses class syntax, no stateless function components at all, and it seems to work pretty well. I found one issue where the prefer-stateless-function rule doesn't detect well, I will create a ticket for that.\nI added a tiny comment about a syntactical preference, but it's very personal: https://github.com/yannickcr/eslint-plugin-react/pull/1229/files#r119805697. Used .indexOf(). Thanks for that, I did not notice that or even think about it.\nI also fixed the invalid test cases, as the lines and column values were incorrect. Hopefully CI should be green now. Sorry for the problems!\nhttps://npmjs.com/array-includes would be nice to use, actually. There's a lot of places that use indexOf() and they all use it differently: !== -1, > -1, >= 0. However I am not comfortable making the decision of adding a new dependency.. Is there any change needed in the docs for this? It's for example important that the parameter names are correct (only works with nextProps, props and prevProps). @SuEric could you try to run your code against master? Then we can see if this case is fixed already or not. Judging by the code, I cannot be completely sure...\nYou can do it this way: npm install git://github.com/yannickcr/eslint-plugin-react.git. Ok - I'll try to have a look and see if I can reproduce.\nMore on-topic. I tried to use _.pick() to reduce some code for prop passing. Turns out this is also not being validated correctly. Not sure if it should be supported...\nE.g:\n```js\nexport default class Create extends React.Component {\n    static propTypes = {\n        currentSubmission: PropTypes.object.isRequired,\n        addLocation: PropTypes.func.isRequired,\n        cancelSubmission: PropTypes.func.isRequired,\n        submissionFieldChange: PropTypes.func.isRequired,\n    };\nrender() {\n    return (\n        <div className=\"row col-md-8\">\n            <StaticForm {..._.pick(this.props, \"currentSubmission\", \"submissionFieldChange\")} />\n            <LocationsForm {..._.pick(this.props, \"addLocation\", \"currentSubmission\")} />\n            <CancelButton {..._.pick(this.props, \"cancelSubmission\")} />\n        </div>\n    );\n}\n\n}\n```\n16:28  error  'currentSubmission' PropType is defined but prop is never used      react/no-unused-prop-types\n  18:22  error  'addLocation' PropType is defined but prop is never used            react/no-unused-prop-types\n  19:27  error  'cancelSubmission' PropType is defined but prop is never used       react/no-unused-prop-types\n  20:32  error  'submissionFieldChange' PropType is defined but prop is never used  react/no-unused-prop-types. Thanks. I managed to reproduce... Here's a more concise example what doesn't work:\n```js\nexport default function QuestionList(props) {\n    return (\n        \n            {props.questions.map((question) => (\n                \n{props.dateFormatter(question.updatedAt)}\n                    {props.showAnswersBadge && Show Answers!}\n                    {props.showViewsBadge && Show views}\n                \n            ))}\n        \n    );\n}\nQuestionList.propTypes = {\n    questions: PropTypes.array.isRequired,\n    dateFormatter: PropTypes.func.isRequired, // not found\n    showAnswersBadge: PropTypes.bool, // not found\n    showViewsBadge: PropTypes.bool,\n};\n```\nIf I remove {props.showViewsBadge && <div>Show views</div>} then it will detect showAnswersBadge, but not dateFormatter. \nIf I remove also {props.showAnswersBadge && <div>Show Answers!</div>} then it will detect dateFormatter.\nI'll see what I can do about this!\nEdit: Have you considered splitting up the inner Question JSX into it's own component?. This was fixed by: https://github.com/yannickcr/eslint-plugin-react/pull/1218\nTo confirm, I ran your exact test-case on master and it now passes as valid!. Additionally, it also doesn't detect this. This seems already like a more common use case to me? I figure alternatives where the function bind happens in constructors, or using arrow functions will have the same issue.\n```js\nexport default class MyComponent extends React.Component {\n    static propTypes = {\n        myAction: PropTypes.func.isRequired,\n    }\nonClick() {\n    this.props.myAction();\n}\n\nrender() {\n    return (\n        <button onClick={::this.onClick}>Click me!</button>\n    );\n}\n\n}\n``. I'll look into this: reporting methods that return JSX other than therender()` method, should be reported to be a stateless functional component.. Confirmed by adding a test case:\njs\n  1) no-array-index-key invalid foo.map((bar, i) => <Foo key />):\n     TypeError: Cannot read property 'type' of null\nBut... should it be valid, or invalid? According to this specific rule I guess it should be valid, since it's not assigning the index to the key... but then again, just having foo.map((bar, i) => <Foo key />) seems wrong?. @chriswong any chance you could rebase this?. Taking a look at this.. Maybe it can be added under the no-deprecated rule? There is already support to error using myProp: React.PropTypes.string.\nEdit: seems this actually works already:\n```js\nimport React, { PureComponent, PropTypes } from \"react\";\nexport default class MyComponent extends PureComponent {\n    static propTypes = {\n        className: PropTypes.string\n    };\n}\n```\nESLint:\n1:1  error  React.PropTypes is deprecated since React 15.5.0, use the npm module prop-types instead  react/no-deprecated. FYI broken build doesn't seem to be related to this branch. Currently when I try to build master I get the same error messages, even though the latest build on travis for master was successful (21hrs ago: https://travis-ci.org/yannickcr/eslint-plugin-react/builds/250125668). @haridusenadeera it seems some conflict was created after changes in master. Could you please rebase your changes and fix it? Thanks!\n@ljharb could you please assign some of the core contributors as reviewer for this PR? I think it would be great if it can be considered for the next release. Thanks!. Could you elaborate with an example, please? \nI could only think of this additional case, which indeed we should support as well:\n```js\nrender() {\n  const mySubRenderFn = () => {this.state.foo}\nreturn (\n    {mySubRenderFn()}\n  )\n}\n```. @yannickcr @ljharb  I still ran into another crash with the rule. Trying to figure out why/how...\nWhat do you think about writing the Components.isExplicitComponent as below? I think it may miss some cases because the comment cannot be retrieved from eslint... but probably it should be fine? At least, it's better than crashing...\nI honestly don't really understand what it is actually doing here anyway. Why do we need to parse JSDocComments to figure out if anything is a component?\njs\n    isExplicitComponent: function(node) {\n      let comment;\n      try {\n          comment = sourceCode.getJSDocComment(node);\n      } catch (e) {\n          comment = null;\n      }. @EvHaus it seems like this can be closed? (linked PR is merged). @EvHaus it seems like this can be closed? (linked PR is merged). Hi @LINKIWI - I have opened a PR for this. Could you test it out on your code and see if it works for you?. @LostCrew actually it could be good if you could find out the code that breaks. Just want to make sure the current fix covers your case too.. @cheton any chance you can provide an example of the code that breaks it? I understand it may not be easy to find, but it would be very useful!. Thanks a lot. I'll try to look into this asap.\nIn short I think we should start to try to find a way to limit the no-typos rule to files that actually contain React.Components. Currently it's visiting all MemberExpressions which is perhaps a bit overkill. And additionally all crashes have come from files that did not contain any React related code.. @cheton PR is up. If you can, please have a look. Thanks a lot for reporting the issue and taking the time to find a snippet to reproduce the issue. \ud83c\udf89 . @cheton have you had a change to try 7.4.0-rc0? I haven't found any issues anymore. But would be great to confirm if your issue is fixed as well.. Also wrote a comment explaining the issue to the eslint core team: https://github.com/eslint/eslint/issues/9101#issuecomment-322966051. One of the eslint maintainers gave some good ideas on how to get it working properly. I'll have to re-write the rule a bit: https://github.com/eslint/eslint/issues/9101#issuecomment-323134182 (or someone else can give it a go if they want to). With ESLint 4.7.0 we could now get rid of this patch, as parent should always be available when executing rules. https://eslint.org/blog/2017/09/eslint-v4.7.0-released\nHowever, I suppose it's not so \"easy\" to update our peerDependency to 4.7.0, right? That would probably require a major version bump?. We currently have test cases like this. Are these still valid with Flow 0.53?\njs\ntype Person = {\n  firstname: string\n};\nclass Hello extends React.Component<void, { person: Person }, void> {\n  render () {\n    return <div>Hello {this.props.person.lastname}</div>;\n  }\n}. @thejameskyle in flow <0.53, was this also valid syntax: React.Component<X, Props> {} ? (2 arguments, where Props is the second argument)\nIf so, then we cannot distinguish properly between the old and the new syntax. If we expect Props to be the first or the second TypedArgument, then we'll be considering State as Props for those users who use the new React.Component<Props, State> {} syntax, right?\nOfcourse we could do it so that if there are 3 arguments we check the second argument, and if there are 2 or 1 then we check the first. I just assumed that people may already have code like React.Component<X, Props> {} with the older Flow and then that would break (because we would only check the first argument as there are only 2 arguments in total).\nEdit: We could also enforce the name to be Props, but the current implementation allows the name to be anything or even an object directly (as has been requested by some users): \n\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prop-types.js#L2862\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prop-types.js#L2918\n\nThe current idea we discussed in the PR is to introduce a flowVersion configuration, similar to how we already have a version configuration for React. . Great. I think we can use that approach then! \ud83d\udc4d \n3 arguments: check the second argument.\n2 or 1 argument: check the first argument.\nThanks for your input. \ud83d\ude04 . This is now in master. It would be great if someone could try on their codebase(s) and confirm everything works!. This is now in master. It would be great if someone could try on their codebase(s) and confirm everything works!. Thanks for testing it, @johnhaley81. Appreciate that! \ud83c\udf89 Can you confirm you are using the master release? I did this to get it:\njs\nrm -rf node_modules/eslint-plugin-react\nyarn add https://github.com/yannickcr/eslint-plugin-react -D\nOne way to test it is to execute this command: cat node_modules/eslint-plugin-react/lib/rules/prop-types.js | grep versionUtil and it should return:\njs\nconst versionUtil = require('../util/version');\npropsParameterPosition = versionUtil.testFlowVersion(context, '0.53.0') ? 0 : 1;\nYou shouldn't have to add the flowVersion to the config yet, though it doesn't hurt for the future. It should definitely work without.\nHere is my example which does seem to work. bar is recognised, but foo is not. If you still have unexpected output then please provide a snippet and I'll look into it. I realise now that it is time for me to start using Flow in some side projects. \ud83d\ude04 \n. Did this example work before, but using <void, Props, void> instead of <Props> ? Or is this syntax some new feature in the latest Flow version?. Shouldn't this be raised as a separate issue? . Not sure if it is. I guess it might be. Anyway, I had a quick look at this and identified at least one issue. We are only visiting ClassDeclaration node types, but when using HOC pattern we return a ClassExpression:\n\nAdding support for this type makes these two cases valid (previous they would fail):\njs\n        type Props = { foo: string }\n        function higherOrderComponent<Props>() {\n          return class extends React.Component<Props> {\n            render() {\n              return <div>{this.props.foo}</div>\n            }\n          }\n        }\nAnd\njs\nfunction higherOrderComponent<P: { foo: string }>() {\n          return class extends React.Component<P> {\n            render() {\n              return <div>{this.props.foo}</div>\n            }\n          }\n        }\nFinally, also added a test case for @johnhaley81 's issue and it seems to pass after these changes:\njs\n        const withOverlayState = <P: {foo: string}>(WrappedComponent: ComponentType<P>): CpmponentType<P> => (\n          class extends React.Component<P> {\n            constructor(props) {\n              super(props);\n              this.state = {foo: props.foo}\n            }\n            render() {\n              return <div>Hello World</div>\n            }\n          }\n        )\nPR coming soon \ud83c\udf89 . Partially landed in master, yes. There is still one PR that solves another case.. Actually, the current code supports this syntax but Props has to be the second argument. Look at:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/prop-types.js#L860\nI suggest, we can make the argument location configurable? I suppose in the past, the second TypedParameter represented Props. Now the first one represent Props, and the second represents State.\nOr can we just hard-code it and only support the latest Flow version?\nAll other changes from this PR should be able to be reverted by just switching let annotation = node.superTypeParameters.params[1]; to let annotation = node.superTypeParameters.params[0]; and then adapting the relevant test-cases where Props used to be the second argument.\nWDYT?. According to https://medium.com/flow-type/even-better-support-for-react-in-flow-25b0a3485627 - Props is definitely the first argument. See quote below, it's a breaking change in Flow.\n\nThe biggest change we are making is to modify how you define React class components. From version 0.53.0 and on, the React.Component class will take two type arguments, Props and State (as opposed to the three type arguments including DefaultProps that React.Component took before).\n\nThe other code got added in: https://github.com/yannickcr/eslint-plugin-react/pull/1236 - It does not look like there was a corresponding issue. \nThere is a similar PR (that is still open, I think we can close it?): https://github.com/yannickcr/eslint-plugin-react/pull/1138 \nEdit actually this PR contains very useful information about how it used to work.\nThe doc links from the first PR (the one that got merged) now lead to docs that explain that Props is the first argument as well: https://flow.org/en/docs/react/components/. Great. I didn't know we have that. Makes sense, for rules like no-deprecated.  Added a new config option called \"flowVersion\". Unfortunately, the react version configuration is just called \"version\".\nReplaced the original implementation with one that takes the Flow version in mind. 0.52 checks second argument. 0.53 checks first argument.\nWill add some more test cases for 0.53 (probably should duplicate all the test cases we already have?) and update docs. There's also still some shared code between \"version\" and \"flowVersion\".. Updated the PR according to the comment from James Kyle: https://github.com/yannickcr/eslint-plugin-react/issues/1376#issuecomment-323667556\nif there are 3 TypedArguments then we can safely assume the second argument is the Props. If there are 1 or 2, then the first TypedArgument is the prop.\nThis makes the code work for both old and new versions of Flow!\nI'm guessing the flowVersion may come back at some point in the future, but for now we should be safe.\nWhat do you think about this approach?. I think there is some confusion now...\nIt was not legal to omit one of the three types in prior flow versions. So we can safely assume that with 3 arguments, the user is using older version of Flow and therefore the Props will be the second argument.\nFor the new version, it is legal to omit one of the two types. Thus, we can safely assume if there is one or two arguments, that the user is using Flow 0.53 and therefore the Props is the first argument.\nAt least, that's what I understood from the post. Please correct me if I am wrong.\nBut not sure... maybe the flowVersion approach is safer for the long term. The current code needs comments to even explain what is going on and that is perhaps not a good sign?. Aha, yes, I agree that's a good idea! \ud83c\udf89 \nWe'll have to duplicate a ton of tests though as we'll need to test with both flowVersion configured and without flowVersion configured.. I can still change it. \nI prefer the try/catch slightly more because with a null return, if you do if (testFlowVersion(context, \"myVersion\")), this would be treated as false., That is incorrect, since that would mean we default to the lowest version possible). I think people are more likely to use the function this way as it is not obvious that it can return true, false andnull.\nWith the throw it would actually throw an error for the developer that is calling the function, and they have to work around it. Until we decide to specify a default value for flowVersion in the future.\nAdditionally, with a null return the code would also be a bit more complicated (imho) and introduce another variable on which we have to do a null check:\n```js\nlet argumentPosition;\nconst isFlowVersion53 = testFlowVersion(context, \"0.53.0\");\nif (isFlowVersion53 === null) {\n  // use default logic \n} else {\n  argumentPosition = isFlowVersion53 ? 0 ; 1\n}\n```\nBut in the grand scheme of things it's just a minor change and I can live with both implementations \ud83d\ude04 . I can still change it. \nI prefer the try/catch slightly more because with a null return, if you do if (testFlowVersion(context, \"myVersion\")), this would be treated as false., That is incorrect, since that would mean we default to the lowest version possible). I think people are more likely to use the function this way as it is not obvious that it can return true, false andnull.\nWith the throw it would actually throw an error for the developer that is calling the function, and they have to work around it. Until we decide to specify a default value for flowVersion in the future.\nAdditionally, with a null return the code would also be a bit more complicated (imho) and introduce another variable on which we have to do a null check:\n```js\nlet argumentPosition;\nconst isFlowVersion53 = testFlowVersion(context, \"0.53.0\");\nif (isFlowVersion53 === null) {\n  // use default logic \n} else {\n  argumentPosition = isFlowVersion53 ? 0 ; 1\n}\n```\nBut in the grand scheme of things it's just a minor change and I can live with both implementations \ud83d\ude04 . A totally different question:\nno-unused-prop-types doesn't have any tests for the React.Component<void, Props, void> syntax. Which is surprising... it doesn't seem like it even supports this syntax, and therefore also not the new syntax.\nThe same for forbid-prop-types and default-props-match-prop-types. Adding support for this syntax for these rules should be out of scope for this PR, but we should probably add it at some point? \nI think also that the \"props extraction logic\" should be extracted to a separate file (like we have Components.js) so that this code can be re-used between these rules.. A totally different question:\nno-unused-prop-types doesn't have any tests for the React.Component<void, Props, void> syntax. Which is surprising... it doesn't seem like it even supports this syntax, and therefore also not the new syntax.\nThe same for forbid-prop-types and default-props-match-prop-types. Adding support for this syntax for these rules should be out of scope for this PR, but we should probably add it at some point? \nI think also that the \"props extraction logic\" should be extracted to a separate file (like we have Components.js) so that this code can be re-used between these rules.. I'm sure there is logic that can be shared but I think it's too early to tackle it. We would have to figure out what exactly is already duplicated between these two rules and they are both quite big/complicated.\nI just stumbled upon this while looking at another bug that was just reported and noticed there is some duplication already. Extracting it will take time.... I'm sure there is logic that can be shared but I think it's too early to tackle it. We would have to figure out what exactly is already duplicated between these two rules and they are both quite big/complicated.\nI just stumbled upon this while looking at another bug that was just reported and noticed there is some duplication already. Extracting it will take time.... Definitely fixed. Just tested it through unit tests.. Nice find! \nThe fix looks good to me. I added a few comments about the tests.. Confirmed the bug. Will fix it!\n@TheSavior are there any other such syntax that we could test? My fix should tackle all kinds of prefixes, but better save than sorry. I see there is also a - property.... Confirmed the bug. Will fix it!\n@TheSavior are there any other such syntax that we could test? My fix should tackle all kinds of prefixes, but better save than sorry. I see there is also a - property.... Just for information, indeed we added logic to validate the specific PropTypes. Since string is a key that is exported from the official prop-types package, it doesn't fail. bar is not a prop type defined in the official prop-types package, so it fails.\nNot sure how we should handle this case yet. Just explaining what changes and why the error is introduced. \ud83d\ude04 . Just for information, indeed we added logic to validate the specific PropTypes. Since string is a key that is exported from the official prop-types package, it doesn't fail. bar is not a prop type defined in the official prop-types package, so it fails.\nNot sure how we should handle this case yet. Just explaining what changes and why the error is introduced. \ud83d\ude04 . I'm trying to work on this... I guess we need to support the following cases? Did I miss anything?\n```js\nimport PropTypes from \"prop-types\"\nimport { PropTypes } from \"react\";\nimport { PropTypes as ValidPropTypes } from \"react\"\nimport React from \"react\"\nReact.PropTypes\n```\n. I'm working on this, so that custom PropTypes imports will be ignored and only the real \"prop-types\" package will be considered for checking typos.. I have a branch here: https://github.com/jseminck/eslint-plugin-react/tree/no-typos-react-import\nIt still has a failing test - but if you have any ideas feel free to help. If you want to finish it then you're free to take this code and continue working on top of it.\nThis turned out harder than I thought. Didn't even work with require() yet \ud83d\ude1e \nFurthermore the React/PropTypes import code should probably be extracted to an util because other rules could also benefit from it.. FYI I'm working on this: https://github.com/jseminck/eslint-plugin-react/tree/prop-types-util - just to make sure we don't do double work!. Just an update on this and also for myself to keep track of all the changes:\n\nAdded support to no-unused-prop-types for Flow 0.53 syntax: Component<Props, State>\nAdded support to all other lifecycle methods for prop-types rule. Previously it only supported componentWillReceiveProps and constructor\nAdded support for prevProps variable name for prop-types rule. \nAdded support for destructuring in lifecycle methods for prop-types rule. e.g. componentDidUpdate({myProp}) { ... }\n\nThis is far from done. My biggest issue to tackle is how to make Component.detect() and this new PropTypes.detect() work together.. Currently using the Flow TypedArgument syntax should work:\njs\nReact.Component<void, Props, void>\nor\njs\nReact.Component<Props>\nThere's some work to complete as I would like to eliminate ALL shared code between the two rules (prop-types and no-unused-prop-types) so that both cover the same use-cases. Currently there's still a bit of a difference between the two.\nBut in general I'd expect the Flow syntax to work. Did you encounter any issues?. Would you be up for making a PR for this feature? I had a quick look today, and it shouldn't be that complicated as the code will be quite similar to how the current beforeSelfClosing option works.\nI'm ready to assist if needed.\nWe'll need to add a new option to support this though, I don't know what the name should be. Perhaps simply beforeClosing ?. Rebased this. I thought there were some changes to Components class in one PR but had no conflicts. Will still need to double-check!. Rebased this. I thought there were some changes to Components class in one PR but had no conflicts. Will still need to double-check!. For anyone tackling this, I think this issue is similar to: https://github.com/yannickcr/eslint-plugin-react/issues/1389\nWe are not properly distinguishing between PropTypes coming from the prop-types package and custom prop-types.. Hmm - yes, I think that default-props-match-prop-types doesn't support it either. Will check.. Added support to default-props-match-prop-types as well. Enjoy!\nThis one was a bit harder because the code is structured completely differently from the other 2 rules, even though the props detection should handle all the same cases... hopefully I can fix that issue soon. \ud83d\ude04 . I think you have to use the following setting, because of using the old syntax. I'm not sure if this is properly documented anywhere, as I derived the setting from the code / unit-tests. \ud83d\ude04 \nsettings: {\n      react: {\n        createClass: 'createClass'\n      }\n    }\nAdditionally, you probably also need to configure with ignoreTranspilerName to true: \njs\n\"react/display-name\": [<enabled>, { \"ignoreTranspilerName\": true }]. Thanks @jackyho112 \nThis is because of the new ESLint release. They changed some internal process and a case that we didn't handle before will now work.\nI can update the case to be valid, but it would only work with the latest ESLint. With older cases it will still fail. Even more: We had to write some work-around to make sure ESLint did not crash but I can't remove that code unless we update the peerDependency for ESLint.\nI also commented here: https://github.com/yannickcr/eslint-plugin-react/pull/1375#issuecomment-329899585\nBut I think I can start a new PR and we can start/continue a discussion there.. Created a PR to move that test: https://github.com/yannickcr/eslint-plugin-react/pull/1437. https://github.com/yannickcr/eslint-plugin-react/issues/1393 is this PR.\nI created the issue because in addition we should merge the code for prop-types and no-unused-prop-types. The code is currently 80% the same, but some cases are supported in one rule and not the other.\nI think this PR + https://github.com/yannickcr/eslint-plugin-react/pull/1377 cover the new Flow syntax for these two rules. \nEdit: There's also another rule related to props checking: default-props-match-prop-types. That rule doesn't even support the <void, Props, void> (<= Flow 0.53) syntax at the moment. Ideally we should add support for the syntax for that rule as well, but no one has asked about it so far.\nThere's also some other Flow related bug fixes in the current open PR list. https://github.com/yannickcr/eslint-plugin-react/pull/1400 and https://github.com/yannickcr/eslint-plugin-react/pull/1390\nI also don't use Flow so can't really be certain. What I could do is test out on a Flow open-source code base that I have contributed a few times to to test if everything is fine once everything has landed in master. It's not a big code-base but it's better than nothing. \ud83d\ude04 . Great. Perhaps @EvHaus can also test it? I think he's also working with a (big?) Flow code base.\nI can try it on https://github.com/CompuIves/codesandbox-client/ (uses new Flow syntax) and https://github.com/bvaughn/babel-repl (uses normal Flow syntax, no TypedArguments). Thanks for looking into this. I guess it is related to: https://github.com/yannickcr/eslint-plugin-react/pull/1404 where we added support for the IntersectionTypeAnnotation.\nI can fix the crash easily, but can we even properly validate the props in this case? Since they are imported from another file, we do not what's inside them... \ud83d\ude1e . I did a quick check and there were 2 issues:\n\nOne is more related to the fact that there were multiple intersections. The rule only handled one intersection, e.g. PropsA & PropsB - but in your case you have a second intersection as well.\nWhen a type is imported, it seems like we skip props validation because we cannot figure out what props are actually imported from the other file.. @rosskevin @bsr203 can you check out https://github.com/jseminck/eslint-plugin-react/tree/intersection-imported-type and see if it fixes the issue for you? I've added test cases that cover the examples here. \n\n@rosskevin did the issue appear in the material-ui code base? Yesterday I was looking around for open-source code bases that we could use to test releases. Perhaps it's a good candidate? My other ideas so far were https://codesandbox.io/ & https://babeljs.io/repl/ \ud83d\ude04 . I tested on material-ui with this branch and found another problem with the HiddenCss.js component in that codebase:\nI think it's the following case:\njs\nexport type Props = HiddenProps & {\n  /**\n   * Useful to extend the style applied to components.\n   */\n  classes?: Object,\n};. @bsr203 see my last comment. I just pushed a fix to my branch and tested it on the material-ui project and now everything passes \ud83c\udf89 \nI still have to clean up the code though... it's a bit messy.\nTo try it out (or npm i --save-dev if you use npm)\nrm -rf node_modules/eslint-plugin-react/\nyarn add -D https://github.com/jseminck/eslint-plugin-react#intersection-imported-type. Cool. Thanks for testing @bsr203.  I'll clean up the code and push the changes. It'll take a bit of time as I have some things to attend to.\nRegarding imports from other files: For now I'll stick to the same logic as we applied previously: if there's an import of a type, then we cannot find it, and we just skip props validation for that file.\nI'll try to read through that thread later and see how complicated it is \ud83d\ude04 . @EvHaus this is already handled in the PR \ud83d\ude04 though I only tested Props & { ...}, now I also added tests for {...} & Props now. \nCan you try with https://github.com/yannickcr/eslint-plugin-react/pull/1415 ?. Made some additional changes. Did a smoke test on the material-ui code which is currently breaking with rc0. I changed those functions to return early, but haven't changed the name as I couldn't come up with something.\n@yannickcr please also have a look as this is required for 7.4.0. . Can you also add support for this.props.foo++? There's a PR that adds this to the no-direct-mutation-state rule, so I think we'll want it here too \ud83d\ude04 \nhttps://github.com/yannickcr/eslint-plugin-react/pull/1387\nOn the other hand, this rule supports other cases that no-direct-mutation-state supports, e.g. those array mutations. I'm not sure what would be a good way to share that code as you already mentioned.. Yeah. I agree!\nLooks good for me. It's a pleasure to read your code. \ud83d\udc4d Someone else should also still go over the code since I'm not an official maintainer though!. I'm just a contributor \ud83d\ude04 I'll try to go through the whole PR tomorrow and see if I can weigh in, but honestly from following this from the side I have to admit some of the technical discussions are a bit above my technical knowledge level \ud83d\ude1e . I'm just a contributor \ud83d\ude04 I'll try to go through the whole PR tomorrow and see if I can weigh in, but honestly from following this from the side I have to admit some of the technical discussions are a bit above my technical knowledge level \ud83d\ude1e . I think we figured this out yesterday. Somebody created a PR for not allowing mutation for this.props and added support for this case. Once that PR is finished we'll try to move all the logic over to no-direct-mutation-state rule as well.\nhttps://github.com/yannickcr/eslint-plugin-react/pull/1416. It seems like this is according to design: Here is a test case covering it:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prefer-stateless-function.js#L460\nAccording to the docs of React, the context is passed in as the second parameter of the stateless function: https://facebook.github.io/react/docs/context.html#referencing-context-in-stateless-functional-components\nSo your example would be:\njs\nfunction MyComponent(props, context) {\n   return <div>{context.someValue}</div>\n}\nor ...\njs\nfunction MyComponent(props, { somevalue }) {\n   return <div>{someValue}</div>\n}. https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-typos.md handles this. However the rule has been a bit unstable \ud83d\ude1e the 7.4.0-rc0 release should be good though. That reminds me, that I should check it.. Can you give an example? This is exactly what the rule is supposed to do - so perhaps there's a case that isn't detected properly.\n\n. It should work as well. At least we have test cases for it... I will try to figure out why your example isn't working.\n. I tried your example in our test suite and it correctly identifies it as a typo. (note: I added it as a valid test case so it would throw an error)\n```\n1) no-typos valid\n      export const HighlightTextInner = (\n        {muiTheme: {palette: {accent3Color}}, ...rest}\n      ) =>\n        ;\n  HighlightTextInner.PropTypes = {\n    children: PropTypes.string.isRequired\n  }\n:\n\n  AssertionError: Should have no errors but had 1: [ { ruleId: 'no-typos',\nseverity: 1,\nmessage: 'Typo in static class property declaration',\nline: 7,\ncolumn: 7,\nnodeType: 'MemberExpression',\nsource: '      HighlightTextInner.PropTypes = {',\nendLine: 7,\nendColumn: 35 } ]\n  + expected - actual\n\n  -1\n  +0\n\n```. We have this test case:\njs\n      code: [\n        'class Hello extends React.Component {',\n        '  render() {',\n        '    this.props.a.b',\n        '    return <div>Hello</div>;',\n        '  }',\n        '}',\n        'Hello.propTypes = {',\n        '  a: PropTypes.shape({',\n        '  })',\n        '};'\n      ].join('\\n'),\n      errors: [{\n        message: '\\'a.b\\' is missing in props validation'\n      }]\nJudging from that, it seems some basic shapes support exists and the example should actually be supported.\nIndeed when I try the following snippet I actually get an error. But the destructuring doesn't work with the shapes...\njs\nclass DestructuredDeepMissing extends React.PureComponent {\n  render () {\n    this.props.foo.bar;\n  }\n}\nDestructuredDeepMissing.propTypes = {\n  foo: PropTypes.shape({}).isRequired,\n};. I don't think any changes have been done in master that affect this. Will check!. Can you give your eslint config please? My guess is you may be extending some eslint configuration that has this rule still enabled.. Could you give some more information? I'm using CRA as well and just tested this. It seems to work:\nThis is my eslint configuration file:\n{\n  \"extends\": \"react-app\",\n  \"rules\": {\n    \"react/jsx-indent\": [2, 2],\n    \"object-curly-spacing\": [2, \"always\"],\n    \"react/jsx-key\": 2\n  }\n}\nIt only reports the issue in my IDE though, not in the actual console. But I believe that is a CRA issue.... If I change the code to const AgSelectCampaignItem = createReactClass({ then the missing prop-type is detected.\nIn order to properly detect React.createClass you have to use this setting:\nsettings: {\n  react: {\n    createClass: 'createClass' // default is createReactClass\n  }\n}. BTW we have a lot of tests for React.createClass but none of them use this setting. Doesn't that mean these are all invalid as component detection isn't working for them? I can imagine this may be overlooked when the createClass setting was introduced.... I don't think that we have a rule that enforces this style at the moment.. I think it would be possible to implement. Can't say how hard it would be, definitely not easy but not impossible either.\n\nFind all JSXExpressions\nCount the number of props in each expression. If <= 1 ignore\nStore the location of the first prop (line, number of characters before -- I am not sure if this info is readily available but I'm quite sure it's possible to get it).\nCheck whether every other prop is on a new line and has the same amount of characters as whitespace in front of it\n\nI'm not sure if this should be a new rule, an option to an existing rule, or if it's something we want at all. I personally do not like this style at all and much more prefer:\njs\n<MyComponent\n  prop1={x}\n  prop2={y}\n  prop3={z}\n/>\nBut I understand everyone wants something different \ud83d\ude04 \n. Since the code is:\nconst eventHandlerPropPrefix = configuration.eventHandlerPropPrefix || 'on';\nUsing '' or false will actually indeed make it default to 'on'.\nAdditionally false isn't a valid value because it requires a string.\nI assume your use case is that you only want to use the eventHandlerPrefix part of this rule? It does seem like that is currently not supported.. I guess we can explicitly check for undefined in configuration.eventHandlerPropPrefix === undefined || 'on' so that using '' would disable this part of the configuration.\nLet's see what other think about it, otherwise seems like a straight forward change. I can make a PR for that later today.. I would say this is as expected. Since the prop is not required, you should specify a default value. You can decide to set it to null or undefined by default.. According to the code, even const React = {}; satisfies the rule.\nI suppose technically it's a bug, yes.. The issue isn't really related to uniqueness. Using only the index also makes it unique.\nLet's say you have two items in your array generating these keys :\nfirstName-0\nsecondName-1\nWhen your array is re-ordered, it will generate these keys:\nsecondName-0\nfirstName-1\nThe keys have changed, and React won't be able to apply it's optimisations related to array ordering since the keys have changed.\nIf your keys simply were firstName and secondName then React can figure out the two elements were swapped.\nhttps://facebook.github.io/react/docs/lists-and-keys.html\nhttps://facebook.github.io/react/docs/reconciliation.html#recursing-on-children\nPlease correct me if I'm wrong or I understand the issue incorrectly.. Tests will continue to fail until we have a solution for https://github.com/yannickcr/eslint-plugin-react/pull/1437. That's very weird. I'd expect this to be related to ESLint. They had a new version that was released before the weekend so if your version of ESLint was not locked down it could be related to that?\nOn the other hand it seems specific to this particular rule, but I don't really understand how/why.... There's already an issue that looks related: https://github.com/eslint/eslint/issues/9318. There's a PR for the no-typos test, so you can actually ignore it. It happened due to a bump in ESLint that caused an unsupported case to be supported.. Hmm, just wondering, Is this still valid with React 16? https://facebook.github.io/react/blog/2017/09/08/dom-attributes-in-react-16.html\nIt seems the data attribute is no longer ignored, but it does get lowercased: https://codesandbox.io/s/6nx6p1r0rn\n\nOtherwise looks good to me, ( but I'm not the one to decide if it should be included or not \ud83d\ude04 )\n. Another thing we should test: since it's now possible to return an array from render(), but the array does require keys at the moment. So we should check whether the current rule react/no-array-index-key: Prevent using Array index in key props works for this case...\nrender() {\n  // No need to wrap list items in an extra element!\n  return [\n    // Don't forget the keys :)\n    <li key=\"A\">First item</li>,\n    <li key=\"B\">Second item</li>,\n    <li key=\"C\">Third item</li>,\n  ];\n}\nEdit: it works already. The rule was already smart enough to detect arrays!. Another thing we should test: since it's now possible to return an array from render(), but the array does require keys at the moment. So we should check whether the current rule react/no-array-index-key: Prevent using Array index in key props works for this case...\nrender() {\n  // No need to wrap list items in an extra element!\n  return [\n    // Don't forget the keys :)\n    <li key=\"A\">First item</li>,\n    <li key=\"B\">Second item</li>,\n    <li key=\"C\">Third item</li>,\n  ];\n}\nEdit: it works already. The rule was already smart enough to detect arrays!. Thanks for the report. \nI did some quick digging and reproduced the issue. Additionally I found that the following code did parse correctly, but did not detect unused prop-types:\njs\n        type SomeProps = {\n          firstname: string\n        }\n        type Props = SomeProps;\n        export class TestComponent extends React.Component<Props, void> {\n          render() {\n            return <div>{this.props.foo}</div>\n          }\n        }\nI have managed to get both cases working (your example + the above). I'll try to get a PR in within the next few days (as I'm currently travelling a bit).. Thanks for the report. \nI did some quick digging and reproduced the issue. Additionally I found that the following code did parse correctly, but did not detect unused prop-types:\njs\n        type SomeProps = {\n          firstname: string\n        }\n        type Props = SomeProps;\n        export class TestComponent extends React.Component<Props, void> {\n          render() {\n            return <div>{this.props.foo}</div>\n          }\n        }\nI have managed to get both cases working (your example + the above). I'll try to get a PR in within the next few days (as I'm currently travelling a bit).. Thanks. Not sure what that syntax means? Is it really valid?\nRegarding the other case: sorry, have been a bit busy lately. \nSince it seems that we skip props validation at the moment when we have:\ntype SomeProps = { firstname: string }\ntype Props = SomeProps;\nThen I'll probably have to add similar skipping of props validation for:\ntype SomeProps = {};\ntype DefaultProps = SomeProps;\ntype Props = DefaultProps & {};\nSeveral other unexpected cases presented themselves when trying to properly fix it.. Thanks. Not sure what that syntax means? Is it really valid?\nRegarding the other case: sorry, have been a bit busy lately. \nSince it seems that we skip props validation at the moment when we have:\ntype SomeProps = { firstname: string }\ntype Props = SomeProps;\nThen I'll probably have to add similar skipping of props validation for:\ntype SomeProps = {};\ntype DefaultProps = SomeProps;\ntype Props = DefaultProps & {};\nSeveral other unexpected cases presented themselves when trying to properly fix it.. I'm also -1.\nBesides, you can already use this plugin to auto fix from class to className anyway. I use ESLint plugin with auto fix on save and even if I would copy paste JSX (or even HTML) with the property class in it it, then will be auto fixed to className without any manual intervention.\nJust my 2 cents on this topic \ud83d\ude04 . I'm also -1.\nBesides, you can already use this plugin to auto fix from class to className anyway. I use ESLint plugin with auto fix on save and even if I would copy paste JSX (or even HTML) with the property class in it it, then will be auto fixed to className without any manual intervention.\nJust my 2 cents on this topic \ud83d\ude04 . @ljharb last I remembered ESLint supports node 4 which does not support object spread. I've had the same problems in the past. We still have Travis running builds on node 4 so I suppose we still have to support it.. There are only tests for components. Should it also warn on <div><span>Hello World</span></div> ?. @alexvb I believe this is a common issue with other rules as well (e.g. prop-types and no-unused-prop-types).\nWe should probably ignore validation when using types imported from another file?. @alexvb I believe this is a common issue with other rules as well (e.g. prop-types and no-unused-prop-types).\nWe should probably ignore validation when using types imported from another file?. Does this case work with the prop-types rule? If not: the code is really similar and it should be possible to apply the same logic there.. What about the prop-types rule? Does it also need this functionality?. Is there anything stopping from getting this merged? Just ran into an issue with this, using this.props in SFC by accident that caused a bug. Would be cool if linter catches it.. This is really great. There's a lot of duplicate code between prop-types and no-unused-prop-types rules that should be extracted out. I think this is a good first step. \ud83d\udc4d . Thanks for feedback. I'm at a conference for the next 2 days, but I will make \"is in constructor\" separately and deeper investigate the differences isNodeALifeCycleMethod(node.parent.parent) vs astUtil.inLifeCycleMethod(context), which I do believe achieve the same thing, but technically they are doing something different.. Thanks for feedback. I'm at a conference for the next 2 days, but I will make \"is in constructor\" separately and deeper investigate the differences isNodeALifeCycleMethod(node.parent.parent) vs astUtil.inLifeCycleMethod(context), which I do believe achieve the same thing, but technically they are doing something different.. Thanks for reporting this! I added the link to button-has-type rule.\n@TSMMark since you wrote the code for the jsx-one-expression-per-line rule, would you be willing to add the documentation as well?. That's it \ud83d\udc4d . That's it \ud83d\udc4d . This is already reported ( https://github.com/yannickcr/eslint-plugin-react/issues/1543 ) and a fix has been merged ( https://github.com/yannickcr/eslint-plugin-react/pull/1544 ).\nHopefully a v7.5.1 will go out later today!\nThanks for understanding \ud83d\udc4d . This is already reported ( https://github.com/yannickcr/eslint-plugin-react/issues/1543 ) and a fix has been merged ( https://github.com/yannickcr/eslint-plugin-react/pull/1544 ).\nHopefully a v7.5.1 will go out later today!\nThanks for understanding \ud83d\udc4d . The default is definitely configured inside the code-base: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/boolean-prop-naming.js#L35\nWhat ESLint version are you using?\nI'll try to reproduce this locally.. The default is definitely configured inside the code-base: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/boolean-prop-naming.js#L35\nWhat ESLint version are you using?\nI'll try to reproduce this locally.. Yep. It does not work (reproduced it locally as well). It also does not seem to work when using PropTypes.bool.isRequired (adding .isRequired).. Yep. It does not work (reproduced it locally as well). It also does not seem to work when using PropTypes.bool.isRequired (adding .isRequired).. Asked the question in ESLint Gitter chat regarding the default value. Otherwise will make a PR to add it from our side, and would also like to make sure that .isRequired works here (different issue though).. Asked the question in ESLint Gitter chat regarding the default value. Otherwise will make a PR to add it from our side, and would also like to make sure that .isRequired works here (different issue though).. This seems to work, but it would be nice to also have some test with some imported type that is used with union, like the main one reported from the issue. WDYT?\n```\nimport type { FieldProps } from \"redux-form\"\ntype Props = {\n  name: string,\n} & FieldProps;\nclass Hello extends React.Component {\n  props: Props;\n  render() {\n    const {name} = this.props;\n    return name;\n  }\n}\n```. I like this rule also. \nFor reference, I have a PR that adds similar functionality to the existing prefer-stateless-function rule, but there were a few cases that I didn't manage to catch: https://github.com/yannickcr/eslint-plugin-react/pull/1313. Duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/1473\nI briefly looked into it and it seems it is related to destructuring within async functions that are defined as class properties.\nThis seems to work:\n```js\nasync componentDidMount() {\n  const { propIsDetected } = this.props\n}\nasync componentDidMount() {\n  console.log(this.props.propIsDetected)\n}\nmyMethod = async () => {\n  console.log(this.props.propIsDetected)\n}\n```\nBut indeed, the example from the OP is failing:\njs\nmyMethod = async () => {\n  const { propIsNOTDetected} = this.props\n}. Duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/1473\nI briefly looked into it and it seems it is related to destructuring within async functions that are defined as class properties.\nThis seems to work:\n```js\nasync componentDidMount() {\n  const { propIsDetected } = this.props\n}\nasync componentDidMount() {\n  console.log(this.props.propIsDetected)\n}\nmyMethod = async () => {\n  console.log(this.props.propIsDetected)\n}\n```\nBut indeed, the example from the OP is failing:\njs\nmyMethod = async () => {\n  const { propIsNOTDetected} = this.props\n}. Upon further digging, the issue is because myMethod = async () => { } is detected as a component in the Components util, because it is ArrowFunctionExpression + async === true:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/util/Components.js#L650\nTherefore, the propIsNOTDetected is registered as a prop on that incorrectly detected ArrowFunctionExpression.\nNot sure what's the proper fix for this. Removing this logic seems scary, but it only fails one test inside prop-types itself (rest of the suite passes):\njs\nvar Hello = async (props) => {\n  return <div>Hello {props.name}</div>;\n}:\nMaybe this logic was added as a quick fix to make this specific case work... not sure.... Upon further digging, the issue is because myMethod = async () => { } is detected as a component in the Components util, because it is ArrowFunctionExpression + async === true:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/util/Components.js#L650\nTherefore, the propIsNOTDetected is registered as a prop on that incorrectly detected ArrowFunctionExpression.\nNot sure what's the proper fix for this. Removing this logic seems scary, but it only fails one test inside prop-types itself (rest of the suite passes):\njs\nvar Hello = async (props) => {\n  return <div>Hello {props.name}</div>;\n}:\nMaybe this logic was added as a quick fix to make this specific case work... not sure.... We should probably fix this, but what does it mean when you define a prop as PropTypes.shape(). Does it even make sense to have this?. We should probably fix this, but what does it mean when you define a prop as PropTypes.shape(). Does it even make sense to have this?. Thanks for dealing with this @brettdh - I also hope to see this merged and released soon \ud83d\udc4d . Can you show the code? A PR was merged recently that hopefully fixes this issue: https://github.com/yannickcr/eslint-plugin-react/pull/1671. Can you show the code? A PR was merged recently that hopefully fixes this issue: https://github.com/yannickcr/eslint-plugin-react/pull/1671. I'll take a look at this issue/improvement.. I think that we should also make sure that React.createElement(MyCustomElem, { style: \"myStyle\" }) works if \"MyCustomElem\" is an exception?. Cool. LGTM from my side, as I attempted to add this improvement myself, and my solution was very similar. \ud83d\ude04\nI haven't been involved in this project for a while though so it will need a review from someone else as well.. Ok, I will remove it. \nI was actually not aware of this policy. So only stylistic issues should be fixable? Adding removing lines, spaces, semi-colons?\nFWIW, The actual help for --fix actually says the following: This option instructs ESLint to try to fix as many issues as possible.\nConsidering the words \"as many issues as possible\" - I thought that every rule which we know how to fix should be auto fixable.. Unfortunately it's not so simple in this file. There are many vars that cannot be changed to const.\nPersonally I also feel like a file should either use only var, or only let + const. Using a mix of var, let and const is meh.\nIf you want, I can make some separate PR and transform some of the code-base to ES6? I have used Lebab before (https://github.com/lebab/lebab). I just need to figure out what ES6 features are supported and which aren't. Although we could just start with getting rid of var completely?. I would like to see an empty line between the closing } and the Foo.propTypes assignment. It's a personal taste though. What do others think?. Should we also cover the always part in these test cases? E.g. checking that bar={true} is still valid when the config is ['always', {never: ['foo']}].. I suggested the spelling error detection also earlier in the PR: https://github.com/yannickcr/eslint-plugin-react/pull/1209#issuecomment-303384167 and reply: https://github.com/yannickcr/eslint-plugin-react/pull/1209#issuecomment-303517683\nI will look into the similar issue regarding lifecycle methods. Would be useful to have it there as well, as I never remember if it was prevProps, nextProps, prevState or nextState (which one and in which order).\nI think the rename would make sense, if we add support for lifecycle methods... which I think, should be straight forward. (though I though that initially about this rule as well and it turned out to take a bit of time :D). Agreed. I will rename to no-typos and update the docs accordingly. \nWe can then add casing typos for lifecycle methods in another PR. And we can look into detecting small Levenshtein distances in a separate PR as well. \nSounds good?. I think we should rename the reportErrorIfCasingTypo function as well to contain something like ifClassProperty.. Do we need the check for utils.isReturningJSX() ? This is used to detect Stateless Function Component, which does not contain user defined lifecycle methods.. I guess we need tests for all lifecycle methods, not just a few.\nAdditionally, we'll need some valid tests for a class that is not a React component. that can still have any lifecycle method defined with any kind of casing typo.\nLastly, I do not know if we should support this kind of syntax. It seems to work ( https://jsfiddle.net/69z2wepo/82794/ ) but I have never seen anyone do it. @ljharb what do you think of this?\n```js\nclass Hello extends React.Component {\n    render() {\n    return Hello {this.props.name};\n  }\n}\nHello.prototype.componentDidMount = function() {\n  console.log(\"component has mounted\");\n}\nReactDOM.render(\n  ,\n  document.getElementById('container')\n);\n```. What about render? Though React already warns about this when running the code, but still having the error show early is nice.\nNo `render` method found on the returned component instance: you may have forgotten to define `render`.. The use of some() here looks strange. some() returns a boolean but it is not used.\nSomething like this should work too ( didn't try it though ):\njs\nconst newPropIsAlreadyInTheList = propsList.some(prop => popsAreEquivalent(prop, newProp))\nI think the I in newPropisAlreadyInTheList should be capitalised.. WDYT of using reduce to write this function?\njs\n  const merge = (propsList, newPropList) => {\n    return newPropList.reduce((propsList, newProp) => {\n      if (propsList.some(prop => popsAreEquivalent(prop, newProp))) {\n        return propsList;\n      }\n      propsList.push(newProp);\n      return propsList;\n    }, propsList)\n  };. I personally find this nested if if else if quite hard to read. It can just be:\njs\n    return (\n      (propA.name === propB.name) &&\n      ((!propA.allNames && !propB.allNames) || (propA.allNames.join('') === propB.allNames.join('')))\n    )\nAlthough it's not that simple either since it still has a lot of conditions, I find it a bit easier...: conditionA && ((conditionD && conditionC) || conditionE)\nEdit: Also, is it possible that propA has a key allNames but propB does not have this key? In this case, the current logic should crash because it would try to call .join() on an undefined value. I am not sure if this can happen though.. Is it possible that copyUsedPropTypes is going to be assigned a value but that it will not be used?\nThe condition for assigning the value is: if (this._list[id])\nThe condition for using the value is: if (this._list[id] && props.usedPropTypes). This file was added by accident.. I think this approach is good as well.. Should these constants not be all upper case and use _ as delimiter between words, to be more consistent with the rest of the code base? See no-danger, no-typos, no-escaped-entities, and others...\nSo: OPTION_ALWAYS, OPTION_NEVER and OPTION_IGNORE. Should we also perform this check for contextTypes and childContextTypes ?. It does not help. The relatedComponent (in the case below it is class MyComponent) is not a child in the AST of the MemberExpression \"MyComponent.PROPTYPES\" - so using :exit does not work.\nThe reason is just that class MyComponent is declared after MyComponent.PROPTYPES and therefore eslint has not yet visited it, and therefore it does not have the parent property yet (which getJSDocComment() expects to exist).\njs\n      MyComponent.PROPTYPES = {}\n      /** @extends React.Component */\n      class MyComponent extends BaseComponent {} \nThey have a task to add parent property to all nodes on initial traversal, that would fix our issue.. Typo.\nAlso is the empty // needed?. It reads a bit confusing. It says component with no props, but this component actually has two props: bar and foo. I guess that you actually mean; component with no declared prop types (since there is no .propTypes) for the first component.. That makes sense.\nBut what about this test case that we have. Is that still valid? I suppose not, as now we are passing void for Props and { person: Person } as State ? What was the third parameter?\njs\ntype Person = {\n  firstname: string\n};\nclass Hello extends React.Component<void, { person: Person }, void> {\n  render () {\n    return <div>Hello {this.props.person.lastname}</div>;\n  }\n}. I suppose it depends on the next eslint-plugin-react version? Major version bump means we can make the default to 0.53. Minor version bump means we need to stick to supporting 0.52 as the default (and allow users to configure to 0.53)?\nBTW, the current default for React (and also in this PR for Flow) is 999.999.999. So it just assumes by default \"the latest version\" if the setting is not specifically set.. Can you update the tests as well? Thanks \ud83d\ude04 . Yes. That's what we wanted, right? \nWe don't want to provide a default value, so test() cannot return true or false in case it is not specified. Therefore, throwing an exception instead which we then handle in the calling code by catching it and using the default logic.. We are guessing what the flowVersion is, but only for the specific implementation in the prop-types rule: https://github.com/yannickcr/eslint-plugin-react/pull/1377/files#diff-531a13f7edd3ed4e7c65c3a7df7052f0R868\nAs this is a general utility function, I don't think that here we can easily guess what flow version we are using, because we need more information about the code. In the prop-types example, we need to know how many TypedArguments there are. But if there are none, then we cannot make a guess. If another rule would want to use this utility function, they would have to specify their own criteria/logic for guessing the correct flowVersion.\nI can move this utility function into the prop-types rule directly, as it is currently the only place where it is used. I just thought that for future cases it might be good to have it extracted already, so that it can be used in other rules as well.\n. Reformatted this test - that's why it's in the PR.... It seems a much safer implementation for the future. If Flow would introduce a new prefix, it should be handled automatically. (assuming that the prefix token type is similar to the types it has now).\nIf you think keeping a list of prefixes is better then we can go with that approach as well.... Yeah - that's what I mentioned in the other PR: prop-types and no-unused-prop-types on first sight seem to share quite a bit of logic that deals with extracting the declared prop types for a component. And currently, the logic is not in sync (e.g. props in TypedArgument for Flow is not supported at all for no-unused-prop-types.\nI'll try to deal with extracting as much of the shared logic as possible this weekend. Created an issue: https://github.com/yannickcr/eslint-plugin-react/issues/1393\n. Okay, should probably do the same for _getId then?. I did this on purpose. The way rules interact with this file is:\n1/ const Components = require('../util/Components');\n2/ create: Components.detect((context, components, utils) => {\nNo rule is creating a new instance of the Components class directly. Everything related to the Components class happens inside Components.js. It seems like the API for this file could even just be a single function (e.g. detectComponents. Therefore, I don't see the need to export the whole Components constructor. Please correct me if I missed anything regarding this file.\nThe tests are passing and I ran this branch on a fairly large project and didn't have any issues (though I don't have all the rules enabled, so it's not a solid test).. That's correct! \ud83d\udc4d I would have never thought of that... However, what is the use case for this? I don't see any reason why users would use this plugin in such a way.\nBut yes, if we would make the change that I proposed here, then in theory we'd have to bump the major version. And we don't want to do that for this PR.\nThe reason I wanted to remove it is because it was quite confusing for me to understand how this module works, and exporting more than what is needed added to the confusion. If possible, it would be good to get rid of it, but for now I'll revert the change so the API doesn't break.. Honestly I'm in general not really happy about the fact that a function with a name declarePropTypes*** returns a boolean at all. It's a bit confusing. That's why I liked this style a bit more, because it's very explicit to say what those methods return and what the boolean actually means.\nPerhaps a try/catch may be even better?. This is from the existing code so didn't touch it yet. But I think we can simply do: \njs\nconst types = buildTypeAnnotationDeclarationTypes(value, key) || {};\ndeclaredPropTypes.push({\n  ...types,\n  fullName: key,\n  name: key,\n  node: value\n});\nEdit: Ah! We don't support spread operator yet. \ud83d\ude1e . Meh, another problem is that buildTypeAnnotationDeclarationTypes returns either a boolean or an object which isn't great either. I try to refactor it to always return an object, but it needs changes in more places than just here. \nBut I do think it's a good refactor to do \ud83d\ude04 . Yes. I'm working on it \ud83d\ude04 The idea will be that the rule will be declared as:\ncreate: propTypes.detect((context, components, utils) => {\n...\n})\nAnd this will take care of ALL the shared code between prop-types and no-unused-prop-types. Perhaps also for the other rules.. null would be checked in the if statement before:\njs\nif (!propType) {\n    // If it's a computed property, we can't make any further analysis, but is valid\n    return key === '__COMPUTED_PROP__';\n}\nOtherwise, if I remove the typeof condition, one test starts failing. Turns out propType is a function() in one of the cases (not sure why) and it satifies the condition Object.keys(propType).length === 0. Perhaps should use https://www.npmjs.com/package/lodash.isplainobject ?\n```js\nfunction Hello(props) {\n  return {props.name.constructor.firstname}\n}\nHello.propTypes = {\n  name: PropTypes.shape({\n    firstname: PropTypes.object\n  })\n};:\nAssertionError: Should have 1 error but had 0: []\n```\nBasically we want to check if its {} instead of true, since those methods always return an object now instead of a boolean.. I'm not sure how I feel about using the components as a storage for non-component nodes... Maybe we can use some local collection instead?. Something like:\njs\n          assignments.forEach(assignment => {\n            allAssignments.push(assignment.range.join(':')); // not sure about the name of the array :(\n          });\nAnd where it's checked:\njs\n        const currentIdentifier = allAssignments.indexOf(originalIdentifiers[originalIdentifiers.length - 1].range.join(':')) >= 0;\n        return currentIdentifier;\nThis way, at the end of the file there will only be the actual components inside the list, and we skip looping over all those assignments. For all tests, list would only contain 1 value.\n```js\n        Object.keys(list).forEach(key => {\n          const component = list[key];\n      reportMutations(component);\n    });\n\n```\nWhat do you think?. Woops! My bad... I found the mistake \ud83d\ude04 I'll re-add all of them. I think most are actually in this rule where every test has a comment.. .startsWith() ?. Hmm - not sure how we can make it fail with ESLint >= 4.7 \ud83d\ude04 \nIt does feel a bit strange to really force a supported case to be unsupported though? Currently we do support both version ranges, but the plugin behaves differently in both... but yes, I agree that's kind of confusing as well.\nI'll see what can be done. I think the code to handle it would be like this:\n\nIf component has JSDoc\nIf static properties are declared before the component is declared\n-> Then ignore propTypes typo checking. We definitely cannot easily detect this case with ESLint 4.6. That's why we had to choose to ignore it until the ESLint issue fixed.\n\nIndeed, 4.7 did some kind of internal refactor of ESLint core. If you're interested, this is the change: https://github.com/eslint/eslint/pull/9283\nThis is a reference implementation of #9122. With this change, rules don't have to worry about whether node.parent has been set at any given point, because all of the node.parent properties will be assigned by the time the rule gets run.. What's the reason for this comment?. Sorry, this is really a nit :) don't these template literals need an extra indentation?\ncode: `\n  mystring...\n`,. Is this code really needed?\nno-typos rule also detects SFCs, it does it like so: ( stripped down, the original code is at: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-typos.js#L137 )\nMemberExpression: function(node) {\n        const relatedComponent = utils.getRelatedComponent(node);\n        if (\n          relatedComponent && utils.isReturningJSX(relatedComponent.node)\n        ) {\n          // Should be an SFC at this point\n        }\nThere must be other places where SFC detection also exists.\nOn the other hand, perhaps this is a better approach, I don't know too much about the internals there.... I re-ordered the functions alphabetically.. Note that the old isInLifeCycleMethod function already was checking whether we are in constructor: node.kind === 'constructor'. Now it is split into inConstructor and inLifecycleMethod so the code is the same between this rule and prop-types.\nIn this case, the following two tests will fail when removing this line:\n\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-unused-prop-types.js#L2037\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-unused-prop-types.js#L1213. Same as above: Note that the old isInLifeCycleMethod function already was checking whether we are in constructor: node.kind === 'constructor'. Now it is split into inConstructor and inLifecycleMethod so the code is the same between this rule and prop-types.\n\nHowever, this case seems to be untested. \ud83d\ude1e In master we can remove this whole block and the tests still pass.\n&& ( utils.getParentStatelessComponent() || isInLifeCycleMethod(node)). Same as above.\nFails when removing inConstructor:\n* https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-unused-prop-types.js#L1228\nWhen removing the inLifecycleMethod then 5 tests fail (2 for componentWillReceiveProps, 1 for shouldComponentUpdate and 2 for componentDidUpdate)\nI suppose that we can also test https://reactjs.org/docs/react-component.html#componentwillupdate which also has nextProps as the first argument.. This is missing tests! Indeed we will now check more cases than just componentWillReceiveProps. ",
    "kevinSuttle": "Would it be more useful to disallow creation of new object, function, and array literals inside render()?. https://github.com/yannickcr/eslint-plugin-react/?. True. @xkr47 But it's not, though. How would ESlint know required, if it's not listed in the inline defaultProps literal or your return statement? It's throwing the error as it's listed in PropTypes, but nowhere else.\n. Thank you!\n. ",
    "petermikitsh": "Is there a way to use the no-inline-styles rule for React Native in a React Web project?. ",
    "twig": "Someone created the rule here: https://github.com/buythewhale/eslint-plugin-react-extra\nedit: it doesn't seem to work. Someone created the rule here: https://github.com/buythewhale/eslint-plugin-react-extra\nedit: it doesn't seem to work. ",
    "stoiet": "Good point. Thanks!\n. ",
    "LinusU": "I would love to see this!, I think it should work just as the core indentation does, but for JSX lines. Hopefully it shouldn't be two hard to implement.\n. ",
    "yordis": "@yannickcr yep the same here\n<label htmlFor={name}>{label}</label>\n. ",
    "joeybaker": "@yannickcr I could use some help with that. This error is coming from using eslint-plugin-react on decently sized code base. The stack trace gives very little information about what code is causing the crash. I can confirm this fixes the problem, but could use some advice: how would I got about tracking the input code that causes this crash?\n. @craigbilner iron-node is very cool! I looks like the successor to node-inspector?\nThanks for tracking that down. I'll play around and see if I can add a test. That's quite an edge case!\n. @yannickcr Thanks to @craigbilner's sleuthing, test added. It's a bit unlike the others, but it's apparently necessary :)\n. @craigbilner I'm still an AST noob. Let me try and report back.\n. @craigbilner I gave this a shot, but I'm out of time to dig into this more. I pushed up what I believe to be your suggestion, but it breaks a different test. If you have a chance, can you take a look at this diff and tell me what I did wrong?\n. @yannickcr If you'd rather merge it with the other fix, let me know. I can delete the most recent commit and the tests will pass.\n. Great! Glad it got fixed correctly. \n. @ianschmitz I hope you don't mind. I used your fork as a base and added a bunch more fixes. https://github.com/yannickcr/eslint-plugin-react/pull/1416\n@ljharb @Daniel15 I'd love to get that PR looked at, and if it's good, we can port nearly all of it to the no-direct-mutation-state rule to dramatically improve it.. @ljharb Sounds good. I'm happy for you to do that and close the new PR :). Once this is in a good place, it's probably a good idea to use the same logic in the no-direct-mutation-state rule.. Yea, ++ and -- are good calls. Can do.\nI'd love to share code between this and no-direct-mutation-state. Perhaps the way to do that is to add isPropsNode and the new non-components set/get code to utils? . @jseminck changes made. I'd be happy to look at sharing code between this rule and no-direct-mutation-state, but I suggest we do that in a separate PR that focuses on improving no-direct-mutation-state.. @ljharb I appreciate you taking a look. I'm sure you're busy, but I'd like to work with you to get this merged. I believe it's a nice feature. At the very least, it would help my team quite a bit.. @ljharb okay, I've added an option for allowArrayMutation, but I'd love more clarification on when the static Object methods would ever be okay.. Interesting. A few questions:\n\nWhy enableInstanceMethods over allowArrayMutation? \"Instance methods\" seem a little vague to me.\nWhy bother with the separate arrays and booleans? Seems like if you provide an array, the boolean value is superfluous.\nI'm still not clear on the danger of the object static methods. Could you give me an example when Object.assign(this.props, {}) would ever be safe?. Fair enough on the config option. Will change.\n\nI really don't see the value in accommodating people who override the language builtins. Adding a config option will make the documentation a little more confusing, but your call. I'll go ahead and add it.. @ljharb okay, options have been changed up and lodash methods removed. We now have just a disabledMethods option instead of 2 separate settings for each of Object and Reflect.\n@yannickcr @jseminck @jackyho112 The githubs tell me that you're also maintainers on this package. I'd love to get your thoughts on disabling array mutations on this.props by default.\n@ljharb makes the point that we can't do this with 100% safety. It's true, but I contend that the possibility of a prop that is not a plain object, that has methods named the same as array mutators, that in turn need to be called within a component is extremely limited. However, in the case it does occur, we've provide an option to disable that default.\nWe're at a bit of a deadlock, so any of you weighing in would be greatly appreciated. In general, disallowing this.props mutation would be really nice feature for my team (and I imagine many others) so I'd like to get this merged and released!. I've got a PR submitted that builds on @ianschmitz's work and catches this and many other things as well :) https://github.com/yannickcr/eslint-plugin-react/pull/1416. Fair enough, I was just trying to re-use the logic since what I need is all there. But, I'm happy to copy/paste what I need into here?. I'm not sure I know what you mean? I didn't think it was possible for range to have only one item? This logic is copied from https://github.com/yannickcr/eslint-plugin-react/blob/f1e86b5ba32ed9359eb7823b98f7a1dcc52376e3/lib/util/Components.js#L43-L45. Sure? It would just try to find a falsey value key which would be undefined. I don't think there's any harm, but I agree it's safer and slightly faster to add a guard.. Make sense.. That's a great point. I'd hate to loose the functionality though. Any thoughts on how we could determine it's an array?. I'm not sure I follow? Object.assign is never safe to use when this.props is the first argument, no?. Object.defineProperties is a good catch! Added.. Added, but I'll hold of on adding tests until we resolve what to do here.. Done.. Sorry, I'm still not following you. Will the AST allow for range to be anything other than a tuple of integers? We have full control of the object this key will be used for, so a string key composed of two joined integers should be totally safe, no?. Meanwhile, on Gitter\u2026 \n@not-an-aardvark suggests that leave this rule as-is since these method names tend to imply mutation anyway (also, it would be pretty weird to have a prop that isn't a plain object). Further, people can disable custom use-cases with an inline eslint-disable.\nIf we want to be very safe, we could put this behind an option flag?. Yea, the spec says range must be an array with 2 integers: https://eslint.org/docs/developer-guide/working-with-plugins#all-nodes. I'm with you on the array mutations, but I'm not sure I understand the danger of the static methods. Can you run that by me one more time? When is Object.assign(this.props, {\u2026}) ever a safe operation?. I hear you, but since this is only used in one place, I'm not sure the abstraction is worth it.. Could do, but that feels like unnecessary baggage across the rest of the rules if someone opts to not enable this rule. Thoughts?. Nope! mutation is not an array, it a node.. Done.. Agreed with the first part. This does default to false, I can specify that if you think it needs to be clearer.\nI like my tools to work out of the box. I really think that both of the cases you outlined are corner cases.\nThe chances of a prop that's an object, with methods, that also has methods named the same as array mutation methods are low. Frankly, doing so seems like bad practice (outside of immutable.js objects, but you shouldn't be calling the mutation methods in a component). \nSimilarly, if you choose to override a language builtin like Object.assign, it's think it's reasonable for your linter to complain. As we've discussed, I prefer not to even have the object statics option \u2013 I think it encourages bad behavior.\nThe options are here to help you get around extremely unusual circumstances, and I struggle to see a case where they should ever be used.. Reflect is a good call! I forgot about that. I'll add that in.\nUnfortunately, this isn't setup for arbitrary lodash.assign calls, but I can see that being a good feature. However, adding support for that is quite a bit of work. I suggest that we look at that in a issue and see if that's something the community wants/expects. . I gotcha, the issue is that parsing the AST to determine that is more difficult. As I say, I'd love to support that, but it feels like something that can be done on the next iteration of this rule?. Hmm\u2026 I'd argue it's more important for defaults to solve the common case, even if there's a little bit of danger involved. If I were using this rule, I wouldn't expect array mutations to not be reported.\nI appreciate that point of view, and I'm not sure what your preferred method of resolving issues like this are. Maybe we can ask another maintainer to weigh in?. I understand and want the same thing, but it's significantly more complex to support arbitrary objects and their statics. It seems to me that that this API, while not ideal, is a good v1. We can add complexity down the road.. Sure! That would work for Reflect and Object (though I'm not sure it's a more clear API), but it wouldn't enable lodash, or any other non-built-in as far as I know. Unless there's something I'm missing?. Oh, interesting. So, that doesn't actually guarantee that the object is imported from lodash. e.g. it could throw a false positive on something like const lodash = {assign: noop}, and wouldn't catch import _ from 'lodash', nor import {assign} from 'lodash'. I can do that, but it feels a little gross. Thoughts?. (I get that you could set _.assign in the statics array, but as I say \u2026 it's a bit gross). Okay, fair enough. I'll add that! :). I figured you'd say that, so I held off on tests ;)\nOkay, I'll move them out, and just have them in the docs for easy reference.. ",
    "craigbilner": "@joeybaker ,\nI've used iron-node and ascertained so far that any function block which tries to assign a variable called props causes the issue:\n```\nvar a = function() {\n  var newProps1 = props1;\n  const newProps2 = props2;\n  let newProps3 = props3;\n};\nlet b = function() {\n  var newProps4 = props;\n  const newProps5 = props;\n  let newProps6 = props;\n};\nconst c = function() {\n  var newProps7 = props;\n  const newProps8 = props;\n  let newProps9 = props;\n};\nfunction d() {\n  var newProps10 = props;\n  const newProps11 = props;\n  let newProps12 = props;\n};\nconst e = () => {\n  var newProps13 = props;\n  const newProps14 = props;\n  let newProps15 = props;\n};\n```\nIn the code above newProps1/2/3 don't fall into the \"VariableDeclarator\"\nA cursory search of https://github.com/shakacode/react-webpack-rails-tutorial raised as an issue would support this.\n. @joeybaker,\ndoes this fix the root cause?\nTo me this is the culprit\nvar statelessDestructuring = node.init && node.init.name === 'props' && utils.getParentStatelessComponent();\nThe example given is this:\nlet {firstname} = props\nyet it doesn't test for the parent being an \"ObjectPattern\" and therefore having properties?\n. ",
    "justin808": "Travis-ci error: https://travis-ci.org/shakacode/react-webpack-rails-tutorial/builds/94336281\n. I just hit this. Problem was my global eslint was used and not the project specific one.\n. I just hit this. Problem was my global eslint was used and not the project specific one.\n. ",
    "ianobermiller": "Just noticed this in Radium as well: https://github.com/yannickcr/eslint-plugin-react/commit/bccf86b11bd446ccdf7ed0b299d2399ddf98e21e#commitcomment-14780463\n. > It currently supports es2015 classes extending React.Component\nTo clarify, it actually supports ANY class that has a render method, no matter what it extends from.. ",
    "andrewdelprete": "Good call, I just ran across this myself, thank you! \n. ",
    "jeromecovington": "Yes...that didn't seem to help.\n. Similarly it might make sense to check for arrayOf().. Yeah, I can't much argue for whether shape({}) (empty) is demonstrably better than object, only that shape({}) without any further definition of internal props doesn't actually more specifically document anything, which seemed to be the underlying goal of the forbid-prop-types. If nobody else thinks that goal is relevant, or if I am needlessly splitting hairs, I certainly won't be offended if this issue gets closed.. Yeah, I can't much argue for whether shape({}) (empty) is demonstrably better than object, only that shape({}) without any further definition of internal props doesn't actually more specifically document anything, which seemed to be the underlying goal of the forbid-prop-types. If nobody else thinks that goal is relevant, or if I am needlessly splitting hairs, I certainly won't be offended if this issue gets closed.. ",
    "ALF-er": "Also, allow ref={c => this.myComponent = c} case please\n. ",
    "eadz": "This would be great. Currently the following is allowed\njsx\n  <ButtonBlock onPress={function () { onContinue(8); }} text={'I Agree'} color={\"black\"}/>\nbut this is not:\njsx\n  <ButtonBlock onPress={() => onContinue(8) } text={\"I Agree\"} color={\"black\"}/>\n. This would be great. Currently the following is allowed\njsx\n  <ButtonBlock onPress={function () { onContinue(8); }} text={'I Agree'} color={\"black\"}/>\nbut this is not:\njsx\n  <ButtonBlock onPress={() => onContinue(8) } text={\"I Agree\"} color={\"black\"}/>\n. @ljharb if it is a stateless component\na) won't it only re-render if props have changed? \nb) how else do you pass parameters to a function passed as props. \ne.g. \n``` jsx\nconst SelectTimeDisplay = ({ selectTime }) => (\n  \n selectTime(12) }>\n     12 Hour Display\n\n selectTime(24) }>\n    24 Hour Display\n\n\n);\n```\nAccording to the linting rules, you can't use bind either, so what is the suggested solution using stateless components?\n@Daniel15 I know I can disable the rule, but I'm struggling to find any solution that passes. ( that function code was one of them ;) ) I will say that I am not a javascript guru, so there may be something I am missing.\n. @ljharb where is the state? there are no variables to store state... \n. @ljharb a number I pass into select time is a function parameter, not state surely? those numbers are not state, they are hard coded in the program. \nyou could rewrite the component like so\n``` jsx\nlet component = {\n  press12: function(selectTimeFunc) { selectTimeFunc(12) },\n  press24: function(selectTimeFunc) { selectTimeFunc(24) },\n}\n// and run it\ncomponent.press12(function(x) { alert(x) });\ncomponent.press24(function(x) { alert(x) });\n```\nThere is no state right?\nI understand I could rewrite it the way you have suggested, but as functional components are new to react I think maybe not everyone has experienced the limitations of the eslint-plugin-react when it comes to them. Do you use them much?\n. Ok, so speed is the main reason? I've done some benchmarking, and it's really hard to find any difference ( even rendering 1000 things every second still no difference ) but I do understand there may be a very very small difference. For me it's not a big enough difference to worry about so I'll just disable the rule locally. I think if you were making a game it might matter, but even then, maybe not. \n. ",
    "vdh": "Has there been a resolution to this conflict between rules? For components that need event handlers bound to props:\n``` jsx\nimport React, { Component, PropTypes } from 'react';\nimport pureRender from 'pure-render-decorator';\n@pureRender\nexport default class Example extends Component {\n  static propTypes = {\n    action: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n  };\nhandleClick = () => this.props.action(this.props.id);\nrender() {\n    return ;\n  }\n}\n```\nIs it right to assume that jsx-no-bind is the more important rule here, and that the prefer-stateless-function error is a false positive?\n. I've run into some false positives with classes that make use of onClick or onSubmit handlers to avoid recreating functions inside render.  For example:\n``` jsx\nimport React, { Component, PropTypes } from 'react';\nimport pureRender from 'pure-render-decorator';\n@pureRender\nexport default class Example extends Component {\n  static propTypes = {\n    action: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n  };\nhandleClick = () => this.props.action(this.props.id);\nrender() {\n    return ;\n  }\n}\n```\nWhile all the data is coming from props, I can't see any way it could be rewritten as a stateless function without breaking the jsx-no-bind rule.\n. @artisologic That would still re-create _handleClick every render. To quote the description of the jsx-no-bind rule:\n\nA bind call or arrow function in a JSX prop will create a brand new function on every single render. This is bad for performance, as it will result in the garbage collector being invoked way more than is necessary.\n\nSo even if the code doesn't trigger jsx-no-bind, the performance penalty from creating functions inside render still exists.\nAs a side note, I like to use the no-use-before-define rule because I feel hoisting adds unnecessary complication, and breaks the top-to-bottom flow of logic in a file.\nAdditionally, stateless components currently don't support pure render / shouldComponentUpdate (Before now I assumed they were already pure by nature of being functional, but it appears I was wrong about that).\n. @silvenon my world was also shattered, although there might be future optimisations to React that could enable automatic (or opt-in) pure rendering for stateless components.\n@artisologic I've found that stateless components are best used for simple/small components that literally just map props (& context) to some JSX. For the non-trivial components I just stick with classes (and disable prefer-stateless-function per-file while I wait for the rule fix).\nAlso I notice that while react-css-modules is kind enough to return the original component, I couldn't spot anything in the ES7 spec that guarentees a return value from a decorator? They mutate their input, so I think they might need to be written like this:\njs\n@decoratorWithoutParam\n@decoratorWithParam(param)\nclass Button extends Component {\n  render() {\n    return <button>{this.props.children}</button>;\n  }\n}\n``` js\n// bonus fat arrow + destructuring version\nconst Button = ({ children }) => ({children});\ndecoratorWithoutParam(Button);\ndecoratorWithParam(param)(Button);\nexport default Button;\n. Hmm, on a second inspection it looks like there is some reassignment going on with some decorators, [although it's sometimes problematic if multiple decorators try to wrap/reassign the same component](https://github.com/gajus/react-css-modules/issues/9). The [decorator docs](https://github.com/wycats/javascript-decorators) have examples that mutate (e.g. readonly), but also shows reassignment in the desugaring segment. So I guess until decorators get more stable in regards to reassignment vs mutation, \"results may vary\"?\n. @yannickcr It looks similar to this issue in eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/317\n. @ljharb This fails in `6.9.0` on an edge case of an explicit null variable:jsx\nlet style = null;\n\n``\nI dropped the unnecessary= nullin my own code, so it's not an issue for me, but I thought I'd make a note of it just in case.. @ljharb [Line 37](https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/style-prop-object.js#L37) doesn't have the same null check as [line 72](https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/style-prop-object.js#L72), so it gives aStyle prop value must be an objecterror.. I was also able to get a test failure by duplicating [this existing test](https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/style-prop-object.js#L120) and adding= null` to it.. @ljharb When a leaf node has a lot of props, especially when nesting limits the available horizontal space, the opening tag is often broken onto multiple lines:\n``` jsx\n<MyComponent\n  foo=\"bar\"\n  baz=\"qux\"\n  otherPropWithLongName={10}\n\nLabel Text\n```\n\nWhich could be easier to read when written with the children prop:\njsx\n<MyComponent\n  foo=\"bar\"\n  baz=\"qux\"\n  otherPropWithLongName={10}\n  children=\"Label Text\"\n/>\n. Your third point is a much clearer and more convincing rational for the rule than the first two.\nThe first two seem to contradict the opening paragraphs of the React docs \"JSX in Depth\":\n\nJSX is a JavaScript syntax extension that looks similar to XML. You can use a simple JSX syntactic transform with React.\nWhy JSX?\nYou don't have to use JSX with React. You can just use plain JS. However, we recommend using JSX because it is a concise and familiar syntax for defining tree structures with attributes.\nIt's more familiar for casual developers such as designers.\nXML has the benefit of balanced opening and closing tags. This helps make large trees easier to read than function calls or object literals.\nIt doesn't alter the semantics of JavaScript.\n\nI find the phrasing of children being \"special\" to be unhelpful without better context, and referring to the arguments on React.createElement is also not very clear.\nI'm fine with it being a style or code cleanliness choice. I understand there must be important reasons why this rule was created and added as a default recommended rule, but the relatively-silent introduction and documentation are essentially a black box. I rely on the documentation of ESLint rules to better understand why I get errors and what I might be doing wrong, and it's been frustrating trying to get a clear explanation of the choices behind this rule.\n. @piuccio I'm (obviously) all for children props, but it looks like you're going against jsx-no-bind by re-declaring the same function on every render?. @piuccio I would recommend moving from the airbnb-base preset to the main airbnb one. You're missing out on all the rules enabled by the main preset.\nThe jsx-no-bind rule is there to help you avoid performance issues caused by re-creating the same function over and over when you don't need to be. There's no logical reason to go against js-no-bind. Example code should not be taken as gospel.. @piuccio In fact, after a second look, that documentation is both needlessly violating no-use-before-define for no good reason, and mixing JSX & JS next to each other without really clarifying between the two. I'm big fan of react-router, but that example code is atrocious.. @ljharb Agreed. I feel like someone with a tea light who set off the smoke alarm, seeing someone set up an indoor campfire next to me. It makes me start to reconsider if my tea light (strings as children props) is even worth the metaphorical fire hazard now\u2026. @ljharb But isn't that just a functional stateless component?\njs\nconst SomeRoute = ({ match }) => (\n  <li className={match ? 'active' : ''}>\n    <Link to={to} {...rest} />\n  </li>\n);\n// \u2026\nconst SomeParent = () => (\n  {/* \u2026 */}\n  <Route path={to}>\n    <SomeRoute />\n  </Route>\n  {/* \u2026 */}\n);\nThe more I read those docs for Route the more confusing it gets. They seem to have three ways (component, render, children) for doing almost exactly same thing\u2026?. I'm recanting this issue. I've seen the light that children props create way too much syntactic and logistical hassles than they're worth.. ",
    "idchlife": "@vdh encountered similar problem just now, I started writing stateless function component and then saw no bind and no arrow functions. Soooo... I think this is really the case, when your stateless function component suddenly needs to call an action that will trigger somewhere change of props, that is used in this stateless function component, it is kinda too interactive, alive and... staty. Also rule about stateless function component is not (as I see in my other files) saying there is something wrong with components that have only props but (!) calling some actions in onClick etc.\n@silvenon about OP post, I think every developer should decide which way is better but one's developer breaking lint rules is not a case for everyone to jump off a cliff following him. Every developer counts and every developer should decide better way.\nIn resolution, \"prefer stateless function components\" if you call actions that changes props - is kinda yes, fallsy and not your case.\n. @vdh encountered similar problem just now, I started writing stateless function component and then saw no bind and no arrow functions. Soooo... I think this is really the case, when your stateless function component suddenly needs to call an action that will trigger somewhere change of props, that is used in this stateless function component, it is kinda too interactive, alive and... staty. Also rule about stateless function component is not (as I see in my other files) saying there is something wrong with components that have only props but (!) calling some actions in onClick etc.\n@silvenon about OP post, I think every developer should decide which way is better but one's developer breaking lint rules is not a case for everyone to jump off a cliff following him. Every developer counts and every developer should decide better way.\nIn resolution, \"prefer stateless function components\" if you call actions that changes props - is kinda yes, fallsy and not your case.\n. ",
    "palnes": "I second this one, plenty boilerplate if you import a library. OTOH, it might be better to abstract libraries away in this manner? But would be nice to have a choice.\n. I kinda like:\n{\nfoo\n? <b>bar</b>\n: <b>baz</b>\n}\n. ",
    "robatwilliams": "Some of this, I think, could be covered reasonably straightforwardly by checking the prefix of the handler name. Only apply the rule if it begins with (this. but not this.props) or something other than props.\nBut I don't think that's a good approach. It's unchecked by default, can be bypassed quite easily, and would remove all enforcement when using destructured props. Anything more advanced would need to know about more than just the JSXAttribute. Any pointers on other rules that could inspire an approach?\n(First time here looking at rule implementation). Some of this, I think, could be covered reasonably straightforwardly by checking the prefix of the handler name. Only apply the rule if it begins with (this. but not this.props) or something other than props.\nBut I don't think that's a good approach. It's unchecked by default, can be bypassed quite easily, and would remove all enforcement when using destructured props. Anything more advanced would need to know about more than just the JSXAttribute. Any pointers on other rules that could inspire an approach?\n(First time here looking at rule implementation). ",
    "betaorbust": "This would be extremely useful. In general, we're trying to guard against what a file exports, not the contents of how it builds that export.\n. ",
    "ThiefMaster": "I'd like to have this as well. I don't want to put \"local\" components into separate files, so restricting this to exported ones would be very convenient.. I'd like to have this as well. I don't want to put \"local\" components into separate files, so restricting this to exported ones would be very convenient.. PR updated. Also removed a bunch of unused code from the rule in a separate commit (probably copy&paste from somewhere else).. PR updated with the rule to deal with excessive spacing between tag/prop or props in the same line. PR updated. PR updated. Any chance to get it merged so it makes it into the next version?. Any chance to get it merged so it makes it into the next version?. You have to exclude the JSX nodes from the indent rule:\n  ignoredNodes:\n    - JSXAttribute\n    - JSXSpreadAttribute. Except that there are components where it's *very* unlikely they'll have more than one prop in the future. Except that there are components where it's *very* unlikely they'll have more than one prop in the future. so `forbiddenComponents` and `allowedComponents` would override the value in `custom` for that particular component? What if someone puts a component in both? Wouldn't it be better to use something like `components` which could be set to an object mapping component names to forbid/allow/ignore? (what's the difference between allow and ignore btw?). So, deprecate `forbid-(component|html)-props` in favor of a new rule `forbid-props`, that takes a schema like the one we talked about above? I'd go for slightly different names to keep in line with the old rule names though:\n\njavascript\n{\n  propName: string,\n  component: forbid|allow,\n  dom: forbid|allow,\n  override: {somehtmltag: allow, SomeComponent: allow, ...}\n}. what would the html/dom entry do in this case? currently forbid-component-props completely ignores lowercase (html) tags.... {\n  propName: string,\n  allowedFor: [SomeComponent]\n}. PR: #1735. Docs added, changes done.. I agree that in most cases it's not a good idea. In this particular case it's for something like this:\njsx\n<Translate name={name} link={link}>\n    Hey <Param name=\"name\" />, you want to <Param name=\"link\">click me</Param> and you know it!\n</Translate>\nI think this is a pretty valid case for children accessing parent props.. I agree that in most cases it's not a good idea. In this particular case it's for something like this:\njsx\n<Translate name={name} link={link}>\n    Hey <Param name=\"name\" />, you want to <Param name=\"link\">click me</Param> and you know it!\n</Translate>\nI think this is a pretty valid case for children accessing parent props.. I'm using a custom babel plugin that extracts this piece of JSX to a plain string, which can then be translated without having to deal with JSX (Hey {name}, you want to {link}click me{/link} and you know it!), while still being able to have elements in the translated string that can be wrapped by some tag. (link could be <a onclick={doStuff} /> for example)\nAnyway, maybe it's special enough to just disable the rule for that particular line.\n\nActually, now that I'm thinking about it again, I could probably change this to \njsx\n<Translate>\n    Hey <Param name=\"name\" value={name} />, you want to <Param name=\"link\" value={name}>click me</Param> and you know it!\n</Translate>. I'm using a custom babel plugin that extracts this piece of JSX to a plain string, which can then be translated without having to deal with JSX (Hey {name}, you want to {link}click me{/link} and you know it!), while still being able to have elements in the translated string that can be wrapped by some tag. (link could be <a onclick={doStuff} /> for example)\nAnyway, maybe it's special enough to just disable the rule for that particular line.\n\nActually, now that I'm thinking about it again, I could probably change this to \njsx\n<Translate>\n    Hey <Param name=\"name\" value={name} />, you want to <Param name=\"link\" value={name}>click me</Param> and you know it!\n</Translate>. Just found a different example during a code review where a developer ended up writing rather ugly code due to the warning (and not just disabling it) - see the XXX lines:\n```javascript\nhandleFiltersChange(filter, value) {\n    const {setTextParamFilter, setAdvancedParamFilter, filters: {text}} = this.props;\n    const stateUpdates = {[filter]: value};\nif (filter === 'building') {\n    stateUpdates.floor = '';\n} else if (filter === 'text') {\n    const parsedValues = parseRoomListFiltersText(value);\n\n    stateUpdates.building = parsedValues.building;\n    stateUpdates.floor = parsedValues.floor;\n}\n\nthis.setState(stateUpdates, () => {\n    let textValue;\n\n    if (filter === 'text') {\n        textValue = value;\n    } else {\n        const stateToKeys = {building: 'building', floor: 'floor'};\n        const textParts = Object.entries(stateToKeys).filter(([stateKey]) => {\n            const {[stateKey]: stateValue} = this.state;  // XXX\n            return !!stateValue;\n        }).map(([stateKey, searchKey]) => {\n            const {[stateKey]: stateValue} = this.state;  // XXX\n            return `${searchKey}:${stateValue}`;\n        });\n\n        textValue = textParts.join(' ');\n    }\n\n    this.setState({text: textValue});\n    setAdvancedParamFilter('text', textValue);\n});\n\nif (filter === 'text') {\n    if (!text || value.trim() !== text.trim()) {\n        setTextParamFilter(value);\n    }\n}\n\n}\n```\nI think this is a less obscure usecase where destructuring is ugly for dynamic props/state.. Any chance to get it merged so it makes it into the next version?. Any chance to get it merged so it makes it into the next version?. Does this really make sense? Usually people group static methods together, and put them before the constructor since they are not related to a specific instance.. Also it's impossible to remove something from the lifecycle list without hardcoding the whole list in my config (and thus having to maintain it whenever react adds new lifecycle methods).... Looking at the code again, it seems like getDerivedStateFromProps is considered lifecycle even though it is static.. nvm, just found #1795 so I'll continue there. Agreed.\nWould a blacklist/whitelist with property names make sense? I'd say no, since having e.g. defaultProps outside but propTypes inside the class would make no sense.. > If someone isn't able to use class fields yet (they're not yet part of the language)\nHow likely is it that someone uses react without babel though?. I think this also fixed #1885 and #1473. I believe this change caused #2017.\nThe old logic was:\njs\n    function isPropTypesUsage(node) {\n      const isClassUsage = (\n        (utils.getParentES6Component() || utils.getParentES5Component()) &&\n        node.object.type === 'ThisExpression' && node.property.name === 'props'\n      );\n      const isStatelessFunctionUsage = node.object.name === 'props' && !isAssignmentToProp(node);\n      const isNextPropsUsage = node.object.name === 'nextProps' && (inComponentWillReceiveProps() || inShouldComponentUpdate());\n      return isClassUsage || isStatelessFunctionUsage || isNextPropsUsage;\n}\nand it got replaced with:\njs\n  function isPropTypesUsage(node) {\n    const isClassUsage = (\n      (utils.getParentES6Component() || utils.getParentES5Component()) &&\n      ((node.object.type === 'ThisExpression' && node.property.name === 'props')\n      || isPropArgumentInSetStateUpdater(node))\n    );\n    const isStatelessFunctionUsage = node.object.name === 'props' && !isAssignmentToProp(node);\n    return isClassUsage || isStatelessFunctionUsage || inLifeCycleMethod();\n  }. Looking at the code this happens in any lifecycle method, regardless of what this. attribute is destructured. I guess the check in isPropTypesUsage is too broad since it doesn't look at the name of the attribute that's destructured in case of a lifecycle method.. unfortunately having to use a named function here is super ugly because it means i need to specify the function name twice when using a non-default export\njs\nconst Foo = React.memo(function Foo() {\n    return 'bar';\n});\nexport {Foo};\nfor default exports i can do this to avoid it, and still have a proper name for the component (since it's inferred automatically):\njs\nconst Foo = function() {\n    return 'bar';\n};\nexport default React.memo(Foo);. I went for the lazy option here - the default fixing logic in report() cannot handle the case where the property isn't the first thing in the line and checkNodesIndent would need further changes as well.\nIf you think having an automated fixer for this is important I can have another look though.. Any better suggestion? Naming is hard :p\nMy first idea was tag-aligned but jsx-closing-bracket-location usess that term with a different meaning, and just tag is too similar to tab IMO.. OK I'll have another look at this. yep, d. So yeah, first-prop sounds actually a good name.\nJust thinking.. should fixing double-space between tag and prop (the stuff from the other comment below) even be part of this rule or a completely new rule? In that case I'd look into creating such a rule and just remove the afterNameLength !== 1 error here..     \n    -->\n    \nSo this should then be handled by a separate rule (or is there already one which does that?). this rule does not exist yet; I'll add it to the PR later. done; didn't know json schema has an option to require uniqueness. It's the one I mentioned here: https://github.com/yannickcr/eslint-plugin-react/pull/1729#discussion_r175829190\nI can move it to a separate PR.. It was never provided when calling the function - probably just a copy&paste leftover from somewhere else.. ",
    "epeli": "Ah, you're right this should be in the display-name rule. But I'm not quite sure how it relates to acceptTranspilerName because at least Babel does not add a transpile name for function components?\nI think this should always give a warning:\njs\nconst Hello = () => <div>Hello</div>;\nwhich can be fixed by manually assigning a name:\njs\nHello.name = \"Hello\";\nor by using a function declaration. \n. Ah, you're right this should be in the display-name rule. But I'm not quite sure how it relates to acceptTranspilerName because at least Babel does not add a transpile name for function components?\nI think this should always give a warning:\njs\nconst Hello = () => <div>Hello</div>;\nwhich can be fixed by manually assigning a name:\njs\nHello.name = \"Hello\";\nor by using a function declaration. \n. I was so wrong about this. In ES2015 .name is actually picked from the variable name automatically and Babel ES2015 preset implements it correctly.\nhttp://www.2ality.com/2015/09/function-names-es6.html\n. ",
    "mjomble": "It seems you'll need to update tests as well to get the Travis CI build to pass.\n. The documentation for this rule mentions that creating a new function on each render is bad for performance, but later recommends code like this:\njavascript\nvar List = React.createClass({\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item =>\n          <ListItem key={item.id} item={item} onItemClick={this.props.onItemClick} />\n        )}\n      </ul>\n    );\n  }\n});\nThis example still contains an arrow function inside render.\nIsn't this just as bad? At least as far as the garbage collection argument is concerned.\n. This should probably be mentioned in the documentation. Currently it gives the impression that they are more or less equally bad.\n. ",
    "darul75": "hi Yannick,\nthank you very much, yes indeed some rules are very restrictives so I have skipped some :)\n. ",
    "mistadikay": "I'm sorry, it's me being dumb, options propType should be like this:\njs\noptions: PropTypes.arrayOf(\n    PropTypes.shape({\n        text: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number\n        ]),\n        value: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number\n        ])\n    })\n),\nIn this case everything is fine. Closing\n. ",
    "phpnode": "@yannickcr squashed\n. awesome, thanks!\n. @ljharb the first parameter is the default properties, e.g.\n```js\ntype Props = {\n  name: string\n};\nconst defaultProps = {\n  name: 'Foo'\n};\ntype State = {\n  foo: string\n}\nclass Y extends React.Component {\n  state = { foo: 'bar' };\n  static defaultProps = defaultProps;\n  //  ...\n}\n``. @ljharb I guess there are two things here, the type parameters and$Diff`.\nType Parameters\n``js\n// So this is a generic container\n//T` can be anything\nclass Container {\n  items: T[];\npush (...args: T[]) {\n    this.items.push(...args);\n    return this;\n  }\n}\n// When extending we can pass the type parameter\n// to the super class, making the type more specialized\nclass StringContainer extends Container {\n}\nconst c = new Container();\nc.push(true, 123, 'this is fine'); // all good\nconst sc = new StringContainer();\nsc.push('this is fine'); \nsc.push(false); // flow error\n```\n$Diff\nIt takes two (object) types and returns the properties that exist in one and not the other, hopefully this is helpful:\n```js\ntype APIOptions = {\n  hostname: string,\n  port: number\n};\nconst defaultOptions = {\n  port: 80\n};\n// Note: I don't think $Subtype<> should really be required,\n// and it's probably a flow bug. You may be able to omit it.\ntype RequiredOptions = $Subtype<$Diff>;\nclass API {\n  opts: APIOptions;\nconstructor (options: RequiredOptions) {\n    this.opts = Object.assign({}, defaultOptions, options);\n  }\ngetURL () {\n    return this.opts.hostname + ':' + this.opts.port;\n  }\n}\nconst api = new API({\n  hostname: 'foo'\n});\nconsole.log(api.getURL());\n```. @ljharb @yannickcr friendly ping - this is working locally on quite a large codebase so quite confident it works, anything else I need to do before it can be merged?. @ljharb @yannickcr friendly ping - this is working locally on quite a large codebase so quite confident it works, anything else I need to do before it can be merged?. ",
    "hfwang": "I get this error with the following JSX file:\nexport default const Foo = {}\nFoo.Bar = class extends React.Component {\n}\nFoo.Bar.propTypes = {};\n. ",
    "MrBenJ": "@yannickcr  - Thank you so much! I was looking around for this and I couldn't find it.\nAppreciate all your help with this. You are the best!\n. ",
    "Dindaleon": "Awesome! Thank you.\n. ",
    "casesandberg": "I get Configuration for rule \"react/jsx-curly-spacing\" is invalid: Value \"data[\"1\"].alternative\" has additional properties when trying to do \"alternative\": true as a third argument\n. Ah, got it @yannickcr, I will see if I can get it in tonight!\n. I am thinking this should be included in jsx-curly-spacing when always is set so that the spacing matches.\n. I would like spacing around both spread and non-spread props.\n. It doesn't work on spreads\n. ",
    "meleyal": "I'm actually using \"babel-eslint\": \"^4.1.6\" already.\n. I've also tried \"parser\": \"babel-eslint\" in .eslintrc.\n. Any other ideas on what could be causing the error?\n. eslint@2.0.0-beta.1 + babel-eslint@4.1.6\n.eslintrc:\njson\n{\n  \"parser\": \"babel-eslint\",\n  \"extends\": \"rackt\",\n  \"env\": {\n    \"mocha\": true\n  },\n  \"rules\": {\n    \"strict\": 0,\n    \"new-cap\": 0,\n    \"comma-dangle\": [1, \"always-multiline\"],\n    \"react/jsx-uses-react\": 1,\n    \"react/wrap-multilines\": 2,\n    \"flow-vars/define-flow-type\": 1,\n    \"flow-vars/use-flow-type\": 1\n  },\n  \"plugins\": [\n    \"react\",\n    \"flow-vars\"\n  ]\n}\nMyComponent.js:\n``` js\n// @flow\nimport React from 'react'\nimport { Page } from '../models/Page'\ntype Props = {\n  page: Page,\n  width: number,\n  height: number\n}\nexport const MyComponent = (props: Props): ReactElement => {\n  ...\nreturn (\n    \n  )\n}\n``\n. Upgrading tobabel-eslint@5.0.0-beta6` fixes the issue: https://github.com/babel/babel-eslint/issues/237\n. ",
    "DaleJefferson": "@meleyal I can reproduce this issue without eslint-plugin-react I think we need to raise this in ESLint or babel-eslint\nThis is the simplest version that throws the Parsing error: Unexpected token error\nconst add = (a: number, b: number): number => a + b;\n. ",
    "nickzarate": "Sorry I did not see issue #330, so I am closing mine.\n. ",
    "bkonkle": "Actually, in this case your dispatch and showCancel validators are nested underneath the config validator. That's why they're detected as missing.\n. ",
    "kwhitaker": "doh! Well crap. Thanks for the catch :)\n. ",
    "klimashkin": "Currently such indentation is default one in WebStorm - it's clear and convenient.\nReally want to have rule config like\njavascript\n'react/jsx-indent-props': [2, 2],\nand for example\njavascript\n'react/jsx-indent-props': [2, 'tag-name'],. Public Class Fields are on stage 2 already, why it still hasn't been merged into 7.x?.... Public Class Fields are on stage 2 already, why it still hasn't been merged into 7.x?.... The same issue\n. Rules config the same as: https://github.com/yannickcr/eslint-plugin-react/issues/897\n. Yep, it's really critical https://github.com/yannickcr/eslint-plugin-react/issues/901\nCan't use 6.4.x with it\n. Related suggestion is to enforce parens if component starts on the next line after declaration, doesn't matter if it multiline or not.\njavascript\nconst comp = <Component prop1='prop1' prop2='prop2' prop3='prop3'\n                        prop4='prop4' prop5='prop5'/>;\nBut\njavascript\nconst comp = (\n  <Component prop1='prop1' prop2='prop2' prop3='prop3' prop4='prop4' prop5='prop5'/>\n);\njavascript\nconst comp = (\n  <Component prop1='prop1'><ChildrenComp/></Component>\n);\njavascript\n'react/jsx-wrap-multilines': [2, {\n    'declaration': {ignoreSelfClosing: true, newLine: true},\n    'assignment': {ignoreSelfClosing: true, newLine: true},\n    'return': true,\n    'arrow': true,\n}],\nOr maybe it should be handled by different rule. If component has closing tag and closing tag is on next line, according react/jsx-closing-tag-location opening tag should be moved to the new line to be inlined with closing tag.\nIf component doesn't have closing tag I want to keep it on the first line no matter how many lines it allocates to fit all own props. Because I align its props with first declared prop.. Awesome!\nSimilar to eslint indent rule\njavascript\nindent: [2, 2, {\n  'FunctionDeclaration': {\n    'parameters': 'first',\n    'body': 1,\n  },\n}]\nwe can call it first\n'react/jsx-indent-props': [2, 'first']. Released in 7.9.0.\nBut seems like there is a conflict with eslint indent rule:\n\n\n@ThiefMaster Is there a workaround for this? Probably i'm missing something in config\njavascript\n    'react/jsx-indent-props': [2, 'first'],\n    'indent': [2, 2, {\n      'SwitchCase': 1,\n      'VariableDeclarator': {'var': 2, 'let': 2, 'const': 3},\n      'outerIIFEBody': 1,\n      'MemberExpression': 1,\n      'FunctionDeclaration': {\n        'parameters': 'first', \n        'body': 1, \n      },\n      'FunctionExpression': {\n        'parameters': 'first',\n        'body': 1,\n      },\n      'CallExpression': {\n        'arguments': 1,\n      },\n      'ArrayExpression': 1,\n      'ObjectExpression': 1,\n      'ImportDeclaration': 1,\n      'flatTernaryExpressions': true,\n      'ignoredNodes': [],\n      'ignoreComments': false,\n    }],. @ThiefMaster Thank you for the quick response, that works! \nProbably that should be added to the rule page. ",
    "jasonkuhrt": "I am using \"^3.15.0\". Hm...\n. I think this is all the info you need/are asking for:\n- Our ESLint Preset\n- A consuming Project exhibiting this not-found behaviour.\nLet me know.\n. ",
    "ndreckshage": "I also get this simply by extending airbnb by only extending eslint-config-airbnb\n. ",
    "ziemkowski": "Not to mention that commit is in error and needs to be reverted, since it isn't actually a requirement anyways.\n. Not to mention that commit is in error and needs to be reverted, since it isn't actually a requirement anyways.\n. ",
    "gscottolson": ":+1: \n. :+1: \n. ",
    "gasi": "Thanks, we\u2019ll try that. Any reason not to make it the default?\nOn Saturday, February 20, 2016, Neil Kistner notifications@github.com\nwrote:\n\nThere is an ignoreCase option you can pass to the rule.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/404#issuecomment-186723618\n.\n\n\nSent from my iPhone\n. @ljharb You\u2019re right in the sense that ls works like that:\nbash\ndrwxr-xr-x     2 dani  staff         68 Feb 23 15:01 alphaBeta\ndrwxr-xr-x     2 dani  staff         68 Feb 23 15:01 alphaalpha\nStill, for props, I find it odd. Glad I can customize it for my own use case :smile: \n. ",
    "ryym": "Squashed!\n. Thanks! :smiley: \n. Thanks! :smiley: \n. ",
    "ewendel": "Done!\n. ",
    "alitaheri": "I'm trying to add a failing test. and possibly fix it :grin: \n. The problem is with the custom propTypes. I'm fixing it now\n. Well what I did also fixes this. but I'm not sure if it will behave correctly...\nAnyway, I'll just make the PR so we can continue the discussion there :grin: \n. Anytime :grin: \n. Anytime :grin: \n. Glad I could help ^^\n. Glad I could help ^^\n. Thanks :grin: \n. ",
    "NullDivision": "I'm not sure it's just that. I get the issue with something like:\nApplication.propTypes = {\n  actions: React.PropTypes.shape({\n    displayError: React.PropTypes.func\n  })\n};\nOn Sun, Jan 24, 2016 at 11:28 PM, Ali Taheri Moghaddar \nnotifications@github.com wrote:\n\nThe problem is with the custom propTypes. I'm fixing it now\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/408#issuecomment-174343205\n.\n. Awesome. Issue fixed. Thank you @alitaheri :+1: \n. Awesome. Issue fixed. Thank you @alitaheri :+1: \n. @penx If you have a static set it should be ok to use the array index as values. If you have other features (eg. filtering) then it's recommended to use a unique key to avoid index collisions since React uses keys first to check if a node should be updated.. I understand what you're saying but from the React source I remember only a couple of things happening to defaultProps:\n\n\ncheck for getDefaultProps (not the case for arrow function and I doubt anyone would have a reason to coerce it)\ncheck for defaultProps property assigned to constructor\ncheck for any illegal/reserved properties (eg. key) in the defaultProps object\n\nAdvantages of destructuring:\n\nno reason for coercion\ndoesn't require React to loop through defaultProps on every update\nno side-effects\nrespects JS/ES6 standards implementation\n\nMaybe I'm missing what you mean by optimize. AFAIK React doesn't do component optimization on pure functions.\nIt could be an option for the rule like:\n\"react/require-default-props\": [2, { allowImplicit: true }]\n. The issue is indeed related in a manner as it is the exact opposite of what I want. Also the rule proposal is aptly named prefer-default-props, not require. The scope of require-default-props should not be to enforce the use of the defaultProps property (note: in its current state the rule clashes with several other rule libraries as is my case with immutable/no-mutation)\nThe scope of the rule should be to assign a default value in order to prevent undefined property values. Am I correct in this assumption?. I see your point. Still wondering if there's a way to circumvent the use of default props, especially if developers use Flow instead of propTypes.. No change in v7.1.0.\n```javascript\n// @flow\nimport React from 'react';\ntype Props = {| +a: number, +b: string |};\nconst MyComp = ({ a, b }: Props) => {a} {b};\nexport default MyComp;\n```\nMy best guess is that AST handles flow covariants differently.. ",
    "rjokelai": "+1 I'd like to see this, too\n. ",
    "mwilliamson-healx": "I've probably missed something, but I'm still not sure how to enforce this. jsx-first-prop-new-line makes sure that the first prop is on a new line, but doesn't enforce anything about later props. jsx-max-props-per-line still applies equally to single-line and multi-line tags.\n. ",
    "van-nguyen": "+1 IMO this is a very reasonable rule to have, any multiline props with more than 1 is not scannable\nWould like to see a combination of {maximum: 3, when: 'not-multiline'} and {maximum: 1, when: 'multiline'}. ",
    "luqmaan": "Haha, I'm dumb. I though this was the Airbnb styleguide. Sorry for enforcing these rules on you.\n. Haha, I'm dumb. I though this was the Airbnb styleguide. Sorry for enforcing these rules on you.\n. ",
    "justjake": ":+1: \n. :+1: \n. ",
    "wyattdanger": ":+1:\n. :+1:\n. ",
    "goatslacker": "LGTM\n. LGTM\n. ",
    "mindjuice": "This is something I'd like to see too.  Would a PR for this be welcome?  If so, I can work on it.\n. The performance of bind() is not the issue IMO.  It's that passing bind() as a prop to a custom component creates a new instance of the function each time, thereby eliminating the effectiveness of shouldComponentUpdate().\nThis is obviously very undesirable for custom components, but for a <div>, you're already in the process of rendering anyway, and there is no shouldComponentUpdate() function to worry about, so it seems reasonable to allow an exception for this case (opt-in, of course).\nIf I have a list of a dozen or so options that gets rendered infrequently (and I often do), I don't much care about the overhead of bind(), but I don't really want to create a new component for each thing in each of the various lists I have.  Even if I went with a new component (which I sometimes do where it makes sense), there would be overhead in calling the constructor of that component and passing props to it.  This would, at least partially, offset the overhead of bind().\nRight now, my options are to disable this rule on the lines where I use bind() or disable the rule entirely.  I'd rather be able to set a parameter in eslint like ignoreHtmlTags=true (or whatever you want to call it).\n. To pass additional parameters to an onClick handler so it knows which list item was clicked (e.g,. onClick={this.handleClick.bind(this, index, group)})\nIf you know of a better way to do that, I'd love to hear it.\n. The arrow function will not work if you are using a plain loop to create your <div>s, because the index and group are references to the closure variables, and by the time handleClick() is called, index and group would be at their final values.\nIn my case we're using map(), so it should be fine, and I'll change to that for now.\nI still believe that an additional option, as I described above, would be useful.  eslint's job isn't to tell developers how to write their code, but to give them tools with the flexibility to let them enforce whatever rules they choose.\n. @ljharb bind() may be slow, but passing a new function as a prop every time to an expensive-to-render component is going to be much more of a performance issue, since the shouldComponentUpdate optimization is made useless.\n. ",
    "THPubs": "Great thanks :-)\n. ",
    "playtocrazy": "my editor is Atom and when I use the rule react/jsx-quotes, I got error message form Atom as following:\n\nError: EPERM: operation not permitted, write\n    at Error (native)\n    at Object.fs.writeSync (fs.js:663:20)\n    at SyncWriteStream.write (fs.js:1981:6)\n    at Console.log (console.js:36:16)\n    at EventEmitter.Program (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint-plugin-react\\lib\\rules\\jsx-quotes.js:52:15)\n    at emitOne (events.js:77:13)\n    at EventEmitter.emit (events.js:169:7)\n    at NodeEventGenerator.enterNode (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint\\lib\\util\\node-event-generator.js:42:22)\n    at CommentEventGenerator.enterNode (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint\\lib\\util\\comment-event-generator.js:98:23)\n    at Controller.controller.traverse.enter (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint\\lib\\eslint.js:767:36)\n\nthen I try to use jsx-quotes, it works fine now.\nI just want to provide this information for everyone who get the same problem.\nAtom v1.4.1\nAtom plugin: \n- linter-eslint v6.0.0\n- linter v1.11.3\n. my editor is Atom and when I use the rule react/jsx-quotes, I got error message form Atom as following:\n\nError: EPERM: operation not permitted, write\n    at Error (native)\n    at Object.fs.writeSync (fs.js:663:20)\n    at SyncWriteStream.write (fs.js:1981:6)\n    at Console.log (console.js:36:16)\n    at EventEmitter.Program (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint-plugin-react\\lib\\rules\\jsx-quotes.js:52:15)\n    at emitOne (events.js:77:13)\n    at EventEmitter.emit (events.js:169:7)\n    at NodeEventGenerator.enterNode (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint\\lib\\util\\node-event-generator.js:42:22)\n    at CommentEventGenerator.enterNode (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint\\lib\\util\\comment-event-generator.js:98:23)\n    at Controller.controller.traverse.enter (C:\\Users\\richard.lin\\AppData\\Roaming\\npm\\node_modules\\eslint\\lib\\eslint.js:767:36)\n\nthen I try to use jsx-quotes, it works fine now.\nI just want to provide this information for everyone who get the same problem.\nAtom v1.4.1\nAtom plugin: \n- linter-eslint v6.0.0\n- linter v1.11.3\n. ",
    "sompylasar": "@playtocrazy if you're still interested in a solution, please vote for the issue about the cause of the error here: https://github.com/yannickcr/eslint-plugin-react/issues/783\n. Any update on this please?\n. @yannickcr @ljharb Guys please share your thoughts on this issue?\n. Reported to Atom core: https://github.com/atom/atom/issues/12504\n. Right, but it should not throw, i.e. it should just somehow ignore the input if the rule does not apply.. Maybe. Anyway, the faulty code assumes there is a name property on the name of the decl (decl.name.name) and it is a string, but something went wrong and invalidated the assumption. If there has been a parse error, the code might not have gotten that far I think.\n. Please see my comment to the commit https://github.com/marcelmokos/eslint-plugin-react/commit/6918bba271fccec28f40561f91e9808d5b91d7be\nIt's a workaround for this specific exception, not a fix for the root cause which is an AST node instead of a string in decl.name.name which has to be handled as a valid case.. @DianaSuvorova It's not about the test case (it's the same), it's about the proposed solution. Please see this comment: https://github.com/marcelmokos/eslint-plugin-react/commit/6918bba271fccec28f40561f91e9808d5b91d7be#commitcomment-23208488. The complex case of the props object being passed back and forth may be simplified by marking every defined prop as being used.\nThis rule would be very helpful for the top-level props tracking, especially in the stateless functions. It would better skip some \"maybe used\" props and reliably report \"definitely unused\", i.e. if there's no props object passing (except constructor super), but there's still destructuring in render.\n. Thanks @EvNaverniouk !. If you ask me, the fact that certain cases are not supported could also be tested. Of course, with a test name which clearly states \"testing unsupported case\" and assertions that clearly check for false positives or other signs of \"not supported\"-ness.. ",
    "kamek-pf": "Yup, stateless components are causing warnings for me too.\n. ",
    "niki4810": "@yannickcr Ping for review :) \n. @yannickcr Ping for review :) \n. @yannickcr could you please review it when you get a chance. Let me know if anything needs to be improved.\n. @yannickcr could you please review it when you get a chance. Let me know if anything needs to be improved.\n. Thanks for the feedback @yannickcr. I agree, this rule is not very generic so wanted to get your feedback. Closing this PR. \n. Thanks for the feedback @yannickcr. I agree, this rule is not very generic so wanted to get your feedback. Closing this PR. \n. @baer yes that was intentional. When running test via npm test i hit this issue.\n```\n\u279c  eslint-plugin-react git:(master) \u2717 npm run test\n\neslint-plugin-react@3.16.1 test /Users/nkatak1/devr/eslint-plugin-react\nnpm run lint && npm run unit-test\neslint-plugin-react@3.16.1 lint /Users/nkatak1/devr/eslint-plugin-react\neslint ./\neslint-plugin-react@3.16.1 unit-test /Users/nkatak1/devr/eslint-plugin-react\nistanbul cover --dir reports/coverage node_modules/mocha/bin/_mocha tests/*/.js -- --reporter dot\n\n\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024\u2024TypeError: Cannot read property 'visitClass' of undefined\n    at monkeypatch (/Users/nkatak1/devr/eslint-plugin-react/node_modules/babel-eslint/index.js:220:40)\n    at Object.exports.parse (/Users/nkatak1/devr/eslint-plugin-react/node_modules/babel-eslint/index.js:362:5)\n    at parse (/Users/nkatak1/devr/eslint-plugin-react/node_modules/eslint/lib/eslint.js:574:27)\n    at EventEmitter.module.exports.api.verify (/Users/nkatak1/devr/eslint-plugin-react/node_modules/eslint/lib/eslint.js:701:19)\n    at runRuleForItem (/Users/nkatak1/devr/eslint-plugin-react/node_modules/eslint/lib/testers/rule-tester.js:315:38)\n    at testValidTemplate (/Users/nkatak1/devr/eslint-plugin-react/node_modules/eslint/lib/testers/rule-tester.js:333:26)\n    at Context. (/Users/nkatak1/devr/eslint-plugin-react/node_modules/eslint/lib/testers/rule-tester.js:421:25)\n    at callFn (/Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runnable.js:286:21)\n    at Test.Runnable.run (/Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runnable.js:279:7)\n    at Runner.runTest (/Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runner.js:421:10)\n    at /Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runner.js:528:12\n    at next (/Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runner.js:341:14)\n    at /Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runner.js:351:7\n    at next (/Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runner.js:283:14)\n    at Immediate._onImmediate (/Users/nkatak1/devr/eslint-plugin-react/node_modules/mocha/lib/runner.js:319:5)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)\n```\nupon lookup I found that updating eslint-babel dependency fixed the issue. So updated that dependency.\n. just saw in the latest master, this peer dependency has been updated, will revert this change.\n. ",
    "marcodejongh": "We've been using it for a while and I no longer believe that it's very useful to add jsdoc to all props as a rule.\n. We've been using it for a while and I no longer believe that it's very useful to add jsdoc to all props as a rule.\n. ",
    "efkan": "The plugin is right. I guess, it looks for any JSX element to determine React variable usage. In my case there wasn't any JSX element. So the issue has been closed.\n. The plugin is right. I guess, it looks for any JSX element to determine React variable usage. In my case there wasn't any JSX element. So the issue has been closed.\n. ",
    "adrienbrault": "Can this include static properties too ?\n. ",
    "note89": "Lol sorry I was a bit to quick :p\n. Lol sorry I was a bit to quick :p\n. ",
    "Lysholm": "Thanks @yannickcr! Seconding @lukekarrys sentiment, no problems with rc.1 in my two projects. \n. ",
    "diorahman": "Nice!\n. ",
    "acthp": "It's something to do with running from npm. Outside of npm I hit a different error. :-p  I checked the global & node_modules eslint versions, both of which are 0.20.0. Running from npm with this script config:\n\"lint\": \"eslint --no-color js/*.js test/*.js\"\ngives me the error. The input js file doesn't matter. All of them fail in the same way.\nRunning the same command in bash gives a different error, which depends on the input file. Most input files are fine when running from bash.\neslintrc.txt\nstack.txt\n. Upgrade of eslint and eslint-babel resolves it, thanks.\n. ",
    "idan": "@yannickcr herp derp, indeed it is! Closing as duplicate.\n. ",
    "jeff1evesque": "Even though the eslint fails, with the above copied traceback, from my travis ci implementation, doing a manual vagrant up, on my repository:\n- https://github.com/jeff1evesque/machine-learning\nyields a fully functional project (on the master branch).  So, the eslint generates the above errors, even though my react jsx templates, are working as I intend.\n. > For one, React needs to be in scope for jsx to work, and you aren't requiring React in any of those files.\nMy react is working fine.  I did a fresh build off a vagrant up.  All my jsx eventually ends up as minified javascript.  I'm not using require(), if that's what you're wondering.  I'm using es6's import / export.  Nevertheless, I haven't figured out yet, why my travis ci has suddenly broke, with respect to eslint.\n. The following is my eslint.json configuration, used via eslint, within .travis.yml:\njson\n/**\n * eslint.json: this file provides a configuration of rules that eslint will\n *              implement, to validate 'jsx' files, when imported via the\n *              '-c [path/to/eslint.json]' flag.\n *\n * Note: eslint rules, and options are available:\n *\n *       https://github.com/yannickcr/eslint-plugin-react#configuration\n *       http://eslint.org/docs/rules/\n */\n{\n    \"plugins\": [\n        \"react\"\n    ],\n    \"ecmaFeatures\": {\n        \"jsx\": true,\n        \"modules\": true\n    },\n    \"rules\": {\n        \"react/display-name\": 1,\n        \"react/forbid-prop-types\": 1,\n        \"react/jsx-boolean-value\": 1,\n        \"react/jsx-closing-bracket-location\": 1,\n        \"react/jsx-curly-spacing\": 1,\n        \"react/jsx-handler-names\": 1,\n        \"react/jsx-indent-props\": 1,\n        \"react/jsx-key\": 1,\n        \"react/jsx-max-props-per-line\": 1,\n        \"react/jsx-no-bind\": 1,\n        \"react/jsx-no-duplicate-props\": 1,\n        \"react/jsx-no-literals\": 1,\n        \"react/jsx-no-undef\": 1,\n        \"react/jsx-pascal-case\": 1,\n        \"react/jsx-quotes\": 1,\n        \"react/jsx-sort-prop-types\": 1,\n        \"react/jsx-sort-props\": 1,\n        \"react/jsx-uses-react\": 1,\n        \"react/jsx-uses-vars\": 1,\n        \"react/no-danger\": 1,\n        \"react/no-did-mount-set-state\": 1,\n        \"react/no-did-update-set-state\": 1,\n        \"react/no-direct-mutation-state\": 1,\n        \"react/no-multi-comp\": 1,\n        \"react/no-set-state\": 1,\n        \"react/no-unknown-property\": 1,\n        \"react/prefer-es6-class\": 1,\n        \"react/prop-types\": 1,\n        \"react/react-in-jsx-scope\": 1,\n        \"react/require-extension\": 1,\n        \"react/self-closing-comp\": 1,\n        \"react/sort-comp\": 1,\n        \"react/wrap-multilines\": 1\n    }\n}\n. @yannickcr, works, thank you!  I will be implementing your additional suggestion, by installing all my package dependencies, at major versions.\n. ",
    "hybrisCole": "Got the same problem and tried this:\n\"parserOptions\": {\n      \"ecmaVersion\": 7,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n          \"jsx\": true,\n      }\n  },\nDid not want to go with the babel-eslint fix because I'm using react native I think that's an unnecesary extra step to transpile it.\n. Yup that's true hehe, sorry about the misconception.\nHere's my .eslint:\n{\n  \"parserOptions\": {\n      \"ecmaVersion\": 7,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n          \"jsx\": true,\n      }\n  },\n  \"plugins\": [\n    \"react\",\n    \"react-native\"\n  ],\n  \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n  \"rules\": {\n    \"comma-dangle\" : 0,\n    \"react-native/no-unused-styles\": 2,\n    \"react-native/split-platform-components\": 2,\n  },\n  \"settings\": {\n    \"react\": {\n      \"pragma\": \"React\",\n      \"version\": \"0.14.8\"\n    }\n  },\n}\nHere's my package.json:\n{\n  \"name\": \"InternetTent\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"lint\": \"eslint *.js\",\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\"\n  },\n  \"dependencies\": {\n    \"axios\": \"0.9.1\",\n    \"react\": \"0.14.8\",\n    \"react-native\": \"0.23.1\"\n  },\n  \"devDependencies\": {\n    \"eslint\": \"2.7.0\",\n    \"eslint-plugin-react\": \"4.3.0\",\n    \"eslint-plugin-react-native\": \"1.0.0\"\n  }\n}\nSo I'm basically learning React Native and wanted it to add eslint to my project, the code that fails is the tutorial code from React Native:\nimport React, {\n  AppRegistry,\n  Component,\n  Image,\n  StyleSheet,\n  ListView,\n  Text,\n  View\n} from 'react-native';\nimport { get } from 'axios';\nI added \"sourceType\": \"module\", in the .eslintrc and import keyword error stopped happening,\nRegards,\n. ",
    "dhirajg27": "In .eslintrc replace \njson\n\"ecmaFeatures\": {\n    \"jsx\": true,\n    \"modules\": true\n}\nwith \njson\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true,\n      \"modules\": true,\n      \"experimentalObjectRestSpread\": true\n    }. ",
    "xgqfrms-GitHub": "```js\n// redux constants\nexport const PAGE_SIZE = 3;\n// [eslint] Parsing error: The keyword 'export' is reserved\n```\n.eslintrc\njs\n{\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true,\n            \"modules\": true,\n            \"experimentalObjectRestSpread\": true\n        }\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n    \"rules\": {\n        \"comma-dangle\": 0\n    },\n    \"settings\": {\n        \"react\": {\n            \"pragma\": \"React\",\n            \"version\": \"15.4.2\"\n        }\n    }\n}\n. @ljharb\nI just find this place by using google, and it works for me!\nYou know that somebody may also have this problem, so I think it will help by leaving a note.. ",
    "xyzdata": "babel-eslint\nhttps://github.com/eslint/eslint/issues/4636#issuecomment-162910216\n. ",
    "piperchester": "@hybrisCole 's suggestion worked for me - had to restart to Atom to pick up the changes \ud83d\ude05 . ",
    "MikeTheCanuck": "@odm275 can you post your full .eslintrc config file (if any), the specific error that's being thrown, the code that trigger the error and the eslint/eslint-plugin-react versions?  [Heck, a link to the repo in question wouldn't hurt either.]\nI've been using VSCode as my editor for a React project that I originally generated from create-react-app, and I've more or less gotten eslint wrangled into submission.  You can see my setup here if that would help.  It's possible you've installed the ESLint VSCode Extension or similar, which may be part or all of the source of the issue.. ",
    "golinmarq": "I got the same error [eslint] Parsing error: The keyword 'import' is reserved and here it is my .eslintrc. I don't know what could it be\n```json\n{\n  \"plugins\": [\n    \"react\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true,\n      \"modules\": true,\n      \"experimentalObjectRestSpread\": true\n    }\n  },\n  \"env\": {\n    \"es6\": true,\n    \"browser\": true,\n    \"node\": true,\n    \"mocha\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:react/recommended\"\n  ],\n  \"rules\": {\n    \"strict\": [2, \"safe\"],\n    \"no-debugger\": 2,\n    \"brace-style\": [\n      2,\n      \"1tbs\",\n      { \"allowSingleLine\": true }\n    ],\n    \"no-trailing-spaces\": 2,\n    \"keyword-spacing\": 2,\n    \"space-before-function-paren\": [\n      2,\n      \"never\"\n    ],\n    \"spaced-comment\": [2, \"always\"],\n    \"vars-on-top\": 2,\n    \"no-undef\": 2,\n    \"no-undefined\": 2,\n    \"comma-dangle\": [2, \"never\"],\n    \"quotes\": [2, \"single\"],\n    \"semi\": [2, \"always\"],\n    \"guard-for-in\": 2,\n    \"no-eval\": 2,\n    \"no-with\": 2,\n    \"valid-typeof\": 2,\n    \"no-unused-vars\": 2,\n    \"no-continue\": 1,\n    \"no-extra-semi\": 1,\n    \"no-unreachable\": 1,\n    \"no-unused-expressions\": 1,\n    \"no-magic-numbers\": 1,\n    \"max-len\": [1, 80, 4],\n    \"react/prefer-es6-class\": 1\n  }. ",
    "ThaJay": "thank you for this post\n. ",
    "joeytrapp": "Perfect.\n. ",
    "dawncold": "+1\n. ",
    "mmermerkaya": "I know, I just linked the thread because someone working on React provided an example of declaring props using Flow.\nEdit: Apparently the comment you linked to is also written by the same person.\n. ",
    "jamiebuilds": "Should eslint-plugin-react add babel-eslint somehow to people's configs? Seems pretty standard in the React community \n. Why would this be an unidiomatic way of typing props? Other than the fact that props are meant to be read-only you are typing an object that does exist.\n. propTypes is something separate because it lives in value-space and needs to be a separate property name to make sense in JavaScript. Flow is able to merge values from both props and defaultProps fine and is totally idiomatic in terms of how classes work.\nClass property types in Flow with values look like this:\njs\nclass Foo {\n  bar: boolean = true;\n}\n. Seems like you need the ability to differentiate values from types. It seems like it's currently treating both as one in the same which, as you pointed out, is not the case.\njs\nclass Component { props: {...} } // ok\nclass Component { props = {...} } // bad\n. That sounds like a good rule regardless of types\n. To summarize with the exact reasoning:\njs\nimport React from 'react'; // `React` is an object\nimport * as React from 'react'; // `React` is a namespace\nTypes can exist in namespaces, but not in objects.\nYou can also import specific bindings for both JavaScript values and Flow types:\njs\nimport { Component } from 'react';\nimport type { Node } from 'react';\nimport { type Node } from 'react';\nAnd combine them if you want to import both the object and a type:\njs\nimport React, { type Node } from 'react';\n. Because the type parameter signature changes in Flow 0.53 from:\njs\nReact.Component<DefaultProps, Props, State>\nto:\njs\nReact.Component<Props>\n// or \nReact.Component<Props, State>\nThis ESlint plugin could be updated to pull props from:\njs\nReact.Component { props: Props; }\nReact.Component<X, Props, X> {}\nReact.Component<Props, X> {}\nReact.Component<Props> {}\nAnd it will support all versions of Flow. No, in previous versions of Flow, you could only have no args or three args:\n```js\n// Flow <0.53\nclass extends React.Component {}\nclass extends React.Component {}\nclass extends React.Component { props: Props; }\nclass extends React.Component { props: Props; }\n// Flow >=0.53\nclass extends React.Component {}\nclass extends React.Component {}\nclass extends React.Component {}\nclass extends React.Component { props: Props; }\nclass extends React.Component { props: Props; }\nclass extends React.Component { props: Props; }\n```. @ljharb In Flow generics can have a \"bound\":\n```js\nclass Foo {\n  constructor(val: T) { / ... / }\n}\nlet a = new Foo(true); // works\nlet b = new Foo(42); // error\n```\nAdditionally, generics can be used in nested scopes:\njs\nfunction method<T>() {\n  return function(val: T) { /* ... */ }\n}\nSo when you put those together you have:\njs\nfunction higherOrderComponent<Props: { ... }>() {\n  return class extends React.Component<Props> {\n    // ...\n  }\n}\nIt looks like this plugin might not be looking up the type of Props from scope well enough. \nI have a few Babel util packages to help with this:\n\nhttps://github.com/babel-utils/babel-identifiers\nhttps://github.com/babel-utils/babel-flow-identifiers\nhttps://github.com/babel-utils/babel-flow-scope\n\n```js\nimport {getIdentifierKind} from 'babel-identifiers';\nimport {isFlowIdentifier} from 'babel-flow-identifiers';\nimport {findFlowBinding} from 'babel-flow-scope';\nif (getIdentifierKind(path) === 'reference') {\n  let name = path.node.name;\n  let binding;\nif (isFlowIdentifier(path)) {\n    binding = findFlowBinding(path, name);\n  } else {\n    binding = path.scope.getBinding(name);\n  }\n// ...\n}\n```\nHopefully these can help.. ",
    "jomasti": "I believe this was resolved by #1377.. @kaiyoma There hasn't been a release with the rule, and the README reflects master. This is the README for the latest release (7.4.0) where the rule is not listed.. @kaiyoma There hasn't been a release with the rule, and the README reflects master. This is the README for the latest release (7.4.0) where the rule is not listed.. Also, maybe the name of the option should be changed since it's not really just checking imports. It's checking the module scope. moduleOnly or something like that?. It looks like the changes that were introduced for that rule were merged in just after the latest release, so that option won't work just yet.. It looks like the changes that were introduced for that rule were merged in just after the latest release, so that option won't work just yet.. I've updated the code based on the feedback given. I'll squash at the end after everything checks out.. @ljharb It makes sense. Would you expect a test with settings for a lower version? All I can think of would be using the syntax with a lower version and having it not catch the error. It doesn't seem useful, though.. @ljharb It makes sense. Would you expect a test with settings for a lower version? All I can think of would be using the syntax with a lower version and having it not catch the error. It doesn't seem useful, though.. This can happen with the latest version if one imports create-react-class as something other than createReactClass. With the proper setting for createClass, it doesn't trigger the rule.. This can happen with the latest version if one imports create-react-class as something other than createReactClass. With the proper setting for createClass, it doesn't trigger the rule.. There is currently an open issue for 6 (#985). There is currently an open issue for 6 (#985). I think this is good based on the previous feedback, but @ljharb will have to review again.. I think this is good based on the previous feedback, but @ljharb will have to review again.. @ljharb Now that I think about it, this change should just use the current propWrapperFunctions setting instead of a new one since we would want to support the other functions that could be used like forbidExtraProps and whatnot.. @ljharb You may be thinking about my other PR for prefer-exact-props, but for this one (boolean-prop-naming), any function that returns an object should be supported, right? That would be beyond the current implementation of adding a new property (and probably unnecessary currently) (propObjectAssignFunctions).\nAlso, avoiding adding this should make it easy to change the schema of propWrapperFunctions to support your suggested schema in #1547 without having to remove this new setting.. This doesn't seem to be related to this plugin since it's basic Javascript and not using React. Also, you have some syntax errors such as a missing comma after todo: [] and defining the variable incorrectly in your for loop. I would also suggest using code blocks for future issues to make your code samples easier to read.. Okay, I can update the rule to report any usage of this. You mean all usages of this beyond just the typical React usages?. Updated. After a quick investigation, it looks to be an issue with using babel-eslint as the parser. Using the example and the default parser, there is no problem. When using babel-eslint as the parser instead, it hangs.. If you're using a version of the plugin earlier than 7.1.0, you won't have the latest options available for that rule, as well.. If you're wanting to only enforce the rule without worrying about the props:\n\"react/jsx-curly-spacing\": [\"error\", { when: \"always\", attributes: false, children: true }]\nWhen I ran the above on my code base with eslint@7.2.0, it only reports issues with the children. By default, it will ignore the children and check the attributes, so this setting is the opposite.\nIf you want to disallow it for props, then it would be this:\n\"react/jsx-curly-spacing\": [\"error\", { when: \"always\", attributes: { when: \"never\" }, children: true }]\nBut I can see where the rule details documentation can be a bit confusing.. @chrisbutler Yeah, it's not explicit. But the docs do say this: true enables checking for the spacing using the options (default for attributes), so if you want to ignore them, then you need to have it set the value in the config.. Odd. They both work for me. Can you provide your eslint config and an example code snippet that you expect to have an error with the rule?. I created #1535 for tracking the spread property enhancement.. Can you provide an example? I took a quick look at the tests for boolean-prop-naming, and I see some that use props defined in the Flow style. The rule also appears to be checking type annotations. Maybe it is just missing your specific use case.. Can you provide an example? I took a quick look at the tests for boolean-prop-naming, and I see some that use props defined in the Flow style. The rule also appears to be checking type annotations. Maybe it is just missing your specific use case.. Do you think it should be a global setting instead of just an option for the rule? I'm unsure of the other use cases for it being a global setting.. @ljharb Wouldn't these particular \"exact props\" functions still be in propWrapperFunctions in order to facilitate that?. @ljharb Wouldn't these particular \"exact props\" functions still be in propWrapperFunctions in order to facilitate that?. After doing some digging, it looks like the failures on ESLint 3 are due to versions 7.22+ of babel-eslint using eslint-scope over escope if available. This combination of the two results is weird errors for TypeAlias and maybe others. I'm not sure what I should do to rectify this.. > We could modify the dep range, and for eslint 3 in Travis.yml manually downgrade it?\nWould you prefer for the before_script to be extracted to a separate script with this extra logic?. Downgrading to a working version of babel-eslint breaks other tests, so it doesn't seem viable.. Yes, using babel-eslint@7.2.1 with eslint@3 breaks tests that use object spread in type aliases and the short syntax for fragments.. It's looking for the TypeAlias variable in the scope. This works fine on eslint 4 and above because both it and babel-eslint use eslint-scope.. It looks like that default field is only metadata, and it doesn't appear to be actually used when parsing the rule schema. The tests are missing an example with no options. It will indeed not work without passing the rule in the options.. It looks like that default field is only metadata, and it doesn't appear to be actually used when parsing the rule schema. The tests are missing an example with no options. It will indeed not work without passing the rule in the options.. That link is a 404. Could you perhaps paste the source in the issue or produce another link if it is too long?. Are you referencing the README from master when using a version of the plugin before 7.5.0? The values given in the README are correct and reflect the defaults in the rule. I just verified that the configuration works as-is using v7.5.1.. It looks like you have the rule for what you want enabled (function-paren-newline). The option that could report errors for your example is always, but then you have to have line breaks for any use of functions. You may want to consult with the eslint repo to see about any other enhancements to the rule if using always isn't feasible.. That isn't specific to React. However, there is eslint-plugin-jest with the rule valid-expect.. Those rules have not yet been released.. Those rules have not yet been released.. That error isn't reported by this plugin.. A test that would crash before this change is an SFC using destructuring in the parameters.. A test that would crash before this change is an SFC using destructuring in the parameters.. I believe this was fixed in v7.8.0 with #1671. I would suggest upgrading and re-verifying.. > This looks great, but since it will introduce new warnings, it\u2019s a breaking change. Can we hide this new behavior behind an option?\nUpdated. Looks like one of the problems is from #1946 via the change in the logic for isPropTypesUsage to use inLifeCycleMethod.. You're right. I found a way to check for this by using the ModuleScope of the Variable when importing createElement like that. However, it involves using Map, and it doesn't seem like I can get away with that with the project setup.. I'll just temporarily add in a disable comment so I can feel good about pushing it up. I'll remove it after receiving feedback.. I prefer this, so I'll go with it. I was mimicking the findVariable function already there.. I might be misunderstanding, but that is what it returns when I pull it out of the ModuleScope. Wouldn't I need to convert it to an object to use it like one?. Copy and paste. I must have missed that section when I blinked while scrolling.. I was following the tests that were already there. I removed it.. Yeah, I was thinking this could come up when writing it. I'll update.. From what I can see, yes. It's only ever checking properties from the class. Unless there's some other possible node that I'm not aware of for a class.. I'll update this.. The two tests above these are using the defaults.. I think I saw the comment as an intended marking of where the invalid test cases began and that it was in the wrong place. Looking back over it, the comment was actually in the right spot. I'll rebase to put this back.. Well, when I was calling getParentStatelessComponent before the change, it was returning any parent function, which is not what I wanted. So, I updated the function to check that the function is also returning JSX. When I did that with the previous version of isReturningJSX, it would fail on an ArrowFunctionExpression with a body. This caused several tests to fail. After I updated this case to check for the body, it resolved the failures. There may be multiple rules that do that sort of check, but I would prefer the logic to be in one place.. I think the need is up to personal preference. I can change it if that is the standard preference.. Oops. I thought I saw them, but it was childContextTypes. I added tests for contextTypes to this.. I just modified this block from another rule. Should I remove it?. Looks like it was removed in facebook/react#10823, which was released in 16.1.0. It must have been missed when making the release notes.. Wrong rule name. It's a by-product of checking map. Considering this request and your concern above, should I remove the map support for now with it being added later as an enhancement?. It doesn't have to do with the JSX being returned in map. The reason it's being caught now is because isReturningJSX wasn't considering functions with return statements that are calling Array#map. So, in order to have this test case have an error, it required the same change that was made to check for returning Array#map in a component class method.. Okay, so in order to still support the Array#map support for this rule, you want me to find a solution that makes it work while also not resolving the issue with that particular test case?. Indeed. I'll update.. It wasn't all one line before, but I can update it to be one line.. There's probably a better name for this.. Should they? Would this break anything for people on earlier versions?. Should the similar function of isReactCreateElement also be using the pragma setting then?. This wouldn't show any warnings related to the features. It only improves the detection of components using them. So, if they aren't use the features, nothing happens, right? But I could see the case for not running the check on earlier versions.. Cool, that makes sense.. Sounds good. This and the next test case were what I could find that would reproduce the error. It seems like weird usages, but it won't error out.. Agreed!. ",
    "straku": "I'm using syntax mentioned by @neverfox very often and it would be extremely useful if jsx-indent and jsx-indent-props rules worked correctly with it.\n. This example:\njsx\n(condition)\n  ? <Comp\n      foo={x}\n      bar={y}\n    >\n      <ChildrenComponent />\n    </Comp>\n  : <AnotherComp />\nbreaks 3 rules: jsx-indent, jsx-indent-props and jsx-closing-bracket-location. @lencioni how would you like to enforce this and potentially other styles across all 3 rules? Wouldn't it be better to simply allow mentioned style in existing rules?\n. @lencioni You were saying that you would like to enforce different styles by an option. It certainly would be nice to have that option but I am wondering how would you like to do it when this style of writing ternary expressions breaks more than one rule? The same option for each rule? Some global config?\nSorry if my comment sounded like criticizing, just wanted to know what would be the best way of doing it.\n. ",
    "bryce-larson": "I am also using something similar to @neverfox, would love to see support for the following for jsx-indent-props\nInstead of \njsx\nreturn colHidden\n      ? <span\n        className=\"hidden\">\n      </span>\n      : <span\n        className=\"shown\"\n        ref=\"myCol\">\n        <span>foo</span>\n      </span>;\nShould be\n``` jsx\n    return colHidden\n      ? \n\n      : \nfoo\n;\n```\n. ",
    "tuures": "there's also another related issue that also has to do with jsx-closing-bracket-location.\nWith:\n\"react/jsx-indent\": [1, 2],\n\"react/jsx-indent-props\": [1, 2],\n\"react/jsx-closing-bracket-location\": [1, {selfClosing: \"tag-aligned\", nonEmpty: \"tag-aligned\"}],\nI think this should be valid (with one prop):\n<Layout head={\n  <HeadContent/>\n}> // error here, eslint does not allow the closing brace to be part of closing bracket when opening brace is part of opening bracket\n  <MainContent/>\n</Layout>\nbut eslint expects:\n```\n\n  }\n\n\n\n```\n. Anything that would help to close this PR? :)\n. I mostly agree with the examples above. However I think it should also be possible to configure following to be valid which is no longer possible with the change (e2f72f1):\n\n``` jsx\n// I want to write:\n\n  child\n\n// eslint wants:\n<Comp flag={true} style={{\n  color: 'blue'\n  }}\n\nchild\n\n\n// I agree should not be valid:\n\n  child\n\n```\nI like to follow the rule that opening braces that are on the same line should have their corresponding closing braces on the same line. non-JSX analogy:\n``` js\n// good:\n_.forEach(list, l => ({\n  prop: l.prop\n}));\n// not so good:\n_.forEach(list, l => ({\n  prop: l.prop\n  })\n);\n```\n. ",
    "alexfedoseev": "I use it this way:\njs\nisSomething\n? <SomeComponent />\n: <AnotherComponent\n    className={css.component}\n    onSomething={props.doSomething}\n  />\nAnd it fails w/o:\njs\n/* eslint react/jsx-indent-props: 0, react/jsx-closing-bracket-location: 0 */\n. @ljharb I'd be sure it is, if there wasn't this in the doc:\n\n. ",
    "tvervest": "I have to say I agree with the indenting as described by @goffreder. The ternary operator is indented by one level and the values are either a single line or contained within parenthesis where the content is indented (again) and the closing parenthesis is on the same level as the operator;\nisSomething\n  ? (\n    <MyComponent>\n      <WithAChild />\n    </MyComponent>\n  )\n  : <SomethingElse>\nTo me it just feels the most natural as the operators are indented in a way that's similar to chained methods and the parenthesis indentation is similar to the indentation of curly brackets for control statements. The parenthesis are purely used to indicate scope for multi-lined elements and make it easier to determine where the current part of the operator ends. This is also why I think the brackets should close on the same indentation as the matching question mark or colon, as you can spot the next part of the ternary operator in a glance when reading the code. Obviously, if the element (or statement) is only a single line the parenthesis can be left out.\nBut that's just my humble opinion :)\n. ",
    "martin-cech": "Hello, +1 for supporting\ncondition\n  ? <Foo>\n      <Bar />\n    </Foo>\n  : <Baz />\nif possible :-)\n. ",
    "sassanh": "Currently --fix doesn't indent ternary operators at all, look at this for example (I made all lines have no indentation at all, then ran eslint --fix on the file, it's a big file and no ternary operator is indented):\nconst previousDialog = previousLocation\n? (\npreviousLocation.hash.dialog ||\npreviousLocation.query.dialog\n)\n: undefined;\n        const currentDialog = (\ncurrentLocation.hash.dialog ||\ncurrentLocation.query.dialog\n);\n. @aij great, looking forward for the new version.. Is it released to npm? How can we use it?\n. That was fast. Thanks.\n. Trying to prepare eslintrc files I found out the problem is related to eslint-plugin-babel. Sorry for taking your time one this. Closing.\n. ",
    "aij": "@sassanh If I understand correctly, eslint's built in indent option should handle plain JS indentation. It's undergoing a rewrite which should fix the holes in the current version.\nThere's a lot of things like ternary operators that the current version will simply leave as is, which is awful when everything around it gets re-indented...\n. > programmer's [...] shouldn't [...] I'd [...] wouldn't\n@ljharb Which direction are you  claiming those ' should be curled?. @oliverjam It's not just null. An undefined value prop also won't be replaced by the default, which can be especially confusing to talk about. The default props are only used when the prop is absent.\nFor your example Thing component, quantities should be marked required, because it is required, and rendering it as <Thing/> is still fine because the required prop is being supplied via defaultProps.. @oliverjam It's not just null. An undefined value prop also won't be replaced by the default, which can be especially confusing to talk about. The default props are only used when the prop is absent.\nFor your example Thing component, quantities should be marked required, because it is required, and rendering it as <Thing/> is still fine because the required prop is being supplied via defaultProps.. @ljharb Huh, I've definitely been bitten by that in the past, but trying it again now defaultProps are being used even when undefined is explicitly passed.\nI wonder if that changed at some point (possibly since the React 0.14 days), or if we had some weird tooling issue.\nAnyway, good to know React does the proper thing (now). :smile: . @ljharb Huh, I've definitely been bitten by that in the past, but trying it again now defaultProps are being used even when undefined is explicitly passed.\nI wonder if that changed at some point (possibly since the React 0.14 days), or if we had some weird tooling issue.\nAnyway, good to know React does the proper thing (now). :smile: . ",
    "fab1an": "Eslint 4 broke this somehow. I'm not even able to turn of the rule for some weird reason.\nI have:\n\"react/jsx-closing-bracket-location\": 0 in my .eslintrc.json and it keeps getting applied and throwing errors.. @lencioni Doesn't support my editor TextMate, unfortunately.\n. There is already a plugin doing auto-import, but it doesn't work with JSX: https://github.com/kriszyp/eslint-plugin-auto-import\n. @lencioni Thank you, but not necessary. I've written my share of TextMate plugins and this fix works for me. Maybe the functionality would be better added in the auto-import plugin anyway, so I've opened an issue there: https://github.com/kriszyp/eslint-plugin-auto-import/issues/2\n. ",
    "yuritoledo": "Any success?. +1. The correct, (IMO) in this case:\njs \nconst Foo1 = cond\n  ? <div\n    className={a}\n    onClick={b}\n  />\n  : null;\nShould be:\njs\nconst Foo1 = cond\n  ? <div\n        className={a}\n        onClick={b}\n     />\n  : null;. ",
    "seekshiva": "Thanks\n. ",
    "thaggie": "OK, I've worked out that I need to used the recommended config for this to work, it took me the longest time to even see the recommended config part of the readme.\nI've created a PR editing the readme file, I think it's important for people to see to get up and running quickly.\nThe rule that fixes this is:\n\"react/jsx-uses-vars\": 2\n. Done\n. ",
    "mvolkmann": "Can I get more detail on the configuration needed in .eslintrc to get this to work? I think I've done everything recommended above, but I still get the \"is defined but never used\" error from ESLint for variables only used in JSX.\n. Thanks! I was editing the wrong .eslintrc file. This article shows all the required settings.\nhttps://medium.com/@dan_abramov/lint-like-it-s-2015-6987d44c5b48#.3rxexe619\n. Ah yes. I should have caught that. Thanks for the info!\nI created this pull request:\nhttps://github.com/yannickcr/eslint-plugin-react/pull/788\n. ",
    "stoplion": "```\n1:1   error  Definition for rule 'jsx-uses-vars' was not found       jsx-uses-vars\n1:1   error  Definition for rule 'jsx-uses-react' was not found      jsx-uses-react\n1:1   error  Definition for rule 'react-in-jsx-scope' was not found  react-in-jsx-scope\n```\nin devDependencies...\n\"eslint\": \"3.2.2\",\n\"eslint-plugin-react\": \"^6.0.0\",\nremoved jsx-uses-react, jsx-uses-vars and react-in-jsx-scope \nand it works now..\n?\n. ",
    "0rvar": "Like you suggested, the issue was that I had a global eslint installed that was used instead of the local one. Works now. Thanks!\n. ",
    "alex-tan": "Nevermind, looks like this is a convention in the documentation. Submitted this because I was getting this error when copying and pasting:\nDefinition for rule 'jsx-curly-spacing' was not found  jsx-curly-spacing\n. ",
    "sstur": "Wow, so much fix. So many speed. Thanks @yannickcr!\n. ",
    "rosskevin": "I'm seeing this issue with 5.1.1 as not fixed or my configuration is wrong. \n- Full Repo\n- Specific file\nHere's my eslintrc:\njson\n{\n  \"parser\"  : \"babel-eslint\",\n  \"extends\" : [\n    \"standard\",\n    \"standard-react\"\n  ],\n  \"env\"     : {\n    \"browser\" : true\n  },\n  \"globals\" : {\n    \"__DEV__\"      : false,\n    \"__PROD__\"     : false,\n    \"__DEBUG__\"    : false,\n    \"__COVERAGE__\" : false,\n    \"__BASENAME__\" : false\n  },\n  \"rules\": {\n  }\n}\nbash\n/Users/kross/projects/my-relay-starter-kit/src/App.js\n  83:13  error  'routes' is missing in props validation   react/prop-types\n  83:21  error  'history' is missing in props validation  react/prop-types\nbash\n~/p/my-relay-starter-kit \u276f\u276f\u276f npm ls eslint-plugin-react                                                                                                                                                                                                                                                                                           \u23ce master \u272d \u2731 \u25fc\nmy-relay-starter-kit@0.0.1 /Users/kross/projects/my-relay-starter-kit\n\u2514\u2500\u2500 eslint-plugin-react@5.1.1\nDo you spot anything I'm doing to misconfigure this?\n. FYI - My issue was a bug with flow (nothing with this plugin!): https://github.com/facebook/flow/issues/1908\n. This should be reopened, still a problem with the same stack on version 7.0.1.  I'll see if I can add a test PR that demonstrates it, I suspect it is due to the use of $Exact<> or shorthand {||}.\nCannot read property 'type' of undefined\nTypeError: Cannot read property 'type' of undefined\n    at buildTypeAnnotationDeclarationTypes (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:452:25)\n    at /Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:464:54\n    at iterateProperties (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:333:11)\n    at buildTypeAnnotationDeclarationTypes (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:463:11)\n    at /Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:686:38\n    at iterateProperties (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:333:11)\n    at markPropTypesAsDeclared (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:681:11)\n    at Object.ClassProperty (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/rules/prop-types.js:833:11)\n    at Linter.updatedRuleInstructions.(anonymous function) (/Users/kross/projects/ui/node_modules/eslint-plugin-react/lib/util/Components.js:621:75)\n    at emitOne (events.js:101:20)\n    at Linter.emit (events.js:191:7)\nerror Command failed with exit code 1.\n~/p/ui \u276f\u276f\u276f yarn list eslint-plugin-react                                                                                                                                                                                        \u23ce develop \u272d \u2731\nyarn list v0.24.6\n\u2514\u2500 eslint-plugin-react@7.0.1\n\u2728  Done in 1.83s. I've reproduced, it is the same thing I've found with flow plugins: I am spreading a type imported from a libdef (like flow-typed) and it is unresolved, therefore there are no children from the imported shape:\n\n. I think this is the same, but at least is another good test case:\n```javascript\nimport AutoComplete from '../rfmui/AutoComplete'\nimport type {ElementProps} from 'react'\ntype AutoCompleteProps = ElementProps\n```. Perhaps this project should use eslint to enforce these trivialities?. ",
    "Gpx": ":+1: \n. ",
    "Erid": "Thanks for the info :+1:.\n. ",
    "smaye81": "I am still seeing false positives with the following syntax.  Not sure what I'm missing.  This is with v4.1.0 and eslint v2.2.0.\n```\nimport React, { PropTypes } from 'react';\nimport {\n    ProgressBar\n} from 'react-bootstrap';\nconst TableProgressBar = React.createClass({\nrender () {\n    return (\n        <tr className=\"table-progress-bar\">\n            <td colSpan=\"5\">\n                <ProgressBar active now={100} />\n                <p>{this.props.message}</p>\n            </td>\n        </tr>\n    )\n}\n\n});\nTableProgressBar.propTypes = {\n    message: PropTypes.string\n};\nexport default TableProgressBar\n```\nAnd this is the message I see:\n13:36  error  'message' is missing in props validation  react/prop-types\n. So it looks like this might not be supported syntax according to this:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md\nLooks like the Component.propTypes = ... is only supported with stateless functional components, but not with React.createClass.  I sorta feel like it should be though.  Thoughts?  If so, I can create a PR\n. No, you don't have to do it that way.  My entire app is structured like my example above and it works fine.  \nI think this prop-types rule is a great rule and I want to be able to apply it without restructuring every component in my application.\n. React.createClass is not deprecated nor can I find anywhere that says this syntax is discouraged. But no worries. I'll refactor to adhere to the supported syntax. \n. ",
    "markwain": "If I am not wrong render is just normal function-method. According to Ecma-spec all variables or function declaration within the function are special internal properties of the object Lexical Environment, which is created when it starts. So as I understood anyway when the function render get called all functions inside it will be re-assigned to lexical environment object. Or there is in V8 performance improve about what I don't aware of?\n. > The \"lexical environment\" of a function stops at its containing function, so in fact a function created inside render is always recreated every time render calls - without exception.\nYep, that's what I meant.\nSo where is the difference between.\n<div onClick={() => console.log('Hello!'))}></div>\nand\n<div onClick={ function(){ return console.log('Hello!')} }></div>\nBecause anyway that function is recreated every time render calls\n. @ljharb \n\nin both of those cases, a new function is indeed created. Both cases should be avoided.\n\nSo it seems logically that jsx-no-bind rule has to be changed because there is no sense to warn only about arrow function. I think there should be new rule for warning about possibility of performance regarding issues related to function which has been declared in render.\n. @ljharb yep, exactly\n@yannickcr Can it be implemented?\n. @yannickcr \n\nYes, it would be more clear and catch more edge cases than the current rule.\n\nSo does it mean, that you will make this new rule? \n. ",
    "linclark": "\ni agree tho perhaps it makes more sense to create a new rule jsx-no-new-function-props-in-render that subsumes this rule, and includes creation of any functions in the render path.\n\nI need this for work so could take it on. But before I start, is anyone else currently working on it?\n@tcoopman You can read more about this problem in React.js pure render performance anti-pattern under Functions create identities too.\n. ",
    "dounan": "At Flexport we ran into performance issues with inline functions causing our pure components to wastefully re-render. Instead of forcing developers to not use arrow functions, we created new library, reflective-bind, that lets you keep your inline functions without wasteful re-renders. For one of our more complex forms, using reflective-bind reduced the wasted render time from 175ms to 18ms. \ud83c\udf89\nYou can read more about it here:\nhttps://flexport.engineering/ending-the-debate-on-inline-functions-in-react-8c03fabd144. Thanks for the quick response!\nSeems like class properties are encouraged by the React team, since their class.js codemod generates them by default:\nhttps://github.com/reactjs/react-codemod/blob/master/transforms/class.js#L944\nCan you elaborate why a manually bound class method is more correct and performant?. Thanks for the quick response!\nSeems like class properties are encouraged by the React team, since their class.js codemod generates them by default:\nhttps://github.com/reactjs/react-codemod/blob/master/transforms/class.js#L944\nCan you elaborate why a manually bound class method is more correct and performant?. > Basically, instead of creating N functions, one for each instance\nThat makes sense. I can see how if you used class properties for all methods, it would be less performant. But manually binding in the constructor, then setting it as a property on the instance does the same thing, so in those cases there would be no performance benefit.\n\nThat's unfortunate, but \"encouraged by the React team\" doesn't mean they're right\n\nAgreed, but I'm working with a pretty large codebase, and if the codemod has already added all these class properties, I don't know if it is worth the effort to encourage the engineering team to manually fix everything.\nWe have a need for the custom component class, so we can't get rid of that. But the argument spreading can be removed in most cases I think. The other option would be to disable the display-name lint rules in the symptomatic files, but that doesn't feel right.\nI can take a stab at putting together a PR that fixes this edge-case. Do you think that would be worthwhile?. > Basically, instead of creating N functions, one for each instance\nThat makes sense. I can see how if you used class properties for all methods, it would be less performant. But manually binding in the constructor, then setting it as a property on the instance does the same thing, so in those cases there would be no performance benefit.\n\nThat's unfortunate, but \"encouraged by the React team\" doesn't mean they're right\n\nAgreed, but I'm working with a pretty large codebase, and if the codemod has already added all these class properties, I don't know if it is worth the effort to encourage the engineering team to manually fix everything.\nWe have a need for the custom component class, so we can't get rid of that. But the argument spreading can be removed in most cases I think. The other option would be to disable the display-name lint rules in the symptomatic files, but that doesn't feel right.\nI can take a stab at putting together a PR that fixes this edge-case. Do you think that would be worthwhile?. This is an aside, but...\n\nsubrender is a function that returns JSX, so in general, that's a component\n\nI typically agree with this, but there are certain cases where the subrender function does a few conditional checks before rendering something simple. For example:\nrenderIcon() {\n  if (this.props.item.done) {\n    return <span className=\"check\" />;\n  } else if (this.props.item.urgent) {\n    return <span className=\"urgent\" />\n  } else {\n    return null;\n  }\n}\nWould you consider that a valid use-case for a subrender function? Thanks :). This is an aside, but...\n\nsubrender is a function that returns JSX, so in general, that's a component\n\nI typically agree with this, but there are certain cases where the subrender function does a few conditional checks before rendering something simple. For example:\nrenderIcon() {\n  if (this.props.item.done) {\n    return <span className=\"check\" />;\n  } else if (this.props.item.urgent) {\n    return <span className=\"urgent\" />\n  } else {\n    return null;\n  }\n}\nWould you consider that a valid use-case for a subrender function? Thanks :). I dug into this a bit more out of curiosity, and it seems like that the getJSDocComment was not returning the /** @extends React.Component */ comment when the argument spreading operator is there. This is because the leadingComments field of the ClassDeclaration node is not there when the argument spreading syntax is used.\nhttps://github.com/eslint/eslint/blob/v3.17.1/lib/util/source-code.js#L258\nWe're currently on:\neslint 3.17.1\nbabel-eslint 7.1.1\nThis PR seems to have changed the getJSDocComment behavior:\nhttps://github.com/eslint/eslint/pull/7516\nI didn't dig into the PR, so I'm not sure if that will resolve this issue. Hopefully a later version of eslint or babel-eslint will fix this. Thanks again for your help @ljharb!. I dug into this a bit more out of curiosity, and it seems like that the getJSDocComment was not returning the /** @extends React.Component */ comment when the argument spreading operator is there. This is because the leadingComments field of the ClassDeclaration node is not there when the argument spreading syntax is used.\nhttps://github.com/eslint/eslint/blob/v3.17.1/lib/util/source-code.js#L258\nWe're currently on:\neslint 3.17.1\nbabel-eslint 7.1.1\nThis PR seems to have changed the getJSDocComment behavior:\nhttps://github.com/eslint/eslint/pull/7516\nI didn't dig into the PR, so I'm not sure if that will resolve this issue. Hopefully a later version of eslint or babel-eslint will fix this. Thanks again for your help @ljharb!. Ah, I missed that. The error goes away if the type is removed.\nsubrender = (...args) => { works. Ah, I missed that. The error goes away if the type is removed.\nsubrender = (...args) => { works. Not sure if this is related, but using ASTExplorer shows that the flow parser puts the comments in a different part of the AST (not as a leadingComments prop):\n\n. Not sure if this is related, but using ASTExplorer shows that the flow parser puts the comments in a different part of the AST (not as a leadingComments prop):\n\n. Yep, I'll investigate a bit more when I get some more time. Thanks again for your help!. Yep, I'll investigate a bit more when I get some more time. Thanks again for your help!. ",
    "iilei": "@ljharb I assume  const foo = this.whatever.bind(this); resides outside of the return block in jsx, right? I don't think that is related\n. I see ... @petersendidit :+1: \n. ",
    "nuschk": "Is this being considered? Seems a bit far-reaching for a linter, no?\n. Seems very plausible, thanks for the explanation. \nDo you guys have other strategies for preventing re-typing proptypes then? Specifically, in our code, there are many redux-form components, which always use the same 8 to 10 props, which are injected by a decorator. While perfectly doable, it is a bit tedious to repeat them for every form.\n. ",
    "kumar303": "One solution is to use Flow instead of PropType (it's a lot of work to switch though). Flow lets you import type objects so that the definitions can be re-used.\n. One solution is to use Flow instead of PropType (it's a lot of work to switch though). Flow lets you import type objects so that the definitions can be re-used.\n. Flow supports the import statement for types. You can pass around type \"objects\" just like any other JavaScript object. Being able to import a custom type is useful for sharing it among many different functions. Here's an example of how I've used it -- this isn't React code though.\n. Flow supports the import statement for types. You can pass around type \"objects\" just like any other JavaScript object. Being able to import a custom type is useful for sharing it among many different functions. Here's an example of how I've used it -- this isn't React code though.\n. It would be challenging in CommonJS but ES6 imports were designed specifically to support static analysis.\nThere are a couple eslint examples for how to follow imports. Here is one.\n. It would be challenging in CommonJS but ES6 imports were designed specifically to support static analysis.\nThere are a couple eslint examples for how to follow imports. Here is one.\n. ",
    "eteeselink": "I hacked (and I mean hacked) this by taking eslint-plugin-react's prop-types rule and replacing a bunch of strings in it. If you're in a rush: https://github.com/eteeselink/eslint-plugin-react-context\n@yannickcr I'd be happy to contribute this back. My idea is to make prop-types.js parameterized, i.e. remame it to prop-or-context-types.js and wrap the existing code in a function. Two new files just call the function a la\nmodule.exports = require('./prop-or-context-types')('props','propTypes',/^props\\s*(\\.|\\[)/);\nDo you like this approach?\n. @ahutchings Thanks for getting in touch! In fact, i've found react-context to be pretty bad in practice, and I totally forgot to notify you guys here - sorry! That's not very nice of me.\nBesides functional stateless components, there were a whole bunch of problems it wouldn't catch, and creating a more useful plugin than the search/replace hack I made turned out to cost time I didn't have at the time.\nMy recommendation: ignore my fork. If we're going to do contextTypes validation with eslint, we need a better approach.\n. ",
    "ahutchings": "@eteeselink Not sure if you're interested in bug reports on the react-context plugin at this point, but in my testing is is mis-reporting props for functional stateless components as missing in context validation. Otherwise it seems to be working fine for classes and createClass.\n. ",
    "LeoIannacone": "Hi guys, any news about this? . ",
    "alexzherdev": "Hmm, this should almost be trivial now by parameterizing prop types detection with the names for props -> context, propTypes -> contextTypes? Assuming old context lives long enough for this rule to pay for itself \ud83d\ude04 . I think this should work now: https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/forbid-prop-types.js#L794. I think this should work now: https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/forbid-prop-types.js#L794. Added in #1509.. Closed via #681?. I've looked at the history of jsx-pascal-case, and I think it used to do something similar to what is suggested, but stopped doing it here: #329 \nThat issue has the example of a \"label\" variable, which, being an HTML element name, would be addressed by the whitelist, but there was also an SVG example. I'm not that familiar with SVG, but I guess it also has a limited set of element names, so hypothetically those could be included in the whitelist as well.\nThe commit that closed that issue went a different way. It added the /^[a-z]|-/ regex to rule out web components with a dash, and anything starting with a lowercase letter. I'm thinking over what would happen if we reverted that logic and replaced it with a whitelist of known names as proposed.\nIf found <lowerCaseFirstLetter />:\na) it's in the whitelist (div, i, use, path etc.) => ok\nb) it's not in the whitelist =>\nb.1) there is a corresponding variable in scope => warn\nb.2) there's no variable => you're probably using a web component => ok\n. According to these test cases, :: is now supported.. I think button-has-type plus #890 address both of these.. Fixed in #1013 ?. Fixed in #886?. Fixed in #886?. I think this has been achieved in boolean-prop-naming via #1264.. Fixed via #1084.. Looks like this is already in the docs via https://github.com/yannickcr/eslint-plugin-react/pull/1070/files#diff-682c810c832cf33406eede243921fd42. I think this can be closed (via #1349). I have a PR upcoming that deduplicates propType usage detection from prop-types and no-unused-prop-types https://github.com/alexzherdev/eslint-plugin-react/commit/348021f4fbfae9c39de6ed7f77ef6395d7916e6f (bringing them both down to < 200 lines compared to 1100+ lines originally \ud83e\udd17). If that were landed first, then both rules would benefit from this improvement.. This looks like a duplicate to #1259. This also depends on Babel 7, right?. So if we have a setting for the name of the fragment tag (i.e. Fragment vs React.Fragment), then this rule could potentially even be autofixable? Otherwise it wouldn't be safe to fix <Fragment> to <>; and in the reverse direction we wouldn't know whether to fix <> to be <React.Fragment> or <Fragment>.. So the pragma would only be used when we prefer the shorthand syntax, and be a no-op otherwise? Would that be intuitive if a team decides to switch from one style to the other?\nOTOH, setting the pragma to Fragment doesn't mean you can blanket-fix every <> without making sure that every file has a corresponding import or something. (and it would probably be pretty hard to reliably autofix that). Hmm, ok. I\u2019m still trying to understand. I was thinking of the pragma as a way for the user to customize their preferred usage of\njsx\n<React.Fragment>\nvs\njsx\nimport React, { Fragment } from 'react';\n<Fragment>\nSetting it to Fragment would mean that it\u2019s safe to assume <Fragment> to refer to React Fragment, not some user-defined component.\nIf it\u2019s always equal to just Fragment, how would we handle the second form in the \u201calways\u201d case? Or would we just ignore it?. Of course - that was a simplified example, I fixed it. My point is that there\u2019s at least two ways you could refer to <React.Fragment>.. > I think that we probably need a shared way of getting all propTypes of a component; that way should handle in-file spreading of other object literals; and that would address this bug.\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1674#issuecomment-362729395\nFWIW I've been thinking about this comment in the background for some time, I think this could be a huge improvement.\nI feel like this can be handled in a similar way to how Components.detect() works, by defining certain hooks and \"mixing\" them into the rules, which would then read components.list() and make use of the accumulated data in their own Program:exit. Although not sure if adding all of this functionality to Components.js would bloat it too much.. I'll see if I can reproduce this \ud83d\udc4d . I'll see if I can reproduce this \ud83d\udc4d . I have a fix coming up for this, but that depends on #1827 to be merged.\nI have one question though. I think the four commented out tests are really just two test cases which run with and without babel-eslint. Is that necessary in the case of createClass? I understood this comment to mean \"one test for static properties with babel-eslint and one test for regular Component.propTypes = ... without babel-eslint\". Do we need to also run non-babel-eslint tests with babel-eslint?. Ok, I have this ready. And it looks like #1827 is good to go, so I'll create a PR after that's done.. I'm wondering - in the parent component that provides the function prop, that function would normally be already bound somehow, right? Even if it's via an arrow function, but ideally with bind.\njs\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n  handleLogin() { this.blah(); }\n  render() {\n    return <Child login={this.handleLogin} />;\n  }\n}\nIf that's the case, then this.props would never be passed as this, would it?\nFWIW that's the reason I've never seen this issue occur in my code, even though I don't always destructure function props before calling.. I've looked into this, but I'm unable to reproduce with the following test case (which produces no errors):\njsx\nimport { validator } from 'validators';\nfunction MyComponent(props) { return (<div>{props.myProp}</div>) }\nMyComponent.propTypes = {\n  myProp: validator.isRequired\n};\n. I've looked into this, and it seems like the error had been dealt with in #1669. That PR doesn't have any resolution logic though.. FWIW I have a PR open in #1829.. @ljharb I noticed this is the last (?) item blocking eslint 5 support in airbnb/javascript. I can take a break from my prop-types work and try to handle this. My understanding is that two options are necessary:\n- allowPlainTextOnly that would leave <Text>Plain text and nothing else</Text> as is;\n- allowSingleChild that would leave <Text><OnlyOneChildHere></Text> as is.\nIs that right? Also, would allowSingleChild only apply for a single JSX element inside, or plain text as well, i.e. is the second option a superset of the first one?. allow sounds good.\nThe following would also qualify as non-element children, which I don't think an option called text is expected to touch though?\njsx\n<Text>{foo && <Bar />}</Text>\nA JSXExpressionContainer could contain a lot of different content. I was assuming a single JSXExpressionContainer to qualify for single-child rather than text.. I think a single Literal or JSXText as a child should fit.. Hmm let's say we allow: 'literal'. What about the following case:\njsx\n<Text>foo\n</Text>\nShould that still warn? Same for single-child with a non-literal child.\nIn other words, should the option only take effect if the single child is on the same line as both opening and closing tags?. Curious why setState is undesirable in a PureComponent?. But docs and source code mention state comparison as well \ud83e\udd14 \nhttps://reactjs.org/docs/react-api.html#reactpurecomponent\nhttps://github.com/facebook/react/blob/4fe6eec15bc69737910e5c6c749ebc6187d67be0/packages/react-reconciler/src/ReactFiberClassComponent.js#L259-L263. @ljharb genuinely curious, isn't constructor-binding instance methods achieving basically the same result as arrow functions on class fields? (which is, we still end up with a function attached to the instance as opposed to the prototype). Rebased and added test outputs for the fixer that was added recently.. @ljharb I think these two cases are what you're looking for? I don't think these need babel-eslint so I'll remove it.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/2a674b03b620791f724ebd6538916524a0e58efb/tests/lib/rules/no-typos.js#L926-L950. I'm working on the first part of it now. Do we also want to copy the tests? If there is a bug in the rule before next semver-major, will we be fixing it in two places and adding tests to two files then?. I'm working on the first part of it now. Do we also want to copy the tests? If there is a bug in the rule before next semver-major, will we be fixing it in two places and adding tests to two files then?. @ljharb I'm assuming this should only turn on under react 16.3 or higher?. @ljharb I'm assuming this should only turn on under react 16.3 or higher?. Ah, thanks!. Ah, thanks!. I added a test case for the code in the issue description and it passed. I'm assuming this would be equivalent to having the indent rule turned off \ud83e\udd14 Perhaps the issue has been fixed since 7.7.0?. Wasn't able to reproduce this on 7.9.1 or latest master \ud83e\udd14. Wasn't able to reproduce this on 7.9.1 or latest master \ud83e\udd14. I think I got the \"detect\" option to work. I found something I didn't expect though: when extending airbnb's config (as opposed to the recommended config from the plugin), there is a version there in context.settings even if you don't set it in .eslintrc. I believe it comes from here https://github.com/airbnb/javascript/blob/02b4eea3452b0ae6da666b01f9da23f26148f5b6/packages/eslint-config-airbnb/rules/react.js#L464\nIs this intended? I found this surprising and non-obvious \ud83e\udd14 . Oh. Is this just the version used at Airbnb?\n@ljharb you mentioned elsewhere you would make not specifying the version throw. But then (correct me if I'm wrong) if most of plugin's users use it via extending airbnb, they would never observe that because of this implicit (for them) setting.. Isn't this the same as #1775 ?. ~Looks like I need to fix #1817 to improve coverage.~\n~Edit: done~. Just rebased to resolve conflicts. I think this is already taken care of by a combination of no-deprecated and react version setting (e.g.  https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-deprecated.js#L232). I think this is already taken care of by a combination of no-deprecated and react version setting (e.g.  https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-deprecated.js#L232). I think the title here is incorrect - the error message in the OP refers to require-default-props.\nAnyway, the fix for this is coming \ud83d\ude04 . @ljharb I think the error on travis is some kind of flakiness. @ljharb I think the error on travis is some kind of flakiness. Perhaps that example is meant to say not defaultProps but propTypes?. Oh yeah, a new rule (if we go that way) would have a different name.. Removed jsx prefix, added createElement support and controls for arrays/objects. Oh, for sure, this name leaves much to be desired. I guess this is more no-object-or-array-literals-in-props but that's quite a mouthful \ud83d\ude10 Although not really more than no-redundant-should-component-update \ud83d\ude04 . Generally speaking both of these make sense.\nFor your first point, FWIW, the use case I'm thinking of is a reusable component library that has a \"showcase\" website with the examples for those components (I'm sure you've seen those in the wild). So at this point you're not yet looking at / familiar with the source code per se, you just get a \"visual\" overview of what the components are and what their API looks like.\nIn the context of an application though, yeah, I don't usually feel the need to add comments like that for this very reason: components/props usually turn out self-documenting for when you're reading the code.\nFor the second point, I guess it's supposed to be compatible with the syntax of jsdoc, but probably not the generator part of it \ud83d\ude15 \nAnyway, just wanted to check here first as I may need this for internal use. I saw that react-docgen is under the reactjs github org so I thought maybe this could be helpful to others. Feel free to close this then, sorry for the churn \ud83d\udc4d . Sounds good \ud83d\udc4d \nAlthough I'm curious, what would be the use case for not allowing functions at all?. Ok, I'll have to do my research \ud83d\ude03 But immediately, forbid would not even allow a children prop, I'm just not sure how that is different from e.g. onClick={() => {}} (which I know the downsides of, but that's already handled by a different rule). Ok, I don't think I'm on the same page. Let me go over it once again.\nCurrent rule: children prop is a warning no matter what.\nMy PR:\n  - allowFunctions: false (or not specified): no change to current rule\n  - allowFunctions: true: functions in the children prop are not a warning. Functions in the child position are a warning - isn't that what you were going for originally?\nAnd then extending that, the enum would be the 4 possible combinations of either allowing or forbidding functions in a prop or in the child position. Not specifying the enum value retain the current behaviour of the rule, which would be equal to the child option: functions are allowed in the child position but not as a prop. prop would be what allowFunctions: true does in my PR.. But don't they already have it via the current rule. As soon as you do children={() => {}}, it will warn, thereby forcing you to move the function into the child position.. That sounds like a complicated schema, so maybe we start small to make sure those options are actually in demand? Also the rule being called no-children-prop kinda implies we should be discouraging the children prop \ud83e\udd14 . Ok, let me know if any other changes are necessary.. Travis is flaky again?. Travis acting up again \ud83d\ude15 . Oh yes, I remember at least seeing #1800 which seems to be the same issue that's being fixed here. Will check that and others.. Added tests for the original issue in #1800, plus https://github.com/yannickcr/eslint-plugin-react/issues/1800#issuecomment-399331285\nI had high hopes for #512, but since that returns createElement, it gets a non-zero confidence value.\n(and Travis failure is a fluke again). This one will get automatically fixed when this rule uses the common detection logic from #1911.. @ljharb thanks for the review. I'm still changing things up here fixing tests, just wanted to make sure I'm not doing anything outlandish.. \n\nGithub bug? \ud83e\udd14(same comment listed twice, one doesn't have a reply option). @ljharb I responded to your comments. Could you also take a look at the items in the PR description to see if they make sense? If they do, should I continue modifying this PR, or would it get too big?. For those other changes though all of them depend on this one to be merged first.\nI already have a bunch of new tests for item 2, I can push those separately then if you\u2019d like.\nI\u2019ll split out the function helper, and then this PR can be considered complete.. Split that out into #1914 \nWeirdly, Travis has been complaining on no-typos tests, but locally I'm getting no errors \ud83e\udd14 https://travis-ci.org/yannickcr/eslint-plugin-react/jobs/412257078. Rebased and the build is now passing.. @ljharb by itself this PR won\u2019t fix #1908 as it doesn\u2019t touch that particular rule.\nMy comment in #1908 might be misleading though. This detection doesn\u2019t deal with defaultProps per se, but it does have the means to handle literals as propType keys. So the broader point I was trying to make is that having centralized defaultProps handling would make things like that just work. And this PR will provide the base for that further work (if we can get other collabs to sign off on it)\nSorry for the confusion, I hope this is more clear now.. @yannickcr @lencioni @EvHaus any chance you could take a look? asking because I have a truckload of sweet refactoring elsewhere that all depends on this one (see PR description) and I really like how it turned out.. From what I\u2019ve read here there\u2019s only downsides to using static getters for these, curious why anyone would need to require it?. I think the point is that not everyone's babel config includes the class fields transform plugin.. (last comment off topic) \n\nSeparately, airbnb won't use class fields until there's a lint rule that can forbid ever putting functions in them, for reasons I've gone into elsewhere on this repo.\n\nThat sounds like a fairly straightforward rule, any particular reason it hasn't been implemented?. I could be wrong, but isn't sort-comp responsible for ordering of those?. @ljharb Will take a look. There is some prop wrapper handling there (and some tests), but probably not enough. Do you know if these cases worked before the refactoring?\nETA: ~~Foo.Component isn't detected unless pragma is set to Foo though?~~ For the test case in require-default-props, it has a combination of a prop wrapper with an assignment MyStatelessComponent.propTypes = propTypes; that is probably not yet supported.. Hmm, parser: 'eslint' is failing on eslint v5.3.0 and eslint v4.19.1:\nParsing error: parser.parse is not a function\nAnd when I comment it out, the two tests for prop-types pass \ud83e\udd14 . For the third test, I can confirm the helper is able to correctly analyze it. However, require-default-props isn't using it yet. It needs the helper to also recognize isRequired and I already have all the code written. But I had extracted default props detection first, so I need to create a PR for that first.. @kaiyoma sorry for causing this. Is there a place in your code where you do something like\njs\nComponent.propTypes.foo = ...\n?. Thanks, that\u2019s very helpful. Will try to fix ASAP.\n@ljharb this is caused by a part of the refactoring where I had to combine code from the two rules, and apparently I didn\u2019t code it defensively enough. Looks like we also don\u2019t have tests for this case.\nIs this serious enough to require a patch?. It looks like this is only failing with ESLint 5. @kaiyoma if necessary, you can try reverting to ESLint 4 in the meantime.. That warning didn't change the defaulting behavior, it's just informing that the setting is absent. Perhaps the messaging could be made more clear?. This is duplicate of #1922, it breaks in the same way. Looking at the tests, that rule isn't handling multiline props at all \ud83d\ude15 . Yeah, it looks like it's covered, e.g.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prop-types.js#L2159\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-unused-prop-types.js#L244\nBut it goes through a different code path than the one that has the comment.. Yeah, it looks like it's covered, e.g.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/prop-types.js#L2159\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/no-unused-prop-types.js#L244\nBut it goes through a different code path than the one that has the comment.. Sure. Wanted to start with a smaller set to validate the idea.. Sure. Wanted to start with a smaller set to validate the idea.. Travis is flakey.. Travis is flakey.. It\u2019d be great if this could get merged before I push the used prop type refactoring, as they\u2019re slightly interrelated.. Hmm... can you give an example where the comment goes after the thing you're commenting on? I'm having a difficulty coming up with a real use case.\nAST-wise, there is a leadingComments property on the node that contains the comment before the node.. Hmm... can you give an example where the comment goes after the thing you're commenting on? I'm having a difficulty coming up with a real use case.\nAST-wise, there is a leadingComments property on the node that contains the comment before the node.. Ok. Haven't really seen code like that. But if it's something people would do in your experience (as opposed to putting this is a foo above the foo), then yeah.. Ok. Haven't really seen code like that. But if it's something people would do in your experience (as opposed to putting this is a foo above the foo), then yeah.. comments: \u201cabove\u201d | \u201cbelow\u201d. Why? Are there other rules that would use it?. I'm able to use sourceCode.getCommentsBefore(node) to process comments when attachment is \"above\". But finding this tricky to implement for the \"below\" attachment.\njs\npropTypes: {\n  foo: PropTypes.any,\n  // ^ this is a foo, but the others don't need explanation\n  bar: PropTypes.any\n}\nIf node is the entire foo property, then the comment will not be available in sourceCode.getCommentsAfter(node) because it's after the comma. So I need to either get down to the token level functions, or try using getCommentsBefore on the property that goes next (in this case, bar).\nAlso, here\njs\npropTypes: {\n  foo: PropTypes.any, // <- this is a foo, but the others don't need explanation\n  bar: PropTypes.any\n}\nthe comment needs to be attached to foo as well (whether \"above\" or \"below\"), but it only differs from the previous example in a new line I think.\nI'll continue working on this and see if I can make it work. We could use this rule internally.. Oops, didn't notice that either :-). @ljharb FYI I have a final refactoring ready but blocked by this, which is to extract isRequired detection from default-props-match-prop-types and require-default-props and make it part of the propTypes detection.\nThis will be a huge win since this is what will enable these two rules to migrate to the common detection (that piece is also ready).. Any concerns here?. Please upgrade to v7.11.1.\nFor the second question, see #1930.. I went ahead and fixed other for..in occurrences; I can go back and undo those if necessary. Also rebased.\nprop-types is 201 line now, no-unused-prop-types is 144 \ud83c\udf89 \n. What about uncontrolled components though? If the component accepts a \"defaultValue\" prop, I think it only needs to be \"translated\" to state once on initialization, and after that the value is managed via component's state.. This was filed as #1601 for no-unused-prop-types and there's an unfinished PR in #1646.\nIf #1946 is merged, the fix will go into that common helper and apply for both rules.. This was filed as #1601 for no-unused-prop-types and there's an unfinished PR in #1646.\nIf #1946 is merged, the fix will go into that common helper and apply for both rules.. This works well in the latest version, @vadimshvetsov would you be able to update?. Quick q: I noticed some of the rules are using selectors e.g. https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/jsx-curly-brace-presence.js#L249\nSelectors were introduced in ESLint 3.18 and we seem to be supporting ^3.0.0, so I guess we should avoid using them?. Quick q: I noticed some of the rules are using selectors e.g. https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/jsx-curly-brace-presence.js#L249\nSelectors were introduced in ESLint 3.18 and we seem to be supporting ^3.0.0, so I guess we should avoid using them?. I was asking mostly because this change could use the syntax for 'JSXElement, JSXFragment'. I will avoid it then and fix existing cases separately afterwards.. I was asking mostly because this change could use the syntax for 'JSXElement, JSXFragment'. I will avoid it then and fix existing cases separately afterwards.. I believe I covered what needed to be covered, perhaps even redundantly.. Added support in 4 more rules, plus some tests in other relevant rules.. Ok, I'm a little bit confused - is this issue only about the fact that propTypes works as a non-static class field? That should be easy to fix.\nThere also appears to be an issue with HelloEs6.propTypes = {} form not being handled correctly. If that's the case, I'd ask for the actual component's code that doesn't work (because the example from the docs does work at least according to the tests).. @blackbird91 do you mean propTypes for functional components? Those are covered with tests pretty well, would you mind posting the code for the component that is having issues?. @blackbird91 do you mean propTypes for functional components? Those are covered with tests pretty well, would you mind posting the code for the component that is having issues?. createReactClass is covered with 30+ test cases. Hard to imagine what could have gone wrong without a repro.. createReactClass is covered with 30+ test cases. Hard to imagine what could have gone wrong without a repro.. This exact code is reporting a missing prop as a test case.\nIs this actually the exact way the prop is being used? If this is simplified, can you post the original?\njs\nconst { func } = this.props;\nfunc();. @blackbird91 can you also post your render method?\n@bbthorntz this code should warn in the latest version. Interesting. I can't reproduce neither of the above examples with spreads (posted in https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-420202921 by @asbjornh) in a test case. \nCan't reproduce example from https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-419687291 either.. Interesting. I can't reproduce neither of the above examples with spreads (posted in https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-420202921 by @asbjornh) in a test case. \nCan't reproduce example from https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-419687291 either.. @bbthorntz are you on the latest version? I think this should work in 7.11.1. (https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-418241049). @bbthorntz are you on the latest version? I think this should work in 7.11.1. (https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-418241049). @bbthorntz I specifically worked on spread props not disabling validation of other props that are used individually. If yours is a reduced example, would you be able to post the original code? Or are you able to actually make that reduced version fail?. @bbthorntz I specifically worked on spread props not disabling validation of other props that are used individually. If yours is a reduced example, would you be able to post the original code? Or are you able to actually make that reduced version fail?. Ah, sorry for the confusion. All these issues were fixed in #1939, but that PR landed after 7.11.1. So you should expect them to get fixed in the next release.\nExcept for the original one posted by @blackbird91, that one I still can't figure out. I'd need to see the full code, including the render method.. Ah, sorry for the confusion. All these issues were fixed in #1939, but that PR landed after 7.11.1. So you should expect them to get fixed in the next release.\nExcept for the original one posted by @blackbird91, that one I still can't figure out. I'd need to see the full code, including the render method.. Not sure how this would look like in typescript, but in javascript I think it should be\njs\nimport ESLintPluginReact from \"eslint-plugin-react\";. We're bitten again by the fact that Components.get can return something we're not entirely sure is a component (confidence = 1).\nI can make a local fix in this rule to make sure this doesn't happen. But making Components.get always require confidence of 2 breaks 37 different tests in the suite \ud83d\ude15 . @metreniuk sorry, I don't have a lot of experience with this rule.\nFrom looking at this PR, I would expect more changes in tests though? Am I missing something?. @metreniuk sorry, I don't have a lot of experience with this rule.\nFrom looking at this PR, I would expect more changes in tests though? Am I missing something?. Note: this assumes an SFC will always have some JSX, but it's not always the case. E.g.\njsx\nconst ConditionalComponent = ({ children }) => {\n  if (someCondition) {\n    return children;\n  }\n  return null;\n}. Will look into that today \ud83d\udc4d. Will look into that today \ud83d\udc4d. Hmm appveyor actually failed (node 5 choked on args spread somewhere inside eslint), but there's a green check here.. Hmm appveyor actually failed (node 5 choked on args spread somewhere inside eslint), but there's a green check here.. @amannn I will be tackling https://github.com/yannickcr/eslint-plugin-react/pull/1973#discussion_r247757333 within a few days. @luismendes535 I'd also ask for ESLint version and eslint-plugin-react version. We do have similar test cases that are passing right now.. > This LGTM but is there any way to test for this?\nI was gonna ask \ud83d\ude04\nI could maybe imagine a unit-level test for getReactVersionFromContext. That would have to mock resolve.sync and require results - if this seems reasonable, any particular suggestions for libs to use for that?. Ah, I think I saw babel do something like that \ud83d\udc4d . Ah, I think I saw babel do something like that \ud83d\udc4d . I added a couple of tests.\nI tried caching the version into a local variable in the module and it worked, but then I didn't know how to reset that between different tests \ud83e\udd14 . I added a couple of tests.\nI tried caching the version into a local variable in the module and it worked, but then I didn't know how to reset that between different tests \ud83e\udd14 . I'd love to see it published too \ud83d\ude04 but see https://github.com/yannickcr/eslint-plugin-react/pull/2026#issuecomment-433959053\n\nThere\u2019s no policy and no set timeline; things get released when maintainers have time to do so.. The autofix would be so easy if we had AST-driven fixers \ud83d\ude41 (although I'm guessing there's valid reasons we don't?). The autofix would be so easy if we had AST-driven fixers \ud83d\ude41 (although I'm guessing there's valid reasons we don't?). I think this is a duplicate of #1922. This rule doesn\u2019t make an attempt of handling multiline props properly :/. Thanks @ljharb super happy to get all 4 parts in \ud83c\udf89 . No, it's not. This is not in a class, nor in a class method, so our checks are not triggering here. Perhaps we might add a check for a member in an object expression? But then what about this valid, albeit likely rare, use case \ud83d\ude15 \n```jsx\nconst Namespace = {\n  Component(props) {\n    return ;\n  }\n};\n\n\n```. I don't think we're doing any checks on destructured parameters - but returning JSX or null, sure.\nYour point about function's name is interesting. I wonder why this has not been implemented before - I can't think of any drawbacks here. Although I'd probably just say Capitalized, not necessarily PascalCased, just to be safe. I feel like this would fix a lot of false positives.. Oh \ud83d\ude1e I'll take a look. I believe this has been fixed in #1956.. I know those are technically a bit different, but we are handling both forms for fields like propTypes - wouldn't it make sense to do here as well?. @ljharb our tests for ESLint 3 are broken due to https://github.com/eslint/typescript-eslint-parser/pull/526 (when I fix typescript-eslint-parser to 20.0.0 they pass). Is this an example of peerDep changes being semver-major?. Cool, let me know how I can help.. Hmm I pasted this entire example as a test for 7.11.1 and it passed. oh cool, according to the build in #2068 this does fail on ESLint 5.. Also, this has been filed before in #1957 . Could you post your eslint config?. Could you post your eslint config?. Not sure how it worked before, but react version in the config is supposed to be a string, i.e. \"15.0\".. Not sure how it worked before, but react version in the config is supposed to be a string, i.e. \"15.0\".. This looks similar to #1841 - could probably be done as one fix.. I believe this was fixed in #1829 (it's not released yet).\n(Although I noticed that the code isn't checking React version for gDSFP). FWIW the sort-prop-types autofixer does sort within the spread boundaries: https://github.com/yannickcr/eslint-plugin-react/blob/4a72e6a0784f7cc7f16f4574ce7f14de55540a73/tests/lib/rules/sort-prop-types.js#L1007-L1037. FWIW the sort-prop-types autofixer does sort within the spread boundaries: https://github.com/yannickcr/eslint-plugin-react/blob/4a72e6a0784f7cc7f16f4574ce7f14de55540a73/tests/lib/rules/sort-prop-types.js#L1007-L1037. You will have to wait until the next release for this rule to become available.. That's a whole lot of references.. ^ I thought this was only necessary for this.props to work properly in the constructor. Not saying one shouldn't call super(props) though.. Ah, I think I confused that with forgetting to pass props into super(). Thanks.. I think the former case is fixed in master. I had a similar test case here https://github.com/yannickcr/eslint-plugin-react/pull/1939/files#diff-9dbe8e4f339ea9d6faa56b31c38e71bbR4871\nThe latter case is similar to #1764, except it's a different rule. Although, since used props detection is a common helper now, it only needs to be fixed in one place.. That is handled by no-prototype-builtins in eslint core though (although it's not in the recommended preset). That is handled by no-prototype-builtins in eslint core though (although it's not in the recommended preset). Probably caused by #2084 . @ljharb this is an IIFE though, so it should still work out? Pretty rare case though and not something we can lint for IMO (shouldn't crash of course though).. @ljharb just throwing it out there - would it be impossible for eslint to set an uncaught exception handler that would make it easier for people to locate the source of crashes? We've been getting a lot of reports like this recently. (also sorry for having caused some of them with my changes). @ljharb yeah that's what I meant there; just thought you might know why that could be unrealistic. I'll look around their issue tracker. \ud83d\udc4d . @drx to clarify this bit:\n\nWorse yet, because declaredPropTypes is an object, those helper properties can overwrite actual props.\n\nDo you mean that if we wrongly detect something as a prop, it can overwrite the metadata for an actual prop with the same name?. Sorry about that, I\u2019ll take a look.. Thanks for the great fixes @drx! These helpers were extracted from two rules that had diverged slightly in how they detected propTypes, so it was tricky to de-duplicate them. It\u2019s unfortunate that a few cases slipped through the cracks; they probably worked before but didn\u2019t have test cases in the repo.. @ljharb looking at your fix, it seems that we're still incorrectly detecting something as a prop being used (where in reality this example is not using any props). I'll see if I get time to figure it out.. Yeah I don't think we're handling spreads like this.\nIt looks like, when we're iterating through properties of the ObjectTypeAnnotation here, the iterateProperties helper will see an ObjectTypeSpreadProperty like ...UsedProps here.\nFrom there, I think you should be able to use the getInTypeScope function to resolve the name like \"UsedProps\" to the actual node that contains the definition of that type. You can try \"yielding\" the properties of that node to the callback passed to iterateProperties, but I'd also double-check that any duplicates are handled properly (i.e. if both UsedProps and UnusedProps types contain the same property).. Wait, I think this is a rule we haven\u2019t released yet \ud83d\ude04. Perhaps on the off chance that it could depend on some global state?. If we were to do this, the rule should at least look for componentDidCatch and getSnapshotBeforeUpdate as those are not supported by hooks.\nPersonally I would probably not use this rule right now. I think it's premature given that it's explicitly not recommended to go and refactor all your classes to hooks-based components. I guess it might have some merit if you're starting a new project and writing all your new components with hooks.. \ud83d\udc4d I left the very first occurrence (L169) as is so as not to overcomplicate that condition.. Someone put typos in no-typos so I can fix typos while I fix no-typos.. See discussion in https://github.com/yannickcr/eslint-plugin-react/issues/1817#issuecomment-396329150\nI removed it because coveralls was red and I needed to increase coverage to make it pass \ud83d\ude42Otherwise I can absolutely make this change separately. @ljharb looks like this change isn't necessary for coverage now, so I'll submit a separate PR when this one is in.. I actually couldn't come up with a use case where an array would be supplied as a prop to a DOM component, that probably is not a valid case?. This will not handle Foo.Bar.Baz, do we need that?. Do you mean Foo['Bar']? Yeah, looks like it's not supported according to Babel REPL.. I hope recursion is good enough for practical uses \ud83d\ude04 . Is this line missing curlies around this.bar?. According to AST explorer, both of these are FunctionExpressions with either generator or async flag equal to true.. declaredPropTypes used to be an array here, but an object in prop-types. Common implementation uses an object (keyed by prop name) for easier lookups. This piece of code deals with used propTypes, but it was nested inside of markPropTypesAsDeclared (which was extracted out). . These two config options come from two different rules. Put them here for now, maybe will need to consider if all rules using this functionality should take both of these as options?. that's not compatible with old node versions though?. without changing it too much, I could check for key and/or value to be undefined I guess. hmm do you mean a map with handlers for each type? there's also a bunch of other huge switches in here (like in other parts of the codebase) which could also get the same treatment. Actually I was partly wrong, customValidators is present in both prop-types and no-unused-prop-types. skipShapeProps comes from no-unused-prop-types only, because it can be hard to figure out that a prop access corresponds to a shape. Not sure it's needed in prop-types, will take a look.\nOne problem right now is skipShapeProps is true by default in no-unused-prop-types, whereas prop-types never ignores shape props. Will try to fix that by always building declaredPropTypes for shapes and checking the option when validating props.. Not sure how 4-5 chained else-ifs are better than a switch? anyway will try out a map. Ah, you\u2019re right \ud83d\udc4d. Similar to the case with propTypes, if the shape contains a spread plus some properties e.g.\njs\ntype Props = {\n  person: {\n    ...$Exact<BasePerson>,\n    lastname: string\n  }\n};\nit would be unwise to throw away the information we have about lastname just because we have a spread. By setting an additional flag and leaving the children data in place, we can detect if lastname is being used.. So these tests are now able to detect that lastname is not used. I understand this is a breaking change? Not insisting on any of these to go in, but seems like a good change to me.. These two lines assume that node.left is a MemberExpression which is not always the case in an AssignmentExpression.. This is a bit brittle: assignment could be nested in other nodes (e.g. if conditions) in which case this sequence will not work. This should either be traversing parents in a loop, or scopes like https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-unused-prop-types.js#L264 (although not sure which one is better). Same here, but in this case maybe utils.getParentES6Component would work. Sure. Object.keys(list).forEach perhaps?\nThere's about a dozen other files already doing the same, handle them all?. Oh \ud83e\udd26\u200d\u2642\ufe0f . Suggestions for a better name welcome (isJSXElementOrFragment seemed too wordy). This rule doesn't really care whether it's an element or a fragment, so I just added one simple valid test, and one invalid.. Note: this code was extracted from jsx-curly-spacing and for some reason this line (or the next) returns undefined on ESLint 3.0.0 \ud83d\ude15(our test suite on master fails against that version). Works well on 3.19.0.. Suggestions for more test cases are welcome.. Not sure what (if anything) needs to happen here, basically made a best guess.. it can, but even without that execution would never go into the branch where we warn because we do have a value in context.settings.react.version.. @ljharb does it make sense to cache this value for subsequent access?. Just to confirm, do we want this to be recommended? that would be a semver-major change, right?. already done in https://github.com/yannickcr/eslint-plugin-react/pull/1946/commits/b35ea0c72317d4123237af32759f60858343b682 \ud83d\ude04 . yeah, I wonder why this isn't warning. Can't do this because we only want to ++i if isIgnored is false and doesn't short-circuit. I.e. we want to start reporting from the second non-ignored component.. Actually found a way to achieve this, also using filter.. Sure.\nThe first extraction was based on two other rules that had the most comprehensive detection functionality. However, isRequired detection, which is necessary for the two rules in this current PR, was not part of it. I could have added it there, but that would have blown up an already big PR.\nBut it is coming in the follow-up PR I mentioned above. I just didn\u2019t want to combine it with this one, again, to keep them focused and manageable in size.\nSee https://github.com/alexzherdev/eslint-plugin-react/commit/572e33237d8cd9dd22a13cfbb489b502327ea2fe and https://github.com/alexzherdev/eslint-plugin-react/commit/8add5deb2e84421832d4956932098b2c47b2443e for an exclusive peek \ud83d\ude04. jsx-fragment-syntax of either 'shorthand' or 'standard'? (Also not sure what\u2019s the better default). Currently none, but the docs hint at event handlers in the future: https://reactjs.org/docs/fragments.html#keyed-fragments. Oh. That\u2019s what I was trying to figure out in #1661, but I took https://github.com/yannickcr/eslint-plugin-react/issues/1661#issuecomment-423386464 to mean we don\u2019t have to handle that for now?. Ah, I see what you mean \ud83d\udc4d . Ok then - here's my current understanding:\n- when autofixing <> to \"element\" form, it always goes to <React.Fragment>\n- but we should be able to determine that we need to warn on <Fragment> (and it's then trivial to autofix it to <>)\nFor the latter, I'm thinking of\njs\nconst { Fragment } = React;\njs\nimport { Fragment } from 'react';\nand maybe\njs\nconst Fragment = React.Fragment;\n?. Btw, this would be trivially handled by returning an array of two fixer calls (one for opening and one for closing element), but this is not supported in ESLint 3 \ud83d\ude1e . Also\njs\nconst { Fragment } = require('react');. Sure - that would communicate the intent better (and probably make no difference performance-wise given the data size here). Just haven't gotten used to the new collections. @ljharb do you know if this is really necessary? Not all of the test files that use this parser actually have the require.. yeah, they do - just checked with ESLint 3, 4, and 5. could be an artifact from an even earlier time.. Woah great fix here. @tihonove could you explain how this fix works?. Ah thanks, I wasn't really aware of that.\nBut then I just couldn't piece together what this had to do with the original issue of 10 or more props. Why 10? Is it exactly 10, or somewhere around that number?\nFor posterity - I tested and noticed that booleans do work on arrays of 10 items or less, and immediately break on longer arrays. Something clicked and I recalled that V8 uses a different algorithm on small arrays; turned out that according to the source 10 is the threshold for that.\nWhich I guess makes sense because their quicksort implementation uses all 3 possible comparison results, whereas insertion sort only requires 2, so a boolean value is enough.. Right, but should we say ^20.1.1 now?. Thanks for the fix!\nLater on it'd be great not to depend on the names (similar to #1829), but for now not crashing is the priority \ud83d\udc4d . So cool to see the propTypes detection in use \ud83d\udc4d. This is technically not entirely correct though. package.json (generally) defines a range, whereas \"detect\" will detect the exact version you have installed.\nMaybe\n\n\"detect\" automatically picks the version you have installed.. We don't want to make assumptions on whether the consumer uses lock files or not, or which package manager they're using. What we do is we require the react package and get the version from there.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/dd0757fbf7ab96770282a2a64c9b696856a47235/lib/util/version.js#L14-L16. I'll defer the final wording to @ljharb though.. So it was originally introduced in 3.0.0. My branch has 182 test failures on that version (not all of them seem to be related to this api or caused by my changes though. Master has 127 failures). Between 3.15.0 and 3.16.0 it drops from 169 to 34 failures, removing a lot of errors related to tokens/comments handling. Although a few of the remaining errors are me using getLocFromIndex in this PR, which was only introduced in 3.17.0 \ud83d\ude15 Not sure what to do about that, it would not be feasible/doable to backport, but also there are other tests that are failing on that version anyway... We need at least 3.18.0 for 0 test failures.. I don't mind that. Although I imagine the isSameLine bit in the output is pretty specific to this use case, I don't think it is generally useful to know whether the comment related to a thing is on the same line as the thing or not \ud83e\udd14 . Looks like both getLocFromIndex and getIndexFromLoc are relying heavily on lineStartIndices and lines in the SourceCode class that get populated once in the constructor. The ESLint docs explicitly say we can use lines (bottom of the section) but there's no word about lineStartIndices. Potentially we can just copy over those functions, but the bigger issue with getTokenBefore/getTokenAfter remains, and those don't seem possible to be backported.. I'm skeptical (not that we could detect them, but that there is a reasonable experience beyond just not applying fixes), but let me look into that.. I was going to say it might be reasonable to add this env as an override for the tests/util/*.js glob, but apparently that feature is only available in ESLint v4.1.0+, and we have \"^3.0.0 || ^4.0.0 || ^5.0.0\" in our devDependencies.\nWould it perhaps make sense to put an .eslintrc in tests/util to use cascading instead?. \n",
    "dimkaufo": "Sorry, it seems that spread operator is not the only reason of this crash (my previous example is not valid). That is valid:\na.js\n```\nimport {Component, PropTypes} from 'react';\nexport default class BaseClass extends Component {\n   static propTypes = {\n       a: PropTypes.string,\n       b: PropTypes.object\n   }\n}\n```\nb.js\n```\nimport {PropTypes} from 'react';\nimport BaseClass from 'a';\nexport default class ClassWithSpreadInPropTypes extends BaseClass {\n   static propTypes = {\n       ...BaseClass.propTypes,\n       c: PropTypes.string\n   }\n}\n```\nversions:\n\"babel-eslint\": \"5.0.0\",\n\"eslint\": \"1.10.3\",\n\"eslint-plugin-react\": \"4.1.0\"\n. ",
    "ksmithut": "You're right, but it's still running into the same error. I've updated my comment above\n. Yes, I guess that would make sense, I think I just expected propTypes to come after because the default order of the lifecycle group goes displayName then propTypes. It just seems odd that you would have to order them differently based on whether or not you use the .createClass syntax.\n. k, we'll do that. Thanks :)\n. ",
    "bsbeeks": "I run into this use case as well. It's fairly easy to catch with the React errors in the browser, but having a rule to help catch it before hand would be great. @yannickcr I can put together a PR for this if it's a rule we want to add.\nProposed Rule Name: require-render-return\n. In my mind the rule would just check for a return statement in the render method. It wouldn't care about what it's returning. The value add would probably depend on the project and the component. I'm not sure how to measure that value, but I know it'd be useful for our projects at MX (especially for newbie devs)\n. ",
    "darrenscerri": "Issue still persists in v4.2.0 when using this.\n. ",
    "billyjanitsch": "Thanks for all of the quick fixes @yannickcr!\n. Ternaries are also an issue. We'd like to do:\njsx\n<div>\n  {isCondition\n    ? <div>\n        some content\n      </div>\n    : <span />\n  }\n</div>\nBut this currently errors, instead wanting:\njsx\n<div>\n  {isCondition\n    ? <div>\n      some content\n    </div>\n    : <span />\n  }\n</div>\nWhich IMO is much less readable, since the opening and closing <div> tags are not aligned.\n. The referenced commit 42037c4 only fixes one case, but doesn't address many other cases such as the one mentioned in https://github.com/yannickcr/eslint-plugin-react/issues/540#issuecomment-213571362.. @ljharb why would it be much slower? Doesn't React already bind all standard component methods to the instance in the constructor anyway?\n. ",
    "pgilad": "I see, then merge/close as you wish :smile: but definitely good to know!\n. ",
    "kostasmanionis": "Ummm guys... Hasn't this change been reverted? https://github.com/facebook/react/pull/6243 \n. ",
    "artisologic": "@vdh I can see a way of writing it as a stateless component. I have actually used this myself.\nUsing your example, I would do the following by making use of a simple closure:\n``` js\nimport React, { PropTypes } from 'react';\nimport pureRender from 'pure-render-decorator';\nexport default pureRender(Example);\nfunction Example(props) {\n  return ;\nfunction _handleClick() {\n    props.action(props.id);\n  }\n}\nExample.propTypes = {\n  action: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired\n};\n```\nAlso, thanks to hoisting, you can still export the pureRender'ed version up top.\nSo, to be honest, I'm not sure I agree with this thread that they are false positives.\nOr am I missing something?\n. Hi @vdh, I realised my mistake in my sleep and woke up this morning thinking... \"The handler in the closure will still be recreated everytime!\"\nI have to say then, I find less and less use cases for using stateless components then apart from merely template components. Anything that would accept a callback is basically out of the question now.\nAlso, thanks for the details regarding the fact that stateless components can't support pure render, I had assumed they were given their name. I think it's correct that the doc is a bit misleading.\n. @Kerumen decorators are just functions so your code is equivalent to:\n``` js\nclass Button extends Component {\n  render() {\n    \n  }\n}\nexport default CSSModules(styles)(Button);\n```\nI'm not sure what your HOC does but technically it should be possible for Button to be a SFC like so:\n``` js\nfunction Button(props) {\n  return ;\n}\nexport default CSSModules(styles)(Button);\n```\n. ",
    "Robinnnnn": "While using Redux, I receive a false positive when I have a component that only uses render() but also uses connect + mapStateToProps + mapDispatchToProps.\n``` javascript\nclass MyComponent extends React.Component {\n  render() {\n    const { prop1, prop2 } = this.props;\n    return (\n      {prop1} {prop2}\n    )\n  }\n}\nconst mapStateToProps = state => ({\n  prop1: state.prop1,\n  prop2: state.prop2,\n})\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actionCreators, dispatch)\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(MyComponent);\n```\nAs far as I know, it is impossible to map state to a stateless function (duh). However, the linter continues to suggest to use a stateless component because I'm only calling render().\nLet me know if I'm missing something obvious!\n. @ljharb sorry, but do you mind showing me how?\n. Thank you!! \n. ",
    "lixiaoyan": "any update on this?\n. ",
    "darrennolan": "I'm having a weird issue at the moment with prop-types.\n```\nimport VideoJSPlayer from '../../components/videojs-player';\nexport default function getVideoJSComponentStream({\n  videoJsControlBus\n}) {\n  // do lots of fancy stuff\n  return \n}\n```\nI end up with warnings for videoJsControlBus missing in props validation.\nBut VideoJSPlayer is a component defined elsewhere, imported in at the top - that component definition has the correct prop types.\nI think it's detecting this particular case as a stateless function component, which technically it's not?\nThus ignoring stateless components would be a highly desirable option.\n. Thanks for the super quick reply @ljharb =D\nBut getComponentStream doesn't actually return a new react component.  I should update that code a bit better.\nIt's returning an observable stream, just happens to map to a react component, that's typically injected into another component. \nTo me, that would be like having to declare prop types against the following, when Class PlayerComponent already has them defined.\nReactDOM.render(\n    <PlayerComponent {...data.view} />,\n    this.element\n);\nUnless in these cases it's better for me to explicitly return React.createElement(SomeComponent, someProps) ?  Which, maybe it would be better?\n. Trimmed down version of the function, but this shows the streams we muck about with and then return a stream that when subscribed - gives us this react component with the props set accordingly.\n```\nimport React from 'react';\nimport bacon from 'baconjs';\nimport isEqual from 'lodash/isEqual';\nimport get from 'lodash/get';\nimport VideoJSPlayer from '../../components/videojs-player';\nexport default function getVideoJSComponentStream({\n    autoPlayStream,\n    marbleStream,\n    marbleVideoSourcesStream,\n    preloadStream,\n    showAdStream,\n    videoJsControlBus,\n    videoJsEventBus\n}) {\n    let videoJsSettings = bacon.combineWith(\n        marbleStream, marbleVideoSourcesStream, autoPlayStream, preloadStream,\n        (marbleVideo, marbleVideoSources, autoplay, preload) => {\n            return {\n                autoplay,\n                preload,\n                marbleVideoSources: marbleVideoSources,\n                nativeControlsForTouch: true,\n                poster: get(marbleVideo, 'posters.large', '')\n            };\n        }\n    );\nreturn bacon.combineWith(\n    videoJsSettings, showAdStream, marbleStream,\n    (videoJsSettings, showAd, marbleData) => ({videoJsSettings, showAd, marbleData})\n)\n    .skipDuplicates(isEqual)\n    .map((settings) => {\n        return (\n            <VideoJSPlayer\n                showAd={settings.showAd}\n                videoUid={get(settings, 'marbleData.marbleId')}\n                videoJsControlBus={videoJsControlBus}\n                videoJsEventBus={videoJsEventBus}\n                videoJsSettings={settings.videoJsSettings} />\n        );\n    });\n\n}\n```\nThe props needed warning appears on the function getVideoJSComponentStream arguments. Which may or may not be expected.\n. Thanks @ljharb - I've made a new ticket at https://github.com/yannickcr/eslint-plugin-react/issues/504 (hoping I copied all the relevant information).\n. ",
    "grrowl": "I'm not sure what the core objection is here \u2014 we use PropTypes extensively across our application, at multiple boundaries and depths. We only use Stateless Function Components within class components with propTypes defined (and enforced, thanks to this plugin) so it's both unnecessary to re-declare the same propTypes again for SFCs and affects readability of our code.\nI understand not everyone works in this way, which is why it would only be optional at best. I don't have experience with ASTs and eslint but if it's too hard to deal with here I'll try to find some time soon to get a PR together.\nThanks.\n. ",
    "ianstormtaylor": "+1, turning this off for stateless function components is exactly what I need. They get used for one-offs, which don't make sense to turn on prop type checking for.\n. That happens to work for my use case, so fine by me.\nAlthough I have to say, I don't really understand the extremely rigid take on it. The whole point is that it's an option you wouldn't have to ever use if you disagree so strongly with it. But for other folks it makes sense that when they write one-or-few-liner components they don't want to have to be forced to add prop types. \nEither way, I've just abandoned this rule now anyways. \n. ",
    "paulyoung": "\nI would be fine with a rule stating that un-exported SFCs don't need propTypes\n\nThis would be great. Is there any progress towards this yet?\n. ",
    "amannn": "I also get a false negative for this scenario:\n\nThe rule proposed in this thread would help for my use case.\n. Really? Even though that function is called directly and not with React.createElement?\n. Another one I just stumbled across: react/sort-comp should recognize componentDidCatch as a lifecycle method in the order property.. @alexzherdev That's great to hear! Thank you so much for your help!\nIt's really cool to have auto fixable jsx-sort-props and sort-prop-types. After that, there's only auto fixing for jsx-sort-default-props missing for me to go all-in on sorting props \ud83d\ude42.\n. ",
    "reconbot": "Same thing for .map just fyi\n. ",
    "thewillhuang": "@ljharb thats great and all, but the current proposal is with classes, and until that has been agreed upon and or implemented this is still a false positive and a bug. see https://github.com/wycats/javascript-decorators, first line in the summery for decorators.\n\nDecorators make it possible to annotate and modify classes and properties at design time. \n. @ljharb ah i see, missed that part completely\n. \n",
    "calmdev": "What worked for me and may work applied to the context here is making sure that all get methods are defined prior to any load methods.\n. I haven't been able to intentionally reproduce it either. It happen while I was refactoring a component. If I come across it again I'll post an example.\n. This is by no means a practical example, but it will cause the message to appear at least. \nMaybe it will help.\njs\nexport default class View extends React.Component {\n  getA() {}\n  componentDidMountOk() {} // message doesn't show using `componentDidMount`\n  getB() {}\n  componentWillMount() {}\n  render() {}\n}\n\n. ",
    "neiker": "Same issue, same fix\n. Yes, no problem:\n{\n  \"parser\": \"babel-eslint\",\n  \"extends\": [\n    \"airbnb\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true,\n      \"experimentalObjectRestSpread\": true,\n      \"classes\": true\n    }\n  },\n  \"rules\": {\n    \"react-native/no-unused-styles\": 2,\n    \"react-native/split-platform-components\": 2,\n    \"react-native/no-inline-styles\": 2,\n    \"react-native/no-color-literals\": 2,\n    \"react/jsx-no-bind\": [2, {\n      \"ignoreRefs\": false,\n      \"allowArrowFunctions\": false,\n      \"allowBind\": false\n    }],\n    \"complexity\": [\n      2,\n      10\n    ],\n    \"max-depth\": [\n      2,\n      4\n    ],\n    \"max-nested-callbacks\": [\n      2,\n      2\n    ],\n    \"max-params\": [\n      2,\n      4\n    ],\n    \"max-statements\": [\n      2,\n      18\n    ]\n  },\n  \"globals\": {\n    \"__DEV__\": true\n  },\n  \"plugins\": [\n    \"react-native\"\n  ]\n}\n. I could not find it, but I remember it was something like:\nconstructor()\nshouldComponentUpdate()\nsetSomething()\nonDragStart()\ngetBound()\nonSomething()\n. Same using react-immutable-proptypes. +1 to don't fail on this. +1 to don't fail on this. Same here.\n```js\nonTitleChange = (title) => {\n    this.setState({ title, titleChanged: true });\n  }\nonTemplateChange = (template) => {\n    this.props.navigator.pop();\nthis.setState((state => ({\n  template,\n  title: state.titleChanged ? state.title : getTemplateTitle(template),\n})));\n\n};\n```\n97:28  error  Unused state field: 'titleChanged'  react/no-unused-state\nI'm using eslint-config-airbnb. ```js\n{\n    \"parser\": \"babel-eslint\",\n    \"extends\": [\n        \"airbnb\"\n    ],\n    \"env\": {\n        \"mocha\": true\n    },\n    \"rules\": {\n        \"no-restricted-properties\": \"off\",\n        \"complexity\": [ \"error\", 10 ],\n        \"max-depth\": [ \"error\", 4 ],\n        \"max-nested-callbacks\": [ \"error\", 2 ],\n        \"max-params\": [ \"error\", 4 ],\n        \"max-statements\": [ \"error\", 18 ],\n        \"no-constant-condition\": \"off\",\n        \"no-plusplus\": \"off\",\n    \"no-warning-comments\": \"error\",\n    \"comma-dangle\": [\n        \"error\", \n            {\n            \"arrays\": \"always-multiline\",\n            \"objects\": \"always-multiline\",\n            \"imports\": \"always-multiline\",\n            \"exports\": \"always-multiline\",\n            \"functions\": \"always-multiline\"\n        }\n    ],\n    \"no-restricted-globals\": \"off\",\n\n    \"react/require-default-props\": \"off\",\n    \"react/no-unused-prop-types\": \"off\",\n    \"react/jsx-filename-extension\": [\n        \"warn\",\n        {\n            \"extensions\": [\".js\"]\n        }\n    ],\n    \"react/jsx-no-bind\": [\n        \"error\",\n        {\n            \"ignoreRefs\": false,\n            \"allowArrowFunctions\": false,\n            \"allowBind\": false\n        }\n    ],\n    \"react/no-typos\": \"off\",\n\n    \"import/no-named-as-default\": \"off\",\n    \"import/prefer-default-export\": \"off\",\n\n    \"jsx-a11y/href-no-hash\": \"off\",\n    \"jsx-a11y/anchor-is-valid\": \"off\",\n\n    \"react-native/split-platform-components\": \"off\",\n    \"react-native/no-unused-styles\": \"error\",\n    \"react-native/no-inline-styles\": \"error\",\n    \"react-native/no-color-literals\": \"error\"\n},\n\"globals\": {\n    \"__DEV__\": true,\n    \"fetch\": true,\n    \"ErrorUtils\": true\n},\n\"plugins\": [\n    \"react-native\"\n]\n\n}\n```. ",
    "mikecousins": "Yes, I can no longer reproduce this. Maybe it was fixed by accident?\n. ",
    "KevinGrandon": "@yannickcr - Thank you for taking a look. I've fixed the test case and resolved this by walking up nodes until it finds one that it's looking for. Commit is here: https://github.com/yannickcr/eslint-plugin-react/pull/511/commits/0f9ff7f9a5e199618f8373c21a02a9153f3825a7\nPlease let me know if there's a better way of doing this, or if there's anything else you'd like to see here. Thanks!\n. This is now squashed, thanks!\n. ",
    "perrin4869": "Actually, stateless functional components can get a second context component... not sure how to solve this...\n. ",
    "mjackson": "FWIW react-motion also allows you to specify a children prop that returns React elements. We're currently working on moving the react-router API even more in this direction, so we need a fix here.\nI'd suggest we stop treating any function that returns JSX as a stateless functional component unless we can also prove that someone is using it in a call to createElement somewhere. Since I suspect the latter isn't really feasible, I'd suggest we stop treating functions that return JSX the same as if they were components. They are not the same.\n. That's not true. I just triggered the react/display-name warning on an anonymous function with a blank argument list.\nThe only way you can definitively tell that the user intends to use a function as a SFC is to see if they ever use it as the first arg to React.createElement.\n. > However, it's far better imo to have an overly-active lint rule that can be overridden with comments, than to have one that misses otherwise lintable errors.\nI'm just worried that other people are going to stumble on this error and think \"man, React is hard\" just because they made a function that returns some JSX and they're using the \"recommended\" lint setting. Can we perhaps separate out this functionality into an opt-in sfc-display-name rule?\n. I first encountered this error this afternoon while working on the <Media render> API for react-media. The rule was complaining about this test specifically.\nWe will have an identical API in the next release of react-router that renders something when a particular route matches. Unfortunately, for now I just had to disable react/display-name entirely because it's just too aggressive.\n. Thanks, @yannickcr. I assume you're talking about the work you did in 70bf28d89eae53b53e3bf41c4bae84cb8700f984. Just to be clear, how does that work alter the current behavior?\n. It's absolutely necessary to do a setState inside componentDidMount for doing things like measuring. Since there's no other way to do this, I'd agree with @jedwards1211 that it should be removed from the \"recommended\" rules.\n@yannickcr Maybe it's time for a react/warnings config? eslint-plugin-import does this and it's great. You simply extend import/warnings if you want to see these kinds of opinionated error messages and import/errors if you only want to see actual error cases. Could be a solution to #636 as well.\n. \"Despatch a Redux action\" is just a really elaborate way of setting state.\nOn Sat, Jun 18, 2016 at 4:25 PM Andy Edwards notifications@github.com\nwrote:\n\nOf course that begs the question: eslint leaders wouldn't consider\ndispatching Redux actions in componentDidMount a code smell, I hope?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/596#issuecomment-226970476,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AAFqpzd4z-hbv2ujAiMY1qWyD4msy7kSks5qNH5UgaJpZM4IdPGc\n.\n. @yannickcr If you think react/warnings and react/errors might be a good approach, I can make a PR with what I think would be appropriate. Interested?\n. > A function that returns jsx (ie, that generates a React.createElement) is in fact a stateless functional component\n\nWhile such functions may be used as components (i.e. passed as the first arg to React.createElement), I think it's too aggressive to assume that all such functions are components. As render props become more and more common (ala react-motion and react-router) this is going to be a larger concern.\nI'd say we can close this issue as a dup of #512 \n. > Just out of curiosity, what can't you do without it?\nPut simply, you can't tell React not to escape something. It's great to escape things by default, but the ability to opt-out of escaping when you need to is absolutely critical.\nI've used dangerouslySetInnerHTML to render JavaScript strings. For example, you can't render this w/out it:\njs\n<script>console.log(true && 'hello')</script>\nIt's also needed when using 3rd-party DOM string manipulation libraries inside React, like Mustache (which already produces escaped output) or Markdown. When you render some HTML, you've gotta have a way to stick it in your component w/out further escaping it.\nAlso agree w @ljharb that warnings aren't useful. It's either an error or it's not, and this one is definitely not.\n. I might also point out that an example of using Markdown w React is found on the React homepage (see the last example).\n. @ljharb I mean putting an actual <script> tag into the page.\nSide note: we couldn't actually have this conversation here on GitHub unless there were a way for them to opt-out of escaping all the special HTML characters we're using ... :P \n. > I can't believe that adding an actual script block to the page inside a React component is a common use case, and either way, I can't conceive of how it's not a horrific one.\nI never said it was common, but when I do use it I can do some really cool stuff:\nhttps://github.com/mjackson/web-starter/blob/a8b425d85fdaa8000e719399ed8e23969f0f4c83/modules/server/components/HomePage.js#L27-L28\nAnyway, my point about this conversation still holds. Somewhere, on some server, GitHub is \"dangerously setting inner HTML\" which is what's allowing us to have this conversation.\n. > Every use case for dangerouslySetInnerHTML can be achieved more safely by transforming the intended content to VDOM first and rendering it as children.\n@developit You know I love you, but did you run that code?\nhtml\nrenderToString(<script>console.log(true && \"hello\")</script>) => <script>console.log(true &amp;&amp; &#x27;hello&#x27;)</script>\n:P\n. Having the no-danger rule as part of the \"recommended\" set is misleading, Jordan. You're telling people that using a sometimes-necessary piece of the API is not recommended. That makes no sense.\n. Would you \"generally discourage\" making a website with user-generated content? Or \"generally discourage\" using Markdown? That's what makes no sense to me.\n. > We know we shouldn't use it\nThat's the sentiment I'm worried about. Is there another way to do what you want to do? Then yes, you should probably do that.\nBut there are times when you must use it.\n. @yannickcr Any further objections here? @ljharb said a few times that he doesn't feel too strongly about it, and you've said you're not against removing it. I, for one, feel pretty strongly that no-danger shouldn't be part of the \"recommended\" rules, as do several others here.\nSo, can we merge?\n. As I suggested here I believe the only way to create an accurate isStatelessFunctionalComponent method would be to check if a function is ever actually used as the first argument in React.createElement. Otherwise you're going to get a bunch of false positives with methods that return some JSX but aren't intended to be SFCs.\n. Love this, @prometheas! \u2764\ufe0f \nI'll definitely be recommending this to everyone.. I don't think so. Putting refs on compound elements is pretty much always a bad idea. I think this could actually be a really useful linting rule that helps you write more declarative code.\nAs for \"setState is bad\", how did people ever even start down that path? ;). > I don't think it's a good idea to treat it as always-bad.\nOK, I shouldn't have said it's always a bad idea. I haven't ever needed a ref on a custom component, but apparently you have \ud83d\ude05 I'm not suggesting we put this in the recommended set. But I still believe this rule could go a long way toward helping people write better code, which is partly what a linter is supposed to do.. ",
    "nene": "I'll add my vote for an option to disable prop-types for Stateless Functional Components. For those who aren't using them, it would easily eliminate all false-positives.\n. I'll add my vote for an option to disable prop-types for Stateless Functional Components. For those who aren't using them, it would easily eliminate all false-positives.\n. ",
    "zeroasterisk": "I am getting react/display-name warnings for the following anonymous stateless function syntax:\njs\nconst options = {\n  loadingHandler: () => (<LoadingSpinner />),\n  errorHandler: (error) => (<ErrorBanner error={error} />),\n  someOtherConfig: [1, 2, 3],\n};\nAside from making variables for each, how could I even give this a name?. js\nconst loadingHandler = () => (<LoadingSpinner />);\nconst errorHandler = (error) => (<ErrorBanner error={error} />);\nconst options = {\n  loadingHandler,\n  errorHandler,\n  someOtherConfig: [1, 2, 3],\n};. ",
    "coderitual": "I would love to see an option to treat all functions started from capital letter (the same for default export if filename is capital as well) as SFCs and the others as normal functions. There is a common convention to name all react components in that way.\n```javascript\nconst Foo = () => ;             // warn\nexport default () => ;          // warn if in Foo.js or in Foo/index.js\nconst renderFoo = () => ;       // ok\nexport default () => ;          // ok if in render[-foo/Foo]\n```\nWhat do you think Guys?\nedited: improved after ljharb's suggestion.. good point. I will update. Why an anonymous function is impossible to be used as a component?\nGiven const FooComponent = function(props) { /**/ } is a completely valid react component.. @Loupax Yup, this is the reason of my proposal above (decision based on first letter) -> https://github.com/yannickcr/eslint-plugin-react/issues/512#issuecomment-334193581. I haven't seen a component which name starts lowercase. Even react is promoting this convention -> https://reactjs.org/docs/components-and-props.html\nI agree it's not perfect solution but you cannot say whether expression is a SFC or normal function based on expresion itself. What makes the difference is how you call this expression.\nAll custom components in react must start upper case so it's unlikely to see something like this:\njs\nconst comp = () => <div></div>;\nconst App = () => <comp></comp>;\nOf course you can export lowercase function  and change its name during import but still this is a bad practise.\nI am not sure why only few people see this relation and simple solution to mitigate the problem.\nMike. I haven't seen a component which name starts lowercase. Even react is promoting this convention -> https://reactjs.org/docs/components-and-props.html\nI agree it's not perfect solution but you cannot say whether expression is a SFC or normal function based on expresion itself. What makes the difference is how you call this expression.\nAll custom components in react must start upper case so it's unlikely to see something like this:\njs\nconst comp = () => <div></div>;\nconst App = () => <comp></comp>;\nOf course you can export lowercase function  and change its name during import but still this is a bad practise.\nI am not sure why only few people see this relation and simple solution to mitigate the problem.\nMike. ",
    "brennancheung": "FYI.  A similar problem exists when using higher order functions to generate components.\njsx\nconst entityRow = definition => entity => // eslint-disable-line react/display-name\n  (\n    <TableRow key={entity.id}>\n      {definition.map(def => <TableRowColumn key={def}>{entity[def]}</TableRowColumn>)}\n    </TableRow>\n  ). FYI.  A similar problem exists when using higher order functions to generate components.\njsx\nconst entityRow = definition => entity => // eslint-disable-line react/display-name\n  (\n    <TableRow key={entity.id}>\n      {definition.map(def => <TableRowColumn key={def}>{entity[def]}</TableRowColumn>)}\n    </TableRow>\n  ). ",
    "aprilmintacpineda": "@zeroasterisk thanks for that, so anonymous functions are not valid as react components?\nThe error for me was because of this:\n{\n  //...\n  component: props => (<MyJSX {...props} />),\n  //...\n}\nI had to convert it to:\n```\nconst aComponent = props => ();\n{\n  //...\n  component: aComponent,\n  //...\n}\n```\nwhich fixed the problem. It's weird though, because aComponent is a variable that is assigned an anonymous function... so.... I suppose it considers that as a named function? I don't know, can someone explain this?. @zeroasterisk thanks for that, so anonymous functions are not valid as react components?\nThe error for me was because of this:\n{\n  //...\n  component: props => (<MyJSX {...props} />),\n  //...\n}\nI had to convert it to:\n```\nconst aComponent = props => ();\n{\n  //...\n  component: aComponent,\n  //...\n}\n```\nwhich fixed the problem. It's weird though, because aComponent is a variable that is assigned an anonymous function... so.... I suppose it considers that as a named function? I don't know, can someone explain this?. ",
    "johnomalley": "This really really sucks when you have a file with a rendering function and a component.\n``` javascript\nimport React from 'react'\nimport T from 'prop-types'\nconst renderItem = ({id, name}) =>\n  {name}\nconst Example = ({items}) =>\n  \n    {items.map(renderItem)}\n  \nExample.propTypes = {\n  items: T.arrayOf(T.object).isRequired\n}\nexport default Example\n``\nTherenderItemfunction is clearly not a component.  It's not exported, nor is there any reference to` in the file.  But the component detection isnt smart enough to figure that out.\nEven worse, there is apparently no way to suppress the inspection on renderItem without also turning off validation on the real component.  Yuck.\nI like the suggestion from @coderitual as a simple solution - as of now the prop-types and display-name inspections, as useful as they could be, are just too painful to enable in my project.. This really really sucks when you have a file with a rendering function and a component.\n``` javascript\nimport React from 'react'\nimport T from 'prop-types'\nconst renderItem = ({id, name}) =>\n  {name}\nconst Example = ({items}) =>\n  \n    {items.map(renderItem)}\n  \nExample.propTypes = {\n  items: T.arrayOf(T.object).isRequired\n}\nexport default Example\n``\nTherenderItemfunction is clearly not a component.  It's not exported, nor is there any reference to` in the file.  But the component detection isnt smart enough to figure that out.\nEven worse, there is apparently no way to suppress the inspection on renderItem without also turning off validation on the real component.  Yuck.\nI like the suggestion from @coderitual as a simple solution - as of now the prop-types and display-name inspections, as useful as they could be, are just too painful to enable in my project.. > renderItem should be a component\nI completely disagree.  Even if you think that any bit of JSX belongs in a formal component, which seems like a rather arbitrary and onerous requirement, at least a few libraries don't agree with that.  For example, I use react virtualized, which employs rendering functions - called from the render methods of other components - to only render what is visible on the screen.\nAlso, extracting a function can greatly improve readability in the case where extracting a component wouldn't add any significant value.\nedit - typo. ",
    "dimaqq": "Would the following example be an instance of this issue:\njsx\nfunction Table(props) {\n  return <ReactTable columns={[{ /* ... */\n    accessor: (r) => r.x?\"OK\":<span className=\"bad\">bad</span>}]}\n  </ReactTable>\n}\neslint complains that according to react/display-name, the span line is missing display name \ud83d\ude16 . Would the following example be an instance of this issue:\njsx\nfunction Table(props) {\n  return <ReactTable columns={[{ /* ... */\n    accessor: (r) => r.x?\"OK\":<span className=\"bad\">bad</span>}]}\n  </ReactTable>\n}\neslint complains that according to react/display-name, the span line is missing display name \ud83d\ude16 . ",
    "foxtree": "I suppose both rules work with the following syntax  (sans getter):  \n```\n  static displayName = 'Root';\nstatic propTypes = {\n    store: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    DevTools: PropTypes.func.isRequired\n  };\n```\n. ",
    "2color": "The problem was that I was calling \n\"plugins\": [\n    \"React\"\n  ],\nWhere React should have been react\n. ",
    "pke": "Ah you right, forgot about the context arg.\nA rule for functions with more than 2 args would have helped me in that case.\n. Right, I forgot about context.\nFor my particular case it could also be that I chose to call props match and context text. I understand. That is hard to decipher for the rule.\nCouldn't we just assume they are supposed to be called props and context by convention?\nAt the very least if there are more than 3 params, with whatever name in a SFC then something is off.. When you say \"should not\" where does this recommendation come from? Is this a lint suggestion or are there language/runtime implications?. When you say \"should not\" where does this recommendation come from? Is this a lint suggestion or are there language/runtime implications?. Why shouldn't it be dynamic? Can you explain please?. In a REST level 3 kind of app where the app state is completely controlled by the server, the server dictates the fields of a form. That's a valid scenario for when the button type needs to be dynamic. Since hardcoding the now known button types defeats the entire reason for going REST level 3, which is to have an evolutionary API, which can change in the future without touching the client but just send a new HTML6 value for button type.\nBut since REST level 3 apps are such a rare breed as of now I'll just disable this rule that's supposed to make the button type usage \"safe\".. I think we can agree to disagree on that so I'll close this issue here. A workaround was mentioned that works just fine.\nThanks for all the work on this plugin!. I don't remember @vaske :/ Maybe I just disabled the rule.. Since propTypes are not used in production builds anyway such safeguards against \"reset\" type should happen in code, not in propTypes.. Since propTypes are not used in production builds anyway such safeguards against \"reset\" type should happen in code, not in propTypes.. Yes isn't that what I was suggesting, something like this: \n\n. Yes isn't that what I was suggesting, something like this: \n\n. Yeah a kind of check would be good to keep everything in sync.\nActually for my own project I am thinking about adding the docs to the rule file itself and extract the markdown files with some tool and use the rule metadata to annotate the documentation and create the recommended rules list based on that meta-data and inject it into the readme automatically. \n~~It's basically what they do in https://eslint.org/docs/rules/ but I have to find out how they generate it.~~\nSo they generate the docs. Seems like some eslint-plugins would benefit from a eslint-plugins-docs package providing scripts to generate up-to-date rule docs from rule source files.. ",
    "mrrorinc": "indeed, this seemed to do it \"react/prop-types\": [2, { ignore: ['children'] }], thank you for your guidance!\n. may I ask for a code snippet, please? thanks!\n. @ljharb muchas gracias, el senior! :beers: since this project is ES6, under my class declaration simply:\nAppWrapper.propTypes = {\n  children: React.PropTypes.element.isRequired\n} cheers\n. ",
    "olivierlacan": "For folks bumping into this now that React.PropTypes is deprecated and the prop-types package is recommended instead, here's the fix: \njavascript\nstatic propTypes = {\n  children: PropTypes.node.isRequired\n};\nHope that helps.. ",
    "ncatranis": "@olivierlacan thanks for the tip! This is what worked for me, with eslint-plugin-react 7.11.1\n```jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nclass Layout extends Component {\n    state = {};\nrender() {\n    return(\n        <div>\n            {this.props.children}\n        </div>\n    );\n}\n\n}\nLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\nexport default Layout;\n. @olivierlacan thanks for the tip! This is what worked for me, with eslint-plugin-react 7.11.1jsx\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nclass Layout extends Component {\n    state = {};\nrender() {\n    return(\n        <div>\n            {this.props.children}\n        </div>\n    );\n}\n\n}\nLayout.propTypes = {\n    children: PropTypes.node.isRequired\n};\nexport default Layout;\n```. ",
    "Palgie": "@ljharb I shall and agreed on the responsibility comment this is a WIP or POC component that's getting trashed.\nExcuse any naivety but why is explicit type declaration needed when this.props.model is defined as an object?\n. Closing. Just found the answer in React.PropTypes.shape. Thanks @ljharb.\n. ",
    "anthonator": "I'm curious about this too!\n. We've been doing something similar but slightly different:\n``` js\nexport class Test extends React.Component {\n  constructor(props) {\n    super(props);\n  }\nelementRef (element) {\n    this.element = element;\n  }\nelementRef = this.elementRef.bind(this)\nrender () {\n    return (\n        Hello\n    )\n  }\n}\n```\n. We've been doing something similar but slightly different:\n``` js\nexport class Test extends React.Component {\n  constructor(props) {\n    super(props);\n  }\nelementRef (element) {\n    this.element = element;\n  }\nelementRef = this.elementRef.bind(this)\nrender () {\n    return (\n        Hello\n    )\n  }\n}\n```\n. ",
    "Jessidhia": "How does React actually behave if the identity of the ref pseudo-prop changes?\nIf you put it on a DOM element, it's not a prop that is reflected on the DOM, so even if the diff algorithm finds that it needs to do \"something\" because it changed, it would not ultimately write to the DOM.\nIf you put it on a custom component, it's not a prop that can be read by the component (AFAIK), so it shouldn't do the full shouldComponentUpdate / render cycle (if it does, even though it's a prop that the component cannot do anything with, it sounds like a React bug, or at least possible optimization).\n. It seems this is also triggered when using thunks that return ReactElements (...which look very similar to a SFC, but are not quite the same).\nHere's an example, where t is a function that, for the given arguments, returns ['String with ', <a href='/'>{'replacement'}</a>, '']:\njs\n<span>\n  {t('String with %(a:replacement)', {\n    a: text => <a href='/'>{text}</a> /* react/display-name warns here */\n  })}\n</span>\n. Not sure if out of scope, but I use this pattern often, and it sounds like the kind of thing you want to catch with this rule too:\n``` js\nclass AComponent extends React.Component {\n  / lifecycle methods /\n  render () {\n    const {\n      props: {\n        requiredProp,\n        optionalProp = '' // default value!\n      }\n    } = this\nreturn <div><h1>{requiredProp}</h1>{optionalProp}</div>\n\n}\n}\n``\n. Wouldn'tno-invalid-thiscatch this?\n. The first one is currently the only case that doesn't warn, I'm just suggesting that explicitly saying you wantreferrer` should be allowed.\nFor newer browsers, noreferrer also prevents sending the Referer header, which you might want to intentionally send.\nI indeed haven't found any case where I'd want to use opener, but I found many instances where the Referer header should still be sent even if window.opener should be nulled.. target='_blank' links that open pages that we control, or from specific target sites for analytics.\nWe're using a module to generate URLs instead of hardcoding paths (a manually maintained reverse router, if you will), and that trips the plugin even for ultimately relative URLs with target='_blank'.\nenforceDynamicLinks: 'never' would work but then it wouldn't catch cases where it's like user input URLs. The suggestion is to have a way to indicate it is intended that Referer is sent without just disabling the rule or making it strictly weaker by disabling dynamic links.. I don't check the position of the tag name here, only for the presence of /> and </.\nThinking about it, checking for the tag name sounds like a job for a possible \"jsx-space-after-opening\" rule...\n. Hm... conceptually, at least in my head, a rule that checks for </ foo> should also check for < foo> and < foo/>.\n. This function (and validateBeforeSelfClosing) were basically copied from jsx-space-before-closing.\n. didn't know GFM supported that :o\n. The intent was to also handle the option === 'never' && adjacent case inside this branch... by doing nothing :D\n. I'm not sure that phrasing helps much; is the /> an example of the bad case (well, no) or the correct case?\n. I'm not sure if unnesting it would be \"correct\", is it forces option === 'always' to be evaluated when option === 'never' && adjacent is true, but that doesn't really matter performance-wise.\n. ",
    "ixisio": "@Kovensky, @ljharb, @anthonator, @guocheng \nfrom eslint docs: \n\nA bind call or arrow function in a JSX prop will create a brand new function on every single render. This is bad for performance, as it will result in the garbage collector being invoked way more than is necessary.\n\nSo, try it like that:\n``` js\nexport class Test extends React.Component {\n  constructor(props) {\n    super(props);\nthis.elementRef = this.elementRef.bind(this);\n\n}\nelementRef (element) {\n    this.element = element;\n  }\nrender () {\n    return (\n        Hello\n    )\n  }\n}\n```\nCheers Andy\n. @guocheng So, solution is clear. Please close this issue... thanks\n. ",
    "J-F-Liu": "I forget to put props in function parameter, realiazed this while sleeping.\n. ",
    "rik": "It would be great if that rule allowed an option for non-required booleans to be excluded. Because if they are not provided, it will be a falsy value.\n. I agree that it should be off by default but I still this as a nice option.\nIf it isn't provided, it's undefined. If it is provided, it has to be true or false or the propType will complain. So I think we're fine in terms of implicit coercions.\n. ",
    "caesarsol": "@vitorbal are you actually working on this? would be a killer feature!\n. There are cases in which you need both inner this and outer this, for example in some event listeners.\nActually I never use that pattern, but happened that someone else used it on the code I'm working on and that prevented the linter to highlight the error.\nAlso, this project does not explicitly state that we are using ES6, in some environments arrow functions could be off limits.\n(I understand it's not a trivial change to support this, I'm just checking! :) )\n. ",
    "agpt": "@yannickcr How to configure this rule in eslintrc ? There is no rule options given in the documentations. Also how to use this rule with react/prop-types ? thanks. @yannickcr How to configure this rule in eslintrc ? There is no rule options given in the documentations. Also how to use this rule with react/prop-types ? thanks. @vitorbal Thanks for the heads up ! :) yes you are right, I didn't understood it at first hand. actually  whenever I try to add object type in propTypes definition, this rule says forbidden. so in react I added something like below to overcome this warning:\nLoginForm.propTypes = {\n  formState: PropTypes.shape({\n    emailid: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequiredform\n  }).isRequired\n}\nnow it is working fine.\nalso do you have any idea what is rule options for following two newly added rules:\n\"react/require-default-props\"\n\"react/no-array-index-key\"\n(I am newbie in react - redux environment)\nThanks.. @vitorbal Thanks for the heads up ! :) yes you are right, I didn't understood it at first hand. actually  whenever I try to add object type in propTypes definition, this rule says forbidden. so in react I added something like below to overcome this warning:\nLoginForm.propTypes = {\n  formState: PropTypes.shape({\n    emailid: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequiredform\n  }).isRequired\n}\nnow it is working fine.\nalso do you have any idea what is rule options for following two newly added rules:\n\"react/require-default-props\"\n\"react/no-array-index-key\"\n(I am newbie in react - redux environment)\nThanks.. ",
    "vitorbal": "@agupta-q4 the rule does not have any extra configuration besides just being turned \"on\" or \"off\". Is there any specific configuration that you are looking for?. I added some extra tests for flow annotation use cases. Unfortunately I couldn't find any codebases using flow to test the rule on. However, I'm willing to react fast to any bugs found after this rule gets published, FWIW.\n. Hope this is okay, sneaked in a fix for the wrong jsdoc for this function.. ",
    "ryancole": "I'm encountering this issue, myself. I've checked my eslint versions, and everything seems to be the most recent. I don't have eslint globally installed, either.\n``\nC:\\Users\\Ryan\\Projects\\league>npm ls --global\nC:\\Users\\Ryan\\AppData\\Roaming\\npm-- (empty)\nC:\\Users\\Ryan\\Projects\\league>npm ls eslint\nleague@0.0.1 C:\\Users\\Ryan\\Projects\\league\n+-- eslint@2.10.2\n`-- UNMET PEER DEPENDENCY graphql@0.6.0\nnpm ERR! peer dep missing: graphql@^0.5.0, required by express-graphql@0.5.1\nnpm ERR! peer dep missing: graphql@~0.5.0, required by graphql-relay@0.4.1\nC:\\Users\\Ryan\\Projects\\league>npm ls eslint-plugin-react\nleague@0.0.1 C:\\Users\\Ryan\\Projects\\league\n+-- eslint-plugin-react@5.1.1\n`-- UNMET PEER DEPENDENCY graphql@0.6.0\nnpm ERR! peer dep missing: graphql@^0.5.0, required by express-graphql@0.5.1\nnpm ERR! peer dep missing: graphql@~0.5.0, required by graphql-relay@0.4.1\n```\nDon't mind the unmet deps for graphql, they're unrelated.\n. Blargh. Nevermind. I think Atom editor was keeping around an old version, or something. I just closed everything out, deleted all node_modules dirs, and started over. Works now.\n. ",
    "vettukal": "I had a global eslint and package.json eslint(1.10.3). What worked for me:\nremove the \"eslint\": \"^1.10.3\", from package.json.\nThen \nrm -rf node_modules && npm uninstall -g eslint eslint-plugin-react\nand \nnpm install --save-dev eslint eslint-plugin-react && npm install\n. ",
    "richard-lopes": "I understand what you mean and this is true. Like you pointed out this is inherited by habits from .Net and Java developers. But these days they are coming en masse to JS and tend to replicate practices they have had for years.\nIn that case I will push a PR to change this in our project.\n. Yes that could be another option. But I try to avoid eslint-disable as much as possible. I think your first answer is reasonable.\n. ",
    "smashercosmo": "Also, for example, in our project we indent only markup in jsx and not expressions. For example\njsx\n<div>\n  {condition &&\n  <div>Hello world!</div>\n  }\n</div>\nWould be awesome to be able to provide options for that kind of formatting.\n. mmm... what does SFC stands for? :)\n. Aaaa... got it)\n. Well, probably because I don't want to create a lot of files with simple components. It doesn't make sense to create a component for such a simple markup. \n. ",
    "InsidersByte": "@yannickcr thanks for the quick fix and deploy! \ud83d\udc4d \n. ",
    "iongion": "In my react project I have non-react ES6 classes that by chance have a render method, can the linter detect and shout when encountering only react classes ?\nclass MediaControl extends Clappr.UICorePlugin {\n  get name() { return 'media_control'; }\n  render() {\n    this.rendered = true;\n    this.update();\n  }\n}\n. @yannickcr I do not get it anymore, awesome!\n. ",
    "vansosnin": "@yannickcr I see, but it doesn't seems to be comfortable to add every action to global ignore list.\n. Oh, that's sad.\nWell, as I said before, injected props are not the thing you want to receive from the outside. Because if you see some prop in component's propTypes without careful exploring of this component, you may want to pass this prop from the outside and this may break the component. This is the only reason.\nActually, this is pretty holywar theme for discuss, and we had one in team :) But we've decided to keep rule prop-types and add injected actions or something to component's propTypes because profit from this rule is much more.\nThank you for you work and reply!\n. @petersendidit now I am burning with shame... Ofcourse you are right, my mistake.\n. ",
    "nmaves": "I too feel the pain of this issue.  The purpose of this rule to to protect developers as the assign properties to a component.  These are never assigned, as they are injected.  Not sure how to clean this up.\n. ",
    "jnields": "I ran into this issue as well and have been injecting actions into props validation as they are added and removed. It's been helpful to detect accessing actions that aren't actually available (e.g. misspelling).\nHere's an example\n```\nimport React, { Component, PropTypes } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\nclass ExampleComponent extends Component {\nstatic get propTypes() {\n    const result = {};\n    Object.keys(actions).forEach(action => {\n        result[action] = PropTypes.func;\n    });\n    result.label = PropTypes.string.isRequired;\n    return result;\n}\n\nconstructor(props) {\n    super(props);\n    this.state = {value: \"\"};\n}\n\nonChange(e) {\n    this.setState({\n        value: e.target.value\n    });\n}\n\nsubmit(e) {\n    e.preventDefault();\n    this.props.saveValue(this.state.value);\n    this.setState({value: \"\"});\n}\n\nrender() {\n    return <form onSubmit={this.submit.bind(this)}>\n        <label>{this.props.label}\n            <textarea value={this.state.value}\n                onChange={this.onChange.bind(this)}/>\n        </label>\n        <button action=\"submit\">Submit</button>\n    </form>;\n}\n\n}\nexport default connect(null, actions)(ExampleComponent);\n```\nas I see it, it really should be validated. The component does interact with the outside, and this just validates that it's accessing an interface that is available. Some extra typing, sure, and it might be useful to have this plugin support this off-the-shelf, but I think it's still valuable enough to be worth some verboseness. \n. I ran into this issue as well and have been injecting actions into props validation as they are added and removed. It's been helpful to detect accessing actions that aren't actually available (e.g. misspelling).\nHere's an example\n```\nimport React, { Component, PropTypes } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\nclass ExampleComponent extends Component {\nstatic get propTypes() {\n    const result = {};\n    Object.keys(actions).forEach(action => {\n        result[action] = PropTypes.func;\n    });\n    result.label = PropTypes.string.isRequired;\n    return result;\n}\n\nconstructor(props) {\n    super(props);\n    this.state = {value: \"\"};\n}\n\nonChange(e) {\n    this.setState({\n        value: e.target.value\n    });\n}\n\nsubmit(e) {\n    e.preventDefault();\n    this.props.saveValue(this.state.value);\n    this.setState({value: \"\"});\n}\n\nrender() {\n    return <form onSubmit={this.submit.bind(this)}>\n        <label>{this.props.label}\n            <textarea value={this.state.value}\n                onChange={this.onChange.bind(this)}/>\n        </label>\n        <button action=\"submit\">Submit</button>\n    </form>;\n}\n\n}\nexport default connect(null, actions)(ExampleComponent);\n```\nas I see it, it really should be validated. The component does interact with the outside, and this just validates that it's accessing an interface that is available. Some extra typing, sure, and it might be useful to have this plugin support this off-the-shelf, but I think it's still valuable enough to be worth some verboseness. \n. ",
    "dspacejs": "I figured out a neat workaround.\nNone of my container components use React's PropTypes; each container's corresponding UI component uses PropTypes validation. If this is the case for your project, you can disable the react/prop-types rule for your containers specifically, thus bypassing the 'propName' is missing in props validation (react/prop-types) error.\nSince all of my container components use Container.jsx as a suffix, I was easily able to disable react/prop-types for all my container files with the following configuration:\njson\n{\n  \"overrides\": [\n    {\n      \"files\": [\"*Container.jsx\"],\n      \"rules\": {\n        \"react/prop-types\": false\n      }\n    }\n  ]\n}. @kpace I just checked my configuration and it's different to what I commented, sorry. Instead of 'react/prop-types': false, try using 'react/prop-types': 0.\nIf it's applicable for your use case, I also recommend using a glob to match all containers instead of that specific container, such as *Container.jsx.. @kpace I just checked my configuration and it's different to what I commented, sorry. Instead of 'react/prop-types': false, try using 'react/prop-types': 0.\nIf it's applicable for your use case, I also recommend using a glob to match all containers instead of that specific container, such as *Container.jsx.. ",
    "kpace": "@de-spajic \nI am still not able to turn off react/prop-types. I tried for specific file loginContainer.jsx with no success. :(\nBelow is my .neutrinorc file.\nThe project structure is:\nmy_project\n    .neutrinorc\n    src/\n        containers/\n            loginContainer.jsx\nAny help is appreciated. Thanks!\n```\nmodule.exports = {\n  use: [\n    [\n      '@neutrinojs/airbnb',\n      {\n        eslint: {\n          rules: {\n            'prefer-template': 'off',\n            'no-console': 'off',\n          },\n          overrides: [\n            {\n          'files': ['src/containers/loginContainer.jsx'],\n          'rules': {\n            'react/prop-types': false,\n          }\n        }\n      ]\n    }\n  }\n],\n[\n  '@neutrinojs/react',\n  {\n    html: {\n      title: 'My project'\n    }\n  }\n],\n'@neutrinojs/karma',\n'neutrino-middleware-sass',\n\n]\n};```. @de-spajic \nI am still not able to turn off react/prop-types. I tried for specific file loginContainer.jsx with no success. :(\nBelow is my .neutrinorc file.\nThe project structure is:\nmy_project\n    .neutrinorc\n    src/\n        containers/\n            loginContainer.jsx\nAny help is appreciated. Thanks!\n```\nmodule.exports = {\n  use: [\n    [\n      '@neutrinojs/airbnb',\n      {\n        eslint: {\n          rules: {\n            'prefer-template': 'off',\n            'no-console': 'off',\n          },\n          overrides: [\n            {\n          'files': ['src/containers/loginContainer.jsx'],\n          'rules': {\n            'react/prop-types': false,\n          }\n        }\n      ]\n    }\n  }\n],\n[\n  '@neutrinojs/react',\n  {\n    html: {\n      title: 'My project'\n    }\n  }\n],\n'@neutrinojs/karma',\n'neutrino-middleware-sass',\n\n]\n};```. ",
    "rafaelgrilli92": "@de-spajic worked like a charm. Cheers!. ",
    "ammaraskar": "Hey could the people wanting this feature post some varied examples of properties being injected into components? I'm trying to create a version of this rule that ignores injected properties that can be statically determined. Currently it can handle really simple snippets like these: \nhttps://github.com/ammaraskar/eslint-injected-proptypes/blob/master/tests/lib/rules/non-injected-prop-types.js#L50-L77\nBut I'm not familiar with all the different patterns there are for this. If it seems like its doable, I'll see if it can be merged back into the parent project.. ",
    "jpollard-cs": "Valid points although I believe the following is an acceptable use-case that is of a nature that is fairly common:\n``` jsx\nimport React, { Component, PropTypes } from 'react';\nclass Dashboard extends Component {\n    constructor(props, context) {\n        super(props, context);\n    this.state = { someElementStyle: { maxHeight: 200 } };\n    this.setRef = ::this.setRef;\n}\ncomponentDidMount() {\n    const node = ReactDOM.findDOMNode(this.someRef);\n    const newHeight = window.innerHeight - node.offsetTop - 30;\n    this.setState({ someElementStyle: { maxHeight: newHeight } });\n}\n\nrender() {\n    return (\n        <div id=\"some-element-id\" style={this.state.someElementStyle} ref={this.setRef}>\n        </div>\n    );\n}\n\nsetRef(ref) {\n    this.someRef= ref;\n}\n\n}\n```\nAFIK there's not much of a better way of going about something like this - my concern is that folks will work around the error by doing something like node.style.maxHeight = '${newHeight}px' which seems like it would be even worse as the Component will now be out of sync with the DOM. Thoughts?\n. @ljharb yeah that's what I've done - just wanted to make sure there wasn't any other reason this was disallowed. Thanks! \n. ",
    "daisymark": "i want konw  too...\n. I konw that!~  https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md\nyou can add this :\nRank.propTypes = {\n  stuff: React.PropTypes.string.isRequired\n}\n. ",
    "rhys-vdw": "\nI think it would make sense to have an option to enforce only the exported function to contain proptype validations.\n\nYes, I'm interested in this feature too. Although I'd be happy with either of these options:\n- Enforce prop types only on exported components.\n- Ignore stateless components (whose definition is typically shorter and more self explanatory)\nI have no experience with ESLint source, but I'm willing to have a shot at submitting a PR.\n. btw, this is probably obvious to most people using ESLint, but you can just prefix simpler components like this:\njs\n// eslint-disable-next-line react/prop-types\nfunction SimpleComponent({ propA, propB }) {\n  return (/* */)\n}\njs\nfunction SimpleComponent(props) {\n  // eslint-disable-next-line react/prop-types\n  const { propA, propB } = props\n  return (/* */)\n}\nI think this is perhaps preferable to the proposal in this thread, since it's opt-in per component.\n. Just updated to latest and started getting this error. Turns out I have a use case for findDOMNode that doesn't fall super neatly into the above categories. Actually I worked out a solution while I was writing this comment, but I'll post it anyway in case it's useful to anyone (or someone knows a cleaner solution).\nI have a decorator called Dimensions that will set probs width and height on the decorated component.\n(not the complete code):\n``` js\nexport default function DimensionsDecorator(DecoratedComponent) {\nclass DimensionsContainer extends Component {\n    constructor(props) {\n      super(props)\n      this.state = { width: 0, height: 0 }\n      this.handleWindowResize = debounce(\n        this.handleWindowResize.bind(this),\n        RESIZE_DEBOUNCE_DELAY_MS\n      )\n    }\ncomponentDidMount() {\n  window.addEventListener('resize', this.handleWindowResize)\n  this.updateDimensions()\n}\n\ncomponentWillUnmount() {\n  window.removeEventListener('resize', this.handleWindowResize)\n}\n\nhandleWindowResize(event) {\n  this.updateDimensions()\n}\n\nupdateDimensions() {\n  // eslint-disable-next-line react/no-find-dom-node\n  const element = findDOMNode(this.innerComponent)\n  if (!isHidden(element)) {\n    const width = element.offsetWidth\n    const height = element.offsetHeight\n    this.setState({ width, height })\n  }\n}\n\nrender() {\n  const { width, height } = this.state\n  return (\n    <DecoratedComponent\n      ref={innerComponent => this.innerComponent = innerComponent}\n      width={width}\n      height={height}\n      {...this.props}\n    />\n  )\n}\n\n}\nreturn DimensionsContainer\n}\n```\nSo, looking at the suggestions above, the closest fit I can think of is requiring components to also implement a containerRef prop perhaps? Something like this?\n`` js\n    componentDidMount() {\n      if (this.containerElement == null) {\n        if (process.env.NODE_ENV === 'development') throw new Error(DimensionsDecorator expected component ${DecoratedComponent.name} +to handle `containerRef` prop`\n        )\n      }\n      window.addEventListener('resize', this.handleWindowResize)\n      this.updateDimensions()\n    }\nrender() {\n  const { width, height } = this.state\n  return (\n    <DecoratedComponent\n      containerRef={element => this.containerElement = element}\n      width={width}\n      height={height}\n      {...this.props}\n    />\n  )\n}\n\n```\n. @maulerjan That's not a problem. There are many times where linter rules are set to communicate that this is not the preferred style, and then require a disable comment.\nFor example:\njsx\nhandleClick = () => {\n  // NOTE: This library does not expose an API for getting a reference to its internal DOM node.\n  // See the issue I've opened at http://github.com/some-person/third-party-component/issues/64\n  // eslint:disable-next-line:react/no-find-dom-node\n  const element = ReactDOM.findDomNode(this.thirdPartyComponentRef.current)\n  alert(element.tagName)\n}. @ljharb FYI\njs\nfunction GenericThankyou({ nextAssignmentId }) {\n  const cardProps = {}\n  if (nextAssignmentId == null) {\n    cardProps.submitText = 'Back to the lobby'\n    cardProps.onSubmit = navigateTo(RailsRoutes.lobby_path())\n  } else {\n    cardProps.submitText = 'Take the next test'\n    cardProps.onSubmit = navigateTo(RailsRoutes.do_ordered_test_path(nextAssignmentId))\n  }\n  return (\n    <TestStepCard {...cardProps}>\n      <Title>{translate('test.complete.thank_you_1')}</Title>\n      <p className='GenericThankyou-text'>\n        {translate('test.complete.message_1')}\n      </p>\n    </TestStepCard>\n  )\n}. (agreed, but I decided to report it anyway). ",
    "mjhm": "@rhys-vdw FWIW -- I disagree -- the proposal as stated is preferable. Disabled eslint rules are a yellow flag for our code reviews.\nWithout this rule some of our developers are opting to avoiding the PropTypes verbosity and eslint errors by just inserting components with {...} instead of JSX.  So we get code looking like\n<ul>\n    {MyInput({ label: 'name' })}\n    {MyInput({ label: 'city' })}\n  </ul>\ninstead of\n<ul>\n    <MyInput label=\"name\">\n    <MyInput label=\"city\">\n  </ul>\nIt's hard to argue with them that the cleaner JSX is worth the verbosity of obvious propTypes declarations for local mini-components.. @ljharb I dunno about that.  Using lots of inline functions instead of SFCs seems pretty ugly to me. But beyond aesthetics it also adds friction to the refactoring process.  For example when MyInput grows up to be a more significant component in it's own component file, I would need to change the inline statements to actual JSX components.  That's not bad in isolated cases, but in the aggregate of a big, fast moving project, it's one more avenue for developer errors that I'd like to avoid.\n. ",
    "koistya": "@lencioni do you use .jsx extension for React components at AirBnb?\n. @lencioni @ljharb I guess you had seen the related discussion here already.\n. ",
    "yamalight": "@ljharb I guess render example wasn't really good here.\nI typically have something like this as render function (mostly to just separate logic and layout):\njs\nexport default function render() {\n    const {something} = this.state;\n    return (\n        <div>\n            <button onClick={this.functionInComponent}>{something}</button>\n        </div>\n    );\n};\nI am not saying linter should read other files, but it shouldn't produce the error here. My guess is ignoring such cases would be more than enough.\n. I have this obsession of splitting code into really small files :)\nJust let me know if you think this is not a valid issue - close it, and I'll just tweak linter per-line where needed.\n. ",
    "coryhouse": "These were all performed via a mobile device on github.com so there was no easy way to merge.\n. So to answer your question, no, I won't go through the re-work of merging these into one PR.\n. Nice! News to me. Thanks for the tip.\n. ",
    "GeoffGodwin": "Just wanted to leave my comment in here for future developers reaching this page. <div/> is not a valid HTML 4.x tag. It's the only base HTML tag (that I know of) that cannot be legally self-closing. If you use a <div/> it can cause very strange issues that can bubble up through a variety of frameworks (looking at you jQuery) making it difficult to trace as it does not throw distinct errors. One particular example being in IE8 where it breaks the DOM tree fairly silently.\nIt is always better practice to use <div></div> even if no content exists between the tags.\nAs a note, <div/> is legitimate XHTML 1.x. However for the sake of compatibility across browsers and versions there is no reason to use it.\nI realize this is ooooold world HTML but it's still very valid today. Cheers!. No arguments there, I just figure underlying it may be trying to generate a real DOM <div/> which would then cause problems. I haven't gone through the project to know how it's generating the actual DOM element so for all I know it's properly making <div></div> but I figured this was a good place to drop the knowledge in anyway.. ",
    "AaronHarris": "Yeah, I'm still not so sure how well an \"exceptions\" option would work, since it seems like there are probably workarounds built into eslint (probably some kind of global, or if anything just add an eslint exception at the comment). But if it's something that might be useful to be implemented with other rules, I think it could work.\nI think perhaps the lazy/fast way to go is simply to have a string config, either \"strict\" (default/as-is) or \"caps-allowed\" so one doesn't have to enter each component that is an exception (since it's not really an exception, but just a misinterpretation by the rule). Both these ideas are technically not mutually exclusive, but I imagine the latter (\"caps-allowed\" or \"all-caps-ok\") requires less code change (mostly just an updated regex). \n. ",
    "eballeste": "@keithamus wondering if you do anything different almost 2 years later or is this still the best approach for these type of scenarios?. ",
    "dirkroorda": "@ljharb I thought that a component is a function with the signature ({ props }) => R or a class with a render function of that signature, where R is any piece of JSX.\nThe wrapper addProp above does not have that signature, so it is not a component.\nOn the other hand, now I think of it, its result is not JSX, but a function that delivers JSX, so it is not a good example.. ",
    "danny-andrews-snap": "The problem with refactoring JSX-returning functions into components is that it can break your tests if you are shallow rendering.\nFor example, in the first case, I could write test case, I might have written a test that asserted that images are rendered for each article. But when I refactored to components, that test would fail, since the ArticleItem and ArticleImage components would be stubbed out. Maybe this is just a shortcoming of shallow rendering?. Hmmm...I see your point in where you refactor out reusable components, but in the case where you just need \"helper components\" which will only ever be used by one component, they are analogous to private functions and, as such, shouldn't be tested directly.. Now your test is aware of the implementation details of your component. \ud83d\ude41 Decide that helper component isn't needed, or split it into two, and your tests break again.\nBTW, enzyme is great, and I love using it. ;). Agreed. In addition, running --fix with this rule enabled completely mangles your code.. ",
    "gunjarinagaraju": "Will u  explain what are all the rules to be followed for  writing jsx,higherorder function,rendermethod. Will u  explain what are all the rules to be followed for  writing jsx,higherorder function,rendermethod. ",
    "d7h": "Yea, I also thought so. In this case, this issue can be closed.\n. ",
    "eddie": "Nice :) but why specific to JSX/react?\n. @dmnd You are right (specific to jsx).. It was early when I wrote that comment. Here is probably the best place :+1:\n. ",
    "jkimbo": "Sounds like a good solution. Thanks!\n. ",
    "iamdustan": "good call @ljharb. Updated accordingly.\n. Lemme know whatever else is needed for this (if anything).\n. how would you recommend doing that? versionUtil seems to be true for any greater version. I initially had:\nvar calleeObjectName = /^ReactDOM$/;\nif (versionUtil.test(context, '0.13.0')) {\n  // ...\n} else if (versionUtil.test(context, '0.14.0')) {\n  // ...\n}\n. we could have the message be 'Do not depend on the return value from ' + callee.object.name + '.render'.\n. I like the initial approach more, but it would also end up being whatever the final else if branch would be. I could just duplicate it in the variable declaration so that is more explicit.\n. do any tests currently verify that the React/ReactDOM identifier is from a require/import call?\n. ",
    "novascreen": "Seems to me like in the first case you basically state that it just has to be an object with any shape, so you get no error.\nIn the second case you gave it a specific shape, but then you use a property that's not in your shape, so you get an error.\nI don't think this is a bug, you'd basically have to disallow the object type if i'm not mistaken.\nAlthough it could be argued that this should trigger when you specifically use a nested property, but not if you just pass along that object to another function or component.\n. ",
    "MichalZalecki": "@ljharb According to this doc, yes https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md\nLook at \"The following patterns are not considered warnings:\". 2. example is failing on that rule.\n. ",
    "jkrems": "Ah, sorry. Should've searched harder.\n. Would it make sense to also allow h(...) as an alternative to React.createElement(...)? It's a relatively common pattern exposed by preact.. ",
    "weekeight": "oh, my miss.I have found all react plugin rule should prefix with 'react/' string\n. ",
    "jedwards1211": "Well one could dispatch Redux actions and store layout info in Redux state, and it will be interesting to see if anyone comes up with a really slick fully-JS layout solution for React components, but when one just needs a few workarounds for the limitations of CSS layout, then component state is a really logical place to put the layout info. \n. Of course that begs the question: eslint leaders wouldn't consider dispatching Redux actions in componentDidMount a code smell, I hope?\n. @mjackson my point exactly\n. @ljharb do you have your build set to fail on eslint errors or not?  I'm always motivated to fix warnings so that I don't have to skim through a lot of cruft to find errors.  If someone doesn't have that motivation it's probably because nothing is forcing them to fix the errors in the first place.\n. @ljharb I find warnings very useful for rules like no-console because I often put in print statements temporarily for debugging, and don't want them to break the build, but I also want to have a reminder to remove them later.\n. If you're a good dev and you know what you're doing, you'll just eslint-disable no-danger.  If you're a bad dev and you don't know what you're doing, you can still just disable this rule and potentially pass code review.  And if you're a clever bad dev you can figure out this pathetically easy workaround and avoid having to even eslint-disable anymore: \n``` jsx\n/ eslint-disable no-danger /\nconst Div = props => \n/ eslint-enable no-danger /\n// look ma, no errors!\nconst takeThatESLint = <script src=\"myEvilScript.js\" />} />\n```\nSo I really don't see what this rule will save anyone from that the well-named dangerouslySetInnerHTML prop won't already.\n. ",
    "ddevault": "Another point: async componentDidMount functions.\n. That option seems to be designed for this case, but it doesn't work with async/await keywords from ES7. Example:\njs\nasync componentDidMount() {\n    const thing = await foobar();\n    this.setState({ thing });\n}\n. Nit sufficiently picked, still an issue :)\n. ",
    "sturmenta": "```javascript\n//warn\nconst wrapWithToastProvider = Comp => props => (\n    \n\n\n);\n//warn\nfunction wrapWithToastProvider(Comp) {\n  return function (props) {\n    return (\n        \n\n\n    );\n  };\n}\n```\nAny help?. ",
    "le0nik": "I tried to add this feature with this PR: https://github.com/yannickcr/eslint-plugin-react/pull/685.\nWill gladly take suggestions and feedback on it.\n. @yannickcr I like it, but it raises a couple of questions:\n1) What would be considered instance-methods and static-methods? Would they be just arrow function properties or also regular functions? I'll illustrate with examples.\nStatics fields:\njs\nclass Hello extends React.Component {\n  static displayName = 'Hello'; // static-properties\n  static fetch() {} // static-methods\n  static process = () => {} // static-methods ?\n}\nInstance fields:\njs\nclass Hello extends React.Component {\n  count = 0; // instance-properties\n  handleClick = () => {} //  instance-methods\n  renderSeciton() {} // instance-methods ?\n}\nI think it should be consistent for both static-methods and instance-methods methods, but then renderSection in the example above would be semantically incorrect, because it wouldn't be an instance method.\n2) Is it possible to combine methods and properties in configuration to allow users to mix them up by default?\nRight now static-methods allows this:\njs\nclass Hello extends React.Component {\n  static prop1 = 'Hello';\n  static fetch() {}\n  static prop2 = 'Bye';\n}\nbut configuration like this:\njs\n[\n  'static-properties',\n  'static-methods'\n]\nwouldn't allow this and users wouldn't be able to go back to the way it was before without applying codemod\nThoughts?\n. @ljharb I think that it's pretty much the same thing, because functions on the prototype can be considered a property too. It's obvious if you use ES5 syntax:\njs\nclass Hello extends React.Component {\n  renderSection: function() {\n  }\n}\nIn my opinion we need to determine what instance actually is. I thought of it as an object itself as opposed to it's prototype and wanted to separate instance functions(which are basically function-valued properties, like handleClick = () => {}) and instance properties which users usually use to store data. The reason for this is that the most common case for function-valued properties on an instance(like handleClick) is the binding to this value(usually for event handlers), so users don't usually replace or assign to those properties later on. So\ninstance-methods would be things like handleClick = () => {};\nand\ninstance-properties would be things like count = 0;\nMaybe there can also be a prototype-methods special keyword, that would allow users to determine how functions like handleClick = () => {} and renderSection() {} should be ordered.\nWhat do you think?\n. This is a good point. Didn't look at it from this perspective.\nFor now I don't know how to move further with this. There are multiple approaches that could be taken.\nCould someone else weigh in on it?\n. @ljharb I've reverted the default order. My initial way of thinking was that this change could be part of 6.0.0, considering that it's in alpha now.\n. ",
    "jozanza": "This may be outside of the scope of this particular PR, but I would love to have more granular control over the ordering without the use of groups. Similar to how regular expressions may be used inside of the order property, it would be really nice to have a syntax that disambiguates static, prototype, instance props/methods. At the moment, this linting rule will not play nice with classes that give the same name to both a static and a prototype/instance property due to this ambiguity.\nPerhaps something along these lines:\njs\n// .eslintrc\n\"react/sort-comp\": [2, {\n  \"order\": [\n    \"foo\", // prototype method (default -- already supported)\n    \"/bar/\", // prototype method regex (already supported)\n    \"static foo\", // static initializer\n    \"static /bar/\", // static initializer regex\n    \"foo=\", // instance initializer\n    \"/bar/=\" // instance initializer regex\n  ]\n}]\nMy apologies if this wasn't quite what was meant by \"weighing in\". Thoughts?\nSidenote: Another thought I've had is that this plugin has utility beyond React Component classes. There's not much keeping it from being generally useful for all ES6+ class declarations. If the ambiguities between static/prototype/instance are tackled, that only leaves a few more cases such as getter/setters and symbols. I'd be happy to create a new issue for discussion if this isn't the appropriate thread.\n. ",
    "ktaras": "Strange. It seems like instance-variables works only for state.\nI specified following order:\n- static-methods\n      - instance-variables\n      - lifecycle\n      - everything-else\n      - render\nWhen I declare\nclass CoolComponent extends Component {\n  state = {};\n  ...\n}\nit's OK, but when I add some custom property, e.g.:\nclass CoolComponent extends Component {\n  state = {};\n  someList = [];\n  ...\n}\nit throws an error:\nsomeList should be placed after componentWillUnmount. Strange. It seems like instance-variables works only for state.\nI specified following order:\n- static-methods\n      - instance-variables\n      - lifecycle\n      - everything-else\n      - render\nWhen I declare\nclass CoolComponent extends Component {\n  state = {};\n  ...\n}\nit's OK, but when I add some custom property, e.g.:\nclass CoolComponent extends Component {\n  state = {};\n  someList = [];\n  ...\n}\nit throws an error:\nsomeList should be placed after componentWillUnmount. ",
    "al002": "same issue here, already updated to eslint-plugin-react@5.1.1\n. running local eslint. It's ok for now, I think is atom problem? I upgraded eslint and eslint-react-plugin, but I'm not close atom, then I reopen it, the warning is gone.\nthanks for reply.\n. ",
    "CiGit": "In this case, only the <App> tag is an error so the fix function only applies to it.\nTest case\nTo have the output you (and I) expect, the way errors are computed should be changed.\nie JSXElement's indentation compared to something like ROOT - 1line, not to its direct parent / opening tag.\nIMO that's an other issue\n. ",
    "zouxuoz": "@jayphelps @CiGit How can I help to merge this PR?\n. ",
    "mmiller42": "@jayphelps I know of one -- I don't think #830 doesn't support tabs. That could be filed as a separate bug. (Currently it counts the number of characters in the indent and inserts spaces, I believe.)\n. ",
    "FezVrasta": "I had to use\n\"react/jsx-indent\": [2, 4],\n. It's in package.json\n\"eslintConfig\": {\n    \"parser\": \"babel-eslint\",\n    \"extends\": [\n      \"eslint:recommended\",\n      \"plugin:react/recommended\",\n      \"airbnb\"\n    ],\n    \"env\": {\n      \"browser\": true,\n      \"node\": true,\n      \"mocha\": true,\n      \"es6\": true\n    },\n    \"plugins\": [\n      \"babel\",\n      \"react\",\n      \"jsx-a11y\"\n    ],\n    \"parserOptions\": {\n      \"ecmaVersion\": 6,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n        \"jsx\": true\n      }\n    },\n    \"rules\": {\n      \"import/no-unresolved\": \"error\",\n      \"no-else-return\": \"off\",\n      \"comma-dangle\": [\n        \"error\",\n        \"always-multiline\"\n      ],\n      \"indent\": [\n        \"error\",\n        2,\n        {\n          \"SwitchCase\": 1\n        }\n      ],\n      \"spaced-comment\": [\n        \"error\",\n        \"always\",\n        {\n          \"markers\": [\n            \"#\"\n          ]\n        }\n      ],\n      \"no-param-reassign\": [\n        \"error\",\n        {\n          \"props\": false\n        }\n      ],\n      \"new-cap\": \"off\",\n      \"babel/new-cap\": \"warn\",\n      \"quotes\": [\n        \"error\",\n        \"single\",\n        {\n          \"avoidEscape\": true,\n          \"allowTemplateLiterals\": true\n        }\n      ],\n      \"jsx-quotes\": [\n        \"error\",\n        \"prefer-single\"\n      ],\n      \"no-console\": \"warn\",\n      \"no-debugger\": \"warn\",\n      \"no-restricted-syntax\": \"off\",\n      \"max-len\": [\n        \"warn\",\n        {\n          \"code\": 120,\n          \"ignoreUrls\": true\n        }\n      ],\n      \"prefer-template\": \"error\",\n      \"no-use-before-define\": \"off\",\n      \"newline-per-chained-call\": \"off\",\n      \"arrow-body-style\": [\n        \"error\",\n        \"as-needed\"\n      ],\n      \"react/jsx-indent\": [\n        \"error\",\n        2\n      ],\n      \"react/jsx-indent-props\": [\n        \"error\",\n        2\n      ],\n      \"react/jsx-first-prop-new-line\": [\n        \"error\",\n        \"multiline\"\n      ],\n      \"react/prefer-stateless-function\": \"off\",\n      \"jsx-a11y/href-no-hash\": \"error\",\n      \"jsx-a11y/label-has-for\": \"error\",\n      \"jsx-a11y/mouse-events-have-key-events\": \"error\",\n      \"jsx-a11y/role-has-required-aria-props\": \"error\",\n      \"jsx-a11y/role-supports-aria-props\": \"error\",\n      \"jsx-a11y/aria-props\": \"error\"\n    },\n    \"settings\": {\n      \"import/resolver\": {\n        \"webpack\": {\n          \"config\": \"./internals/webpack/webpack.test.babel.js\"\n        }\n      }\n    }\n  },\n. It's in package.json\n\"eslintConfig\": {\n    \"parser\": \"babel-eslint\",\n    \"extends\": [\n      \"eslint:recommended\",\n      \"plugin:react/recommended\",\n      \"airbnb\"\n    ],\n    \"env\": {\n      \"browser\": true,\n      \"node\": true,\n      \"mocha\": true,\n      \"es6\": true\n    },\n    \"plugins\": [\n      \"babel\",\n      \"react\",\n      \"jsx-a11y\"\n    ],\n    \"parserOptions\": {\n      \"ecmaVersion\": 6,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n        \"jsx\": true\n      }\n    },\n    \"rules\": {\n      \"import/no-unresolved\": \"error\",\n      \"no-else-return\": \"off\",\n      \"comma-dangle\": [\n        \"error\",\n        \"always-multiline\"\n      ],\n      \"indent\": [\n        \"error\",\n        2,\n        {\n          \"SwitchCase\": 1\n        }\n      ],\n      \"spaced-comment\": [\n        \"error\",\n        \"always\",\n        {\n          \"markers\": [\n            \"#\"\n          ]\n        }\n      ],\n      \"no-param-reassign\": [\n        \"error\",\n        {\n          \"props\": false\n        }\n      ],\n      \"new-cap\": \"off\",\n      \"babel/new-cap\": \"warn\",\n      \"quotes\": [\n        \"error\",\n        \"single\",\n        {\n          \"avoidEscape\": true,\n          \"allowTemplateLiterals\": true\n        }\n      ],\n      \"jsx-quotes\": [\n        \"error\",\n        \"prefer-single\"\n      ],\n      \"no-console\": \"warn\",\n      \"no-debugger\": \"warn\",\n      \"no-restricted-syntax\": \"off\",\n      \"max-len\": [\n        \"warn\",\n        {\n          \"code\": 120,\n          \"ignoreUrls\": true\n        }\n      ],\n      \"prefer-template\": \"error\",\n      \"no-use-before-define\": \"off\",\n      \"newline-per-chained-call\": \"off\",\n      \"arrow-body-style\": [\n        \"error\",\n        \"as-needed\"\n      ],\n      \"react/jsx-indent\": [\n        \"error\",\n        2\n      ],\n      \"react/jsx-indent-props\": [\n        \"error\",\n        2\n      ],\n      \"react/jsx-first-prop-new-line\": [\n        \"error\",\n        \"multiline\"\n      ],\n      \"react/prefer-stateless-function\": \"off\",\n      \"jsx-a11y/href-no-hash\": \"error\",\n      \"jsx-a11y/label-has-for\": \"error\",\n      \"jsx-a11y/mouse-events-have-key-events\": \"error\",\n      \"jsx-a11y/role-has-required-aria-props\": \"error\",\n      \"jsx-a11y/role-supports-aria-props\": \"error\",\n      \"jsx-a11y/aria-props\": \"error\"\n    },\n    \"settings\": {\n      \"import/resolver\": {\n        \"webpack\": {\n          \"config\": \"./internals/webpack/webpack.test.babel.js\"\n        }\n      }\n    }\n  },\n. react$ npm ls | grep eslint\n\u251c\u2500\u252c babel-eslint@6.0.4\n\u251c\u2500\u252c eslint@2.12.0\n\u251c\u2500\u252c eslint-config-airbnb@9.0.1\n\u2502 \u2514\u2500\u2500 eslint-config-airbnb-base@3.0.1\n\u251c\u2500\u252c eslint-import-resolver-webpack@0.3.0\n\u251c\u2500\u2500 eslint-plugin-babel@3.2.0\n\u251c\u2500\u252c eslint-plugin-import@1.8.1\n\u2502 \u251c\u2500\u2500 eslint-import-resolver-node@0.2.0\n\u251c\u2500\u252c eslint-plugin-jsx-a11y@1.5.3\n\u251c\u2500\u2500 eslint-plugin-react@5.2.1\n. react$ npm ls | grep eslint\n\u251c\u2500\u252c babel-eslint@6.0.4\n\u251c\u2500\u252c eslint@2.12.0\n\u251c\u2500\u252c eslint-config-airbnb@9.0.1\n\u2502 \u2514\u2500\u2500 eslint-config-airbnb-base@3.0.1\n\u251c\u2500\u252c eslint-import-resolver-webpack@0.3.0\n\u251c\u2500\u2500 eslint-plugin-babel@3.2.0\n\u251c\u2500\u252c eslint-plugin-import@1.8.1\n\u2502 \u251c\u2500\u2500 eslint-import-resolver-node@0.2.0\n\u251c\u2500\u252c eslint-plugin-jsx-a11y@1.5.3\n\u251c\u2500\u2500 eslint-plugin-react@5.2.1\n. Yes it happens even with the versions you have suggested.\nThe component is:\n```\n/\n\n * Button\n \n */\nimport React, { PropTypes } from 'react';\nimport styleguide from './styleguide';\nimport CSSModules from 'react-css-modules';\nimport styles from './styles.styl';\n@CSSModules(styles, { allowMultiple: true })\nclass Button extends React.Component {\n  static styleguide = styleguide;\nstatic defaultProps = {\n    type: 'button',\n    primary: false,\n    disabled: false,\n  };\nrender() {\n    // Type of the button\n    const type = (this.props.type === 'anchor') ? 'button' : this.props.type;\n// Style of Button's inner element\nlet innerStyleName = 'Button__inner';\nif (this.props.primary) innerStyleName += ' Button__inner--primary';\n\nif (this.props.type === 'anchor') {\n  innerStyleName += ' Button__inner--anchor';\n} else {\n  innerStyleName += ' Button__inner--button';\n}\n\nif (this.props.disabled) {\n  innerStyleName += ' Button__inner--disabled';\n}\n\nreturn (\n  <button\n    type={type}\n    styleName='Button'\n    className={this.props.className}\n    onClick={this.props.onClick}\n    style={this.props.style}\n    disabled={this.props.disabled}\n  >\n    <div\n      styleName={innerStyleName}\n      style={{ backgroundColor: this.props.color }}\n      className={this.props.innerClassName}\n    >\n      {this.props.children}\n    </div>\n  </button>\n);\n\n}\nsubmit() {\n    return true;\n  }\n}\nButton.propTypes = {\n  type: PropTypes.oneOf(['button', 'submit', 'reset', 'anchor']),\n  primary: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  innerClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  style: PropTypes.object,\n  disabled: PropTypes.bool,\n  color: PropTypes.string,\n};\nexport default Button;\n```\n. Yes it happens even with the versions you have suggested.\nThe component is:\n```\n/\n\n * Button\n \n */\nimport React, { PropTypes } from 'react';\nimport styleguide from './styleguide';\nimport CSSModules from 'react-css-modules';\nimport styles from './styles.styl';\n@CSSModules(styles, { allowMultiple: true })\nclass Button extends React.Component {\n  static styleguide = styleguide;\nstatic defaultProps = {\n    type: 'button',\n    primary: false,\n    disabled: false,\n  };\nrender() {\n    // Type of the button\n    const type = (this.props.type === 'anchor') ? 'button' : this.props.type;\n// Style of Button's inner element\nlet innerStyleName = 'Button__inner';\nif (this.props.primary) innerStyleName += ' Button__inner--primary';\n\nif (this.props.type === 'anchor') {\n  innerStyleName += ' Button__inner--anchor';\n} else {\n  innerStyleName += ' Button__inner--button';\n}\n\nif (this.props.disabled) {\n  innerStyleName += ' Button__inner--disabled';\n}\n\nreturn (\n  <button\n    type={type}\n    styleName='Button'\n    className={this.props.className}\n    onClick={this.props.onClick}\n    style={this.props.style}\n    disabled={this.props.disabled}\n  >\n    <div\n      styleName={innerStyleName}\n      style={{ backgroundColor: this.props.color }}\n      className={this.props.innerClassName}\n    >\n      {this.props.children}\n    </div>\n  </button>\n);\n\n}\nsubmit() {\n    return true;\n  }\n}\nButton.propTypes = {\n  type: PropTypes.oneOf(['button', 'submit', 'reset', 'anchor']),\n  primary: PropTypes.bool,\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  innerClassName: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  style: PropTypes.object,\n  disabled: PropTypes.bool,\n  color: PropTypes.string,\n};\nexport default Button;\n```\n. @ljharb If I remove the static properties nothing changes\n@yannickcr it's defined inside one of the defaults I import\n. @ljharb If I remove the static properties nothing changes\n@yannickcr it's defined inside one of the defaults I import\n. I noticed I can use a computed property name to avoid the error.\nfunction Button({ ['data-action']: dataAction }: Props) {. I want this \ud83d\ude4f. it should, because you are still referencing a possibly outdated value. `this.state` maybe? (with code formatting). ",
    "mattdell": "I'm going to have a look at this now but want to flag to @EvNaverniouk that the PR has conflicts. Can you fix @EvNaverniouk ?\nI think the issue using the pattern const {params} = this.props is something we can live with. It would be better to find unused instances of this.props.params as a first pass and we can work on extending this for the former pattern as well.\n. What needs to happen to get this merged?\n. ",
    "antialias": "looks like it needs another merge / rebase\n. I resolved the conflicts between this branch and master and pushed them to my fork: https://github.com/antialias/eslint-plugin-react/commit/dffa1f341037f6b82bb02f9fee6542200f942eaa\nThere were no ambiguities, i.e. I'm 100% confident that I resolved them correctly.\n@yannickcr, I could submit a replacement PR or @EvNaverniouk, you could hard reset this branch to the commit from my branch and the PR would show as resolved.\n. ",
    "Faradey27": "@EvNaverniouk do you plan to fix conflicts?\n. thank you guys, nice rule and nice job\n. ",
    "burabure": "this will be very useful! I'll try to test this on our codebase (1M+ lines) and report back\n. this will be very useful! I'll try to test this on our codebase (1M+ lines) and report back\n. I have this rule Implemented here https://github.com/burabure/eslint-plugin-burabure/blob/master/lib/rules/no-direct-mutation-state.js @ljharb would you like this merged?. I have this rule Implemented here https://github.com/burabure/eslint-plugin-burabure/blob/master/lib/rules/no-direct-mutation-state.js @ljharb would you like this merged?. this might clash with https://github.com/yannickcr/eslint-plugin-react/pull/936\n. @EdwardDrapkin @ljharb maybe I should take this PR as an starting point for #936 does that sound like a good idea?\n. @EdwardDrapkin ping\n. @EdwardDrapkin ping\n. @ljharb I don't think @EdwardDrapkin is going to reply. Should I go ahead?\n. @EdwardDrapkin sorry to hear that, I have a friend that had MRSA and I know it really sucks. Hope you feel better soon!\n. I don't have time to see this through, if anyone is up to it please do =). all changes done.\n. I dont have time to refactor according to #850. if anyone want to do it please do =). yeah it's the import destructuring:\n```js\nimport React, { PropTypes } from 'react'\nconst { string, any } = PropTypes // doesn't work\nconst { string, any } = React.PropTypes // works\n...\n``. @ljharb ready for review. @ljharb ready for review!. we're iterating through the array of patterns, so each pattern is transformed to a regex only once\n. done!\n. fixed that, I think this review is showing the older version of the code because I squashed\n. I understand but right now what i'm doing is enabling users to useas a wildcard only, the user won't be able to use a regexp in the pattern; onlyas a wildcard. If you're suggesting dropping the regexp implementation detail altogether could you suggest how to handle cases like:'-foo-','-foo--bar','-foo-bar-baz'and so on in a performant manner? \n. I Agree, I'll refactor that.\n. or maybe you're suggesting that we should only supportuserInput` and don't provide the user with a way to use wildcards?\n. just cheked how eslint does it, and they just straight take regexes from users https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/lib/rules/line-comment-position.js#L63\nI'll commit the other changes and push, I think the current implementation is safe enough (just wildcard *)\n. done!\n. done!\n. ",
    "tristanbbq": "@yannickcr: I updated to 6.2.2 and added rule as following:\n\"react/no-unused-prop-types\": [\"warn\", { \"customValidators\": [], \"skipShapeProps\": true }],\nBut I keep getting warnings PropType is defined but props is never used for a PropType.shape.\nSomething I'm missing here?\n. @EvNaverniouk: just created https://github.com/yannickcr/eslint-plugin-react/issues/837\n. Could this be related: https://github.com/yannickcr/eslint-plugin-react/pull/611 ?\n. ",
    "benjick": "This is the repo/issue: https://github.com/Intellicode/eslint-plugin-react-native/issues/15\n. ",
    "gre": "good point. thx\n. ",
    "fatfisz": "Oh... thanks a lot, it didn't occur to me somehow.\n. I'd like to work on this during the weekend :)\nShould this be an expansion of react/jsx-curly-spacing or a completely new rule?. Thanks for the pointer, I missed that.. I've got a few questions about the config:\n\nShould a situation be allowed where there are different spacing rules for attributes and children? E.g. never add spaces in attributes and always add spaces in children.\nShould a situation be allowed where spacing in the attributes is ignored and only checked in children? This is similar to the current situation, but with the roles reversed.\n\nSeeing as some people were confused as to why this rule was not working with the child expressions maybe another option is not necessary for now? (so the answers would be \"no\" and \"no\") The additional option could be added later on if there was a need.\nOtherwise the answers to those questions will help me get the shape of the new option right.. Ok, so how about this:\n\nBy default config is for both attributes and children.\nIf the user wants to configure attributes or children separately, they can pass an additional option object under a \"children\" or an \"attributes\" properties.\n\nExamples:\n\n\nThis config never allows spaces either for attributes or children:\n['warning', 'never']\n\n\nThis config never allows spaces for attributes, but completely ignores children:\n['warning', 'never', {\n  children: 'ignore'\n}]\n\n\nThis config never allows spaces or newlines around attribute expressions, but requires spaces in children and allows multiline expressions in children:\n['warning', 'never', {\n  allowMultiline: false,\n  children: ['always', { allowMultiline: true }]\n}]. So how would config look for ignored attributes and \"never\" in children? I think that's the final piece of info I need.. Makes sense, I thought of ['never', { children: true, attributes: false }], so it's essentially what you've written in the first example. So \"attributes\" is true by default and \"children\" is false by default. They both have to be \"always\" or \"never\" at the same time.\n\n\nThanks for the patience! Will hopefully finish implementing this soon.. Good idea :)\nI will go with requireSpaces as a placeholder for now, but it doesn't read well with \"never\" for me.\nIn this case children: true means\nchildren: {\n  requireSpaces: 'never',  // The new \"foo\" property\n  allowMultiline: true\n}\nThe default for the whole thing becomes { attributes: true, children: false }.. Ok, let's go with that. And yes, the full defaults are this.. Btw. I think there was a small bug: when only \"spacing\" was set in the extended options, the following line was setting \"allowMultiline\" to undefined:\nvar multiline = context.options[1] ? context.options[1].allowMultiline : true;\nThen in all the following conditions !multiline was being checked, which yielded a different result than the default true value would.\nNow I'll be checking if the property exists on the config object (using the has package, I found it being used in other rules).. There were no tests for this behavior - I'll add some.. I think we should do something about the \"spacing\" property name, it's quite similar to the new \"spaces\" property. How about merging the \"spacing\" object into the config object?. Ok, will change it to \"when\", sounds good.. Found another bug:\n<App foo={\n{ bar: true, baz: true }\n} />;\nThis would get 2 errors using the default settings: There should be no space after '{' and There should be no space before '}'.\nThis is because conditions for the object literal spacing were written so that the second one was never reached:\nif (sourceCode.isSpaceBetweenTokens(first, second)) {\n            reportNoBeginningSpace(node, first);\n          } else if (!config.allowMultiline && isMultiline(first, second)) {\n            reportNoBeginningNewline(node, first, config);\n          }\nIf the first condition fails, isMultiline will return false - there is no newline.\nWill fix this and add appropriate tests.. Each of the bugfixes is in a separate commit indeed. Separate PRs would mean some work on the tests (they are the most time-consuming), but I could do them if this would help.\nEdit: oops, the first fix is mixed in with other things, unfortunately.. This is fixed in #1177.. This is fixed in #1177.. I think I'll add a few tests that have both attributes and children set to check that the defaults are being properly set.. I mistakenly removed the branch -.-. Sure.. Rebased.\nJust curious, why do you want to avoid merge commits? It's less time-consuming to solve the conflicts once; also the history is being lost.. I've added back the old tests (avoiding duplication) and restored the old config behavior. Should I leave any comments about what is from where?. I was asking because in my experience it takes much longer to do a rebase, especially when there are many commits already. E.g. yesterday merge took < 5 mins, but the rebase took over half an hour. But the argument about cherry-picking speaks to me.\nJust for the future reference - would it be ok to squash the commits next time while rebasing?. Sorry, forgot about updating the docs. Will do that around tomorrow, I'm pumped out after work today.. Sorry, forgot about updating the docs. Will do that around tomorrow, I'm pumped out after work today.. Took a bit more time, but here it is.. Took a bit more time, but here it is.. Would it be possible for some other collaborators to review this?. It seems that resolving conflicts through GitHub results in a merge. Will rebase instead.. It seems that resolving conflicts through GitHub results in a merge. Will rebase instead.. Thanks a lot!. Thanks a lot!. I've rebased this. There's only the unresolved problem of the duplicate test left.. Just today my workmate suggested a similar idea - forbidding constructor in React components altogether.\nThe rationale for this is that it's easy to forget to call super with props, and according to React docs this may result in a bug:\n\nWhen implementing the constructor for a React.Component subclass, you should call super(props) before any other statement. Otherwise, this.props will be undefined in the constructor, which can lead to bugs.\n\nThen we were wondering what are the usecases for constructors, and there it is:\n- Initializing properties on this from the arguments (which includes state): since React only passes one argument to the constructor, props, which is also available as this.props when initializing through class fields, we have this covered.\n- Side effects: we don't want any in the constructor, so we ignore that.\nSo even with constructor we have all bases covered. As for the class fields, aren't they quite popular already in the React community? This rule wouldn't need to be turned on by default, so the decision would be up to devs. If they wanted to turn this rule on, they'd need to support class fields anyway - because otherwise where would they initialize state without a constructor?. It doesn't enforce that you call super with the proper arguments though (not just super(), but super(props)), and that's my problem with using the constructor in React components.. Ok, will do.. This test is identical with the one just below it, so I suggest it stays removed.. I'm not sure if having only a part the code conform to the new convention is a good idea, especially since this convention can be applied automatically. How about I make a separate PR which replaces all occurences of parserOptions: parserOptions with parserOptions everywhere?. (or is there any reason for the duplicated test?). I've just read in the ESLint docs that it's using JSON schema - then went over to the JSON schema reference page (this one is very good) and saw that this technique there.\nAfter a little investigation, it should be supported since the schema validation itself was added: https://github.com/eslint/eslint/commit/fd8fbe721781ce26957ad0f0b3ffbb33201ac387. According to the changelog, the version was 0.22.0, released on 2015-05-30.\nThe version of is-my-json-valid used then is 2.10.0, which already handled refs: https://github.com/mafintosh/is-my-json-valid/blob/21aa9b8916a2efb3172d17d2d3d1b517668834c7/test/json-schema-draft4/ref.json\nBtw. \"definitions\" is just a convention; the ref can reference any path in the schema.. I changed a few of them to include children too - they should be at the top. I did not remove any tests, just enhanced a few. The tests without the options should mostly be at the top of the list.\nShould I split them to test attributes and children separately?. Ok, now all tests that are currently on the master branch are also added here.. ",
    "benvinegar": "@ljharb \u2013\u00a0Updated with documentation.\n. ",
    "stefanbuck": "@ljharb try it again, please.. You're right, it should be only one error. The openingIndent and closingIndent values are correct, but I think the report() is called with the wrong node. I tried to pass the openingElement and the closeingElement but still it's not working. Do you have anything in mind how to solve this? \n. ",
    "akozhemiakin": "Yes, and as you can see in the provided code chunk propTypes are defined on it. But it seems that eslint does not see it.\n. Yes, and as you can see in the provided code chunk propTypes are defined on it. But it seems that eslint does not see it.\n. @ljharb I thought about adding a test but it is a deprecated rule that uses jsx-wrap-multilines rule under the hood.\nSo I'm not sure how to test it properly. Should we just copy this test https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-wrap-multilines.js? Or should we create separate test with a single random valid code snippet to just test that it works?\n. Yeah, it is definitely a good approach to duplicate that test file :) It revealed another bug with missing meta property (fixable: 'code'). I fixed it and added the test.\n. ",
    "Bouncey": ":+1: Would love this. Great news @yannickcr!! :medal_sports: \nThe next question is obviously about the next release :+1: :wink: . ",
    "mandx": "Oh yes, I'm sorry I forgot about that. Here it is:\n$ npm ls | grep eslint\n\u251c\u2500\u252c babel-eslint@6.0.4\n\u251c\u2500\u252c eslint@2.11.1\n\u251c\u2500\u252c eslint-import-resolver-webpack@0.3.0\n\u251c\u2500\u252c eslint-plugin-import@1.8.1\n\u2502 \u251c\u2500\u2500 eslint-import-resolver-node@0.2.0\n\u251c\u2500\u2500 eslint-plugin-react@5.1.1\n. ",
    "jrajav": "Is this ever going to get fixed? To this day, still have to keep jsx-indent turned off because this doesn't work as expected (or at least have an option).. Made a new issue since @ljharb perhaps indicated it's an issue with lacking parens (but that seems like it should be a valid use case?).. Note: Also an issue with jsx-indent-props, e.g.:\njs\n{\n  condition\n    ? <El\n        prop1={ 1 }\n        prop2={ 2 }\n      />\n    : <OtherEl\n        prop1={ 1 }\n        prop2={ 2 }\n      />\n}\nI could make a separate issue for this if necessary.. ",
    "OliverJAsh": "\nReact is lenient, so constructor() { super(); } works, so this is just a stylistic preference.\n \ud83d\udc4d 3\n\nI would argue this is more than a stylistic preference\u2014it can actually lead to bugs. Consider this example, where a method that relies on props is invoked from the constructor:\nts\nclass Foo extends Component {\n  constructor()\n    super();\n    this.state = this.getInitialState();\n  }\n  getInitialState() {\n    // ERROR: `props` is `undefined` because the super constructor did not receive `props`\n    const x = this.props.y + 1;\n    return { x }\n  }\n}. > React is lenient, so constructor() { super(); } works, so this is just a stylistic preference.\n\n\ud83d\udc4d 3\n\nI would argue this is more than a stylistic preference\u2014it can actually lead to bugs. Consider this example, where a method that relies on props is invoked from the constructor:\nts\nclass Foo extends Component {\n  constructor()\n    super();\n    this.state = this.getInitialState();\n  }\n  getInitialState() {\n    // ERROR: `props` is `undefined` because the super constructor did not receive `props`\n    const x = this.props.y + 1;\n    return { x }\n  }\n}. @ljharb \n\nIf you want to use this.props in the constructor, you need to pass props to super. Otherwise, it doesn't matter because React sets .props on the instance from the outside immediately after calling the constructor.\n\nhttps://discuss.reactjs.org/t/should-we-include-the-props-parameter-to-class-constructors-when-declaring-components-using-es6-classes/2781/2\nIn my example, I'm calling a method (which relies on this.props) from the constructor. So, it will be undefined.. ",
    "joetidee": "I would also like to see this rule in place, i.e. if props is used in the constructor then constructor(props) and super(props) must exist. An example of where this might cause problems:\nclass Foo extends Component {\n    constructor() {\n        super();\n        this.someObj = {\n            bar: this.props.intl.formatMessage(...),\n        };\n    }\n}\nEslint will not currently thrown any errors here. I would suggest enforcing no use of this.props in the constructor and instead recommend just using props. . I would also like to see this rule in place, i.e. if props is used in the constructor then constructor(props) and super(props) must exist. An example of where this might cause problems:\nclass Foo extends Component {\n    constructor() {\n        super();\n        this.someObj = {\n            bar: this.props.intl.formatMessage(...),\n        };\n    }\n}\nEslint will not currently thrown any errors here. I would suggest enforcing no use of this.props in the constructor and instead recommend just using props. . Please can you fix this - having the same issue :(. Please can you fix this - having the same issue :(. Excellent - thanks - have upgraded to 7.0.0 and now fixed.. I have the following packages installed:\n\n\"eslint-config-airbnb\": \"^14.0.0\"\n\"eslint-plugin-react\": \"^6.10.3\"\n\nRan npm ls and no invalid dependencies showed up.. ok, thanks for that.. Has this rule been added?. Has this rule been added?. it didn't.. It's an interesting question because the error does throw up in the browser console so React is recognising that the property has not been correctly assigned a PropTypes.*. So, should eslint allow us developers to catch this in the build pipelines before it gets to production - i think yes. Currently, there isn't a rule that could cover this, so perhaps we need a rule called no-proptype-assigment ?. Either that or that the property does not have a PropTypes assignment.. Ah I see. In which case if custom PropTypes have to take the form of a function, then I guess, yes, it is detecting that it is an object literal and throwing an error of incorrect-proptype . ",
    "didaquis": "Something similar to me. Two arrow functions in code, one of them is marked as Parsing Error: Unexpected token =\n\nThis is my configuration file. \n\n. @ljharb Thanks for the information!. ",
    "rrandom": "Yes, but in https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md it says that could be fixable. Wich confuse me\n. Yes, but in https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md it says that could be fixable. Wich confuse me\n. @ljharb Sadly, the same. Could not fix.\n```\nimport React, { PropTypes } from 'react';\nconst Routes = ({ history }) => {\n  return (\n  Hello, world! \n  );\n};\nexport default Routes;\n```\neven with single file \n```\n.\\node_modules.bin\\eslint src\\routes\\index.jsx --fix\n3:19  warning  'history' is defined but never used                     no-unused-vars\n  5:3   error    Expected indentation of 4 space characters but found 2  react/jsx-indent\n\u2716 2 problems (1 error, 1 warning)\n```\n. @ljharb Sadly, the same. Could not fix.\n```\nimport React, { PropTypes } from 'react';\nconst Routes = ({ history }) => {\n  return (\n  Hello, world! \n  );\n};\nexport default Routes;\n```\neven with single file \n```\n.\\node_modules.bin\\eslint src\\routes\\index.jsx --fix\n3:19  warning  'history' is defined but never used                     no-unused-vars\n  5:3   error    Expected indentation of 4 space characters but found 2  react/jsx-indent\n\u2716 2 problems (1 error, 1 warning)\n```\n. ",
    "forresto": "@ljharb I thought the point was to avoid creating functions in renders?\nSo I've ended up with:\n``` js\nimport React, {createElement as el} from 'react'\nclass ButtonYay extends React.Component {\n  constructor (props) {\n    super(props)\n    this.boundOnClick = this.onClick.bind(this)\n  }\n  render () {\n    return el('button'\n    , { onClick: this.boundOnClick }\n    , 'Yay'\n    )\n  }\n  onClick: (event) {\n    console.log(this)\n  }\n}\n```\n. ",
    "rodoabad": "@ljharb if you have jsx-no-bind turned off and have jsx-handler-names turned on this will error out.\n. @evcohen did you submit a PR for this?\n. Voting for option 2!. @ljharb if it can be inferred then I think not explicitly setting a displayName is fine. Anonymous functions or classes though should still be required to have a display name.\njs\nexport default function() {\n  return <span>{'foo'}</span>;\n}\nThis should throw an error.. @ljharb yeah you're talking about having three options right? I agree to that.\n\nExplicit everything.\nInferred if possible otherwise you gotta do it bro!\nDo not set a display name.\n\nThis is the one that I like that's why I said I like option 2. Now I just realized it could mean the second item in both those lists. Hahaha. \ud83d\ude2d . ",
    "insin": "Changed the option to ignore and made the documentation more generic, as per other rules.\n. React doesn't support it, but you can use Babel plugins to handle usage of 'class' and 'for' at transpile time for teams who prefer to keep using them, e.g: https://github.com/insin/babel-plugin-react-html-attrs/issues/4#issuecomment-225307332\n. ",
    "seavan": "does it actually work with / @extends React.Component / now?\nI am trying with the current release and I cannot get eslint to verify PropTypes for a component which extendds subclass of React.Component, even if I add that jsdoc line.. does it actually work with / @extends React.Component / now?\nI am trying with the current release and I cannot get eslint to verify PropTypes for a component which extendds subclass of React.Component, even if I add that jsdoc line.. @ljharb it doesn't work that way either (updated the repo). @ljharb it doesn't work that way either (updated the repo). it seems like it always returns here:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/cfd1c3461d01a14a92f665ae89498b1c407085ea/lib/util/Components.js#L235\nI debugged this piece of code and comment is always null for my example.. it seems like it always returns here:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/cfd1c3461d01a14a92f665ae89498b1c407085ea/lib/util/Components.js#L235\nI debugged this piece of code and comment is always null for my example.. it's returning null.. @pauldijou it worked, thank you!. @pauldijou it worked, thank you!. ",
    "appsforartists": "@ljharb Isn't that what the squash and merge button is for? \ud83d\ude09 \nI've been lazy and just made these changes from the GitHub UI.\n. Oh.  I thought they fixed that.  \ud83d\ude22 \n. Glad I could be helpful!\nThanks for putting this module together, and for landing my patch. :smiley:\n. Fixed.\nHonestly, I wasn't sure what the right word was to use there.  jsx-uses-react fixes eslint errors, rather than introducing them.\n. ",
    "developit": "Every use case for dangerouslySetInnerHTML can be achieved more safely by transforming the intended content to VDOM first and rendering it as children. \njs\n<script>{`console.log(true && 'hello')`}</script>\nFor markdown, convert md -> ast -> vdom, or md -> html -> vdom. Last step can be done easily using the native DOMParser, after which converting DOM to VDOM is cake.\nJust my 2\u00a2! \ud83d\ude0a\n. (to Kent's point though, I have definitely seen a lot of people use dangerouslySetInnerHTML for server rendering use cases)\n. I love cake \ud83d\ude04. I didn't mean to say it's always better to parse, just safer since it's an inactive DOM. \n@mjackson - ah I totally misunderstood what you were getting at there, yes. \n. Someone suggested defaulting to a warn level, is that a happy medium here?\n. Discussion is ongoing. Due to the fact that noreferrer predates noopener, there are cases where noopener is ignored (because the behavior is not implemented).\nI'll update here if there's a conclusive result to the discussion.. ",
    "rileybracken": "I use it to render SVG's that are exported from AI or sketch. I can control the fill other CSS properties directly in my style sheets. \nHere is an example. \n```\nconst ACTIVITY_ICONS = {\n  photography: \"...\",\n  biking: \"...\",\n  climbing: \"...\",\n  backpacking: \"...\",\n};\nconst createIcon = (svg) => ({ __html: svg });\nconst Activity = ({ name }) => ( \n  \n);\n\n```\n(I did this on my phone so I may have messed up somewhere)\n. ",
    "michaeljcalkins": "I don't have a strong feeling about this but we use it four times in our application because we needed to interact with an API built for JS written years ago.  We know we shouldn't use it and will remove it eventually.\n. ",
    "erikmueller": "Totally agree with @mjackson regarding the explicit naming. We e.g. are in the process of rewriting parts of a legacy monolith to react. Naturally we have APIs returning old html content that needs to be rendered unescaped. I guess a lot of people (hopefully) start off by converting small parts of their existing architecture and are dealing with these kinds of \"problems\".\n\nYou're telling people that using a sometimes-necessary piece of the API is not recommended\n\ntrue\nIf anyone insists what about dangerouslySetInnerHTMLWithPotentialXSS xD\n. ",
    "mzabriskie": "Just adding my 2\u00a2 to what has already been said. I use dangerouslySetInnerHTML for handling markdown content. I don't know of any other way to do this shy of doing something ugly:\njs\ncomponentDidUpdate() {\n  this._output.innerHTML = marked(this.props.markdown);\n}\n. ",
    "DylanPiercey": "@mjackson I personally think that this whole api is offensive and too opinionated. As others have said every templating language out there has the ability to output unescaped html for a reason.\nI still personally think https://github.com/facebook/react/issues/6253 or similar is needed in React for things like @rileybracken's issue with SVG's. Yes unescaped html needs to be explicit by why is it frowned upon? There are many legitimate use cases, all mentioned above.\nI've personally built a CMS with React, and let me tell you it wouldn't be possible without this API.\n. @ljharb, Sorry I wasn't meaning to call out the linting options for being opinionated, I was referring the the dangerouslySetInnerHTML={{__html: ...}} api in general. Just something that's always bothered me with React.\n. ",
    "gerbal": "well, apparently I've been misunderstanding where to bind functions. Thanks :stuck_out_tongue: \n. ",
    "dorsha": "I don't know which part of my code cause this error. I ran eslint for the entire repository and got the error.\nI also tried on a single file and got the same error.\n\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/jsx-no-bind.js#L23\nSeems that callee.property is undefined.\nThis is the stacktrace:\nCannot read property 'name' of undefined\nTypeError: Cannot read property 'name' of undefined\n    at EventEmitter.CallExpression (/Users/dorsha/dev/demisto/web-client/node_modules/eslint-plugin-react/lib/rules/jsx-no-bind.js:23:24)\n    at emitOne (events.js:101:20)\n    at EventEmitter.emit (events.js:188:7)\n    at NodeEventGenerator.enterNode (/Users/dorsha/dev/demisto/web-client/node_modules/eslint/lib/util/node-event-generator.js:40:22)\n    at CodePathAnalyzer.enterNode (/Users/dorsha/dev/demisto/web-client/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:607:23)\n    at CommentEventGenerator.enterNode (/Users/dorsha/dev/demisto/web-client/node_modules/eslint/lib/util/comment-event-generator.js:97:23)\n    at Controller.traverser.traverse.enter (/Users/dorsha/dev/demisto/web-client/node_modules/eslint/lib/eslint.js:905:36)\n    at Controller.__execute (/Users/dorsha/dev/demisto/web-client/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/Users/dorsha/dev/demisto/web-client/node_modules/estraverse/estraverse.js:501:28)\n    at Controller.Traverser.controller.traverse (/Users/dorsha/dev/demisto/web-client/node_modules/eslint/lib/util/traverser.js:36:33)\n. No Error:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nclass ErrorExample extends Component {\nrender() {\n    return ;\n  }\n}\nexport default ErrorExample;\n```\nError:\n```\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nclass ErrorExample extends Component {\nrender() {\n    return ;\n  }\n}\nexport default connect()(ErrorExample);\n```\nThis cause an error as well:\n```\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nclass ErrorExample extends Component {\nrender() {\n    return ;\n  }\n}\nexport default injectIntl(ErrorExample);\n```\n. Redux actions error:\n```\nimport * as Api from '../util/api';\nfunction updateTest(res) {\n  return {\n    type: 'TEST_TYPE',\n    payload: res\n  };\n}\nexport function test() {\n  return dispatch => {\n    Api.post('/test', {})\n      .then((res) => {\n        dispatch(updateTest(res));\n      });\n  };\n}\n```\nWhen removing the dispatch(updateTest(res)); line, the error disappears...\n. Our ESLint dependencies:\n\n. Yup, fixed.\nThanks for the quick response.\n. ",
    "aviadl": "Here you are \nimport React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nclass ErrorExample extends Component {\nrender() {\n    return ;\n  }\n}\nexport default connect()(ErrorExample);\n. ",
    "jaysig": "i'm trying to run it within atom which I would assume means local. Here's what I have installed via npm\n\"devDependencies\": {\n    \"eslint\": \"^2.8.0\",\n    \"eslint-config-airbnb\": \"^8.0.0\",\n    \"eslint-plugin-import\": \"^1.6.0\",\n    \"eslint-plugin-jsx-a11y\": \"^1.0.3\",\n    \"eslint-plugin-meteor\": \"^3.5.2\",\n    \"eslint-plugin-react\": \"^5.2.1\"\n  },\n. That fixed it, thank you. Would it be possible to update this page https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md; so, that could be more clear? \n. ",
    "DrewML": "Huh - interesting. It's not flagging this particular scenario in our codebase, but I at least verified in ASTExplorer that it should be working with that rule. For some reason I was operating under the assumption that ESLint rules wouldn't be checking JSX nodes in the AST, but I guess that rule just looks for any identifier.\nThanks for the sanity check @ljharb.\n. Should have realized sooner - wasn't being flagged because browser was set to true for env, and status is part of the browser globals\n. ",
    "babsonmatt": "Just came across this issue as well. Just came across this issue as well. ",
    "AoDev": "Same here and I just want to add that using && does work properly. (in eslint-plugin-react: 6.10.0) with jsx-indent.\n```\n// Ternary fails\n{store.isLoading\n  ? \n  : \n}\n// && passes\n{store.isLoading &&\n  \n}\n``. Hello, Could we allow an option like:skipWithExternalFunction: true`\nWould pass:\n```js\nstatic getSomeValue (props) {\n  return //\n}\nrender () {\n  const someValue = MyClass.getSomeValue(this.props)\n  // fine because there is function where the argument is the entire prop object\n}\nMyClass.propTypes = {\n  prop1: React.PropTypes.number,\n  prop2: React.PropTypes.bool,\n  ...\n};\n```\nWould not pass:\n```js\nrender () {\n  return {this.props.prop1}\n  // fail because prop2 isn't used.\n}\nMyClass.propTypes = {\n  prop1: React.PropTypes.number,\n  prop2: React.PropTypes.bool,\n  ...\n};\n```\nCaveat:\nI don't know how far the code can be analysed. The only issue with this approach is that it might\nhave false negative. The external function might not be consuming all the props. But the point is\nhaving some compromise until the \"perfect\" solution comes in.\n. Hello, Could we allow an option like: skipWithExternalFunction: true\nWould pass:\n```js\nstatic getSomeValue (props) {\n  return //\n}\nrender () {\n  const someValue = MyClass.getSomeValue(this.props)\n  // fine because there is function where the argument is the entire prop object\n}\nMyClass.propTypes = {\n  prop1: React.PropTypes.number,\n  prop2: React.PropTypes.bool,\n  ...\n};\n```\nWould not pass:\n```js\nrender () {\n  return {this.props.prop1}\n  // fail because prop2 isn't used.\n}\nMyClass.propTypes = {\n  prop1: React.PropTypes.number,\n  prop2: React.PropTypes.bool,\n  ...\n};\n```\nCaveat:\nI don't know how far the code can be analysed. The only issue with this approach is that it might\nhave false negative. The external function might not be consuming all the props. But the point is\nhaving some compromise until the \"perfect\" solution comes in.\n. \"huge anti pattern\" feels pretty exaggerated. I don't want to destructure and recreate possibly thousands of objects just because I have a static helper function created for the sake of code clarity.  I could just move everything in the render function and it would be super bloated.. \"huge anti pattern\" feels pretty exaggerated. I don't want to destructure and recreate possibly thousands of objects just because I have a static helper function created for the sake of code clarity.  I could just move everything in the render function and it would be super bloated.. @ljharb\nCan be up to 5 - 6 arguments.\nNote that this does not happen often. It's rare that such helper functions are needed. But the goal is to avoid disabling this eslint rule or making some work-around.\nThis is only for sake of code clarity in some particular case.\nIt is more readable and I wanted to avoid caring about the order of the arguments.\nA real code example in one component I have, is for a scrollable listview:\n(render is more complex in actual code)\n``js\nstatic getStickAtBottomStyle({ headerIndex, height, scrollbarWidth, headersCount }) {\n  return {\n    position: 'absolute',\n    bottom:${(headersCount - 1 - headerIndex) * height}px,\n    width:calc(100% - ${scrollbarWidth}px)`\n  };\n}\n...\nrender () {\n  ...\n  {stickyState.isStickyAtBottom &&\n    \n      {this.props.children}\n    \n  }\n  ...\n}\n```\nReasons for splitting in a function:\n\ncan be unit tested easily\nclearer to read than putting the computations in render.\n\nI agree with you that I could pass the arguments in order but sometimes there are bit too many.\nOn the other hand, these examples are almost the same ones in the docs about SFC. That's how I reached this issue in the first place ;). @ljharb\nCan be up to 5 - 6 arguments.\nNote that this does not happen often. It's rare that such helper functions are needed. But the goal is to avoid disabling this eslint rule or making some work-around.\nThis is only for sake of code clarity in some particular case.\nIt is more readable and I wanted to avoid caring about the order of the arguments.\nA real code example in one component I have, is for a scrollable listview:\n(render is more complex in actual code)\n``js\nstatic getStickAtBottomStyle({ headerIndex, height, scrollbarWidth, headersCount }) {\n  return {\n    position: 'absolute',\n    bottom:${(headersCount - 1 - headerIndex) * height}px,\n    width:calc(100% - ${scrollbarWidth}px)`\n  };\n}\n...\nrender () {\n  ...\n  {stickyState.isStickyAtBottom &&\n    \n      {this.props.children}\n    \n  }\n  ...\n}\n```\nReasons for splitting in a function:\n\ncan be unit tested easily\nclearer to read than putting the computations in render.\n\nI agree with you that I could pass the arguments in order but sometimes there are bit too many.\nOn the other hand, these examples are almost the same ones in the docs about SFC. That's how I reached this issue in the first place ;). Note that I am trying to use the props in a static method of the same component class. Not some function in another module and / or another file. . Note that I am trying to use the props in a static method of the same component class. Not some function in another module and / or another file. . ",
    "ahstro": "Title should probably be changed to \"jsx-curly-spacing doesn't account for comments\" since things like {something /* comment */} triggers an error.. ",
    "trusktr": "@ljharb Ah, that might be why, I didn't think about that. However if I do that then I think it will break the CSSX transpile step. cc @krasimir\n. @ljharb Ah, that might be why, I didn't think about that. However if I do that then I think it will break the CSSX transpile step. cc @krasimir\n. Ah, well, I believe I should give eslint-plugin-cssx a try first! :} Didn't know it existed until you just mentioned it. I'll close, and probably won't need to re-open.\n. Ah, well, I believe I should give eslint-plugin-cssx a try first! :} Didn't know it existed until you just mentioned it. I'll close, and probably won't need to re-open.\n. I had modules: true, but then I landed here to find that sourceType: 'module' is needed too. It's not obvious. Can we make these things true by default? Is it safe to assume most people use modules nowadays (when using ESLint)?. ",
    "krasimir": "@trusktr I just made this commit. As a source for the new test case I used your code above and the test passes. I thought that maybe the order of running the plugins matter but that wasn't the case. No matter if I place eslint-plugin-react first or eslint-plugin-cssx the test passes without any errors. Is it possible that it's something in your setup that causes eslint-plugin-cssx to not be part of the process.\n. ",
    "TheSavior": "Our team likes and enforces this rule because we find it easier and quicker to read the render function to see what a component is doing by seeing the well named function calls instead of inline maps.\nReal code sample from our repo:\nReact.createClass({\n  // ...\n  render() {\n    return (\n      <div>\n        <table>\n          <tbody>\n            {this.renderCashRows()}\n            {this.renderTransferRows()}\n            {this.renderUnsureRows()}\n            {this.renderUnsupportedRows()}\n          </tbody>\n        </table>\n        {this.renderTaxConsequences()}\n      </div>\n    );\n  }\n  // ...\n});\nWe find it way more readable to see that than to see the inline maps those functions are doing. Because of this, we socially enforce it everywhere, but want to be able to lint for it as well.\nI agree with your point about SFC. We don't use that syntax as much as we should and I'm not sure how my opinion would change under those circumstances. \n. @ljharb, since you are a \ud83d\udc4e  on the PR, can you provide some more insight into your thoughts on the code sample in my above comment? I'd like to better understand how you would approach that type of render with multiple iterations. I'm sure I'll learn something.\nWhat if the calls to map weren't just passing an item to a prop, what if the map statements were many lines doing some work on each item and then passing the results as props to a child item? What if those functions had if statements in them to conditionally return out instead of doing the map? Do you still believe that work should be done directly in the render function?\n. @ljharb, since you are a \ud83d\udc4e  on the PR, can you provide some more insight into your thoughts on the code sample in my above comment? I'd like to better understand how you would approach that type of render with multiple iterations. I'm sure I'll learn something.\nWhat if the calls to map weren't just passing an item to a prop, what if the map statements were many lines doing some work on each item and then passing the results as props to a child item? What if those functions had if statements in them to conditionally return out instead of doing the map? Do you still believe that work should be done directly in the render function?\n. I agree that small components are much better. Easier to understand, easier to test, easier to reuse. \nHowever, it isn't always possible, tables are one example since a component can't return multiple trs. \nThe point here isn't that because tables cause a problem we should give up on small components, just that there are many different sides to this story and tradeoffs to any given approach. \n. I agree that small components are much better. Easier to understand, easier to test, easier to reuse. \nHowever, it isn't always possible, tables are one example since a component can't return multiple trs. \nThe point here isn't that because tables cause a problem we should give up on small components, just that there are many different sides to this story and tradeoffs to any given approach. \n. Alright, I'll close this out and our team will discuss a different approach. I'd like to continue the conversation over in #651 to keep it all together.\n. Alright, I'll close this out and our team will discuss a different approach. I'd like to continue the conversation over in #651 to keep it all together.\n. I know there are a lot of false positives for this rule in our codebase and unfortunately that is keeping us from turning it on. I think I'd actually prefer false negatives than false positives for this lint rule. False negatives would make me think it would be great if it was smarter and could be improved whereas false positives are annoying for teams and make it more likely it will get turned back off.\nI'm not sure how feasible a shift in that direction would be, I haven't taken a close look at the code. Do others have the same perspective on false positives vs false negatives?. I know there are a lot of false positives for this rule in our codebase and unfortunately that is keeping us from turning it on. I think I'd actually prefer false negatives than false positives for this lint rule. False negatives would make me think it would be great if it was smarter and could be improved whereas false positives are annoying for teams and make it more likely it will get turned back off.\nI'm not sure how feasible a shift in that direction would be, I haven't taken a close look at the code. Do others have the same perspective on false positives vs false negatives?. I know that many prefer using the class syntax over the React.createClass syntax but I have not seen anything official say that createClass approach is deprecated or not \"best practice\".\nHere are the references to createClass I was able to find in the docs, none of which seem to imply what you are saying. \nhttps://facebook.github.io/react/docs/react-api.html#components\nhttps://facebook.github.io/react/docs/react-without-es6.html. This error is occurring for us internally at Facebook, we are on latest.\n$ flow version\nFlow, a static type checker for JavaScript, version 0.53.1. This error is occurring for us internally at Facebook, we are on latest.\n$ flow version\nFlow, a static type checker for JavaScript, version 0.53.1. I'm not sure, I'll run this rule through our codebase and flag all of the places that it seems to have false positives. That should give a pretty good signal. . I'm not sure, I'll run this rule through our codebase and flag all of the places that it seems to have false positives. That should give a pretty good signal. . React will only work if user-land components are defined in PascalCase, otherwise it converts them to strings:\n<foo />\n<Foo />\nbecomes\nReact.createElement(\"foo\", null)\n  React.createElement(Foo, null)\nso perhaps this should just say\nIf you are not using JSX.\n. nit: \nto **only** be set by the transpiler.\n. This has been my favorite find in our codebase where we were assigning to state.\nthis.setState({\n  foo: this.state.foo++\n});\n. ",
    "nickjanssen": "Actually I've encountered more strange behaviour, unless I'm missing something:\n\n. If I'm using a third-party library with objects like store, history or navigator, how am I supposed to know what that object will look like? Do I really have to dive into the redux code, find out what the store object looks like, and then use a shape object as a propType that I have to maintain myself?. ",
    "jokeyrhyme": "@ljharb my changes here are just a proposal of course, with the maintainers having final say. I made these changes assuming that the MAJOR SemVer number would be bumped, so ESLint 2 users could still use the previous version without any problems.\nDo we want to continue making changes to the ESLint 2 version of this plugin? Or can we safely leave it as-is?\n. Okay. If I get time later, I'll change this PR to keep the old ESLint 2 rule format. Or, someone else can beat me to it by creating a less turbulent PR. :)\n. @ljharb okies, I've removed all rule format changes, this is purely about enabling usage with ESLint 3 without touching existing support for ESLint 2\n. @ljharb woah, that's really good planning on ESLint's part. I'll see how extra-curricular I'm feeling this weekend. :)\n. Do you have a GitHub Milestone for 6.0, or a list somewhere? Want some help?\n. ",
    "elliottsj": "What's blocking this from being merged?\n. ",
    "paazmaya": "Living on the edge....\n. Thanks for pointing that out @MoOx, I have seem not to read that far...\n. ",
    "bl-nero": "May I ask what exactly is wrong with using default values in functional components?\n. May I ask what exactly is wrong with using default values in functional components?\n. ",
    "adamterlson": "@bl-nero By \"default values\" I assume you mean default function arguments instead of using Component.defaultProps, yes?\nIf yes, one answer is that a component is easiest to reason about if there's only one consistent mechanism by which props are defaulted.  If DeveloperA uses defaultProps and DeveloperB uses function argument default syntax, there is no standardized pattern by which the same result is affected in the code base. \nSince React has a mechanism for this, it should tend to be the default method over the other methods shown.  So, another answer is, because it's statically set on the component itself, writing tooling against it is much simpler than trying to figure out what happens to the values of props internal to the component's implementation.\n. ",
    "Tom910": "\nIn other words, the name \"foo\" might mean different things in different files.\n\nYes, the name of the decorator may vary. It's up to the developer to make up some convention and to name imports conveniently and in the same way.\nThere is no need to perform any deep checks. This addition allows the developer to use any optimization decorator, not only pure mixin, but any other, including his own utilities. The only purpose of allowDecorators option is to provide names of this tools to the rule.\nHow can this be made in a different way? Analyze the decorator? Or check imports? There can be too many variations.\n. Thanks!\n. @lencioni Yes, I agree, but it has already been implemented @yannickcr commit https://github.com/yannickcr/eslint-plugin-react/commit/8b567a6523765ff82833fa7570d47c15ae451963\n@ljharb Yes, it is =)\n. Replace on a new example\n. ",
    "cristian-sima": "Thanks\n. @petersendidit any workaround to keep it in the same file?\n. Tx mate\n. This rule is nice, but what if we are required by default to pass the className as a prop. Let's take for instance, the react-modal case:\njsx\n      <Modal\n        className=\"Modal__Bootstrap modal-dialog\"\n        onRequestClose={this.handleCloseModal}\n        isOpen>\n. Thanks for your reply.\nIn order to not use it, I have to disable the rule, which in turn may be contra-productive, as I can have in the same function or file other components which should indeed not receive the className or style props.\nI propose a different approach. What about introducing an option to tell the rule which components should be ignored.\nAs in my example, react-modal has always the Modal component. I can specify eslint to ignore any component with the name Modal.\nWell, yes this approach has a down-side as I may write in the future components with that name, but I think is less likely.\n. Did you commit your changes?\n. I am asking this, because it is a blocking script which prevents me from commiting the code\n. Here you find all the info\njson\n  \"webpack-dashboard\": \"^0.2.0\",\n    \"webpack-dev-server\": \"^1.16.2\"\n  \"babel-core\": \"^6.18.2\",\n    \"babel-eslint\": \"^7.1.0\",\n    \"babel-jest\": \"^17.0.2\",\n    \"babel-loader\": \"^6.2.7\",\n    \"babel-plugin-add-module-exports\": \"^0.2.1\",\n    \"babel-plugin-flow-react-proptypes\": \"^0.17.2\",\n    \"babel-plugin-react-html-attrs\": \"^2.0.0\",\n    \"babel-plugin-syntax-flow\": \"^6.18.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.19.0\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n    \"babel-plugin-transform-flow-strip-types\": \"^6.18.0\",\n    \"babel-plugin-transform-react-constant-elements\": \"^6.9.1\",\n    \"babel-plugin-transform-react-inline-elements\": \"^6.8.0\",\n    \"babel-plugin-transform-react-remove-prop-types\": \"^0.2.10\",\n    \"babel-polyfill\": \"^6.16.0\",\n    \"babel-preset-es2015\": \"^6.18.0\",\n    \"babel-preset-react\": \"^6.16.0\",\n    \"babel-preset-stage-0\": \"^6.16.0\",\n    \"babel-preset-stage-2\": \"^6.18.0\",\n    \"bootstrap\": \"^4.0.0-alpha.5\",\n    \"css-loader\": \"^0.25.0\",\n    \"eslint\": \"^3.10.2\",\n    \"eslint-plugin-flowtype\": \"^2.25.0\",\n    \"eslint-plugin-jsx-a11y\": \"^3.0.1\",\n    \"eslint-plugin-react\": \"^6.7.1\",\n    \"fetch-jsonp\": \"^1.0.2\",\n    \"file-loader\": \"^0.9.0\",\n    \"flow-bin\": \"^0.35.0\",\n    \"flow-status-webpack-plugin\": \"^0.1.7\",\n    \"font-awesome\": \"^4.7.0\",\n    \"history\": \"^4.4.0\",\n    \"jest-cli\": \"^17.0.3\",\n    \"json-loader\": \"^0.5.4\",\n    \"lodash.memoize\": \"^4.1.2\",\n    \"moment\": \"^2.16.0\",\n    \"node-sass\": \"^3.13.0\",\n    \"react\": \"^15.4.0\",\n    \"react-a11y\": \"^0.3.3\",\n    \"react-addons-shallow-compare\": \"^15.4.0\",\n    \"react-autosuggest\": \"^7.0.1\",\n    \"react-collapse\": \"^2.3.3\",\n    \"react-dom\": \"^15.4.0\",\n    \"react-height\": \"^2.1.1\",\n    \"react-history\": \"^0.15.1\",\n    \"react-hot-loader\": \"^3.0.0-beta.6\",\n    \"react-modal\": \"^1.5.2\",\n    \"react-motion\": \"^0.4.5\",\n    \"react-notification\": \"^6.4.0\",\n    \"react-redux\": \"^4.4.6\",\n    \"react-router\": \"^3.0.0\",\n    \"react-router-redux\": \"^4.0.7\",\n    \"react-sidebar\": \"^2.2.1\",\n    \"react-tooltip\": \"^3.2.1\",\n    \"redux\": \"^3.6.0\",\n    \"redux-form\": \"^6.2.0\",\n    \"redux-logger\": \"^2.7.4\",\n    \"redux-promise-middleware\": \"^4.1.0\",\n    \"redux-saga\": \"^0.13.0\",\n    \"redux-thunk\": \"^2.1.0\",\n    \"redux-ui\": \"0.0.15\",\n    \"reselect\": \"^2.5.4\",\n    \"sass-loader\": \"^4.0.2\",\n    \"style-loader\": \"^0.13.1\",\n    \"superagent\": \"^2.3.0\",\n    \"superagent-promise\": \"^1.1.0\",\n    \"url-loader\": \"^0.5.7\",\n    \"webpack\": \"^1.13.3\",\n    \"webpack-preset\": \"^0.2.0\",\n    \"webpack-preset-babel\": \"^0.2.0\",\n    \"webpack-preset-babel-stage-2\": \"^0.2.0\"\nWhat do you mean by using local?\n. If I do add\n\"react/jsx-tag-spacing\": 0,\nto eslintconfigfile it does not complain\n. It seems now it does not appear . Strange\n. ",
    "acusti": "I would love to see this merged! Tried applying @dozoisch\u2019s changes in my own fork based on newer eslint (first tried to rebase, but 10c6f23866b58dff5a7f8d16eb8b8a62cc997a66 made it a bit too hairy for me), then applied it to my .eslintrc, which extends the airbnb config, with this rule:\n'react/sort-comp': [2, {\n            order: [\n                'type-annotations',\n                'static-methods',\n                'lifecycle',\n                'everything-else',\n                '/^render.+$/',\n                'render'\n            ],\n        }],\nand it worked a charm! I also use eslint-plugin-flowtype along with flowtype/define-flow-type and 'flowtype/use-flow-type and no conflicts there.\n. I would love to see this merged! Tried applying @dozoisch\u2019s changes in my own fork based on newer eslint (first tried to rebase, but 10c6f23866b58dff5a7f8d16eb8b8a62cc997a66 made it a bit too hairy for me), then applied it to my .eslintrc, which extends the airbnb config, with this rule:\n'react/sort-comp': [2, {\n            order: [\n                'type-annotations',\n                'static-methods',\n                'lifecycle',\n                'everything-else',\n                '/^render.+$/',\n                'render'\n            ],\n        }],\nand it worked a charm! I also use eslint-plugin-flowtype along with flowtype/define-flow-type and 'flowtype/use-flow-type and no conflicts there.\n. ",
    "timdorr": "Some ideas to ease the transition:\nAutomatically reference the top node rendered on the component\n``` js\nclass MyComponent extends Component {\n  componentDidMount() {\n    this._topDOMNode.scrollIntoView();\n  }\nrender() {\n    return \n  }\n}\n```\nSomehow do shorthand aliasing for the ref prop:\n``` js\nclass MyComponent extends Component {\n  componentDidMount() {\n    this.node.scrollIntoView();\n  }\nrender() {\n    return \n  }\n}\n```\nProvide a reference to the DOM node separately from the element reference:\n``` js\nclass MyComponent extends Component {\n  componentDidMount() {\n    this.nodeRefs.myNode.scrollIntoView();\n  }\nrender() {\n    return \n  }\n}\n```\n. @notaurologist There isn't a feature deprecation, just a potentially bad pattern, which is definitely ESLint's domain.\n. ",
    "vladshcherbin": "@gaearon hey, can you leave a short note or is there a link to read why ref callbacks are preferred to ref strings? Thanks\n. ",
    "notaurologist": "@gaearon Great idea! However, is this in addition to a warning within React itself? If the React team definitely wants to deprecate this, seems like it should definitely warn there, as well. Not everyone may use ESLint, and IMO, it's not ESLint's responsibility to notify users about feature deprecation.\n. @timdorr I agree, but as @gaearon said: \"We want to deprecate it eventually (not right now) because it blocks certain improvements in React in the future.\" I think this definitely warrants an additional warning in React.\n. ",
    "PEM--": "Suppose that I want to create a behavior component that acts on the DOM of its provided child (like a fake mutation observer, for instance):\njs\nclass Measure extends Component {\n  componentDidMount() {\n    const childNode = findDOMNode(this).children[0];\n    // Here I call whatever I want when the child is loaded\n    // @NOTE: There's no refs implied.\n  }\n  render() {\n    const { children } = this.props;\n    // Here, I'm agnostic to whatever the child might be, a pure function or a class\n    return children;\n  }\n}\nNow, as I'm agnostic to the type children passed like this:\nhtml\n<Measure>\n  <AnyChildWithoutRefsLikePureComponent/>\n</Measure>\nI could clone the AnyChildWithoutRefsLikePureComponent, check it its a Component or a pure function, and if it's a pure function, turns it into a Component just to get a dynamic ref on it. But that would defeat the whole purpose of being agnostic to Component vs pure function.\n. Actually, it seems to me that all examples drill down to the same behavior. If we could setup a callback ref on a children passed as prop, the findDOMNode could then be removed.\nA function like React.Children.addCallbackRef could do it.\nSounds legitimate. A parent can call its children \ud83d\ude09 \n@gaearon, what do you think of this?\n. Indeed, I agree. It's like having a form that parses its input fields instead of giving the fields the capabilities to inform the form itself. It's parsing against eventing. And that's against the purpose of React \ud83d\udc4d \nDOM based operation should ensure that a parsable DOM is present.\n. @Andarist: Thanks but it only works if your children are immediate DOM elements \ud83d\ude09 \n. @kouhin Thanks, this leads me on the right track. eslint-config-airbnb-deps uses the 6.2.0.\nThe error has been introduce with 6.2.1.\nI suggest updating your package.json to use the 6.2.0.\n. ",
    "soyarsauce": "@gaearon small side note, in the after block - I believe the findDOMNode(childComponentStringRef) example is supposed to read this.inputNode.focus(); rather than this.inputNode.scrollIntoView();\n. ",
    "fhelwanger": "There's an example here of what @PEM-- described.\nBasically, it's an element that pins its children scroll position to bottom as it grows.\n``` js\nconst { render, findDOMNode } = ReactDOM\nclass PinToBottom extends React.Component {\n/// ...\ncomponentWillUpdate() {\n    const node = findDOMNode(this)\n    // ...\n  }\ncomponentDidUpdate() {\n    if (this.pinToBottom) {\n      const node = findDOMNode(this)\n      node.scrollTop = node.scrollHeight    \n    }\n  }\nrender() {\n    return React.Children.only(this.props.children)\n  }\n}\n```\nAnd then it can be used by any content container, like that:\n``` js\n\n\n    {lines.map((line, index) => (\n      {line}\n    ))}\n  \n\n```\nI don't know how it could be made simpler by using callback refs or something else.\n. @Andarist  @PEM-- Yes! The nice (or bad :smile:) thing about findDOMNode is that it can be another React.Component, something like:\njs\n<PinToBottom>\n  <List>\n    {lines.map((line, index) => (\n      <ListItem key={index}>{line}</ListItem>\n    ))}\n  </List>\n</PinToBottom>\nAnd it'll find its DOM node anyway.\n- Here is the working example, using findDOMNode.\n- Here is the non working example, using callback refs.\nOne can argue that by using findDOMNodeyou're breaking the component's encapsulation, but besides that, I think that for this particular use case findDOMNode is more straightforward than cloneElement + callback refs. But maybe it's just me :wink: \n. Just read @gaearon comments, and I agree 1000% with:\n\nWhether a component returns many nodes is its implementation detail. It should be possible to change it without breaking any code in other components, but this would not work with our HOC. So the pattern itself is problematic.\n\nNow that I understand the problem better and how this make returning multiple nodes from render very difficult, I rewrote the example to wrap every children of PinToBottom inside a div.\nIt's much cleaner and doesn't break encapsulation!\nhttps://codepen.io/anon/pen/qNVrwW?editors=0010\n. @perrin4869 Check this: https://github.com/yannickcr/eslint-plugin-react/issues/678#issuecomment-232332949\nYou can use the ref available inside PinToBottom to get the DOM node you need. Then you can pass it to jQuery, Velocity, etc.\n. @perrin4869 You don't need this.domNode = findDOMNode for it to work. The ref prop on your div already gives you the DOM element. Thus, this.node is already your DOM element.\nYou can do something like the following:\n``` js\nclass Foo extends Component {\n  componentDidMount() {\n    $(this.node).slideDown();\n  }\nrender() {\n    return  this.node = c } />;\n  }\n}\n``\n. @webdif Take a look atfindDOMNode(childComponentStringRef)` here https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220.\nI think it's what you're looking for.\n. @webdif Take a look at findDOMNode(childComponentStringRef) here https://github.com/yannickcr/eslint-plugin-react/issues/678#issue-165177220.\nI think it's what you're looking for.\n. Just copied and pasted your code.... it works. http://codepen.io/anon/pen/peRPrz?editors=0010\nIt must be something else in your code. Try to create a minimal example that reproduces your problem.. ",
    "koenpunt": "Your third example's \"After\" doesn't match with \"Before\". \njs\nthis.inputNode.scrollIntoView();\nShould be \njs\nthis.inputNode.focus();\n. @pandaiolo but you probably shouldn't be accessing the DOM node from another component.\n. I think the best solution would be to let the video component have a isPlaying prop, which changes trigger the required methods on the video component.\nSomething like this: \n``` jsx\nclass Video extends React.Component {\ngetDefaultProps() {\n    return { isPlaying: false }\n  }\ncomponentDidUpdate(prevProps) {\n    if(this.props.isPlaying !== prevProps.isPlaying) {\n      this.props.isPlaying ? this.video.play() : this.video.pause()\n    }\n  }\nrender() {\n    return  this.video = el} src=\"...\">\n  }\n}\n```\n. Are you using React without Redux or flux or anything? Because then I can understand. But when you do use one of those, you really want to control the video using the state of the application.\n. Also, I'm not sure about the schema.\nCurrently it requires patterns like so:\njs\n\"no-common-typos\": [{\n  pattern: /somepattern/i,\n  correct: \"SomePattern\"\n}]\nBut maybe a format like this is better:\njs\n\"no-common-typos\": {\n  \"SomePattern\": /somepattern/i,\n  \"OtherPattern\": /otherpattern/i\n}. Because config can be JavaScript too:\n\nConfiguration Files - use a JavaScript, JSON or YAML\nhttp://eslint.org/docs/user-guide/configuring. Why's that? Because of user's stupidity and potential rogue expressions?. No idea, just used a different rule as boilerplate.. I ran the tests without parser specified, and then it raises errors, so I assume it is needed. Or why should it use the default parser?. With fixing not enabled this shouldn't be an issue IMO. What if fix is an explicit extra option to set?\n\njs\n\"no-common-typos\": [[{\n  pattern: \"/somepattern/i\",\n  correct: \"SomePattern\"\n}], \"fixable\"]\nOr else, what kind of sanitizing do you suggest? \n. I changed it already so that regular expressions are always treated as string. Updated my previous comment to reflect that.. So a predefined set of common typos, or better, common matchers like exact, case-sensitive, etc.?. For example:\n```js\n\"no-common-typos\": [{\n  \"case-sensitive\": {\n    \"somepattern\": \"SomePattern\",\n    \"dangerouslySetInnerHTML\": \"dangerouslySetInnerHTML\"\n  },\n  \"exact\": {\n    \"colour\": \"color\"\n  }\n}]. ",
    "pandaiolo": "As an additional example for those who need access to a component DOM node from its parent but also from the component itself, here is the modified code from @gaearon example:\n``` jsx\nclass Field extends Component {\n  render() {\n    return (\n       this.props.inputRef(node) && (this.node = node)} />\n    )\n  }\n}\n```\nIt seems somewhat trivial but it took me a bit of time to figure it out so it may help anybody with the same use case.\n. @perrin4869 the use case where there is a difference, is illustrated by @gaearon in the last example of his first post, is when you reference a react component - and not already a DOM element like the div in your example - and need to access the actual DOM node of this component (eg to use the focus() method of an input tag).\nIn that case, the children component needs to expose a prop to forward the DOM node to its parent, as shown in the example, where previously the parent would just use a ref on the children component and call findDOMNode()\n. Isn't the TextField a good example? I also have a video component enriching the video DOM element, which I need to access props and methods (play(), pause(), paused, currentTime, etc). Is there a reason I would not let the parent access the video DOM node? \n. The component is simple and just exposes the video events as a prop. I could explicitly rewire all the native methods and props as well, but i'm not sure the added complexity is worth the linter code in that case. In the end that would just mean putting back the video element in the parent component.\nThanks for pointing this anyway, I fully adhere to the \"React way\" so I understand that based on the simple example, it makes sense to ditch the external ref!\n. I do in the parent component which concern is about video control. Putting the video element back there would add rather than remove complexity / readability - but yeah it's my call :)\n. ",
    "danez": "I have the following usecase and replacing findDOMNode with the ref returned in the callback makes the code throw when I try to call methods of the DOM node? \n``` js\nimport React, { Component } from 'react';\nclass Align extends Component {\n  constructor(props) {\n    super(props);\n    this.alignRef = null;\n  }\ncomponentDidMount() {\n    this.alignRef.getBoundingClientRect();\n  }\nrender() {\n    const childPropsNew = {\n      ref: node => { this.alignRef = node; },\n    };\nreturn React.cloneElement(this.children, childPropsNew);\n\n}\n}\n```\nUncaught TypeError: this.alignRef.getBoundingClientRect is not a function\nIs it because of the clone or am I doing something wrong?\n. ~~It is not about the ref being null, the ref is set but it is a ReactElement and not a DOM node. So it works fine when using findDOMNode in the componentDidMount. So I don't understand how it should work without? Is the element instance supposed to proxy DOM methods/properties of the DOM node?~~\nOk I think I got it, I can replace findDOMNode when having refs on browser components( <div /> etc), but if i do not know if my child is ReactComponent/DOMNode I can't get around doing findDOMNode unless I would introduce extra markup around my child with a ref.\n. ",
    "webdif": "All the examples above talk about callback ref on a <div>.\nBut what about callback ref on Component? It will give us the Component object for class, or null for pure functions. To get the DOM node, we have to transform the stateless function into a class, and use findDOMNode. How can you get the dom node without it?\n. All the examples above talk about callback ref on a <div>.\nBut what about callback ref on Component? It will give us the Component object for class, or null for pure functions. To get the DOM node, we have to transform the stateless function into a class, and use findDOMNode. How can you get the dom node without it?\n. @fhelwanger Thanks a lot \ud83c\udf89 \nI did not update the child component, that's why it did not work. Make a lot of sense, even if it is not very convenient to do so!\n. There is already a link to this issue in the no-find-dom-node.md, but a more detailed doc could be useful, to avoid other developers to make the mistake I made between findDOMNode(this) and findDOMNode(childComponentStringRef).\n. @kopax If you're doing it right, querySelector should exists, as the ref callback is returning a HTMLElement object. You must have a render method like this:\njs\nrender() {\n  return (\n    <div ref={(node) => { this.node = node; }}>\n      <div className=\"collapse\" />\n      <button onClick={this.handleClick} />\n    </div>\n  );\n}\nBut, maybe you don't need ref alltogether. The best way to enjoy React is to embrace the declarative way, and just change the state when something happen. For example :\n```js\nstate = {\n  active: false,\n}\nhandleClick = () => {\n  this.setState({ active: true });\n}\nrender() {\n  return (\n    \ncollapse ${this.state.active ? 'active' : ''}} />\n      \n\n  );\n}\n```\nWith or without state, it just adds a class, thus it triggers the css effect.. @andrevenancio If you store your DOM element in this.node, why do you use this.foo? Maybe, it's a typo?\n```js\nimport React from 'react';\nclass Bla extends React.Component {\n    componentDidMount() {\n        console.log(this.node.getBoundingClientRect());\n    }\nrender() {\n    return (\n        <div ref={(node) => this.node = node}>blaaaaa</div>\n    );\n}\n\n}\nexport default Bla;\n. @leosco Indeed. We can do this to avoid eslint errors:jsx\n { this.node = node; }} placeholder=\"Add a new task\" />\n```\nNo warning, but maybe less readable here. Better to keep the example simple, I think \ud83d\ude42 . ",
    "5angel": "Consider the following:\n1. A have a component from a third-party library (say, it's \"material ui\")\n2. I want to get a dom node from it\n3. It doesn't have a ref, though\nWhat do?\n. ",
    "cAstraea": "How would you rewrite this ? Not sure I understand how the new ref method works :( \ndescribe('Render', () => {\n  it('should render clock', () => {\n    const clock = TestUtils.renderIntoDocument();\n    const $el = $(ReactDOM.findDOMNode(clock));\n    const actualText = $el.find('.clock-text').text();\nexpect(actualText).toBe('01:02');\n});\n});\nShould I render into document while passing the ref ? \n. ",
    "gavinwahl": "The one case where I was not able to use a callback ref instead of findDOMNode is with ReactCSSTransitionGroup. There's no other way to get the DOM node used as the wrapper element, because a ref on the ReactCSSTransitionGroup just gives you a ref to that component, not the DOM node.. ",
    "josoriouz": "I'm trying to stop using findDOMNode, but I need to get the getComputedStyle but I can't figure it out how. Does anybody have a suggestion???. ",
    "leosco": "I'm fully behind this change, but I want to point out that doing something like this:\n<input type=\"text\" ref={node => this.node = node} placeholder=\"Add a new task\" />\ntriggers a [eslint] no-return-assign warning.. ",
    "alexander-shvets": "Node, Node, Node...\nI think, we should avoid duplication, like this:\njsx\n<input type=\"text\" ref={_ => this.node = _} placeholder=\"Add a new task\" />. ",
    "yonatanmn": "I'm trying to do some style manipulation since flex-box, columns and other css properties are not good enough. \nBasically I have <Layout> component, and many <Widgets> as children, or grand children. \nI want to give those widgets styles from one point - Layout, since I need to take them all under consideration when computing each style. \nSince they are not direct children of Layout, and I want to have free use of them, what alternatives do I have ?\n=== EDIT: ===\nactually came up with this solution, not fully working yet - \n``` js\nclass Layout extends Component {\n  getChildContext() {\n    return {\n      passRefToLayout: this.collectWidgetRefs\n    };\n  }\n  collectWidgetRefs(r){ this.widgetsRefs.push(r); }\n  componentDidMount(){ \n    this.widgetsRefs.map(w => w.getBoundingClientRect) \n   // ...\n  }\n}\nfunction Widget(props: Props, context): Element {\n  return (\n    \n      {props.children}\n    \n  );\n}\n```\nthe problem is that when some widgets removed, it's not removing the from the array obviously. \nI guess using context here is \"more react way\", but searching the DOM instead every time I want to style is more functional. \nIf you have any thoughts would love to hear. . ",
    "minmingsheng": "@gaearon Assuming I have a third-party(or cannot be changed/refactored) component\n which contain :\nreturn(\n<div className=\"component001\">\n   ......\n</div>\n)\nBut it does not have either ref=\"string\" or ref={this.prop.cbRef}. \nThen I am having following structure in my <widget001> component:\n//widget 001\n...\nif(condition){\nreturn(\n     <component 003>\n         <component 002 /> {/*it contains <component001>*/}\n     </component 003>\n}else{\n    <component 003>\n           <component 001 {...api}/>\n    </component 003>\n}\n)\n...\nNeither  nor  have real DOM.  My goal is to find <div className=\"component001\"></div> node in <component001> \nIn this situation what should I do to avoid using findDOMNode(component001Node)?\nAny advice or example link would be appreciated.\n. @gaearon Assuming I have a third-party(or cannot be changed/refactored) component\n which contain :\nreturn(\n<div className=\"component001\">\n   ......\n</div>\n)\nBut it does not have either ref=\"string\" or ref={this.prop.cbRef}. \nThen I am having following structure in my <widget001> component:\n//widget 001\n...\nif(condition){\nreturn(\n     <component 003>\n         <component 002 /> {/*it contains <component001>*/}\n     </component 003>\n}else{\n    <component 003>\n           <component 001 {...api}/>\n    </component 003>\n}\n)\n...\nNeither  nor  have real DOM.  My goal is to find <div className=\"component001\"></div> node in <component001> \nIn this situation what should I do to avoid using findDOMNode(component001Node)?\nAny advice or example link would be appreciated.\n. ",
    "budarin": "@gaearon \nrefs is not apply-able for stateless components in HOCs  and extra div would break design among inline elements.\n. @ljharb \njs\nrender() {\n  if (someConditions) {\n    return this.props.children; // or TargetComponent in HOC\n  }\n  if (this.props.PlaceHolder) {\n    return <PlaceHolder />;  // PlaceHolder is or maybe stateless component\n  }\n  return null;  // <span /> - here we can get ref\n}\nHow to get ref with callback?\nsomeConditions - conditions are calculated based on getBoundingClientRect. Thanks for reply.\nBut what about this syntax?\njsx\nrender() {\n  return (\n    <>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </>\n  );\n}. I'm sorry, but how code processing in runtime is corresponded with statical type analyses?\nit's just a function with typed params!\nOr I'm wrong?. Just have converted this method to usual class method and have changed corresponding calls - nothing has changed.. In that case props - is not Component's props - it's just this method's props\nAnd passing more than 3 individual params into a function is antipattern (. I'm sorry - you are right!\nDestructuring props from other props and passing them into the method as a newly formed object - solves the problem!\nMy apologizes. ",
    "JohnWeisz": "I think findDOMNode has valid use-cases, such as when direct DOM-manipulation or readings are necessary but a ref is not necessarily feasible or even available (such as in the case of a child component that you don't control).\nIn this case, you could easily create a HOC to facilitate the acquisition of the DOM-node itself, but it seems overly complicated just to acquire the underlying DOM-node -- it's almost like generating unique ids and using document.getElementById.\nInstead, how about warning against the use of findDOMNode only if it's used to acquire a DOM-node rendered by same component it is used from?\n\ni.e. this is bad:\n```js\nclass MyComponent extends React.Component\n{\n    render()\n    {\n        return (\n            \n                ...\n            \n        );\n    }\ncomponentDidMount()\n{\n    ReactDOM.findDOMNode(this);\n}\n\n}\n```\nbut this is good:\n```js\nclass MyComponent extends React.Component\n{\n    render()\n    {\n        return (\n            \n this._childInst = inst} />\n            \n        );\n    }\ncomponentDidMount()\n{\n    ReactDOM.findDOMNode(this._childInst);\n}\n\n}\n```\nNote: this is primarily in the case when MyChildComponent is not controlled by me, e.g. it's from a library, and I cannot just add a divRef prop to it.. I think findDOMNode has valid use-cases, such as when direct DOM-manipulation or readings are necessary but a ref is not necessarily feasible or even available (such as in the case of a child component that you don't control).\nIn this case, you could easily create a HOC to facilitate the acquisition of the DOM-node itself, but it seems overly complicated just to acquire the underlying DOM-node -- it's almost like generating unique ids and using document.getElementById.\nInstead, how about warning against the use of findDOMNode only if it's used to acquire a DOM-node rendered by same component it is used from?\n\ni.e. this is bad:\n```js\nclass MyComponent extends React.Component\n{\n    render()\n    {\n        return (\n            \n                ...\n            \n        );\n    }\ncomponentDidMount()\n{\n    ReactDOM.findDOMNode(this);\n}\n\n}\n```\nbut this is good:\n```js\nclass MyComponent extends React.Component\n{\n    render()\n    {\n        return (\n            \n this._childInst = inst} />\n            \n        );\n    }\ncomponentDidMount()\n{\n    ReactDOM.findDOMNode(this._childInst);\n}\n\n}\n```\nNote: this is primarily in the case when MyChildComponent is not controlled by me, e.g. it's from a library, and I cannot just add a divRef prop to it.. ",
    "amethyst82": "How can I do this after componentDidMount without findDomNode?\nscenario is like this:\n1. after mount and render\n2. user input something into the UI form\n3. the page should be verified and focus on the first error field.\nI use findDomNode can implement this scenario but not the current ref solution\n . ",
    "sandy0201": "Hi @gaearon , I am currently using React v16.2.0, and Redux-Form (v7.2.0) in combination with React-Number-Format (v3.1.3). I am trying to focus a field on button click.\nWhen I use ref={(input) => { this.input = input; }} on the element and this.input.focus() it throws an error saying that this.input.focus() is not a function. But when I use ref={(input) => { this.input = ReactDOM.findDOMNode(input); }} then the focus works.\nref={(input) => { this.input = input; }} does work in some places and some it doesn't.\nDo you perhaps know why this is happening or any suggestions?\nThank you.\nHere's my code snippets from various files linked together:\nenter-value.js\n```\n...\n   focusField = () => {\n        console.log(this.input);\n        console.log(this.input.children);\n        this.input.focus();\n    }\nrender() {\n    return (\n            <div className=\"col-md-12\">\n                <form onSubmit={handleSubmit(this.callApi)}>\n                    <Textbox\n                        inputRef={(input) => { this.input = input; }}\n                        name=\"customField\"\n                        className=\"form-control\"\n                        placeholder={copy.placeholder}\n                        maxlength=\"16\"\n                        onChange={(e) => {\n                            errCode = '';\n                            this.setState({\n                                fieldValue: e.target.value.replace(/[\\s]/g, ''),\n                                error: '',\n                            });\n                        }}\n                        onKeyPress={(e) => { if ((e.key === 'Enter' && !e.target.value) || e.key === ' ') e.preventDefault(); }}\n                        error={this.state.error}\n                        autoComplete=\"off\"\n                        autoFocus=\"autofocus\"\n                        numberType=\"true\"\n                        fieldFormat=\"###### #### ## #\"\n                    />\n                    <Button\n                        className=\"btn btn-solid\"\n                        type=\"submit\"\n                        btnRef={(btn) => { this.btn = btn; }}\n                        value={buttonTranslation.next}\n                        name=\"next\"\n                    />\n                </form>\n                <Modals screen={this.state.screen} errorCode={this.state.errorCode} error={errorObj} focusField={() => this.focusField()} reset={() => this.reset()} />\n            </div>\n    );\n}\n\n...\n```\ntextbox.js\n``\nimport NumberFormat from 'react-number-format';\n...\nrenderNumberField = (field) => {\n        const { meta: { error } } = field;\n        const className =form-group ${error || field.error ? 'has-error' : ''}`;\n    return (\n        <fieldset className={className}>\n            <NumberFormat\n                {...field.input}\n                {..._.omit(field, [\n                    'input',\n                    'meta',\n                    'maxlength',\n                    'inputRef',\n                    'inputValue',\n                    'empty',\n                    'rule',\n                    'error',\n                    'numberType',\n                    'fieldFormat',\n                ])}\n                ref={field.inputRef}\n                format={field.fieldFormat}\n            />\n            {(error || field.error) && <p className=\"help-block\">{!error ? field.error : error}</p>}\n        </fieldset>\n    );\n}\n\nrender() {\n    return (\n        <Field\n            {..._.omit(this.props, [])}\n            component={this.renderNumberField}\n        />\n    );\n}\n\n...\n```\nmodals.js\n...\n    render() {\n        return (\n            <Modal\n                id={this.id()}\n                header={{\n                    icon,\n                    heading: this.heading(enterIdTranslation, idvResultsTranslation),\n                }}\n                body={(<div className=\"btn-container clearfix\">\n                    <Button\n                        type=\"button\"\n                        className=\"btn btn-contour pull-right\"\n                        name=\"changeId\"\n                        onClick={() => { this.reset(); this.props.focusField(); }}\n                        data-dismiss=\"modal\"\n                        value={buttonTranslation.changeId}\n                    />\n                </div>)}\n                footer={this.footer(buttonTranslation)}\n            />\n        );\n    }\n.... It's ok now, got it to work.\nInstead of using ref={field.inputRef} in NumberFormat component, had to use getInputRef={field.inputRef}.. Hi @andrevenancio , thanks so much for your detailed explanation, will have a look at my code again and try it out. :). ",
    "bradencanderson": "\nWe want to deprecate it eventually (not right now) because it blocks certain improvements in React in the future.\n\n@gaearon -- mind giving an update on this? Are you all still planning on removing findDOMNode but keeping ref callbacks? It seems like based on trueadm's PR here that React might be going in a completely different direction.. Yup, for sure. We\u2019re having a discussion internally about whether they\u2019re\nactively harmful. Right now it feels like a \u201cno\u201d, but curious what others\nthink.\nOn Tue, Aug 28, 2018 at 4:59 PM Edmund notifications@github.com wrote:\n\nFor what it's worth, I subscribed to this thread because I believed I had\na need for using findDOMNode and was interested in updates. After\nbecoming more experienced and educated in React I was sure enough able to\nuse callback refs to achieve what I wanted.\nhttps://stackoverflow.com/questions/51512130/what-is-the-best-way-to-call-an-external-function-on-the-dom-element-rendered-by\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/678#issuecomment-416778536,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AE029fXa7sOylrcSSSGKvBiZia4YuSr0ks5uVdlpgaJpZM4JKz4R\n.\n. \n",
    "maulerjan": "The problem is when you need to access a DOM element nested inside a component exported by 3rd party library. Then you have absolutely no other option than to use findDOMNode.. ",
    "zombieJ": "for example, I have a group buttons:\n``` jsx\nclass Button extends Component {\n    constructor() {\n        this.onClick = this.onClick.bind(this);\n    }\nonClick() {\n    const { type, onSelect } = this.props;\n    onSelect(type);\n}\n\nrender() {\n    return <button onClick={this.onClick}>{type}</button>;\n}\n\n}\nclass GroupButtons extends Component {\n    constructor() {\n        this.select = this.select.bind(this);\n    }\nselect(type) {\n    const { select } = this.props;\n    select(type);\n}\n\nrender() {\n    const { types } = this.props;\n\n    return (\n        <div>\n            {types.map((type, index) => (\n                <Button key={index} type={type} onSelect={this.select} />\n            ))}\n        </div>\n    );\n}\n\n}\n```\nSince the class Button is only used as sub component of GroupButtons which needn't make as export. Some of the grouping component has the sub component helping to replace the arrow function. I guess component Button could be ignore if is only used as sub component by no-multi-comp? Beyond that, multi-comp will be warning.\n. Yes. I want to fix jsx-no-bind arrow function so that create a sub component to handle it.  Is there an option of no-multi-comp  such as:\njavascript\n\"no-multi-comp\": [<enabled>, { \"ignoreSubComponent\": <boolean> }]\nor \njavascript\n\"no-multi-comp\": [<enabled>, { \"ignoreNoExport\": <boolean> }]\nto ignore the component which is used as sub component inside or the component will not be exported.\n. This sub component is only used for the component(which simple handle only like click function) and I don't want to make it as export cause it's so tiny.\nBut for testing, yes, I guess all of component should be fully tested. Youve talked me into it. \nThanks for your patience :smiley: \n. I face the false positives like your sample code. Currently I add comment for temporary disable the rule on the prop.\nI'm not sure remove it is a good way cause it's useful when refactor the code.. ",
    "kylpo": "This has become a common pattern for the react community, and one that I would certainly like to enforce in my projects. Mind taking another look at this and weighing in on why it is not accepted? (other than the conflicts to be resolved now). I'd love for this to land soon! It will enable me to start using prettier (with prettier-eslint) and prevent it from messing with my max-props-per-line preference.. I'd love for this to land soon! It will enable me to start using prettier (with prettier-eslint) and prevent it from messing with my max-props-per-line preference.. I am just using @snowypowers's repo/branch until this lands. Working perfectly for my prettier-eslint setup, thanks @snowypowers!. ",
    "noahbenham": "Class fields is now a stage 3 proposal. Happy to contribute if this needs someone else to take it on.. ",
    "nwhitmont": "What's the timeline on v6.0.0 release?  Appears to be blocking airbnb eslint config installation --https://github.com/airbnb/javascript/issues/936\n. Thank you @yannickcr !\n. ",
    "nkt": "Great, thanks!\n. This is not linting rule, it's static analysis rule. Static analyzer should be able to resolve variables instead just checking them by some \"mask\".\nI guess this project needs magic function resolveVariable, this function can solve many issues:\n``` js\n// user code\nconst { settings: { foo } } = this.props;\n// plugin\nresolve('foo') -> this.props.settings.foo\n```\n``` js\n// user code\nconst { users } = this.props;\nusers.map(({ id }) => ...);\n// plugin\nresolve('id') -> this.props.users[].id\n```\n. ",
    "bkozera": "+1 from me.\nReasons:\n- Airbnb suggests that in their guide (unfortunately not explaining why)\n- Makes it easy to have consistency when writing stateless components across team (could have also opposite version forcing fat arrow)\n- There is a bug in jest (actually in istambul) where  jest --coverage  is sometimes failing. Changing to function from fat arrow did solve that for us.. ",
    "hzoo": "If this is specific to babel-plugin-transform-react-remove-prop-types, we could just error from the plugin itself instead of the eslint rule (just depends on whether we think its better to make it independent of not). ",
    "wereHamster": "Similar to #504 \n. ",
    "mfn": "Ops. N00b alert here; please disregard the PR and sorry for the noise \u00af\\_(\u30c4)_/\u00af\n. ",
    "lukeapage": "I created a repro repo..\nhttps://github.com/lukeapage/eslint-react-bug-prefer-const-716\n. Yeah sorry for not updating after tracking down.\nI left this open until a solution is found, in case something needs to be done here as welll.\n. yes my biggest remaining problem is with terneries and brackets e.g. when brackets are used, usually indentation goes up by 1, but within a ternary, it currently does not.\n. examples formatted how 6.6.0 expects vs expectation\nreturn isDisabled ?\n            content :\n            (\n            <Touchable onTap={this.handleTap}>\n                {content}\n            </Touchable>\n        );\nbut I'd expect\nreturn isDisabled ?\n            content :\n            (\n                <Touchable onTap={this.handleTap}>\n                    {content}\n                </Touchable>\n            );\nnext one\nreturn secondaryTitle ?\n        (\n            <div>\n                <p>{primaryTitle}</p>\n                <p>{secondaryTitle}</p>\n            </div>\n        ) : (\n        <p>{primaryTitle}</p>\n        );\nbut I would expect\nreturn secondaryTitle ?\n        (\n            <div>\n                <p>{primaryTitle}</p>\n                <p>{secondaryTitle}</p>\n            </div>\n        ) : (\n            <p>{primaryTitle}</p>\n        );\n. It seems actually this can be fixed by putting the [ on the same line as {d &&\n. See #945 \n. See #945 \n. tracking: https://github.com/facebook/react/issues/7671. @yannickcr sorry to mention you but just in case you aren't aware of people waiting for a release, if you can manage one soon, it would be appreciated, thanks. @ljharb is it that 4.2 doesn't bail with an error but still logs an error message? That's what I experience and why I've decided to wait for this to be published before upgrading.. reduced repro-code:\n```\nexport function subscribeBatch({ b }) {\n    return a.bind(b);\n}\n/*\n * abc\n /\nfunction a() {\n}\n``. I guess it depends if thenode` is valid - thats why I thought to start here.. repro code:\n```\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nclass A extends React.Component {\n    render() {\n        return false;\n    }\n}\nA.propTypes = _.defaults({}, {}, {\n    a: PropTypes.object.isRequired,\n});\nexport default A;\n```. Ok fine. I just saw some other editors in there. will revert.. ",
    "Wilfred": "I hit this today. A minimal repro:\njsx\nfunction foo() {\n  let iCouldBeConst = 6;\n  return <th colSpan={iCouldBeConst}></th>;\n}\nand eslint config:\njson\n{\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        },\n        \"sourceType\": \"module\"\n    },\n    \"rules\": {\n        \"react/jsx-uses-vars\": 2,\n        \"prefer-const\": 2\n    },\n    \"plugins\": [\n        \"react\"\n    ]\n}\nSounds like removing eslintUsed on JSXExpressionContainer would be a definite improvement, since that would fix both my situation and OP.\n. Thanks :)\n. Thanks! :)\n. Oops, misread the code. Please ignore.\n. I don't currently have a box to check the latest dev version, but I agree this looks a lot like a duplicate of #898.\n. Thank you very much :)\nWould you mind releasing when you have a chance?\n. I ended up configuring both plugins to just use the same indent, so I'm happy.\nIn a perfect world the plugins would detect the conflicting settings, but I don't see how that's possible. It's just a small papercut.\nI'm happy to close this if you don't think there's anything else we can do here?. I ended up configuring both plugins to just use the same indent, so I'm happy.\nIn a perfect world the plugins would detect the conflicting settings, but I don't see how that's possible. It's just a small papercut.\nI'm happy to close this if you don't think there's anything else we can do here?. ",
    "wrakky": "I've just come across this problem myself. It would be good to know some thoughts on the matter - I am also be happy to dedicate some time to this if it hasn't been rejected.\n. ",
    "benstepp": "I went ahead and made changes to the error messages, and added the additional clarity regarding the desired behavior to the introduction of the docs.\n- Added a few tests for a <MyComponent />.\n- Switched to an early return to reduce the nesting.\n. Went ahead and added test cases with non-children props and multiple children, as well as clarified the error regarding React.createElement. \n. Forgot I still had this over here.\nRebased over current master. Same 13 failing tests as master that would probably be better fixed as a separate commit.\nIt is currently marked as recommended, but I think that should be removed until a major version. Let me know what you think.\n. It only happens whenever an async function was defined and used props without destructuring inside of a class. \nI do have a few async methods for the non class property variety. And I just added four more test cases to hit a questionable factory method that returns an async function case. Although I don't see why you'd want to do that, but it's possible.. You should define your propTypes for all props that you use.\njsx\nAuthForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  errors: PropTypes.array,\n};\n\nThe different lint message is trying to tell you that you have a non-required propType defined, but no defaultProp for it. In your current code if you do not pass an errors array, the component will fail to render. For example in this simple test case, you will get a cannot read property map of undefined because this.props.errors does not exist.\njsx\ntest('does stuff', ()  => {\n  const onSubmit = jest.fn();\n  const wrapper = shallow(<AuthForm onSubmit={onSubmit} />);\n  // ...\n});\nThe solution is to either provide a defaultProp for this.props.errors, or make the errors mandatory and update your tests / code to comply to the new requirement.\n```jsx\nAuthForm.defaultProps = {\n  errors: [],\n};\n// or\nAuthForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  errors: PropTypes.array.isRequired,\n};\n``\n. I did some quick digging, and the main culprit is thearray.prototype.find` polyfill is astronomically slow. \nGranted, it's a polyfill so it has to remain spec compliant, but it may be better to use a for loop where we understand the specific implementation (ie. here where we know attributes is an array and we only care whether or not the item is in the array). Maybe there is a fast Array.prototype.includes polyfill, but I doubt anything can compete with the good ol for loops.\n```\nhasChildrenOrDanger()\nfind x 139,589 ops/sec \u00b11.13% (85 runs sampled)\nfor loop x 47,992,374 ops/sec \u00b10.95% (90 runs sampled)\nFastest is for loop\nisVoidDomElement()\nhas x 26,597,863 ops/sec \u00b11.21% (87 runs sampled)\nObject.prototype.hasOwnProperty.call x 40,696,192 ops/sec \u00b11.11% (91 runs sampled)\nArray.indexOf x 32,855,569 ops/sec \u00b11.01% (90 runs sampled)\nArray.prototype.indexOf.call x 20,368,539 ops/sec \u00b10.91% (90 runs sampled)\nswitch case x 68,476,140 ops/sec \u00b16.89% (84 runs sampled)\nFastest is switch case\n```\nIf you want to run these benchmarks, they are on this branch here. Upon further inspection, array.prototype.find is slow because there are a ton of calls to is-callable.\nis-callable is first called to validate that array.prototype.find function is given a predicate.\nThe big one though is es-abstract/es6.Call also calls is-callable on EVERY iteration of the for loop implementation of array.prototype.find.\nThe biggest perf bottle neck by far is the needless calls to is-callable in the loop with the same function over and over. I'm not sure how you would want to change this.\nAs far as is-callable is concerned, the only real perf bottleneck I can see is the regex replacing in isEs6ClassFn. Just dropping that piece improved perf on is-callable fairly significantly. I want to explore how to get those tests to still pass while remaining performant.\n```\nis-callable\nnpm x 494,495 ops/sec \u00b11.17% (86 runs sampled)\ncurrent x 1,949,650 ops/sec \u00b13.35% (80 runs sampled)\nFastest is current\n```. I think inlining the implementation of ES.Call in array.prototype.find without the check and throw the license information next to it is the only real option without exposing a new API. It's just two lines and the perf gains would be significant.. \ud83d\udc4d\narray.prototype.find is now much closer to what you would expect compared to a for loop now.\n@dylang can you rm -rf your node_modules, reinstall, and rerun eslint again?\n\ud83d\udc81  [eslint-plugin-react]  node benchmarks\nfind x 3,021,463 ops/sec \u00b10.79% (90 runs sampled)\nfor loop x 47,695,155 ops/sec \u00b11.18% (88 runs sampled)\nFastest is for loop. Looks like you're right. Went ahead and removed that line. \n. I used babel-eslint over sourceType: 'module' because it was way more popular in the codebase for handling import statements. (git grep sourceType)\nDo you think it would be better to apply the module sourceType to the entire test file, just the single test using object.assign, or using const createElement = require('react').createElement; in the actual test? \nMaybe a chore issue to clean out all of babel-eslint and replace it with sourceType module. eslint's default parser could handle a vast majority of the tests.. Sounds good. I went ahead and squashed a change with sourceType: 'module'.. I added a few more cases with async functions defined in the render method rather than returned from a separate method, and used the default eslint parser.\nThe issue was with marking the props as used, not with how the propTypes were defined, so using OG syntax works just fine.. ",
    "zurawiki": "@yannickcr I would love to help you merge this in. I didn't see any notes on contributing to this project in the README or on the wiki. \nPlease let me know what next steps I need to take.\n. Ok, I added a regex and I set config to throw an error when an invalid config is given for either pragma field\n. Ok, I added a regex and I set config to throw an error when an invalid config is given for either pragma field\n. I matched the .split('.') on line 24.\nIt's there because ( cannot be part of a function's name\n. ",
    "vjeux": "Web components must have a dash somewhere in their name fyi\n. ",
    "sheshbabu": "Would also be useful for some react native props like onTintColor\nhttps://facebook.github.io/react-native/docs/switch.html#ontintcolor. Would also be useful for some react native props like onTintColor\nhttps://facebook.github.io/react-native/docs/switch.html#ontintcolor. ",
    "thenickcox": "I think I agree philosophically, but it's being used as a helper method here, and it seems most practical to keep it close in proximity to the methods employing it. In that sense, it feels like it should fall into the everything else category and be grouped together with the other methods that aren't strictly getters, apart from the lifecycle methods and render.\nI know I'm free to disable this rule if I disagree with it, but I don't otherwise disagree with it. I also know I'm free to put a comment and disable it on this line.\nAlternately, I wonder if it's worth adding something about that syntactic vs conceptual getters to the docs? Because I think it's a really interesting point. I could try my hand at that if you'd accept a PR.\n. ",
    "alangpierce": "Ok, I'll take that approach (either get eslint-config-airbnb-es5 updated and released, fork it, or find a way to stop depending on it). Yeah, I understand that the major version bump means that breaking changes are expected. This was more of a feature request/inquiry than a bug report.\nIn general I do think it would be nice if breaking changes were done in a two-phase way (when possible/reasonable) to give other packages time to update rather than having to do everything in lockstep. But I understand that that can be difficult or undesirable sometimes, and admittedly I don't have enough experience with npm and peer dependencies to know exactly how all of that would work out.\nThanks!\n. > renderFoo methods are an antipattern anyways\nYep, makes sense. This isn't new code; I'm fixing pre-existing lint issues in a big codebase and found this in two places, so in the near term I'll probably leave the code as-is and disable the rule with an inline comment.\nI do think there's sometimes value in using methods as a low-overhead way to split up a render function without having to plumb down the props, state, and callbacks, particularly as an alternative to IIFEs or variables that would be defined at the start of render. But yeah, probably I should be biasing more toward SFCs than I do now, and ideally I'd have few enough props that SFCs don't feel like much overhead.\nAnyway, would you be open to calling this a bug and accepting a change to skip method syntax when detecting SFCs?. ",
    "kossnocorp": "@yannickcr the Panel is declared as a class exported by default; maybe this is the problem. However, it's valid ES200X and supposed to be working \ud83d\ude07\nI have errors:\n\n... on such code:\n``` jsx\nimport React, {PropTypes, Component} from 'react'\nimport classNames from 'classnames'\nexport default class Panel extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    color: PropTypes.oneOf(['green', 'red', 'orange', 'grey', 'blue'])\n  }\nrender () {\n    const {color, children} = this.props\n    const panelClasses = classNames('Panel', {\n      [is-${color}]: color,\n      'has-color': color\n    })\n    return (\n      \n        {children}\n      \n    )\n  }\n}\nPanel.Header = ({children}) => (\n  \n    {children}\n  \n)\nPanel.Header.propTypes = {\n  children: PropTypes.node\n}\nPanel.Body = ({children}) => (\n  \n    {children}\n  \n)\nPanel.Body.propTypes = {\n  children: PropTypes.node\n}\n```\nThe version is eslint-plugin-react@6.1.2.\nThank you a lot for great work!\n. @kentcdodds I just tried your code and I don't have the error:\n\nYou could try to upgrade I suppose, I had 5.x before upgrade and the current one is eslint-plugin-react@6.1.2.\n. ",
    "zachguo": "@lencioni thanks for reviewing, all fixed. I gonna test this rule against my project a bit and let you know how it goes.\n. @lencioni @ljharb Everything done except tests of context via shenanigans. Advice needed on how to capture those. I also tested it against my project, it's working well.\n. I found a false positive in my project.\njsx\n<div>\n  {menuItems.map((e, i) => <MenuItem value={e.path} key={i} primaryText={e.text}/>)}\n</div>\nMy current rule for stateless functional component is that, for any React component detected, if it has a second argument, then it uses context. \nIs something wrong with /util/Components's detection, or with my rule?\n. @ljharb @lencioni I'm now stuck at the fact that I cannot reliably detect stateless function(see #741). What should I do now?\n. @ljharb @lencioni I'm now stuck at the fact that I cannot reliably detect stateless function(see #741). What should I do now?\n. Probably yes for this PR.\nWhen I have time I may try to fix https://github.com/yannickcr/eslint-plugin-react/issues/741 first.. A new util function like isStatelessFunctionalComponent to handle SFC detection may be needed. SFC detection has been discussed and requested many times: https://github.com/yannickcr/eslint-plugin-react/issues/512 https://github.com/yannickcr/eslint-plugin-react/issues/578 https://github.com/yannickcr/eslint-plugin-react/issues/672\nAnd the util function should be unit tested.\n. @lencioni how can I capture static properties like\nclass Foo extends Component {\n  static contextTypes = {\n    bar: PropTypes.object\n  };\n...\n. I don't know how to capture these shenanigans.... \ud83d\ude1e \n. Component.detect seems to be not working, so I tried detecting stateless functional component manually. However, utils.isReturningJSX didn't work as expected, it's returning false no matter what.\n. ",
    "klzns": "@ljharb that's a good option. I would be happy with that\n. @ljharb that's a good option. I would be happy with that\n. ",
    "HenriBeck": "786\n. Probably would even be better for better backward compatibility.\n. Personally, I like to destructure my props in a functional component, for the simple reason of passing additional extra props down to a specific child. Though I tend to not do that for class components.\nJust having the option would be nice.\nOf course, it would still allow for just a string as the first configuration. This would just add a few extra configuration options.\nNew rule configuration example:\njs\nmodule.exports = {\n  rules: {\n    'react/destructuring-assignment': ['error', {\n      functional: 'always',\n      class: 'never',\n    }],\n  },\n};\nThe correct code for the configuration example: \n```js\nfunction FunctionalComponent({ children }) {\n  return children;\n}\nclass Component extends React.Component {\n  render() {\n    return this.props.children;\n  }\n}\n```\nIncorrect code for the configuration example: \n```js\nclass Component extends React.Component {\n  render() {\n    const { children } = this.props;\nreturn children;\n\n}\n}\n. I would personally prefer rather allowing an object for more detailed configuration rather than turning the rule off for certain component types.js\n// Still support configuration for all three component types\nmodule.exports = {\n  rules: {\n    'react/destructuring-assignment': ['error',  'always'],\n  },\n};\n// Individual configuration for the component types\nmodule.exports = {\n  rules: {\n    'react/destructuring-assignment': ['error', {\n      functional: 'always',\n      class: 'never',\n      createClass: 'always',\n    }],\n  },\n};\n// Or allow for specific component overrides\nmodule.exports = {\n  rules: {\n    'react/destructuring-assignment': ['error', 'always', {\n      class: 'never',\n    }],\n  },\n};\n```. Sure, I will start working on it next week. Which configuration should I implement?\n. Sure, I will start working on it next week. Which configuration should I implement?\n. Also, I discovered this bug:\nIn both cases when destructuring is set to always it's not reporting an error.\n```js\nfunction Baz({ ...rest }) {\n  return ({rest.children});\n}\nfunction Baz(properties) {\n  return ({properties.children});\n}\n```\nAlso is this intended?\njs\nclass Comp extends React.Component {\n  state = {\n    animationName: this.props.active // Requires destructuring here when set to always\n      ? 'fade-in'\n      : null,\n  };\n}\nAlso when using something like react-jss it reports when using functions.. Also, I discovered this bug:\nIn both cases when destructuring is set to always it's not reporting an error.\n```js\nfunction Baz({ ...rest }) {\n  return ({rest.children});\n}\nfunction Baz(properties) {\n  return ({properties.children});\n}\n```\nAlso is this intended?\njs\nclass Comp extends React.Component {\n  state = {\n    animationName: this.props.active // Requires destructuring here when set to always\n      ? 'fade-in'\n      : null,\n  };\n}\nAlso when using something like react-jss it reports when using functions.. Why would I not need to duplicate the logic in componentWillReceiveProps when I move the state initialization into the constructor?\nI don't know if this is intended but for class methods, it's also reporting to destructure the props.. Why would I not need to duplicate the logic in componentWillReceiveProps when I move the state initialization into the constructor?\nI don't know if this is intended but for class methods, it's also reporting to destructure the props.. Exactly, I personally prefer to have the initialization logic in class fields as it's not so much typing.\nEither way, it shouldn't report an error there.\nI will start working on a rewrite of the rule with the above-mentioned changes in mind, alright?. Exactly, I personally prefer to have the initialization logic in class fields as it's not so much typing.\nEither way, it shouldn't report an error there.\nI will start working on a rewrite of the rule with the above-mentioned changes in mind, alright?. There is no way of destructuring inside a class field so it definitely shouldn't report an error here.. There is no way of destructuring inside a class field so it definitely shouldn't report an error here.. #1740 Is pretty much ready to go, maybe a last review before merging. \nAbout the constructor, I already fixed this but adding an option seems like a good idea.. #1740 Is pretty much ready to go, maybe a last review before merging. \nAbout the constructor, I already fixed this but adding an option seems like a good idea.. Yes, will resolve them tomorrow. Yes, will resolve them tomorrow. @ljharb could you take a look?. @ljharb yeah, I just cleaned up my forks and forgot that I still had a PR open here.\nI can recreate it when I have time, you can still see the changes so it shouldn't be too big of an effort.. I also have the changes on my laptop.. @ljharb Couldn't this also be a rule? \nSomething like require-read-only-props when the project is using flow? \nSeems like a good practice to me.. @ljharb Couldn't this also be a rule? \nSomething like require-read-only-props when the project is using flow? \nSeems like a good practice to me.. @ljharb should this be behind a flag because it doesn't have to do anything with destructuring assignments? I would agree that it would be a great rule to disallow props usage inside class properties but doing it here might be a little bit confusing for people.. @ljharb I agree with you that doing complicated things inside class properties isn't the best idea.\nBut forbidding it in this rule seems odd because class properties aren't about destructuring and should be able to disallow them whether or not you have this rule configured.. ",
    "ASnow": "TypeError: Cannot read property 'name' of undefined\nAlso error in this file at /opt/apps/fe-ui-kit-package/node_modules/eslint-plugin-react/lib/rules/prop-types.js:729:50\n| +-- babel-eslint@8.2.1\n| | +-- eslint-scope@3.7.1\n| | `-- eslint-visitor-keys@1.0.0\n| +-- eslint@4.16.0\n| | +-- eslint-scope@3.7.1 deduped\n| | +-- eslint-visitor-keys@1.0.0 deduped\n| +-- eslint-config-airbnb@16.1.0\n| | `-- eslint-config-airbnb-base@12.1.0\n| |   `-- eslint-restricted-globals@0.1.1\n| +-- eslint-import-resolver-webpack@0.8.4\n| +-- eslint-loader@1.9.0\n| +-- eslint-plugin-flowtype@2.41.0\n| +-- eslint-plugin-import@2.8.0\n| | +-- eslint-import-resolver-node@0.3.2\n| | +-- eslint-module-utils@2.2.0\nnpm ERR! peer dep missing: @vtb/build-configs@^release-1.4, required by @vtb/ui-kit@0.0.0\nnpm ERR! peer dep missing: @vtb/services@^release-1.4, required by @vtb/ui-kit@0.0.0\n| +-- eslint-plugin-jsx-a11y@6.0.3\n| +-- eslint-plugin-react@7.5.1 deduped   // update to 7.7.0 dont helps\n+-- eslint-plugin-react@7.5.1\n| | +-- eslint-scope@3.7.1 deduped\nMy code sample:\ntype ButtonProps = ({\n    children: React.Node,\n} | {\n    icon: React.Element,\n}) & {\n    label: string,\n    disabled?: boolean\n} & {};. ",
    "avaly": "I've updated my PR to not create a separate rule for this use case. Instead it uses the logic in both no-did-update-set-state and no-did-mount-set-state rules using a new mode disallow-via-methods.\n. :+1: / :-1: ? Friendly bump!\n. ",
    "fabienjuif": "I saw that the index.js in master have it.\nAnd I saw the package is at 6.0.0 version now.\nI'll try that and reopen if I still have the problem.\nEdit : sorry about that.\n. Yeah I didn't see I had an old version :/\n. ",
    "battaile": "I'm seeing it on line 91: https://github.com/yannickcr/eslint-plugin-react/blob/master/index.js#L91\n. emcaFeatures should be ecmaFeatures\n. actually never mind, got a workaround for my specific case. actually never mind, got a workaround for my specific case. ",
    "iTob191": "Using --fix also results in an output like above.\n. ",
    "Kyle-Mendes": "I'm still seeing this issue.  It's causing a lot of problems on a big team, some people aren't used to working with tabs and the only way to catch the issue is via code review.. ",
    "ryb73": "It was explicit.\n. It was explicit.\n. ",
    "webOS101": "To be fair, it is listed in the changelog, which I didn't bother reading. :)\n. To be fair, it is listed in the changelog, which I didn't bother reading. :)\n. I've taken a stab at this and have a working prototype.  Just trying to get all the tests update for this rule.  If @ljharb or someone else can clarify:  I'm basing off an existing rule but need to write different data into the component list.  Do rules share the same component data or do they each get their own copies?  I see some rules appear to share the same data properties but not sure if they're somehow avoiding stepping on each others toes or if it's just luck that it doesn't conflict.. Also, I considered it a violation of the rule if supplying a default for an .isRequired property.  Was that your intention or should that be configurable?. ~Also discovered a bug in require-default-props.  Oops.~. @ljharb is correct, marking a prop as required but using defaultProps to make it optional does not make sense.  Either it is required or it is not.. In the second example, it is correctly being interpreted as a React component.  In the first example, it is not detected as a React component.  I will clarify the notes.. In the second example, it is correctly being interpreted as a React component.  In the first example, it is not detected as a React component.  I will clarify the notes.. To be clear, you're asking for non-react component class tests?  I will add those.. no-unnecessary-default-props?  no-unneeded-default-props?  no-useless-default-props?. @lencioni A rule that validates the types of the defaultProps seems very useful!. I addressed some of the concerns raised in the review, but understand we're still searching for a good name.. Anyone had any good ideas on the naming?  Nothing particularly new has come to me.  Maybe no-stray-default-props?. That seems more in keeping with @lencioni 's checker that would validate types.  no-undefined-default-props?  no-unexpected-default-props?  only-meaningful-default-props?. I'm curious how accurate we could be in matching the types.  Certainly simple types would be easy, more complicated ones could easily become problematic.  If you like the new name a lot, I can update the PR to the new name.. Updated the name of the rule and rebased on master.. Updated all the var declarations as well.. Anything else needed for this?. Whoops, looks like I didn't add the rule to the README.md in the root.  Should I create a separate PR for that?. https://github.com/yannickcr/eslint-plugin-react/pull/1239. whoops, the bug was in my understanding of how defaultProps works in React.CreateClass. fair enough, I would prefer either of those as well.  closing this.. Noticed that there are still instructions for eslint 1 in the README.  Is that even still supported?. I think I would prefer to see the instance-variables removed from this PR so it could be debated further.  This will cause a lot of previously passing source code to fail (I believe).  Keep in mind that many methods are defined as instance variables and should not appear before the lifecycle methods.  Further, I don't see any additional tests validating the change to instance-variables.  Thanks for putting this together!. I certainly understand the reasoning and agree that you're probably right about where it belongs.  I'm just concerned about migrating an entire code base to the new rule to take advantage of the new lifecycle methods.  Also, if we had to revert one or the other parts of this PR, they would be tied together and not easy to separate.  Are there code reordering auto-fix rules?  I didn't poke deeply but my recollection is that the current auto-fix rules only work on a line at a time.. No, see the comment at the bottom.  The result is this:\n<div>\n        <MyComponent>\na\n</MyComponent>\n        <MyOther>\n{a}\n</MyOther>\n    </div>. Further note: using \"react/jsx-indent\": [1, \"tab\"], also results in the extra blank lines being inserted.. It was just a minimal sample, that's all. It's not reflective of any actual code.  I will cross-file this to eslint.. fwiw, I made a PR with eslint that fixes this issue, so I'll close this.. Happy to make changes, but this code is nearly identical to require-default-props.  Do you want me to update the source there, too?. I think it's unlikely you wouldn't have a parent node in the case of a MemberExpression whose parent is a MemberExpression and belongs to a Component.  But, I will admit I'm not intimately familiar with this code.. What's sad is I originally implemented with Array.find() but realized this didn't match with the (then) current style.. fwiw, you can throw in the componentWillUnmount of a child and it will be caught by componentDidCatch.. ",
    "brennie": "I filed this against the wrong repo! Oops!\n. @ljharb I wasn't aware of that syntax. Thanks!\n. ",
    "toxicFork": "@ljharb you are incorrect, because if the dom node changes then the ref will be called as well. \nThe problem is when the dom node does not change but the function gets called again and again every time you render.\nE.g. equivalent of:\nbefore:\n``` js\nthis._domNode = undefined;\nrender(); // initial render\ndomNode = document.createElement('div');\nthis._domNode = domNode;\nrender(); // domNode unchanged\nthis._domNode = domNode;\nrender(); // domNode unchanged\nthis._domNode = domNode;\nrender(); \ndomNode = document.createElement('div'); // something changes dom node because of render\nthis._domNode = domNode;\n```\nafter:\n``` js\nthis._domNode = undefined;\nrender(); // initial render\ndomNode = document.createElement('div');\nthis._domNode = domNode;\nrender(); // domNode unchanged\nrender(); // domNode unchanged\nrender(); \ndomNode = document.createElement('div'); // something changes dom node because of render\nthis._domNode = domNode;\n```\nYou can also test this by doing something like:\njsx\nrender() {\n    return (<div\n        someOtherPropThatMayChange={this.props.x}\n        ref={(c) => {\n            console.log('this._domNode is being set but should it have?', this._domNode === c);\n            this._domNode = c;\n        }}\n    />);\n}\nExplanation: when you change the x prop the ref function should not be called but since it's a brand new arrow function react will think it needs to call it\nEdited: to show a better example\n. @ljharb you are incorrect, because if the dom node changes then the ref will be called as well. \nThe problem is when the dom node does not change but the function gets called again and again every time you render.\nE.g. equivalent of:\nbefore:\n``` js\nthis._domNode = undefined;\nrender(); // initial render\ndomNode = document.createElement('div');\nthis._domNode = domNode;\nrender(); // domNode unchanged\nthis._domNode = domNode;\nrender(); // domNode unchanged\nthis._domNode = domNode;\nrender(); \ndomNode = document.createElement('div'); // something changes dom node because of render\nthis._domNode = domNode;\n```\nafter:\n``` js\nthis._domNode = undefined;\nrender(); // initial render\ndomNode = document.createElement('div');\nthis._domNode = domNode;\nrender(); // domNode unchanged\nrender(); // domNode unchanged\nrender(); \ndomNode = document.createElement('div'); // something changes dom node because of render\nthis._domNode = domNode;\n```\nYou can also test this by doing something like:\njsx\nrender() {\n    return (<div\n        someOtherPropThatMayChange={this.props.x}\n        ref={(c) => {\n            console.log('this._domNode is being set but should it have?', this._domNode === c);\n            this._domNode = c;\n        }}\n    />);\n}\nExplanation: when you change the x prop the ref function should not be called but since it's a brand new arrow function react will think it needs to call it\nEdited: to show a better example\n. Updated the PR comment to explain things a bit better\n. Updated the PR comment to explain things a bit better\n. Regarding the prop change, here's how react will consider this scenario:\n1. first render\n   - Just created this element, call its ref function :+1: \n2. second render and for each render after that\n   - This ref is different than last time \n     - because ((c) => {this._foo = c;}) != ((c) => {this._foo = c;})\n     - even though this component may not have changed... \n     - call its previous ref function with null\n     -  call the new ref function with the new value \n     - :-1: \nI agree with you regarding the performance impact, it may not affect things that much since it will technically be \"just a couple more function calls\". Usually it won't affect the performance significantly at all, unless you're doing a lot of updates.\nUp to the authors to consider the significance of the impacts, I am guessing in 99% of the scenarios it should be OK.\n. Regarding the prop change, here's how react will consider this scenario:\n1. first render\n   - Just created this element, call its ref function :+1: \n2. second render and for each render after that\n   - This ref is different than last time \n     - because ((c) => {this._foo = c;}) != ((c) => {this._foo = c;})\n     - even though this component may not have changed... \n     - call its previous ref function with null\n     -  call the new ref function with the new value \n     - :-1: \nI agree with you regarding the performance impact, it may not affect things that much since it will technically be \"just a couple more function calls\". Usually it won't affect the performance significantly at all, unless you're doing a lot of updates.\nUp to the authors to consider the significance of the impacts, I am guessing in 99% of the scenarios it should be OK.\n. Closing stale PR, but the recommendation still stands :). @ljharb updated :)\n. ",
    "pixelass": "How should a ref be assigned?\nNeither a string nor a function are accepted while it is in the documentation of React.js itself.\nhttps://facebook.github.io/react/docs/refs-and-the-dom.html\nHelp appreciated\nEdit: I just noticed how old this PR is. Should this PR be closed since there has not been any activity in almost a year? (Question remains: \"how should I assign a ref?\". @ljharb thx for the fast reply.\nIs this documented anywhere on the react documentation pages? I can't find official docs to this concept. . React is open source so someone who knows how \"it should work\" should open a PR for that. \nSadly I'm not sure what the current best practice is. ;). ",
    "tfuda": "Boy that's embarrassing. Thanks!\n. ",
    "benjamine": "just got bit by this, awesome!, waiting for next npm version, thanks!\n. ",
    "Darmody": "@ljharb Sorry! I thought that it was warnning by this package!\n. @ljharb Sorry! I thought that it was warnning by this package!\n. But the rule is still showing on the README \n. But the rule is still showing on the README \n. ",
    "travi": "I won't argue the UX issue at all as I fully agree. Unfortunately though, as I mentioned above, our team has lost that battle, at least for now.\nWhile we may be able to disable per link, my goal with further config is to more explicitly capture our reasoning for disabling some of the rule in certain cases. In our case we know that links to internal properties are safe enough to at least not include the noreferrer so that we can still track those analytics across internal properties. I see no reason not to still include noopener for those internal links and think a reminder for that part from this rule would be helpful.\nJust some thoughts for situations when use of target=_blank can't be avoided but still carry the desire to track referrer internally.\n. ",
    "kassiansun": "@ljharb So how to make this function stateless?\n. @ljharb Thanks for your tips! I misunderstood 'pure' and 'stateless' for a long time.\n. ",
    "rdiazv": "Nice, thanks! \ud83d\udc4d \n. Nice, thanks! \ud83d\udc4d \n. ",
    "brianreavis": "Ah, oops... sorry for the duplicate. Thanks @lencioni!\n. Ah, oops... sorry for the duplicate. Thanks @lencioni!\n. ",
    "alburritos": "What's the fix for this then? I have [2, \"disallow-in-func\"] and it's giving me a \nConfiguration for rule \"react/no-did-mount-set-state\" is invalid:\n    Value \"allow-in-func\" must be an enum value.. @ljharb It's an npm script where it just runs eslint --fix ./myDir (eslint isn't installed globally). @ljharb Out of curiosity, what's wrong with keeping v2? Also, if I rember the parserOptions stuff, I still the same error.. ",
    "dustinmoorenet": "It is fine if I finish out my typing. There is no long pause either. As soon as I type the r in render it flashes the error.\n. ",
    "Hypnosphi": "This makes the rule effectively useless =(. In fact, it only works if you call some method, like findDOMNode(this).scrollIntoView but doesn't otherwise. Two options I see:\n\nTry using refs instead\n// eslint-ignore-line react/no-find-dom-node. >which would be much more performant\n\nWhy exactly? You still create a bound function in constructor, that's roughly what arrow function property compiles to. js\nclass Foo {\n  myArrowFunc = () => { ... }\n}\ncompiles to\njs\nclass Foo {\n  constructor() {\n    this.myArrowFunc = () => { ... };\n  }\n}\nExcuse me, but I don't see any rendering here. Did you mean \"on every constructor call\" instead? Then it shouldn't occur too often in a typical react app.. Here they are: https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html. Here they are: https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html. Generally, it would make sense to me to have a forbid-methods rule, where one could list the methods that shouldn't be used. Generally, it would make sense to me to have a forbid-methods rule, where one could list the methods that shouldn't be used. @abdennour you can make your own PR if you feel like it. I'm open to renaming it BTW, maybe jsx-explicit-button-type would be more... explicit =D. > Can this perhaps not just apply to jsx, and also apply to React.createElement?\nAre there some examples of rules that check both JSX and createElement?. Oh sure, thanks. Oh sure, thanks. Looks like it doesn't include getSnapshotBeforeUpdate. Looks like it doesn't include getSnapshotBeforeUpdate. @yannickcr it still doesn't include getSnapshotBeforeUpdate. @yannickcr it still doesn't include getSnapshotBeforeUpdate. > the \"meat\" of the function is still shared on the prototype, and thus optimized\nI heard that modern browsers optimize closures, so that basically the \"meat\" is stored once, but each instanse member gets a version with its own this\u00a0from the closure, which is basically the same as binding in a constructor.\n@ljharb do you know any good way to measure the difference in performance between bind in constructor vs instance member functions?. > the \"meat\" of the function is still shared on the prototype, and thus optimized\nI heard that modern browsers optimize closures, so that basically the \"meat\" is stored once, but each instanse member gets a version with its own this\u00a0from the closure, which is basically the same as binding in a constructor.\n@ljharb do you know any good way to measure the difference in performance between bind in constructor vs instance member functions?. ",
    "daffy6537": "Hi\uff0cthere is a question, I want create a Animation component container, need to use the findDOMNode Api to continuely modify the container's height style, But the plugin claimed me that Line 37:  Do not use findDOMNode  react/no-find-dom-node, how can I deal with it?. @ljharb thank you very much!! \nit still warn \"Do not use findDOMNode  react/no-find-dom-node\" when I had commited that line \nusing \"// eslint-ignore-line react/no-find-dom-node\", but \"// eslint-disable-line \" was effective.\n. @ljharb thank you very much!! \nit still warn \"Do not use findDOMNode  react/no-find-dom-node\" when I had commited that line \nusing \"// eslint-ignore-line react/no-find-dom-node\", but \"// eslint-disable-line \" was effective.\n. ",
    "ColCh": "okay, thanks! \n. Such an ancient issue. Glad I've got package-lock and git repo to check this out \ud83d\ude03\nTL, DR: Yes, bug is fixed in recent version. It would be nice to add test case for it to prevent future bugs\nlong\nprevious versions: \n\nexact deps versions\n\"dependencies\": {\n    \"babel-eslint\": \"7.1.1\",\n    \"eslint\": \"3.12.0\",\n    \"eslint-plugin-react\": \"6.8.0\"\n  },\nminimal amount of code to reproduce\n<div onLayout={() => { /* dummy callback to fix android bug with component measuring */ }} />\nand eslintrc\n```\n{\n  \"parser\": \"babel-eslint\",\n  \"plugins\": [\n    \"react\"\n  ],\n  \"rules\": {\n    \"react/jsx-curly-spacing\": [\n      \"error\",\n      \"never\",\n      {\n        \"allowMultiline\": true\n      }\n    ]\n  }\n}\n```\nusing latest versions\ndeps\n\"dependencies\": {\n    \"babel-eslint\": \"10.0.1\",\n    \"eslint\": \"5.15.2\",\n    \"eslint-plugin-react\": \"7.12.4\"\n  },\ntada, bug is gone \ud83c\udf89 \n. oh, sorry! didn't noticed that there is \"valid\" section\nremoved that test and added test into valid section. ",
    "quanru": "@EvNaverniouk hi, i wonder know why must i use destructured props: \n'Ensures destructured props in component lifecycle methods are properly counted towards used props'. @ljharb if i don't do it in this way, it goes wrong. is this config correct ?\n'no-unused-prop-types': [2, { customValidators: ['nextProps'], skipShapeProps: true }],\n. ",
    "ha404": "Oh yeah, it's like:\njsx\nrender () {\n  <div onClick={::this.handleClick} />\n}\n. ",
    "deepakjois": "Sorry, did not see the skipShapeProps option. Closing\u2026\n. ",
    "andfelzapata": "it also wont check nextProps if componentWillReceiveProps is declared as an arrow function.. ",
    "simonsmith": "I get the same, and also a displayName missing error too:\n``` js\nimport React, {\n  PropTypes,\n} from 'react';\nimport {\n  NavigationExperimental,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Tab from './tab';\nimport withNavigate from './with-navigate';\nconst {\n  PropTypes: NavigationPropTypes,\n} = NavigationExperimental;\nconst TabList = withNavigate(props => {\n  return (\n    \n      {props.navigationState.routes.map(renderTab(props))}\n    \n  );\n});\nconst renderTab = props => {\n  return (route: Object, index: number): ReactElement => {\n    return (\n      \n    );\n  };\n};\nTabList.displayName = 'TabList';\nTabList.propTypes = {\n  navigationState: NavigationPropTypes.navigationState.isRequired,\n  navigate: PropTypes.func.isRequired,\n};\nconst styles = StyleSheet.create({\n  tabs: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\nexport default TabList;\n```\nI'm using the react/recommended config\n. ",
    "dobesv": "From the original question, is it possible there's a capitalization issue?\nStatelessCell.PropTypes vs StatelessCell.propTypes\n. ",
    "laurenkt": "Yes! That's it! Can't believe that one passed me by for most of a year.. doh. I'll close this now. Thanks everyone.. Yes! That's it! Can't believe that one passed me by for most of a year.. doh. I'll close this now. Thanks everyone.. ",
    "sapegin": "Do you generate them now?\n. Awesome! Thanks!\n. ",
    "ericmatthys": "The main difference regarding callbacksLast is that jsx-sort-props is meant to enforce alphabetical sorting, while this rule is not.\n. ",
    "merlinpatt": "My use case for this is that I typically want to put certain props first or last and I don't care about what's in between.\nI think a good solution to this would be to have sortFirst and sortLast, which both take arrays of strings or regexes. The arrays would simply contain what props you want first or last respectively.\nExamples:\n\n{sortFirst: [/Id$/]} - props like courseId, gameId would be first\n{sortLast: ['defaultChecked']} - defaultChecked would be last. My use case for this is that I typically want to put certain props first or last and I don't care about what's in between.\n\nI think a good solution to this would be to have sortFirst and sortLast, which both take arrays of strings or regexes. The arrays would simply contain what props you want first or last respectively.\nExamples:\n\n{sortFirst: [/Id$/]} - props like courseId, gameId would be first\n{sortLast: ['defaultChecked']} - defaultChecked would be last. I agree that skipShapeProps should default to true if it can't properly detect usage of props in shape.\n\nThe current behavior contradicts the forbid-prop-types rule since that encourages the use of shape instead of object.. ",
    "feimosi": "I'm also facing a false positive error, although in a bit different case, when using destructuring:\nfunction ListItem({ item }) {}\nIt highlights every property of the shape of item.\nEDIT: Actually, there's already an issue for that: #816\n. ",
    "victor-homyakov": "One more example of false positive:\n``` jsx\nconst Button = React.createClass({\n    displayName: 'Button',\npropTypes: {\n    name: React.PropTypes.string.isRequired,\n    isEnabled: React.PropTypes.bool.isRequired\n},\n\nrender() {\n    const item = this.props;\n    const disabled = !this.props.isEnabled;\n    return (\n        <div>\n            <button type=\"button\" disabled={disabled}>{item.name}</button>\n        </div>\n    );\n}\n\n});\n```\nHere name is marked as unused. In fact, all properties accessed via temporary local variable will be flagged as unused.\n. The same for nested function. In this example\n``` jsx\nconst Comp = (props) => {\n    const loadTerm = (type, projectId) => props.termProcessor.getTerm(type, projectId);\nconst terms = props.terms\n    .map(({type, projectId}) => loadTerm(type, projectId))\n    .join(' ');\n\nreturn <span>{terms}</span>;\n\n};\nComp.propTypes = {\n    termProcessor: React.PropTypes.object.isRequired,\n    terms: React.PropTypes.arrayOf(React.PropTypes.shape({\n        type: React.PropTypes.string.isRequired,\n        projectId: React.PropTypes.number\n    })).isRequired\n};\n```\ntermProcessor is marked as unused, while in this example not:\n``` jsx\nconst Comp = (props) => {\n    const loadTerm = (type, projectId) => props.termProcessor.getTerm(type, projectId);\nconst terms = props.terms\n    .map(loadTerm)\n    .join(' ');\n\nreturn <span>{terms}</span>;\n\n};\nComp.propTypes = {\n    termProcessor: React.PropTypes.object.isRequired,\n    terms: React.PropTypes.arrayOf(React.PropTypes.shape({\n        type: React.PropTypes.string.isRequired,\n        projectId: React.PropTypes.number\n    })).isRequired\n};\n``\n. - linter could just mark all properties as used when it sees{...this.props}- linter could use sort of weak warning or info when some property is unused explicitly but is passed to child component with{...this.props}, e.g. \"Potentially unused property foo\" or \"Property foo is not used explicitly\"\n. IMO configured severity is sort of upper bound, and linter may report some issues with lower severity\n. :(\nOK, what about adding new option to silence this rule when spread operator{... this.props}is used?\n. Please read description one more time. Propertytextis _not used_, but is _not_ flagged as unused.\n. What if I do not want to enforcedefaultPropsorpropTypes`?. :(\nIn case of existing medium-sized project with missing/wrong propTypes and missing defaultProps I do not want to fix all of them and make massive code changes.\nIt looks too restrictive to enforce these rules and add propTypes everywhere just in order to check if existing ones are written properly.. ",
    "stevenla": "I get false positives in this scenario:\n``` jsx\nclass MyComponent extends Component {\n  static propTypes = {\n    error: PropTypes.string,\n  };\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.error) {\n      alert(nextProps.error);\n    }\n  }\n}\n```\nerror is flagged as a prop that is defined but never used. This example is a bit contrived but it can still happen in practice.\n. ",
    "ivarni": "I've a legit usecase for that example. We've a HOC that handles validation and gives a submitted prop to its wrapped component once there has been an attempt at submitting the form. We're doing stuff in componentWillReceiveProps based on wether we're going to receive a true value in nextProps.submitted and had that exact false positive.\n. The propTypes describe what props the component needs in order to function and mapStateToProps is not really part of the component's class so you'd need some different mechanism for ensuring that the redux store actually contains the properties you need in order to transform them to component props.\nReact will also only check props that are actually passed on to the component itself and not those passed to mapStateToProps.. ",
    "prithsharma": "@ljharb - ^^ why do you say that?\nMay be I am missing something - if there is a prop that I need to use while mapping state to props(e.g. passing to a selector), is there a better way to do it?\nFYI - the prop in question isn't in the store, if that's how the selector could have got hold of it.. @ljharb, @ivarni - I agree with your point. What I was trying to achieve by keeping the \"only being used in mapStateToProps\" prop in propTypes was to ensure that I can use React PropTypes validations to enforce the requirement and the data type of that prop along with a default value if needed. Since this prop is not a part of the props finally being used, one can better remove it from the propTypes definition, at the cost of missing the validation and default value.\nHaving said that, the comments above are missing a fine detail here, the object returned by mapStateToProps is not really a \"replacement\" props object, since it is \"merged\" to the original props object.\nWhile I don't agree that a prop being used only in mapStateToProps need not be passed to the component(given the example above), it's perfectly valid to say that mapStateToProps is not a part of the actual React component class and thus trying to validate inputs to mapStateToProps using the React component PropType validations is not usual.\nThank you for the fruitful discussion. I'll just disable the rule with inline comments.. ",
    "mrchief": "Its a grand ambition to have a rule like this. JavaScript is a highly dynamic language and there is no way a static checker can detect unused props reliably. Turning it off may be the only sane and time-practical recourse. My 2 cents of course. . > a linter can't really determine everything\nThat sounds familiar. Did someone say so earlier? :stuck_out_tongue: \nAs much as I hate getting slapped around by a linter, I agree with @ljharb here. getLocations is poorly designed in this case. You can easily change the call in constructor to this.getLocations(props) and avoid this whole issue in the first place. \nI like linting as much as the next person but in this case, the use case itself is not compelling. The authors do listen if there is a good use case. And linting is purely an opt-in thingy. You lint because you want your code to really look good, not because you want some figure head to give a seal of OK.\nThat said, there is no point in spamming a closed thread. If there are valid concerns, then a new issue should be opened.. > It wasn't meant to be a spam\nDidn't mean you specifically. We're all replying to a closed thread (including myself). \n\nas I typed it up here\n\nYes and as @ljharb pointed it out, its not a legit case. What I am saying is the maintainers will be more inclined to take up something that is not being debated in a closed thread with a use case that can be argued as not the most compelling example of a valid use case. Didn't mean anything personally.. Here's a use case:\n```\n  test('renders default state correctly', () => {\n    const tree = renderer.create(\n\n).toJSON()\nexpect(tree).toMatchSnapshot()\n\n})\n```\ngives Expected closing tag to match indentation of opening  react/jsx-closing-tag-location error. If you fix that, you get Expected indentation of 4 space characters but found 33  react/jsx-indent error.. Here's a use case:\n```\n  test('renders default state correctly', () => {\n    const tree = renderer.create(\n\n).toJSON()\nexpect(tree).toMatchSnapshot()\n\n})\n```\ngives Expected closing tag to match indentation of opening  react/jsx-closing-tag-location error. If you fix that, you get Expected indentation of 4 space characters but found 33  react/jsx-indent error.. 2 issues with that:\neslint --fix formats that to\nconst tree = renderer.create(<Provider store={mockStore()}>\n      <JobForm />\n                                 </Provider>).toJSON()\nwhich then gives the react/jsx-indent error.\nIf you run eslint without the autofix. you get error  Unexpected newline after '('  function-paren-newline error.\nBeen struggling with this for past few hours. :(\n. 2 issues with that:\neslint --fix formats that to\nconst tree = renderer.create(<Provider store={mockStore()}>\n      <JobForm />\n                                 </Provider>).toJSON()\nwhich then gives the react/jsx-indent error.\nIf you run eslint without the autofix. you get error  Unexpected newline after '('  function-paren-newline error.\nBeen struggling with this for past few hours. :(\n. @ljharb That works. I'm not sure if I like the extraneous parens. \nAnd the fact that I've to go rewrite all my existing code - which I think I'll have to rollback in some future update that'll complain about the extra parens.. @ljharb That works. I'm not sure if I like the extraneous parens. \nAnd the fact that I've to go rewrite all my existing code - which I think I'll have to rollback in some future update that'll complain about the extra parens.. Does anyone what version introduced this? I'm trying to figure out which version to rollback to.. I tried rolling back to 7.3.0, 7.2.0 along with airbnb config ^15.0.0 but now I started getting this error:\nerror  Definition for rule 'react/jsx-curly-brace-presence' was not found  react/jsx-curly-brace-presence. I rolled back config to 15 from 16. 15 is what I have been using so far. Are you saying I need to roll back further?\n\nnpm ls\n\n```\n\n| +-- babel-plugin-transform-es2015-modules-amd@6.24.1\n| | +-- babel-plugin-transform-es2015-modules-commonjs@6.26.0 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- babel-template@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-modules-commonjs@6.26.0\n| | +-- babel-plugin-transform-strict-mode@6.24.1\n| | | +-- babel-runtime@6.26.0 deduped\n| | | `-- babel-types@6.26.0 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | +-- babel-template@6.26.0 deduped\n| | `-- babel-types@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-modules-systemjs@6.24.1\n| | +-- babel-helper-hoist-variables@6.24.1\n| | | +-- babel-runtime@6.26.0 deduped\n| | | `-- babel-types@6.26.0 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- babel-template@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-modules-umd@6.24.1\n| | +-- babel-plugin-transform-es2015-modules-amd@6.24.1 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- babel-template@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-object-super@6.24.1\n| | +-- babel-helper-replace-supers@6.24.1 deduped\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-parameters@6.24.1\n| | +-- babel-helper-call-delegate@6.24.1\n| | | +-- babel-helper-hoist-variables@6.24.1 deduped\n| | | +-- babel-runtime@6.26.0 deduped\n| | | +-- babel-traverse@6.26.0 deduped\n| | | `-- babel-types@6.26.0 deduped\n| | +-- babel-helper-get-function-arity@6.24.1 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | +-- babel-template@6.26.0 deduped\n| | +-- babel-traverse@6.26.0 deduped\n| | `-- babel-types@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-shorthand-properties@6.24.1\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- babel-types@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-spread@6.22.0\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-sticky-regex@6.24.1\n| | +-- babel-helper-regex@6.26.0\n| | | +-- babel-runtime@6.26.0 deduped\n| | | +-- babel-types@6.26.0 deduped\n| | | `-- lodash@4.17.4 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- babel-types@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-template-literals@6.22.0\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-typeof-symbol@6.23.0\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-es2015-unicode-regex@6.24.1\n| | +-- babel-helper-regex@6.26.0 deduped\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- regexpu-core@2.0.0\n| |   +-- regenerate@1.3.3\n| |   +-- regjsgen@0.2.0\n| |   `-- regjsparser@0.1.5\n| |     `-- jsesc@0.5.0\n| +-- babel-plugin-transform-exponentiation-operator@6.24.1\n| | +-- babel-helper-builder-binary-assignment-operator-visitor@6.24.1\n| | | +-- babel-helper-explode-assignable-expression@6.24.1\n| | | | +-- babel-runtime@6.26.0 deduped\n| | | | +-- babel-traverse@6.26.0 deduped\n| | | | `-- babel-types@6.26.0 deduped\n| | | +-- babel-runtime@6.26.0 deduped\n| | | `-- babel-types@6.26.0 deduped\n| | +-- babel-plugin-syntax-exponentiation-operator@6.13.0\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-regenerator@6.26.0\n| | `-- regenerator-transform@0.10.1\n| |   +-- babel-runtime@6.26.0 deduped\n| |   +-- babel-types@6.26.0 deduped\n| |   `-- private@0.1.8 deduped\n| +-- browserslist@2.7.0 deduped\n| +-- invariant@2.2.2\n| | `-- loose-envify@1.3.1 deduped\n| `-- semver@5.4.1\n+-- babel-preset-react@6.24.1\n| +-- babel-plugin-syntax-jsx@6.18.0\n| +-- babel-plugin-transform-react-display-name@6.25.0\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-react-jsx@6.24.1\n| | +-- babel-helper-builder-react-jsx@6.26.0\n| | | +-- babel-runtime@6.26.0 deduped\n| | | +-- babel-types@6.26.0 deduped\n| | | `-- esutils@2.0.2 deduped\n| | +-- babel-plugin-syntax-jsx@6.18.0 deduped\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-react-jsx-self@6.22.0\n| | +-- babel-plugin-syntax-jsx@6.18.0 deduped\n| | `-- babel-runtime@6.26.0 deduped\n| +-- babel-plugin-transform-react-jsx-source@6.22.0\n| | +-- babel-plugin-syntax-jsx@6.18.0 deduped\n| | `-- babel-runtime@6.26.0 deduped\n| `-- babel-preset-flow@6.23.0\n|   `-- babel-plugin-transform-flow-strip-types@6.22.0\n|     +-- babel-plugin-syntax-flow@6.18.0\n|     `-- babel-runtime@6.26.0 deduped\n+-- better-npm-run@0.1.0\n| +-- commander@2.11.0 deduped\n| +-- dotenv@2.0.0\n| `-- object-assign@4.1.1\n+-- bunyan@1.8.12\n| +-- dtrace-provider@0.8.5\n| | `-- nan@2.7.0 deduped\n| +-- moment@2.19.1\n| +-- mv@2.1.1\n| | +-- mkdirp@0.5.1 deduped\n| | +-- ncp@2.0.0\n| | `-- rimraf@2.4.5\n| |   `-- glob@6.0.4\n| |     +-- inflight@1.0.6 deduped\n| |     +-- inherits@2.0.3 deduped\n| |     +-- minimatch@3.0.4 deduped\n| |     +-- once@1.4.0 deduped\n| |     `-- path-is-absolute@1.0.1 deduped\n| `-- safe-json-stringify@1.0.4\n+-- bunyan-stream@1.0.0\n| +-- JSONStream@1.3.1\n| | +-- jsonparse@1.3.1\n| | `-- through@2.3.8\n| +-- pump@1.0.2\n| | +-- end-of-stream@1.4.0\n| | | `-- once@1.4.0 deduped\n| | `-- once@1.4.0 deduped\n| `-- through2@2.0.3 deduped\n+-- classnames@2.2.5\n+-- css-loader@0.28.7\n| +-- babel-code-frame@6.26.0 deduped\n| +-- css-selector-tokenizer@0.7.0\n| | +-- cssesc@0.1.0\n| | +-- fastparse@1.1.1\n| | `-- regexpu-core@1.0.0\n| |   +-- regenerate@1.3.3 deduped\n| |   +-- regjsgen@0.2.0 deduped\n| |   `-- regjsparser@0.1.5 deduped\n| +-- cssnano@3.10.0\n| | +-- autoprefixer@6.7.7\n| | | +-- browserslist@1.7.7\n| | | | +-- caniuse-db@1.0.30000758 deduped\n| | | | `-- electron-to-chromium@1.3.27 deduped\n| | | +-- caniuse-db@1.0.30000758\n| | | +-- normalize-range@0.1.2 deduped\n| | | +-- num2fraction@1.2.2 deduped\n| | | +-- postcss@5.2.18 deduped\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- decamelize@1.2.0\n| | +-- defined@1.0.0\n| | +-- has@1.0.1 deduped\n| | +-- object-assign@4.1.1 deduped\n| | +-- postcss@5.2.18\n| | | +-- chalk@1.1.3\n| | | | +-- ansi-styles@2.2.1\n| | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | +-- has-ansi@2.0.0 deduped\n| | | | +-- strip-ansi@3.0.1 deduped\n| | | | `-- supports-color@2.0.0\n| | | +-- js-base64@2.3.2 deduped\n| | | +-- source-map@0.5.7 deduped\n| | | `-- supports-color@3.2.3\n| | |   `-- has-flag@1.0.0\n| | +-- postcss-calc@5.3.1\n| | | +-- postcss@5.2.18 deduped\n| | | +-- postcss-message-helpers@2.0.0 deduped\n| | | `-- reduce-css-calc@1.3.0\n| | |   +-- balanced-match@0.4.2\n| | |   +-- math-expression-evaluator@1.2.17 deduped\n| | |   `-- reduce-function-call@1.0.2 deduped\n| | +-- postcss-colormin@2.2.2\n| | | +-- colormin@1.1.2\n| | | | +-- color@0.11.4 deduped\n| | | | +-- css-color-names@0.0.4\n| | | | `-- has@1.0.1 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-convert-values@2.6.1\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-discard-comments@2.0.4\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-discard-duplicates@2.1.0\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-discard-empty@2.1.0\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-discard-overridden@0.1.1\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-discard-unused@2.2.3\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- uniqs@2.0.0\n| | +-- postcss-filter-plugins@2.0.2\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- uniqid@4.1.1\n| | |   `-- macaddress@0.2.8\n| | +-- postcss-merge-idents@2.1.7\n| | | +-- has@1.0.1 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-merge-longhand@2.0.2\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-merge-rules@2.1.2\n| | | +-- browserslist@1.7.7\n| | | | +-- caniuse-db@1.0.30000758 deduped\n| | | | `-- electron-to-chromium@1.3.27 deduped\n| | | +-- caniuse-api@1.6.1\n| | | | +-- browserslist@1.7.7\n| | | | | +-- caniuse-db@1.0.30000758 deduped\n| | | | | `-- electron-to-chromium@1.3.27 deduped\n| | | | +-- caniuse-db@1.0.30000758 deduped\n| | | | +-- lodash.memoize@4.1.2 deduped\n| | | | `-- lodash.uniq@4.5.0 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | +-- postcss-selector-parser@2.2.3 deduped\n| | | `-- vendors@1.0.1\n| | +-- postcss-minify-font-values@1.0.5\n| | | +-- object-assign@4.1.1 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-minify-gradients@1.0.5\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-minify-params@1.2.2\n| | | +-- alphanum-sort@1.0.2\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | +-- postcss-value-parser@3.3.0 deduped\n| | | `-- uniqs@2.0.0 deduped\n| | +-- postcss-minify-selectors@2.1.1\n| | | +-- alphanum-sort@1.0.2 deduped\n| | | +-- has@1.0.1 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-selector-parser@2.2.3 deduped\n| | +-- postcss-normalize-charset@1.1.1\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-normalize-url@3.0.8\n| | | +-- is-absolute-url@2.1.0\n| | | +-- normalize-url@1.9.1\n| | | | +-- object-assign@4.1.1 deduped\n| | | | +-- prepend-http@1.0.4\n| | | | +-- query-string@4.3.4\n| | | | | +-- object-assign@4.1.1 deduped\n| | | | | `-- strict-uri-encode@1.1.0\n| | | | `-- sort-keys@1.1.2\n| | | |   `-- is-plain-obj@1.1.0\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-ordered-values@2.2.3\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-reduce-idents@2.4.0\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-reduce-initial@1.0.1\n| | | `-- postcss@5.2.18\n| | |   +-- chalk@1.1.3\n| | |   | +-- ansi-styles@2.2.1\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | +-- has-ansi@2.0.0 deduped\n| | |   | +-- strip-ansi@3.0.1 deduped\n| | |   | `-- supports-color@2.0.0\n| | |   +-- js-base64@2.3.2 deduped\n| | |   +-- source-map@0.5.7 deduped\n| | |   `-- supports-color@3.2.3\n| | |     `-- has-flag@1.0.0\n| | +-- postcss-reduce-transforms@1.0.4\n| | | +-- has@1.0.1 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- postcss-value-parser@3.3.0 deduped\n| | +-- postcss-svgo@2.1.6\n| | | +-- is-svg@2.1.0 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | +-- postcss-value-parser@3.3.0 deduped\n| | | `-- svgo@0.7.2 deduped\n| | +-- postcss-unique-selectors@2.0.2\n| | | +-- alphanum-sort@1.0.2 deduped\n| | | +-- postcss@5.2.18\n| | | | +-- chalk@1.1.3\n| | | | | +-- ansi-styles@2.2.1\n| | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- has-ansi@2.0.0 deduped\n| | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | `-- supports-color@2.0.0\n| | | | +-- js-base64@2.3.2 deduped\n| | | | +-- source-map@0.5.7 deduped\n| | | | `-- supports-color@3.2.3\n| | | |   `-- has-flag@1.0.0\n| | | `-- uniqs@2.0.0 deduped\n| | +-- postcss-value-parser@3.3.0 deduped\n| | `-- postcss-zindex@2.2.0\n| |   +-- has@1.0.1 deduped\n| |   +-- postcss@5.2.18\n| |   | +-- chalk@1.1.3\n| |   | | +-- ansi-styles@2.2.1\n| |   | | +-- escape-string-regexp@1.0.5 deduped\n| |   | | +-- has-ansi@2.0.0 deduped\n| |   | | +-- strip-ansi@3.0.1 deduped\n| |   | | `-- supports-color@2.0.0\n| |   | +-- js-base64@2.3.2 deduped\n| |   | +-- source-map@0.5.7 deduped\n| |   | `-- supports-color@3.2.3\n| |   |   `-- has-flag@1.0.0\n| |   `-- uniqs@2.0.0 deduped\n| +-- icss-utils@2.1.0\n| | `-- postcss@6.0.14 deduped\n| +-- loader-utils@1.1.0 deduped\n| +-- lodash.camelcase@4.3.0\n| +-- object-assign@4.1.1 deduped\n| +-- postcss@5.2.18\n| | +-- chalk@1.1.3\n| | | +-- ansi-styles@2.2.1\n| | | +-- escape-string-regexp@1.0.5 deduped\n| | | +-- has-ansi@2.0.0 deduped\n| | | +-- strip-ansi@3.0.1 deduped\n| | | `-- supports-color@2.0.0\n| | +-- js-base64@2.3.2\n| | +-- source-map@0.5.7 deduped\n| | `-- supports-color@3.2.3\n| |   `-- has-flag@1.0.0\n| +-- postcss-modules-extract-imports@1.1.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-modules-local-by-default@1.2.0\n| | +-- css-selector-tokenizer@0.7.0 deduped\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-modules-scope@1.1.0\n| | +-- css-selector-tokenizer@0.7.0 deduped\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-modules-values@1.3.0\n| | +-- icss-replace-symbols@1.1.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-value-parser@3.3.0 deduped\n| `-- source-list-map@2.0.0\n+-- enzyme@3.1.1\n| +-- cheerio@1.0.0-rc.2\n| | +-- css-select@1.2.0\n| | | +-- boolbase@1.0.0\n| | | +-- css-what@2.1.0\n| | | +-- domutils@1.5.1\n| | | | +-- dom-serializer@0.1.0 deduped\n| | | | `-- domelementtype@1.3.0 deduped\n| | | `-- nth-check@1.0.1\n| | |   `-- boolbase@1.0.0 deduped\n| | +-- dom-serializer@0.1.0\n| | | +-- domelementtype@1.1.3\n| | | `-- entities@1.1.1 deduped\n| | +-- entities@1.1.1\n| | +-- htmlparser2@3.9.2\n| | | +-- domelementtype@1.3.0\n| | | +-- domhandler@2.4.1\n| | | | `-- domelementtype@1.3.0 deduped\n| | | +-- domutils@1.5.1 deduped\n| | | +-- entities@1.1.1 deduped\n| | | +-- inherits@2.0.3 deduped\n| | | `-- readable-stream@2.3.3 deduped\n| | +-- lodash@4.17.4 deduped\n| | `-- parse5@3.0.3\n| |   `-- @types/node@8.0.50\n| +-- function.prototype.name@1.0.3\n| | +-- define-properties@1.1.2\n| | | +-- foreach@2.0.5\n| | | `-- object-keys@1.0.11 deduped\n| | +-- function-bind@1.1.1\n| | `-- is-callable@1.1.3\n| +-- is-subset@0.1.1\n| +-- lodash@4.17.4 deduped\n| +-- object-is@1.0.1\n| +-- object.assign@4.0.4\n| | +-- define-properties@1.1.2 deduped\n| | +-- function-bind@1.1.1 deduped\n| | `-- object-keys@1.0.11\n| +-- object.entries@1.0.4\n| | +-- define-properties@1.1.2 deduped\n| | +-- es-abstract@1.9.0\n| | | +-- es-to-primitive@1.1.1\n| | | | +-- is-callable@1.1.3 deduped\n| | | | +-- is-date-object@1.0.1\n| | | | `-- is-symbol@1.0.1\n| | | +-- function-bind@1.1.1 deduped\n| | | +-- has@1.0.1 deduped\n| | | +-- is-callable@1.1.3 deduped\n| | | `-- is-regex@1.0.4\n| | |   `-- has@1.0.1 deduped\n| | +-- function-bind@1.1.1 deduped\n| | `-- has@1.0.1 deduped\n| +-- object.values@1.0.4\n| | +-- define-properties@1.1.2 deduped\n| | +-- es-abstract@1.9.0 deduped\n| | +-- function-bind@1.1.1 deduped\n| | `-- has@1.0.1 deduped\n| +-- raf@3.4.0 deduped\n| `-- rst-selector-parser@2.2.3\n|   +-- lodash.flattendeep@4.4.0\n|   `-- nearley@2.11.0\n|     +-- nomnom@1.6.2\n|     | +-- colors@0.5.1\n|     | `-- underscore@1.4.4\n|     +-- railroad-diagrams@1.0.0\n|     `-- randexp@0.4.6\n|       +-- discontinuous-range@1.0.0\n|       `-- ret@0.1.15\n+-- enzyme-adapter-react-16@1.0.4\n| +-- enzyme-adapter-utils@1.1.1\n| | +-- lodash@4.17.4 deduped\n| | +-- object.assign@4.0.4 deduped\n| | `-- prop-types@15.6.0 deduped\n| +-- lodash@4.17.4 deduped\n| +-- object.assign@4.0.4 deduped\n| +-- object.values@1.0.4 deduped\n| +-- prop-types@15.6.0 deduped\n| `-- react-test-renderer@16.0.0 deduped\n+-- eslint@4.10.0\n| +-- ajv@5.3.0\n| | +-- co@4.6.0\n| | +-- fast-deep-equal@1.0.0\n| | +-- fast-json-stable-stringify@2.0.0\n| | `-- json-schema-traverse@0.3.1\n| +-- babel-code-frame@6.26.0 deduped\n| +-- chalk@2.3.0\n| | +-- ansi-styles@3.2.0\n| | | `-- color-convert@1.9.0\n| | |   `-- color-name@1.1.3\n| | +-- escape-string-regexp@1.0.5\n| | `-- supports-color@4.5.0 deduped\n| +-- concat-stream@1.6.0\n| | +-- inherits@2.0.3 deduped\n| | +-- readable-stream@2.3.3 deduped\n| | `-- typedarray@0.0.6\n| +-- cross-spawn@5.1.0\n| | +-- lru-cache@4.1.1\n| | | +-- pseudomap@1.0.2\n| | | `-- yallist@2.1.2\n| | +-- shebang-command@1.2.0\n| | | `-- shebang-regex@1.0.0\n| | `-- which@1.3.0\n| |   `-- isexe@2.0.0\n| +-- debug@3.1.0\n| | `-- ms@2.0.0 deduped\n| +-- doctrine@2.0.0\n| | +-- esutils@2.0.2 deduped\n| | `-- isarray@1.0.0\n| +-- eslint-scope@3.7.1\n| | +-- esrecurse@4.2.0\n| | | +-- estraverse@4.2.0 deduped\n| | | `-- object-assign@4.1.1 deduped\n| | `-- estraverse@4.2.0 deduped\n| +-- espree@3.5.1\n| | +-- acorn@5.2.1 deduped\n| | `-- acorn-jsx@3.0.1\n| |   `-- acorn@3.3.0\n| +-- esquery@1.0.0\n| | `-- estraverse@4.2.0 deduped\n| +-- estraverse@4.2.0\n| +-- esutils@2.0.2\n| +-- file-entry-cache@2.0.0\n| | +-- flat-cache@1.3.0\n| | | +-- circular-json@0.3.3\n| | | +-- del@2.2.2\n| | | | +-- globby@5.0.0\n| | | | | +-- array-union@1.0.2 deduped\n| | | | | +-- arrify@1.0.1 deduped\n| | | | | +-- glob@7.1.2\n| | | | | | +-- fs.realpath@1.0.0 deduped\n| | | | | | +-- inflight@1.0.6 deduped\n| | | | | | +-- inherits@2.0.3 deduped\n| | | | | | +-- minimatch@3.0.4 deduped\n| | | | | | +-- once@1.4.0 deduped\n| | | | | | `-- path-is-absolute@1.0.1 deduped\n| | | | | +-- object-assign@4.1.1 deduped\n| | | | | +-- pify@2.3.0 deduped\n| | | | | `-- pinkie-promise@2.0.1 deduped\n| | | | +-- is-path-cwd@1.0.0\n| | | | +-- is-path-in-cwd@1.0.0\n| | | | | `-- is-path-inside@1.0.0 deduped\n| | | | +-- object-assign@4.1.1 deduped\n| | | | +-- pify@2.3.0 deduped\n| | | | +-- pinkie-promise@2.0.1 deduped\n| | | | `-- rimraf@2.6.2 deduped\n| | | +-- graceful-fs@4.1.11 deduped\n| | | `-- write@0.2.1\n| | |   `-- mkdirp@0.5.1 deduped\n| | `-- object-assign@4.1.1 deduped\n| +-- functional-red-black-tree@1.0.1\n| +-- glob@7.1.2\n| | +-- fs.realpath@1.0.0 deduped\n| | +-- inflight@1.0.6 deduped\n| | +-- inherits@2.0.3 deduped\n| | +-- minimatch@3.0.4 deduped\n| | +-- once@1.4.0 deduped\n| | `-- path-is-absolute@1.0.1 deduped\n| +-- globals@9.18.0\n| +-- ignore@3.3.7\n| +-- imurmurhash@0.1.4\n| +-- inquirer@3.3.0\n| | +-- ansi-escapes@3.0.0\n| | +-- chalk@2.3.0 deduped\n| | +-- cli-cursor@2.1.0\n| | | `-- restore-cursor@2.0.0\n| | |   +-- onetime@2.0.1\n| | |   | `-- mimic-fn@1.1.0 deduped\n| | |   `-- signal-exit@3.0.2 deduped\n| | +-- cli-width@2.2.0\n| | +-- external-editor@2.0.5\n| | | +-- iconv-lite@0.4.19\n| | | +-- jschardet@1.6.0\n| | | `-- tmp@0.0.33\n| | |   `-- os-tmpdir@1.0.2 deduped\n| | +-- figures@2.0.0\n| | | `-- escape-string-regexp@1.0.5 deduped\n| | +-- lodash@4.17.4 deduped\n| | +-- mute-stream@0.0.7\n| | +-- run-async@2.3.0\n| | | `-- is-promise@2.1.0 deduped\n| | +-- rx-lite@4.0.8\n| | +-- rx-lite-aggregates@4.0.8\n| | | `-- rx-lite@4.0.8 deduped\n| | +-- string-width@2.1.1 deduped\n| | +-- strip-ansi@4.0.0\n| | | `-- ansi-regex@3.0.0\n| | `-- through@2.3.8 deduped\n| +-- is-resolvable@1.0.0\n| | `-- tryit@1.0.3\n| +-- js-yaml@3.10.0\n| | +-- argparse@1.0.9\n| | | `-- sprintf-js@1.0.3\n| | `-- esprima@4.0.0\n| +-- json-stable-stringify@1.0.1\n| | `-- jsonify@0.0.0\n| +-- levn@0.3.0\n| | +-- prelude-ls@1.1.2\n| | `-- type-check@0.3.2\n| |   `-- prelude-ls@1.1.2 deduped\n| +-- lodash@4.17.4 deduped\n| +-- minimatch@3.0.4 deduped\n| +-- mkdirp@0.5.1 deduped\n| +-- natural-compare@1.4.0\n| +-- optionator@0.8.2\n| | +-- deep-is@0.1.3\n| | +-- fast-levenshtein@2.0.6\n| | +-- levn@0.3.0 deduped\n| | +-- prelude-ls@1.1.2 deduped\n| | +-- type-check@0.3.2 deduped\n| | `-- wordwrap@1.0.0\n| +-- path-is-inside@1.0.2\n| +-- pluralize@7.0.0\n| +-- progress@2.0.0\n| +-- require-uncached@1.0.3\n| | +-- caller-path@0.1.0\n| | | `-- callsites@0.2.0\n| | `-- resolve-from@1.0.1\n| +-- semver@5.4.1 deduped\n| +-- strip-ansi@4.0.0\n| | `-- ansi-regex@3.0.0\n| +-- strip-json-comments@2.0.1\n| +-- table@4.0.2\n| | +-- ajv@5.3.0 deduped\n| | +-- ajv-keywords@2.1.1\n| | +-- chalk@2.3.0 deduped\n| | +-- lodash@4.17.4 deduped\n| | +-- slice-ansi@1.0.0\n| | | `-- is-fullwidth-code-point@2.0.0\n| | `-- string-width@2.1.1 deduped\n| `-- text-table@0.2.0\n+-- eslint-config-airbnb@15.1.0\n| `-- eslint-config-airbnb-base@11.3.2\n|   `-- eslint-restricted-globals@0.1.1\n+-- eslint-loader@1.9.0\n| +-- loader-fs-cache@1.0.1\n| | +-- find-cache-dir@0.1.1\n| | | +-- commondir@1.0.1 deduped\n| | | +-- mkdirp@0.5.1 deduped\n| | | `-- pkg-dir@1.0.0\n| | |   `-- find-up@1.1.2\n| | |     +-- path-exists@2.1.0\n| | |     | `-- pinkie-promise@2.0.1 deduped\n| | |     `-- pinkie-promise@2.0.1 deduped\n| | `-- mkdirp@0.5.1 deduped\n| +-- loader-utils@1.1.0 deduped\n| +-- object-assign@4.1.1 deduped\n| +-- object-hash@1.2.0\n| `-- rimraf@2.6.2 deduped\n+-- eslint-plugin-import@2.8.0\n| +-- builtin-modules@1.1.1\n| +-- contains-path@0.1.0\n| +-- debug@2.6.9 deduped\n| +-- doctrine@1.5.0\n| | +-- esutils@2.0.2 deduped\n| | `-- isarray@1.0.0 deduped\n| +-- eslint-import-resolver-node@0.3.1\n| | +-- debug@2.6.9 deduped\n| | `-- resolve@1.5.0 deduped\n| +-- eslint-module-utils@2.1.1\n| | +-- debug@2.6.9 deduped\n| | `-- pkg-dir@1.0.0\n| |   `-- find-up@1.1.2\n| |     +-- path-exists@2.1.0\n| |     | `-- pinkie-promise@2.0.1 deduped\n| |     `-- pinkie-promise@2.0.1 deduped\n| +-- has@1.0.1\n| | `-- function-bind@1.1.1 deduped\n| +-- lodash.cond@4.5.2\n| +-- minimatch@3.0.4 deduped\n| `-- read-pkg-up@2.0.0\n|   +-- find-up@2.1.0 deduped\n|   `-- read-pkg@2.0.0\n|     +-- load-json-file@2.0.0\n|     | +-- graceful-fs@4.1.11 deduped\n|     | +-- parse-json@2.2.0 deduped\n|     | +-- pify@2.3.0 deduped\n|     | `-- strip-bom@3.0.0 deduped\n|     +-- normalize-package-data@2.4.0 deduped\n|     `-- path-type@2.0.0\n|       `-- pify@2.3.0 deduped\n+-- UNMET PEER DEPENDENCY eslint-plugin-jsx-a11y@6.0.2\n| +-- aria-query@0.7.0\n| | `-- ast-types-flow@0.0.7 deduped\n| +-- array-includes@3.0.3\n| | +-- define-properties@1.1.2 deduped\n| | `-- es-abstract@1.9.0 deduped\n| +-- ast-types-flow@0.0.7\n| +-- axobject-query@0.1.0\n| | `-- ast-types-flow@0.0.7 deduped\n| +-- damerau-levenshtein@1.0.4\n| +-- emoji-regex@6.5.1\n| `-- jsx-ast-utils@1.4.1\n+-- eslint-plugin-react@7.3.0\n| +-- doctrine@2.0.0 deduped\n| +-- has@1.0.1 deduped\n| +-- jsx-ast-utils@2.0.1\n| | `-- array-includes@3.0.3 deduped\n| `-- prop-types@15.6.0 deduped\n+-- extract-text-webpack-plugin@3.0.2\n| +-- async@2.6.0\n| | `-- lodash@4.17.4 deduped\n| +-- loader-utils@1.1.0 deduped\n| +-- schema-utils@0.3.0\n| | `-- ajv@5.3.0 deduped\n| `-- webpack-sources@1.0.2\n|   +-- source-list-map@2.0.0 deduped\n|   `-- source-map@0.6.1\n+-- figlet@1.2.0\n+-- file-loader@1.1.5\n| +-- loader-utils@1.1.0 deduped\n| `-- schema-utils@0.3.0 deduped\n+-- history@4.7.2\n| +-- invariant@2.2.2 deduped\n| +-- loose-envify@1.3.1\n| | `-- js-tokens@3.0.2 deduped\n| +-- resolve-pathname@2.2.0\n| +-- value-equal@0.4.0\n| `-- warning@3.0.0\n|   `-- loose-envify@1.3.1 deduped\n+-- humps@2.0.1\n+-- image-webpack-loader@3.4.2\n| +-- imagemin@5.3.1\n| | +-- file-type@4.4.0\n| | +-- globby@6.1.0\n| | | +-- array-union@1.0.2 deduped\n| | | +-- glob@7.1.2\n| | | | +-- fs.realpath@1.0.0 deduped\n| | | | +-- inflight@1.0.6 deduped\n| | | | +-- inherits@2.0.3 deduped\n| | | | +-- minimatch@3.0.4 deduped\n| | | | +-- once@1.4.0 deduped\n| | | | `-- path-is-absolute@1.0.1 deduped\n| | | +-- object-assign@4.1.1 deduped\n| | | +-- pify@2.3.0 deduped\n| | | `-- pinkie-promise@2.0.1 deduped\n| | +-- make-dir@1.1.0 deduped\n| | +-- p-pipe@1.2.0\n| | +-- pify@2.3.0\n| | `-- replace-ext@1.0.0\n| +-- imagemin-gifsicle@5.2.0\n| | +-- exec-buffer@3.2.0\n| | | +-- execa@0.7.0\n| | | | +-- cross-spawn@5.1.0 deduped\n| | | | +-- get-stream@3.0.0\n| | | | +-- is-stream@1.1.0\n| | | | +-- npm-run-path@2.0.2\n| | | | | `-- path-key@2.0.1\n| | | | +-- p-finally@1.0.0 deduped\n| | | | +-- signal-exit@3.0.2 deduped\n| | | | `-- strip-eof@1.0.0\n| | | +-- p-finally@1.0.0\n| | | +-- pify@3.0.0\n| | | +-- rimraf@2.6.2 deduped\n| | | `-- tempfile@2.0.0\n| | |   +-- temp-dir@1.0.0\n| | |   `-- uuid@3.1.0 deduped\n| | +-- gifsicle@3.0.4\n| | | +-- bin-build@2.2.0\n| | | | +-- archive-type@3.2.0\n| | | | | `-- file-type@3.9.0\n| | | | +-- decompress@3.0.0\n| | | | | +-- buffer-to-vinyl@1.1.0\n| | | | | | +-- file-type@3.9.0\n| | | | | | +-- readable-stream@2.3.3 deduped\n| | | | | | +-- uuid@2.0.3\n| | | | | | `-- vinyl@1.2.0 deduped\n| | | | | +-- concat-stream@1.6.0 deduped\n| | | | | +-- decompress-tar@3.1.0\n| | | | | | +-- is-tar@1.0.0\n| | | | | | +-- object-assign@2.1.1\n| | | | | | +-- strip-dirs@1.1.1\n| | | | | | | +-- chalk@1.1.3\n| | | | | | | | +-- ansi-styles@2.2.1\n| | | | | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | | | | +-- has-ansi@2.0.0 deduped\n| | | | | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | | | | `-- supports-color@2.0.0\n| | | | | | | +-- get-stdin@4.0.1 deduped\n| | | | | | | +-- is-absolute@0.1.7\n| | | | | | | | `-- is-relative@0.1.3\n| | | | | | | +-- is-natural-number@2.1.1\n| | | | | | | +-- minimist@1.2.0\n| | | | | | | `-- sum-up@1.0.3\n| | | | | | |   `-- chalk@1.1.3\n| | | | | | |     +-- ansi-styles@2.2.1\n| | | | | | |     +-- escape-string-regexp@1.0.5 deduped\n| | | | | | |     +-- has-ansi@2.0.0 deduped\n| | | | | | |     +-- strip-ansi@3.0.1 deduped\n| | | | | | |     `-- supports-color@2.0.0\n| | | | | | +-- tar-stream@1.5.4\n| | | | | | | +-- bl@1.2.1\n| | | | | | | | `-- readable-stream@2.3.3 deduped\n| | | | | | | +-- end-of-stream@1.4.0 deduped\n| | | | | | | +-- readable-stream@2.3.3 deduped\n| | | | | | | `-- xtend@4.0.1 deduped\n| | | | | | +-- through2@0.6.5\n| | | | | | | +-- readable-stream@1.0.34\n| | | | | | | | +-- core-util-is@1.0.2 deduped\n| | | | | | | | +-- inherits@2.0.3 deduped\n| | | | | | | | +-- isarray@0.0.1\n| | | | | | | | `-- string_decoder@0.10.31\n| | | | | | | `-- xtend@4.0.1 deduped\n| | | | | | `-- vinyl@0.4.6\n| | | | | |   +-- clone@0.2.0\n| | | | | |   `-- clone-stats@0.0.1 deduped\n| | | | | +-- decompress-tarbz2@3.1.0\n| | | | | | +-- is-bzip2@1.0.0\n| | | | | | +-- object-assign@2.1.1\n| | | | | | +-- seek-bzip@1.0.5\n| | | | | | | `-- commander@2.8.1\n| | | | | | |   `-- graceful-readlink@1.0.1\n| | | | | | +-- strip-dirs@1.1.1 deduped\n| | | | | | +-- tar-stream@1.5.4 deduped\n| | | | | | +-- through2@0.6.5\n| | | | | | | +-- readable-stream@1.0.34\n| | | | | | | | +-- core-util-is@1.0.2 deduped\n| | | | | | | | +-- inherits@2.0.3 deduped\n| | | | | | | | +-- isarray@0.0.1\n| | | | | | | | `-- string_decoder@0.10.31\n| | | | | | | `-- xtend@4.0.1 deduped\n| | | | | | `-- vinyl@0.4.6\n| | | | | |   +-- clone@0.2.0\n| | | | | |   `-- clone-stats@0.0.1 deduped\n| | | | | +-- decompress-targz@3.1.0\n| | | | | | +-- is-gzip@1.0.0\n| | | | | | +-- object-assign@2.1.1\n| | | | | | +-- strip-dirs@1.1.1 deduped\n| | | | | | +-- tar-stream@1.5.4 deduped\n| | | | | | +-- through2@0.6.5\n| | | | | | | +-- readable-stream@1.0.34\n| | | | | | | | +-- core-util-is@1.0.2 deduped\n| | | | | | | | +-- inherits@2.0.3 deduped\n| | | | | | | | +-- isarray@0.0.1\n| | | | | | | | `-- string_decoder@0.10.31\n| | | | | | | `-- xtend@4.0.1 deduped\n| | | | | | `-- vinyl@0.4.6\n| | | | | |   +-- clone@0.2.0\n| | | | | |   `-- clone-stats@0.0.1 deduped\n| | | | | +-- decompress-unzip@3.4.0\n| | | | | | +-- is-zip@1.0.0\n| | | | | | +-- read-all-stream@3.1.0 deduped\n| | | | | | +-- stat-mode@0.2.2\n| | | | | | +-- strip-dirs@1.1.1 deduped\n| | | | | | +-- through2@2.0.3 deduped\n| | | | | | +-- vinyl@1.2.0 deduped\n| | | | | | `-- yauzl@2.9.1\n| | | | | |   +-- buffer-crc32@0.2.13\n| | | | | |   `-- fd-slicer@1.0.1\n| | | | | |     `-- pend@1.2.0\n| | | | | +-- stream-combiner2@1.1.1\n| | | | | | +-- duplexer2@0.1.4\n| | | | | | | `-- readable-stream@2.3.3 deduped\n| | | | | | `-- readable-stream@2.3.3 deduped\n| | | | | +-- vinyl-assign@1.2.1\n| | | | | | +-- object-assign@4.1.1 deduped\n| | | | | | `-- readable-stream@2.3.3 deduped\n| | | | | `-- vinyl-fs@2.4.4\n| | | | |   +-- duplexify@3.5.1\n| | | | |   | +-- end-of-stream@1.4.0 deduped\n| | | | |   | +-- inherits@2.0.3 deduped\n| | | | |   | +-- readable-stream@2.3.3 deduped\n| | | | |   | `-- stream-shift@1.0.0\n| | | | |   +-- glob-stream@5.3.5\n| | | | |   | +-- extend@3.0.1 deduped\n| | | | |   | +-- glob@5.0.15\n| | | | |   | | +-- inflight@1.0.6 deduped\n| | | | |   | | +-- inherits@2.0.3 deduped\n| | | | |   | | +-- minimatch@3.0.4 deduped\n| | | | |   | | +-- once@1.4.0 deduped\n| | | | |   | | `-- path-is-absolute@1.0.1 deduped\n| | | | |   | +-- glob-parent@3.1.0\n| | | | |   | | +-- is-glob@3.1.0\n| | | | |   | | | `-- is-extglob@2.1.1\n| | | | |   | | `-- path-dirname@1.0.2\n| | | | |   | +-- micromatch@2.3.11 deduped\n| | | | |   | +-- ordered-read-streams@0.3.0\n| | | | |   | | +-- is-stream@1.1.0 deduped\n| | | | |   | | `-- readable-stream@2.3.3 deduped\n| | | | |   | +-- through2@0.6.5\n| | | | |   | | +-- readable-stream@1.0.34\n| | | | |   | | | +-- core-util-is@1.0.2 deduped\n| | | | |   | | | +-- inherits@2.0.3 deduped\n| | | | |   | | | +-- isarray@0.0.1\n| | | | |   | | | `-- string_decoder@0.10.31\n| | | | |   | | `-- xtend@4.0.1 deduped\n| | | | |   | +-- to-absolute-glob@0.1.1\n| | | | |   | | `-- extend-shallow@2.0.1\n| | | | |   | |   `-- is-extendable@0.1.1 deduped\n| | | | |   | `-- unique-stream@2.2.1\n| | | | |   |   +-- json-stable-stringify@1.0.1 deduped\n| | | | |   |   `-- through2-filter@2.0.0 deduped\n| | | | |   +-- graceful-fs@4.1.11 deduped\n| | | | |   +-- gulp-sourcemaps@1.6.0\n| | | | |   | +-- convert-source-map@1.5.0 deduped\n| | | | |   | +-- graceful-fs@4.1.11 deduped\n| | | | |   | +-- strip-bom@2.0.0\n| | | | |   | | `-- is-utf8@0.2.1 deduped\n| | | | |   | +-- through2@2.0.3 deduped\n| | | | |   | `-- vinyl@1.2.0 deduped\n| | | | |   +-- is-valid-glob@0.3.0\n| | | | |   +-- lazystream@1.0.0\n| | | | |   | `-- readable-stream@2.3.3 deduped\n| | | | |   +-- lodash.isequal@4.5.0\n| | | | |   +-- merge-stream@1.0.1\n| | | | |   | `-- readable-stream@2.3.3 deduped\n| | | | |   +-- mkdirp@0.5.1 deduped\n| | | | |   +-- object-assign@4.1.1 deduped\n| | | | |   +-- readable-stream@2.3.3 deduped\n| | | | |   +-- strip-bom@2.0.0\n| | | | |   | `-- is-utf8@0.2.1 deduped\n| | | | |   +-- strip-bom-stream@1.0.0\n| | | | |   | +-- first-chunk-stream@1.0.0\n| | | | |   | `-- strip-bom@2.0.0\n| | | | |   |   `-- is-utf8@0.2.1 deduped\n| | | | |   +-- through2@2.0.3 deduped\n| | | | |   +-- through2-filter@2.0.0\n| | | | |   | +-- through2@2.0.3 deduped\n| | | | |   | `-- xtend@4.0.1 deduped\n| | | | |   +-- vali-date@1.0.0\n| | | | |   `-- vinyl@1.2.0 deduped\n| | | | +-- download@4.4.3\n| | | | | +-- caw@1.2.0\n| | | | | | +-- get-proxy@1.1.0\n| | | | | | | `-- rc@1.2.2 deduped\n| | | | | | +-- is-obj@1.0.1 deduped\n| | | | | | +-- object-assign@3.0.0\n| | | | | | `-- tunnel-agent@0.4.3\n| | | | | +-- concat-stream@1.6.0 deduped\n| | | | | +-- each-async@1.1.1 deduped\n| | | | | +-- filenamify@1.2.1\n| | | | | | +-- filename-reserved-regex@1.0.0\n| | | | | | +-- strip-outer@1.0.0\n| | | | | | | `-- escape-string-regexp@1.0.5 deduped\n| | | | | | `-- trim-repeated@1.0.0\n| | | | | |   `-- escape-string-regexp@1.0.5 deduped\n| | | | | +-- got@5.7.1\n| | | | | | +-- create-error-class@3.0.2 deduped\n| | | | | | +-- duplexer2@0.1.4 deduped\n| | | | | | +-- is-redirect@1.0.0 deduped\n| | | | | | +-- is-retry-allowed@1.1.0 deduped\n| | | | | | +-- is-stream@1.1.0 deduped\n| | | | | | +-- lowercase-keys@1.0.0 deduped\n| | | | | | +-- node-status-codes@1.0.0\n| | | | | | +-- object-assign@4.1.1 deduped\n| | | | | | +-- parse-json@2.2.0 deduped\n| | | | | | +-- pinkie-promise@2.0.1 deduped\n| | | | | | +-- read-all-stream@3.1.0 deduped\n| | | | | | +-- readable-stream@2.3.3 deduped\n| | | | | | +-- timed-out@3.1.3\n| | | | | | +-- unzip-response@1.0.2\n| | | | | | `-- url-parse-lax@1.0.0 deduped\n| | | | | +-- gulp-decompress@1.2.0\n| | | | | | +-- archive-type@3.2.0 deduped\n| | | | | | +-- decompress@3.0.0 deduped\n| | | | | | +-- gulp-util@3.0.8\n| | | | | | | +-- array-differ@1.0.0\n| | | | | | | +-- array-uniq@1.0.3 deduped\n| | | | | | | +-- beeper@1.1.1\n| | | | | | | +-- chalk@1.1.3\n| | | | | | | | +-- ansi-styles@2.2.1\n| | | | | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | | | | +-- has-ansi@2.0.0 deduped\n| | | | | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | | | | `-- supports-color@2.0.0\n| | | | | | | +-- dateformat@2.2.0\n| | | | | | | +-- fancy-log@1.3.0\n| | | | | | | | +-- chalk@1.1.3\n| | | | | | | | | +-- ansi-styles@2.2.1\n| | | | | | | | | +-- escape-string-regexp@1.0.5 deduped\n| | | | | | | | | +-- has-ansi@2.0.0 deduped\n| | | | | | | | | +-- strip-ansi@3.0.1 deduped\n| | | | | | | | | `-- supports-color@2.0.0\n| | | | | | | | `-- time-stamp@1.1.0\n| | | | | | | +-- gulplog@1.0.0\n| | | | | | | | `-- glogg@1.0.0\n| | | | | | | |   `-- sparkles@1.0.0 deduped\n| | | | | | | +-- has-gulplog@0.1.0\n| | | | | | | | `-- sparkles@1.0.0\n| | | | | | | +-- lodash._reescape@3.0.0\n| | | | | | | +-- lodash._reevaluate@3.0.0\n| | | | | | | +-- lodash._reinterpolate@3.0.0 deduped\n| | | | | | | +-- lodash.template@3.6.2\n| | | | | | | | +-- lodash._basecopy@3.0.1 deduped\n| | | | | | | | +-- lodash._basetostring@3.0.1\n| | | | | | | | +-- lodash._basevalues@3.0.0\n| | | | | | | | +-- lodash._isiterateecall@3.0.9 deduped\n| | | | | | | | +-- lodash._reinterpolate@3.0.0 deduped\n| | | | | | | | +-- lodash.escape@3.2.0\n| | | | | | | | | `-- lodash._root@3.0.1\n| | | | | | | | +-- lodash.keys@3.1.2 deduped\n| | | | | | | | +-- lodash.restparam@3.6.1 deduped\n| | | | | | | | `-- lodash.templatesettings@3.1.1\n| | | | | | | |   +-- lodash._reinterpolate@3.0.0 deduped\n| | | | | | | |   `-- lodash.escape@3.2.0 deduped\n| | | | | | | +-- minimist@1.2.0\n| | | | | | | +-- multipipe@0.1.2\n| | | | | | | | `-- duplexer2@0.0.2\n| | | | | | | |   `-- readable-stream@1.1.14\n| | | | | | | |     +-- core-util-is@1.0.2 deduped\n| | | | | | | |     +-- inherits@2.0.3 deduped\n| | | | | | | |     +-- isarray@0.0.1\n| | | | | | | |     `-- string_decoder@0.10.31\n| | | | | | | +-- object-assign@3.0.0\n| | | | | | | +-- replace-ext@0.0.1\n| | | | | | | +-- through2@2.0.3 deduped\n| | | | | | | `-- vinyl@0.5.3\n| | | | | | |   +-- clone@1.0.2\n| | | | | | |   +-- clone-stats@0.0.1 deduped\n| | | | | | |   `-- replace-ext@0.0.1 deduped\n| | | | | | `-- readable-stream@2.3.3 deduped\n| | | | | +-- gulp-rename@1.2.2\n| | | | | +-- is-url@1.2.2\n| | | | | +-- object-assign@4.1.1 deduped\n| | | | | +-- read-all-stream@3.1.0\n| | | | | | +-- pinkie-promise@2.0.1 deduped\n| | | | | | `-- readable-stream@2.3.3 deduped\n| | | | | +-- readable-stream@2.3.3 deduped\n| | | | | +-- stream-combiner2@1.1.1 deduped\n| | | | | +-- vinyl@1.2.0\n| | | | | | +-- clone@1.0.2\n| | | | | | +-- clone-stats@0.0.1\n| | | | | | `-- replace-ext@0.0.1\n| | | | | +-- vinyl-fs@2.4.4 deduped\n| | | | | `-- ware@1.3.0\n| | | | |   `-- wrap-fn@0.1.5\n| | | | |     `-- co@3.1.0\n| | | | +-- exec-series@1.0.3\n| | | | | +-- async-each-series@1.1.0\n| | | | | `-- object-assign@4.1.1 deduped\n| | | | +-- rimraf@2.6.2 deduped\n| | | | +-- tempfile@1.1.1\n| | | | | +-- os-tmpdir@1.0.2 deduped\n| | | | | `-- uuid@2.0.3\n| | | | `-- url-regex@3.2.0\n| | | |   `-- ip-regex@1.0.3\n| | | +-- bin-wrapper@3.0.2\n| | | | +-- bin-check@2.0.0\n| | | | | `-- executable@1.1.0\n| | | | |   `-- meow@3.7.0 deduped\n| | | | +-- bin-version-check@2.1.0\n| | | | | +-- bin-version@1.0.4\n| | | | | | `-- find-versions@1.2.1\n| | | | | |   +-- array-uniq@1.0.3 deduped\n| | | | | |   +-- get-stdin@4.0.1 deduped\n| | | | | |   +-- meow@3.7.0 deduped\n| | | | | |   `-- semver-regex@1.0.0\n| | | | | +-- minimist@1.2.0\n| | | | | +-- semver@4.3.6\n| | | | | `-- semver-truncate@1.1.2\n| | | | |   `-- semver@5.4.1 deduped\n| | | | +-- download@4.4.3 deduped\n| | | | +-- each-async@1.1.1\n| | | | | +-- onetime@1.1.0\n| | | | | `-- set-immediate-shim@1.0.1 deduped\n| | | | +-- lazy-req@1.1.0\n| | | | `-- os-filter-obj@1.0.3\n| | | `-- logalot@2.1.0\n| | |   +-- figures@1.7.0\n| | |   | +-- escape-string-regexp@1.0.5 deduped\n| | |   | `-- object-assign@4.1.1 deduped\n| | |   `-- squeak@1.3.0\n| | |     +-- chalk@1.1.3\n| | |     | +-- ansi-styles@2.2.1\n| | |     | +-- escape-string-regexp@1.0.5 deduped\n| | |     | +-- has-ansi@2.0.0 deduped\n| | |     | +-- strip-ansi@3.0.1 deduped\n| | |     | `-- supports-color@2.0.0\n| | |     +-- console-stream@0.1.1\n| | |     `-- lpad-align@1.1.2\n| | |       +-- get-stdin@4.0.1 deduped\n| | |       +-- indent-string@2.1.0 deduped\n| | |       +-- longest@1.0.1\n| | |       `-- meow@3.7.0 deduped\n| | `-- is-gif@1.0.0\n| +-- imagemin-mozjpeg@6.0.0\n| | +-- exec-buffer@3.2.0 deduped\n| | +-- is-jpg@1.0.0\n| | `-- mozjpeg@4.1.1\n| |   +-- bin-build@2.2.0 deduped\n| |   +-- bin-wrapper@3.0.2 deduped\n| |   `-- logalot@2.1.0 deduped\n| +-- imagemin-optipng@5.2.1\n| | +-- exec-buffer@3.2.0 deduped\n| | +-- is-png@1.1.0\n| | `-- optipng-bin@3.1.4\n| |   +-- bin-build@2.2.0 deduped\n| |   +-- bin-wrapper@3.0.2 deduped\n| |   `-- logalot@2.1.0 deduped\n| +-- imagemin-pngquant@5.0.1\n| | +-- exec-buffer@3.2.0 deduped\n| | +-- is-png@1.1.0 deduped\n| | `-- pngquant-bin@3.1.1\n| |   +-- bin-build@2.2.0 deduped\n| |   +-- bin-wrapper@3.0.2 deduped\n| |   `-- logalot@2.1.0 deduped\n| +-- imagemin-svgo@5.2.4\n| | +-- is-svg@2.1.0\n| | | `-- html-comment-regex@1.1.1\n| | `-- svgo@0.7.2\n| |   +-- coa@1.0.4\n| |   | `-- q@1.5.1 deduped\n| |   +-- colors@1.1.2 deduped\n| |   +-- csso@2.3.2\n| |   | +-- clap@1.2.3\n| |   | | `-- chalk@1.1.3\n| |   | |   +-- ansi-styles@2.2.1\n| |   | |   +-- escape-string-regexp@1.0.5 deduped\n| |   | |   +-- has-ansi@2.0.0 deduped\n| |   | |   +-- strip-ansi@3.0.1 deduped\n| |   | |   `-- supports-color@2.0.0\n| |   | `-- source-map@0.5.7 deduped\n| |   +-- js-yaml@3.7.0\n| |   | +-- argparse@1.0.9 deduped\n| |   | `-- esprima@2.7.3\n| |   +-- mkdirp@0.5.1 deduped\n| |   +-- sax@1.2.4 deduped\n| |   `-- whet.extend@0.9.9\n| +-- imagemin-webp@4.0.0\n| | +-- cwebp-bin@3.2.0\n| | | +-- bin-build@2.2.0 deduped\n| | | +-- bin-wrapper@3.0.2 deduped\n| | | `-- logalot@2.1.0 deduped\n| | +-- exec-buffer@3.2.0 deduped\n| | `-- is-cwebp-readable@1.0.3\n| |   `-- file-type@3.9.0\n| +-- loader-utils@1.1.0 deduped\n| `-- object-assign@4.1.1 deduped\n+-- immutable@3.8.2\n+-- imports-loader@0.7.1\n| +-- loader-utils@1.1.0 deduped\n| `-- source-map@0.5.7 deduped\n+-- jest@21.2.1\n| `-- jest-cli@21.2.1\n|   +-- ansi-escapes@3.0.0 deduped\n|   +-- chalk@2.3.0 deduped\n|   +-- glob@7.1.2\n|   | +-- fs.realpath@1.0.0 deduped\n|   | +-- inflight@1.0.6 deduped\n|   | +-- inherits@2.0.3 deduped\n|   | +-- minimatch@3.0.4 deduped\n|   | +-- once@1.4.0 deduped\n|   | `-- path-is-absolute@1.0.1 deduped\n|   +-- graceful-fs@4.1.11 deduped\n|   +-- is-ci@1.0.10\n|   | `-- ci-info@1.1.1\n|   +-- istanbul-api@1.2.1\n|   | +-- async@2.6.0 deduped\n|   | +-- fileset@2.0.3\n|   | | +-- glob@7.1.2\n|   | | | +-- fs.realpath@1.0.0 deduped\n|   | | | +-- inflight@1.0.6 deduped\n|   | | | +-- inherits@2.0.3 deduped\n|   | | | +-- minimatch@3.0.4 deduped\n|   | | | +-- once@1.4.0 deduped\n|   | | | `-- path-is-absolute@1.0.1 deduped\n|   | | `-- minimatch@3.0.4 deduped\n|   | +-- istanbul-lib-coverage@1.1.1 deduped\n|   | +-- istanbul-lib-hook@1.1.0\n|   | | `-- append-transform@0.4.0\n|   | |   `-- default-require-extensions@1.0.0\n|   | |     `-- strip-bom@2.0.0\n|   | |       `-- is-utf8@0.2.1 deduped\n|   | +-- istanbul-lib-instrument@1.9.1 deduped\n|   | +-- istanbul-lib-report@1.1.2\n|   | | +-- istanbul-lib-coverage@1.1.1 deduped\n|   | | +-- mkdirp@0.5.1 deduped\n|   | | +-- path-parse@1.0.5 deduped\n|   | | `-- supports-color@3.2.3\n|   | |   `-- has-flag@1.0.0\n|   | +-- istanbul-lib-source-maps@1.2.2 deduped\n|   | +-- istanbul-reports@1.1.3\n|   | | `-- handlebars@4.0.11\n|   | |   +-- async@1.5.2\n|   | |   +-- optimist@0.6.1\n|   | |   | +-- minimist@0.0.8 deduped\n|   | |   | `-- wordwrap@0.0.2 deduped\n|   | |   +-- source-map@0.4.4\n|   | |   | `-- amdefine@1.0.1 deduped\n|   | |   `-- uglify-js@2.8.29 deduped\n|   | +-- js-yaml@3.7.0 deduped\n|   | +-- mkdirp@0.5.1 deduped\n|   | `-- once@1.4.0 deduped\n|   +-- istanbul-lib-coverage@1.1.1 deduped\n|   +-- istanbul-lib-instrument@1.9.1 deduped\n|   +-- istanbul-lib-source-maps@1.2.2\n|   | +-- debug@3.1.0\n|   | | `-- ms@2.0.0 deduped\n|   | +-- istanbul-lib-coverage@1.1.1 deduped\n|   | +-- mkdirp@0.5.1 deduped\n|   | +-- rimraf@2.6.2 deduped\n|   | `-- source-map@0.5.7 deduped\n|   +-- jest-changed-files@21.2.0\n|   | `-- throat@4.1.0\n|   +-- jest-config@21.2.1\n|   | +-- chalk@2.3.0 deduped\n|   | +-- glob@7.1.2\n|   | | +-- fs.realpath@1.0.0 deduped\n|   | | +-- inflight@1.0.6 deduped\n|   | | +-- inherits@2.0.3 deduped\n|   | | +-- minimatch@3.0.4 deduped\n|   | | +-- once@1.4.0 deduped\n|   | | `-- path-is-absolute@1.0.1 deduped\n|   | +-- jest-environment-jsdom@21.2.1 deduped\n|   | +-- jest-environment-node@21.2.1\n|   | | +-- jest-mock@21.2.0 deduped\n|   | | `-- jest-util@21.2.1 deduped\n|   | +-- jest-get-type@21.2.0\n|   | +-- jest-jasmine2@21.2.1\n|   | | +-- chalk@2.3.0 deduped\n|   | | +-- expect@21.2.1\n|   | | | +-- ansi-styles@3.2.0 deduped\n|   | | | +-- jest-diff@21.2.1 deduped\n|   | | | +-- jest-get-type@21.2.0 deduped\n|   | | | +-- jest-matcher-utils@21.2.1 deduped\n|   | | | +-- jest-message-util@21.2.1 deduped\n|   | | | `-- jest-regex-util@21.2.0 deduped\n|   | | +-- graceful-fs@4.1.11 deduped\n|   | | +-- jest-diff@21.2.1 deduped\n|   | | +-- jest-matcher-utils@21.2.1 deduped\n|   | | +-- jest-message-util@21.2.1 deduped\n|   | | +-- jest-snapshot@21.2.1 deduped\n|   | | `-- p-cancelable@0.3.0\n|   | +-- jest-regex-util@21.2.0 deduped\n|   | +-- jest-resolve@21.2.0\n|   | | +-- browser-resolve@1.11.2\n|   | | | `-- resolve@1.1.7\n|   | | +-- chalk@2.3.0 deduped\n|   | | `-- is-builtin-module@1.0.0 deduped\n|   | +-- jest-util@21.2.1 deduped\n|   | +-- jest-validate@21.2.1\n|   | | +-- chalk@2.3.0 deduped\n|   | | +-- jest-get-type@21.2.0 deduped\n|   | | +-- leven@2.1.0\n|   | | `-- pretty-format@21.2.1 deduped\n|   | `-- pretty-format@21.2.1\n|   |   +-- ansi-regex@3.0.0\n|   |   `-- ansi-styles@3.2.0 deduped\n|   +-- jest-environment-jsdom@21.2.1\n|   | +-- jest-mock@21.2.0\n|   | +-- jest-util@21.2.1 deduped\n|   | `-- jsdom@9.12.0\n|   |   +-- abab@1.0.4\n|   |   +-- acorn@4.0.13\n|   |   +-- acorn-globals@3.1.0\n|   |   | `-- acorn@4.0.13\n|   |   +-- array-equal@1.0.0\n|   |   +-- content-type-parser@1.0.2\n|   |   +-- cssom@0.3.2\n|   |   +-- cssstyle@0.2.37\n|   |   | `-- cssom@0.3.2 deduped\n|   |   +-- escodegen@1.9.0\n|   |   | +-- esprima@3.1.3\n|   |   | +-- estraverse@4.2.0 deduped\n|   |   | +-- esutils@2.0.2 deduped\n|   |   | +-- optionator@0.8.2 deduped\n|   |   | `-- source-map@0.5.7 deduped\n|   |   +-- html-encoding-sniffer@1.0.2\n|   |   | `-- whatwg-encoding@1.0.3 deduped\n|   |   +-- nwmatcher@1.4.3\n|   |   +-- parse5@1.5.1\n|   |   +-- request@2.83.0 deduped\n|   |   +-- sax@1.2.4 deduped\n|   |   +-- symbol-tree@3.2.2\n|   |   +-- tough-cookie@2.3.3 deduped\n|   |   +-- webidl-conversions@4.0.2\n|   |   +-- whatwg-encoding@1.0.3\n|   |   | `-- iconv-lite@0.4.19 deduped\n|   |   +-- whatwg-url@4.8.0\n|   |   | +-- tr46@0.0.3\n|   |   | `-- webidl-conversions@3.0.1\n|   |   `-- xml-name-validator@2.0.1\n|   +-- jest-haste-map@21.2.0\n|   | +-- fb-watchman@2.0.0\n|   | | `-- bser@2.0.0\n|   | |   `-- node-int64@0.4.0\n|   | +-- graceful-fs@4.1.11 deduped\n|   | +-- jest-docblock@21.2.0\n|   | +-- micromatch@2.3.11 deduped\n|   | +-- sane@2.2.0\n|   | | +-- anymatch@1.3.2 deduped\n|   | | +-- exec-sh@0.2.1\n|   | | | `-- merge@1.2.0\n|   | | +-- fb-watchman@2.0.0 deduped\n|   | | +-- UNMET OPTIONAL DEPENDENCY fsevents@^1.1.1\n|   | | +-- minimatch@3.0.4 deduped\n|   | | +-- minimist@1.2.0\n|   | | +-- walker@1.0.7\n|   | | | `-- makeerror@1.0.11\n|   | | |   `-- tmpl@1.0.4\n|   | | `-- watch@0.18.0\n|   | |   +-- exec-sh@0.2.1 deduped\n|   | |   `-- minimist@1.2.0\n|   | `-- worker-farm@1.5.1 deduped\n|   +-- jest-message-util@21.2.1\n|   | +-- chalk@2.3.0 deduped\n|   | +-- micromatch@2.3.11 deduped\n|   | `-- slash@1.0.0 deduped\n|   +-- jest-regex-util@21.2.0\n|   +-- jest-resolve-dependencies@21.2.0\n|   | `-- jest-regex-util@21.2.0 deduped\n|   +-- jest-runner@21.2.1\n|   | +-- jest-config@21.2.1 deduped\n|   | +-- jest-docblock@21.2.0 deduped\n|   | +-- jest-haste-map@21.2.0 deduped\n|   | +-- jest-jasmine2@21.2.1 deduped\n|   | +-- jest-message-util@21.2.1 deduped\n|   | +-- jest-runtime@21.2.1 deduped\n|   | +-- jest-util@21.2.1 deduped\n|   | +-- pify@3.0.0\n|   | +-- throat@4.1.0 deduped\n|   | `-- worker-farm@1.5.1 deduped\n|   +-- jest-runtime@21.2.1\n|   | +-- babel-core@6.26.0 deduped\n|   | +-- babel-jest@21.2.0 deduped\n|   | +-- babel-plugin-istanbul@4.1.5 deduped\n|   | +-- chalk@2.3.0 deduped\n|   | +-- convert-source-map@1.5.0 deduped\n|   | +-- graceful-fs@4.1.11 deduped\n|   | +-- jest-config@21.2.1 deduped\n|   | +-- jest-haste-map@21.2.0 deduped\n|   | +-- jest-regex-util@21.2.0 deduped\n|   | +-- jest-resolve@21.2.0 deduped\n|   | +-- jest-util@21.2.1 deduped\n|   | +-- json-stable-stringify@1.0.1 deduped\n|   | +-- micromatch@2.3.11 deduped\n|   | +-- slash@1.0.0 deduped\n|   | +-- strip-bom@3.0.0\n|   | +-- write-file-atomic@2.3.0\n|   | | +-- graceful-fs@4.1.11 deduped\n|   | | +-- imurmurhash@0.1.4 deduped\n|   | | `-- signal-exit@3.0.2 deduped\n|   | `-- yargs@9.0.1\n|   |   +-- camelcase@4.1.0\n|   |   +-- cliui@3.2.0\n|   |   | +-- string-width@1.0.2\n|   |   | | +-- code-point-at@1.1.0 deduped\n|   |   | | +-- is-fullwidth-code-point@1.0.0 deduped\n|   |   | | `-- strip-ansi@3.0.1 deduped\n|   |   | +-- strip-ansi@3.0.1 deduped\n|   |   | `-- wrap-ansi@2.1.0 deduped\n|   |   +-- decamelize@1.2.0 deduped\n|   |   +-- get-caller-file@1.0.2 deduped\n|   |   +-- os-locale@2.1.0 deduped\n|   |   +-- read-pkg-up@2.0.0 deduped\n|   |   +-- require-directory@2.1.1 deduped\n|   |   +-- require-main-filename@1.0.1 deduped\n|   |   +-- set-blocking@2.0.0 deduped\n|   |   +-- string-width@2.1.1 deduped\n|   |   +-- which-module@2.0.0 deduped\n|   |   +-- y18n@3.2.1 deduped\n|   |   `-- yargs-parser@7.0.0 deduped\n|   +-- jest-snapshot@21.2.1\n|   | +-- chalk@2.3.0 deduped\n|   | +-- jest-diff@21.2.1\n|   | | +-- chalk@2.3.0 deduped\n|   | | +-- diff@3.4.0\n|   | | +-- jest-get-type@21.2.0 deduped\n|   | | `-- pretty-format@21.2.1 deduped\n|   | +-- jest-matcher-utils@21.2.1\n|   | | +-- chalk@2.3.0 deduped\n|   | | +-- jest-get-type@21.2.0 deduped\n|   | | `-- pretty-format@21.2.1 deduped\n|   | +-- mkdirp@0.5.1 deduped\n|   | +-- natural-compare@1.4.0 deduped\n|   | `-- pretty-format@21.2.1 deduped\n|   +-- jest-util@21.2.1\n|   | +-- callsites@2.0.0\n|   | +-- chalk@2.3.0 deduped\n|   | +-- graceful-fs@4.1.11 deduped\n|   | +-- jest-message-util@21.2.1 deduped\n|   | +-- jest-mock@21.2.0 deduped\n|   | +-- jest-validate@21.2.1 deduped\n|   | `-- mkdirp@0.5.1 deduped\n|   +-- micromatch@2.3.11 deduped\n|   +-- node-notifier@5.1.2\n|   | +-- growly@1.3.0\n|   | +-- semver@5.4.1 deduped\n|   | +-- shellwords@0.1.1\n|   | `-- which@1.3.0 deduped\n|   +-- pify@3.0.0\n|   +-- slash@1.0.0 deduped\n|   +-- string-length@2.0.0\n|   | +-- astral-regex@1.0.0\n|   | `-- strip-ansi@4.0.0\n|   |   `-- ansi-regex@3.0.0\n|   +-- strip-ansi@4.0.0\n|   | `-- ansi-regex@3.0.0\n|   +-- which@1.3.0 deduped\n|   +-- worker-farm@1.5.1\n|   | +-- errno@0.1.4 deduped\n|   | `-- xtend@4.0.1 deduped\n|   `-- yargs@9.0.1\n|     +-- camelcase@4.1.0\n|     +-- cliui@3.2.0\n|     | +-- string-width@1.0.2\n|     | | +-- code-point-at@1.1.0 deduped\n|     | | +-- is-fullwidth-code-point@1.0.0 deduped\n|     | | `-- strip-ansi@3.0.1 deduped\n|     | +-- strip-ansi@3.0.1\n|     | | `-- ansi-regex@2.1.1\n|     | `-- wrap-ansi@2.1.0 deduped\n|     +-- decamelize@1.2.0 deduped\n|     +-- get-caller-file@1.0.2 deduped\n|     +-- os-locale@2.1.0 deduped\n|     +-- read-pkg-up@2.0.0 deduped\n|     +-- require-directory@2.1.1 deduped\n|     +-- require-main-filename@1.0.1 deduped\n|     +-- set-blocking@2.0.0 deduped\n|     +-- string-width@2.1.1 deduped\n|     +-- which-module@2.0.0 deduped\n|     +-- y18n@3.2.1 deduped\n|     `-- yargs-parser@7.0.0 deduped\n+-- jsonwebtoken@8.1.0\n| +-- jws@3.1.4\n| | +-- base64url@2.0.0\n| | +-- jwa@1.1.5\n| | | +-- base64url@2.0.0 deduped\n| | | +-- buffer-equal-constant-time@1.0.1\n| | | +-- ecdsa-sig-formatter@1.0.9\n| | | | +-- base64url@2.0.0 deduped\n| | | | `-- safe-buffer@5.1.1 deduped\n| | | `-- safe-buffer@5.1.1 deduped\n| | `-- safe-buffer@5.1.1\n| +-- lodash.includes@4.3.0\n| +-- lodash.isboolean@3.0.3\n| +-- lodash.isinteger@4.0.4\n| +-- lodash.isnumber@3.0.3\n| +-- lodash.isplainobject@4.0.6\n| +-- lodash.isstring@4.0.1\n| +-- lodash.once@4.1.1\n| +-- ms@2.0.0\n| `-- xtend@4.0.1\n+-- koa@2.4.1\n| +-- accepts@1.3.4\n| | +-- mime-types@2.1.17 deduped\n| | `-- negotiator@0.6.1\n| +-- content-disposition@0.5.2\n| +-- content-type@1.0.4\n| +-- cookies@0.7.1\n| | +-- depd@1.1.1 deduped\n| | `-- keygrip@1.0.2\n| +-- debug@2.6.9 deduped\n| +-- delegates@1.0.0\n| +-- depd@1.1.1\n| +-- destroy@1.0.4\n| +-- error-inject@1.0.0\n| +-- escape-html@1.0.3\n| +-- fresh@0.5.2\n| +-- http-assert@1.3.0\n| | +-- deep-equal@1.0.1 deduped\n| | `-- http-errors@1.6.2 deduped\n| +-- http-errors@1.6.2\n| | +-- depd@1.1.1 deduped\n| | +-- inherits@2.0.3 deduped\n| | +-- setprototypeof@1.0.3\n| | `-- statuses@1.4.0 deduped\n| +-- is-generator-function@1.0.6\n| +-- koa-compose@4.0.0\n| +-- koa-convert@1.2.0\n| | +-- co@4.6.0 deduped\n| | `-- koa-compose@3.2.1\n| |   `-- any-promise@1.3.0 deduped\n| +-- koa-is-json@1.0.0\n| +-- mime-types@2.1.17\n| | `-- mime-db@1.30.0\n| +-- on-finished@2.3.0\n| | `-- ee-first@1.1.1\n| +-- only@0.0.2\n| +-- parseurl@1.3.2\n| +-- statuses@1.4.0\n| +-- type-is@1.6.15\n| | +-- media-typer@0.3.0\n| | `-- mime-types@2.1.17 deduped\n| `-- vary@1.1.2\n+-- koa-bodyparser@4.2.0\n| +-- co-body@5.1.1\n| | +-- inflation@2.0.0\n| | +-- qs@6.5.1 deduped\n| | +-- raw-body@2.3.2\n| | | +-- bytes@3.0.0\n| | | +-- http-errors@1.6.2 deduped\n| | | +-- iconv-lite@0.4.19 deduped\n| | | `-- unpipe@1.0.0\n| | `-- type-is@1.6.15 deduped\n| `-- copy-to@2.0.1\n+-- koa-compress@2.0.0\n| +-- bytes@2.5.0\n| +-- compressible@2.0.12\n| | `-- mime-db@1.30.0 deduped\n| +-- koa-is-json@1.0.0 deduped\n| `-- statuses@1.4.0 deduped\n+-- koa-favicon@2.0.0\n| `-- mz@2.7.0\n|   +-- any-promise@1.3.0\n|   +-- object-assign@4.1.1 deduped\n|   `-- thenify-all@1.6.0\n|     `-- thenify@3.3.0\n|       `-- any-promise@1.3.0 deduped\n+-- koa-helmet@3.2.0\n| `-- helmet@3.9.0\n|   +-- dns-prefetch-control@0.1.0\n|   +-- dont-sniff-mimetype@1.0.0\n|   +-- expect-ct@0.1.0\n|   +-- frameguard@3.0.0\n|   +-- helmet-csp@2.6.0\n|   | +-- camelize@1.0.0\n|   | +-- content-security-policy-builder@1.1.0\n|   | | `-- dashify@0.2.2\n|   | +-- dasherize@2.0.0\n|   | +-- lodash.reduce@4.6.0\n|   | `-- platform@1.3.4\n|   +-- hide-powered-by@1.0.0\n|   +-- hpkp@2.0.0\n|   +-- hsts@2.1.0\n|   +-- ienoopen@1.0.0\n|   +-- nocache@2.0.0\n|   +-- referrer-policy@1.1.0\n|   `-- x-xss-protection@1.0.0\n+-- koa-morgan@1.0.1\n| `-- morgan@1.9.0\n|   +-- basic-auth@2.0.0\n|   | `-- safe-buffer@5.1.1 deduped\n|   +-- debug@2.6.9 deduped\n|   +-- depd@1.1.1 deduped\n|   +-- on-finished@2.3.0 deduped\n|   `-- on-headers@1.0.1\n+-- koa-no-cache@1.1.0\n| +-- path-to-regexp@1.7.0\n| | `-- isarray@0.0.1\n| `-- type-is@1.6.15 deduped\n+-- koa-passport@4.0.1\n| `-- passport@0.4.0\n|   +-- passport-strategy@1.0.0 deduped\n|   `-- pause@0.0.1\n+-- koa-router@7.2.1\n| +-- debug@2.6.9 deduped\n| +-- http-errors@1.6.2 deduped\n| +-- koa-compose@3.2.1\n| | `-- any-promise@1.3.0 deduped\n| +-- methods@1.1.2\n| `-- path-to-regexp@1.7.0 deduped\n+-- koa-session@5.5.0\n| +-- crc@3.5.0\n| +-- debug@2.6.9 deduped\n| +-- is-type-of@1.2.0\n| | +-- core-util-is@1.0.2\n| | +-- is-class@0.0.4\n| | `-- isstream@0.1.2\n| `-- uid-safe@2.1.5\n|   `-- random-bytes@1.0.0\n+-- koa-static-cache@5.1.1\n| +-- compressible@2.0.12 deduped\n| +-- debug@2.6.9 deduped\n| +-- fs-readdir-recursive@1.0.0 deduped\n| +-- mime-types@2.1.17 deduped\n| `-- mz@2.6.0\n|   +-- any-promise@1.3.0 deduped\n|   +-- object-assign@4.1.1 deduped\n|   `-- thenify-all@1.6.0 deduped\n+-- koa-webpack@1.0.0\n| +-- app-root-path@2.0.1\n| +-- koa-compose@4.0.0 deduped\n| +-- webpack@3.8.1 deduped\n| +-- webpack-dev-middleware@1.12.0\n| | +-- memory-fs@0.4.1 deduped\n| | +-- mime@1.4.1 deduped\n| | +-- path-is-absolute@1.0.1 deduped\n| | +-- range-parser@1.2.0\n| | `-- time-stamp@2.0.0\n| `-- webpack-hot-middleware@2.20.0\n|   +-- ansi-html@0.0.7\n|   +-- html-entities@1.2.1\n|   +-- querystring@0.2.0\n|   `-- strip-ansi@3.0.1\n|     `-- ansi-regex@2.1.1\n+-- lodash@4.17.4\n+-- material-ui@0.19.4\n| +-- babel-runtime@6.26.0 deduped\n| +-- inline-style-prefixer@3.0.8\n| | +-- bowser@1.8.1\n| | `-- css-in-js-utils@2.0.0\n| |   `-- hyphenate-style-name@1.0.2\n| +-- keycode@2.1.9\n| +-- lodash.merge@4.6.0\n| +-- lodash.throttle@4.1.1\n| +-- prop-types@15.6.0 deduped\n| +-- react-event-listener@0.5.1\n| | +-- babel-runtime@6.26.0 deduped\n| | +-- fbjs@0.8.16 deduped\n| | +-- prop-types@15.6.0 deduped\n| | `-- warning@3.0.0 deduped\n| +-- react-transition-group@1.2.1\n| | +-- chain-function@1.0.0\n| | +-- dom-helpers@3.2.1\n| | +-- loose-envify@1.3.1 deduped\n| | +-- prop-types@15.6.0 deduped\n| | `-- warning@3.0.0 deduped\n| +-- recompose@0.26.0\n| | +-- change-emitter@0.1.6\n| | +-- fbjs@0.8.16 deduped\n| | +-- hoist-non-react-statics@2.3.1 deduped\n| | `-- symbol-observable@1.0.4 deduped\n| +-- simple-assign@0.1.0\n| `-- warning@3.0.0 deduped\n+-- moxios@0.4.0\n+-- nock@9.0.28\n| +-- chai@3.5.0\n| | +-- assertion-error@1.0.2\n| | +-- deep-eql@0.1.3\n| | | `-- type-detect@0.1.1\n| | `-- type-detect@1.0.0\n| +-- debug@2.6.9 deduped\n| +-- deep-equal@1.0.1\n| +-- json-stringify-safe@5.0.1\n| +-- lodash@4.17.4 deduped\n| +-- mkdirp@0.5.1 deduped\n| +-- propagate@0.4.0\n| +-- qs@6.5.1\n| `-- semver@5.4.1 deduped\n+-- node-cache@4.1.1\n| +-- clone@2.1.1\n| `-- lodash@4.17.4 deduped\n+-- node-sass@4.6.0\n| +-- async-foreach@0.1.3\n| +-- chalk@1.1.3\n| | +-- ansi-styles@2.2.1\n| | +-- escape-string-regexp@1.0.5 deduped\n| | +-- has-ansi@2.0.0\n| | | `-- ansi-regex@2.1.1 deduped\n| | +-- strip-ansi@3.0.1 deduped\n| | `-- supports-color@2.0.0\n| +-- cross-spawn@3.0.1\n| | +-- lru-cache@4.1.1 deduped\n| | `-- which@1.3.0 deduped\n| +-- gaze@1.1.2\n| | `-- globule@1.2.0\n| |   +-- glob@7.1.2\n| |   | +-- fs.realpath@1.0.0 deduped\n| |   | +-- inflight@1.0.6 deduped\n| |   | +-- inherits@2.0.3 deduped\n| |   | +-- minimatch@3.0.4 deduped\n| |   | +-- once@1.4.0 deduped\n| |   | `-- path-is-absolute@1.0.1 deduped\n| |   +-- lodash@4.17.4 deduped\n| |   `-- minimatch@3.0.4 deduped\n| +-- get-stdin@4.0.1\n| +-- glob@7.1.2\n| | +-- fs.realpath@1.0.0 deduped\n| | +-- inflight@1.0.6 deduped\n| | +-- inherits@2.0.3 deduped\n| | +-- minimatch@3.0.4 deduped\n| | +-- once@1.4.0 deduped\n| | `-- path-is-absolute@1.0.1 deduped\n| +-- in-publish@2.0.0\n| +-- lodash.assign@4.2.0\n| +-- lodash.clonedeep@4.5.0\n| +-- lodash.mergewith@4.6.0\n| +-- meow@3.7.0\n| | +-- camelcase-keys@2.1.0\n| | | +-- camelcase@2.1.1\n| | | `-- map-obj@1.0.1 deduped\n| | +-- decamelize@1.2.0 deduped\n| | +-- loud-rejection@1.6.0\n| | | +-- currently-unhandled@0.4.1\n| | | | `-- array-find-index@1.0.2\n| | | `-- signal-exit@3.0.2\n| | +-- map-obj@1.0.1\n| | +-- minimist@1.2.0\n| | +-- normalize-package-data@2.4.0\n| | | +-- hosted-git-info@2.5.0\n| | | +-- is-builtin-module@1.0.0\n| | | | `-- builtin-modules@1.1.1 deduped\n| | | +-- semver@5.4.1 deduped\n| | | `-- validate-npm-package-license@3.0.1\n| | |   +-- spdx-correct@1.0.2\n| | |   | `-- spdx-license-ids@1.2.2\n| | |   `-- spdx-expression-parse@1.0.4\n| | +-- object-assign@4.1.1 deduped\n| | +-- read-pkg-up@1.0.1\n| | | +-- find-up@1.1.2\n| | | | +-- path-exists@2.1.0\n| | | | | `-- pinkie-promise@2.0.1 deduped\n| | | | `-- pinkie-promise@2.0.1 deduped\n| | | `-- read-pkg@1.1.0\n| | |   +-- load-json-file@1.1.0\n| | |   | +-- graceful-fs@4.1.11 deduped\n| | |   | +-- parse-json@2.2.0 deduped\n| | |   | +-- pify@2.3.0 deduped\n| | |   | +-- pinkie-promise@2.0.1 deduped\n| | |   | `-- strip-bom@2.0.0\n| | |   |   `-- is-utf8@0.2.1 deduped\n| | |   +-- normalize-package-data@2.4.0 deduped\n| | |   `-- path-type@1.1.0\n| | |     +-- graceful-fs@4.1.11 deduped\n| | |     +-- pify@2.3.0 deduped\n| | |     `-- pinkie-promise@2.0.1 deduped\n| | +-- redent@1.0.0\n| | | +-- indent-string@2.1.0\n| | | | `-- repeating@2.0.1 deduped\n| | | `-- strip-indent@1.0.1\n| | |   `-- get-stdin@4.0.1 deduped\n| | `-- trim-newlines@1.0.0\n| +-- mkdirp@0.5.1 deduped\n| +-- nan@2.7.0\n| +-- node-gyp@3.6.2\n| | +-- fstream@1.0.11\n| | | +-- graceful-fs@4.1.11 deduped\n| | | +-- inherits@2.0.3 deduped\n| | | +-- mkdirp@0.5.1 deduped\n| | | `-- rimraf@2.6.2 deduped\n| | +-- glob@7.1.2\n| | | +-- fs.realpath@1.0.0 deduped\n| | | +-- inflight@1.0.6 deduped\n| | | +-- inherits@2.0.3 deduped\n| | | +-- minimatch@3.0.4 deduped\n| | | +-- once@1.4.0 deduped\n| | | `-- path-is-absolute@1.0.1 deduped\n| | +-- graceful-fs@4.1.11 deduped\n| | +-- minimatch@3.0.4 deduped\n| | +-- mkdirp@0.5.1 deduped\n| | +-- nopt@3.0.6\n| | | `-- abbrev@1.1.1\n| | +-- npmlog@4.1.2 deduped\n| | +-- osenv@0.1.4\n| | | +-- os-homedir@1.0.2 deduped\n| | | `-- os-tmpdir@1.0.2 deduped\n| | +-- request@2.83.0 deduped\n| | +-- rimraf@2.6.2 deduped\n| | +-- semver@5.3.0\n| | +-- tar@2.2.1\n| | | +-- block-stream@0.0.9\n| | | | `-- inherits@2.0.3 deduped\n| | | +-- fstream@1.0.11 deduped\n| | | `-- inherits@2.0.3 deduped\n| | `-- which@1.3.0 deduped\n| +-- npmlog@4.1.2\n| | +-- are-we-there-yet@1.1.4\n| | | +-- delegates@1.0.0 deduped\n| | | `-- readable-stream@2.3.3 deduped\n| | +-- console-control-strings@1.1.0\n| | +-- gauge@2.7.4\n| | | +-- aproba@1.2.0\n| | | +-- console-control-strings@1.1.0 deduped\n| | | +-- has-unicode@2.0.1\n| | | +-- object-assign@4.1.1 deduped\n| | | +-- signal-exit@3.0.2 deduped\n| | | +-- string-width@1.0.2\n| | | | +-- code-point-at@1.1.0\n| | | | +-- is-fullwidth-code-point@1.0.0\n| | | | | `-- number-is-nan@1.0.1 deduped\n| | | | `-- strip-ansi@3.0.1 deduped\n| | | +-- strip-ansi@3.0.1 deduped\n| | | `-- wide-align@1.1.2\n| | |   `-- string-width@1.0.2\n| | |     +-- code-point-at@1.1.0 deduped\n| | |     +-- is-fullwidth-code-point@1.0.0 deduped\n| | |     `-- strip-ansi@3.0.1 deduped\n| | `-- set-blocking@2.0.0\n| +-- request@2.83.0\n| | +-- aws-sign2@0.7.0\n| | +-- aws4@1.6.0\n| | +-- caseless@0.12.0\n| | +-- combined-stream@1.0.5\n| | | `-- delayed-stream@1.0.0\n| | +-- extend@3.0.1\n| | +-- forever-agent@0.6.1\n| | +-- form-data@2.3.1\n| | | +-- asynckit@0.4.0\n| | | +-- combined-stream@1.0.5 deduped\n| | | `-- mime-types@2.1.17 deduped\n| | +-- har-validator@5.0.3\n| | | +-- ajv@5.3.0 deduped\n| | | `-- har-schema@2.0.0\n| | +-- hawk@6.0.2\n| | | +-- boom@4.3.1\n| | | | `-- hoek@4.2.0 deduped\n| | | +-- cryptiles@3.1.2\n| | | | `-- boom@5.2.0\n| | | |   `-- hoek@4.2.0 deduped\n| | | +-- hoek@4.2.0\n| | | `-- sntp@2.1.0\n| | |   `-- hoek@4.2.0 deduped\n| | +-- http-signature@1.2.0\n| | | +-- assert-plus@1.0.0\n| | | +-- jsprim@1.4.1\n| | | | +-- assert-plus@1.0.0 deduped\n| | | | +-- extsprintf@1.3.0\n| | | | +-- json-schema@0.2.3\n| | | | `-- verror@1.10.0\n| | | |   +-- assert-plus@1.0.0 deduped\n| | | |   +-- core-util-is@1.0.2 deduped\n| | | |   `-- extsprintf@1.3.0 deduped\n| | | `-- sshpk@1.13.1\n| | |   +-- asn1@0.2.3\n| | |   +-- assert-plus@1.0.0 deduped\n| | |   +-- bcrypt-pbkdf@1.0.1\n| | |   | `-- tweetnacl@0.14.5 deduped\n| | |   +-- dashdash@1.14.1\n| | |   | `-- assert-plus@1.0.0 deduped\n| | |   +-- ecc-jsbn@0.1.1\n| | |   | `-- jsbn@0.1.1 deduped\n| | |   +-- getpass@0.1.7\n| | |   | `-- assert-plus@1.0.0 deduped\n| | |   +-- jsbn@0.1.1\n| | |   `-- tweetnacl@0.14.5\n| | +-- is-typedarray@1.0.0\n| | +-- isstream@0.1.2 deduped\n| | +-- json-stringify-safe@5.0.1 deduped\n| | +-- mime-types@2.1.17 deduped\n| | +-- oauth-sign@0.8.2\n| | +-- performance-now@2.1.0 deduped\n| | +-- qs@6.5.1 deduped\n| | +-- safe-buffer@5.1.1 deduped\n| | +-- stringstream@0.0.5\n| | +-- tough-cookie@2.3.3\n| | | `-- punycode@1.4.1 deduped\n| | +-- tunnel-agent@0.6.0\n| | | `-- safe-buffer@5.1.1 deduped\n| | `-- uuid@3.1.0 deduped\n| +-- sass-graph@2.2.4\n| | +-- glob@7.1.2\n| | | +-- fs.realpath@1.0.0 deduped\n| | | +-- inflight@1.0.6 deduped\n| | | +-- inherits@2.0.3 deduped\n| | | +-- minimatch@3.0.4 deduped\n| | | +-- once@1.4.0 deduped\n| | | `-- path-is-absolute@1.0.1 deduped\n| | +-- lodash@4.17.4 deduped\n| | +-- scss-tokenizer@0.2.3\n| | | +-- js-base64@2.3.2 deduped\n| | | `-- source-map@0.4.4\n| | |   `-- amdefine@1.0.1\n| | `-- yargs@7.1.0\n| |   +-- camelcase@3.0.0\n| |   +-- cliui@3.2.0\n| |   | +-- string-width@1.0.2 deduped\n| |   | +-- strip-ansi@3.0.1 deduped\n| |   | `-- wrap-ansi@2.1.0 deduped\n| |   +-- decamelize@1.2.0 deduped\n| |   +-- get-caller-file@1.0.2 deduped\n| |   +-- os-locale@1.4.0\n| |   | `-- lcid@1.0.0 deduped\n| |   +-- read-pkg-up@1.0.1\n| |   | +-- find-up@1.1.2\n| |   | | +-- path-exists@2.1.0\n| |   | | | `-- pinkie-promise@2.0.1 deduped\n| |   | | `-- pinkie-promise@2.0.1 deduped\n| |   | `-- read-pkg@1.1.0\n| |   |   +-- load-json-file@1.1.0\n| |   |   | +-- graceful-fs@4.1.11 deduped\n| |   |   | +-- parse-json@2.2.0 deduped\n| |   |   | +-- pify@2.3.0 deduped\n| |   |   | +-- pinkie-promise@2.0.1 deduped\n| |   |   | `-- strip-bom@2.0.0\n| |   |   |   `-- is-utf8@0.2.1 deduped\n| |   |   +-- normalize-package-data@2.4.0 deduped\n| |   |   `-- path-type@1.1.0\n| |   |     +-- graceful-fs@4.1.11 deduped\n| |   |     +-- pify@2.3.0 deduped\n| |   |     `-- pinkie-promise@2.0.1 deduped\n| |   +-- require-directory@2.1.1 deduped\n| |   +-- require-main-filename@1.0.1 deduped\n| |   +-- set-blocking@2.0.0 deduped\n| |   +-- string-width@1.0.2\n| |   | +-- code-point-at@1.1.0 deduped\n| |   | +-- is-fullwidth-code-point@1.0.0 deduped\n| |   | `-- strip-ansi@3.0.1 deduped\n| |   +-- which-module@1.0.0\n| |   +-- y18n@3.2.1 deduped\n| |   `-- yargs-parser@5.0.0\n| |     `-- camelcase@3.0.0 deduped\n| `-- stdout-stream@1.4.0\n|   `-- readable-stream@2.3.3 deduped\n+-- nodemon@1.12.1\n| +-- chokidar@1.7.0 deduped\n| +-- debug@2.6.9 deduped\n| +-- es6-promise@3.3.1\n| +-- ignore-by-default@1.0.1\n| +-- lodash.defaults@3.1.2\n| | +-- lodash.assign@3.2.0\n| | | +-- lodash._baseassign@3.2.0\n| | | | +-- lodash._basecopy@3.0.1\n| | | | `-- lodash.keys@3.1.2 deduped\n| | | +-- lodash._createassigner@3.1.1\n| | | | +-- lodash._bindcallback@3.0.1\n| | | | +-- lodash._isiterateecall@3.0.9\n| | | | `-- lodash.restparam@3.6.1 deduped\n| | | `-- lodash.keys@3.1.2\n| | |   +-- lodash._getnative@3.9.1\n| | |   +-- lodash.isarguments@3.1.0\n| | |   `-- lodash.isarray@3.0.4\n| | `-- lodash.restparam@3.6.1\n| +-- minimatch@3.0.4 deduped\n| +-- ps-tree@1.1.0\n| | `-- event-stream@3.3.4\n| |   +-- duplexer@0.1.1 deduped\n| |   +-- from@0.1.7\n| |   +-- map-stream@0.1.0\n| |   +-- pause-stream@0.0.11\n| |   | `-- through@2.3.8 deduped\n| |   +-- split@0.3.3\n| |   | `-- through@2.3.8 deduped\n| |   +-- stream-combiner@0.0.4\n| |   | `-- duplexer@0.1.1 deduped\n| |   `-- through@2.3.8 deduped\n| +-- touch@3.1.0\n| | `-- nopt@1.0.10\n| |   `-- abbrev@1.1.1 deduped\n| +-- undefsafe@0.0.3\n| `-- update-notifier@2.3.0\n|   +-- boxen@1.2.2\n|   | +-- ansi-align@2.0.0\n|   | | `-- string-width@2.1.1 deduped\n|   | +-- camelcase@4.1.0\n|   | +-- chalk@2.3.0 deduped\n|   | +-- cli-boxes@1.0.0\n|   | +-- string-width@2.1.1 deduped\n|   | +-- term-size@1.2.0\n|   | | `-- execa@0.7.0 deduped\n|   | `-- widest-line@1.0.0\n|   |   `-- string-width@1.0.2\n|   |     +-- code-point-at@1.1.0 deduped\n|   |     +-- is-fullwidth-code-point@1.0.0 deduped\n|   |     `-- strip-ansi@3.0.1 deduped\n|   +-- chalk@2.3.0 deduped\n|   +-- configstore@3.1.1\n|   | +-- dot-prop@4.2.0\n|   | | `-- is-obj@1.0.1\n|   | +-- graceful-fs@4.1.11 deduped\n|   | +-- make-dir@1.1.0 deduped\n|   | +-- unique-string@1.0.0\n|   | | `-- crypto-random-string@1.0.0\n|   | +-- write-file-atomic@2.3.0 deduped\n|   | `-- xdg-basedir@3.0.0 deduped\n|   +-- import-lazy@2.1.0\n|   +-- is-installed-globally@0.1.0\n|   | +-- global-dirs@0.1.0\n|   | | `-- ini@1.3.4\n|   | `-- is-path-inside@1.0.0\n|   |   `-- path-is-inside@1.0.2 deduped\n|   +-- is-npm@1.0.0\n|   +-- latest-version@3.1.0\n|   | `-- package-json@4.0.1\n|   |   +-- got@6.7.1\n|   |   | +-- create-error-class@3.0.2\n|   |   | | `-- capture-stack-trace@1.0.0\n|   |   | +-- duplexer3@0.1.4\n|   |   | +-- get-stream@3.0.0 deduped\n|   |   | +-- is-redirect@1.0.0\n|   |   | +-- is-retry-allowed@1.1.0\n|   |   | +-- is-stream@1.1.0 deduped\n|   |   | +-- lowercase-keys@1.0.0\n|   |   | +-- safe-buffer@5.1.1 deduped\n|   |   | +-- timed-out@4.0.1\n|   |   | +-- unzip-response@2.0.1\n|   |   | `-- url-parse-lax@1.0.0\n|   |   |   `-- prepend-http@1.0.4 deduped\n|   |   +-- registry-auth-token@3.3.1\n|   |   | +-- rc@1.2.2\n|   |   | | +-- deep-extend@0.4.2\n|   |   | | +-- ini@1.3.4 deduped\n|   |   | | +-- minimist@1.2.0\n|   |   | | `-- strip-json-comments@2.0.1 deduped\n|   |   | `-- safe-buffer@5.1.1 deduped\n|   |   +-- registry-url@3.1.0\n|   |   | `-- rc@1.2.2 deduped\n|   |   `-- semver@5.4.1 deduped\n|   +-- semver-diff@2.1.0\n|   | `-- semver@5.4.1 deduped\n|   `-- xdg-basedir@3.0.0\n+-- normalize.css@7.0.0\n+-- opn@5.1.0\n| `-- is-wsl@1.1.0\n+-- passport-saml@0.31.0\n| +-- passport-strategy@1.0.0\n| +-- q@1.5.1\n| +-- xml-crypto@0.10.1\n| | +-- xmldom@0.1.19\n| | `-- xpath.js@1.0.7\n| +-- xml-encryption@0.11.0\n| | +-- async@2.6.0 deduped\n| | +-- ejs@2.5.7 deduped\n| | +-- node-forge@0.7.1\n| | +-- xmldom@0.1.27 deduped\n| | `-- xpath@0.0.24\n| +-- xml2js@0.4.19\n| | +-- sax@1.2.4\n| | `-- xmlbuilder@9.0.4 deduped\n| +-- xmlbuilder@9.0.4\n| `-- xmldom@0.1.27\n+-- postcss@6.0.14\n| +-- chalk@2.3.0 deduped\n| +-- source-map@0.6.1\n| `-- supports-color@4.5.0\n|   `-- has-flag@2.0.0\n+-- postcss-browser-reporter@0.5.0\n| `-- postcss@5.2.18\n|   +-- chalk@1.1.3\n|   | +-- ansi-styles@2.2.1\n|   | +-- escape-string-regexp@1.0.5 deduped\n|   | +-- has-ansi@2.0.0 deduped\n|   | +-- strip-ansi@3.0.1 deduped\n|   | `-- supports-color@2.0.0\n|   +-- js-base64@2.3.2 deduped\n|   +-- source-map@0.5.7 deduped\n|   `-- supports-color@3.2.3\n|     `-- has-flag@1.0.0\n+-- postcss-calc@6.0.1\n| +-- css-unit-converter@1.1.1\n| +-- postcss@6.0.14 deduped\n| +-- postcss-selector-parser@2.2.3\n| | +-- flatten@1.0.2\n| | +-- indexes-of@1.0.1\n| | `-- uniq@1.0.1\n| `-- reduce-css-calc@2.1.1\n|   +-- css-unit-converter@1.1.1 deduped\n|   `-- postcss-value-parser@3.3.0 deduped\n+-- postcss-cssnext@3.0.2\n| +-- autoprefixer@7.1.6 deduped\n| +-- caniuse-api@2.0.0\n| | +-- browserslist@2.7.0 deduped\n| | +-- caniuse-lite@1.0.30000758 deduped\n| | +-- lodash.memoize@4.1.2\n| | `-- lodash.uniq@4.5.0\n| +-- chalk@2.3.0 deduped\n| +-- pixrem@4.0.1\n| | +-- browserslist@2.7.0 deduped\n| | +-- postcss@6.0.14 deduped\n| | `-- reduce-css-calc@1.3.0\n| |   +-- balanced-match@0.4.2\n| |   +-- math-expression-evaluator@1.2.17\n| |   `-- reduce-function-call@1.0.2 deduped\n| +-- pleeease-filters@4.0.0\n| | +-- onecolor@3.0.4\n| | `-- postcss@6.0.14 deduped\n| +-- postcss@6.0.14 deduped\n| +-- postcss-apply@0.8.0\n| | +-- babel-runtime@6.26.0 deduped\n| | +-- balanced-match@0.4.2\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-attribute-case-insensitive@2.0.0\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-selector-parser@2.2.3 deduped\n| +-- postcss-calc@6.0.1 deduped\n| +-- postcss-color-function@4.0.1\n| | +-- css-color-function@1.3.3\n| | | +-- balanced-match@0.1.0\n| | | +-- color@0.11.4\n| | | | +-- clone@1.0.2\n| | | | +-- color-convert@1.9.0 deduped\n| | | | `-- color-string@0.3.0\n| | | |   `-- color-name@1.1.3 deduped\n| | | +-- debug@3.1.0\n| | | | `-- ms@2.0.0 deduped\n| | | `-- rgb@0.1.0\n| | +-- postcss@6.0.14 deduped\n| | +-- postcss-message-helpers@2.0.0\n| | `-- postcss-value-parser@3.3.0 deduped\n| +-- postcss-color-gray@4.0.0\n| | +-- color@1.0.3\n| | | +-- color-convert@1.9.0 deduped\n| | | `-- color-string@1.5.2\n| | |   +-- color-name@1.1.3 deduped\n| | |   `-- simple-swizzle@0.2.2\n| | |     `-- is-arrayish@0.3.1\n| | +-- postcss@6.0.14 deduped\n| | +-- postcss-message-helpers@2.0.0 deduped\n| | `-- reduce-function-call@1.0.2\n| |   `-- balanced-match@0.4.2\n| +-- postcss-color-hex-alpha@3.0.0\n| | +-- color@1.0.3\n| | | +-- color-convert@1.9.0 deduped\n| | | `-- color-string@1.5.2\n| | |   +-- color-name@1.1.3 deduped\n| | |   `-- simple-swizzle@0.2.2 deduped\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-message-helpers@2.0.0 deduped\n| +-- postcss-color-hsl@2.0.0\n| | +-- postcss@6.0.14 deduped\n| | +-- postcss-value-parser@3.3.0 deduped\n| | `-- units-css@0.4.0\n| |   +-- isnumeric@0.2.0\n| |   `-- viewport-dimensions@0.2.0\n| +-- postcss-color-hwb@3.0.0\n| | +-- color@1.0.3\n| | | +-- color-convert@1.9.0 deduped\n| | | `-- color-string@1.5.2\n| | |   +-- color-name@1.1.3 deduped\n| | |   `-- simple-swizzle@0.2.2 deduped\n| | +-- postcss@6.0.14 deduped\n| | +-- postcss-message-helpers@2.0.0 deduped\n| | `-- reduce-function-call@1.0.2 deduped\n| +-- postcss-color-rebeccapurple@3.0.0\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-value-parser@3.3.0 deduped\n| +-- postcss-color-rgb@2.0.0\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-value-parser@3.3.0 deduped\n| +-- postcss-color-rgba-fallback@3.0.0\n| | +-- postcss@6.0.14 deduped\n| | +-- postcss-value-parser@3.3.0 deduped\n| | `-- rgb-hex@2.1.0\n| +-- postcss-custom-media@6.0.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-custom-properties@6.2.0\n| | +-- balanced-match@1.0.0 deduped\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-custom-selectors@4.0.1 deduped\n| +-- postcss-font-family-system-ui@2.0.1\n| | +-- lodash@4.17.4 deduped\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-value-parser@3.3.0 deduped\n| +-- postcss-font-variant@3.0.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-image-set-polyfill@0.3.5\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-media-query-parser@0.2.3 deduped\n| +-- postcss-initial@2.0.0\n| | +-- lodash.template@4.4.0\n| | | +-- lodash._reinterpolate@3.0.0\n| | | `-- lodash.templatesettings@4.1.0\n| | |   `-- lodash._reinterpolate@3.0.0 deduped\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-media-minmax@3.0.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-nesting@4.2.1 deduped\n| +-- postcss-pseudo-class-any-link@4.0.0\n| | +-- postcss@6.0.14 deduped\n| | `-- postcss-selector-parser@2.2.3 deduped\n| +-- postcss-pseudoelements@5.0.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-replace-overflow-wrap@2.0.0\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-selector-matches@3.0.1\n| | +-- balanced-match@0.4.2\n| | `-- postcss@6.0.14 deduped\n| `-- postcss-selector-not@3.0.1\n|   +-- balanced-match@0.4.2\n|   `-- postcss@6.0.14 deduped\n+-- postcss-custom-selectors@4.0.1\n| +-- postcss@6.0.14 deduped\n| `-- postcss-selector-matches@3.0.1 deduped\n+-- postcss-import@11.0.0\n| +-- postcss@6.0.14 deduped\n| +-- postcss-value-parser@3.3.0 deduped\n| +-- read-cache@1.0.0\n| | `-- pify@2.3.0 deduped\n| `-- resolve@1.5.0\n|   `-- path-parse@1.0.5\n+-- postcss-loader@2.0.8\n| +-- loader-utils@1.1.0 deduped\n| +-- postcss@6.0.14 deduped\n| +-- postcss-load-config@1.2.0\n| | +-- cosmiconfig@2.2.2\n| | | +-- is-directory@0.3.1 deduped\n| | | +-- js-yaml@3.7.0 deduped\n| | | +-- minimist@1.2.0\n| | | +-- object-assign@4.1.1 deduped\n| | | +-- os-homedir@1.0.2 deduped\n| | | +-- parse-json@2.2.0\n| | | | `-- error-ex@1.3.1 deduped\n| | | `-- require-from-string@1.2.1\n| | +-- object-assign@4.1.1 deduped\n| | +-- postcss-load-options@1.2.0\n| | | +-- cosmiconfig@2.2.2 deduped\n| | | `-- object-assign@4.1.1 deduped\n| | `-- postcss-load-plugins@2.3.0\n| |   +-- cosmiconfig@2.2.2 deduped\n| |   `-- object-assign@4.1.1 deduped\n| `-- schema-utils@0.3.0 deduped\n+-- postcss-nested@2.1.2\n| +-- postcss@6.0.14 deduped\n| `-- postcss-selector-parser@2.2.3 deduped\n+-- postcss-nesting@4.2.1\n| `-- postcss@6.0.14 deduped\n+-- postcss-reporter@5.0.0\n| +-- chalk@2.3.0 deduped\n| +-- lodash@4.17.4 deduped\n| +-- log-symbols@2.1.0\n| | `-- chalk@2.3.0 deduped\n| `-- postcss@6.0.14 deduped\n+-- postcss-url@7.1.2\n| +-- mime@1.4.1\n| +-- minimatch@3.0.4 deduped\n| +-- mkdirp@0.5.1 deduped\n| +-- postcss@6.0.14 deduped\n| `-- xxhashjs@0.2.1\n|   `-- cuint@0.2.2\n+-- prop-types@15.6.0\n| +-- fbjs@0.8.16\n| | +-- core-js@1.2.7\n| | +-- isomorphic-fetch@2.2.1\n| | | +-- node-fetch@1.7.3\n| | | | +-- encoding@0.1.12\n| | | | | `-- iconv-lite@0.4.19 deduped\n| | | | `-- is-stream@1.1.0 deduped\n| | | `-- whatwg-fetch@2.0.3\n| | +-- loose-envify@1.3.1 deduped\n| | +-- object-assign@4.1.1 deduped\n| | +-- promise@7.3.1\n| | | `-- asap@2.0.6\n| | +-- setimmediate@1.0.5\n| | `-- ua-parser-js@0.7.17\n| +-- loose-envify@1.3.1 deduped\n| `-- object-assign@4.1.1 deduped\n+-- raf@3.4.0\n| `-- performance-now@2.1.0\n+-- UNMET PEER DEPENDENCY react@16.0.0\n| +-- fbjs@0.8.16 deduped\n| +-- loose-envify@1.3.1 deduped\n| +-- object-assign@4.1.1 deduped\n| `-- prop-types@15.6.0 deduped\n+-- react-dom@16.0.0\n| +-- fbjs@0.8.16 deduped\n| +-- loose-envify@1.3.1 deduped\n| +-- object-assign@4.1.1 deduped\n| `-- prop-types@15.6.0 deduped\n+-- react-edit@6.4.0\n+-- react-helmet@5.2.0\n| +-- deep-equal@1.0.1 deduped\n| +-- object-assign@4.1.1 deduped\n| +-- prop-types@15.6.0 deduped\n| `-- react-side-effect@1.1.3\n|   +-- exenv@1.2.2\n|   `-- shallowequal@1.0.2\n+-- react-hot-loader@3.1.1\n| +-- global@4.3.2\n| | +-- min-document@2.19.0\n| | | `-- dom-walk@0.1.1\n| | `-- process@0.5.2\n| +-- react-deep-force-update@2.1.1\n| +-- react-proxy@3.0.0-alpha.1\n| | `-- lodash@4.17.4 deduped\n| +-- redbox-react@1.5.0 deduped\n| `-- source-map@0.6.1\n+-- react-redux@5.0.6\n| +-- hoist-non-react-statics@2.3.1\n| +-- invariant@2.2.2 deduped\n| +-- lodash@4.17.4 deduped\n| +-- lodash-es@4.17.4\n| +-- loose-envify@1.3.1 deduped\n| `-- prop-types@15.6.0 deduped\n+-- UNMET PEER DEPENDENCY react-router@^4.2.0\n+-- react-router-config@1.0.0-beta.4\n+-- react-router-dom@4.2.2\n| +-- history@4.7.2 deduped\n| +-- invariant@2.2.2 deduped\n| +-- loose-envify@1.3.1 deduped\n| +-- prop-types@15.6.0 deduped\n| +-- react-router@4.2.0\n| | +-- history@4.7.2 deduped\n| | +-- hoist-non-react-statics@2.3.1 deduped\n| | +-- invariant@2.2.2 deduped\n| | +-- loose-envify@1.3.1 deduped\n| | +-- path-to-regexp@1.7.0 deduped\n| | +-- prop-types@15.6.0 deduped\n| | `-- warning@3.0.0 deduped\n| `-- warning@3.0.0 deduped\n+-- react-router-redux@5.0.0-alpha.6\n| +-- history@4.7.2 deduped\n| +-- prop-types@15.6.0 deduped\n| `-- react-router@4.2.0\n|   +-- history@4.7.2 deduped\n|   +-- hoist-non-react-statics@2.3.1 deduped\n|   +-- invariant@2.2.2 deduped\n|   +-- loose-envify@1.3.1 deduped\n|   +-- path-to-regexp@1.7.0 deduped\n|   +-- prop-types@15.6.0 deduped\n|   `-- warning@3.0.0 deduped\n+-- react-test-renderer@16.0.0\n| +-- fbjs@0.8.16 deduped\n| `-- object-assign@4.1.1 deduped\n+-- redbox-react@1.5.0\n| +-- error-stack-parser@1.3.6\n| | `-- stackframe@0.3.1\n| +-- object-assign@4.1.1 deduped\n| +-- prop-types@15.6.0 deduped\n| `-- sourcemapped-stacktrace@1.1.7\n|   `-- source-map@0.5.6\n+-- redux@3.7.2\n| +-- lodash@4.17.4 deduped\n| +-- lodash-es@4.17.4 deduped\n| +-- loose-envify@1.3.1 deduped\n| `-- symbol-observable@1.0.4\n+-- redux-form@7.1.2\n| +-- deep-equal@1.0.1 deduped\n| +-- es6-error@4.0.2\n| +-- hoist-non-react-statics@2.3.1 deduped\n| +-- invariant@2.2.2 deduped\n| +-- is-promise@2.1.0\n| +-- lodash@4.17.4 deduped\n| +-- lodash-es@4.17.4 deduped\n| `-- prop-types@15.6.0 deduped\n+-- redux-mock-store@1.3.0\n+-- redux-thunk@2.2.0\n+-- redux-ui@0.1.1\n| +-- babel-register@6.26.0 deduped\n| +-- immutable@3.8.2 deduped\n| +-- invariant@2.2.2 deduped\n| +-- prop-types@15.6.0 deduped\n| +-- react@15.6.2\n| | +-- create-react-class@15.6.2\n| | | +-- fbjs@0.8.16 deduped\n| | | +-- loose-envify@1.3.1 deduped\n| | | `-- object-assign@4.1.1 deduped\n| | +-- fbjs@0.8.16 deduped\n| | +-- loose-envify@1.3.1 deduped\n| | +-- object-assign@4.1.1 deduped\n| | `-- prop-types@15.6.0 deduped\n| +-- react-redux@4.4.8\n| | +-- create-react-class@15.6.2 deduped\n| | +-- hoist-non-react-statics@1.2.0\n| | +-- invariant@2.2.2 deduped\n| | +-- lodash@4.17.4 deduped\n| | +-- loose-envify@1.3.1 deduped\n| | `-- prop-types@15.6.0 deduped\n| `-- redux@3.7.2 deduped\n+-- rimraf@2.6.2\n| `-- glob@7.1.2\n|   +-- fs.realpath@1.0.0 deduped\n|   +-- inflight@1.0.6 deduped\n|   +-- inherits@2.0.3 deduped\n|   +-- minimatch@3.0.4 deduped\n|   +-- once@1.4.0 deduped\n|   `-- path-is-absolute@1.0.1 deduped\n+-- serialize-javascript@1.4.0\n+-- shebang-loader@0.0.1\n+-- style-loader@0.19.0\n| +-- loader-utils@1.1.0 deduped\n| `-- schema-utils@0.3.0 deduped\n+-- stylelint@8.2.0\n| +-- autoprefixer@7.1.6 deduped\n| +-- balanced-match@1.0.0\n| +-- chalk@2.3.0 deduped\n| +-- cosmiconfig@3.1.0\n| | +-- is-directory@0.3.1\n| | +-- js-yaml@3.10.0\n| | | +-- argparse@1.0.9 deduped\n| | | `-- esprima@4.0.0\n| | +-- parse-json@3.0.0\n| | | `-- error-ex@1.3.1\n| | |   `-- is-arrayish@0.2.1\n| | `-- require-from-string@2.0.1\n| +-- debug@3.1.0\n| | `-- ms@2.0.0 deduped\n| +-- execall@1.0.0\n| | `-- clone-regexp@1.0.0\n| |   +-- is-regexp@1.0.0\n| |   `-- is-supported-regexp-flag@1.0.0\n| +-- file-entry-cache@2.0.0 deduped\n| +-- get-stdin@5.0.1\n| +-- globby@6.1.0\n| | +-- array-union@1.0.2\n| | | `-- array-uniq@1.0.3\n| | +-- glob@7.1.2\n| | | +-- fs.realpath@1.0.0 deduped\n| | | +-- inflight@1.0.6 deduped\n| | | +-- inherits@2.0.3 deduped\n| | | +-- minimatch@3.0.4 deduped\n| | | +-- once@1.4.0 deduped\n| | | `-- path-is-absolute@1.0.1 deduped\n| | +-- object-assign@4.1.1 deduped\n| | +-- pify@2.3.0\n| | `-- pinkie-promise@2.0.1\n| |   `-- pinkie@2.0.4\n| +-- globjoin@0.1.4\n| +-- html-tags@2.0.0\n| +-- ignore@3.3.7 deduped\n| +-- imurmurhash@0.1.4 deduped\n| +-- known-css-properties@0.4.1\n| +-- lodash@4.17.4 deduped\n| +-- log-symbols@2.1.0 deduped\n| +-- mathml-tag-names@2.0.1\n| +-- meow@3.7.0 deduped\n| +-- micromatch@2.3.11\n| | +-- arr-diff@2.0.0\n| | | `-- arr-flatten@1.1.0\n| | +-- array-unique@0.2.1\n| | +-- braces@1.8.5\n| | | +-- expand-range@1.8.2\n| | | | `-- fill-range@2.2.3\n| | | |   +-- is-number@2.1.0\n| | | |   | `-- kind-of@3.2.2 deduped\n| | | |   +-- isobject@2.1.0\n| | | |   | `-- isarray@1.0.0 deduped\n| | | |   +-- randomatic@1.1.7\n| | | |   | +-- is-number@3.0.0\n| | | |   | | `-- kind-of@3.2.2\n| | | |   | |   `-- is-buffer@1.1.6 deduped\n| | | |   | `-- kind-of@4.0.0\n| | | |   |   `-- is-buffer@1.1.6 deduped\n| | | |   +-- repeat-element@1.1.2 deduped\n| | | |   `-- repeat-string@1.6.1\n| | | +-- preserve@0.2.0\n| | | `-- repeat-element@1.1.2\n| | +-- expand-brackets@0.1.5\n| | | `-- is-posix-bracket@0.1.1\n| | +-- extglob@0.3.2\n| | | `-- is-extglob@1.0.0 deduped\n| | +-- filename-regex@2.0.1\n| | +-- is-extglob@1.0.0\n| | +-- is-glob@2.0.1 deduped\n| | +-- kind-of@3.2.2\n| | | `-- is-buffer@1.1.6 deduped\n| | +-- normalize-path@2.1.1\n| | | `-- remove-trailing-separator@1.1.0\n| | +-- object.omit@2.0.1\n| | | +-- for-own@0.1.5\n| | | | `-- for-in@1.0.2\n| | | `-- is-extendable@0.1.1\n| | +-- parse-glob@3.0.4\n| | | +-- glob-base@0.3.0\n| | | | +-- glob-parent@2.0.0 deduped\n| | | | `-- is-glob@2.0.1 deduped\n| | | +-- is-dotfile@1.0.3\n| | | +-- is-extglob@1.0.0 deduped\n| | | `-- is-glob@2.0.1 deduped\n| | `-- regex-cache@0.4.4\n| |   `-- is-equal-shallow@0.1.3\n| |     `-- is-primitive@2.0.0\n| +-- normalize-selector@0.2.0\n| +-- pify@3.0.0\n| +-- postcss@6.0.14 deduped\n| +-- postcss-less@1.1.2\n| | `-- postcss@5.2.18\n| |   +-- chalk@1.1.3\n| |   | +-- ansi-styles@2.2.1\n| |   | +-- escape-string-regexp@1.0.5 deduped\n| |   | +-- has-ansi@2.0.0 deduped\n| |   | +-- strip-ansi@3.0.1 deduped\n| |   | `-- supports-color@2.0.0\n| |   +-- js-base64@2.3.2 deduped\n| |   +-- source-map@0.5.7 deduped\n| |   `-- supports-color@3.2.3\n| |     `-- has-flag@1.0.0\n| +-- postcss-media-query-parser@0.2.3\n| +-- postcss-reporter@5.0.0 deduped\n| +-- postcss-resolve-nested-selector@0.1.1\n| +-- postcss-safe-parser@3.0.1\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-scss@1.0.2\n| | `-- postcss@6.0.14 deduped\n| +-- postcss-selector-parser@2.2.3 deduped\n| +-- postcss-value-parser@3.3.0 deduped\n| +-- resolve-from@4.0.0\n| +-- specificity@0.3.2\n| +-- string-width@2.1.1\n| | +-- is-fullwidth-code-point@2.0.0\n| | `-- strip-ansi@4.0.0\n| |   `-- ansi-regex@3.0.0\n| +-- style-search@0.1.0\n| +-- sugarss@1.0.1\n| | `-- postcss@6.0.14 deduped\n| +-- svg-tags@1.0.0\n| `-- table@4.0.2 deduped\n+-- stylelint-config-standard@17.0.0\n| `-- stylelint-config-recommended@1.0.0\n+-- stylelint-webpack-plugin@0.9.0\n| +-- arrify@1.0.1\n| +-- minimatch@3.0.4 deduped\n| +-- object-assign@4.1.1 deduped\n| `-- ramda@0.24.1\n+-- through2@2.0.3\n| +-- readable-stream@2.3.3\n| | +-- core-util-is@1.0.2 deduped\n| | +-- inherits@2.0.3 deduped\n| | +-- isarray@1.0.0 deduped\n| | +-- process-nextick-args@1.0.7\n| | +-- safe-buffer@5.1.1 deduped\n| | +-- string_decoder@1.0.3\n| | | `-- safe-buffer@5.1.1 deduped\n| | `-- util-deprecate@1.0.2\n| `-- xtend@4.0.1 deduped\n+-- url-loader@0.6.2\n| +-- loader-utils@1.1.0 deduped\n| +-- mime@1.4.1 deduped\n| `-- schema-utils@0.3.0 deduped\n+-- uuid@3.1.0\n+-- webpack@3.8.1\n| +-- acorn@5.2.1\n| +-- acorn-dynamic-import@2.0.2\n| | `-- acorn@4.0.13\n| +-- ajv@5.3.0 deduped\n| +-- ajv-keywords@2.1.1\n| +-- async@2.6.0 deduped\n| +-- enhanced-resolve@3.4.1\n| | +-- graceful-fs@4.1.11 deduped\n| | +-- memory-fs@0.4.1 deduped\n| | +-- object-assign@4.1.1 deduped\n| | `-- tapable@0.2.8 deduped\n| +-- escope@3.6.0\n| | +-- es6-map@0.1.5\n| | | +-- d@1.0.0\n| | | | `-- es5-ext@0.10.35 deduped\n| | | +-- es5-ext@0.10.35\n| | | | +-- es6-iterator@2.0.3 deduped\n| | | | `-- es6-symbol@3.1.1 deduped\n| | | +-- es6-iterator@2.0.3\n| | | | +-- d@1.0.0 deduped\n| | | | +-- es5-ext@0.10.35 deduped\n| | | | `-- es6-symbol@3.1.1 deduped\n| | | +-- es6-set@0.1.5\n| | | | +-- d@1.0.0 deduped\n| | | | +-- es5-ext@0.10.35 deduped\n| | | | +-- es6-iterator@2.0.3 deduped\n| | | | +-- es6-symbol@3.1.1 deduped\n| | | | `-- event-emitter@0.3.5 deduped\n| | | +-- es6-symbol@3.1.1\n| | | | +-- d@1.0.0 deduped\n| | | | `-- es5-ext@0.10.35 deduped\n| | | `-- event-emitter@0.3.5\n| | |   +-- d@1.0.0 deduped\n| | |   `-- es5-ext@0.10.35 deduped\n| | +-- es6-weak-map@2.0.2\n| | | +-- d@1.0.0 deduped\n| | | +-- es5-ext@0.10.35 deduped\n| | | +-- es6-iterator@2.0.3 deduped\n| | | `-- es6-symbol@3.1.1 deduped\n| | +-- esrecurse@4.2.0 deduped\n| | `-- estraverse@4.2.0 deduped\n| +-- interpret@1.0.4\n| +-- json-loader@0.5.7\n| +-- json5@0.5.1 deduped\n| +-- loader-runner@2.3.0\n| +-- loader-utils@1.1.0 deduped\n| +-- memory-fs@0.4.1\n| | +-- errno@0.1.4\n| | | `-- prr@0.0.0\n| | `-- readable-stream@2.3.3 deduped\n| +-- mkdirp@0.5.1 deduped\n| +-- node-libs-browser@2.0.0\n| | +-- assert@1.4.1\n| | | `-- util@0.10.3 deduped\n| | +-- browserify-zlib@0.1.4\n| | | `-- pako@0.2.9\n| | +-- buffer@4.9.1\n| | | +-- base64-js@1.2.1\n| | | +-- ieee754@1.1.8\n| | | `-- isarray@1.0.0 deduped\n| | +-- console-browserify@1.1.0\n| | | `-- date-now@0.1.4\n| | +-- constants-browserify@1.0.0\n| | +-- crypto-browserify@3.12.0\n| | | +-- browserify-cipher@1.0.0\n| | | | +-- browserify-aes@1.1.1\n| | | | | +-- buffer-xor@1.0.3\n| | | | | +-- cipher-base@1.0.4 deduped\n| | | | | +-- create-hash@1.1.3 deduped\n| | | | | +-- evp_bytestokey@1.0.3 deduped\n| | | | | +-- inherits@2.0.3 deduped\n| | | | | `-- safe-buffer@5.1.1 deduped\n| | | | +-- browserify-des@1.0.0\n| | | | | +-- cipher-base@1.0.4 deduped\n| | | | | +-- des.js@1.0.0\n| | | | | | +-- inherits@2.0.3 deduped\n| | | | | | `-- minimalistic-assert@1.0.0 deduped\n| | | | | `-- inherits@2.0.3 deduped\n| | | | `-- evp_bytestokey@1.0.3\n| | | |   +-- md5.js@1.3.4\n| | | |   | +-- hash-base@3.0.4\n| | | |   | | +-- inherits@2.0.3 deduped\n| | | |   | | `-- safe-buffer@5.1.1 deduped\n| | | |   | `-- inherits@2.0.3 deduped\n| | | |   `-- safe-buffer@5.1.1 deduped\n| | | +-- browserify-sign@4.0.4\n| | | | +-- bn.js@4.11.8\n| | | | +-- browserify-rsa@4.0.1\n| | | | | +-- bn.js@4.11.8 deduped\n| | | | | `-- randombytes@2.0.5 deduped\n| | | | +-- create-hash@1.1.3 deduped\n| | | | +-- create-hmac@1.1.6 deduped\n| | | | +-- elliptic@6.4.0\n| | | | | +-- bn.js@4.11.8 deduped\n| | | | | +-- brorand@1.1.0\n| | | | | +-- hash.js@1.1.3\n| | | | | | +-- inherits@2.0.3 deduped\n| | | | | | `-- minimalistic-assert@1.0.0 deduped\n| | | | | +-- hmac-drbg@1.0.1\n| | | | | | +-- hash.js@1.1.3 deduped\n| | | | | | +-- minimalistic-assert@1.0.0 deduped\n| | | | | | `-- minimalistic-crypto-utils@1.0.1 deduped\n| | | | | +-- inherits@2.0.3 deduped\n| | | | | +-- minimalistic-assert@1.0.0\n| | | | | `-- minimalistic-crypto-utils@1.0.1\n| | | | +-- inherits@2.0.3 deduped\n| | | | `-- parse-asn1@5.1.0\n| | | |   +-- asn1.js@4.9.2\n| | | |   | +-- bn.js@4.11.8 deduped\n| | | |   | +-- inherits@2.0.3 deduped\n| | | |   | `-- minimalistic-assert@1.0.0 deduped\n| | | |   +-- browserify-aes@1.1.1 deduped\n| | | |   +-- create-hash@1.1.3 deduped\n| | | |   +-- evp_bytestokey@1.0.3 deduped\n| | | |   `-- pbkdf2@3.0.14 deduped\n| | | +-- create-ecdh@4.0.0\n| | | | +-- bn.js@4.11.8 deduped\n| | | | `-- elliptic@6.4.0 deduped\n| | | +-- create-hash@1.1.3\n| | | | +-- cipher-base@1.0.4\n| | | | | +-- inherits@2.0.3 deduped\n| | | | | `-- safe-buffer@5.1.1 deduped\n| | | | +-- inherits@2.0.3 deduped\n| | | | +-- ripemd160@2.0.1\n| | | | | +-- hash-base@2.0.2\n| | | | | | `-- inherits@2.0.3 deduped\n| | | | | `-- inherits@2.0.3 deduped\n| | | | `-- sha.js@2.4.9\n| | | |   +-- inherits@2.0.3 deduped\n| | | |   `-- safe-buffer@5.1.1 deduped\n| | | +-- create-hmac@1.1.6\n| | | | +-- cipher-base@1.0.4 deduped\n| | | | +-- create-hash@1.1.3 deduped\n| | | | +-- inherits@2.0.3 deduped\n| | | | +-- ripemd160@2.0.1 deduped\n| | | | +-- safe-buffer@5.1.1 deduped\n| | | | `-- sha.js@2.4.9 deduped\n| | | +-- diffie-hellman@5.0.2\n| | | | +-- bn.js@4.11.8 deduped\n| | | | +-- miller-rabin@4.0.1\n| | | | | +-- bn.js@4.11.8 deduped\n| | | | | `-- brorand@1.1.0 deduped\n| | | | `-- randombytes@2.0.5 deduped\n| | | +-- inherits@2.0.3 deduped\n| | | +-- pbkdf2@3.0.14\n| | | | +-- create-hash@1.1.3 deduped\n| | | | +-- create-hmac@1.1.6 deduped\n| | | | +-- ripemd160@2.0.1 deduped\n| | | | +-- safe-buffer@5.1.1 deduped\n| | | | `-- sha.js@2.4.9 deduped\n| | | +-- public-encrypt@4.0.0\n| | | | +-- bn.js@4.11.8 deduped\n| | | | +-- browserify-rsa@4.0.1 deduped\n| | | | +-- create-hash@1.1.3 deduped\n| | | | +-- parse-asn1@5.1.0 deduped\n| | | | `-- randombytes@2.0.5 deduped\n| | | +-- randombytes@2.0.5\n| | | | `-- safe-buffer@5.1.1 deduped\n| | | `-- randomfill@1.0.3\n| | |   +-- randombytes@2.0.5 deduped\n| | |   `-- safe-buffer@5.1.1 deduped\n| | +-- domain-browser@1.1.7\n| | +-- events@1.1.1\n| | +-- https-browserify@0.0.1\n| | +-- os-browserify@0.2.1\n| | +-- path-browserify@0.0.0\n| | +-- process@0.11.10\n| | +-- punycode@1.4.1\n| | +-- querystring-es3@0.2.1\n| | +-- readable-stream@2.3.3 deduped\n| | +-- stream-browserify@2.0.1\n| | | +-- inherits@2.0.3 deduped\n| | | `-- readable-stream@2.3.3 deduped\n| | +-- stream-http@2.7.2\n| | | +-- builtin-status-codes@3.0.0\n| | | +-- inherits@2.0.3 deduped\n| | | +-- readable-stream@2.3.3 deduped\n| | | +-- to-arraybuffer@1.0.1\n| | | `-- xtend@4.0.1 deduped\n| | +-- string_decoder@0.10.31\n| | +-- timers-browserify@2.0.4\n| | | `-- setimmediate@1.0.5 deduped\n| | +-- tty-browserify@0.0.0\n| | +-- url@0.11.0\n| | | +-- punycode@1.3.2\n| | | `-- querystring@0.2.0 deduped\n| | +-- util@0.10.3\n| | | `-- inherits@2.0.1\n| | `-- vm-browserify@0.0.4\n| |   `-- indexof@0.0.1\n| +-- source-map@0.5.7 deduped\n| +-- supports-color@4.5.0 deduped\n| +-- tapable@0.2.8\n| +-- uglifyjs-webpack-plugin@0.4.6\n| | +-- source-map@0.5.7 deduped\n| | +-- uglify-js@2.8.29 deduped\n| | `-- webpack-sources@1.0.2 deduped\n| +-- watchpack@1.4.0\n| | +-- async@2.6.0 deduped\n| | +-- chokidar@1.7.0 deduped\n| | `-- graceful-fs@4.1.11 deduped\n| +-- webpack-sources@1.0.2 deduped\n| `-- yargs@8.0.2\n|   +-- camelcase@4.1.0\n|   +-- cliui@3.2.0\n|   | +-- string-width@1.0.2\n|   | | +-- code-point-at@1.1.0 deduped\n|   | | +-- is-fullwidth-code-point@1.0.0 deduped\n|   | | `-- strip-ansi@3.0.1 deduped\n|   | +-- strip-ansi@3.0.1 deduped\n|   | `-- wrap-ansi@2.1.0\n|   |   +-- string-width@1.0.2\n|   |   | +-- code-point-at@1.1.0 deduped\n|   |   | +-- is-fullwidth-code-point@1.0.0 deduped\n|   |   | `-- strip-ansi@3.0.1 deduped\n|   |   `-- strip-ansi@3.0.1 deduped\n|   +-- decamelize@1.2.0 deduped\n|   +-- get-caller-file@1.0.2\n|   +-- os-locale@2.1.0\n|   | +-- execa@0.7.0 deduped\n|   | +-- lcid@1.0.0\n|   | | `-- invert-kv@1.0.0\n|   | `-- mem@1.1.0\n|   |   `-- mimic-fn@1.1.0\n|   +-- read-pkg-up@2.0.0 deduped\n|   +-- require-directory@2.1.1\n|   +-- require-main-filename@1.0.1 deduped\n|   +-- set-blocking@2.0.0 deduped\n|   +-- string-width@2.1.1 deduped\n|   +-- which-module@2.0.0\n|   +-- y18n@3.2.1\n|   `-- yargs-parser@7.0.0\n|     `-- camelcase@4.1.0\n+-- webpack-bundle-analyzer@2.9.0\n| +-- acorn@5.2.1 deduped\n| +-- chalk@1.1.3\n| | +-- ansi-styles@2.2.1\n| | +-- escape-string-regexp@1.0.5 deduped\n| | +-- has-ansi@2.0.0 deduped\n| | +-- strip-ansi@3.0.1 deduped\n| | `-- supports-color@2.0.0\n| +-- commander@2.11.0 deduped\n| +-- ejs@2.5.7\n| +-- express@4.16.2\n| | +-- accepts@1.3.4 deduped\n| | +-- array-flatten@1.1.1\n| | +-- body-parser@1.18.2\n| | | +-- bytes@3.0.0 deduped\n| | | +-- content-type@1.0.4 deduped\n| | | +-- debug@2.6.9 deduped\n| | | +-- depd@1.1.1 deduped\n| | | +-- http-errors@1.6.2 deduped\n| | | +-- iconv-lite@0.4.19 deduped\n| | | +-- on-finished@2.3.0 deduped\n| | | +-- qs@6.5.1 deduped\n| | | +-- raw-body@2.3.2 deduped\n| | | `-- type-is@1.6.15 deduped\n| | +-- content-disposition@0.5.2 deduped\n| | +-- content-type@1.0.4 deduped\n| | +-- cookie@0.3.1\n| | +-- cookie-signature@1.0.6\n| | +-- debug@2.6.9 deduped\n| | +-- depd@1.1.1 deduped\n| | +-- encodeurl@1.0.1\n| | +-- escape-html@1.0.3 deduped\n| | +-- etag@1.8.1\n| | +-- finalhandler@1.1.0\n| | | +-- debug@2.6.9 deduped\n| | | +-- encodeurl@1.0.1 deduped\n| | | +-- escape-html@1.0.3 deduped\n| | | +-- on-finished@2.3.0 deduped\n| | | +-- parseurl@1.3.2 deduped\n| | | +-- statuses@1.3.1\n| | | `-- unpipe@1.0.0 deduped\n| | +-- fresh@0.5.2 deduped\n| | +-- merge-descriptors@1.0.1\n| | +-- methods@1.1.2 deduped\n| | +-- on-finished@2.3.0 deduped\n| | +-- parseurl@1.3.2 deduped\n| | +-- path-to-regexp@0.1.7\n| | +-- proxy-addr@2.0.2\n| | | +-- forwarded@0.1.2\n| | | `-- ipaddr.js@1.5.2\n| | +-- qs@6.5.1 deduped\n| | +-- range-parser@1.2.0 deduped\n| | +-- safe-buffer@5.1.1 deduped\n| | +-- send@0.16.1\n| | | +-- debug@2.6.9 deduped\n| | | +-- depd@1.1.1 deduped\n| | | +-- destroy@1.0.4 deduped\n| | | +-- encodeurl@1.0.1 deduped\n| | | +-- escape-html@1.0.3 deduped\n| | | +-- etag@1.8.1 deduped\n| | | +-- fresh@0.5.2 deduped\n| | | +-- http-errors@1.6.2 deduped\n| | | +-- mime@1.4.1 deduped\n| | | +-- ms@2.0.0 deduped\n| | | +-- on-finished@2.3.0 deduped\n| | | +-- range-parser@1.2.0 deduped\n| | | `-- statuses@1.3.1\n| | +-- serve-static@1.13.1\n| | | +-- encodeurl@1.0.1 deduped\n| | | +-- escape-html@1.0.3 deduped\n| | | +-- parseurl@1.3.2 deduped\n| | | `-- send@0.16.1 deduped\n| | +-- setprototypeof@1.1.0\n| | +-- statuses@1.3.1\n| | +-- type-is@1.6.15 deduped\n| | +-- utils-merge@1.0.1\n| | `-- vary@1.1.2 deduped\n| +-- filesize@3.5.11\n| +-- gzip-size@3.0.0\n| | `-- duplexer@0.1.1\n| +-- lodash@4.17.4 deduped\n| +-- mkdirp@0.5.1 deduped\n| +-- opener@1.4.3\n| `-- ws@2.3.1\n|   +-- safe-buffer@5.0.1\n|   `-- ultron@1.1.0\n+-- webpack-isomorphic-tools@3.0.5\n| +-- babel-runtime@6.26.0 deduped\n| +-- colors@1.1.2\n| +-- fs-extra@0.30.0\n| | +-- graceful-fs@4.1.11 deduped\n| | +-- jsonfile@2.4.0\n| | | `-- graceful-fs@4.1.11 deduped\n| | +-- klaw@1.3.1\n| | | `-- graceful-fs@4.1.11 deduped\n| | +-- path-is-absolute@1.0.1 deduped\n| | `-- rimraf@2.6.2 deduped\n| +-- require-hacker@3.0.1\n| | +-- babel-runtime@6.26.0 deduped\n| | `-- colors@1.1.2 deduped\n| +-- semver@5.4.1 deduped\n| +-- sync-request@3.0.1\n| | +-- concat-stream@1.6.0 deduped\n| | +-- http-response-object@1.1.0\n| | `-- then-request@2.2.0\n| |   +-- caseless@0.11.0\n| |   +-- concat-stream@1.6.0 deduped\n| |   +-- http-basic@2.5.1\n| |   | +-- caseless@0.11.0 deduped\n| |   | +-- concat-stream@1.6.0 deduped\n| |   | `-- http-response-object@1.1.0 deduped\n| |   +-- http-response-object@1.1.0 deduped\n| |   +-- promise@7.3.1 deduped\n| |   `-- qs@6.5.1 deduped\n| `-- uglify-js@2.8.29\n|   +-- source-map@0.5.7 deduped\n|   +-- uglify-to-browserify@1.0.2\n|   `-- yargs@3.10.0\n|     +-- camelcase@1.2.1\n|     +-- cliui@2.1.0\n|     | +-- center-align@0.1.3\n|     | | +-- align-text@0.1.4\n|     | | | +-- kind-of@3.2.2 deduped\n|     | | | +-- longest@1.0.1 deduped\n|     | | | `-- repeat-string@1.6.1 deduped\n|     | | `-- lazy-cache@1.0.4\n|     | +-- right-align@0.1.3\n|     | | `-- align-text@0.1.4 deduped\n|     | `-- wordwrap@0.0.2\n|     +-- decamelize@1.2.0 deduped\n|     `-- window-size@0.1.0\n+-- webpack-node-externals@1.6.0\n`-- window-or-global@1.0.1\n\nnpm ERR! peer dep missing: eslint-plugin-jsx-a11y@^5.1.1, required by eslint-config-airbnb@15.1.0\nnpm ERR! peer dep missing: react@^15, required by react-router-redux@5.0.0-alpha.6\nnpm ERR! peer dep missing: react-router@^4.2.0, required by react-router-config@1.0.0-beta.4\n```\n\n\nDeps & Dev Deps\n\n```\n\"dependencies\": {\n    \"axios\": \"^0.17.0\",\n    \"babel-polyfill\": \"^6.23.0\",\n    \"bunyan\": \"^1.8.12\",\n    \"bunyan-stream\": \"^1.0.0\",\n    \"classnames\": \"^2.2.5\",\n    \"figlet\": \"^1.2.0\",\n    \"history\": \"^4.6.3\",\n    \"humps\": \"^2.0.1\",\n    \"immutable\": \"^3.8.1\",\n    \"jsonwebtoken\": \"^8.1.0\",\n    \"koa\": \"^2.3.0\",\n    \"koa-bodyparser\": \"^4.2.0\",\n    \"koa-compress\": \"^2.0.0\",\n    \"koa-favicon\": \"^2.0.0\",\n    \"koa-helmet\": \"^3.2.0\",\n    \"koa-morgan\": \"^1.0.1\",\n    \"koa-no-cache\": \"^1.1.0\",\n    \"koa-passport\": \"^4.0.1\",\n    \"koa-router\": \"^7.2.1\",\n    \"koa-session\": \"^5.4.0\",\n    \"koa-webpack\": \"^1.0.0\",\n    \"lodash\": \"^4.17.4\",\n    \"material-ui\": \"^0.19.4\",\n    \"node-cache\": \"^4.1.1\",\n    \"normalize.css\": \"^7.0.0\",\n    \"passport-saml\": \"^0.31.0\",\n    \"postcss-calc\": \"^6.0.0\",\n    \"prop-types\": \"^15.6.0\",\n    \"react\": \"^16.0.0\",\n    \"react-dom\": \"^16.0.0\",\n    \"react-edit\": \"^6.4.0\",\n    \"react-helmet\": \"^5.1.3\",\n    \"react-hot-loader\": \"^3.0.0-beta.6\",\n    \"react-redux\": \"^5.0.5\",\n    \"react-router-config\": \"^1.0.0-beta.3\",\n    \"react-router-dom\": \"^4.1.2\",\n    \"react-router-redux\": \"5.0.0-alpha.6\",\n    \"redbox-react\": \"^1.5.0\",\n    \"redux\": \"^3.7.2\",\n    \"redux-form\": \"^7.0.3\",\n    \"redux-thunk\": \"^2.2.0\",\n    \"redux-ui\": \"^0.1.1\",\n    \"serialize-javascript\": \"^1.4.0\",\n    \"through2\": \"^2.0.3\",\n    \"uuid\": \"^3.1.0\",\n    \"webpack-isomorphic-tools\": \"^3.0.3\",\n    \"window-or-global\": \"^1.0.1\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.2\",\n    \"babel-cli\": \"^6.24.1\",\n    \"babel-core\": \"^6.25.0\",\n    \"babel-eslint\": \"^8.0.1\",\n    \"babel-jest\": \"^21.2.0\",\n    \"babel-loader\": \"^7.1.1\",\n    \"babel-plugin-istanbul\": \"^4.1.4\",\n    \"babel-plugin-lodash\": \"^3.2.11\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"better-npm-run\": \"^0.1.0\",\n    \"css-loader\": \"^0.28.4\",\n    \"enzyme\": \"^3.1.0\",\n    \"enzyme-adapter-react-16\": \"^1.0.4\",\n    \"eslint\": \"^4.3.0\",\n    \"eslint-config-airbnb\": \"^15.1.0\",\n    \"eslint-loader\": \"^1.8.0\",\n    \"eslint-plugin-import\": \"^2.6.1\",\n    \"eslint-plugin-jsx-a11y\": \"^6.0.2\",\n    \"eslint-plugin-react\": \"7.3.0\",\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\n    \"file-loader\": \"^1.1.5\",\n    \"image-webpack-loader\": \"^3.3.1\",\n    \"imports-loader\": \"^0.7.1\",\n    \"jest\": \"^21.2.1\",\n    \"koa-static-cache\": \"^5.1.1\",\n    \"moxios\": \"^0.4.0\",\n    \"nock\": \"^9.0.14\",\n    \"node-sass\": \"^4.5.3\",\n    \"nodemon\": \"^1.11.0\",\n    \"opn\": \"^5.1.0\",\n    \"postcss\": \"^6.0.8\",\n    \"postcss-browser-reporter\": \"^0.5.0\",\n    \"postcss-cssnext\": \"^3.0.2\",\n    \"postcss-custom-selectors\": \"^4.0.1\",\n    \"postcss-import\": \"^11.0.0\",\n    \"postcss-loader\": \"^2.0.6\",\n    \"postcss-nested\": \"^2.1.2\",\n    \"postcss-nesting\": \"^4.0.1\",\n    \"postcss-reporter\": \"^5.0.0\",\n    \"postcss-url\": \"^7.1.1\",\n    \"raf\": \"^3.4.0\",\n    \"react-test-renderer\": \"^16.0.0\",\n    \"redux-mock-store\": \"^1.2.3\",\n    \"rimraf\": \"^2.6.1\",\n    \"shebang-loader\": \"^0.0.1\",\n    \"style-loader\": \"^0.19.0\",\n    \"stylelint\": \"^8.0.0\",\n    \"stylelint-config-standard\": \"^17.0.0\",\n    \"stylelint-webpack-plugin\": \"^0.9.0\",\n    \"url-loader\": \"^0.6.2\",\n    \"webpack\": \"^3.4.1\",\n    \"webpack-bundle-analyzer\": \"^2.8.3\",\n    \"webpack-node-externals\": \"^1.6.0\"\n  }\n```\n\n\n. Ok, this combination works (my rollback solution):\n\"eslint\": \"^4.3.0\",\n    \"eslint-config-airbnb\": \"^15.1.0\",\n    \"eslint-loader\": \"^1.8.0\",\n    \"eslint-plugin-import\": \"^2.6.1\",\n    \"eslint-plugin-jsx-a11y\": \"^6.0.2\",\n    \"eslint-plugin-react\": \"^7.2.1\",. @jomasti Who reports it then? Is it React itself?. Opened up https://github.com/facebook/react/issues/11845.. ",
    "dzek69": "@ljharb it may be a weird code (I think dispatch won't ever change anyway if that's redux), but the discussion is about detecting the prop usage, which should be possible here, not about the quality of code.. IMO it should be still possible to do via static analysis. . it doesn't matter when as long getLocation is a method of Locations class and \"this.props\" is used inside.\nand again - it's not about something being an antipattern, but possibility of doing static analysis in this particular case. It's not my case :) I just joined the conversation.. I can confirm this.\nUsing this.anything.anyName inside componentDidUpdate causes anyName to be caught as prop without propType.\nEdit: @ljharb I can also confirm #2099 (commit 55e5fc132c5f508073190f859dc8133a1e50a1a3) fixes this issue.. I just realized that I could include my config. I'm glad it's fixed, thank you :) . Looks like PHPStorm is caching something even after upgrade. When I run the same from command line it works just fine. Sorry for confusion.. ",
    "AndiDog": "Now all three variants are documented.\n. ",
    "mqklin": "@yannickcr seems like it isn't fixed: \nreact/prop-types doesn't warn if I get props from nextProps\n\nIn this case there should be an Error about x as well.\n@Eschon did you resolve the issue?. Yes, today I'll do it. I have a warning with flow too. My code:\n```\ntype Props = {\n  obj: {\n    num: number, // < obj.num PropType is defined but prop is never used (react/no-unused-prop-types)\n  },\n};\n...\nstatic propTypes = {\n  obj: PropTypes.shape({\n    num: PropTypes.number, // < no error here\n  }),\n};\nprops: Props;\n...\nrender() {\n  const {obj: {num}} = this.props;\n  return {num};\n}\n```\nAnd my solution:\ntype Props = {\n  /* eslint-disable */\n  obj: {\n    num: number,\n  },\n  /* eslint-enable */\n};\nI can create a repro if it's necessary.. I have a warning with flow too. My code:\n```\ntype Props = {\n  obj: {\n    num: number, // < obj.num PropType is defined but prop is never used (react/no-unused-prop-types)\n  },\n};\n...\nstatic propTypes = {\n  obj: PropTypes.shape({\n    num: PropTypes.number, // < no error here\n  }),\n};\nprops: Props;\n...\nrender() {\n  const {obj: {num}} = this.props;\n  return {num};\n}\n```\nAnd my solution:\ntype Props = {\n  /* eslint-disable */\n  obj: {\n    num: number,\n  },\n  /* eslint-enable */\n};\nI can create a repro if it's necessary.. @ljharb there is already: https://github.com/yannickcr/eslint-plugin-react/issues/814. Has it been published?. @ljharb @dustinsoftware \nstill, doesn't work for me :(\nrepro: https://github.com/mqklin/eslint-proptypes-bug\n\n. @ljharb @dustinsoftware \nstill, doesn't work for me :(\nrepro: https://github.com/mqklin/eslint-proptypes-bug\n\n. @ljharb thank you very much! I missed this.. @ljharb thank you very much! I missed this.. @ljharb can't find it in NPM (last release 2 month ago). If I use the parens-new-line rule, I'm able to write 2 ways:\n{showSpinner && (\n  <Spinner\n    color=\"red\"\n  />\n)}\nAnd\n{showSpinner && \n  (\n    <Spinner\n      color=\"red\"\n    />\n  )\n}\n--fix rule fixes it to the second one, which is not I want. Is there is a possibility to fix only to the first one?. When this will be released?. Works perfect for me! Thanks!. duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/1751. @tarol why do you need to use state here? You don't need, hence the error is reasonable. . How is it possible? Eslint is a static linter, it doesn't make sense for it when to report error - before or after click. Oh, I see the problem. You mean first onClick that is commented in your code. . ",
    "yury-dymov": "I am facing same issue with very similar use-case\n``` jsx\nconst propTypes = {\n  clientVersion:  PropTypes.string,\n};\nconst defaultProps = {\n  clientVersion: null,\n};\nclass App extends Component {\n  constructor(props) {\n    super(props);\nthis.checkClientVersion = this.checkClientVersion.bind(this);\n\n}\ncheckClientVersion(props = this.props) {     // <-- might puzzle parser but still a valid use-case\n    const { clientVersion } = props;                   // <-- used!\n   <...>\n  }\nrender() {\n    <...>\n}\nApp.propTypes     = propTypes;\nApp.defaultProps  = defaultProps;\nexport default App;\n```\n. @ljharb, well, to me it looks very common\n``` jsx\n  componentDidMount() {\n    this.checkClientVersion();\n  }\ncomponentWillReceiveProps(nextProps) {\n    <...>\n    this.checkClientVersion(nextProps);\n  }\ncheckClientVersion(props = this.props) {\n    const { clientVersion } = props;\n    <...>\n  }\n```\nSo, basically it is helper method, which is called to do whatever, when props are provided/updated. Normally it is called with no parameters but for componentWillReceiveProps() I want to pass nextProps instead of current.\n. ",
    "Andreyco": "I got false positive connected to destruction assignment.\nCode preview\n``` jsx\nexport default class NavigationButton extends React.Component {\n  static propTypes = {\n    route: PropTypes.shape({\n      getBarTintColor: PropTypes.func.isRequired,\n    }).isRequired,\n  };\nrenderTitle() {\n    const { route } = this.props;\n    return TITLE;\n  }\n}\n```\nI get this false report, despite getBarTintColor is clearly used.\n'route.getBarTintColor' PropType is defined but prop is never used\n. @numbergames\nWarnings are valid, in this case.\n```js\nconst Component = ({ children: aNode }) => (\n   // ...\n);\n// is equivalent of this\nconst Component = (props) => {\n  const { children: aNode } = props;\n  // ...\n}\n```\nThus, all prop validation does apply to original prop names - not aliased. Same applies to defaultProps\nCorrect usage would be:\n```js\nimport React from 'react';\nconst Component = ({ children: aNode }) => (\n  \n    {aNode}\n  \n);\nComponent.defaultProps = {\n  children: null,\n};\nComponent.propTypes = {\n  children: React.PropTypes.node,\n};\n```. I got false positive connected to destruction assignment.\nCode preview\n``` jsx\nexport default class NavigationButton extends React.Component {\n  static propTypes = {\n    route: PropTypes.shape({\n      getBarTintColor: PropTypes.func.isRequired,\n    }).isRequired,\n  };\nrenderTitle() {\n    const { route } = this.props;\n    return TITLE;\n  }\n}\n```\nI get this false report, despite getBarTintColor is clearly used.\n'route.getBarTintColor' PropType is defined but prop is never used\n. ",
    "benfletcher": "Sorry to pile on, but I believe this is one more unique example of inaccurate triggering of the when props are destructured and reassigned.\n```\nimport React from 'react';\nconst Component = ({ children: aNode }) => (\n  \n    {aNode}\n  \n);\nComponent.defaultProps = {\n  aNode: null,\n};\nComponent.propTypes = {\n  aNode: React.PropTypes.node,\n};\n``\nThrows two errors:'Children' is missing in props validation at ...'aNode' PropType is defined but never used at ...`. ",
    "mike-robertson": "Here's an even weirder bug that may be related to all this. I'm using flow and this keeps coming up:\n```js\nonInputChange({ target: { value: inputValue } }: { target: { value: string } }) {\n  //                                                           ^^^^\n  // target.value PropType is defined but prop is never used (react/no-unused-prop-types)\n    this.setState({\n      inputValue,\n      inputWidth: Select.defaultInputWidth + (7 * inputValue.length),\n    });\n  }\n```\nI have no idea why this would think there are props here. It's inside a class component; it's not even related to props, I'm just destructuring an event object.. ",
    "anshulsahni": "My code in react component\nconst bolusInsulin = find(props.insulins, { value: getIdFromUrl(props.bolusInsulin) }) || {};\nIn PropTypes\nGlucoseSettings.propTypes = {\n  insulinRegimen: PropTypes.string,\n  bolusInsulin: PropTypes.string,\n  insulins: PropTypes.array,\n};\nstill the error reads\n72:17  error  'bolusInsulin' PropType is defined but prop is never used  react/no-unused-prop-types\n73:13  error  'insulins' PropType is defined but prop is never used      react/no-unused-prop-types. @ljharb \nthis is the full component code, certain pieces of code are hidden\n```\nimport React, { PropTypes } from 'react';\nimport pick from 'lodash/pick';\nimport find from 'lodash/find';\nimport { getIdFromUrl } from ...\nimport CorrectionalInsulin from ...\nimport InsulinRegimen from ...\nimport CarbCounting from ...\nimport LimitsEdit from ...\nimport '../../styles/index.scss';\nconst correctionalInsulinProps = [\n...\n];\nconst limitsEditProps = [\n...\n];\nconst insulinRegimenProps = [\n....\n];\nconst GlucoseSettings = (props) => {\n  const renderCorrectional = () => (\n    \n  );\nconst renderCarbCounting = () => {\n    const bolusInsulin = find(props.insulins, { value: getIdFromUrl(props.bolusInsulin) }) || {};\n    return (\n      \n    );\n  };\nreturn (\n    \n\n\n      {props.insulinRegimen.includes('carb_counting') ? renderCarbCounting() : null}\n      {props.insulinRegimen.includes('mixed') ? null : renderCorrectional()}\n</div>\n\n);\n};\nGlucoseSettings.propTypes = {\n  insulinRegimen: PropTypes.string,\n  bolusInsulin: PropTypes.string,\n  insulins: PropTypes.array,\n};\nGlucoseSettings.defaultProps = {\n  insulinRegimen: '',\n  insulins: [],\n  bolusInsulin: '',\n};\nexport default GlucoseSettings;\n```\nand the error reads\n72:17  error  'bolusInsulin' PropType is defined but prop is never used  react/no-unused-prop-types\n73:13  error  'insulins' PropType is defined but prop is never used      react/no-unused-prop-types. @ljharb any update on this ?. ",
    "robguy21": "Just adding my snippet here...\n```js\ntype HeaderPropTypes = {\n  actions: { unAuth: () => any }, // error  'actions.unAuth' PropType is defined but prop is never used  react/no-unused-prop-types\n};\nconst Header = ({ actions }: HeaderPropTypes): React$Element<*> => (\n  \n\n        Log Out\n      \n\n);\nconst mapDispatchToProps = (dispatch: () => any): {} => ({\n  actions: bindActionCreators(Actions, dispatch),\n});\n```\nFollowing @mqklin my solution was to disable that specific rule...\njs\ntype HeaderPropTypes = {\n  /* eslint-disable react/no-unused-prop-types */\n  actions: { unAuth: () => any },\n  /* eslint-enable react/no-unused-prop-types */\n};. Leaving my reduced example here...\n```\ntype PropsShape = {\n  // error  'data' PropType is defined but prop is never used  react/no-unused-prop-types\n  data: Array<*>,\n}\nclass List extends React.Component {\n  // .. some stuff up here that does not use this.props.data\n  render() {\n    const that = this;\n    return (\n      \n        {\n          that.props.data.map(v => {v.id}\n        }\n      \n    );\n  }\n}\n```\n(Above is just for demo purposes.)\nIf anyone could point me in the direction of solving this issue I'd love to get involved, use this eslint extensively and might be time to at least try and help out where I can.. Excuse the code below but it's throwing an error that is meant to be resolved in #1341 \njsx\n<SomeComponent\n  onDatesChange={\n    ({\n      startDate,\n      endDate,\n    }: {\n      startDate: string, // error  'startDate' PropType is defined but prop is never used  react/no-unused-prop-types\n      endDate: string, // error  'endDate' PropType is defined but prop is never used    react/no-unused-prop-types\n    }): void => {\n      this.setState({ startDate, endDate });\n      this.datepickerChanged({\n        start: startDate,\n        end: endDate,\n      });\n      return null;\n    }\n  }\n</SomeComponent>\npackage.json\n\"eslint-plugin-flowtype\": \"^2.42.0\",\n\"babel-plugin-flow-react-proptypes\": \"^17.1.0\",\n\"babel-eslint\": \"^8.1.1\",\n\"eslint\": \"^4.16.0\",\n\"eslint-plugin-react\": \"^7.6.1\",\n\"flow-bin\": \"^0.64.0\",\n.eslintrc\n\"react/no-unused-prop-types\": [2, { skipShapeProps: true }],\nRequesting for this issue to be re-opened- let me know if I need to give more info.\n. ",
    "leonardovillela": "The flow case is fixed? Exists other issue for it?. ",
    "kouhin": "Same problem.\nCannot read property 'toLowerCase' of undefined\nTypeError: Cannot read property 'toLowerCase' of undefined\n    at EventEmitter.JSXAttribute (/Users/myabc/git/myproj/node_modules/eslint-plugin-react/lib/rules/jsx-no-target-blank.js:28:60)\n    at emitOne (events.js:101:20)\n    at EventEmitter.emit (events.js:188:7)\n    at NodeEventGenerator.enterNode (/Users/myabc/git/myproj/node_modules/eslint/lib/util/node-event-generator.js:40:22)\n    at CodePathAnalyzer.enterNode (/Users/myabc/git/myproj/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)\n    at CommentEventGenerator.enterNode (/Users/myabc/git/myproj/node_modules/eslint/lib/util/comment-event-generator.js:97:23)\n    at Controller.enter (/Users/myabc/git/myproj/node_modules/eslint/lib/eslint.js:918:36)\n    at Controller.__execute (/Users/myabc/git/myproj/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/Users/myabc/git/myproj/node_modules/estraverse/estraverse.js:501:28)\n    at Controller.Traverser.controller.traverse (/Users/myabc/git/myproj/node_modules/eslint/lib/util/traverser.js:36:33)\nVersion:\n\"eslint\": \"^3.3.0\",\n    \"eslint-config-airbnb\": \"^11.1.0\",\n    \"eslint-plugin-babel\": \"^3.3.0\",\n    \"eslint-plugin-import\": \"^1.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^2.2.2\",\n    \"eslint-plugin-react\": \"^6.2.1\",\n. I can't help myself to create this repository https://github.com/kouhin/eslint-config-airbnb-deps\nnpm install eslint-config-airbnb-deps --save-dev\nCurrently I'm using npm install eslint-config-airbnb-deps@10.0.2 --save-dev\nEverything works well. \ud83d\ude09\n. @ljharb Thanks. I will try to fix the required version. \nThis error occurs for every CI builds just from today, so I updated the deps by npm-check-updates('ncu -a -u'), and we got the style-prop-object error. \n. Sorry that I've made a mistake. Maybe ncu haven't updated all the packages.\nI'll fix the version and try again. \n. @ljharb @yannickcr \nError pattern: \n``` javascript\nexport class CustomLayout extends React.Component {\n  static propTypes = {\n    children: React.PropTypes.node,\n    elementType: React.PropTypes.oneOf(['ul', 'div']),\n  };\nrender() {\n    const { children, ...restProps } = this.props;\n    return React.createElement(\n      this.props.elementType,\n      {\n       ref: node => (this.dom = node),\n        ...restProps,\n      },\n      this.props.children\n    );\n  }\n}\n```\n. @ljharb @yannickcr \nError pattern: \n``` javascript\nexport class CustomLayout extends React.Component {\n  static propTypes = {\n    children: React.PropTypes.node,\n    elementType: React.PropTypes.oneOf(['ul', 'div']),\n  };\nrender() {\n    const { children, ...restProps } = this.props;\n    return React.createElement(\n      this.props.elementType,\n      {\n       ref: node => (this.dom = node),\n        ...restProps,\n      },\n      this.props.children\n    );\n  }\n}\n``\n. @ljharb Confirmed with 6.4.1! Thanks\n. @ljharb Thank you. Actually, we are usingstatic get defaultProps()in our project in order to avoid memory leak. \nHowever, besides performance problem of this pattern (maybe anti-pattern), I thinkstatic gettersshould be treated asstaticorstatic getters` rather than common getters.. ",
    "alpertuna": "+1\n. +1\n. ",
    "sgronblo": "Scratch that... I was looking at the wrong line.\n. Scratch that... I was looking at the wrong line.\n. ",
    "daltones": "Thanks!\n. Thanks!\n. I like the idea. I think that's not about breaking the code or not. It's about a convention (like a good practice) in the project. It's up to you enable this rule.\nWhen the whole project respects immutability for all data in props or state, we can say that it's a good thing to use PureComponent, so we can use this rule.. Okay, but what is the point of the first problem being intentional when document.createElement could be a trivial false positive?\nWhy can't it work same way as other rules that use pragma setting to verify React.(createClass|(Pure)?Component)?. Okay, but what is the point of the first problem being intentional when document.createElement could be a trivial false positive?\nWhy can't it work same way as other rules that use pragma setting to verify React.(createClass|(Pure)?Component)?. Oh, right, I missed something. Fixing the second problem would not warn about document.createElement('img').\nBut maybe first problem could turn into another issue to prevent some edge cases like objectNothingAboutReact.createElement('img', {foo: bar}, 'baz').\nThanks!. Oh, right, I missed something. Fixing the second problem would not warn about document.createElement('img').\nBut maybe first problem could turn into another issue to prevent some edge cases like objectNothingAboutReact.createElement('img', {foo: bar}, 'baz').\nThanks!. ",
    "webmato": "@ljharb Thank you! I love this, it is so easy with ES6 :-)\n. ",
    "eelyafi": "Let's say we have \"\\t\" and we want to replace \"\\t\" with 4 spaces. In order to do so we have to run fixer.replace(). Unfortunately fixer.replace() won't let you increase number of characters. \nBasically, if there are two spaces it won't replace them with more than two characters. On the other hand fixer won't let you run more than one command. Because of that there is no way to replace spaces with empty string first and then add needed amount of spacing.\n. Let's say we have \"\\t\" and we want to replace \"\\t\" with 4 spaces. In order to do so we have to run fixer.replace(). Unfortunately fixer.replace() won't let you increase number of characters. \nBasically, if there are two spaces it won't replace them with more than two characters. On the other hand fixer won't let you run more than one command. Because of that there is no way to replace spaces with empty string first and then add needed amount of spacing.\n. @ljharb, after additional debugging I found that replaceTextRange will let you replace text. The actual reason why it won't replace one type of spacing with another is in getNodeIndent function. \nThe regExp in this function will look for spaces or tabs depending on the options passed in. Thus gotten variable will be always zero if file uses spaces and tabs are passed as an option. \n. @ljharb, after additional debugging I found that replaceTextRange will let you replace text. The actual reason why it won't replace one type of spacing with another is in getNodeIndent function. \nThe regExp in this function will look for spaces or tabs depending on the options passed in. Thus gotten variable will be always zero if file uses spaces and tabs are passed as an option. \n. Ping :) \n. Ping :) \n. In reality many existing autofixers are far away from perfection. This autofixer will cover most of the cases and won't break code.\n. In reality many existing autofixers are far away from perfection. This autofixer will cover most of the cases and won't break code.\n. Addressed the comments\n. Rebased\n. @ljharb is it good to merge ?\n. @lencioni I updated docs and created an issue https://github.com/yannickcr/eslint-plugin-react/issues/865\n. @ljharb @lencioni ping\n. @ljharb I've added tests for tabs\n. sure\n. ",
    "1999": "Thanks, I missed this.\n. ",
    "TrustNik": "@ljharb could you please explain why? If I understand correctly state is initialized in the constructor, so it can't be mutated. \n. @ljharb could you please explain why? If I understand correctly state is initialized in the constructor, so it can't be mutated. \n. @ljharb I see. Thanks for clarification.\n. ",
    "ivosabev": "You should never call setState from the constructor as it brings a lot of function calls that you don't need for a component that hasn't rendered yet. It may even potentially cause double rendering. \nThe correct linting rule would be to remove the warning for this.state mutation and add a warning for using setState only when used inside the constructor.. Except for setting state in the constructor. This behavior is against the official docs and some people think they should use the setState inside the constructor, when they shouldn't.\nhttps://facebook.github.io/react/docs/state-and-lifecycle.html#do-not-modify-state-directly. ",
    "ryndshn": "was this ever fixed? i'm still receiving a warning when modifying this.state in the constructor. . was this ever fixed? i'm still receiving a warning when modifying this.state in the constructor. . ",
    "mturley": "Never mind-- I was doing something dumb and reassigning my propTypes object wrongly when wrapping a higher order component. With that removed, spread syntax works fine in propTypes now.. ",
    "pfhayes": "How do I check that? I assume it is whatever the default is because I haven't configured anything like that to my knowledge\n. I don't believe I have configured eslint to use sourceType modules because I do not know how to do that. I am also not using 'use strict'\n. Yes, the code is being compiled with babel. The example provided has no imports/exports or class declarations (the example provided was the entire contents of the file that introduced the error)\nI tried to reproduce this error recently and was unable to. I'm not sure what the cause was - perhaps an error in a dependent module that was fixed by an npm install. i'm fine closing this\n. @ljharb sure thing - let me know if this is what you had in mind\n. I've updated this PR to reduce its scope.\nOriginally I was hoping to catch cases like \n<p>\n  <a href=\"https://google.com>link 1</a>\n  <a href=\"https://google.com>link 2</a>\n</p>\nthe original draft of this rule searched for cases like that. Ultimately there were just too many false positives (such as a's, span's, button's that used CSS to distinguish between them).\nBy reducing the scope to just search for\n<p>\n  Here is a\n  <a href=\"https://google.com>link</a>\n</p>\nthe rule became much more useful and has very few false positives. I ran this on about 60k lines of React code and the results were\nLegitimate errors caught: 35\nNot an error, but original was ambiguous and could be improved: 17\nFalse Positives: 2\nThe majority of the error cases were a's, code's, strong's appearing inside paragraphs. The majority of the ambiguous cases were checkboxes appearing next to text. The false positives were  that were separately styled with CSS\nThis suggests to me this is a useful rule and I submit it for your consideration\ncc @ljharb . I've updated this PR to reduce its scope.\nOriginally I was hoping to catch cases like \n<p>\n  <a href=\"https://google.com>link 1</a>\n  <a href=\"https://google.com>link 2</a>\n</p>\nthe original draft of this rule searched for cases like that. Ultimately there were just too many false positives (such as a's, span's, button's that used CSS to distinguish between them).\nBy reducing the scope to just search for\n<p>\n  Here is a\n  <a href=\"https://google.com>link</a>\n</p>\nthe rule became much more useful and has very few false positives. I ran this on about 60k lines of React code and the results were\nLegitimate errors caught: 35\nNot an error, but original was ambiguous and could be improved: 17\nFalse Positives: 2\nThe majority of the error cases were a's, code's, strong's appearing inside paragraphs. The majority of the ambiguous cases were checkboxes appearing next to text. The false positives were  that were separately styled with CSS\nThis suggests to me this is a useful rule and I submit it for your consideration\ncc @ljharb . comments addressed @ljharb . This appears to be a duplicate of https://github.com/yannickcr/eslint-plugin-react/issues/1559. Addresses https://github.com/yannickcr/eslint-plugin-react/issues/1604. Any updates on this? This bug is still present in 7.6.1. Any updates on this? This bug is still present in 7.6.1. @slaua can you supply an example that reproduces the issue? I have not witnessed this. While I would love to, to be clear this was the state of the codebase when I checked it out. I don't really know what caused the error or how to reproduce, but this did fix the issue and seems worth checking in to resolve the issue for future developers. While I would love to, to be clear this was the state of the codebase when I checked it out. I don't really know what caused the error or how to reproduce, but this did fix the issue and seems worth checking in to resolve the issue for future developers. I observed this when running eslint-plugin-react master on our company's codebase, and the actual case that causes this was hard to track down. I observed this when running eslint-plugin-react master on our company's codebase, and the actual case that causes this was hard to track down. Thanks, I confirmed the trigger on my end was object destructuring in function params and added a test. Thanks, I confirmed the trigger on my end was object destructuring in function params and added a test. Thanks, I added some docs here: https://github.com/yannickcr/eslint-plugin-react/pull/1665. Thanks, I added some docs here: https://github.com/yannickcr/eslint-plugin-react/pull/1665. Addressed in https://github.com/yannickcr/eslint-plugin-react/pull/1666. Addressed in https://github.com/yannickcr/eslint-plugin-react/pull/1666. the test on line 70 should cover that case\n. Okay - I can remove this. I copied this from another test and didn't know it could be removed\n. Hm, I tried removing it and now all the tests fail with \"Parsing error: Unexpected token <\"\nIs that correct? how is the JSX compiled if babel-eslint is not used?\n. Is that something I can do? I tried setting parser: 'jsx' but that didn't work \n. great thanks! the latest version should use the correct parser\n. Yes, you are right, I will fix tha\n. I added a similar test for line-aligned and tag-aligned\n. I omitted { because it's not actually possible to include this character inside a tag - this character begins a curly-brace section and is a syntax error. I could include it here for completeness but AFAICT would have no effect.\nThis does raise a good point that < is also extraneous, I should remove that.\nHere's an example where quotes can bite you:\njsx\n<Foo\n  a=\"b\"\n  c=\"d\">\n  e=\"f\"\nPerhaps you get into this state by sorting props alphabetically (this is where it has happened to me). I'm happy to update the documentation to include this example as well\n. I've added examples for all the cases to the documentation.\n. good call, I'll make that more explicit\n. I'm happy to change, but it looked like in this project Boolean (12 occurrences) was preferred over !! (0 occurrences)\n. done\n. I copied how the other static propTypes were declared in this file. upon closer inspection, this file is inconsistent in how it declares static proptypes. I see three different types:\nstatic get propTypes() {\nstatic propTypes = {\nstatic propTypes: {\ndo you think I should introduce a fourth type? i'm also happy to consolidate them but I think that is outside the scope of this PR\n. sure thing - I've added that as an additional case\n. fixed!\n. I think as you pointed out in the original issue, the intent is ambiguous so autofixing may not be feasible.\nIf we were to autofix, replacing with the comment form would maintain the semantic without too much disruption (though would perhaps be less aesthetically pleasing)\nI would advocate for no automatic action since, in my experience, the developer most often intended to add a space, though I could be convinced otherwise. It would be an error because it would render as nested1nested2 which is unlikely to be the developers intent\nWe certainly could just use the complete list of inline elements here: https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\nCertainly it would not be feasible to capture changes to display by CSS. I wouldn't be overly concerned about it because...\n\nIf the developer uses CSS to make a block element inline, then the rule will not catch this. However without this rule they are equally likely not to catch this. I would also expect that, since the developer is already modifying the default layout, they are likely to be visually inspecting the results manually to look for inconsistencies\nIf the developer uses CSS to make an inline element into a block, then the rule may error unnecessarily. However the error can be silenced by adding either an explicit space or a comment form, as above.. A fair concern - here's one that I found: https://www.npmjs.com/package/block-elements (and it's less popular cousin https://www.npmjs.com/package/inline-elements)\n\nWorth noting that React, when tackling a similar problem, opted to just hardcode a list of relevant tags\nhttps://github.com/facebook/react/blob/17aa4d4682aa5c6fdbd3fb0d65e2d69769fe2d61/packages/react-dom/src/client/validateDOMNesting.js#L29\nAnother alternative would be not to do any special-casing on tag type and treat any adjacent tags as problematic, though I suspect that would get annoying pretty fast with adjacent divs.\nAnother concern - custom React classes for which it would be infeasible to detect the display type statically. This leads me to believe the rule should only report cases where we know the tag is inline - I think this covers a lot of common cases (like  tags in text). Unfortunately, they are not the same use case\nNote: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.. it is related in the sense that I wanted to remove extraneous whitespace from the test cases, so that the loc test assertions were more predictable and were not affected by the indentation of the surrounding code. I'm not positive I understand, but I updated this to make it clearer. the indentation is still flush with column 1 so that the column counts are fixed, but the code samples now begin with a newline which may help with readability. ",
    "EdwardDrapkin": "Here's one way to replicate it:\nfoo(bar) {\n    return <bar.baz className=\"error goes here\" />;\n}\n. How about forbid and forbidOnDOM?  forbidOnDOM would be an array of strings just like forbid except that it's empty by default.  I can implement a second, clearer error message this way, but I'd have to rework the way the documentation is written a fair bit.  Is that alright with you?\nIf that API is okay, I'll get this PR updated with new documentation, the new API, and tests tomorrow.\n. How about forbid and forbidOnDOM?  forbidOnDOM would be an array of strings just like forbid except that it's empty by default.  I can implement a second, clearer error message this way, but I'd have to rework the way the documentation is written a fair bit.  Is that alright with you?\nIf that API is okay, I'll get this PR updated with new documentation, the new API, and tests tomorrow.\n. I think the flexibility is the same: \n{\n  \"forbid\":  [\"className\", \"style\"], \n  \"forbidOnDOM\": [\"style\"] \n }\nwould achieve the same thing, no?\nI think that's easier for users to manage than:  `\n{\n     \"forbid\": [ \"style\", { \"className\": { \"forbidOnDOM\": true } } ]\n   }\nOr:\n{\n     \"forbid\": [ \"style\", { \"property\": \"className\", \"forbidOnDOM\": true } ]\n   }\n(or any other permutation of nesting an object inside the array of string that I can imagine)\nIt's a completely subjective decision and ultimately it's your code, so I'll do what you think is best, but IMO the first example is the easiest to read if I'm a hypothetical engineer and I'm reading someone else's .eslintrc and I'm not necessarily familiar with this particular plugin. \n. I think the flexibility is the same: \n{\n  \"forbid\":  [\"className\", \"style\"], \n  \"forbidOnDOM\": [\"style\"] \n }\nwould achieve the same thing, no?\nI think that's easier for users to manage than:  `\n{\n     \"forbid\": [ \"style\", { \"className\": { \"forbidOnDOM\": true } } ]\n   }\nOr:\n{\n     \"forbid\": [ \"style\", { \"property\": \"className\", \"forbidOnDOM\": true } ]\n   }\n(or any other permutation of nesting an object inside the array of string that I can imagine)\nIt's a completely subjective decision and ultimately it's your code, so I'll do what you think is best, but IMO the first example is the easiest to read if I'm a hypothetical engineer and I'm reading someone else's .eslintrc and I'm not necessarily familiar with this particular plugin. \n. Ahhhhh, I wasn't even considering that!  You make excellent points.\nPerhaps we could also take this opportunity to allow people the flexibility you imagine?  I have two ideas.\nFirst, we could allow passing custom validator functions like:\n{\n    \"property\": \"style\",\n    \"validator\": \"no-dom-components\"|\"only-dom-components\"|\"all-components\"|function \n  }\nwhere the function is just (componentName:string) => boolean that the plugin would use to choose whether or not to apply the filters to the component?  Alternatively, I could do (componentName:string, property:string) => boolean and expose the validation step itself to the user, but I'm having trouble imagining a case where that more useful than the former. \nThis would be pretty simple to implement, and is probably the most flexible approach, but not exactly user friendly because it's too complex for what I believe is likely to be the common use case...\nSo maybe, instead we just allow a regular expression to be passed?  \n{\n    \"property\": \"style\",\n    \"isValid\": \"^[A-Z]\" \n  }\nThis is probably the easiest for users to use and covers like 99% of the cases people would want, but would require documentation to tell people to use something like isValid: \".\" to match all components' names, or a special case.\nWhat do you think?  I'm not sure what to name the config options in either case to be the most user friendly.\n. Ahhhhh, I wasn't even considering that!  You make excellent points.\nPerhaps we could also take this opportunity to allow people the flexibility you imagine?  I have two ideas.\nFirst, we could allow passing custom validator functions like:\n{\n    \"property\": \"style\",\n    \"validator\": \"no-dom-components\"|\"only-dom-components\"|\"all-components\"|function \n  }\nwhere the function is just (componentName:string) => boolean that the plugin would use to choose whether or not to apply the filters to the component?  Alternatively, I could do (componentName:string, property:string) => boolean and expose the validation step itself to the user, but I'm having trouble imagining a case where that more useful than the former. \nThis would be pretty simple to implement, and is probably the most flexible approach, but not exactly user friendly because it's too complex for what I believe is likely to be the common use case...\nSo maybe, instead we just allow a regular expression to be passed?  \n{\n    \"property\": \"style\",\n    \"isValid\": \"^[A-Z]\" \n  }\nThis is probably the easiest for users to use and covers like 99% of the cases people would want, but would require documentation to tell people to use something like isValid: \".\" to match all components' names, or a special case.\nWhat do you think?  I'm not sure what to name the config options in either case to be the most user friendly.\n. Can't you use a JS file as an .eslintrc.js?  It's irrelevant anyway...\nHow does this look?\n{\n   \"property\": <string>,\n   \"include\": \"React\"|\"DOM\"|\"Both\"|<array> \n }\nIs include a good param name?\n. Can't you use a JS file as an .eslintrc.js?  It's irrelevant anyway...\nHow does this look?\n{\n   \"property\": <string>,\n   \"include\": \"React\"|\"DOM\"|\"Both\"|<array> \n }\nIs include a good param name?\n. Perfect.  I'll get this PR updated sometime in the next 24-48 hours with these changes!\n. Perfect.  I'll get this PR updated sometime in the next 24-48 hours with these changes!\n. Okay, the football sucked, so I went ahead and got to work on this.\nI did some extra work that we hadn't discussed, but I was adding examples to the documentation and surfaced some cases I wanted to address.\nI added defaultAllowOnComponents and defaultAllowOnDOM as top level config options to do exactly what they say.  I also allowed a white allow alongside the blacklist forbid you asked for, because I imagined a case where someone was okay with font icon i tags having classNames but everything else going through something like css modules.\nI updated the documentation and I think it's okay, but please do read and update it if you feel it's lacking.  Or tell me and I gladly will!\nI also added more test cases so Istanbul reports 100% coverage for me.\nLet me know if there's any issues this time.\nThanks so much for your time helping me get this working (and for the rule in the first place)!\n. Okay, the football sucked, so I went ahead and got to work on this.\nI did some extra work that we hadn't discussed, but I was adding examples to the documentation and surfaced some cases I wanted to address.\nI added defaultAllowOnComponents and defaultAllowOnDOM as top level config options to do exactly what they say.  I also allowed a white allow alongside the blacklist forbid you asked for, because I imagined a case where someone was okay with font icon i tags having classNames but everything else going through something like css modules.\nI updated the documentation and I think it's okay, but please do read and update it if you feel it's lacking.  Or tell me and I gladly will!\nI also added more test cases so Istanbul reports 100% coverage for me.\nLet me know if there's any issues this time.\nThanks so much for your time helping me get this working (and for the rule in the first place)!\n. I added some more test cases, up to 21 now.  I'm having trouble coming up with cases that aren't already tested.\n. I added some more test cases, up to 21 now.  I'm having trouble coming up with cases that aren't already tested.\n. I think I addressed everything from your notes - and I'll make a separate pull request to add React.createElement support  - but is there anything else that needs to be done now?\n. I'm sorry, I've been really sick lately fighting off MRSA (yikes!) and I won't have time to get to this.  You should definitely go ahead.\n. yeah, there's an outer config option for specifying the default behavior and an option for overloading the default, but i wasn't quite sure how to make that clear in the documentation other than in the examples... \n. okay, I can change it... I just didn't wanna mess with what you already had \n. oops is all i got\n. okay i was a little excited\n. yep, done\n. It swaps between \"$tag Components\" and \"$tag DOM nodes\" now.\n. Wouldn't that mean the entire plugin would have to switch into whitelist mode?  Would that be useful to anyone?\n. I only added one total test case for each. I figure if one test case works for all three, all test cases should, because we're only getting at the JSX tags inside the (render) function body, right?  I can add more if you think they're necessary.\n. If you want me to, that's cool and I'm down to learn how, but I don't know... so can you point me in the right direction if there's another plugin I might be able to read?  If not, I'll just RTFM I guess.\nAnd do you have any problem if I do it in a separate pull request?  It seems outside the scope of this one and I might not have time to get to it until this upcoming weekend.\n. Hmm, you may have opened a can of worms, at first glance there are several other plugins that do things with props that rely on JSXExpression too... no-duplicate-props, no-unknown-property, sort-props, maybe more....\nWhat is the best way to go forward if this is an issue that affects multiple rules?  Open a new issue and then read each rule one by one and make sure they're not affected?\n. ",
    "xeodou": "Got the exactly the same issue here , seems @pfhayes 's PR been closed, but  issue still exist. So how do I solve this @lencioni  ?\n. Sure @ljharb  i'll do.\n. Hi @ljharb  I just found the use case and create pull request, please feel free to make some comments.\n. hi @ljharb  I just made some changes, Are there what you expect ? \n. Cool. Thanks @ljharb and @EvNaverniouk \n. Hi @ljharb   When can you merge the pull request ?\n. Hi @ljharb @EvNaverniouk , Do we have any other issue here for merge the PR ?\n. Let me check the test.\n. Sure.\n. By the way, SFC is short for self-closing component right ?\n. I think i just forget remove the line options: [{forbid: ['style', 'foo']}], it shouldn't relate to forbid option.\n. ah, Thanks. I know 'stateless functional component' , just have no idea what does SFC meaning. Thanks for point out\n. ",
    "ButuzGOL": "Config: 'react/no-unused-prop-types': 1,\nExample:\n```\nimport React, { PropTypes, Component } from 'react';\nexport default class Checkbox extends Component {\n  constructor() {\n    super();\n    this.a = 'a';\n  }\nrender() {\n    const { container, ...props } = this.props;\n    const { category, icon } = props;\nreturn (\n  <div>\n    {container} {category} {icon}\n  </div>\n);\n\n}\n}\nCheckbox.propTypes = {\n  container: PropTypes.string,\n  category: PropTypes.string,\n  icon: PropTypes.bool,\n};\n```\nOutput: \nsrc/scripts/Checkbox.js\n24:13  warning  'category' PropType is defined but prop is never used  react/no-unused-prop-types\n25:9   warning  'icon' PropType is defined but prop is never used      react/no-unused-prop-types\n. Config: 'react/no-unused-prop-types': 1,\nExample:\n```\nimport React, { PropTypes, Component } from 'react';\nexport default class Checkbox extends Component {\n  constructor() {\n    super();\n    this.a = 'a';\n  }\nrender() {\n    const { container, ...props } = this.props;\n    const { category, icon } = props;\nreturn (\n  <div>\n    {container} {category} {icon}\n  </div>\n);\n\n}\n}\nCheckbox.propTypes = {\n  container: PropTypes.string,\n  category: PropTypes.string,\n  icon: PropTypes.bool,\n};\n```\nOutput: \nsrc/scripts/Checkbox.js\n24:13  warning  'category' PropType is defined but prop is never used  react/no-unused-prop-types\n25:9   warning  'icon' PropType is defined but prop is never used      react/no-unused-prop-types\n. ",
    "rauchg": "@ljharb I'm curious what the downsides are to not escaping '? Makes writing stuff pretty difficult, but I'm sure there's a good reason. ",
    "brandonsturgeon": "Looks like there was a sneaky .eslintrc.js in the base directory of this project. \n. Looks like there was a sneaky .eslintrc.js in the base directory of this project. \n. Yeah, this problem was definitely due to some antipatterns and mis-aligned version numbers. \nThanks!\n. ",
    "alenia": "Is this still unsupported?. Is this still unsupported?. ",
    "gluons": "Atom Linter member (AtomLinter/linter-eslint#514) say\n\nIf you are using a global eslint, you will need to install eslint configs and plugins globally as well.\n\nHowever, it's not critical problem. I still use it with Atom Linter. \ud83e\udd37\n. ",
    "mherodev": "Seeing this when trying to npm install eslint -g and then npm install eslint-plugin-react -g\nI suppose I can just install the project to avoid Atom's errors, but often times I am pulling a project not to run it, but to browse the source. It'd be nice if this didn't fail so Atom wouldn't yell at me for not running npm install on every project I clone.. The issue is that almost every repo these days that I'm pulling has an eslintrc file, so Atom tries to use it and fails. I suppose alternatively I could delete these configs when I'm browsing source but not feeling like installing.. Sorry, that's what I referenced above:\n\nI suppose I can just install the project to avoid Atom's errors, but often times I am pulling a project not to run it, but to browse the source. It'd be nice if this didn't fail so Atom wouldn't yell at me for not running npm install on every project I clone.\n\n. ",
    "linxiaowu66": "@yannickcr  It is my pleasure.\n. ",
    "joshjg": "Similarly, here url is marked as unused.\n``` js\nclass PhotoList extends React.Component {\n  static propTypes = {\n    photos: React.PropTypes.arrayOf(React.PropTypes.shape({\n      id: React.PropTypes.number,\n      url: React.PropTypes.string,\n      caption: React.PropTypes.string,\n    })),\n  }\nrender = () => (\n    \n      {this.props.photos.map(photo => {photo.url})}\n    \n  )\n}\n```\n. ",
    "larsvinter": "And here, \"id\" and \"onSelectIndex\" is marked as unused.\n``` javascript\nimport React from 'react';\nimport styles from './styles.css';\nfunction PlaylistItem(props) {\n  const onClick = () => {\n    props.onSelectIndex(props.id);\n  };\nconst className = () => {\n    if (props.loadedA) return styles.playlistItemLoadedA;\n    if (props.loadedB) return styles.playlistItemLoadedB;\n    return styles.playlistItem;\n  };\nreturn (\n    \n{props.item.time}\n\n\n{props.item.artist}\n{props.item.title} { props.item.version ? ({props.item.version}) : null }\n\n\n  );\n}\nPlaylistItem.propTypes = {\n  item: React.PropTypes.object,\n  loadedA: React.PropTypes.bool,\n  loadedB: React.PropTypes.bool,\n  id: React.PropTypes.number,\n  onSelectIndex: React.PropTypes.func,\n};\nexport default PlaylistItem;\n```\n. ",
    "luokuning": "Same issue :-)\n. ",
    "Carlows": "Same issue, is there any other rule that works for this?\njsx\n<Comp>\n  {something}\n</Comp>\n. ",
    "Kronuz": "Is there currently no rule to support this?. ",
    "prewk": "Awesome! Will you publish sometime today?. Awesome! Will you publish sometime today?. ",
    "wmzy": "The problem happened on v6.3.0 too.\nbash\nCannot read property 'length' of undefined\nTypeError: Cannot read property 'length' of undefined\n    at Object.utils.findReturnStatement (/home/zlt/project/mae-fe/node_modules/eslint-plugin-react/lib/util/Components.js:281:35)\n    at Object.utils.isReturningJSX (/home/zlt/project/mae-fe/node_modules/eslint-plugin-react/lib/util/Components.js:233:24)\n    at EventEmitter.CallExpression (/home/zlt/project/mae-fe/node_modules/eslint-plugin-react/lib/rules/jsx-no-bind.js:62:23)\n    at emitOne (events.js:95:20)\n    at EventEmitter.emit (events.js:182:7)\n    at NodeEventGenerator.enterNode (/home/zlt/project/mae-fe/node_modules/eslint/lib/util/node-event-generator.js:40:22)\n    at CodePathAnalyzer.enterNode (/home/zlt/project/mae-fe/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)\n    at CommentEventGenerator.enterNode (/home/zlt/project/mae-fe/node_modules/eslint/lib/util/comment-event-generator.js:97:23)\n    at Controller.traverser.traverse.enter (/home/zlt/project/mae-fe/node_modules/eslint/lib/eslint.js:903:36)\n    at Controller.__execute (/home/zlt/project/mae-fe/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Controller.traverse (/home/zlt/project/mae-fe/node_modules/eslint/node_modules/estraverse/estraverse.js:501:28)\n. ",
    "rhalff": "Have a similar problem in a different context, when this.props is destructured it does not detect the property.\n``` javascript\nimport React, { Component, PropTypes } from 'react'\nexport default class MenuSlice extends Component {\n  static propTypes = {\n    positions: PropTypes.shape({\n      IconX: PropTypes.number.isRequired,\n    }).isRequired\n  }\nrenderLabel() {\n    const { positions } = this.props\nconst sliceIconTextOptions = {\n  x: positions.IconX // not detected\n  // x: this.props.positions.IconX (validates correctly)\n}\n\nreturn (\n  <div {...sliceIconTextOptions} />\n)\n\n}\nrender() {\n    return (\n      \n        {this.renderLabel()}\n      \n    )\n  }\n}\n```\n. ",
    "Hermanya": "the rule is now called \"react/jsx-indent\", but the issue still stands. ",
    "machineghost": "Heh, that's what I get for copying a real world example (which was originally an arrow function, thus the lack of a return).  I have edited my example to correct the indentation and add a return.\n. ",
    "e1himself": "Also it would be great to have a rule that forbids this: \njsx\nconst Cmp = () => (<div>\n  <span />\n</div>)\nas technically this is a valid style, but is far from readable.. I think jsx-indent rule is not covering that case. Is that correct? . ",
    "faergeek": "I think prettier works well, doesn't make sense to fix auto fix anymore for me.. ",
    "SavePointSam": "I hope there is a chance this could be explored deeper.\nThe only false positives I get anymore are from using { ...this.props }.. ",
    "tylerthehaas": "I am also running into this.  Having to turn off that rule around my proptypes fairly frequently.. I am also running into this.  Having to turn off that rule around my proptypes fairly frequently.. ",
    "jesmarquez": "I run this command:\nnpm install --save-dev eslint-config-airbnb eslint@^12.0.0 eslint-plugin-jsx-a11y@^12.0.0 eslint-plugin-import@^12.0.0 eslint-plugin-react@^12.0.0\nbut i got this message:\nNo compatible version found: eslint@^12.0.0\nnpm ERR! Valid install targets:\nnpm ERR! 3.7.0, 3.6.1, 3.6.0\n. ",
    "RoboBurned": "I have an error while installing the plugin with eslint globally..\nD:\\react\\book\\hello-world>npm i -g eslint-plugin-react\n+-- UNMET PEER DEPENDENCY eslint@^2.0.0 || ^3.0.0\n`-- eslint-plugin-react@6.10.3\nnpm WARN eslint-plugin-react@6.10.3 requires a peer of eslint@^2.0.0 || ^3.0.0 but none was installed.\nThe command shows that I have eslint of required version.\nD:\\react\\book\\hello-world>npm ls -g eslint\n`-- eslint@3.0.0. ",
    "revisionfour": "I think this is ready to be merged and should be merged.\n. To be clear, if we can get this completed and merged and the Readme updated with the --fix command included\nhttps://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md\nThen I'd like to donate $50 American to @snowypowers. I can Paypal or Venmo this if you shoot an email to leec85@gmail.com with the email you want it delivered to. \nThat would take care of this 930\nMy team could also greatly benefit from closing out 929 with a --fix command for jsx-max-props-per-line.\nI'd donate another $50 American for whoever can get this working, completed and merged with the readme updated.\nHave any questions, find me on twitter. Go team open source.\n@revisionfour\n. $50 donated to @snowypowers.\nThanks Yak Jun Xiang!\nIf you or anyone else is up for it, 929 has a $50 bounty on it.\nGo team open source!\n. Thank you @snowypowers \nYou should find a $50 contribution in your paypal :). Thank you @snowypowers \nYou should find a $50 contribution in your paypal :). Yeah, agreed. Getting it merged in is huge because thats what really matters to the community as a whole. Sometime you have to bang on the repo maintainers door until they take a look and finally merge it in. \nI'm hoping that the community continues to add fix commands to rules that can have them applied. I see eslint as an analogy to grammar/spelling correction in word processors. Most people can't remember when there was no spell or grammar checker when they went to write a paper. Right now in my opinion, writing code is still in its infancy because we should have a best standards correction always on when we code. This is vital to getting government and large teams to write consistent and readable code, while reducing bugs and improving efficiency and meeting deadlines. Many programmers believe that using eslint is for amateurs and these programmers are highly misguided by their egos. I would ask these programmers to write me a 10 page paper about the future of coding from start to finish without spelling or grammar checking on and with no revisions. How many programmers could do this without 1 spelling or grammer error. None. eslint is vital to getting programming into the hands of the masses.. Yeah, agreed. Getting it merged in is huge because thats what really matters to the community as a whole. Sometime you have to bang on the repo maintainers door until they take a look and finally merge it in. \nI'm hoping that the community continues to add fix commands to rules that can have them applied. I see eslint as an analogy to grammar/spelling correction in word processors. Most people can't remember when there was no spell or grammar checker when they went to write a paper. Right now in my opinion, writing code is still in its infancy because we should have a best standards correction always on when we code. This is vital to getting government and large teams to write consistent and readable code, while reducing bugs and improving efficiency and meeting deadlines. Many programmers believe that using eslint is for amateurs and these programmers are highly misguided by their egos. I would ask these programmers to write me a 10 page paper about the future of coding from start to finish without spelling or grammar checking on and with no revisions. How many programmers could do this without 1 spelling or grammer error. None. eslint is vital to getting programming into the hands of the masses.. Can we go ahead and merge this in? Where are we with this? I added an issue in the repo that this autofix needs to be added and it looks like its right here waiting.\n. ",
    "princed": "Any chance to get this merged?. ",
    "MartinDoyleUK": "Would love this to happen. The current multiline looks very messy with a single attribute and multiline attribute values \ud83d\udc4d \n. ",
    "marcgrr": "I think I have encountered this same bug. I noticed that the bug only appears if I access the prop with a dot (nextProps.hasSubmitted). If I access the prop with destructuring (const { hasSubmitted } = nextProps), then react/no-unused-prop-types correctly recognizes the access.\nI'm going to see if I can make a PR fixing this!\n. Sorry, I never found the time to address the change requests and to see this through to merging. And I probably won't any time soon. If you want to completely take this over and see it through to merging, feel free!. Is there something I can do to let you \"take over\" this PR? Or maybe should I close this one and let you open another one?. ",
    "imontiel": "It looks like you have to destructure the props from nextProps \u2013\u00a0and it has to be nextProps. It can't be any other name.. ",
    "nischalashashidhar": "@marcgrr , Thanks.. It worked for me as well.. @marcgrr , Thanks.. It worked for me as well.. ",
    "tpai": "Same issue...\n``` jsx\nexport default function Content( { post } ) {\n    const { title, author, body } = post;\n    return (\n        \n\n\n\n\n    );\n}\nContent.propTypes = {\n    post: PropTypes.shape( {\n        title: PropTypes.string.isRequired,\n        author: PropTypes.string.isRequired,\n        body: PropTypes.string.isRequired,\n    } ),\n};\n```\n'post.title' PropType is defined but prop is never used (react/no-unused-prop-types) [javascript/eslint]\n'post.author' PropType is defined but prop is never used (react/no-unused-prop-types) [javascript/eslint]\n'post.body' PropType is defined but prop is never used (react/no-unused-prop-types) [javascript/eslint]\n. Same issue...\n``` jsx\nexport default function Content( { post } ) {\n    const { title, author, body } = post;\n    return (\n        \n\n\n\n\n    );\n}\nContent.propTypes = {\n    post: PropTypes.shape( {\n        title: PropTypes.string.isRequired,\n        author: PropTypes.string.isRequired,\n        body: PropTypes.string.isRequired,\n    } ),\n};\n```\n'post.title' PropType is defined but prop is never used (react/no-unused-prop-types) [javascript/eslint]\n'post.author' PropType is defined but prop is never used (react/no-unused-prop-types) [javascript/eslint]\n'post.body' PropType is defined but prop is never used (react/no-unused-prop-types) [javascript/eslint]\n. ",
    "xkr47": "``` js\nconst FormInput = (props) => {\n  const {\n    input,\n    type = \"text\",\n    ...extraProps\n  } = props;\n  return (\n    \n\n\n  );\n};\nFormInput.propTypes = {\n  input: React.PropTypes.object.isRequired,\n  required: React.PropTypes.bool,\n  type: React.PropTypes.string\n};\n```\n-> complains that required is unused even if it gets used through extraProps.\n. ",
    "nowke": "I have a similar problem with PropTypes.shape.\njs\nMyComponent.propTypes = {\n  error: PropTypes.shape({\n    username: PropTypes.string,\n    password: PropTypes.string,\n  }),\n}\nAnd I pass error to the child component as a whole.\n<MyChildComponent error={this.props.error} />\nESLint throws \nerror  'error.username' PropType is defined but prop is never used  react/no-unused-prop-types\nerror  'error.password' PropType is defined but prop is never used  react/no-unused-prop-types\n. ",
    "devalnor": "Probably same issue...\n```jsx\nimport React, { PropTypes } from 'react';\nexport default function Article(props) {\n    const {\n        homepageThumb: {\n            url: imageUrl,\n            width: imageWidth,\n            height: imageHeight\n        }\n    } = props;\nreturn (\n\n    <img\n        src={imageUrl}\n        width={imageWidth}\n        height={imageHeight}\n        alt=\"thumb\"\n    />\n\n);\n\n}\nArticle.propTypes = {\n    homepageThumb: PropTypes.shape({\n        url: PropTypes.string,\n        width: PropTypes.number,\n        height: PropTypes.number\n    }).isRequired\n};\n```\n59:20  error    'thumbnail_images.homepage-thumb.width' PropType is defined but prop is never used   react/no-unused-prop-types\n  60:21  error    'thumbnail_images.homepage-thumb.height' PropType is defined but prop is never used  react/no-unused-prop-types\n. ",
    "iegik": "Still throws error when:\n```\nstatic propTypes = {\n    data: React.PropTypes.arrayOf(React.PropTypes.any).isRequired,\n};\nstatic defaultProps = {\n    data: [],\n};\ncomponentWillReceiveProps(nextProps) {\n    this.state.data = nextProps.data; // Here ESLint do not see usage of data prop\n}\n```. I think that rule was about to not use this syntax:\n<Foo {...{\n  bar: 'tar',\n  moo: 0,\n}} />\nand use that instead:\n<Foo\n  bar=\"tar\"\n  moo={0}\n/>\nReasons: \n 1. as mentioned in @sanjayp's comment\n 2. only one syntax must be preferred. @mockdeep\nfunction MyComponent(props) {\n  return <MySubComponent {...subComponentProps(props)} />\n}\n->\n```\nfunction MyComponent(props) {\n  const { one_prop, two_prop } = subComponentProps(props);\nreturn \n}\n```. Have to see that: https://github.com/yannickcr/eslint-plugin-react/issues/1094. @ljharb With following rule set still got warnings:\n\"react/sort-comp\": [1, {\n      \"order\": [\n        \"static-methods\",\n        \"instance-variables\",\n        \"lifecycle\",\n        \"everything-else\",\n        \"render\"\n      ]\n    }]\nerror refFoo should be placed after componentWillUnmount react/sort-comp\nWhile lifecycle is above instance-variables. refFoo = React.createRef();\nsomeMethod = () => {} <----  are the same behavior, so here will be sorting conflict\nsomeAnotherMethod() {} <--. ",
    "ahauser31": "Yeah, for me usage of a prop only in componentWillReceiveProps also throws this linting error.. ",
    "geuis": "Still getting this in the most recent version of eslint-plugin-react in exactly the same code situation as the original example.. Still getting this in the most recent version of eslint-plugin-react in exactly the same code situation as the original example.. ",
    "BarryThePenguin": "@geuis there are tests for the exact same code situation as the original example.\nIf you have a different example that is still failing, would be worth opening a new issue. Updated. The problem is that functions inside a JSXExpressionContainer are bing mistaken for stateless components.\nFor example: <button onClick={() => props.handleClick()}></button>\nwhere {() => props.handleClick()} is theJSXExpressionContainer. ",
    "wellyal": "Also failing to detect props being used on react lifecycle functions like\njavascript\n...\nmodalClosed: PropTypes.bool.isRequired\njavascript\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.modalClosed) {\n      this.props.router.goBack()\n    }\n  }. ",
    "healqq": "I might do something wrong but this shows onItemClick propType not to be used:\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './List.css';\nfunction List(props) {\n  return (\n    \n        I am a list\n        {\n          props.items.map(item =>\n            (\n props.onItemClick(item.id)}>{item.title} {item.isAdded}\n              \n),\n          )\n        }\n    \n  );\n}\nList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n    }),\n  ),\n  onItemClick: PropTypes.func,\n};\nList.defaultProps = {\n  items: [],\n  onItemClick: null,\n};\nexport default List;\n```. ",
    "TrevorSayre": "```jsx\nexport default class Users extends Component {\nstatic propTypes = {\n    ...\n    onLoad: PropTypes.func.isRequired,\n  };\nasync componentWillMount() {\n    await Promise.all([\n      this.props.onLoad(),\n      this.onSearch(),\n    ]);\n    ...\n  }\n...\n}\n```\n'onLoad' PropType is defined but prop is never used (react/no-unused-prop-types). ```jsx\nexport default class Users extends Component {\nstatic propTypes = {\n    ...\n    onLoad: PropTypes.func.isRequired,\n  };\nasync componentWillMount() {\n    await Promise.all([\n      this.props.onLoad(),\n      this.onSearch(),\n    ]);\n    ...\n  }\n...\n}\n```\n'onLoad' PropType is defined but prop is never used (react/no-unused-prop-types). ```jsx\nexport default class Users extends Component {\nstatic propTypes = {\n    ...\n    onLoad: PropTypes.func.isRequired,\n  };\nasync componentWillMount() {\n    await Promise.all([\n      this.props.onLoad(),\n      this.onSearch(),\n    ]);\n    ...\n  }\n...\n}\n```\n'onLoad' PropType is defined but prop is never used (react/no-unused-prop-types). @benstepp It appears the merge conflicts still need to be handled before this can be merged. ",
    "snowypowers": "Rebased on top of #883. No major changes except for adding outputs to test cases.\nHowever, I would like to take this moment to point out that the current code uses a foreach loop:\njavascript\n        if (\n          (configuration === 'multiline' && isMultilineJSX(node)) ||\n          (configuration === 'multiline-multiprop' && isMultilineJSX(node) && node.attributes.length > 1) ||\n          (configuration === 'always')\n        ) {\n          node.attributes.forEach(function(decl) {\n            //code to verify and fix EACH PROP\n         }\nThis results in multiple errors being thrown in fail cases with multiple props:\n``` jsx\noptions: ['always']\n\n```\nSeeing that this rule is only concerned with amending the position of the first prop, should the function be only checking for the first prop and throwing error if the first prop fails?\nPossible fix:\njavascript\n// We check for at least one prop to ensure we can safely use node.attributes[0] inside\n        if (\n          (configuration === 'multiline' && isMultilineJSX(node) && node.attributes.length > 0) ||\n          (configuration === 'multiline-multiprop' && isMultilineJSX(node) && node.attributes.length > 1) ||\n          (configuration === 'always' && node.attributes.length > 0)\n        ) {\n          var decl = node.attributes[0];\n         //Code to verify and fix decl\n. Included the fix for multiple props on the first line causing lint to throw 1 error per prop, causing AssertionError. First Invalid test case amended to include such a scenario.\nHope that is all :)\n. Hey thanks @revisionfour for the generous donation! Glad to know that my code will be utilised immediately!\n. I can give it a shot! \n. Rebased. Looks like the new options doesn't really affect how the autofix will work so should be fine. \nAdded fix outputs to all the new invalid tests cases.\nA second opinion is always welcomed :). Rebased. Looks like the new options doesn't really affect how the autofix will work so should be fine. \nAdded fix outputs to all the new invalid tests cases.\nA second opinion is always welcomed :). Rebased as a single atomic commit.\n@lencioni @yannickcr . Rebased as a single atomic commit.\n@lencioni @yannickcr . rebased again due to merge conflicts (mostly minor due to string templating changes). rebased again due to merge conflicts (mostly minor due to string templating changes). hi @revisionfour  got it! Thanks, this PR has been floating for quite long, good to see people using it and finally, getting merged! ^.^. hi @revisionfour  got it! Thanks, this PR has been floating for quite long, good to see people using it and finally, getting merged! ^.^. If we are to rely on indent autofixer wouldnt we require 2 runs of lint?\nAnyway the current implementation does default to a specific style (2 spaces). Most of the indent fixing code is actually referenced and stripped down from jsx-indent.\nTo make it clearer, I could word it such that autofix has a optional arg for indents but does work without it.\nPS: I think I should change the default back to 4 spaces so to be inline with indent defaults\n. - Removed all traces of indentation argument\n- utilize\n- Added a simple warning line in readme that the fixer will require a second run of lint to fix indentation\n. Yes, it is intentional. This rule only concerns the first prop for each React element so we should not be checking anything else after the first element. \n. yeah, its somewhat cleaner than adding && node.attributes.length > 0. Matter of preference.\n. ",
    "dandean": "Thanks for the discussion, y'all. At the very least, it sounds like this is the wrong repository for this rule, so I'm going to close the issue. Please feel free to keep commenting on the issue \u2013 it's all really valuable input from my perspective :)\n. ",
    "TheXardas": "Will it work for named imports like:\n```js\nimport MyBlock from './Block.jsx';\nclass MyComponent extends React.Component {\n    render() {\n        return ;\n    }\n}\n``\nwith forbiddenBlock` element?\n. But there is!\nIt is aliased as MyBlock, but it's still a Block component.. ",
    "piuccio": "Came here because as of eslint-plugin-react: 7.0.0 the rule no-children-prop is enabled by default.\nI kinda agree with the general principle, however react router 4 uses (or abuses?) the children prop.\nThey provide the example\njs\n<Route path={to} children={({ match }) => (\n  <li className={match ? 'active' : ''}>\n    <Link to={to} {...rest}/>\n  </li>\n)}/>\nwhich is nicer than\n```js\n\n\n\nconst Nested = ({ match }) => (\n  \n\n\n)};\n```\nnote that you can't use the following because the props passed to the children are different from the one of the parent\njs\n<Route path={to}>\n  <li className={match ? 'active' : ''}>\n    <Link to={to} {...rest}/>\n  </li>\n<Route />\nWhat's your thoughts about this? In the meantime I'm disabling the rule. I guess jsx-no-bind is not enabled by default because linting doesn't complain about that, by the way I'm using\n\"extends\": [\n    \"airbnb-base\",\n    \"plugin:react/recommended\"\n  ],\nAgain, the same principle applies, if most examples (from trusted sources) go against the recommended rules, maybe it's the rules that need updating?. ",
    "billschaller": "Yeah, this rule seems to fail hard at handling either class properties or flow-annotated property declarations.\n. ",
    "mauron85": "I'm sorry I really appreciate your hard work.\nMy point is to make docs little bit better.\nAs severity is not mentioned on https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md. It's only in error from eslint atom plugin.  \nonly options enabled and mode. It is extremely confusing, at least for me.\n\"prefer-es6-class\": [<enabled>, <mode>]\nI wish I can configure this without reading half of eslint docs and many trials of errors. \n. Ok, but I don't get it. When <enabled> aka severity has options error | warning. What is <mode> for? \nIsn't it same thing?\nPossible Severity values: off | error | warn\nPossible mode values: always | never\nEDIT: I get it now.\n. Ok, I've played with all possible configurations with following outcome (in atom) on es5 react class (React.createClass)\nThis one is I consider confusing:\n1. severity error, mode: always\n\"react/prefer-es6-class\": [2, \"always\"],\nExpected outcome: according severity it should be error but according mode it should warning\nActual: error\nEDIT: I think remove <mode> should be considered. IMHO using only <severity> same things can be achieved (almost).\n. My proposal is to remove <mode> and leave only severity. Mode \"never\" IMHO didn't make sense with name of plugin prefer-es6-class.\nEnforce ES6 class for React Components (prefer-es6-class)\nReact offers you two way to create traditional components: using the ES5 React.createClass method or the new ES6 class system. This rule allow you to enforce ES6 class.\nRule Options\njs\n...\n\"prefer-es6-class\": <severity: number>\n...\nseverity off = 0\nno error reporting\nseverity warning = 1\nWill enforce ES6 classes for React Components.\nThe following patterns are considered warnings:\njs\nvar Hello = React.createClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\nThe following patterns are not considered warnings:\njs\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.name}</div>;\n  }\n}\nseverity error = 2\nWill enforce ES5 classes for React Components\nThe following patterns are considered errors:\njs\nvar Hello = React.createClass({\n  render: function() {\n    return <div>Hello {this.props.name}</div>;\n  }\n});\nEDIT: <mode> never is like saying prefer ES5 class but name of the plugin is prefer-es6-class. Just doesn't make sense to me. But it may just be me.\n. Before I give up :-)\nDid you considered this two scenarios?\n- <mode> \"never\" is like saying prefer ES5 class but name of the plugin is prefer-es6-class. The point here is why to check if code is using ES5 class style and to be honest I don't expect that plugin with name prefer-es6-class would check if my code is using ES5 classes.\n- \"react/prefer-es6-class\": [2, \"always\"], \n  according eslint severity it should be error but according plugin docs mode \"always\" should be warning\nPlugin docs:\n\nalways mode\nWill enforce ES6 classes for React Components. This is the default mode.\nThe following patterns are considered warnings:\n\nEslint docs about severity error:\n\n\"error\" or 2 - turn the rule on as an error (exit code is 1 when triggered)\n. \n",
    "julienw": "\nb) use \u2018 (a curly quote) because straight quotes are typographically incorrect.\n\nI think you wanted to mention \u2019 instead of \u2018 :). >  b) use \u2018 (a curly quote) because straight quotes are typographically incorrect.\nI think you wanted to mention \u2019 instead of \u2018 :). You can disable the rule if you don't like it.\nI'm finding it useful, especially because github highlighting engine goes crazy with an alone apostrophe.. There are a lot of symbols that look alike. The Wikipedia page is very clear.\nYou can use \u2019 as an apostrophe. You're right, a quotation mark \u2019 is not correct. Even if that looks alike in most fonts.. Yeah I hesitated between filing this or in eslint-plugin-flowtype, but I thought it was more react-specific than flow-specific :). Yeah I hesitated between filing this or in eslint-plugin-flowtype, but I thought it was more react-specific than flow-specific :). :+1: . Ah yep, good idea !. Ah yep, good idea !. I think I get the same issue with this (maybe simpler) code:\n```javascript\n// @flow\nimport * as React from 'react';\ntype Props = {||};\ntype HoveredStackTiming = {\n  depth: number,\n};\nclass StackChartCanvas extends React.PureComponent {\n  _getHoveredStackInfo({ _depth }: HoveredStackTiming) {\n    return null;\n  }\nrender() {\n    return null;\n  }\n}\nexport default StackChartCanvas;\n```. Added a test => https://github.com/yannickcr/eslint-plugin-react/compare/master...julienw:1561-issue-with-destructuring\nI'm looking if I can find how to fix this.. I think this is not strict enough: https://github.com/yannickcr/eslint-plugin-react/blob/c7dd755c4607151d058af39ed45f60613ba16ccf/lib/util/annotations.js#L13-L24\nThis is called from https://github.com/yannickcr/eslint-plugin-react/blob/c7dd755c4607151d058af39ed45f60613ba16ccf/lib/rules/no-unused-prop-types.js#L944-L953.\nNow I have a few questions/remarks:\n is it possible that a method could be a functional component ? If not, then we can restrict this method.\n I think we can reasonnably assume that for a functional component using destructured parameters, the same problem will be caught by https://eslint.org/docs/rules/no-unused-vars too. So I believe we could actually safely ignore functions with destructured parameters in this rule. But we'll have similar issues for other rules.\n* anyway, the rule doesn't associate the right props to the right component -- I don't know if other similar rules have the same issue, but it's likely.\nwould @yannickcr or anybody else have any more guidance here ?. thx !. ",
    "duane": "Naturally, there are other uses for ' than contractions and right single quotes. It's disappointing to see a typographic defense of all things for restricting valid input.. Notably, ASCII 39 (') is primarily apostrophe, aka &apos;. This is how most fonts render the glyph; the only subculture that uses this as a right quote are japanese fonts that render it as a right single quotation mark. Furthermore, using single quotation marks in prose is vanishingly rare these days, whereas english contractions and possessives are as common as ever. You're hamstringing prose to support the typographer for no demonstrative benefit in the general case.. @ljharb \n\n@duane english contractions and possessives should only be curly quotes too.\n\nThis is incorrect; it's an apostrophe, and it is wildly different than a quotation mark.. @ljharb, @julienw, check the ascii spec. ' is an apostrophe.\n@ljharb, that is a right single quotation mark, not an apostrophe; you only use it for closing quotations that were started with a left single quotation mark.. @ljharb, @julienw, check the ascii spec. ' is an apostrophe.\n@ljharb, that is a right single quotation mark, not an apostrophe; you only use it for closing quotations that were started with a left single quotation mark.. ",
    "jimrandomh": "For the benefit of other people who come across this: Put \"react/no-unescaped-entities\": 0 in the rules section of .eslintrc. This warning is enforcing a typography geek's pet peeve, and the problem is with the warning, not with your code.. ",
    "jurcovicova": "@ljharb In that case, I would expect two errors - one for line 2 and one for line 5. At least, when I donwgrade to 6.3.0 and intentionally indent it wrong, I get one error for each wrongly indented tag.\n. ",
    "bigslycat": "I confirm. \n\n. @ljharb oh, sry. =) I check it now \u2014 on 6.4.1 it was fixed.\n. Sry. I using invalid syntax. =) All works correctly.. ",
    "nilsml": "I'm on version 7.5.1 and this is still an issue.. ",
    "swarthy": "Sorry, forgot to show .eslintrc\n. Nope, same output\njavascript\nexport default function errorDecorator (options) {\n  return WrappedComponent =>\n    class Wrapper extends React.PureComponent { // Error: Component should be written as a pure function\n      static propTypes = {\n        error: PropTypes.string\n      }\n      render () {\n        const {error, ...props} = this.props\n        if (error) {\n          return <div>Error! {error}</div>\n        } else {\n          return <WrappedComponent {...props} />\n        }\n      }\n    }\n}\n. ignorePureComponents not ignorePureComponent\n. ignorePureComponents\n. ignorePureComponents\n. ",
    "tmcintire": "I'm not 100% sure but from what I have read they want you to actually define the object using the \nhistory: React.PropTypes.shape({\n    foo: {\n         bar: {}\n     }\n});\ninstead of just calling React.PropTypes.object.\nWhile its not wrong, what they want is more description in your proptypes\n. Ah.  In that case you don't even need to define prop types.  They are only there as an optional item to describe the props that need to be used in the component.  It makes it easier for someone else to look at it and know which props are used in that component and what type of prop it is.  But since you aren't using using any you will get the no-unused-proptypes error. \n. I agree.  However he is not using any props in the components he posted. \n. Those are passed in variables from other files.  Not actual props. Props are props.foo or this.props.foo\n. ",
    "casr": "If I use a shape then I should also define the members of the object? But in this instance, as none of the members are used, I get a react/no-unused-prop-types instead. I could just use React.PropTypes.shape without defining the members but then it doesn't seem like I have gained much from it all.\nFor now I've disabled the rule but I just wondered if there was anything I was missing:\nRoot.propTypes = {\n  history: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n  store: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n};\n. I am making use of store by the <Provider /> component and history by the <Router /> component. Or did you mean something else?\nI thought what I was doing was a common pattern but I'm happy to refactor it if there is a better way of arranging it.\n. I am cheekily unwrapping it when I pass in the parameter. Normally, this line:\nconst Root = ({ store, history }) => (\nwould look like:\nconst Root = (props) => (\nSorry if that made it difficult to read!\n. ",
    "jtiscione": "@nickjanssen  I have the same problem- I have 30 different types of objects all shaped differently- do I really have to write a couple hundred lines of shape() calls to make this stupid thing happy?\nThe only option is disabling this idiotic rule in .eslintrc.. @ljharb The problem with this react/forbid-prop-types rule is that it's assuming that React is always the appropriate layer to be doing data validation on all objects, verifying shapes and leaf node types.\nI don't need to manipulate these things in the React layer at all. These are document objects with unpredictable structures and field names that change every day. They come from another server and I pass them straight through to a separate library that validates the data itself and reports errors properly before passing it along to a REST API.\nIt seems I would need to replace PropTypes.object with a documentation of the entire third-party REST API- in the form of a single line with several hundred PropTypes calls and thousands of parentheses- which would need to be rewritten with every API revision that comes down the pike. Using PropTypes.string and JSON.parse() would be safer than that.. Yeah, but that's just like, your opinion man... :)\nValidation at every layer that the data passes through leads to coupling which is unnecessary in layers that don't interact with the data. I don't need my ISP validating data structures (although Ajit Pai would allow it), and sometimes it's inappropriate for React to validate them for similar reasons. Every API change would entail running around to a bunch of React components and convincing them not to throw fits at runtime over data structures that they don't actually manipulate. It's like having a rookie cop holding up airport security every time he encounters a brand of shoes he's never seen before.\nAnd a lot of document structures have unpredictable forms that are completely determined by the end-user. How would I use PropTypes to verify the shape of a tree of SVG nodes that someone threw at me? Do I convert it to a weird object with arrays of magic strings and internal references that conforms to a \"DTD\" written in the form of PropTypes calls?\nI mean, an ESLint rule isn't a big showstopper or anything, but trying to satisfy this one on certain projects... yikes! It would be nice if ESLint actually examined the component's logic for manipulation of fields on opaque props objects, but I guess it would be a pain to implement.. ",
    "mcyalcin": "You realize that you can use just shape({}) (essentially same thing as object) if you don't care about the contents of the object. Linter won't report extra fields. You only need to fill in the fields if you are interacting with them (where eslint would catch as 'missing in props validation'), which means they do need to be validated.. ",
    "lokori": "Well, apparently I have to do this in every React Component to satisfy the linter if I want to use \nhistory.push to programmatically navigate.\nhistory: PropTypes.shape({ push: PropTypes.func.isRequired }).isRequired\nThis will satisfy the validator thingy that there is something like \"history\" which contains a function \"push\" and this is required to use the component. Well, of course there could be something like \"shape of history\" somewhere I could use instead of copy-pasting this. \n(I might be missing something obvious because this is my first time using React or Redux or these linter rules, but this seems rather annoying.)\n. ",
    "arperry": "Tests added.\n. ",
    "jetpacmonkey": "It looks like #1138 did address this issue, but it was closed in favor of #1377, which, as far as I can tell, does not.. I opened #1653 based off of the commit in #1138 that fixed recursive proptype definitions.. done. ",
    "modosc": "any update here? would be happy to help out if needed. . sure!\n. yeah, that makes the most sense to me. . for me personally i've never had this rule catch what it's supposed to catch - instead it forced me to learn the ampersand codes for single and double quotes. i suppose it makes more sense for me to disable it since i'm spending more time fixing non-buggy code - i guess this can be closed out then?. for me personally i've never had this rule catch what it's supposed to catch - instead it forced me to learn the ampersand codes for single and double quotes. i suppose it makes more sense for me to disable it since i'm spending more time fixing non-buggy code - i guess this can be closed out then?. ok, i'm good then. thanks. ok, i'm good then. thanks. ",
    "blissdev": "I've encountered the same issue where after the ESLint 4 upgrade, the JSX and ESLint indent levels have to match up otherwise there are conflicts.. ",
    "fruitraccoon": "@ljharb Any chance you have an example of how to setup the indent rule to ignore JSX?  \nI have the same situation as @HHogg.  Looking at the docs for indent, I'm guessing that the ignoredNodes option is the way to do this, but eslint selectors are a bit outside my skill set at the moment and a working example to start from would be great! :). @ljharb Any chance you have an example of how to setup the indent rule to ignore JSX?  \nI have the same situation as @HHogg.  Looking at the docs for indent, I'm guessing that the ignoredNodes option is the way to do this, but eslint selectors are a bit outside my skill set at the moment and a working example to start from would be great! :). Thank very much for the quick reply @ljharb - using your suggestion I was able to get something working.  Using the wildcard character on the syntax tree node name didn't work for me, but by using the rule below, I seem to have about the equivalent of how our linting used to work:\n\"indent\" : [\"error\", 4, { \"ignoredNodes\": [\"JSXElement *\"] }],\nI believe that this will just turn off the indent rule for anything to do with JSX, including within any JSX expressions.  \nA side note for anyone else exploring this - I found this site very useful for finding out what the AST node names actually are (https://astexplorer.net/).. Thank very much for the quick reply @ljharb - using your suggestion I was able to get something working.  Using the wildcard character on the syntax tree node name didn't work for me, but by using the rule below, I seem to have about the equivalent of how our linting used to work:\n\"indent\" : [\"error\", 4, { \"ignoredNodes\": [\"JSXElement *\"] }],\nI believe that this will just turn off the indent rule for anything to do with JSX, including within any JSX expressions.  \nA side note for anyone else exploring this - I found this site very useful for finding out what the AST node names actually are (https://astexplorer.net/).. ",
    "tannerlinsley": "I'm still seeing this happen with all of my ternaries that include multi-line JSX :( \nUsing version ^4.0.1. ",
    "deniseli": "Yes, and also {'Welcome, '}<...>. The only critical part is disallowing the space when it isn't wrapped.\n. @ljharb Yeah. That rule would also fix the issue. It's just a stricter rule than is necessary to fix this particular issue.\n. ",
    "RusAlex": "Because its native event for DOM element?\nI just want to know how to sort this correctly.\n. ",
    "idris": "I think this can be closed now that there is a type-annotations group.\njs\n\"react/sort-comp\": [1, {\n  order: [\n    'type-annotations',\n    'static-methods',\n    'lifecycle',\n    'everything-else',\n    'render',\n  ],\n}]. ",
    "sb8244": "I see this is recently closed, but wanted to chime in that I am seeing this problem as well. I'm going to go the route of very small SFC even though I'm not entirely convinced that is a solution to all problems.. ",
    "shioju": "there's another PR for the same autofix\n. ",
    "elodszopos": "No flow, no TS.\n```\n{\n  \"presets\": [\"react\", \"es2015\", \"stage-0\"],\n\"plugins\": [\n    \"transform-runtime\",\n    \"add-module-exports\",\n    \"transform-decorators-legacy\",\n    \"transform-react-display-name\"\n  ],\n\"env\": {\n    \"development\": {\n      \"plugins\": [\n        \"typecheck\",\n        [\"react-transform\", {\n            \"transforms\": [{\n                \"transform\": \"react-transform-catch-errors\",\n                \"imports\": [\"react\", \"redbox-react\"]\n              }\n            ]\n        }]\n      ]\n    },\n    \"production\": {\n      \"presets\": [\"react-optimize\"]\n    }\n  }\n}\n```\nAbove you can find my .babelrc.\nBelow is the source code file for which it fails (even webstorm gives me an error saying Cannot parse checkstyle XML)\n```\nimport React, { PropTypes } from 'react';\nimport FilmStrip from 'components/uniqlo-ui/FilmStrip';\nconst { object } = PropTypes;\nconst FilmStripWrapper = (props, context) => {\n  const {\n    ...other\n  } = props;\nreturn (\n     null}\n      checkIfWhislisted={() => null}\n      wishlistedStyles={{}}\n      headingText={context.i18n.pdp.styleBook}\n    />\n  );\n};\nFilmStripWrapper.contextTypes = {\n  i18n: object,\n};\nexport default FilmStripWrapper;\n``\n. Here's aconsole.logofnodeinsidemarkPropTypesAsUsedfunction ofno-unused-prop-types.js` @ line ~ 578.\ncase 'VariableDeclarator':\n          for (var i = 0, j = node.id.properties.length; i < j; i++) {\n            // let {props: {firstname}} = this\n            if (!node.id.properties[i].key) console.log(node);\n...\nThe line that fails:\nvar thisDestructuring = (\n              (node.id.properties[i].key.name === 'props' || node.id.properties[i].key.value === 'props') &&\n              node.id.properties[i].value.type === 'ObjectPattern'\n            );\nNode {\n  type: 'VariableDeclarator',\n  start: 185,\n  end: 211,\n  loc: \n   SourceLocation {\n     start: Position { line: 7, column: 8 },\n     end: Position { line: 9, column: 11 } },\n  id: \n   Node {\n     type: 'ObjectPattern',\n     start: 185,\n     end: 203,\n     loc: SourceLocation { start: [Object], end: [Object] },\n     properties: [ [Object] ],\n     range: [ 185, 203 ],\n     _babelType: 'ObjectPattern' },\n  init: \n   Node {\n     type: 'Identifier',\n     start: 206,\n     end: 211,\n     loc: SourceLocation { start: [Object], end: [Object], identifierName: 'props' },\n     name: 'props',\n     range: [ 206, 211 ],\n     _babelType: 'Identifier' },\n  range: [ 185, 211 ],\n  _babelType: 'VariableDeclarator',\n  parent: \n   Node {\n     type: 'VariableDeclaration',\n     start: 179,\n     end: 212,\n     loc: SourceLocation { start: [Object], end: [Object] },\n     declarations: [ [Circular] ],\n     kind: 'const',\n     range: [ 179, 212 ],\n     _babelType: 'VariableDeclaration',\n     parent: \n      Node {\n        type: 'BlockStatement',\n        start: 175,\n        end: 412,\n        loc: [Object],\n        body: [Object],\n        range: [Object],\n        _babelType: 'BlockStatement',\n        parent: [Object] } } }\nCannot read property 'name' of undefined\n. Even if it does, not sure that'd be a good fix for me. I destruct PropTypes throughout the whole project. I'll give it a go though.\n. @ljharb No longer destructing PropTypes, same error.\n. I found that however removing\nconst {\n    ...other\n  } = props;\nfixed it. \nApparently only having other messed it up somehow. I used to have some other props there but since those were removed and only other remained. I'll work around this now. Also, adding anything alongside other fixes it.\nie.\nconst {\n    foo,\n    ...rest\n  } = props;\n. My pleasure. It is indeed valid. Both occurrences (destructed props with only ...other or ...rest) that I had triggered the same failure.\n. ",
    "Bonuspunkt": "=> its a special use case that does not match the vision of this project?\ni just need to know if it will get merged or i need to move it to an other repo.\n. => its a special use case that does not match the vision of this project?\ni just need to know if it will get merged or i need to move it to an other repo.\n. yeah of course, as example i'm having a custom dijit widget where i embed a React Component\njs\ndeclare(\"MyWidget\", [_WidgetBase], {\n    startup: function() {\n        this.inherited(arguments);\n        this.renderFilter();\n    },\n    renderFilter: function() {\n        ReactDOM.render(\n            React.createElement(Filter, {\n                // ...\n            }),\n            this.domNode\n        );\n    },\n    destroy: function() {\n        ReactDOM.unmountComponentAtNode(this.domNode);\n        this.inherited(arguments);\n    }\n});\nthen i could use MyWidget in my other existing dijit widgets.\nwhen a widget is created/destroyed, it calls startup/destroy on its descents widgets.\ndocs: Understanding _Widget\nthe only other use case i can come up with is modal dialogs like react-portal or react-modal but seems like they don't use ReactDOM.render\n. yeah of course, as example i'm having a custom dijit widget where i embed a React Component\njs\ndeclare(\"MyWidget\", [_WidgetBase], {\n    startup: function() {\n        this.inherited(arguments);\n        this.renderFilter();\n    },\n    renderFilter: function() {\n        ReactDOM.render(\n            React.createElement(Filter, {\n                // ...\n            }),\n            this.domNode\n        );\n    },\n    destroy: function() {\n        ReactDOM.unmountComponentAtNode(this.domNode);\n        this.inherited(arguments);\n    }\n});\nthen i could use MyWidget in my other existing dijit widgets.\nwhen a widget is created/destroyed, it calls startup/destroy on its descents widgets.\ndocs: Understanding _Widget\nthe only other use case i can come up with is modal dialogs like react-portal or react-modal but seems like they don't use ReactDOM.render\n. ",
    "pavlelekic": "In the end I figured it out, I found in the docs on the eslint website that  can be 0, 1 or 2 (which are also horrible names, because when someone encounters 0, 1 or 2 he/she will not know what they mean, he/she will have to waste time googling for the meaning). I know it's not your fault, and I'm sorry I've been a bit harsh.\n. ",
    "relekang": "I should have added this link in the description, but forgot. Anyways, the React docs  states that the latter case might end up in erroneous state changes. I don't know enough about the internals of React to say something about the probability of the error happening.\n. @adnasa Cool, I have something \"working\" in a branch. Not sure if it helps or not. I don't think that implementation is good enough, but might be worth take a look.. @adnasa Cool, I have something \"working\" in a branch. Not sure if it helps or not. I don't think that implementation is good enough, but might be worth take a look.. ",
    "sebmarkbage": "this.state doesn't update until the system has fully flushed. In a batch you may have two of these. The callback model executes while the system in flushing, so the argument passed in is later in time.\nCurrently, the only way this happens is if you fire custom events within the same event tick. Such as Flux stores, or multiple callbacks firing. However, in Fiber, this can happen is many more cases because a single batch can last across several events and even several frames.\n. ",
    "adnasa": "I'm up for implementing this. I'm up for implementing this. I'll have a look, thanks @relekang . I'll have a look, thanks @relekang . btw guys, isn't this thread discussing the same proposal?. Is this proposal accepted?\nI don't mean to hijack this request, but I started a basic implementation here\nyou're welcome to take over @matthargett \ud83d\ude09 . Is this proposal accepted?\nI don't mean to hijack this request, but I started a basic implementation here\nyou're welcome to take over @matthargett \ud83d\ude09 . @ljharb all of them?\nat least from my side, this caused some confusion when setting up the config initially.. @lencioni yeah I agree on consistency \ud83d\ude09 let's do that (on a separate PR)!. you're right. we can do it in this PR. @ljharb @lencioni done. @ljharb @lencioni done. @ljharb an update is coming up later this weekend \ud83d\ude09 \n. @ljharb an update is coming up later this weekend \ud83d\ude09 \n. @ljharb corrected the merge conflict 6334d63c34363a9ea833e34306ad5bdfa14654e5. @ljharb corrected the merge conflict 6334d63c34363a9ea833e34306ad5bdfa14654e5. @ljharb Hey,\nSorry for being late on this! \ud83d\ude0b \nI finally did it, haha. woops, I wasn't supposed to add the prefix on the title. shall we proceed with this? \ud83d\ude1b . ",
    "kaiyoma": "Is this rule still being implemented? It's listed in the README as being a \"supported rule\", but when I try to use it, even with the latest code, I get errors like this:\n1:1  error  Definition for rule 'react/no-access-state-in-setstate' was not found  react/no-access-state-in-setstate\nIf it's not officially supported yet, maybe it shouldn't be in the README?. Is this rule still being implemented? It's listed in the README as being a \"supported rule\", but when I try to use it, even with the latest code, I get errors like this:\n1:1  error  Definition for rule 'react/no-access-state-in-setstate' was not found  react/no-access-state-in-setstate\nIf it's not officially supported yet, maybe it shouldn't be in the README?. Great, thanks for clarifying. Looking forward to having this rule as it's one less thing I need to be on the lookout for during code reviews. \ud83d\ude04 . Great, thanks for clarifying. Looking forward to having this rule as it's one less thing I need to be on the lookout for during code reviews. \ud83d\ude04 . No newlines at either end is good:\n<div>\n    {data.message ? <span>You have an unread message</span> : <Placeholder/>}\n  </div>\nNewlines at both ends is also good:\n<div>\n    {\n      data.message ?\n        <span>You have an unread message</span> :\n        <Placeholder/>\n    }\n  </div>\nBut mixing and matching is bad:\n<div>\n    {\n      data.message ?\n        <span>You have an unread message</span> :\n        <Placeholder/>}\n  </div>\n<div>\n    {data.message ?\n        <span>You have an unread message</span> :\n        <Placeholder/>\n    }\n  </div>\nRelated eslint rules that support \"consistent\":\n\nhttps://eslint.org/docs/rules/array-bracket-newline\nhttps://eslint.org/docs/rules/function-paren-newline\nhttps://eslint.org/docs/rules/object-curly-newline. I'm also running into this. I set some state (in componentWillMount) and the only place it gets accessed is inside a setState callback updater, which references prevState, not this.state, which appears to be confusing this rule. Checking only for instances of this.state.foo is not enough to determine conclusively that foo isn't being used.. Sorry, I should also mention that I also upgraded eslint-plugin-react (from 7.10.0 to 7.11.0).. Not that exactly, but I think I found the file causing the issue. We have a very thin wrapper around a third-party component and the linter throws that same error every time I lint this file:\n\n```\nimport RcSlider from 'rc-slider';\nimport React from 'react';\nimport './styles.less';\nconst Slider = props => (\n  \n\n\n);\n// Uses the same props as rc-slider: https://www.npmjs.com/package/rc-slider\nSlider.propTypes = RcSlider.propTypes;\nSlider.defaultProps = {\n  tipFormatter: null,\n};\nexport default Slider;\n``. I'm seeing this error now after trying to upgrade from 7.11.1 to 7.12.3. I have a bit of state (call itfoo) and the only use of it is to control logic inside asetState` function updater:\n```\nthis.setState(prevState => {\n  if (prevState.foo) {\n    // perform extra logic\n  }\n// return new state\n});\n```\nThe plugin reports that state.foo is never used in the component, which is wrong.\n. I'm seeing this error now after trying to upgrade from 7.11.1 to 7.12.3. I have a bit of state (call it foo) and the only use of it is to control logic inside a setState function updater:\n```\nthis.setState(prevState => {\n  if (prevState.foo) {\n    // perform extra logic\n  }\n// return new state\n});\n```\nThe plugin reports that state.foo is never used in the component, which is wrong.\n. ",
    "omgaz": "ditto for the ternary operator being inline with the logical if/brackets\n{ isFoo ?\n  <div>lorem</div>\n:\n  <div>ipsum</div>\n}\nHowever the following passes, but forces an inline else statement (not ideal, but passes linting)\n{ isFoo ?\n  <div>lorem</div>\n: <div>ipsum</div>\n}\n. ",
    "voxpelli": "Makes it really hard when combined with the operator-linebreak, which eg. comes with the standard package, as that doesn't allow you to move your : either. But mostly it's just bad to have the linting tool suddenly change it's mind about the linting and encourage a bad coding style rather than a good one, so hoping for a swift fix.\nThis apparently was fix of #901 and #897 that was made as a response to another bug around this that was introduced in 6.4.0.\n. If someone could review my PR #950, then that would be great. It fixes the main case reported in this issue.\n. If someone could review my PR #950, then that would be great. It fixes the main case reported in this issue.\n. @alasdairhurst I have not, all tests in the module passes as did the linting on my largest React project so please add any comments to #950 on any additional problems that the fix in there might cause and it will have to be ensured that additional tests are added for those cases and the code modified to pass also those tests.\n. @alasdairhurst I have not, all tests in the module passes as did the linting on my largest React project so please add any comments to #950 on any additional problems that the fix in there might cause and it will have to be ensured that additional tests are added for those cases and the code modified to pass also those tests.\n. ",
    "alasdairhurst": "@voxpelli Not sure if you noticed, but your fix causes some issues with other implementations\n. @voxpelli Not sure if you noticed, but your fix causes some issues with other implementations\n. Adding the react version is good to know, however like @shockey said, this isn't great behaviour. Ideally, any rules that are modified to break where they didn't before should be breaking changes rather than something that gets picked - usually automatically with a minor bump\n. ",
    "chotalia": "this worked for me\nref={arg => { this.deleteBtn = arg; } }. ",
    "bimalgrg519": "Small change....\nref={(arg) => {this.deleteBtn = arg; }}. ",
    "timhwang21": "Also would be happy for this to be released!. I thought if the arrow function is a class property, it is also only computed once?\njavascript\nclass Foo extends Component {\n  myArrowFunc = () => { ... }\n}\nDin't think @Hypnosphi is talking about arrow functions within render().. I didn't know that, thanks! Fixes an incorrect belief of mine.. ",
    "pasupuletics": "@revisionfour, When will be next release going to happen?\nCC: @snowypowers. ",
    "everdimension": "@ljharb yea, I planned to fix the failing checks and then reopen the pr. Perhaps a bit later today.\n. @ljharb yea, I planned to fix the failing checks and then reopen the pr. Perhaps a bit later today.\n. @ljharb, @yannickcr  Updated the PR\n. @ljharb, @yannickcr  Updated the PR\n. @yannickcr Well, it does work for simple cases (which are in tests) so it might be enough for someone's writing style.\nAnd hopefully it will once work just as expected for all other cases, too.\n. ",
    "ajhyndman": "Oh, sure.\nIn Flow 0.34.0 they introduced a syntax for specifying whether a property in an object passed as a parameter is covariant, contravariant, or invariant.  This tells you whether you are allowed to assign keys to a subtype or supertype of their declared type inside or outside of the function context.  The property variance annotation can be a + or a -.\nLong story short: I think it should be ignored when checking whether a prop has been validated or not!\nDocs: https://flowtype.org/blog/2016/10/04/Property-Variance.html\n. I think you nailed it.\n. Cool, updated.. Cool, updated.. ",
    "michaeljota": "I just going to made another useless comment just to point out this is badly needed, as sometimes you need to access to props to set the state or something, and the linter will show this as an error (For your point, I realice that I did not actually use the props to set the state, but for resolve the state value). \nHowever, with #943 this would be necessary. . ",
    "krainboltgreene": "Yes.\n\n. If I remove the currying, it no longer warns me. It seems like it gets confused by the connect() currying.. ",
    "Lepozepo": "Seeing the same issue having just created a new project with create-react-native-app. ",
    "marcelmokos": "I use eslint-plugin-react@7.0.1\nSame problem here.\nI have modified the code to console.log decl if name is not string.\nvar name = decl.name.name;\nif (typeof name !== 'string') console.log({decl});\nif (ignoreCase) {\n  name = name.toLowerCase();\n}\nThis is output\n```\n$ eslint \"src/**\" \n{ decl: \n   Node {\n     type: 'JSXAttribute',\n     start: 40,\n     end: 82,\n     loc: SourceLocation { start: [Object], end: [Object] },\n     name: \n      Node {\n        type: 'JSXNamespacedName',\n        start: 40,\n        end: 51,\n        loc: [Object],\n        namespace: [Object],\n        name: [Object],\n        range: [Object],\n        _babelType: 'JSXNamespacedName' },\n     value: \n      Node {\n        type: 'Literal',\n        start: 52,\n        end: 82,\n        loc: [Object],\n        extra: null,\n        value: 'http://www.w3.org/1999/xlink',\n        range: [Object],\n        _babelType: 'StringLiteral',\n        raw: '\"http://www.w3.org/1999/xlink\"' },\n     range: [ 40, 82 ],\n     _babelType: 'JSXAttribute' } }\nname.toLowerCase is not a function\nTypeError: name.toLowerCase is not a function\n    at /Users/user/work/Web-React/node_modules/eslint-plugin-react/lib/rules/jsx-no-duplicate-props.js:53:25\n    at Array.forEach (native)\n    at EventEmitter.JSXOpeningElement (/Users/user/work/Web-React/node_modules/eslint-plugin-react/lib/rules/jsx-no-duplicate-props.js:42:25)\n    at emitOne (events.js:101:20)\n    at EventEmitter.emit (events.js:191:7)\n    at NodeEventGenerator.applySelector (/Users/user/work/Web-React/node_modules/eslint/lib/util/node-event-generator.js:265:26)\n    at NodeEventGenerator.applySelectors (/Users/user/work/Web-React/node_modules/eslint/lib/util/node-event-generator.js:294:22)\n    at NodeEventGenerator.enterNode (/Users/user/work/Web-React/node_modules/eslint/lib/util/node-event-generator.js:308:14)\n    at CodePathAnalyzer.enterNode (/Users/user/work/Web-React/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:602:23)\n    at CommentEventGenerator.enterNode (/Users/user/work/Web-React/node_modules/eslint/lib/util/comment-event-generator.js:98:23)\n    at Traverser.enter (/Users/user/work/Web-React/node_modules/eslint/lib/eslint.js:929:36)\n    at Traverser.__execute (/Users/user/work/Web-React/node_modules/estraverse/estraverse.js:397:31)\n    at Traverser.traverse (/Users/user/work/Web-React/node_modules/estraverse/estraverse.js:501:28)\n    at Traverser.traverse (/Users/user/work/Web-React/node_modules/eslint/lib/util/traverser.js:31:22)\n    at EventEmitter.module.exports.api.verify (/Users/user/work/Web-React/node_modules/eslint/lib/eslint.js:926:23)\n    at processText (/Users/user/work/Web-React/node_modules/eslint/lib/cli-engine.js:264:31)\n```. Same problem on node v8.9.0.\n\"eslint\": \"^4.9.0\",\nyarn run lint\nyarn run v1.2.1\n$ eslint . --cache\nCannot read property 'properties' of null\nTypeError: Cannot read property 'properties' of null\n.... Please release the change.. ",
    "alexreardon": "Sounds good!. Good thinking. In its most general sense this rule is suffix conventions for particular prop types - built in or custom. With the suffix being a limited set of words. In the case of auxiliary verbs it would be 'is, can, should...' and so on. . This would be a specific opt in rule for code bases that are aware of the behaviour of PureComponent.\nUse case: we have a new code base and want to use PureComponent everywhere from the start. However, we currently have no way of enforcing it with eslint. . Okay great - I will try to get a pull request open soon. Calculating whether or not a component is relying on mutation of existing objects seems quite difficult to catch. I appreciate the apprehension to add it as a rule as turning it on without an understanding of PureComponent might cause bugs.\nPerhaps we could search for a subset of obvious issues? Although trying to come up with a list of these is providing difficult for me.. I am looking at it from the perspective that I want to black list using React.Component for a whole code base rather than just preferring React.PureComponent. Is that too strong an opinion?. I will hold off on a pull request until there is more of an agreement about whether to move forward with this one - and what moving forward would look like. Unless it is a leaf node it is really hard to tell because sub nodes might be relying on the mutation change. That might work! I will give it a go. I can confirm that the rule is able to be enforced using no-restricted-properties\njson\n \"no-restricted-properties\": [\"error\", {\n        \"object\": \"React\",\n        \"property\": \"Component\",\n        \"message\": \"Please use PureComponent instead.\"\n    }],. I would be happy to close this issue give that the outcome is already achievable. Thanks for working on this everyone - it now works great!. Thanks for working on this everyone - it now works great!. @ljharb I updated the description. @ljharb I updated the description. I have not had experience writing eslint plugins before. I see the first step as fairly straight forward: checking if browser globals are called inside of componentDidMount, componentDidUpdate or componentWillUnmount.\nI am not sure how to check if this is done inside of a guard such as \njs\nif (typeof window !== 'undefined') {\n // I can use browser globals in here\n}\n@ljharb you have any thoughts on how I could check to see if the usage of the code is guarded?. Sometimes there might be - such as when a component mounts into a portal. . So on the server it might just return null, whereas in the browser it might return ReactDOM.createPortal(children, el). I have seen this pattern around. But I could buy that these are edge cases and a consumer could add a //eslint-ignore-next-line react/ssr-friendly. Sounds good to me. ",
    "ninahaack": "Thank you very much for your help!. ",
    "johanneserber": "Well it would help if this rule also checks on\n\nnextProps (for example in componentWillReceiveProps)\nownProps (second parameter in mapDispatchToProps)\nprops that are argument of functions that have been called with this.props as parameter\n\nI think that would already cover a big number of false positives. Overall I think it is a very useful rule which should be kept.. ",
    "ndbroadbent": "Ha, seems like you'd have to solve the halting problem for this one.\nI think this rule should be relaxed quite a bit, so that it just looks for the prop name string anywhere in the same file. I think that would solve 99% of these false positives, and it would still be quite useful.\nEven if that's not the default behavior, it would be really useful as an option.. Actually I think johanneserber's comment suggestion would cover 99% of cases, and I would also like to add a destructuring check. e.g.: \nconst { foo, bar } = this.props\n\nThat would solve everything for me. Even if there are some edge-cases, that would give me enough options to rewrite the code and pass the linting.. ",
    "xareelee": "I have another case which raises an error as a false positive.\n``js\ntype CouponsListContainerProps = {\n  errorMessage?: string,  // this props will only be used inshouldComponentUpdate`\n  ...\n};\nclass CouponsListContainer extends React.Component {\nprops: CouponsListContainerProps\n  static defaultProps = {\n    errorMessage: \"\",\n  };\nshouldComponentUpdate(props: CouponsListContainerProps) {\n    // we will use errorMessage without this keyword\n    if (props.errorMessage.length > 0) {\n      this.toast.show(props.errorMessage);\n    }\n    return true;\n  }\nrender = () => {...}\n}\n```\nThe errorMessage is an optional prop which will be used only in shouldComponentUpdate.. I have another case which raises an error as a false positive.\n``js\ntype CouponsListContainerProps = {\n  errorMessage?: string,  // this props will only be used inshouldComponentUpdate`\n  ...\n};\nclass CouponsListContainer extends React.Component {\nprops: CouponsListContainerProps\n  static defaultProps = {\n    errorMessage: \"\",\n  };\nshouldComponentUpdate(props: CouponsListContainerProps) {\n    // we will use errorMessage without this keyword\n    if (props.errorMessage.length > 0) {\n      this.toast.show(props.errorMessage);\n    }\n    return true;\n  }\nrender = () => {...}\n}\n```\nThe errorMessage is an optional prop which will be used only in shouldComponentUpdate.. Any other case for react/require-default-props warning:\n```js\ntype FooProps = {\n  a: string,\n  b?: boolean,  // optional\n}\nconst Foo = ({\n  a,\n  b = false,  // providing a default value for props\n}: FooProps) => {\n  // ...\n}\n```\nThis also reports a lint error react/require-default-props in this stateless React component form:\n14:3  error  propType \"b\" is not required, but has no corresponding defaultProp declaration          react/require-default-props. Any other case for react/require-default-props warning:\n```js\ntype FooProps = {\n  a: string,\n  b?: boolean,  // optional\n}\nconst Foo = ({\n  a,\n  b = false,  // providing a default value for props\n}: FooProps) => {\n  // ...\n}\n```\nThis also reports a lint error react/require-default-props in this stateless React component form:\n14:3  error  propType \"b\" is not required, but has no corresponding defaultProp declaration          react/require-default-props. I don't get why it can't. Any reason?\n```js\ntype FooProps = {\n  ...\n}\nconst Foo = ({\n  ...\n}: FooProps) => {\n  // long implementation\n  ...\n}\nFoo.defaultProps = {\n  ...\n}\n```\nIf the implementation of the component Foo is too long, the type definition and the default value definition would be separated so far. It's low cohesiveness.. I don't get why it can't. Any reason?\n```js\ntype FooProps = {\n  ...\n}\nconst Foo = ({\n  ...\n}: FooProps) => {\n  // long implementation\n  ...\n}\nFoo.defaultProps = {\n  ...\n}\n```\nIf the implementation of the component Foo is too long, the type definition and the default value definition would be separated so far. It's low cohesiveness.. @ljharb changing the param name doesn't help.\nThe linter reports the error on the line where I declare the type:\n```js\ntype LoginMsgContainerProps = {\n  getMsgCodeErrorMsg?: string,   // The linter raises the error on this line and column 24 \n};\n18:24  error  'getMsgCodeErrorMsg' PropType is defined but prop is never used\n                                  react/no-unused-prop-types\n```\nI use the same type for both React component's props and the method shouldComponentUpdate ().. @ljharb changing the param name doesn't help.\nThe linter reports the error on the line where I declare the type:\n```js\ntype LoginMsgContainerProps = {\n  getMsgCodeErrorMsg?: string,   // The linter raises the error on this line and column 24 \n};\n18:24  error  'getMsgCodeErrorMsg' PropType is defined but prop is never used\n                                  react/no-unused-prop-types\n```\nI use the same type for both React component's props and the method shouldComponentUpdate ().. @ljharb yes, get the same error with .propTypes. I did not find that.\nIt produces both react/require-default-props and react/no-unused-prop-types errors, no matter using flowtype or .propTypes.\nI reported react/require-default-props error on a separated issue https://github.com/yannickcr/eslint-plugin-react/issues/1212.. @ljharb yes, get the same error with .propTypes. I did not find that.\nIt produces both react/require-default-props and react/no-unused-prop-types errors, no matter using flowtype or .propTypes.\nI reported react/require-default-props error on a separated issue https://github.com/yannickcr/eslint-plugin-react/issues/1212.. @ljharb OK, thanks.\nAny workaround about this bug for now?. @ljharb OK, thanks.\nAny workaround about this bug for now?. How can I check <Foo bar> to be consider an error with eslint rule react/jsx-boolean-value and forcing to use <Foo bar={true}>?. @ljharb thanks. I got confused with error/warn/off and always/never.\n\"react/jsx-boolean-value\": [2, \"always\"],\nNow it's OK.. ",
    "miraage": "Using recompose package also triggers this as false-positive because props are used outside component (e.g. import { lifecycle } from 'recompose';). @ljharb nope. Only for elements with closing tags. Updated original post.. @ljharb nope. Only for elements with closing tags. Updated original post.. Not quite sure if there is any rationale behind. I prefer such syntax due to decreased overall line length.\nThe main reasons why I personally would like to have a such rule:\n static text in components is potential subject to change and might surpass max-len\n multiple components in single line hurt my eyes; also new props may be added - max-len issues again.. When you open inspector in any browsers' devtools all tags are placed on the new line.\nProbably I'd like to have such behavior, while text nodes may be excluded from this rule.. ",
    "markus101": "Not sure if anyone has taken a look at this yet, it'd be great to get this added if it's acceptable. If I should make any changes, please anything let me know.. ",
    "captbaritone": "Derp! Thanks for catching my over-simplification. Should we close this issue and then open a separate issue to discuss the boolean coercion rule?. ",
    "jamischarles": "@ljharb As far as I can tell this never worked. I went back as far as 2.x: https://github.com/eslint/eslint/blob/2.x/lib/config/config-file.js#L504  \nI was unable to find any code that references plugin. The only place plugin is singular is the cli: option --plugin [String]            Specify plugins. Thx \ud83d\udc4d . ",
    "jpickwell": "@christianharke, the plugin doesn't look for React.Component or React.PureComponent, it looks for Component and PureComponent. Notice the lack of the React. prefix. You could rename your base Component class to BaseComponent or anything that isn't Component or PureComponent and this would stop the plugin from treating the class like a React component.. Looking at the source, the React. prefix (React being the pragma) is treated as optional. So, \nit looks for all of the following:\n\nComponent\nReact.Component\nPureComponent\nReact.PureComponent\n\n(assuming pragma is set to the default of React). I like the idea of an annotation comment. The plugin could check for Component or PureComponent, and if neither of those is present (extended), then check for the annotation comment.. Is there documentation for this optional annotation comment?. I just installed master in one of my projects, and I'm no longer getting the TypeError: Cannot read property 'properties' of undefined error. So #1080 fixed that, which solved my problem. Thanks @jomasti.. ",
    "mladenp": "Ok, i figured it out. If i want to override react plugin rules i need to add react/prop-types: 0. ",
    "selbekk": "Thanks for the lightning fast response there!\nOh sorry, of course. In the async method, the linter now think it is its own component. Therefore, I get linting errors like these:\n'selectedCoverage' is missing in props validation  react/prop-types\n'quantity' is missing in props validation          react/prop-types\non code like this:\n```javascript\nclass SomeClass extends Component {\n  async onAddToCart({ selectedCoverage, quantity }) {\n    // no jsx, just dispatcher calls etc\n  }\nrender() {\n    return \n  }\n}\n```\n. Thanks for the lightning fast response there!\nOh sorry, of course. In the async method, the linter now think it is its own component. Therefore, I get linting errors like these:\n'selectedCoverage' is missing in props validation  react/prop-types\n'quantity' is missing in props validation          react/prop-types\non code like this:\n```javascript\nclass SomeClass extends Component {\n  async onAddToCart({ selectedCoverage, quantity }) {\n    // no jsx, just dispatcher calls etc\n  }\nrender() {\n    return \n  }\n}\n```\n. Thanks for the quick feedback guys :) I'll see if I can reproduce this outside of my application.. Thanks for the quick feedback guys :) I'll see if I can reproduce this outside of my application.. Seems I can't reproduce this either outside of my own code. I'll close this until I have something to contribute.. ",
    "bharley": "I'm having the same issue:\n```js\nclass CertSettings extends React.Component {\n  static propTypes = {\n    onSave: React.PropTypes.func.isRequired,\n    errors: React.PropTypes.array,\n  };\nhandleSubmit = async ({ certificate: certificates, key: keys }) => {\n    if (!certificates || !certificates.length || !keys || !keys.length) {\n      return;\n    }\nconst { onSave } = this.props;\nawait onSave(crtContents, keyContents);\n\n};\n// ...\n}\n```\nResults in the following linting errors:\n'certificate' is missing in props validation  react/prop-types\n'key' is missing in props validation          react/prop-types. @ljharb: It does not have a problem with that, no.\nI trimmed down the function to show the relevant parts. It does look silly though...\nYou know what, that got me thinking... I played around with the code to it reproduce. This has issues:\n```js\nexport class Example extends React.Component {\n  static propTypes = {\n    certificates: React.PropTypes.array,\n    onSave: React.PropTypes.func.isRequired,\n    onDelete: React.PropTypes.func.isRequired,\n    deleteFingerprint: React.PropTypes.string.isRequired,\n  };\nhandleDeleteConfirm = () => {\n    const { deleteFingerprint } = this.props;\n    this.props.onDelete(deleteFingerprint);\n  };\nhandleSubmit = async ({ certificate: certificates, key: keys }) => {\n    if (!certificates || !certificates.length || !keys || !keys.length) {\n      return;\n    }\nconst { onSave } = this.props;\nawait onSave(certificates, keys);\n\n};\n}\n```\nbut this doesn't\n```js\nexport class Example extends React.Component {\n  static propTypes = {\n    certificates: React.PropTypes.array,\n    onSave: React.PropTypes.func.isRequired,\n    onDelete: React.PropTypes.func.isRequired,\n    deleteFingerprint: React.PropTypes.string.isRequired,\n  };\nhandleSubmit = async ({ certificate: certificates, key: keys }) => {\n    if (!certificates || !certificates.length || !keys || !keys.length) {\n      return;\n    }\nconst { onSave } = this.props;\nawait onSave(certificates, keys);\n\n};\n}\n```. ",
    "thomsta": "Is there something new about this issue?. ",
    "golopot": "I cannot reproduce this. Maybe it is fixed?. I cannot reproduce this. Seemed to be fixed.. Maybe the current indent behavior is actually correct. I convinced myself when I compare it with other cases and found them consistent:\n```javascript\n// The following are all considered correct now.\nconst Foo1 = cond\n  ? \n  : null;\nconst Foo2 = cond && (\n  1 && \n);\nconst Foo3 = cond\n  ? someFn(\n    a,\n    b\n  )\n  : null;\n```\n. Is it ok to validate html tags by this package html-tags ?\n. thanks. Added. Updated. ",
    "mlee": "If it's a requirement that a rule apply to class-based components then I am happy to close this issue.. ",
    "Augustin82": "We have been encountering the same bug (on an SFC).. ",
    "linuxonrails": "Same problem :-( \n```jsx\nimport React from 'react';\ntype User = {\n  country: string;\n};\nexport default ({ user }: { user: User }) => (\n  \n    { user.country }\n  \n);\n```\n'user.country' PropType is defined but prop is never used (react/no-unused-prop-types). ",
    "nc-babelv": "Ah ok, that makes sense, thanks.  We put functions like that on the TestComponent for configurability, so it seems like that function should just be returning just the content, and not the element thats wrapping it.  Thanks again!. ",
    "interactivellama": "@khankuan We use ref callacks for onRequestFocus parameters in our UI library for accessibility if the app wants to prevent focus from jumping and then also for portal mounts (separate subtrees) to name to. \nMy suggestion is implement something like this:\nthis.props.onCalendarFocus(event, { direction, isCalendarFocused: false, ref: this.previousMonthRef });. I'm not very familiar with what AST provides, but I assumed that there's be an object name lookup and then another lookup for it's parent that would be React. It'd flakey, of course, if React was not the name of the library in the file, etc., but that would be an edge case. I'll need to AST parse some code to figure out a true suggestion.. ",
    "Eschon": "This is probably related to / a duplicate of #811 . ",
    "preco21": "If so..\nBut I guess this kind of pattern is commonly used on stateless functions. So, this is reasonable to me.\nIn order to realize this pattern works, may I request another rule or option?. @ljharb Here we go :) Please review the changes if there are any other changes needed.. Got it, I'll update it.. ",
    "bradennapier": "Hmm - yet the documentation for Flow / React specifically tell you to use default values this way and actually would not support propTypes.\njs\n// @ https://flow.org/en/docs/frameworks/react/\nlet MyComponent = ({ foo, bar = 2 }: { foo: number, bar?: number }) => {\n  return <div>{foo + bar}</div>;\n};. Hmm - yet the documentation for Flow / React specifically tell you to use default values this way and actually would not support propTypes.\njs\n// @ https://flow.org/en/docs/frameworks/react/\nlet MyComponent = ({ foo, bar = 2 }: { foo: number, bar?: number }) => {\n  return <div>{foo + bar}</div>;\n};. #truth -- I switched to using defaultProps already and working well. Would be cool to have a plugin to automatically convert to defaultProps in this situations -- although I know there could be times default parameters are the desired effect (when it executes a function, etc).  . #truth -- I switched to using defaultProps already and working well. Would be cool to have a plugin to automatically convert to defaultProps in this situations -- although I know there could be times default parameters are the desired effect (when it executes a function, etc).  . Every single file in my project is now errors - no react imported or used anywhere close.  Seems you guys just look for any variable calls \"props\" or \"context\" and expect you're in a react component...\n```javascript\nexport default (context: $Context) => ({\n  extensions: ['.js', '.jsx', '.json'],\n  modules: [\n    /\n     * Resolve imports throughout the application in this order.\n     * This allows us to import various parts of the application\n     * easier for better organization.\n     \n     * Modules always resolve top-down.\n     /\n    context.dirs.view(),\n    path.join(context.dirs.src(), 'libraries'),\n    'shared',\n    'node_modules',\n  ],\n});\n```\n\nreact/destructuring-assignment. ",
    "AlexanderTserkovniy": "Hi guys,\nIn my opinion there should be at least an option to tell that require-default-props should pass if there is default parameter is set.\n``\nconst Button = ({\n  children = 'Cancel', intent = 'primary', className, size, loading = false, ...rest\n}) => (\n  <button\n    {...rest}\n    className={classnames(styles[intent], className, {\n      [styles[size-${size}`]]: size,\n      [styles['loading-disabled']]: rest.disabled && loading,\n    })}\n\n{loading ? <Spinner height=\"100%\" /> : children}\n\n\n);\n```\n\nintent in this case has default parameter (defaultProp). I do not want to repeat myself, if I write default parameter for some property in function arguments that should be considered as defaultProp.\nWould you be so kind to add this option?. ",
    "alex-deas": "I also have a similar issue which looks to be related:\n```javascript\ntype Option =\n    {|\n        value: string;\n        id: string;\n    |}\ntype PropType =\n    {|\n        someText: string;\n        someMoreText: string;\n        options: Option[];\n    |}\nconst Component = (props: PropType) => (\n    \n        { props.someText }\n        { props.options.map(({ value, id }) =>\n            {value}\n{props.someMoreText}\n        }\n    \n)\n```\neslint will raise an error for the values destructured by mapping over options and for props.someMoreText.\nDestructuring props resolves the issue. Although it's not idea as I like to make the source of values transparent.. ",
    "umidbekkarimov": "@ljharb oh, guess it fixed already, can not reproduce it. ",
    "MicroBenz": "@hugihlynsson Problem Solved! Thank you :). ",
    "wyze": "Closing as the PR to fix was merged and released in 6.10.0.. When you say \"update this\", are you referring to the rule, to throw an error if it can't find a variable? If so, I think that should be a separate PR.\nIf you are referring to the test case when you say \"update this\", then when making the requested changes, the invalid test still passes with errors: [] so I am not sure there is much difference between what you are suggesting and what I added.. Well, technically, my fix prevented this, but if for some reason you do multiple assignments, it would trigger the original error again:\njs\nimport type ImportedProps from \"fake\";\ntype NestedProps = ImportedProps;\ntype Props = NestedProps;\nfunction Hello(props: Props) {\n  return <div>Hello {props.name.firstname}</div>;\n}. ",
    "cr0cK": "up!. ",
    "hmhealey": "@ljharb Wow, I did not know that existed. That's a lot nicer. Thanks!\nI'll still try to take a look at fixing this if I get a chance. I'm curious to learn a bit about the internals of ESLint plugins.. I spent some time looking at this over the weekend and judging by the code for the constructor-super rule, it would require 200-300 lines of code to check to make sure that the constructor or its parent sets this.shouldComponentUpdate at all times. That seems like a lot just to support an outdated way of creating pure components, so I don't think this needs to be fixed right now.. ",
    "lwassermann": "Although it is rather painful, there is a way to work around this, which sacrifices both readability and understandability:\njavascript\nMyComponent.propTypes = {\n  customProp: { isRequired(props, propName) {\n      ...\n    }\n  }.isRequired,\n};\n\u2026. Although it is rather painful, there is a way to work around this, which sacrifices both readability and understandability:\njavascript\nMyComponent.propTypes = {\n  customProp: { isRequired(props, propName) {\n      ...\n    }\n  }.isRequired,\n};\n\u2026. ",
    "wKich": "I figured out what code lead to error\njs\n[].map((child, index) => React.cloneElement(child, { ...child.props })). >Weirdly, I had tried doing a similar fix two days ago and it ended up just leading to a different error.\nBecause  afterif statement goes checkPropValue(prop.value); and prop.value is undefined. So, yeah, you got that error.. Fix #1021 . Done. ",
    "lasergoat": "@ljharb yes, great idea, here is the source of that file.\nbtw, it's context.getFilename() with a lowercase \"n\".\n```jsx\nimport React, { PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport { get, omit, isEqual, omitBy, isNil } from 'lodash';\nimport Search from '../components/search-component';\nimport Loading from '../components/loading-component';\nimport ErrorComponent from '../components/error-component';\nimport { actions } from 'react-redux-form';\nimport history from '../history';\nclass Collection extends React.Component {\n  constructor(props) {\n    super(props);\nthis.state = {\n  page: props.page,\n  state: 'loading',\n  keywords: '',\n  status: '',\n  method: '',\n  type: '',\n  success: '',\n};\n\n}\n  componentWillMount() {\n    this.loadCollection(this.props);\n  }\ncomponentWillReceiveProps(nextProps) {\n    if (!isEqual(this.props.location.query, nextProps.location.query)) {\n      this.loadCollection(nextProps);\n    }\n  }\nloadCollection(props) {\n    const { location } = props;\nconst {\n  getAllAction,\n  dispatch,\n  onLoad,\n  resourceType,\n} = this.props;\n\nconst params = {\n  page: get(location, 'query.page', 1),\n  success: get(location, 'query.success'),\n  status: get(location, 'query.status'),\n  method: get(location, 'query.method'),\n  type: get(location, 'query.type'),\n  sort: get(location, 'query.sort'),\n  order: get(location, 'query.order'),\n  schedule_id: get(location, 'query.schedule_id'),\n  customer_id: get(location, 'query.customer_id'),\n  keywords: get(location, 'query.keywords'),\n  startDate: get(location, 'query.startDate'),\n  endDate: get(location, 'query.endDate'),\n  resourceType,\n};\n\nthis.setState({\n  state: 'loading',\n});\n\ndispatch(getAllAction(\n  omitBy(params, isNil),\n  (collection) => {\n    if (onLoad) onLoad(collection);\n    this.setState({\n      state: 'ready',\n      collection,\n    });\n  }));\n\n}\nrenderPagination() {\n    const { collection } = this.props;\n    const { page = 1 } = this.props.location.query;\nreturn (\n  <div className=\"ui-pagination\">\n    <span className=\"ui-text\">\n      {collection.total} results - Page {collection.data.length\n        ? collection.current_page\n        : 0} of {collection.last_page}\n    </span>\n    <button\n      className=\"ui-button\"\n      disabled={+page === 1}\n      onClick={() => history.push({\n        pathname: this.props.location.pathname,\n        query: { ...this.props.location.query, page: +page - 1 },\n      })}\n      title=\"Previous Page\"\n    >\n      <i className=\"zmdi zmdi-chevron-left\" />\n      <span className=\"ui-text\">PREV</span>\n    </button>\n    <button\n      className=\"ui-button\"\n      disabled={+page === +collection.last_page}\n      onClick={() => history.push({\n        pathname: this.props.location.pathname,\n        query: { ...this.props.location.query, page: +page + 1 },\n      })}\n      title=\"Next Page\"\n    >\n      <span className=\"ui-text\">NEXT</span>\n      <i className=\"zmdi zmdi-chevron-right\" />\n    </button>\n  </div>\n);\n\n}\nrender() {\n    const {\n      onSelect,\n      name,\n      itemComponent,\n      collection,\n      newItems = [],\n      dateRange,\n      showAdvancedSearch = true,\n      dispatch,\n      model,\n      location,\n      sort,\n      filters,\n      getFilterHandler,\n    } = this.props;\nconst empty = !get(collection, 'data.length', false);\nconst { state } = this.state;\n\nconst className = `ui-list -table ${empty ? '-empty' : ''}`;\nconst allowedProps = omit(this.props, Object.keys(Collection.propTypes));\n\nconst fullCollection = [...newItems, ...get(collection, 'data', [])];\n\nreturn (\n  <div className=\"ui-customers\">\n    {this.props.children}\n    <Search\n      placeholder={`Search for ${name}...`}\n      onSearch={params => history.push({\n        pathname: this.props.location.pathname,\n        query: { ...this.props.location.query, ...params },\n      })}\n      dateRange={dateRange}\n      showAdvanced={showAdvancedSearch}\n      location={location}\n      sort={sort}\n      filters={filters}\n      getFilterHandler={getFilterHandler}\n    />\n    <div className={className}>\n      {state === 'loading'\n        ?\n          <Loading message={`Loading ${name}...`} />\n        :\n        fullCollection.map((item, index) =>\n          React.createElement(\n            itemComponent,\n            {\n              data: item,\n              className: 'ui-item -entity -bar',\n              onClick: () => onSelect(item),\n              key: item.id,\n              index,\n              onUpdate: record =>\n                dispatch(actions.change(\n                  `${model}.data[${index}]`, record)),\n              ...allowedProps,\n            }),\n          )\n      }\n      {!fullCollection.length && state === 'ready' && (\n        <ErrorComponent message={`No ${name} Yet!`} />\n      )}\n    </div>\n    {state === 'ready' && this.renderPagination()}\n  </div>\n);\n\n}\n}\nCollection.propTypes = {\n  onSelect: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  model: PropTypes.string.isRequired,\n  itemComponent: PropTypes.func,\n  getAllAction: PropTypes.func.isRequired,\n  page: PropTypes.number,\n  onChangeParams: PropTypes.func,\n  newItems: PropTypes.array,\n  dateRange: PropTypes.bool,\n  location: PropTypes.object.isRequired,\n};\nCollection.defaultProps = {\n  page: 1,\n  itemComponent: 'div',\n  dateRange: true,\n};\nconst mapStateToProps = (store, props) => ({\n  collection: store[props.model],\n});\nexport default connect(mapStateToProps)(Collection);\n```\n@wKich your fix (#1023) works! It allows lint to run correctly. thanks! Weirdly, I had tried doing a similar fix two days ago and it ended up just leading to a different error. \nmy fix was:\nif (prop.key && prop.key.name !== 'key') {\nwhich leads to: \nCannot read property 'type' of undefined\nTypeError: Cannot read property 'type' of undefined\n    at isArrayIndex (/Users/daniel/project/node_modules/eslint-plugin-react/lib/rules/no-array-index-key.js:41:18). @wKich can you give me more insight about this linting error?\nshouldn't I be able to do this?\n``\n<tr key={item${i}`}>\n// and\n // etc\n```\n\neverywhere I'm mapping, I don't have an id. I get that this check is to avoid duplicate keys, but I should still be able to make my own key with the index in it right?\n\nedit: for now i've just disabled the rule since it's apparently too strict for me:\n\n```\n    \"react/no-array-index-key\": 0,\n```. ok, once the fix goes out to npm i'll reenable the rule and then disable it inline each place I can't do better. thanks for the help on this..",
    "sholladay": "I am trying to understand the intention behind the allowRequiredDefaults option and why it defaults to false. Can you provide some insight @webOS101?\nSurely this code is okay?\njs\nComponent.propTypes = {\n  name : PropTypes.string.isRequired\n};\nComponent.defaultProps = {\n  name : 'John Doe'\n};. That is incorrect. Default props are applied before type checking happens.\nFrom Typechecking With PropTypes:\n\nThe propTypes typechecking happens after defaultProps are resolved, so typechecking will also apply to the defaultProps.\n\nI also confirmed that this includes isRequired by playing around with my React app. Admittedly, React is still a bit new to me, so I could be missing something. But this is in line with what I would expect.\nOutside of the React ecosystem, code like this is pretty normal...\njs\nconst currentUsername = 'John Doe';  // something dynamic\nconst getUser = (username = currentUsername) {\n    if (!username) {\n        throw new Error('Username is required');\n    }\n    // return { ... }\n}\nI definitely think it's a good thing to mark something as required, even if it has a default.. To each their own, I guess. Thanks for providing an option. I am using isRequired to say that it must have a value, not that the caller of the component must provide one. I'm happy to have a sane default (and to be able to use it) but maybe tomorrow that won't be the case and it will still need a value, so I'm glad to be able to specify these things separately. At the very least, it will make refactoring easier.. ",
    "aikar": "Couldn't it see that it also saw the BaseComponent extended React.Component and keep state of classes that extend it?\nYou don't have to literally walk the chain as runtime would, but \"I know Component of this name extends React.Component, and I see this other Component extends that Component\"\nPlease reconsider trying this, as just because Facebook didn't find a use case, doesn't mean others can't.\nAn inheritance model lets one use PropTypes to check instanceof a Component to ensure a certain component type has been passed, allowing variations to be supplied, where as composition does not provide that.. ",
    "netpoetica": "Thanks! Yes, I agree with you - people should refer to the docs. But, in a pinch, someone who comes here first won't get stuck and open a ticket for you later ;) cheers, thanks for clarifying. ",
    "tommai78101": "I'm not sure where to change that. Do you know where to change this?\nEDIT: I did see this:\n'sort-prop-types': require('./lib/rules/sort-prop-types'),\nBut nothing that says to use jsx-sort-prop-types anywhere in the index.js.. Yep, found it in .eslintrc. Just renaming the rule name fixes it. Thanks.. ",
    "jonathanchrisp": "@yannickcr thanks for the quick response on this issue. I've checked my babel-eslint version and I'm using version \"babel-eslint\": \"6.0.4\". However, the fix to fallback to get the key sounds great, thanks again for looking into this.. @yannickcr just to note I applied the patch locally and I'm no longer able to replicate the issue \ud83c\udf1f  I look forward to your release this week \ud83d\udc83  . ",
    "KulakovSerg": "In a lot of cases list of default props is good enough. When really many components already have default props described it is not so necessary to spend time on propTypes.\nBut eslint do nothing when some of them changes and lists are no more actual. ",
    "AnthonyAstige": "The docs for this rule say --fix for this should work now.\nNote: I had to upgrade my eslint for this to work (going from 3.19.0 to 4.19.1 worked) . ",
    "minedeljkovic": "\nObviously the application code itself is broken, but I think this should fail gracefully\n\nThere is a valid need for recursive types even in prop-types, it is not always result of a mistake. We have a lot in our app, so we had to temporary remove react/prop-types rule.\nOlder dupe of this is #913 . ",
    "OscarBarrett": "Could a new release be published that includes this please?. ",
    "mikeboyle": "Thanks for the clarification! I think maybe the text in the docs could be updated to reflect that. It's a feature we were already get from React, as you say, and not a feature of the plugin or rule. . ",
    "guywald1": "Thanks for the reply. I am aware, yet for a second there I thought this was unwanted behavior. Appreciate the clarification.. ",
    "jeffvandyke": "It's WAY too strong of a rule, IMO. I've got an array of strings, how can I possibly concisely display it in a list of 's without using index as the key? It's simply the cleanest way to do it without React throwing a warning.\nI still can't think of how you could determine if a component is \"simple enough\" to not have a useful id field. That would be best, if possible, but I don't think it is.. As a matter of fact, at the bottom of the Keys section in React docs, it explicitly says: \"When you don't have stable IDs for rendered items, you may use the item index as a key as a last resort\". For my use case above, which is not rare, what better alternative is there?. So I've thought through this a bit, and I'm willing to grant that perhaps my project is a bit more unique, but I find that even after having some element-based keys as you suggested, about 40% of my project's map(...) calls are on arrays of simple data types that are unsuitable as keys due to their non-uniqueness. The arrays are mostly generated from processing raw data where the position in the array really does uniquely identify what that element's identifier is.\nI can probably get by with eslint-disable comments, but it feels like a workaround, especially given that React's docs recognize this use case. I'm just not sure if it's that rare of a use case for most other projects either.. @ljharb ...until decorators are also stage 4, then an @autobind on the handler is much less jumping around than binding in constructors.. @ljharb ...until decorators are also stage 4, then an @autobind on the handler is much less jumping around than binding in constructors.. ",
    "PatNeedham": "@ljharb I'm curious, what is the reasoning behind this rule's existence? If one were to map over an array of strings, where there were some duplicates, wouldn't one have to include the array element's index as part of the component key to ensure uniqueness?. ",
    "GGAlanSmithee": "Some additional info which might help:\nthis will error:\n```javascript\nonSubmit = async (e) => {\n    this.setState({loggingIn: true, success: false, message: null})\nconst {email, password} = this.state\nconst {login, setAuthenticated} = this.props // not detected by eslint\n\nconst {success, message} = await login(email, password)\n\nthis.setState({loggingIn: false, success, message})\nsetAuthenticated(success)\n\nif (success) {\n    const {router, location: {state: {nextPathname} = {}}} = this.props\n\n    setTimeout(() => {\n        router.push(nextPathname || '/')\n    }, 1000)\n}\n\n}\n```\nthis will not error:\n```javascript\nonSubmit = async (e) => {\n    this.setState({loggingIn: true, success: false, message: null})\nconst {email, password} = this.state\n// properly detected by eslint\nconst {login, setAuthenticated, router, location: {state: {nextPathname} = {}}} = this.props\n\nconst {success, message} = await login(email, password)\nthis.setState({loggingIn: false, success, message})\nsetAuthenticated(success)\n\nif (success) {\n    setTimeout(() => {\n        router.push(nextPathname || '/')\n    }, 1000)\n}\n\n}\n```\nThe only difference between these snippets is how this.props is destructured. In the first example, location and router props are destructured separately, and in the second example all props are accessed together. This is probably not the whole solution, since @isnifer isn't destructuring at all. But mabe you can try and see if this works;\njavascript\n{\n  code: [\n    'export class Example extends Component {',\n    '  static propTypes = {',\n    '    failed: PropTypes.func.isRequired,',\n    '    loadUserProfile: PropTypes.func.isRequired,',\n    '  }',\n    '  handleLogin = async () => {',\n    '    const {failed, loadUserProfile} = this.props;',\n    '    await failed();',\n    '    await loadUserProfile();',\n    '  };',\n    '}'\n  ].join('\\n'),\n  parser: 'babel-eslint'\n},. ",
    "Wildhoney": "@TrevorSayre similar for me \u2014 using eslint-plugin-react@7.1.0.. @TrevorSayre similar for me \u2014 using eslint-plugin-react@7.1.0.. I have a related issue.\nIn my propTypes I have:\njavascript\nstatic propTypes = {\n    onToggleShortlist: PropTypes.func.isRequired\n};\nWhich is then used in an async method:\njavascript\nasync handleToggleShortlist(isShortlisted) {\n    // ...\n    const type = // ...\n    await this.props.onToggleShortlist(type, this.props.model.location.locationId);\n    // ...\n}\nHowever when running ESLint I get: onToggleShortlist PropType is defined but prop is never used  react/no-unused-prop-types.\nWithout async it finds the prop perfectly fine.\nWhere package.json is:\n\"babel-eslint\": \"~7.2.3\",\n\"eslint-config-xo-react\": \"~0.12.0\",\n\"eslint-plugin-react\": \"~7.1.0\". Updated and all seems to be okay now.\n\"babel-eslint\": \"~8.0.3\",\n\"eslint-config-xo-react\": \"~0.15.0\",\n\"eslint-plugin-react\": \"~7.5.1\". ",
    "matthargett": "I was just thinking of copying no-did-update-set-state and submitting a PR, so yes. Expect one on Monday or so.. @adnasa pleas go for it! I thought I would knock it out that day, but other things keep getting in the way :). @adnasa pleas go for it! I thought I would knock it out that day, but other things keep getting in the way :). What if you were able to configure the component/element types you wanted to require the testID on. Then in the eslintconfig one person could mandate that all Button elements required a testID and would error if missing, Text elements would get a warning if they were missing a testID, but others would emit nothing. This would also allow for custom/native components not in the core framework to be covered by a custom policy.. ",
    "bvaughn": "\nI don't think so. Putting refs on compound elements is pretty much always a bad idea. I think this could actually be a really useful linting rule that helps you write more declarative code.\n\nreact-virtualized uses this type of ref to enable some really handy composition (eg List and Table decorate Grid). Other decorator-type libs of mine like react-virtualized-select use this kind of ref to managed things like focus and sizing.\nI don't think it's a good idea to treat it as always-bad.. Sure. I agree with that.\nWe should aim to communicate when it's appropriate though so people don't make tl;dr assumptions and miss out on a useful tool (albeit with limited application).. > Does anyone have some advice for me on language to use for an edit?\n@prometheas This recent addition to the React docs may be helpful: https://facebook.github.io/react/docs/refs-and-the-dom.html#when-to-use-refs. Ah, yes. Thanks for pointing that out.. ",
    "gorangajic": "maybe it can be helpful, for me it's throwing when using template string\njsx\n<Route\n    path=\"/dashboard\"\n    render={props => <Redirect to={`/?login&next=${props.location.pathname}`} />}\n/>. ",
    "rosston": "Yeah, I'll just close this.\nI was specifically looking for a way to auto-bind instance methods while keeping the effectiveness of prefer-stateless-function (putting something along the lines of autoBind(this) 1 in your constructor quiets the prefer-stateless-function warning even if you have no event handlers/state). An MDN-style \"mix-in\" was simply a way to inject some extra code in the constructor without quieting prefer-stateless-function.\nAnyway, your comment pushed me to find another way, something along the lines of @autobind from core-decorators.\n[1] https://github.com/cassiozen/React-autobind. ",
    "arnarthor": "Yup definitely. I didn't expect this to get fixed since it's a really hard problem to solve. But adding something to the docs would be beneficial.\nAlso regarding if #1049 gets through to make sure it's expressed as part of the recommended setup.\nOtherwise awesome stuff, hadn't thought about this one when assigning my keys \ud83d\udc4d . ",
    "alexkrolick": "It does with babel-eslint. Also reproducible if you destructure this:\njs\nconst { props, someMethod, someAttr } = this;\nSometimes it is nice to keep props namespaced.\nAnyways, here's the line: https://github.com/yannickcr/eslint-plugin-react/blob/master/lib/rules/no-unused-prop-types.js#L110\nThis would be fixed if props.yyy was allowed in class contexts as well as stateless components. ",
    "omerzach": "Ah I was hoping I could squash the commits from within the GitHub UI but I guess not. Ah I was hoping I could squash the commits from within the GitHub UI but I guess not. I'm bad at GitHub so I'm going to close this and open a new one. Sorry.. I'm bad at GitHub so I'm going to close this and open a new one. Sorry.. ",
    "emirdeliz": "+1. ",
    "fmoliveira": "Hey @jomasti I'm updating from version 6.10.2 to 7.8.2 and I'm wondering what's happened to the parameter indentLogicalExpressions, which isn't accepted in the react/jsx-indent rule anymore. I haven't found any sign of it neither in the docs or in the source code.\nQuestion: Was this parameter discontinued, or replaced for another rule?\nMy issue: We had it set to false in version 6.10.2 because of #1117 and we're afraid the problem happens again if this parameter had been replaced for another rule.. Thanks a million, @ljharb ! :)\nI've seen today that it was removed in 6.10.3 but we never updated it because we were caught in a long project rush so it's very relieving to hear that from you. Super thanks again! \ud83d\ude03 . ",
    "pfarnach": "I don't have access to that repo anymore and this may have been fixed by now so we can close.. I don't have access to that repo anymore and this may have been fixed by now so we can close.. ",
    "nwwells": "bump @yannickcr or @lencioni?. ",
    "nickbouton": "@ljharb Sure, added #1181 & removed my comment here.. I'll post an example tomorrow, this is using ES5 / React.createClass syntax mind you.. @paulruescher @yannickcr This was happening to me when upgrading to React 15.5.4 as well, FWIW.\nEdit: After converting the same file I was having issues with to using ES6 class syntax, the react/no-multi-comp warning no longer shows up.. Same problem here as well. If you add props or anything beyond a simple return to render, though, it stops complaining.. ",
    "arian": "This fixes another false positive for the display-name rule:\ndiff\ndiff --git a/tests/lib/rules/display-name.js b/tests/lib/rules/display-name.js\nindex 3f8db25..83a3772 100644\n--- a/tests/lib/rules/display-name.js\n+++ b/tests/lib/rules/display-name.js\n@@ -349,6 +349,17 @@ ruleTester.run('display-name', rule, {\n     parser: 'babel-eslint'\n   }, {\n     code: [\n+      'import React, {createElement} from \"react\";',\n+      'const SomeComponent = (props) => {',\n+      '  const {foo, bar} = props;',\n+      '  return someComponentFactory({',\n+      '    onClick: () => foo(bar(\"x\"))',\n+      '  });',\n+      '};'\n+    ].join('\\n'),\n+    parser: 'babel-eslint'\n+  }, {\n+    code: [\n       'import React, {Component} from \"react\";',\n       'function someDecorator(ComposedComponent) {',\n       '  return class MyDecorator extends Component {',\nI wrote a test for it, but it seems this pull request already fixed it in master. For the tagged version 6.10.0 this test fails.. ",
    "sfletche": "@ljharb: I can see how it would be difficult (if not impossible) to accurately detect an SFC 100% of the time...\nWhat about a partial solution that detects potential SFCs through the presence of the propTypes property? \n(in the above example, MyComponent has a propTypes property, while getMessage does not)\nWhile this (and other potential mitigating strategies) would not prevent all false negatives, they would decrease the number of false negatives.. Ah.  I see the problem...\nHas there been any consideration to decomposing the rule?\nMaybe one rule that detects when propTypes are not declared on a component, and another rule that detects props that are not among the declared propTypes.\nOr an option that would trigger missing props validations only when propTypes is declared on a component?. ",
    "nfantone": "Same problem over here.\n\nPropTypes are clearly declared but errors are popping out.. @ljharb In my case, it is a component that happens to call a bunch of JSX generating functions. I'd expect this to be a common approach? Sure, I could turn those functions into a new component - but I sincerely see no point from a usability POV. . Point(s) taken. I still find it to be a bit of a stretch, really. I'm sure there are plenty of things like these in the wild:\njs\nconst getName = (user) => (<li>user.name</li>);\nI may be wrong here, but I believe it's not realistic to expect every single JSX-returning-function to be turned into a whole new component.. ",
    "lancempoe": "@ljharb If the policy at AirBnB is to only have components return jsx, how would you handle the case below where we are returning one component or the other depending on a check. \n```\nimport React, { PropTypes } from 'react';\nfunction MyComponent({ name }) {\n  const someParams = {\n    userName: name,\n  };\nfunction getMessage({ userName }) {\n    // THE FOLLOWING RETURN STATEMENT CAUSES LINTING COMPLAINTS\n    // 9:25 error  'userName' is missing in props validation  react/prop-types\n if (userName === 'something') {\n   return <MyReactComponent/>;\n } else {\n   return <MyOtherReactComponent/>;\n }\n\n}\nreturn (\n    \n      { getMessage(someParams) }\n    \n  );\n}\nMyComponent.propTypes = {\n  name: PropTypes.string.isRequired,\n};\nexport default MyComponent;\n```. I have always felt (and heard) that having logic in the render is an antipattern. Is AirBnB advocating for logic to be within a render?. ",
    "bogdan-zaharia-hs": "It seems that it would also be a performance issue with turning the functions into SFC.\nAlso, maybe a way to detect a SFC could be to check that the name is in TitleCase instead of camelCase.. ",
    "vkbansal": "When will this be merged? facing the same issue.. When will this be merged? facing the same issue.. ",
    "jonandrewdavis": "Would leaving a comment here help this get merged? Having this issue and found that it's alllmost there.  Keep up the good work here!\n\ud83d\udc4d \n. ",
    "rkkautsar": "Having this issue and seeing the fix is already in the master but not released yet...\nWhen is the next release scheduled?. ",
    "mockdeep": "Yeah, a configuration would be good, I think. Sometimes we like to assign local props or use a function to pull them out, which I think we'd like to still be able to do.\n```jsx\nfunction MyComponent(props) {\n  return \n}\nfunction subComponentProps(props) {\n  return {\n    one_prop,\n    two_prop: two_prop * 2\n  };\n}\n```\nHaven't landed on a clear style for that, though.. @iegik yeah, that could work if it's too hard to implement my suggestion above.. Ah, I didn't realize we could do self-closing divs in jsx. Still, I don't think newlines between tags are considered children. Hacked together this quick test:\n```jsx\nimport React from 'react';\nimport { mount } from 'enzyme';\nclass Parent extends React.Component {\nrender() {\n    console.log(this.props.children);\n    return {this.props.children};\n  }\n}\nit('does stuff', () => {\n  mount(); // => undefined\n  mount(\n); // => undefined\n  mount(); // => undefined\n  mount( ); // => ' '\n  mount(\n  </Parent>); // => `undefined`\n\nmount(foo); // => 'foo'\n})\n``. Ha, nice. I started typingReactDOMand then fell back to what I knew off the top of my head.. Just ran into this too. @ljharb why should it warn on the second case?. nm, my situation was different. I had a stray semi-colon after a jsx tag.. Alrighty, opened a new issue at https://github.com/eslint/eslint/issues/9657. I guess it depends on your rationale. For me it's about minimizing repetitive and/or unnecessary code, and from my perspective it's a clear benefit when we eliminate 3 or more repetitions, it's a little borderline with 2, and at 1 it kind of feels like the tail wagging the dog.. These sound like some valid concerns, though it doesn't seem like thedestructuring-assignment` rule is necessarily the best tool to handle them.\nFor the this binding issue, with or without the rule I still end up with a similar runtime error that I need to debug. What would be amazing is to have a rule that checks on the parent if we're passing this.someMethod as a prop, and if that method refers to this, and if said method is not bound. It wouldn't cover cases where you're passing a method from another object, but would still probably cover better than 90% of cases where the binding even matters, at least for me.\nFor the case of passing props or state, I don't think the current implementation of this rule really covers that. It also seems like a good case for another rule entirely that explicitly disallows it. The idea for a no-spread-props rule at least partially covers it, though.\nI'm not sure I understand your point about object access. Is it just an aesthetic preference to avoid referencing the object, or is there something else I'm missing?. @ljharb are there benchmarks on the overhead of object lookup? It seems like that's the sort of thing that would have negligible performance impact, even at pretty large scale.. @ljharb are there benchmarks on the overhead of object lookup? It seems like that's the sort of thing that would have negligible performance impact, even at pretty large scale.. It looks like this:\njsx\nrender() {\n  return (\n    <div>\n      <table>\n        <thead>{TABLE_HEADERS}</thead>\n      </table>\n    </div>\n  );\n}\nI realized that the 4 instead of 2 bit was because it measures the nesting of all elements in the file, regardless of indirection, but still the count going up is a little odd.. ",
    "thoiberg": "If no one else is actively working on this I wouldn't mind taking a shot. I've run into a few cases where as components have grown using {...this.props} has ended up passing in 10 props to a child component when it only needs 3.. @benmonro no sorry, I got a little way's in but work got in the way \ud83d\ude1e. Feel free to take over if you have the desire \ud83d\ude04  . ",
    "sanjayp": "Just adding that I'd like to see this rule added as well since there are potential performance implications, as noted here: https://flexport.engineering/optimizing-react-rendering-part-1-9634469dca02#63e7.. ",
    "KutnerBitsrc": "yes this is needed.\nA lot of places in our code have {...props} and it makes the code unmaintainable. yes this is needed.\nA lot of places in our code have {...props} and it makes the code unmaintainable. ",
    "ashbhir": "I can take this up, will raise a PR soon. > I think this will need an exceptions array option as well, since spreading props is actually necessary for HOCs.\n\nAdditionally, I think it would be ideal to provide another option that controls whether this rule applies to custom component elements, or HTML elements, or both.\n\nAdded option allowedFor for catering exceptions, namely: HTMLTags, Components and selective custom components.. > hmm. Thanks for adding that! We probably should have discussed the schema a bit more :-)\n\nLet's do something like this:\njs\n{\n  html: 'enforce'/'ignore',\n  custom: 'enforce'/'ignore',\n  exceptions: ['ComponentName', 'OtherComponentName'],\n}\nand make sure it errors if html and custom are both false. An \"exception\" will always flip the resulting html or custom setting for that component - ie, html set to ignore, with an exception of div will enforce on a div; custom set to enforce with an exception of Foo will ignore Foo.\n\nSure, made the respective changes. \nand make sure it errors ifhtmlandcustomare both false. How do we do this in schema ?. > That's a good question :-) it'll probably have to be something like:\n\nallOf: [\n  {\n    oneOf: [\n      bothEnforce,\n      htmlEnforceCustomIgnore,\n      htmlIgnoreCustomEnforce\n    ],\n  },\n  exceptionsSchema\n]\n\nI think the allOf won't work as then one has to mention all properties. But one may just want to mention the exceptions assuming others to be set as default.\nAlso, do we really need to restrict both ignore mode? What if one wants to ignore everything barring some very important Custom Components. For them the configuration will be:\n{\n    html: 'ignore',\n    custom: 'ignore',\n    exceptions: ['CustomComponent', 'img']\n}\n@ljharb what do you think?. > ah true, that's a good point.\n\nI'd like the schema to be as explicit as possible. If both are \"ignore\", then exceptions must not be empty.\n\n@ljharb made the requested changes.. Yes, very much agree. Updated. ",
    "RiddleMan": "I already have working prototype ;) I can finish this in upcoming days. \nThis is my second contribution ever. Should I make a pull request and mark it as WIP or make that when everything will be done?. @ljharb Yes, I think it's doable by me. Let me look into this in the next week.\nDo you think, that we should merge what we have here and then add support for createClass?\nOr should I add fixer for that in a scope of this PR?\nFor me both options are ok.. Yes, you are right. We should postpone this line until the rule is fully fixable.. Agree ;) I've saved couple characters, but the readability of previous one is much better.. Yeah, I've made it before you've dropped support for node 0.10. Agree.. Yep!. Good catch! I have to take a deep breath before commit ;). ",
    "akshaymodi9": "@alburritos  Any update on how to solve this issue 'Unable to fix Parsing error: The keyword 'import' is reserved after migration #1100'\nI too am facing the same issue. ",
    "phyllisstein": "Sure thing! Went ahead and dumped the JSX, my .eslintrc.yml, and the error here: https://gist.github.com/phyllisstein/04036a187aa4c2d4195a67cefb4170cb. Let me know if you need anything else!. So I did a little ham-handed investigation and started deleting lines blindly. Turns out it's the handleClick function? Including any of the lines in the range https://gist.github.com/phyllisstein/04036a187aa4c2d4195a67cefb4170cb#file-button-jsx-L58-L64 causes it to throw, whereas deleting it entirely seems to work around the issue. Heaven knows what that portends though.. ",
    "wbinnssmith": "I'm happy to port down to node 0.10 to get this merged sooner, but would rather #1038 be merged :). Rebased and ported back to node 0.10\nHow do you feel about the lack of support for React.createClass()?. Addressed the feedback and implemented createClass support. Components util made quick work of it -- awesome.. @ljharb no problem :). okay @ljharb, just rebased, cleaned things up, and moved some stuff back to node 4 compatible features (where this all started \ud83d\ude02). I can split the tests up using multiple RuleTesters, separating those that parse js compatible with espree + es2015, and those that require babylon with support for experimental features enabled (property initializers and object spread, mainly). Does that sound useful?. @ljharb that's exactly what I ended up doing :)\nping @yannickcr @lencioni @EvHaus. ping! can @yannickcr @lencioni or @EvHaus look at this please?. done.. done.. \ud83c\udf89 Thanks for your help throughout the process, @ljharb!. \ud83c\udf89 Thanks for your help throughout the process, @ljharb!. every MemberExpression should, yeah, which should be limited by the prior condition. cc @rjbailey. ",
    "danielheyman": "Any update on this rule?. Any update on this rule?. ",
    "drifterz28": "found option to fix ignoreCase: true. ",
    "mathieudutour": "fixed in #1106. ",
    "budde377": "@ljharb That was a typo. I have corrected the example.. ",
    "sospedra": "Can confirm on v6.10.3 \nIt's because is inside the map function :/\n. ",
    "akkie": "@ljharb If I remove the type annotation, then I get the same warning message: initialized should be placed after constructor. ",
    "LL782": "I can add the following to notFound.js but that doesn't seem accurate, and I wonder if there is a more global way to do it and associate it with React Router. \njavascript\nNotFound.propTypes = {\n  location: React.PropTypes.string.isRequired,\n};. Thanks @ljharb for the reply. It was the string part that felt inaccurate and object provokes a forbid-prop-type error. \nI've found a way to satisfy ESLint problems and describe the props that the component expects:\n```javascript\nNotFound.propTypes = {\n  location: React.PropTypes.shape({\n    pathname: React.PropTypes.string.isRequired,\n  }),\n};\nNotFound.defaultProps = {\n  location: {\n    pathname: '',\n  },\n};\n```. ",
    "dougbacelar": "@LL782 what about\njavascript\nNotFound.propTypes = {\n  location: React.PropTypes.shape({\n    pathname: React.PropTypes.string.isRequired,\n  }).isRequired,\n};. ",
    "rimatla": "thank you @dougbacelar . thank you @dougbacelar . ",
    "bartolkaruza": "I agree it is related, but the fix for #56 at https://github.com/yannickcr/eslint-plugin-react/commit/70fef7194783c1603f2b7d89e698647706aab658 will not cover the async await case. Could similar logic be added to any calls to setState after an await within the componentDidMount body?  . ",
    "floriancargoet": "I believe that unfortunately, we can't be sure that a given statement is after an await statement: \njs\nasync componentDidMount() {\n    try {\n      if (condition)\u00a0{\n        await someAsyncOperation();\n      }\n      this.setState({ ... }); // here\n    } catch (e) {\n      this.setState({ ... });\n    }\n  }\nDepending on the condition, the line marked // here can be executed synchronously or asynchronously.\nWe can verify this by executing this snippet: \n```js\nasync function f(condition) {\n    if (condition) {\n      await 1;\n    }\n    console.log(\"after condition\");\n}\n// will log \"after call\", then \"after condition\", proving that the execution was asynchronous\nf(true); \nconsole.log(\"after call\");\n// will log \"after condition\", then \"after call\", proving that the execution was synchronous\nf(false); \nconsole.log(\"after call\");\n. I haven't written anything about a \"returned\" value. I'm not saying that `await somethingSync()` is synchronous.\nI'm talking about a not executed await expression. Note that the await line is in an if statement.\nI was surprised by the results, I was expecting an async execution even if the await line isn't executed. \nPlease run my example in the Chrome console and see for yourself.. Exactly. Because of that we can't always statically determine if a setState() is called asynchronously or not. I don't see how we could implement the suggested rule except for the simple cases (e.g. a `setState` immediately after an `await`). . I have a very similar issue:js\nclass SomeComponent extends PureComponent {\n    method({ param }: { param: boolean }) {\n}\n\nrender() {\n    return null;\n}\n\n}\n\n'param' PropType is defined but prop is never used  react/no-unused-prop-types\n```\nWorkaround: the issue disappears if I don't destructure the parameters method(dontDestructure: { param: boolean }) {. You're right, I totally meant destructure. I've edited my message.. ",
    "slorber": "I would also like such an option. When componentDidMount is async it's rarely the case that the user would try to do a setState before having waited for some promise. The other alternative for me is to simply disable this rule, as it's annoying for the devs using async/await. @ljharb not saying to make it a default, just an option to opt-out for overwarn. ",
    "frederikhors": "@ljharb any news on this? Can I help? What do you mean with\n\nI\u2019d prefer to fix the default so it properly warns.\n\n@ljharb?\nCan we use setState in an async componentDidMount() after an await something()?. @ljharb any news on this? Can I help? What do you mean with\n\nI\u2019d prefer to fix the default so it properly warns.\n\n@ljharb?\nCan we use setState in an async componentDidMount() after an await something()?. ",
    "dnalborczyk": "I can't reproduce this, I get an error.\n12:14  error  Expected indentation of 18 space characters but found 13  react/jsx-indent\nI'm using eslint 3.19.0, eslint-plugin-react 6.10.3.. @ljharb  I think this bug (rule) is unrelated to #1694, though browsing through the code, the fix might be the same.. btw, is this something which need to be fixed (or added) in the babel-eslint parser?. ah, yeah, it depends on the parser.  acorn-jsx which is used by eslint as default jsx parser implemented fragments apparently already. https://github.com/eslint/eslint/issues/9662 and https://github.com/RReverser/acorn-jsx/pull/84  \nI might be mistaken, but looking at the lib/rules code, it seems that the affected plugins would need to be fixed independently. not sure though.. ",
    "ethanjgoldberg": "I've rebased this to fix the merge conflicts and bring the branch up to date -- could we get it merged this time? :). I've rebased this to fix the merge conflicts and bring the branch up to date -- could we get it merged this time? :). @ljharb, I think this one is actually fixed by the latest flow (first change listed here) -- might be irrelevant now or possibly even wrong. I haven't tested the new flow, but I suspect this should be reverted. . Flow doesn't seem to like them. Oh wild.\nIt doesn't seem to work with flow in type declarations, and this makes sense to me. Like you say, flow would have to execute the code to compute the key name, since it might have ${}s.\nThe lint rule also doesn't work for computed property names in normal propTypes: declaration. Maybe something could be done for simple expressions, like backticks without interpolation. But I'm curious if anyone has a good use case for dynamic proptype checking anyway.\n. I really can't think of a way to get a key name to start with a quote, without wrapping it in quotes.\nI agree it feels a bit hacky. I'll work on an update this weekend.. @ljharb, well, it took a bit more than a weekend, but i've updated the function as you suggest.. ",
    "viankakrisna": "maybe just go ahead and send a pr?. ",
    "pgangwani": "How can I achieve \"no-mutation-props\" in my eslint config ?. I desperately need this. Got bunch of issues and instance where Devs have written \nthis.props.someKey = \"somevalue\" in render functions.\nWho can merge and by when ?. ",
    "zorzysty": "Yeah, it's better, but it is still conflicting with prettier, which opts for this kind of formatting for ternaries:\njavascript\nconst header = this.props.header\n  ? <ElementRenederedWhenTrue />\n  : <ElementRenederedWhenFalse />;\nAnd i'm just trying to make Airbnb ESlint rules work with prettier. Here's analogical issue I reported for prettier: https://github.com/prettier/prettier/issues/1009#issuecomment-286833002\n. Yes, I get that Airbnb won't change the rules, but I can override them so they will work with prettier.\nUnfortunately to override this particular one I need to switch off both \"assignment\" and \"declaration\", which is a shame. If there was an option to switch off requiring parens just for multiline ternaries a lot more cases would be covered.\nEdit:\nTo be consistent with no-unused-expressions this option should be named \"allowTernary\". ",
    "jalalat": "Thanks a lot for your response. It solved my problem.. ",
    "joncursi": "Hmm. Breaking out primaryAction into it's own type results in the same error:\n```jsx\ntype PrimaryActionFlowType = {|\n    action: () => void, // ESLint: primaryAction.action PropType is defined but prop is never used\n    icon: string, // ESLint: primaryAction.icon PropType is defined but prop is never used\n    title: string, // ESLint: primaryAction.title PropType is defined but prop is never used\n|};\ntype PropsFlowType = {|\n  ...\n  primaryAction: PrimaryActionFlowType,\n  ...\n|};\nconst StatelessComponent = ({ primaryAction, ... }: PropsFlowType) => (\n  ...\n  \n  ...\n);\n``\n. Interestingly enough, I found that adding= {}` after the props function argument takes away these errors:\njsx\n...\nconst StatelessComponent = ({ primaryAction, ... }: PropsFlowType = {}) => (\n...\nI'm really not sure what this is doing, though. It seems more like a hack than a solution because now, if I actually do forget to use primaryAction.something, or any other prop for that matter, ESLint no longer warns me because it has been tricked by the = {} to believe everything is being used. Nothing will flag anymore.. ",
    "billyvg": "Is this perhaps related to #587?. I'm still getting this with v7.10.0, when using the setState callback\njavascript\n    this.setState(\n      state => ({\n        data: state.data.filter(({id}) => id !== authorization.id),\n      })\n    )\n. ",
    "atkinchris": "We're still experiencing this bug with 6.10.2, with the following JSX.\n```jsx\n\n    {myText} of {myOtherText} completed before something else\n\n// Expected indentation of 12 space characters but found 1  react/jsx-indent\n``. We're still experiencing this bug with6.10.2`, with the following JSX.\n```jsx\n\n    {myText} of {myOtherText} completed before something else\n\n// Expected indentation of 12 space characters but found 1  react/jsx-indent\n```. ",
    "vlcr": "@atkinchris I'm still experiencing problems as well.\nMy sample:\n  <div>\n    {var &&\n      <span className=\"text\">{var}</span>                                //this line works fine\n    }\n    {var &&\n      <span className=\"text\">{var}\n      </span>                                  //this line works fine, even though it shouldn't\n    }\n    {var &&\n      <img                              //line that throws an error, but I believe it shouldn't\n        className=\"picture\"\n        alt=\"image\"\n        src={var}\n      />\n    }\n  </div>\n\nerror  Expected indentation of 8 space characters but found 10  react/jsx-indent\n. @atkinchris I'm still experiencing problems as well.\nMy sample:\n  <div>\n    {var &&\n      <span className=\"text\">{var}</span>                                //this line works fine\n    }\n    {var &&\n      <span className=\"text\">{var}\n      </span>                                  //this line works fine, even though it shouldn't\n    }\n    {var &&\n      <img                              //line that throws an error, but I believe it shouldn't\n        className=\"picture\"\n        alt=\"image\"\n        src={var}\n      />\n    }\n  </div>\n\nerror  Expected indentation of 8 space characters but found 10  react/jsx-indent\n. ",
    "freak3dot": "Still seeing the issue with version 6.10.2 also.\nReverting to 6.9.0 works. Reverting for now.. Still seeing the issue with version 6.10.2 also.\nReverting to 6.9.0 works. Reverting for now.. ",
    "shawnmcknight": "The docs at https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md appear to be indicating that this is the default behavior.  Tracing through version history, it looks to me like indentLogicalExpressions was added as an option at 6.10.1 and the default setting of \"false\" would elicit the  behavior reported in this thread.  I have changed my eslintrc.json file to contain:\n'react/jsx-indent': ['error', 2, {indentLogicalExpressions: true}],'\nand the behavior reverts to this not being an error (as expected based on the documentation).\nSince making \"false\" the default behavior appears to introduce a breaking change, perhaps making \"true\" the default behavior would not?. The docs at https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md appear to be indicating that this is the default behavior.  Tracing through version history, it looks to me like indentLogicalExpressions was added as an option at 6.10.1 and the default setting of \"false\" would elicit the  behavior reported in this thread.  I have changed my eslintrc.json file to contain:\n'react/jsx-indent': ['error', 2, {indentLogicalExpressions: true}],'\nand the behavior reverts to this not being an error (as expected based on the documentation).\nSince making \"false\" the default behavior appears to introduce a breaking change, perhaps making \"true\" the default behavior would not?. ",
    "jesstelford": "Massive props to @yannickcr for the quick turn around time - thank you so much for the hard work you put into this module \ud83c\udf89 . ",
    "SidKwok": "The version I used: ^6.10.2. @megapctr it is not working for me. ",
    "benperiton": "Yep, seems to be counting the first group of space after a react element. (6.10.2)\n<Icon name=\"tasks\" fixedWidth /> Create Order\nGives 1\n<Icon name=\"tasks\" fixedWidth />   Create Order\nGives 3\n<Icon name=\"tasks\" fixedWidth />Create Order\nGives 0. Yep, seems to be counting the first group of space after a react element. (6.10.2)\n<Icon name=\"tasks\" fixedWidth /> Create Order\nGives 1\n<Icon name=\"tasks\" fixedWidth />   Create Order\nGives 3\n<Icon name=\"tasks\" fixedWidth />Create Order\nGives 0. ",
    "megapctr": "Temporary fix: use a fixed version until the bug is fixed. 6.10.0 works fine\n. Temporary fix: use a fixed version until the bug is fixed. 6.10.0 works fine\n. ",
    "aliaksandr-master": "I have 6.10.2 version and it doesn't work\njs\n          <div className=\"PageCampaignEditSettingsAdExample__headRating\">\n            <Rating rating={rating} />\n            ( {reviews} )\n          </div>\n\nExpected indentation of 12 space characters but found 1  react/jsx-indent\n. \n",
    "apexad": "Actually appears fixed in 6.10.3. ",
    "dreid": "\n(also, why use an expression in that example and not class Foo extends \u2026?\n\nIt's just a minimal obviously correct syntax where ignorePureComponents doesn't work right.\nThis also fixes usages of non-decorator wrapper functions (and maybe export default class extends\u2026?) \nIn practice this example probably shouldn't be allowed but that should probably be enforced by a more general eslint rule. :). > (also, why use an expression in that example and not class Foo extends \u2026?\nIt's just a minimal obviously correct syntax where ignorePureComponents doesn't work right.\nThis also fixes usages of non-decorator wrapper functions (and maybe export default class extends\u2026?) \nIn practice this example probably shouldn't be allowed but that should probably be enforced by a more general eslint rule. :). I'm not sure about the react version setting.. I'm not sure about the react version setting.. Sorry, I might be misunderstanding you, are you proposing that ignorePureComponents shouldn't do anything on < 0.15.3? There do not appear to be (but maybe I missed them) any existing version constraints on ignorePureComponents.\nIf so, should that be done in this PR? It seems like it's a larger change that would require more discussion.. Is there anything else I need to do for this? I noticed there were some conflicts so I resolved them.\nThis was approved almost a month ago and hasn't been merged so I just wanted to make sure this wasn't waiting on some action from me.. ",
    "mewhit": "You can use simple 'hack' \n<span> key={String(index)}  </span>\nAnd you don't pollute your code with inline disabled.. You can use simple 'hack' \n<span> key={String(index)}  </span>\nAnd you don't pollute your code with inline disabled.. ",
    "vkosovskikh": "```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from '../components/App'\nconst render = (Component) => {\n  ReactDOM.render(\n    \n\n,\n    document.querySelector('[data-root]')\n  )\n}\nrender(App)\nif (module.hot) {\n  module.hot.accept('../components/App', () => { render(App) })\n}\n.\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from '../components/App'\nconst render = (Component) => {\n  ReactDOM.render(\n    \n\n,\n    document.querySelector('[data-root]')\n  )\n}\nrender(App)\nif (module.hot) {\n  module.hot.accept('../components/App', () => { render(App) })\n}\n```. @ljharb this is the answer how one can get rid of this lint error. @ljharb this is the answer how one can get rid of this lint error. ",
    "LeslieMurphy": "I am using browserify and reactify.and gulp-eslint\nmy .eslintrc.json has this\n\"extends\": [\n        \"eslint:recommended\",\n        \"plugin:react/recommended\"\n    ],\nIs this a reactify error not an es-lint error?  Looking again at the log, I\nthink maybe that is the culprit!\n{ ReactifyError:\nE:\\React\\Pluralsight\\psadmin\\src\\components\\authors\\authorForm.js: Parse\nError: Line 27: Unexpected token > while parsing file:\nE:\\React\\Pluralsight\\psadmin\\src\\components\\authors\\authorForm.js\n    at throwError\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:2808:21)\n    at throwUnexpected\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:2870:9)\n    at parseJSXChild\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:7068:13)\n    at parseJSXElement\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:7140:31)\n    at parseJSXChild\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:7066:21)\n    at parseJSXElement\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:7140:31)\n    at parsePrimaryExpression\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:3572:20)\n    at parseLeftHandSideExpressionAllowCall\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:3656:61)\n    at parsePostfixExpression\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:3696:20)\n    at parseUnaryExpression\n(E:\\React\\Pluralsight\\psadmin\\node_modules\\jstransform\\node_modules\\esprima-fb\\esprima.js:3763:16)\n  index: 610,\n  lineNumber: 27,\n  column: 36,\n  description: 'Unexpected token >',\n  name: 'ReactifyError',\n            <label htmlFor=\"lastName\">Last Name></label>\n\n            <input type=\"text\"\n                name=\"lastName\"\n\nOn Mon, Mar 27, 2017 at 7:22 PM, Jordan Harband notifications@github.com\nwrote:\n\nCan you provide more information? Which rule(s) do you need to enable to\nget the parsing error? Can you create a small repro case?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1128#issuecomment-289634295,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEQfIKfHYXY3MiUiE0nxkvHgCB9tUm7Fks5rqGDdgaJpZM4Mq_kl\n.\n. \n",
    "garmjs": "@ljharb thanks :). ",
    "noah-potter": "There is a test that enforces this behavior: https://github.com/yannickcr/eslint-plugin-react/blob/d672588cc39334e215ff5993f859f159fc977d57/tests/lib/rules/jsx-indent.js#L198\nIs this an actual bug or is there a reason this behavior is desired?. @ljharb Great. I'll look into fixing this. ",
    "march08": "hey guys, has this been resolved?. ",
    "keithkml": "Very excited for this to launch!. Here at Uber we almost never use custom prop types, so the rule would be very useful to us. And it would be very easy for the rule to simply not warn when a custom function was used.. ",
    "igorline": "Waiting for this to be merged!. Waiting for this to be merged!. ",
    "ManThursday": "@ljharb Thanks for the feedback, see the new commits for my attempt to factor out the duplicate code.. I'm not sure I completely agree with that.  To me there is a distinction between the 2 existing rules and the rule I'm adding.  The existing rules are something that is normally a bad pattern but can work (and in the rarest of circumstances might even be correct) whereas the new rule catches code that should never exist and is likely buggy.  So putting them all under the same rule with an argument might give the wrong impression about the varying levels of strictness with which the rules should be applied.\nPerhaps the distinction between between the rules isn't as great as I'm interpreting or the reduction in code  is worthwhile enough to do this regardless though.  I'm open to being swayed but right now I think I'd advocate to keep them separate.. Awesome.  Thanks very much for the reviews and feedback.. Maybe this should actually be in the recommended rules because there isn't a valid use-case?. Didn't seem right changing the author when I didn't write any of the code.. ",
    "gabor": "i disagree about using empty-string for value-does-not-exist, but ok, in that simple case it could work.\nperhaps a different example better illustrates the issue:\nheader.propTypes = {\n    user: PropTypes.shape {\n        name: PropTypes.string.isRequired,\n        messageCount: PropTypes.number.isRequired,\n        favoriteFood: PropTypes.oneOf(['steak', 'hamburger']).isRequired,\n    },\n}\nwhat is the default-value in this case?. ",
    "jmarthernandez": "Would it make sense to add to the current rule or add a new one?  I could help out with that. ",
    "ianschmitz": "I'm not super familiar with MobX, but it may be worth thinking about how this rule may impact those users?. Thanks for the quick review @ljharb!\nI've made the changes you requested.. Not at all @joeybaker. Sorry, I've fell out of touch with this PR \ud83d\ude22 \nThanks for helping out everyone!. Closing in favor of the updated PR over at #1416. Thanks @joeybaker !. ",
    "afholderman": "Sure, they are:\n2:10  error  'render' is defined but never used            no-unused-vars\n6:8   error  'Button' is defined but never used            no-unused-vars. I'm not sure I follow how line 2 is an error. I import the function in 2 then call it in what is line 22 of the file, inside the Home class declaration.. I'm not sure I follow how line 2 is an error. I import the function in 2 then call it in what is line 22 of the file, inside the Home class declaration.. Removing that line did not solve the Button component import issue.. Removing that line did not solve the Button component import issue.. I'm getting the error on all my component imports, just highlighted that one since it included the render one as well. Here's another example:\n```\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from 'Store/configureStore';\nimport Home from 'Presentation/Home';\nimport Display from 'Presentation/Display';\nconst store = configureStore();\nconst App = () => (\n  \n\n\n\nHome\nDisplay\n\n\n\n\n\n\n);\nexport default App;\nand it throws the errors:\n1:8   error  'React' is defined but never used     no-unused-vars\n  3:20  error  'Router' is defined but never used    no-unused-vars\n  4:3   error  'Route' is defined but never used     no-unused-vars\n  5:3   error  'Link' is defined but never used      no-unused-vars\n  7:10  error  'Provider' is defined but never used  no-unused-vars\n. I'm getting the error on all my component imports, just highlighted that one since it included the render one as well. Here's another example:\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from 'Store/configureStore';\nimport Home from 'Presentation/Home';\nimport Display from 'Presentation/Display';\nconst store = configureStore();\nconst App = () => (\n  \n\n\n\nHome\nDisplay\n\n\n\n\n\n\n);\nexport default App;\nand it throws the errors:\n1:8   error  'React' is defined but never used     no-unused-vars\n  3:20  error  'Router' is defined but never used    no-unused-vars\n  4:3   error  'Route' is defined but never used     no-unused-vars\n  5:3   error  'Link' is defined but never used      no-unused-vars\n  7:10  error  'Provider' is defined but never used  no-unused-vars\n```. That was the solve, thank you. Please close as you see fit.. That was the solve, thank you. Please close as you see fit.. ",
    "johnsoncherian": "does removing un used imports have any impact on building and package size of create react apps ?. ",
    "jacobrask": "Wouldn't most async requests in practice set state on completion?\nFrom my POV the question here is if there are a reasonable number of developers considering putting asynchronous requests in componentWillMount a problem, and that most other use cases can be handled in the constructor.\nI think the React docs imply this.\n\nAvoid introducing any side-effects or subscriptions in this method.\n...\nGenerally, we recommend using the constructor() instead.\n\nMy understanding (which is very limited, so please correct me if I'm wrong) is that async rendering with fibers means that an async request might complete before mount and sometimes after (maybe the mount could even be aborted?).\n(I would be willing to implement this if I can be reasonably sure that it would be accepted.). Wouldn't most async requests in practice set state on completion?\nFrom my POV the question here is if there are a reasonable number of developers considering putting asynchronous requests in componentWillMount a problem, and that most other use cases can be handled in the constructor.\nI think the React docs imply this.\n\nAvoid introducing any side-effects or subscriptions in this method.\n...\nGenerally, we recommend using the constructor() instead.\n\nMy understanding (which is very limited, so please correct me if I'm wrong) is that async rendering with fibers means that an async request might complete before mount and sometimes after (maybe the mount could even be aborted?).\n(I would be willing to implement this if I can be reasonably sure that it would be accepted.). My quotation was a bit confusing, those were excerpts from different paragraphs. . My quotation was a bit confusing, those were excerpts from different paragraphs. . It seems like a significant number of React developers agree that using this method should be discouraged. If you do not agree it's of course fine to not use the rule.\nAre you opposed to (me?) adding the rule at all to this project? . Ok. Ok. ",
    "abritinthebay": "Given it's an official FB recommendation (quoted above)\n\nGenerally, we recommend using the constructor() instead.\n\nIt would make sense to have this as an optional linting rule. Certainly shouldn't be a recommended one but a lot of the core devs seem pro-deprecation and have mentioned that post-fiber it would make sense to examine the issue more.\nMost linting rules are completely subjective, this seems to at least be a reasonable suggestion for an optional rule.. Given it's an official FB recommendation (quoted above)\n\nGenerally, we recommend using the constructor() instead.\n\nIt would make sense to have this as an optional linting rule. Certainly shouldn't be a recommended one but a lot of the core devs seem pro-deprecation and have mentioned that post-fiber it would make sense to examine the issue more.\nMost linting rules are completely subjective, this seems to at least be a reasonable suggestion for an optional rule.. Sure, there are plenty of active discussions about many things - including things where rules already exist in this package.\nThat's what best practice debates are composed of \ud83d\ude04 \nMy point is more - this kind of rule is a classic optional linting step feature. God knows there are existing rules in this package that I'm never going to turn on because they don't work for me or my projects. This rule would be no different to those.\nSide note: I extensively use server-rendering and honestly, the story there is not as complex as some in that discussion would make it. Though yes, there are complexities involved and for those components that must use cWM then perhaps turning the rule off makes sense - but that's good, as it requires intentionality. \n. Sure, there are plenty of active discussions about many things - including things where rules already exist in this package.\nThat's what best practice debates are composed of \ud83d\ude04 \nMy point is more - this kind of rule is a classic optional linting step feature. God knows there are existing rules in this package that I'm never going to turn on because they don't work for me or my projects. This rule would be no different to those.\nSide note: I extensively use server-rendering and honestly, the story there is not as complex as some in that discussion would make it. Though yes, there are complexities involved and for those components that must use cWM then perhaps turning the rule off makes sense - but that's good, as it requires intentionality. \n. Indeed, your preference is clear. If the rule existed you'd not use it/turn it off. \ud83d\udc4d . Indeed, your preference is clear. If the rule existed you'd not use it/turn it off. \ud83d\udc4d . Oh that's a quite nice generalized rule, could even have a recommended/default set.\n. Oh that's a quite nice generalized rule, could even have a recommended/default set.\n. ",
    "noahgrant": "this is a different context/discussion and a different rule, but now that React 16.3 is going to be deprecating cWM, cWRP and cWU, i'd love to have a linting rule that we could put in place to prevent using these methods as we migrate away from them. should we create a new discussion for it?. ",
    "Adzz": "Good question, I didn't check! I can have a look see for you if you like. Good question, I didn't check! I can have a look see for you if you like. There's a few, let me do this proper and add them here, or would you prefer a different PR?. There's a few, let me do this proper and add them here, or would you prefer a different PR?. ",
    "tiefling": "Sussed it - My Config was missing...\n\"plugins\": [\n      \"react\"\n    ],\nThis could do with being added to the docs as a setup step.. Sussed it - My Config was missing...\n\"plugins\": [\n      \"react\"\n    ],\nThis could do with being added to the docs as a setup step.. That's where I found it eventually after half a day of pulling my hair out followed by a resounding face slapping exercise.. That's where I found it eventually after half a day of pulling my hair out followed by a resounding face slapping exercise.. That would be great - when I've got a spare 5 minutes I'll throw something together!. That would be great - when I've got a spare 5 minutes I'll throw something together!. Can this be assigned to me? (I have a memory like a sieve these days). Can this be assigned to me? (I have a memory like a sieve these days). ",
    "enricotelesca": "TBH I think @Shutnik is right and sorry, but, @ljharb , explicit undefined is much much better is your opinion. would you ever do something like this because explicit undefined is much much better?\nconst obj = {\n  foo: 'something',\n  bar: undefined\n}\nI don't see the foundation of @ljharb explanation... I think a good trade-off is leave the possibility to omit the default prop only if the propType is object, node, element and maybe an array . ",
    "componentDidMount": "You can change the order yourself, documented here: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#rule-options. ",
    "maurolionel": "Running into the same issue, not sure on how to disable eslint react rule only for this... any ideas?. ",
    "Dimon70007": "Hi there. I think, that eslint a good package for development. And will be better to  disable \"react/require-default-props\" by default, because Eslint should help to develop apps, instead to obstruct. . Hi there. I think, that eslint a good package for development. And will be better to  disable \"react/require-default-props\" by default, because Eslint should help to develop apps, instead to obstruct. . ",
    "acontreras89": "@ljharb, to be honest I haven't used the rule and I have no idea how strict it is. Can you please provide some examples?\nBesides performance implications, declaring functions in props makes PureComponents to render unnecessarily. This is one of the reasons why adhering to this rule a good practice.. Feel free to close this if it does not make sense to you. Just brought it up because this is generally considered a good practice.. ",
    "semeleven": "Some new? I have same issue with data attribute.\n1 - I have error, when defining a defaultProps\n2 - I have error react/require-default-props\ntype Props = {\n  'data-x'?: string\n};\nSomeComponent.defaultProps = {\n  'data-x': ''\n};. ",
    "valentin-radulescu-hs": "I think this will be fixed in https://github.com/yannickcr/eslint-plugin-react/pull/1223. \ud83d\udc4d . ",
    "Slumber86": "Some errors, re-post later. No problem, realized that this rule is rendundant with no-deprecated, will not repen, you can delete.\nI opened #1167. Missed a comma, \nimport {React, PropTypes} from 'react';. ",
    "ezhlobo": "@jpap @EricBeReal hey, I started working on eslint-plugin-react-pug. It's very new but it solves those issues.. ",
    "jpap": "@ezhlobo nice work! I've personally moved onto TypeScript/TSLint, but will definitely check out your ESLint plugin for reference.. ",
    "juangallo": "```jsx\nimport React, {Component, PropTypes} from 'react';\nimport SellersTable from '../components/table/SellersTable';\nimport {connect} from 'react-redux';\nimport * as salesmenActions from '../actions/salesmenActions';\nimport {bindActionCreators} from 'redux';\nclass SellersIndex extends Component {\n  constructor(props, context) {\n    super(props, context);\n  }\ncomponentWillMount() {\n    this.props.salesmenActions.getSalesmenItems();\n  }\nrender() {\n    const {salesmen} = this.props;\n    if (!salesmen) {\n      return (\n        Loading...\n      );\n    }\nconst styles = {\n  contentHeaderMenuLink: {\n    textDecoration: 'none',\n    color: 'white',\n    padding: 8,\n    backgroundColor: '#263238 '\n  },\n  content: {\n    padding: '16px',\n    backgroundColor: '#ECF0F5',\n    minHeight: '700px'\n  }\n};\n\nconst titles = [\n  {\n    title: \"Nombre\"\n  }, {\n    title: \"Apellido\"\n  }, {\n    title: \"Email\"\n  }, {\n    title: \"CI\"\n  }, {\n    title: \"Telefono\"\n  }, {\n    title: \"Fecha\"\n  }\n];\n\nreturn (\n  <div style={styles.content}>\n    <h2>\n      Vendedores</h2>\n    <SellersTable array={salesmen} title={titles}/>\n  </div>\n);\n\n}\n}\nconst {array} = PropTypes;\n//coincidir con el mapState\nSellersIndex.propTypes = {\n  salesmen: array\n};\nfunction mapStateToProps(state) {\n  return {salesmen: state.salesmen.salesmen};\n}\nconst mapDispatch = (dispatch) => {\n  return {\n    salesmenActions: bindActionCreators(salesmenActions, dispatch)\n  };\n};\nexport default connect(mapStateToProps, mapDispatch)(SellersIndex);\n```. Yes, the question is, how do I define an action on the propTypes?\nAnd the same question for the method of the action.\nThanks for your help!. ",
    "christiancho": "This is not Stack Overflow. If you're having issues with the core code of eslint-plugin-react, this is the place to do. This is not the place for you to ask for help with your specific application.. ",
    "NiGhTTraX": "@ljharb yes, that works, but it's not something I'd like to do.. Sorry @ljharb, I'm not sure I understand your example. Maybe I wasn't clear enough in my issue. I want the following to be valid indentation:\njsx\nrender() {\n  return <div>\n    foobar\n  </div>;\n}\nThe rule wants this instead:\njsx\nrender() {\n  return <div>\n    foobar\n         </div>;\n}. ",
    "102": "@ljharb is there any ETA for this to be released?. @ljharb is there any ETA for this to be released?. ",
    "ZeusTheTrueGod": "I can also say that babel itself could not run that code until the 6.24.1 (or a bit earlier) version of babel-core. Wow, so fast! Fantastic!. Sadly I still get that issue:\nTypeError: Cannot read property 'type' of undefined\n    at buildTypeAnnotationDeclarationTypes (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:426:25)\n    at /Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:681:25\n    at iterateProperties (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:287:11)\n    at markPropTypesAsDeclared (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:680:11)\n    at markAnnotatedFunctionArgumentsAsDeclared (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:814:7)\n    at Object.handleStatelessComponent (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:823:7)\n    at EventEmitter.updatedRuleInstructions.(anonymous function) (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint-plugin-react/lib/util/Components.js:624:75)\n    at emitOne (events.js:101:20)\n    at EventEmitter.emit (events.js:189:7)\n    at NodeEventGenerator.applySelector (/Users/zeus/Documents/redux_demo/webapp/node_modules/eslint/lib/util/node-event-generator.js:265:26). ",
    "paulruescher": "I'm getting the same while updating React from 15.4.1 to 15.5.4. Only changes I really see are migrating from React.createClass and React.PropTypes to their respective standalone packages create-react-class and prop-types.\nI'll circle back with more info as I dig deeper.. ",
    "artyomtrityak": "Same issue if create-react-class defined by ProvidePlugin\njs\nnew webpack.ProvidePlugin({\n    createReactClass: 'create-react-class'\n  }). Same issue if create-react-class defined by ProvidePlugin\njs\nnew webpack.ProvidePlugin({\n    createReactClass: 'create-react-class'\n  }). ",
    "tnguyen14": "Running into this problem as well, after running prettier on the code base.. The configuration I'm using is\n\"react/jsx-indent-props\": [2, 2]. ",
    "TimonVS": "Are you extending from any other configs? If you're using Prettier I'd suggest using https://github.com/prettier/eslint-config-prettier to disable all stylistic rules (because Prettier already solves this for you).. Are you extending from any other configs? If you're using Prettier I'd suggest using https://github.com/prettier/eslint-config-prettier to disable all stylistic rules (because Prettier already solves this for you).. ",
    "noyobo": "I think so. span indentation is correct (110 lines In the screenshot). \nWhy 111 and 112 indentation is error. They should relative to the previous line of code 2 spaces.\nOtherwise:\njs\n? <span\n  className...\n  dangerously...\n  />\n: null\nIt looks very awkward\n. I think so. span indentation is correct (110 lines In the screenshot). \nWhy 111 and 112 indentation is error. They should relative to the previous line of code 2 spaces.\nOtherwise:\njs\n? <span\n  className...\n  dangerously...\n  />\n: null\nIt looks very awkward\n. ",
    "yujiangshui": "Hi @ljharb, is this bug fixed? I see there are MRs but not be merged.. ",
    "lednhatkhanh": "Any fixes on this?. Any fixes on this?. ",
    "thebarty": "Yeah - how?. Yeah - how?. ",
    "c0debreaker": "Thank you folks!. @yannickcr it worked really well! It's what I really want to happen :)\nhttp://imgur.com/a/eTWZY. ",
    "deecewan": "thanks for the feedback. what else would you like for this one?. thanks for the feedback. what else would you like for this one?. EDIT: You can ignore this comment. I checked the source of the actual rule, and it doesn't deal with context either, I don't think. It definitely could, but that's a separate issue.\nThis doesn't seem to handle the case of context.\nFor instance,\njsx\nclass MyComponent extends Component {\n    render() {\n        <div>{this.context.thing}</div>\n    }\n}\ncould be re-written as\njsx\nfunction MyComponent(props, context) {\n  return (\n      <div>{context.thing}</div>\n  );\n}\nI'd like to see a test case that uses context, even if it doesn't support fixing context.. I know that it'd require a bigger version bump, but to me it'd make more sense to have all the rules enabled by default.\nAlso, while you're in there, feel like adding ternaries?. Sorry, that was very poorly written. \nMy second example is currently a pass. I'm saying I want to enforce dropdown onto the next line for children, as shown in example 3. Currently, my config will let example 2 pass (and example 3 - but it won't enforce that style).\nI think I'm looking for the extra options from jsx-closing-bracket-location, but I've got it set to line-aligned and it's not enforcing it. \nMostly just looking for guidance as to how to enforce the third style (and not allow the second).. This was the existing validation. I just removed part of it if you enable the option.. this is the original text, essentially, with some modifications because of the different structure. If what you're saying is true, then this rule has/had no purpose.. uhhhh, because i had a mind blank.. do you mean {conditional: true}?. ",
    "Aggie123": "Thanks for your quick response. \nYes, this syntax hasn't been supported by eslint yet. I found a way to solve this, just installed babel-eslint and the error is gone. \nThanks anyway.. Thanks for your quick response. \nYes, this syntax hasn't been supported by eslint yet. I found a way to solve this, just installed babel-eslint and the error is gone. \nThanks anyway.. ",
    "yussan": "i solved this after added plugins to my .babelsrc , here is the link https://babeljs.io/docs/plugins/transform-class-properties/. ",
    "sudeepk82": "I tried both these solutions, but neither of them worked for me.. ",
    "wilsonmsalberto": "Just adding in my 2 cents, with the config that's working for me:\n// .eslintrc\n{\n    \"plugins\": [\"babel\"],\n    \"parser\": \"babel-eslint\"\n}\n// .babelrc\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/preset-react\"\n    ],\n    \"plugins\": [\n        \"@babel/plugin-proposal-class-properties\"\n    ]\n}\nHence, you need the following dependencies:\nWith Yarn: \n$ yarn add @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties\n$ yarn add eslint babel-eslint eslint-plugin-babel eslint-plugin-react\nWith NPM:\n$ npm i --save @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties\n$ npm i --save eslint babel-eslint eslint-plugin-babel eslint-plugin-react. ",
    "trotzig": "Ah, thanks for the pointer! That's exactly what I need. . Ah, thanks for the pointer! That's exactly what I need. . ",
    "rsolomon": "I agree that it belongs in jsx-wrap-multilines. Preference on option nomenclature?. I agree that it belongs in jsx-wrap-multilines. Preference on option nomenclature?. Upon a bit deeper inspection, it looks like the rule doesn't enforce parenthesis on newlines even on multiline expressions. Ex:\nvar hello = () => (<div>\n  <p>Hello</p>\n</div>);\nIs considered valid, even though I would prefer the linter force it to be:\nvar hello = () => (\n  <div>\n    <p>Hello</p>\n  </div>\n);\nI am wondering if this may require 2 changes:\n\n\nA new rule or new option added to jsx-wrap-multilines that enforces newlines after the opening paren and before the closing paren of multiline jsx expressions.\n\n\nThe aforementioned standalone rule, that would treat standalone single-line jsx expressions as multiline.\n. Upon a bit deeper inspection, it looks like the rule doesn't enforce parenthesis on newlines even on multiline expressions. Ex:\n\n\nvar hello = () => (<div>\n  <p>Hello</p>\n</div>);\nIs considered valid, even though I would prefer the linter force it to be:\nvar hello = () => (\n  <div>\n    <p>Hello</p>\n  </div>\n);\nI am wondering if this may require 2 changes:\n\n\nA new rule or new option added to jsx-wrap-multilines that enforces newlines after the opening paren and before the closing paren of multiline jsx expressions.\n\n\nThe aforementioned standalone rule, that would treat standalone single-line jsx expressions as multiline.\n. @ljharb I think I've addressed your concerns. The one situation this doesn't fix is the following:\n\n\n<App\n  foo=\"bar\">baz</App>\nIt will fix it to:\n<App\n  foo=\"bar\">baz\n</App>\nWhen ideally it would be fixed to:\n<App\n  foo=\"bar\">\n  baz\n</App>\nI opted not to handle it in this rule because I imagine multiline children location should be handled in a separate rule entirely (maybe it already is?). @ljharb I think I've addressed your concerns. The one situation this doesn't fix is the following:\n<App\n  foo=\"bar\">baz</App>\nIt will fix it to:\n<App\n  foo=\"bar\">baz\n</App>\nWhen ideally it would be fixed to:\n<App\n  foo=\"bar\">\n  baz\n</App>\nI opted not to handle it in this rule because I imagine multiline children location should be handled in a separate rule entirely (maybe it already is?). Pardon my ignorance (this is the first eslint rule I've written), but isn't that what the output attributes of the invalid tests are for?. Pardon my ignorance (this is the first eslint rule I've written), but isn't that what the output attributes of the invalid tests are for?. Oops! Will fix.. ",
    "VinSpee": "I think this is likely related: \nrunning --fix on this code:\n```jsx\nconst MediaName = ({ name }: MediaNameProps) =>\n  <Media\n    queries={{\n      xs: {\n        minWidth: '24em',\n      },\n      sm: {\n        minWidth: '45em',\n      },\n    }}\n\n{({ sm }) =>\n  <div>\n    {name}\n  </div>\n}\n\n;\n```\n\nresults in\n```jsx\nconst MediaName = ({ name }: MediaNameProps) =>\n  (<Media\n    queries={{\n      xs: {\n        minWidth: '24em',\n      },\n      sm: {\n        minWidth: '45em',\n      },\n    }}\n\n{({ sm }) =>\n  (<div>\n    {name}\n  </div>)\n}\n</Media>);\n\n```\n\nwhen I would expect\n```jsx\nconst MediaName = ({ name }: MediaNameProps) => (\n  <Media\n    queries={{\n      xs: {\n        minWidth: '24em',\n      },\n      sm: {\n        minWidth: '45em',\n      },\n    }}\n\n{({ sm }) => (\n  <div>\n    {name}\n  </div>\n)}\n\n\n);\n```\n\nis this the responsibility of this rule?. ",
    "iddan": "Is someone working on this? Because we use prettier-eslint all of our codebase is now with ugly braces. Is someone working on this? Because we use prettier-eslint all of our codebase is now with ugly braces.  #1285 ?.  #1285 ?. ",
    "sharbel-keyvalue": "I think it was 'react/require-default-props.. ",
    "roelbarreto": "@ljharb  I'm not sure if this is the same issue\n\n. My bad. Thanks @ljharb  That solves my issues.. ",
    "johnryan": "@ljharb i tried that too i get the error this type is incompatible with undefined. @ljharb i tried that too i get the error this type is incompatible with undefined. @ljharb i can file an issue but i'm confused what value this validation provides on a Maybe type...if you initialize it to anything other than null or undefined then it isn't really a \"maybe\" type anyway since it will always have a value. @ljharb i can file an issue but i'm confused what value this validation provides on a Maybe type...if you initialize it to anything other than null or undefined then it isn't really a \"maybe\" type anyway since it will always have a value. Created an issue in the flow project here facebook/flow#3982. Created an issue in the flow project here facebook/flow#3982. ",
    "romulof": "I think it shouldn't require a default prop if the type is optional+maybe.\nThink as implicit null/undefined.. ",
    "otakustay": "Thanks, I didn't aware of eslint-plugin-import before\nSince #985 already covers 6, I'll later file a separate issue for 7, closing this now. Thanks, I didn't aware of eslint-plugin-import before\nSince #985 already covers 6, I'll later file a separate issue for 7, closing this now. Tracing function calls may not be easy, is it acceptable that we first implement the basic rule, then add a trackFunctions in the future?\nFurther more, I may propose a prefer-comopnent-to-function rule which warns on function calls that can be replaced with components. Thanks for this hint, not arware that .eslintrc can reside in sub folders. In my case we have higher order functions returning Element for component's props, such as:\njs\nconst getBodyCellRender = record => ({dataIndex, render}) => {\n   return <td> ... </td>;\n};\nWe can make it a \"component factory\" like:\njs\nconst createBodyCellComponent = record => {\n  const BodyCell = ({dataIndex, render}) => <td> ... </td>;\n  BodyCell.propTypes = { ... };\n  return BodyCell;\n};\nBut this is really strange for me.. I don't think this statement is always right, for example:\n```js\nconst renderItem = ({name, count}) => {name} ({count});\nreturn (\n  \n    list.map(renderItem)\n  \n);\n```\nYes we can make it list.map(ListItem) but is it really nice and pretty?\nThe official redux realworld demo also makes a simple function/method returning react elements.. Also, componentDidCatch is not listed in current sort-comp rule. Since this rule is called \"max-depth\", I think it should detect the \"depth\" but not \"nesting depth\" of jsx, a depth of 0 means \"no element here\" which is absolutely useless. I think componentDidCatch should be placed before componentWillUnmount since it is a method when component is \"live\". componentDidCatch is a method with behavior very close to componentDidUpdate, I'd prefer it to be placed right after componentDidUpdate. @joe-denea \n\ngetDerivedStateFromProps is invoked after a component is instantiated as well as when it receives new props\n\nSince it is a replacement for willMount and willReceiveProps, it can be confused when being placed at the position of either willMount or willReceiveProps\nI propose we order them like:\n```\nstatic displayName = '';\nstatic defaultProps = {\n};\n... statics\nstatic getDerivedStateFromProps() {\n}\nstate = {\n};\n... instance fields\n```\nIn this way we can easily have an overview about the structure of our state and how our state is synced with our props, the entire private state is clear before any life cycle occured\n\nFor componentDidCatch, I don't have a very strong insist, place it after willUnmount is OK. Currently we may create initial state from props like:\nconstructor(props) {\n  super(props);\n  this.state = {\n    foo: 1,\n    bar: props.value\n  };\n}\nDo we recommend, after getDerivedStateFromProps is available, to change it to:\n```\nstate = {\n  foo: 1,\n  bar: null\n};\nstatic getDerivedStateFromProps(nextProps) {\n  return {bar: nextProps.value};\n}\n```\nIn case we recommend \"splitting self controlled and derived state\", I'd prefer to place getDerivedStateFromProps after constructor so they have a better collabration. What I mean is that we should recommend the separation of \"self controlled state\" and those \"derived from props\" even they can be written in the form of constructor or class property, this may be a best practice:\njs\ngetDerivedStateFromProps(nextProps, prevState) {\n  if (prevState.prevousPropValue === nextProps.value) {\n    return {\n      bar: value,\n      // reset other states\n    };\n  }\n}\nIn most case, we should not have different logics between initial and update state compute, one derived state property should always be synced to props. My consideration is we should choose to place getDerivedStateFromProps either:\n\nright after constructor if we think it should be responsible to compute the initial state\nat the place where componentWillReceiveProps was if we recommend to use it only on prop changes (not initial instantiation). \n",
    "chriswong": "Working on it.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. Done.. js\n          max: {\n            type: 'integer',\n            minimum: 1\n          }\n0 is no a valid value now.. Done.. Done. Changed to function declaration.. Done.. Done.. Done.. Done.. Done.. Done.. OKey.. ",
    "Bloomca": "Why not? I am not talking about best practices or something, I am just asking whether it is possible or not to add missing props validation to custom extended classes.. Why not? I am not talking about best practices or something, I am just asking whether it is possible or not to add missing props validation to custom extended classes.. @jseminck thanks, it works!\nMaybe we should add it in the readme of this rule? I understand that it is not a preferred way to extend functionality in React, but maybe it will be helpful for other people as well.. @jseminck thanks, it works!\nMaybe we should add it in the readme of this rule? I understand that it is not a preferred way to extend functionality in React, but maybe it will be helpful for other people as well.. ",
    "fengerzh": "Thank you. Yes, it works.. ",
    "alaycock": "Exactly. It looks like the variable which holds the value is null, which throws the TypeError.. ",
    "psachs21": "NVM, misread the blame, thought this was supposed to be released.. ",
    "dzhytomyrsky": "Fixed with \nreact/jsx-closing-bracket-location: [1, {\"selfClosing\": \"line-aligned\", nonEmpty: \"after-props\"}]. ",
    "sahanatroam": "@dzhytomyrsky did you add this piece of code to the package settings ?. ",
    "mehdivk": "\nwhy wouldn't you want to do ?\n\nGood question. I think <Toggle value /> has some readability issues. For props that ends with ed (E.g. checked, toggled, disabled etc) it makes sense to drop {true} but not for something like value.. > why wouldn't you want to do ?\nGood question. I think <Toggle value /> has some readability issues. For props that ends with ed (E.g. checked, toggled, disabled etc) it makes sense to drop {true} but not for something like value.. > It sounds like then you wouldn't want \"ignore\", you'd instead want a setting that enforced \"always\" for that prop.\nYes, I want to use a mix of always and never in my project. \nThis should cause lint error\njsx\n<Toggle toggled={true} />\nbut this should pass the linting\njsx\n<CheckBox value={true} />\nand this should cause lint error\njsx\n<CheckBox value />\n. > It sounds like then you wouldn't want \"ignore\", you'd instead want a setting that enforced \"always\" for that prop.\nYes, I want to use a mix of always and never in my project. \nThis should cause lint error\njsx\n<Toggle toggled={true} />\nbut this should pass the linting\njsx\n<CheckBox value={true} />\nand this should cause lint error\njsx\n<CheckBox value />\n. Thanks for the PR @ljharb . Thanks for the PR @ljharb . I've got another use case for an exclusion option of some sort.\nSay, we got a <Button /> component that supports an optional className prop. When provided with a value for the mentioned className prop, the component attaches the CSS class to the actual DOM element. \nYou may say that well then set '' as the default value and you should be good to go. Think of 200 components that all have the same prop and it suddenly becomes a tedious task. Same goes for events like onClick, onChange. \nI really like this rule as it eliminates the need to check the default props during code reviews and tell engineers that they forgot to set a default value for say color prop but things like className don't need a default value. \nThanks for the great work :). ",
    "frankandrobot": "Actually, in npm, v7.0.1 does NOT have eslint 4.0.0 as a peer dependency. You need to bump a patch version and re-publish. . Actually, in npm, v7.0.1 does NOT have eslint 4.0.0 as a peer dependency. You need to bump a patch version and re-publish. . yea that's what I said. yea that's what I said. ",
    "frenchie4111": "Can someone npm publish this change please?. ",
    "dustinsoftware": "Is this what you had in mind?. Is this what you had in mind?. Ok, I think it's ready for another pass :) . \ud83d\udc4d rebased. Thanks for the quick feedback.. Has this already been fixed? I can't repro this issue with the latest commits on master.. I was able to repro this behavior, but it looks like it might be by design.\nPasses:\n{  \n      code: [\n        'var Hello = React.createClass({',\n        '  propTypes: {',\n        '    testing: PropTypes.string.isRequired',\n        '  },',\n        '  render() {',\n        '    const props = this.props;',\n        '    return <div>Hello {props.testing}</div>;',\n        '  }',\n        '});'\n      ].join('\\n'),\n      settings: {\n        react: {\n          createClass: 'createClass',\n        }\n      }\n    }\nFails if createClass is removed from settings.react.\nThis appears to be because, during the unit tests, the default function name for creating React components is set to createReactClass. If the function name used to create the component doesn't match what's defined in settings, the linter thinks that it's in a stateless function when seeing a reference to a variable named props because of this line. This causes the false error to appear - it's saying the render function doesn't have propTypes declared on it (which is true). I was able to repro this behavior, but it looks like it might be by design.\nPasses:\n{  \n      code: [\n        'var Hello = React.createClass({',\n        '  propTypes: {',\n        '    testing: PropTypes.string.isRequired',\n        '  },',\n        '  render() {',\n        '    const props = this.props;',\n        '    return <div>Hello {props.testing}</div>;',\n        '  }',\n        '});'\n      ].join('\\n'),\n      settings: {\n        react: {\n          createClass: 'createClass',\n        }\n      }\n    }\nFails if createClass is removed from settings.react.\nThis appears to be because, during the unit tests, the default function name for creating React components is set to createReactClass. If the function name used to create the component doesn't match what's defined in settings, the linter thinks that it's in a stateless function when seeing a reference to a variable named props because of this line. This causes the false error to appear - it's saying the render function doesn't have propTypes declared on it (which is true). It doesn't crash :) added some more test cases . Ah, right after pushing this, I saw that you'd like to have it in settings and individual rule configuration. What case did you have in mind where it would be necessary to have the option to override it per-rule?. Pushed support for a couple more, I think that's all the major prop-type rules.. I think that could be helpful, but maybe out of scope for this PR. There's a lot of logic around finding declared prop types that is duplicated across multiple rules.. Updated. @DianaSuvorova had a better fix in #1322 \ud83d\ude04 This PR isn't needed anymore.. I\u2019ll take a look at fixing this bug.\nOn Wed, Aug 9, 2017 at 20:31, Jordan Harband notifications@github.com\nwrote:\n\n@yannickcr https://github.com/yannickcr 5ad93b4\nhttps://github.com/yannickcr/eslint-plugin-react/commit/5ad93b4365cc42ff6a6c858fed76b7a2d0c17222\nis a crasher, so it'd be good to cut a quick patch release with that in it\n:-)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1352#issuecomment-321441068,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA5hFq9mN-g8sY8fqCfOGszGjuo_njcAks5sWnmRgaJpZM4Oy5OV\n.\n. I can take a look at this one.. Edit: It looks like there is already a passing test for this case, @gpeal would you mind providing a code sample or failing test?\n\n. I can take a stab at implementing this one. I'm running into an issue testing this - PropTypes.exact does not seem to work as expected when wrapping the proptypes object, like forbidExtraProps does. Still investigating, but here's a repro.\nhttps://codepen.io/dustinsoftware/pen/BmGWXM. @ljharb can you take a look at the pen I linked to? I see you've commented on a few related issues in the prop-types repo, it appears that PropTypes.exact currently can't be used as a wrapper for the whole props object.. Ok, updated. Dargh, thanks...should have caught that one. It shouldn't matter, if arguments is empty, then arguments[0] will return undefined, which will cause this expression to evaluate false. It also handles the case where the first element of arguments contains something that is falsy :) \nIt looks like checking the arguments array this way also matches code style in other places in this project.. Yes, I tested both with and without settings defined - context.settings will always be an object.. I didn't see a good place to put a test for this specific change, and the logic behind get changes, the test I did add will fail.. Sure, just so I can understand, what behavior will that change be verifying?. ",
    "hatched": "After updating to eslint@4.1.1 and eslint-plugin-react@7.1.0 I am still able to reproduce the issue using the provided code.\nConverting it to use extends has also resolves the issue: \n```JavaScript\nclass card extends React.Component {\n  render() {\n    const props = this.props;\n    return (\n      \n        {props.isReturning}\n        {props.departureDate}\n      \n    );\n  }\n}\ncard.propTypes = {\n  departureDate: React.PropTypes.string,\n  isReturning: React.PropTypes.bool\n};\n```\nSo it appears to be limited to assigning const props = this.props when using createClass.. ",
    "hellocreep": "Thanks @hatched and @ljharb , I think that makes sense to me.. Thanks @hatched and @ljharb , I think that makes sense to me.. ",
    "joseph-teb": "\"react/prop-types\": [\n  \"enabled\",\n  { \"ignore\": \"ignore\", \"customValidators\": \"customValidator\" }\n].     \"react/prop-types\": [\n  \"enabled\",\n  { \"ignore\": \"ignore\", \"customValidators\": \"customValidator\" }\n]\n\n-------------------------------or use this rule2 option please-------------\n\"react/prop-types\": [<enabled>, { ignore: <ignore>, customValidators: <customValidator> }]. ",
    "Justkant": "Hi,\n\n\nI understand that you prefere text instead of screenshots. It was just for saving time at work.\n\n\nYou have no need to see the propTypes for Setup because this is not the problem.\n\n\nAs you can see in the screenshot Left & Right are both destructured from steps not from props.\n\n\nCode:\n```javascript\nconst steps = [\n  {\n    Left: Component1,\n    Right: Component2,\n  },\n];\nconst Setup = props => {\n  const { Left, Right } = steps[props.current];\n  return (\n    \n\n\n\n  );\n};\nSetup.propTypes = {\n  current: PropTypes.number.isRequired,\n};\n```. Tomorrow, I'll try this:\njavascript\nconst Setup = props => {\n  const current = props.current;\n  const { Left, Right } = steps[current];\n  return (\n    <div className={style.container}>\n      <Left {...props} />\n      <Right {...props} />\n    </div>\n  );\n};\nTo confirm that the problem occurs when using some props as an index key and destructuring.. ",
    "alexilyaev": "I see, more complicated than I thought.\nCan we add an exceptions or ignore property?\nThis way I could for example ignore ', since we only use \" for attributes, and ' is too common in our texts.. I see, more complicated than I thought.\nCan we add an exceptions or ignore property?\nThis way I could for example ignore ', since we only use \" for attributes, and ' is too common in our texts.. @ljharb 2 reasons:\n1. Texts I receive from external resources (content creators, product manager, marketing)\n2. I write a ton every day, if I had to press an unfamiliar key combination for every ' and \" I would go insane. It's true that for code I could make the exception, but point 1 still stands.. Just clicked the Terms link at the bottom of this page, are these ' proper quotes or just '?\nI see Google Privacy does use proper quotes.\nI do agree with you, just trying to cope with reality.\nEven if I changed my system, I can't change all my client's systems, too many unrelated people involved.\nI would very much want to catch > and } as these often are mistakes.\nI'm willing to PR if the option is acceptable, and with some guidance of course.\nAnd thanks for the package in general, I really appreciate the work you guys are doing!\n\ud83d\udc4d\ud83d\udcaf. @mkhazov That worked!\nSuits our needs.\nforbid is not documented on the rule doc though.. @mkhazov That worked!\nSuits our needs.\nforbid is not documented on the rule doc though.. @ljharb PR'ed :-). ",
    "mkhazov": "There is a \"forbid\" option, so we can easily configure the rule:\n\"react/no-unescaped-entities\": [2, { \"forbid\": [\">\", \"}\"] }],. There is a \"forbid\" option, so we can easily configure the rule:\n\"react/no-unescaped-entities\": [2, { \"forbid\": [\">\", \"}\"] }],. ",
    "michaelgmiller": "Whoops, looks like this was addressed already!. ",
    "cjhoward92": "npm ls fails on some internal packages. Why does that matter?. I believe my peer dependencies to be correct for eslint and all of my plugins. I made a point to verify that. However I will do some digging into why npm ls fails and see if that resolves the issues.. When I get back to this I will definitely verify the test cases. If I find anything I will submit a PR.. ",
    "giraffesyo": "That works perfectly, but I still agree that &#47;&#47; should work as well. . That works perfectly, but I still agree that &#47;&#47; should work as well. . ",
    "dfilipidisz": "Thanks for the review and directions on how to proceed! I'll look into how to utilize codemods for this and will keep each transformation in separate PRs.. First I ran eslint ---fix than I fixed the ~15 cases where it couldn't do it by itself.. Okay, I'll definitely do that in the future! Thanks for guiding me along this, I don't have much experience in open source :). I've added the 2 remaining rules without the options. \nI'm sorry, I might be misunderstanding you. Should I add those options (ex.: \"requireForBlockBody\": true for arrow-parens) in this PR? \nAlso does this mean that shorthand-methods should also come in this PR?\n(I'll merge from master tomorrow morning to resolve conflicts). I've added the 2 remaining rules without the options. \nI'm sorry, I might be misunderstanding you. Should I add those options (ex.: \"requireForBlockBody\": true for arrow-parens) in this PR? \nAlso does this mean that shorthand-methods should also come in this PR?\n(I'll merge from master tomorrow morning to resolve conflicts). Yes, all autofixes, wanted to add manual fixes in a separate commit but wasn't needed in this case AFAIK.\nI'll look into how to rebase than, so far mostly used the Desktop app.. Yes, all autofixes, wanted to add manual fixes in a separate commit but wasn't needed in this case AFAIK.\nI'll look into how to rebase than, so far mostly used the Desktop app.. I failed. Here's what I did:\nUpdated my master (dfilipidisz/eslint-plugin-react) from origin master (yannickcr/eslint-plugin-react) based on this.\nStarted rebase on the PR branch:\ngit rebase -i master\nDidn't sqash or change commit messages. (Although I think I should have changed one to be more descriptive)\nThere was a conflict in the void-dom-elements-no-children rule.\nSomehow this part:\nif (hasChildrenAttributeOrDanger) {\n    // e.g. <br children=\"Foo\" />\n    context.report({\n      node: node,\n      message: errorMessage(elementName)\n  });\n}\nwas conflicting with this part.\nif (args.length < 1) {\n  // React.createElement() should not crash linter\n  return;\n}\nAnd I didn't realize that those parts were in different parts of the file, and were conflicted because the line numbers changed because of my previous commits (I assume).\nSo I managed to keep only the first part and removed the second one to resolve the conflict, than added my change with:\ngit add .\ngit rebase --continue\nAnd than the rebase finished.\nNow the real problem was that I forgot to run npm run test before pushing my changes. Now there is an extra merge commit and an error because of the code I left out from the PR.\nMy question is how to proceed?\n\nScrap this PR and create a new one? No manual code changes are in this PR, but than it would need to be re-reviewed I assume, which seems unnecessary.\nI think this could be fixed with another commit based on this but that would add another commit on top which was precisely the thing I was asked to avoid. \n\nI have a backup branch from before the rebase, so I think with these steps I could fix what I've done, on the cost of another commit.\n. I failed. Here's what I did:\nUpdated my master (dfilipidisz/eslint-plugin-react) from origin master (yannickcr/eslint-plugin-react) based on this.\nStarted rebase on the PR branch:\ngit rebase -i master\nDidn't sqash or change commit messages. (Although I think I should have changed one to be more descriptive)\nThere was a conflict in the void-dom-elements-no-children rule.\nSomehow this part:\nif (hasChildrenAttributeOrDanger) {\n    // e.g. <br children=\"Foo\" />\n    context.report({\n      node: node,\n      message: errorMessage(elementName)\n  });\n}\nwas conflicting with this part.\nif (args.length < 1) {\n  // React.createElement() should not crash linter\n  return;\n}\nAnd I didn't realize that those parts were in different parts of the file, and were conflicted because the line numbers changed because of my previous commits (I assume).\nSo I managed to keep only the first part and removed the second one to resolve the conflict, than added my change with:\ngit add .\ngit rebase --continue\nAnd than the rebase finished.\nNow the real problem was that I forgot to run npm run test before pushing my changes. Now there is an extra merge commit and an error because of the code I left out from the PR.\nMy question is how to proceed?\n\nScrap this PR and create a new one? No manual code changes are in this PR, but than it would need to be re-reviewed I assume, which seems unnecessary.\nI think this could be fixed with another commit based on this but that would add another commit on top which was precisely the thing I was asked to avoid. \n\nI have a backup branch from before the rebase, so I think with these steps I could fix what I've done, on the cost of another commit.\n. Oh okay than, if I'm not causing any major trouble I would like to try to fix this mess I made. It's definitely a learning experience for me, but it's good to know someone can help, thanks!. Oh okay than, if I'm not causing any major trouble I would like to try to fix this mess I made. It's definitely a learning experience for me, but it's good to know someone can help, thanks!. At this point I believe I'm just making matters worse. The master branch passes 2373 test and this PR passes 2363 tests when running npm run test. \nI've added back the code part I know I erased while resolving badly a conflict during the first rebase.. @ljharb Okay. So before I mess up again:\n1. git reset --hard master I will end up with a clean branch if I understand correctly.\n2. Rerun codemods. Commit each change separately as before.\n3. git push --force origin Transform-arrow-functions Will update this PR without needing to merge into master. Question here: do I want to use --force-with-lease instead to be safe?. Re-opening. Re-run everything, test pass, nothing seems to be messed up so far. . ",
    "nsisodiya": "I solved my issue using -\nreact/react-in-jsx-scope\n. ",
    "dferber90": "Wasn't aware of no-deprecated and we didn't upgrade our React version in the shared settings. Closing as it works now \ud83d\ude4c\nThank you for looking into this!. Wasn't aware of no-deprecated and we didn't upgrade our React version in the shared settings. Closing as it works now \ud83d\ude4c\nThank you for looking into this!. ",
    "marcdavi-es": " sits wriggling with excitement waiting for the merge . ",
    "nwoltman": "Looks like someone already did - eslint/eslint#8908. Thanks @pfhayes!. ",
    "virgofx": "Can a new build get released with this PR included?. Need this fixed!!! Importing propTypes via spread causes plugin to bug out. Rule is now completely useless and must be disabled.. AST/node traversal/parsing libs is not my forte :( Could tag with a high priority tag to help attract interest in getting this resolved? Alternatively, would the airbnb package consider removing this from their defaults preset?. ",
    "planttheidea": "Seriously, this was closed nearly a month ago. Is a patch release too much to ask?. ",
    "Benno007": "Yes, currently waiting on this if possible. ",
    "ZebraFlesh": "Is there something which is blocking publishing a release with this PR? Not having it is blocking upgrades from eslint 4.1.1 to 4.2.0.. That's exactly what I'm talking about: I don't want to try and explain to everyone why there are new errors in the logs and why they're okay.. ",
    "msikma": "If, like me, you're annoyed by the error message, my recommendation would just be to replace your old file with the patched one manually for now.\nQuick way to do it (from your project directory):\ncurl -o ./node_modules/eslint-plugin-react/lib/rules/jsx-curly-spacing.js \"https://raw.githubusercontent.com/jseminck/eslint-plugin-react/75fb917c1ce27540f48cbe3fa7436a6822d4b953/lib/rules/jsx-curly-spacing.js\"\n\nThe new release will come around soon enough, assuming you don't clear out your modules too often this will clear up your terminal a bit until the next version rolls around. \ud83d\ude42\n\n. ",
    "haridusenadeera": "Thanks for the quick review! I've made changes according to your comments.  . Ahh, I misunderstood the purpose of that util function. I guess we do not need to check for that then.. Yeah I agree. I will add render method. ",
    "eugeny-dementev": "It shaped as object with function because it used as mixin.\nI expect that displayName with ignoreTranspilerName: true option should be required only for components created as ES6 class with extend React.Component', with 'create-react-class' module or function that returns jsx stuff.\nAnd method names probably shouldn't be handled at all, becauserender` method can be placed in mixin for example.\nOf course using mixin already marked as deprecated feature but unfortunately legacy is still so legacy.. For example it can be that way: \njs\nconst headerMixin = {\n  renderHeader () { return <div>Title</div>; },\n};\nconst contentMixin = {\n  renderContent () { return <div>Content</div>; },\n};\nconst renderMixin = {\n  render () {\n    return (\n      <div>\n        {this.renderHeader()}\n        {this.renderContent()}\n      </div>\n    );\n  },\n};\nconst Page1 = createReactClass({\n  displayName: 'CoolPage',\n  mixins: [\n    renderMixin,\n    headerMixin,\n    contentMixin,\n  ],\n});\nBut it's not the point. I'm just saying that it's strange from something that cannot be used as react component (plain object with method that returns jsx) receive errors for react component.. I didn't say that this pattern with mixins is something good. Just example. \nAnyway thank you for comments. ",
    "green-arrow": "Sorry about that, here's the full source:\n```js\n<a\n  {...css(\n    styles.muted,\n    styles.footerItem,\n    styles.fullWidthOnMobile\n  )}\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n  href=\"https://www.company.com/about\"\n\nabout company\n\n``. FWIW, I can't replicate this on a freshly createdcreate-react-app. It only occurs after upgrading from 1.0.4 to 1.0.10.. I comparedyarn.lock` files between a fresh app and my upgraded one, and the version numbers for eslint and eslint-plugin-react match up between the two.\n\nHere is the result of upgrading react-scripts:\n\nIt looks like eslint-plugin-react was updated to the latest version alright.\nWhen running npm install eslint-plugin-react after doing the upgrade above, I still get the TypeError.. @ljharb - you're completely right, removing the spread on css fixes the issue.\nAny way to work around this?\nEdit: I can workaround this for now by using a different method of passing styles. Not sure if there's any way to work around this that lets you keep the spread.. Thanks for the fix, you all are awesome! :smile:. ",
    "dallonf": "Thanks for the response! If I understand correctly, even with the ignoreTranspilerName option, it would still flag class components as needing a displayName, which would be prohibitively noisy for our situation; classes behave as expected even when doing code coverage and there's no need to assign a displayName to them. \nEven stateless components defined with the function keyword seem to work as expected! It's specifically the arrow function components without a displayName I'd like to flag. \nIt's likely I would have time to submit a PR for this feature, but I'd like some input on what the best option (name and behavior) would be.. Let me try that - that's definitely contrary to how the docs suggest it works: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md\nIn particular, it shows a class component under the \"will cause warnings\" section and a class component with an explicit displayName under \"okay and do not cause warnings\".. ",
    "davidyorr": "with { \"noStrings\": false } the errors are not there. i can fix it by adding the type check and submit a PR. https://github.com/yannickcr/eslint-plugin-react/pull/1302. oh i put the wrong issue # in the commit message -__-. ok i fixed it, let me know if there's anything i need to change. as is, template strings are not causing linting errors, which they should be. i can look into that as well. updated to check for template literals too. it looks like the Literal visitor doesn't hit the node when it's an object or function.. javascript\n<Foo\n  a={true}\n  b={1}\n  c={null} />\nall of those props get hit, so typeof could be boolean, number, and when null it's an object. yeah i'm not sure why. babel-eslint isn't needed for any of the tests in this entire PR, or just the last commit? how can I tell which tests need babel-eslint?. ah okay i see thanks! i'll remove those tests. alright deleted the babel parser tests and kept the default parser ones. ",
    "Robinfr": "Hmm alright I will see if that helps. Thanks for the reply.. I'm using 7.1.0.. so this is a bit curious :confused: \nEDIT: You are correct however, with this test case I don't get errors. I will check what's different in the real case then.... I'm using 7.1.0.. so this is a bit curious :confused: \nEDIT: You are correct however, with this test case I don't get errors. I will check what's different in the real case then.... Updated example:\n```js\nimport React from 'react';\nconst Thing = (props) => (\n    \n\n            {(() => {\n                if (props.enabled && props.testString) {\n                    return (\n                        Enabled!\n                    );\n                }\n            return (\n                <span>Disabled..</span>\n            );\n        })()}\n    </div>\n</div>\n\n);\nThing.propTypes = {\n    enabled: React.PropTypes.bool,\n    testString: React.PropTypes.string\n};\nThing.defaultProps = {\n    enabled: false\n};\nexport default Thing;\n```\nIn this case, you have two props, enabled and testString. You will get the following error when linting this:\nbash\n'enabled' PropType is defined but prop is never used  react/no-unused-prop-types. Updated example:\n```js\nimport React from 'react';\nconst Thing = (props) => (\n    \n\n            {(() => {\n                if (props.enabled && props.testString) {\n                    return (\n                        Enabled!\n                    );\n                }\n            return (\n                <span>Disabled..</span>\n            );\n        })()}\n    </div>\n</div>\n\n);\nThing.propTypes = {\n    enabled: React.PropTypes.bool,\n    testString: React.PropTypes.string\n};\nThing.defaultProps = {\n    enabled: false\n};\nexport default Thing;\n```\nIn this case, you have two props, enabled and testString. You will get the following error when linting this:\nbash\n'enabled' PropType is defined but prop is never used  react/no-unused-prop-types. ",
    "jackyho112": "Hello @ljharb, I am working on this right now and I have one question. By always, never and ignore, do you mean respectively enforce always having curly braces, enforce never having unnecessary curly braces and ignore the rule or always check for unnecessary curly braces, never check for unnecessary curly braces and ignore the rule?\nIf it is the latter, it doesn't seem like we need both never and ignore.. @ljharb \nThanks for replying! I will make the changes.. Will do!. @jseminck \nMy bad. I misinterpreted the eslint docs. I think I can fix for always as well. . @ljharb \nWell, I hope my attempt wasn't too embarrassing. I am not sure why the travis build failed. All the tests passed for me. Let me know if you have any feedback to improve my PR. . @ljharb Good suggestions! I will make the changes.. @ljharb \nI added tests for template literal and spread props. I also accounted for template literal in the rule and added a new rule option to allow passing in a single string to change the default. Let me know if there is any more change you have in mind. Thanks!. @jseminck They should. I will make the change.. @ljharb I added the option to fix for enforcing curly braces and had to account for a lot of edge cases. Hopefully, I haven't missed anything. Let me know if there is any more improvement you have in mind for my branch. Thanks!. Hey @ljharb, all checks have passed now. Let me know if you have any more change in mind for the PR and I will get them done as soon as possible. Thanks!. @ljharb \nThanks for all your suggestions! They all make sense and give me an idea on how to better contribute to this repo for future PRs. Hopefully, everything looks good now!. @ljharb \nThanks again for all your suggestions. I was leaving original quotes in as much as I could previously when I was fixing the styles, but your suggestion makes sense for the purpose of consistency. I have changed the operations to fix with double quotes in all cases. Hope things look better now!. @ljharb Thank you for the review!. @EvHaus \nYou are welcome! Look forward to doing more.. @EvHaus \nYou are welcome! Look forward to doing more.. @ljharb Sorry, didn't notice. My bad. Closing this. :sweat_smile:. @ljharb \nI think the set, classInfo.aliases, will only be added to if the property name gets assigned to a different variable name.  \nFor instance,\n```js\nclass App extends React.Component {\n        state = { foo: 0 };\n    doSomething = () => {\n      const { state: { foo: bar }} = this;\n\n      return bar;\n    }\n\n    render() {\n      return <SomeComponent />;\n    }\n  }\n\n```\nwill add 'bar' to the set. I have added one more test regarding this.\nI also refactored how the code deals with classInfo.aliases according to your feedback. We still need to clear the set after each method definition though because each alias added is local to the class method. Let me know if this looks better. . @ljharb \nBased on your suggestion, I have restored the implementation back to using classInfo.aliases = new Set() which is a part of the original code. \nHowever, we still need to do classInfo.aliases = new Set() for every class method definition because the aliases in classInfo.aliases are local to each class method. \nLet me know if that's ok. If not, there are alternative but potentially more complicated ways to implement this, such as making classInfo.aliases an object and setting a property for each class method's aliases.. @ljharb \nThanks for the review! After this is merged, I can take a look at documenting no-unused-state as I saw there is an issue open for it.. @jseminck \nI think this test is failing on master. Any clue? Maybe this test should report an error in the first place?. @ljharb, @EvHaus, @yannickcr, @lencioni \nDecided to adhere to the original implementation instead because it is the safest approach, it is easier to review and if there is a new way of defining a class method in the future, the rule won't break immediately. \nNow, this PR just merely adds the support for a class method defined by an arrow function in a way how the original code intends to and does nothing else. I hope that is ok and should at least make this PR more mergable. \ud83d\ude04 . @EvHaus, @ljharb \nThanks for the approvals! \ud83d\ude04 . @joeybaker \nI am merely just a contributor as well. I am not sure if I will have time to review it this week, but I will try my best. \ud83d\ude04 . @joeybaker \nI am merely just a contributor as well. I am not sure if I will have time to review it this week, but I will try my best. \ud83d\ude04 . I will give this one a look. \ud83d\ude04 . @ljharb \nSeems like the rule needs a bit more fixing than I thought it would to only check for bind calls in JSX props. If that was its purpose, this test and this one should not warn but they are currently invalid tests.\nThe current logic in the rule checks for all bind calls in all JSX methods and warn each of them. And along with the documentation in that file, I am given the impression that this rule does check for bind calls in a JSX method instead of only those in JSX attributes. \nI understand that based on the rule doc, it should only check for JSX props. However, based on the purpose of such checks, wouldn't it make sense to check for all bind calls in a method that returns JSX? Because all of those functions will be created again on every render like the case mentioned by the issue opener and that is the undesirable outcome the rule is trying to prevent.\nThis is just my 2 cents. If we have to write the rule to fulfill exactly its purpose as documented, I will probably have to refactor a portion of its logic, have some new logic to deal with aliases like what no-unused-state is doing, get rid of wrong tests and add new tests.\nIf my opinion seems reasonable, we would only have to improve the docs.\nLet me know your thoughts. \ud83d\ude04 . @ljharb \nThanks for replying! I think I know the direction I'm going with to fix this issue now. Will open a PR soon. \ud83d\ude04 . @lydell \nThanks for the input! That was extremely helpful. \nWhen I was implementing this, I referred mostly to the React docs. But the JSX specs are definitely better! I can\u2019t believe I didn\u2019t think of it at the time.\nI am in favor of the bailout approach as well. I will try to get a PR up by this week to fix this.. @lydell \nCan't thank you enough for the feedback! Will update the PR soon based on your suggestions!. @lydell \nI think I have covered most of the things you said. Let me know if you have any other improvement in mind. \ud83d\ude00 . @ljharb Forgot about them. Will fix. \ud83d\ude05 . @ljharb \nThanks for the feedback! I have gotten rid of all the unnecessary babel-eslint in the tests. For async arrow functions, I think the code has already accounted for it by checking all the block statements, so I just added more tests regarding that.\nNow I will always keep async arrow functions in mind for future contributions. let me know if there is anything else I can improve on this PR. \ud83d\ude04 . @ljharb \ud83d\ude04 , didn't know. I'm on it!. @ljharb Good call. Gonna have to do it tomorrow though.. Thanks for the approval!. @ljharb Thanks for tagging me! I think this bug will be fixed in this PR because, with this update, the rule will identify the backslash and bail out instead of incorrectly fixing the code.. @ljharb Thanks for tagging me! I think this bug will be fixed in this PR because, with this update, the rule will identify the backslash and bail out instead of incorrectly fixing the code.. @ljharb Thanks for tagging me! This rule doesn't support arrow function definition as class method currently. I think this will add it.. I removed the default by mistake. They are back now.. I made the change to maintain consistencies across files, but I guess it doesn't matter anyway. I have changed it back to using the arrow function.. @lydell\nWe could use String.fromCharCode here to fix but based on your comment, it may not be what the author has in mind. I think maybe it's best to keep it simple and let the author decide.. Not sure if it is also necessary to check for patterns like U+2029 because it doesn't seem like it is recognized in both JS and JSX. Correct me if I am wrong.. I remember I did this because of an Eslint rule. But I agree with you. I will try to use template literals on at least the tests in which I have to escape quote characters.. I actually wanted to ask you about them. I know you mentioned them here. \n\nsimilarly for the line terminators: CR, LF, U+2028 and U+2029\n\nI am not quite familiar with those. Do you type exactly those characters of any of the sets into the string to terminate a line? I tried having them in a JSX expression and it just displays those characters. Sorry about my lack of knowledge on the subject matter. \ud83d\ude00 . Thanks for pointing it out! If we were to bail out, I would check for multiple whitespaces?. For the example you mentioned, the output would be <div propWithLineTerminators={\"\\\\n\\\\r\\\\u2028\\\\u2029\"}/>? Because these characters would be displayed as they are in a JSX attribute. \nIn that case, wouldn't the parser have already handled that? \nFor <div propWithLineTerminators=\"\\n\\r\\u2028\\u2029\"/>\n\n. @lydell \nYeah, since it is valid, I added back the fix for cases like this and the tests.. It's all good. I am actually quite grateful for all your regex comments. I learned a lot from them! \ud83d\ude04 . I think this block of code reports any violation in a component's render method. This rule is supposed to only report violations in JSX props, so this is not needed.. ",
    "RDGthree": "Updated!. No worries, rebased!. No problem! Easy change.. ",
    "Xeoncross": "That's what I thought https://github.com/facebook/flow/issues/4421. That's what I thought https://github.com/facebook/flow/issues/4421. ",
    "derekjobst": "I've also experienced these issues. Any idea what steps we could take to get moving on a fix?. ",
    "tobyf93": "https://github.com/tobyf93/jsx-sort-props-issue\nnpm run lint will give you an error about boolean attributes but not prop order.... same result for:\n\"react/jsx-sort-props\": [2, {\n  \"callbacksLast\": false,\n  \"shorthandFirst\": false,\n  \"shorthandLast\": false,\n  \"ignoreCase\": false,\n  \"noSortAlphabetically\": false,\n  \"reservedFirst\": true\n}]. Any idea on when the merge will happen @ljharb?  . ",
    "tagoro9": "I just run into this issue too. I think that when reservedFirst is enabled and noSortAlphabetically is off, then the alphabetical order is only enforced within the reserved props.\nAdding a test case like this shows the issue:\nJS\n{\n  code: '<App key={2} b a />',\n  options: reservedFirstAsBooleanArgs,\n  errors: [expectedError]\n}\nI don't know if the expected behavior is that sorting is only enforced within the reserved props, but I would expect the alphabetical order to also be enforced in the other props.\nI think I have a fix for this, so I'm gonna submit a PR with it. If this fix is not desired and current behavior is the desired, I apologize for all this noise.. I updated the tests with the expected output, but I the fix is not taking into account the reserved words:\nExpected: <App key={2} b dangerouslySetInnerHTML={{__html: \"EPR\"}} />\nActual : <App b dangerouslySetInnerHTML={{__html: \"EPR\"}} key={2} />\nI'm gonna try to see if I can add a fix for this.. Sorry I took so long to take a look at the change requests.\n\nThis test is no longer expecting 2 errors.\nAdded expected output for the new test cases.\nWith the expected output the tests were failing, so I updated the generateFixerFunction to take into account the reservedFirst config and sort props accordingly. Is this something wanted?. I think that after the changes this is triggering the expectedError as the ||\n (!previousIsReserved && !currentIsReserved) check and it is true when evaluating dangerouslySetInnerHTML and b.. I think dangerouslySetInnerHTML is not a reserved prop name for this component. I think it is only considered reserved for DOM components and not react components. This code is deleting dangerouslySetInnerHTML from the reserved list for the cases where the component is not a DOM component.. Added.. \n",
    "sadarshannaiynar": "Still not working any working fix?. ",
    "SBRK": "I second this, I would like this rule, for better readability in our code. ",
    "mruzekw": "Looks like this is being addressed in https://github.com/yannickcr/eslint-plugin-react/pull/1404. ",
    "wwwdata": "yes, I also upgraded to the latest version of eslint yesterday and the same problem happens in there as well. But it only makes sense because it was caused by eslint-plugin-react . ",
    "dkrutsko": "@DianaSuvorova I did some further testing. It turns out that the example above won't work unless this.props is used somewhere. So the following example will work:\n```js\nclass MyComponent extends React.PureComponent\n{\n    static propTypes =\n    {\n          used: PropTypes.string,\n        unused: PropTypes.string\n    }\nrender()\n{\n    return <div>{this.props.used}</div>;\n}\n\n}\n```\nBut this one won't:\n```js\nclass MyComponent extends React.PureComponent\n{\n    static propTypes =\n    {\n          used: PropTypes.string,\n        unused: PropTypes.string\n    }\nrender()\n{\n    return <div></div>;\n}\n\n}\n```\nMoreover, in my original test, the reason it wasn't working was because I did something like:\njs\nlet\n{\n    used,\n    ...attributes\n} = this.props;\nWhich I guess makes sense because I'm grabbing the result of the attributes but I'm not necessarily using them. I can't tell whether this is a bug or not. Hope this information helps!. Hey everyone, I'd like to add two additional pieces of information regarding this issue:\n\n\nSince PR #1652 it seems that no-typos started detecting more issues! However, While this rule detects \"invalid\" propTypes defined in functional components, it doesn't work inside classes when defining propTypes through static instance variables.\n\n\nFor this issue specifically, I'm guessing that all that needs to change is this variable? Would mutating it through props solve the issue?. Hey everyone, I'd like to add two additional pieces of information regarding this issue:\n\n\nSince PR #1652 it seems that no-typos started detecting more issues! However, While this rule detects \"invalid\" propTypes defined in functional components, it doesn't work inside classes when defining propTypes through static instance variables.\n\n\nFor this issue specifically, I'm guessing that all that needs to change is this variable? Would mutating it through props solve the issue?. @brettdh It appears that the \"valid\" prop-types are retrieved using Object.keys (require ('prop-types')). I'm guessing that making this variable user editable through the linter settings would allow anybody to add additional prop-types. Like in my case, I'd like an option to add more prop-types on top of the existing ones in the package.. @alexzherdev I believe you're right, I've recently updated to Babel 7 and I remember it coming up in the patch notes. But only for the shorthand syntax, <React.Fragment> works fine in Babel 6.. @alexzherdev I believe you're right, I've recently updated to Babel 7 and I remember it coming up in the patch notes. But only for the shorthand syntax, <React.Fragment> works fine in Babel 6.. \n\n",
    "jprosevear": "eslint/eslint#8594 has landed.. ",
    "karl-run": "Defining foo as its own type does not help.\n```javascript\ntype Foo = {\n  bar: boolean,\n};\ntype Props = {\n  foo: Foo,\n};\n```\nExact same behaviour.. Might be related to #1002 and #933.. ",
    "pcfutures": "+1, this would be nice. ",
    "DanielSWolf": "I'm having the same problem. I use class properties, but sort-comp insists that they all be placed after componentWillUnmount.. ",
    "KatGr": "+1. ",
    "veob": "\nrenderFoo methods are an antipattern anyways\n\n@ljharb, why? Maybe you can point to some articles on the topic? Thanks. . ",
    "leethree": "@ljharb when is the next release scheduled? thanks!. I'm seeing the same issue since I enabled react/default-props-match-prop-types rule. The error goes away when I disable the rule.. ",
    "tconroy": "Hey @ljharb, thanks so much for the speedy reply. :)\nCLI exits cleanly, however I do see some warnings thrown from eslint when running with --debug:\ncan't resolve reference #/definitions/basicConfig from id #\ncan't resolve reference #/definitions/basicConfigOrBoolean from id #\ncan't resolve reference #/definitions/basicConfigOrBoolean from id #\nhowever, based on your input from this thread, it seems like these particular warnings aren't a problem.\nHere's the output from the Sublime Text console while running the linter internally:\n1 problem\ncan't resolve reference #/definitions/basicConfig from id #\ncan't resolve reference #/definitions/basicConfigOrBoolean from id #\ncan't resolve reference #/definitions/basicConfigOrBoolean from id # \n{'add_blank_line_after_doc_string': True, 'dict_colon': ': ', 'add_blank_lines_around_comments': True, 'syntaxes': 'python', 'parenthesize_tuple_display': True, 'assignment': ' = ', 'boilerplate': '', 'wrap_doc_strings': False, 'normalize_doc_strings': False, 'max_seps_func_ref': 5, 'max_seps_func_def': 3, 'comment_prefix': '# ', 'blank_line': '', 'keep_blank_lines': True, 'subscript_sep': '=', 'leftjust_comments': False, 'max_lines_before_split_lit': 2, 'shebang': '#!/usr/bin/env python', 'can_split_strings': False, 'keep_unassigned_constants': False, 'max_char': 80, 'max_seps_dict': 3, 'java_style_list_dedent': False, 'slice_colon': ':', 'single_quoted_strings': False, 'indent_with_tabs': True, 'indent_size': 1, 'format_on_save': False, 'doc_tab_replacement': '....', 'list_sep': ', ', 'max_seps_series': 5, 'left_margin': '', 'function_param_assignment': '=', 'leftjust_doc_strings': False, 'wrap_comments': False, 'double_quoted_strings': False, 'function_param_sep': ', '}\nSublimeLinter: flow attempting to run from: ['/Users/Tom/Code/rentjoy/node_modules/.bin/flow', 'check-contents', '@', '--show-all-errors', '--json'] \nSublimeLinter: found flow pragma! \nSublimeLinter: flow: index.jsx ['/Users/Tom/Code/rentjoy/node_modules/.bin/flow', 'check-contents', '@', '--show-all-errors', '--json'] \nSublimeLinter: flow output:\n[{\"flowVersion\":\"0.52.0\",\"errors\":[],\"passed\":true},{}] \nSublimeLinter: flow 0 errors. passed: True \nSublimeLinter: eslint: index.jsx ['/Users/Tom/Code/rentjoy/node_modules/.bin/eslint', '--format', 'compact', '--stdin', '--stdin-filename', '@', '--stdin-filename', '@'] \nSublimeLinter: eslint output:\n/Users/Tom/Code/rentjoy/src/views/pages/@: line 7, col 3, Error - JSX not allowed in files with extension '' (react/jsx-filename-extension). Turns out it was an extension config error in my editor. No problem with eslint or the plugin. Apologies!. ",
    "drew-wallace": "@tconroy I'm having the same issue. What did you do to fix it?. ",
    "Ogala": "@drew-wallace There's is a good fix on Stackoverflow \nhttps://stackoverflow.com/questions/43031126/jsx-not-allowed-in-files-with-extension-js-with-eslint-config-airbnb. ",
    "doochik": "@ljharb Let my clarify puprose of BaseComponent in my project. This is very tiny class which wraps in try-catch some lifecycle methods like constructor, render, etc. It has no functionality.\nBasically it has same ideas like componentDidCatch in react@16.\nAt this time I can't update to esling-pligin-react@7.2.0 because you've fixed https://github.com/yannickcr/eslint-plugin-react/issues/832 :). Ok, I understand your point. Example\n```jsx\nconst React = require('react');\nconst PropTypes = require('prop-types');\nclass MyComponent extends React.PureComponent {\n    componentDidUpdate(prevProps) {\n        const { items } = this.props;\n        const hasNewImage = items.length > prevProps.items.length;\n    }\nrender() {\n    return null;\n}\n\n}\nMyComponent.propTypes = {\n    items: PropTypes.array,\n};\nmodule.exports = MyComponent;\n```\nhttps://github.com/yannickcr/eslint-plugin-react/pull/2099 fixes this bug. ",
    "dumpsayamrat": "Oh, You're right. Maybe I'm overthinking.\nThank you.. ",
    "jeggy": "For a component that would look something like this, would still not work\n```jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { compose, setPropType } from 'recompose';\nimport { injectIntl } from 'react-intl';\nconst propTypes = {\n  messageId: PropTypes.string.isRequired,\n};\nconst TheComponent = ({ intl: { formatMessage }, messageId }) => (\n  \n{formatMessage(messageId)}\n\n);\nexport default compose(\n  injectIntl,\n  setPropTypes(propTypes),\n)(TheComponent);\n```\nas the messageId needs to be defined inside propTypes, but the intl is going to be injected, so it should not be there.. ",
    "NikolayFrantsev": "Can not reproduce tastcase anymore on latest plugin version.. ",
    "darrenklein": "Sorry, I meant to include that - thanks for reminding me.\n\"space-before-function-paren\": [1, \"never\"]. Oh shoot - this is the wrong repo - meant to post this in https://github.com/eslint/eslint. @nicholas-l Thank you so much, that's obviously my mistake. Really appreciate you taking the time to school me on this.. ",
    "LINKIWI": "@PFarejowicz FYI. Can confirm that this resolves #1364. Thanks for your work!. You're right; my mistake. I noticed that the 7.8.1 build failed as well but did not check if the failure cause was the same.. ",
    "mindtricksdev": "Here's a screenshot:\n\nThe error is triggered after typing ...x.\nNot sure why, but if I disable the boolean rule the error stops occurring.. ",
    "setek": "Hi, I\u2019m running 7.4.0 and still getting this error:\npackage.json:\n\"eslint-plugin-react\": \"^7.4.0\"\neslint is 4.7.2\n.eslintrc.js:\n\"react/boolean-prop-naming\": [\n    \"error\",\n    { \"rule\": \"^(is|has)[A-Z]([A-Za-z0-9]?)+\" }\n],\nError:\nCannot read property 'properties' of undefined\nTypeError: Cannot read property 'properties' of undefined\n    at EventEmitter.MemberExpression (/Users/user/repos/myrepo/node_modules/eslint-plugin-react/lib/rules/boolean-prop-naming.js:183:45)\n    at emitOne (events.js:120:20)\n    at EventEmitter.emit (events.js:210:7)\n    at NodeEventGenerator.applySelector (/Users/user/repos/myrepo/node_modules/eslint/lib/util/node-event-generator.js:265:26)\n    at NodeEventGenerator.applySelectors (/Users/user/repos/myrepo/node_modules/eslint/lib/util/node-event-generator.js:294:22)\n    at NodeEventGenerator.enterNode (/Users/user/repos/myrepo/node_modules/eslint/lib/util/node-event-generator.js:308:14)\n    at CodePathAnalyzer.enterNode (/Users/user/repos/myrepo/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:606:23)\n    at Traverser.enter (/Users/user/repos/myrepo/node_modules/eslint/lib/linter.js:962:32)\n    at Traverser.__execute (/Users/user/repos/myrepo/node_modules/estraverse/estraverse.js:397:31)\n    at Traverser.traverse (/Users/user/repos/myrepo/node_modules/estraverse/estraverse.js:501:28). Hi, I\u2019m running 7.4.0 and still getting this error:\npackage.json:\n\"eslint-plugin-react\": \"^7.4.0\"\neslint is 4.7.2\n.eslintrc.js:\n\"react/boolean-prop-naming\": [\n    \"error\",\n    { \"rule\": \"^(is|has)[A-Z]([A-Za-z0-9]?)+\" }\n],\nError:\nCannot read property 'properties' of undefined\nTypeError: Cannot read property 'properties' of undefined\n    at EventEmitter.MemberExpression (/Users/user/repos/myrepo/node_modules/eslint-plugin-react/lib/rules/boolean-prop-naming.js:183:45)\n    at emitOne (events.js:120:20)\n    at EventEmitter.emit (events.js:210:7)\n    at NodeEventGenerator.applySelector (/Users/user/repos/myrepo/node_modules/eslint/lib/util/node-event-generator.js:265:26)\n    at NodeEventGenerator.applySelectors (/Users/user/repos/myrepo/node_modules/eslint/lib/util/node-event-generator.js:294:22)\n    at NodeEventGenerator.enterNode (/Users/user/repos/myrepo/node_modules/eslint/lib/util/node-event-generator.js:308:14)\n    at CodePathAnalyzer.enterNode (/Users/user/repos/myrepo/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:606:23)\n    at Traverser.enter (/Users/user/repos/myrepo/node_modules/eslint/lib/linter.js:962:32)\n    at Traverser.__execute (/Users/user/repos/myrepo/node_modules/estraverse/estraverse.js:397:31)\n    at Traverser.traverse (/Users/user/repos/myrepo/node_modules/estraverse/estraverse.js:501:28). ",
    "LostCrew": "I'm currently experiencing the same issue. Let me know if you need more details on my setup.. ",
    "cheton": "I got this error with following setup:\n\neslint@4.5.0\neslint-plugin-jsx-a11y@5.1.1\neslint-plugin-react@7.3.0\n\nCannot read property 'name' of undefined\nTypeError: Cannot read property 'name' of undefined\n    at Object.utils.isExplicitComponent.getRelatedComponent (/Users/cheton/github/cncjs/cncjs/node_modules/eslint-plugin-react/lib/util/Components.js:540:46)\n    at Linter.node.name.PROP_TYPES.some.args.elements.forEach.node.properties.forEach.STATIC_CLASS_PROPERTIES.forEach.LIFECYCLE_METHODS.forEach.MemberExpression (/Users/cheton/github/cncjs/cncjs/node_modules/eslint-plugin-react/lib/rules/no-typos.js:120:40)\n    at emitOne (events.js:82:20)\n    at Linter.emit (events.js:169:7)\n    at NodeEventGenerator.applySelector (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/lib/util/node-event-generator.js:265:26)\n    at NodeEventGenerator.applySelectors (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/lib/util/node-event-generator.js:294:22)\n    at NodeEventGenerator.enterNode (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/lib/util/node-event-generator.js:308:14)\n    at CodePathAnalyzer.enterNode (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:602:23)\n    at Traverser.enter (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/lib/linter.js:925:36)\n    at Traverser.__execute (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/node_modules/estraverse/estraverse.js:397:31)\n    at Traverser.traverse (/Users/cheton/github/cncjs/cncjs/node_modules/eslint/node_modules/estraverse/estraverse.js:501:28)\nIn the getRelatedComponent function, the componentNode.properties[k].key is undefined in the for loop.\njs\n// Traverse the node properties to the component declaration\nfor (i = 0, j = componentPath.length; i < j; i++) {\n  if (!componentNode.properties) {\n   continue;\n  }\n  for (k = 0, l = componentNode.properties.length; k < l; k++) {\n    if (componentNode.properties[k].key.name === componentPath[i]) {\n      componentNode = componentNode.properties[k];\n      break;\n    }\n  }\n  if (!componentNode || !componentNode.value) {\n    return null;\n  }\n  componentNode = componentNode.value;\n}. After narrowing down over 500+ files, I discovered a small file that could cause the error.\nhttps://github.com/cncjs/cncjs/blob/master/src/app/api/api.version.js\n```js\nimport url from 'url';\nimport registryUrl from 'registry-url';\nimport registryAuthToken from 'registry-auth-token';\nimport request from 'superagent';\nimport pkg from '../../package.json';\nimport {\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\nexport const getLatestVersion = (req, res) => {\n    const scope = pkg.name.split('/')[0];\n    const regUrl = registryUrl(scope);\n    const pkgUrl = url.resolve(regUrl, encodeURIComponent(pkg.name).replace(/^%40/, '@'));\n    const authInfo = registryAuthToken(regUrl);\n    const headers = {};\nif (authInfo) {\n    headers.Authorization = `${authInfo.type} ${authInfo.token}`;\n}\n\nrequest\n    .get(pkgUrl)\n    .set(headers)\n    .end((err, _res) => {\n        if (err) {\n            res.status(ERR_INTERNAL_SERVER_ERROR).send({\n                msg: `Failed to connect to ${pkgUrl}: code=${err.code}`\n            });\n            return;\n        }\n\n        const { body: data = {} } = { ..._res };\n        data.time = data.time || {};\n        data['dist-tags'] = data['dist-tags'] || {};\n        data.versions = data.versions || {};\n\n        const time = data.time[latest];\n        const latest = data['dist-tags'].latest;\n        const {\n            name,\n            version,\n            description,\n            homepage\n        } = { ...data.versions[latest] };\n\n        res.send({ time, name, version, description, homepage });\n    });\n\n};\n. This will cause a crash:js\nconst fn = (err, res) => {\n    const { body: data = {} } = { ...res };\n    data.time = data.time || {};\n    data['dist-tags'] = data['dist-tags'] || {};\n    data.versions = data.versions || {};\n};\n```. I can confirm it's fixed in 7.4.0-rc.0. Thank you!. ",
    "pascalduez": "Yep, this might not be needed for the dummy example provided above, but will be as soon as you need one of the exposed types.\nAnd yes the codemod convert all those imports anyway.\nhttps://github.com/facebook/flow/blob/v0.53/Changelog.md#0530\n. ",
    "benjaminRomano": "I assume they are using the import * as ... syntax because they want people to use their types prefixed with React.\nFor example,\n```js\nimport * as React from 'react';\nlet element: React.Node = ...;\n```\nis equivalent to \n```js\nimport React from 'react';\nimport type {Node} from 'react';\nlet element: Node = ...;\n```\nHowever, the first example is \"cleaner\".. ",
    "tgallacher": "This is also a problem I have come across after upgrading to Flow@0.53 with `eslint-plugin-react@7.2.1. \nI think Flow wants you explicitly use Reacts utility types, and types are not automatically attached to the default export as it isn't always guaranteed to be an object -- could be a number, for example -- and so you need to do a full import under a namespace. If you only need a single type, and want to take advantage of tree-shaking you could combine them in one line like: \njavascript\nimport React, { type Node } form 'react'\nNote, theres a brief outline of this towards the end of the Components section on Flow docs. Temp fix appears to be to use both the new required generics approach enforced by Flow@0.53, and the (now) legacy approach. For example: \n```javascript\nimport React, { type Element } from 'react'\ntype Props = {\n   exA: number\n};\ntype State = {\n   exB: string\n};\n// \n// Latest version of Flow wants you to use generics\n// but current version of Eslint plugin warns against react/prop-types\nclass Foo extends React.Component{\n    props: Props; // This will keep \"eslint-plugin-react\" happy without interfering with Flow new generics req.\nstate = {\n    exB: 'initial val'\n};\n\nrender(): Element<'div'>{\n    const { exA } = this.props;\n    const { exB } = this.state;\n\n    return (\n        <div>\n            <ul>\n                <li>Props val: { exA }</li>\n                <li>(initial) State val: { exB }</li>\n            </ul>\n        </div>\n    );\n}\n\n}\n```. ",
    "johnhaley81": "@jseminck I pulled in https://github.com/yannickcr/eslint-plugin-react#e2f6460a63bd0cd0dca0c8308e35ff831d5161ed but I'm still not getting prop validation detection with flow types. I also added:\n\"settings\": {\n    \"react\": {\n      \"flowVersion\": \"0.53\"\n    }\n  }\nto my .eslintrc.js file. Is there something else I'm missing? . @jseminck I pulled in https://github.com/yannickcr/eslint-plugin-react#e2f6460a63bd0cd0dca0c8308e35ff831d5161ed but I'm still not getting prop validation detection with flow types. I also added:\n\"settings\": {\n    \"react\": {\n      \"flowVersion\": \"0.53\"\n    }\n  }\nto my .eslintrc.js file. Is there something else I'm missing? . I Confirmed that I'm on master. Here's a screenshot of what I'm seeing:\n\n. Oh and I would definitely recommend Flow. I've been using it for a few things and it's been great.. @jseminck I just tested this out in my code and it's working great!. ",
    "ZhangYiJiang": "Hi, can I check when this changeset will be released? Will it be the next minor or major release? . ",
    "willdurand": "@jseminck for some reasons, eslint fails to validate the props (react/prop-types) with the following syntax:\n```js\ntype Props = {|\n  className?: string,\n  width?: number,\n  minWidth: number,\n  range: number,\n|};\nexport default class LoadingText extends React.Component {\n}\n```\nbut this works:\n```js\ntype Props = {|\n  className?: string,\n  width?: number,\n  minWidth: number,\n  range: number,\n|};\nexport default class LoadingText extends React.Component {\n}\n```\nAny idea?. sure thing!. I also have troubles when State is defined:\n```js\ntype Props = {|\n  className?: string,\n  width?: number,\n  minWidth: number,\n  range: number,\n|};\ntype State = {|\n  // attributes\n|};\nexport default class LoadingText extends React.Component {\n}\n```\nEslint outputs the same problems as mentioned before... Because of the latest comment, I double checked our dependencies from scratch and one of our dependency did not pull the latest version of this plugin. I am daft, I am very sorry. This works as expected with version 7.4.0.... ",
    "AndrewSouthpaw": "A tip for people upgrading and it doesn't seem to work. If you're working in an IDE (e.g. IntelliJ), make sure you restart it after upgrading your dependencies. IntelliJ does something with caching so the new rules won't be used until after a restart. Everything is working fine afterward. Another hour lost to the ether... \ud83d\ude44 \nThanks @jseminck et. al for the hard work to make this happen!. ",
    "Palisand": "@ljharb Thanks. So in this case, a class component is preferred over a functional one. How come airbnb allows refs and arrow functions, is the performance benefit not great enough to warrant these lint checks? In your opinion, is it always best to refactor a stateless component into a class when dealing with arrow functions, even with the planned functional component performance optimizations?. ",
    "yepninja": "Fix example for valid jsx in the attribute. Return tests.\nAlso I've added conditions to defaults. They were already part of declaration and assignment rules. Now it is separated and becomes more common rule.. @ljharb Can you review again, please?. Now there are only additions, so this version is fully compatible with previous.. @ljharb Is it would be useful to add warning?. To enable checking condition if they now use conditions in declaration or assignment. @ljharb Hello! What is the status of this PR? Do you need these changes in the project?. This is the same tests as tests for condition rule. I can return them if you think that they are useful. The more tests the better. Agreed!\nI've renamed to prop. This test case checked the condition in declaration. Now checking the condition is separated.. This test case checked the condition in assignment. Now checking the condition is separated.. Yes, it is a broken change for declarations. But now the logic of checking is better. Yes, it is a broken change for assignments too. Yes, I can do it now. But it is not very good, so I suggest to do this only as temporary solution, and separate checking condition in major release. ",
    "zpao": "Do you need anything else from me here?. Oh shoot, I must have missed adding that line checking another thing\u2026 Sorry.\nI had this.state.foo++ right here as a valid case - we're in the constructor and while I think it's awkward, it's legal.. Assignment doesn't actually matter until we're out of the constructor method. That's when React takes over.\nBut that's also a tangential change to what I wanted to make here - I'm bringing ++ to parity with = (you have a test case immediately above this one showing that). If you want to change how you treat assignment as well, that's fine but I think you probably want to do that distinctly.. ",
    "martin-svk": "It also fails when importing specific prop types directly:\n```\nimport { func, number } from 'prop-types';\nMyComponent.propTypes = {\n    funcProp: func.isRequired,\n    numberProp: number.isRequired\n};\n```\nResulting in react/no-typos Error.. ",
    "oieduardorabelo": "same happens when using react-intl inject hoc:\n```js\nimport { injectIntl, intlShape } from \"react-intl\";\nfunction Example() { //code }\nExample.propTypes = {\n  // ESLint error: 'Typo in declared prop type: isRequired (react/no-typos)'\n  intl: intlShape.isRequired\n};\nexport default injectIntl(Example)\n```\n\nyou can ignore the line number in the screenshot, is just an example. ",
    "felpin": "Well, this does not resolve the issue, but you can disable a rule in ESLint with a comment\njavascript\nFoo.propTypes = {\n  // eslint-disable-next-line react/no-typos\n  bar: MyPropTypes.string.isRequired\n}\nIn this particular case I do that while this issue is open. ",
    "zxlin": "@jseminck \nAnother case where webpack's ProvidePlugin is used to avoid repetitively importing prop-types everywhere. \nIn my code I don't import prop-types explicitly and simply write:\nconst { string, object } = PropTypes;\nand get the validators that way as webpack will replace all instances of PropTypes with the prop-types module.. ",
    "Kenjirou": "Same typo-error for ReactNative's style proptypes:\n```javascript\nimport PropTypes from 'prop-types';\nimport {View} from 'react-native';\nCoolComponent.propTypes = {\n    containerStyle: View.propTypes.style,\n};\n```. ",
    "abdennour": "@jseminck  , any update ? we are waiting \u2615\ufe0f. ",
    "extwiii": "any update ? we are waiting \u2615\ufe0f. any update ? we are waiting \u2615\ufe0f. ",
    "alex-shamshurin": "Yes, I have the same issue. It works inside React.component extended class and doesn't work for stateless components. Yes, I have the same issue. It works inside React.component extended class and doesn't work for stateless components. ",
    "Koleok": "I just need to drop a note on the repeated toe-tapping scoldy comments in this thread\nie:\n\nany update? we are waiting \u2615\ufe0f\n\nGithub automatically posts references for:\n- opens/closes/merges on related MRs\n- commits with references to this issue\n- references to this issue from other issues\nThese are the updates you are looking for.\n\nIt is not, and should not be the responsibility of anyone involved in an OSS project to look through each issue every day and copy/paste links to commits or give progress reports to impatient/unmotivated consumers of the library.\nThe whole point of open source, is that maintainers do things when they can, and contributors who have time step in and fill the gaps when they can.\nIf you find yourself continually posting things in github issues like\n\n\"hey i need this to work right now how long till you fix it!\"\n\nthen guess what, you my friend are ready to be an open source contributor. \nYou might say:\n\n\"I don't know how this library works!\"\n\nwell, read the source, and soon you will\n\n\"i don't have time my job is relentless and I'm being pressured\"\n\nwell, so are the maintainers you are pressuring, probably more so!\n\n\"No one has committed anything in a long time and i fear the project is abandoned :scream:\"\n\nwell, fork it and do it your way, or just be patient :). ",
    "brettdh": "@jseminck how critical is it to have the behavior in the failing test? Your branch resolves my issue perfectly; I bet that's the case for a lot of folks here. The \"renamed React import\" seems like a very small corner case; I'd suggest breaking off a new issue for just that, and focus on getting the awesome work you've already done merged.\nSince I'm invested in this now, I'll remove that test and create a PR. If this isn't acceptable, I'm sure the reasons will be discussed there. :)\n@dkrutsko could you be a little more specific about what you think the fix is? Are you referring to the failing test @jseminck mentioned above, or are you suggesting that the fix for this entire issue is somehow much simpler than @jseminck 's changes?\nIf necessary, I'm happy to add your suggestions to my forthcoming PR.. Ah, yep - that makes sense. I think I was confused by the overloaded term \"prop\" in your comment. :)\nI think that's also a separate issue from this one. That is, I see two separable desired behaviors:\n1. Correctly specified custom proptypes should not cause no-typos errors (this issue)\n1. Custom proptypes with typos should cause no-typos errors (your request)\nI can see why the second is valuable, but the first strikes me as higher-impact. Thus, I'd suggest you make a new issue to track just the second, as it seems ever so slightly out of scope for this one.\nSound reasonable?. ...well, I thought I'd rebased on master. Fixing.. Ok, rebased again, conflicts resolved, tests fixed up to handle changes on master. PTAL. Added them. They fail. :confused: Looking into it.. Ok, new tests (and fixes) pushed. Apologies if it's a touch sloppy; I just now got this to work and wanted to get it out before I unplug for the day. PTAL, thanks for the feedback!. @ljharb How crucial is that? There are no pre-existing createClass tests for the no-typos rule;  adding that coverage strikes me as out of scope here.\nAlso, there's an implicit test matrix in the no-typos tests, along at least these dimensions:\n- Method of importing React/PropTypes\n- Method of declaring component\n- Method of declaring propTypes object\nI wouldn't feel confident about createClass coverage without doing the refactoring to create parameterized tests on these dimensions, which also strikes me as out of scope here.\nI created a couple quick-and-dirty createClass versions of other no-typos tests, and they fail when run against master (and also on my branch). So, I'm inclined to think that this is another instance of an issue like #1663, where createClass just isn't supported currently. (I didn't see any other issue related to createClass and no-typos, so I'm guessing it's not something a lot of people are encountering.). > DRY is generally a bad idea in tests; it'd be better to copy-paste all the needed tests.\nStrongly disagree on \"generally\" and definitely in this particular case. The repetition makes it hard to know which are \"all the needed tests\" - it's hard to see which tests test which behavior, since there is clearly a cross product of behaviors under test. It would be better IMO if that was extracted and made explicit. Thankfully, we don't have to agree on that to make progress with this PR. :)\n\nHowever - if, in fact, this rule never worked on createClass components, which your tests seem to suggest, would you be willing to add commented-out createClass tests in this PR, and file a new PR after this one is merged that uncomments the tests? (From that point I can try to get the rule passing, if you don't have the time)\n\nSure, sounds good. I only have a couple such tests, but it'll be a start, anyway. Pushing shortly.. Removed prefer-stateless-function commits and rebased on master.. Thanks for your feedback. However, I'm concerned that we're getting solidly into scope creep territory again.\n\nCan you add test cases for require as well? we should be able to handle top-level static requires along with import.\n\nThere are no such tests currently; it's not part of this PR to add that coverage. Can we make a separate issue for that?\n\nSeparately, can we make sure that every test using babel-eslint has a duplicate test that uses the default parser?\n\nIt would be similarly out of scope to ask this for every no-typos test. I assume you mean every new test that this PR adds? Also, this would be a perfect use case for parameterization; it seems quite noisy to copy the entire tests' content just to remove the parser line, and glancing through the tests as they are now, it's quite hard to pick out which tests use which parser. But I feel hesitant to start going down that road, due to the opposition to it you expressed above, and the uncertainty I've expressed about getting it right.\nAlso, are all tests valid with both parsers? I don't really understand the difference between babel-eslint and the \"default parser\", so I'm not sure I'm the one to make that change anyway, even if it were in scope here.. Added copies of this PR's new tests with the default parser.. Anything else needed on this one? I'd love to get it merged soon.. Anything else needed on this one? I'd love to get it merged soon.. @lucaslim looks like there's an RC now: https://github.com/yannickcr/eslint-plugin-react/releases/tag/v7.8.0-rc.0. TBH I'm not sure why this commit was in the original branch that I started from here. I'd be fine just removing that commit from this PR, but I'm not sure what would be correct in regards to your comment here.. I thought that too, but when I was testing, it seemed that only every string literal with the same contents is the same string by identity. I found that was not the case when comparing a literal to a value read from a file.\nBut maybe there was another issue that I didn't fully understand; I made this jsfiddle to test this, and the results indicate no difference between === and ==, even when comparing a literal to a computed or read-from-external-source value.\nI can dig into this more tomorrow, probably.. WOW ok silly mistake. propTypesPackageName was an array containing one string, which is indeed == to that string value itself, but not ===.\nThanks for not letting that slide. \ud83d\ude33 Pushing fix shortly.\n. You're saying you'd prefer args.elements.forEach(el => { checkValidProp(el); });? It seems strictly noisier to me, but I don't feel strongly \u00af\\_(\u30c4)_/\u00af. Sure; it makes this code clearer. Updated.. ",
    "bastoune": "hi @jseminck \nI am still encountering troubles with this kind of code :\ntype Props = {\n    loggedUser: User,\n    logout: () => void,\n}\n[...]\n    render() {\n        const {state, props} = this\n[...]\n<SomeComponent user={props.loggedUser} logout={props.logout} />\nI shows me the ESLint error \nESLint: 'logout' PropType is defined but prop is never used (react/no-unused-prop-types)\nHaving theses version number: \n```\n    \"eslint\": \"5.3.0\",\n    \"eslint-config-airbnb\": \"17.1.0\",\n    \"eslint-plugin-flowtype\": \"2.50.0\",\n    \"eslint-plugin-import\": \"2.14.0\",\n    \"eslint-plugin-jest\": \"21.21.0\",\n    \"eslint-plugin-jsx-a11y\": \"6.1.1\",\n    \"eslint-plugin-react\": \"7.11.0\",\n    \"flow\": \"0.2.3\",\n    \"flow-bin\": \"0.78.0\",\n[...]\n    \"react\": \"16.4.2\",\n```. ",
    "richardson-trevor": "Agreed. The primary concern was that for someone not familiar with the implications of anonymous functions in props, they might think the rules is just stylistic. I think checking current scope would reject the 99% case of extracting to a variable.. ",
    "cjskillingstad": "PR opened here: #1641 . Since there is a newline between the last prop value and the closing tag, this will be valid for both the always and the never options.. Fixed in f5cff2a.. Added test cases for this commit 2043520.. Changed the default case to \"allow\" and updated docs that the default case is \"allow\" in commit f103712.. ",
    "danrot": "Any idea when this will be released?. Great! Thanks a lot \ud83d\ude03 . Great! Thanks a lot \ud83d\ude03 . I know that it is not about checking types, I actually want what you've described, but instead of checking if there is a matching entry in propTypes it should use the flow types instead. I'll paste an example:\n```javascript\ntype Props = {\n    size: number,\n    value: Point,\n    active: boolean,\n    onClick?: (value: Point) => void,\n    arrowDirection?: 'left' | 'top-left' | 'top' | 'top-right' | 'right' | 'bottom-right' | 'bottom' | 'bottom-left',\n};\nexport default class ImageFocusPointCell extends React.PureComponent {\n    static defaultProps = {\n        active: false,\n        showArrow: true,\n    };\n// other code not important for this rule\n\n}\n```\nThe showArrow key in the defaultProps doesn't exist in the flow type, and it would be nice if this rule (or another rule, if they are not easy to combine) would give me a hint. This often happens for us during refactorings / reviews, and can easily be overseen.. ",
    "caub": "I still have this issue, this PR has not been released?\njson\n\"react/jsx-tag-spacing\": [\"error\", {\n            \"closingSlash\": \"never\",\n            \"beforeSelfClosing\": \"always\",\n            \"afterOpening\": \"never\",\n            \"beforeClosing\": \"never\"\n        }],\njsx\n<Foo >foo</Foo >\nis allowed\nBtw I also have this error:\nConfiguration for rule \"react/jsx-tag-spacing\" is invalid:\n    Value {\"closingSlash\":\"never\",\"beforeSelfClosing\":\"always\",\"afterOpening\":\"never\",\"beforeClosing\":\"never\"} should NOT have additional properties.\nbut I follow the format of this rule described in Readme,  (using \"eslint-plugin-react\": \"^7.6.1\")\nedit: right, it complains about this new beforeClosing prop, added in README but not published on npm. I still have this issue, this PR has not been released?\njson\n\"react/jsx-tag-spacing\": [\"error\", {\n            \"closingSlash\": \"never\",\n            \"beforeSelfClosing\": \"always\",\n            \"afterOpening\": \"never\",\n            \"beforeClosing\": \"never\"\n        }],\njsx\n<Foo >foo</Foo >\nis allowed\nBtw I also have this error:\nConfiguration for rule \"react/jsx-tag-spacing\" is invalid:\n    Value {\"closingSlash\":\"never\",\"beforeSelfClosing\":\"always\",\"afterOpening\":\"never\",\"beforeClosing\":\"never\"} should NOT have additional properties.\nbut I follow the format of this rule described in Readme,  (using \"eslint-plugin-react\": \"^7.6.1\")\nedit: right, it complains about this new beforeClosing prop, added in README but not published on npm. npm list -g --depth=0 doesn't show any eslint modules, and the repo has no node_modules in a parent folder\nif I write <Searchbar  > it propose me to fix to <Searchbar >, not <Searchbar> (which is also valid, but I'd like to enforce this convention)\nEdit: well, it seems I forgot to uncomment \"beforeClosing\": \"never\", it's working, sorry. npm list -g --depth=0 doesn't show any eslint modules, and the repo has no node_modules in a parent folder\nif I write <Searchbar  > it propose me to fix to <Searchbar >, not <Searchbar> (which is also valid, but I'd like to enforce this convention)\nEdit: well, it seems I forgot to uncomment \"beforeClosing\": \"never\", it's working, sorry. Oh completely right, babel can compile it, but it throws at runtime\nSorry for this false-negative. ",
    "fedemp": "@jseminck Your suggestion actually worked. Only needed the settings part. Closing then. :). ",
    "salemhilal": "For people in the future, I ran into this same issue, and adding createClass: 'createClass' to settings.react did the trick. . For people in the future, I ran into this same issue, and adding createClass: 'createClass' to settings.react did the trick. . ",
    "techieshark": "@yannickcr thanks, just ran into this problem (types in flow, not proptypes), googled it and found this issue, saw your comment and updated to eslint-plugin-react@next and that problem seemed to go away. By no means thorough testing but I appreciate not having that error anymore!. One note on the suggestion by @Elf2707 - that appears to work so long as your flow types are in the same file as your component; it does not appear to work if you have flow PropType in another file (like a ./types.js) and import it (import type { ButtonProps } from './types');. . Agree with @borisding; I understood the error message, but was confused by the apparently outdated README message implying a default would be provided.\nI'd like to be helpful by suggesting a less confusing README comment (\"version\": \"16.0\", // React version, needed here because <...some reason...>) , but I don't actually understand the problem (\"Relying on the defaults is unsafe\" as pointed out earlier in the thread). What is unsafe about using the React version in the package.json? \nThank you kindly.\n. Agree with @borisding; I understood the error message, but was confused by the apparently outdated README message implying a default would be provided.\nI'd like to be helpful by suggesting a less confusing README comment (\"version\": \"16.0\", // React version, needed here because <...some reason...>) , but I don't actually understand the problem (\"Relying on the defaults is unsafe\" as pointed out earlier in the thread). What is unsafe about using the React version in the package.json? \nThank you kindly.\n. ",
    "bsr203": "hi @yannickcr \nI get a different stack this time.\nCannot read property 'name' of undefined\nTypeError: Cannot read property 'name' of undefined\n    at propTypes.types.forEach.annotation (/Users/bsr/client/node_modules/eslint-plugin-react/lib/rules/prop-types.js:726:49)\n    at Array.forEach (<anonymous>)\n    at declarePropTypesForIntersectionTypeAnnotation (/Users/bsr/client/node_modules/eslint-plugin-react/lib/rules/prop-types.js:725:23)\n    at markPropTypesAsDeclared (/Users/bsr/client/node_modules/eslint-plugin-react/lib/rules/prop-types.js:831:35)\n    at markAnnotatedFunctionArgumentsAsDeclared (/Users/bsr/client/node_modules/eslint-plugin-react/lib/rules/prop-types.js:937:7)\n    at Object.handleStatelessComponent (/Users/bsr/client/node_modules/eslint-plugin-react/lib/rules/prop-types.js:946:7)\n    at Linter.updatedRuleInstructions.(anonymous function) (/Users/bsr/client/node_modules/eslint-plugin-react/lib/util/Components.js:666:75)\n    at emitOne (events.js:120:20)\n    at Linter.emit (events.js:210:7)\n    at NodeEventGenerator.applySelector (/Users/bsr/client/node_modules/eslint/lib/util/node-event-generator.js:265:26). @jseminck everything looks good for me. no crash and also props are being detected.\nP.S.  If anyone try to install the github branch, I had to yarn cache clean, as it keep getting previous commit from cache so wasn't updating with latest.\nthanks again for the quick fix and help.. ",
    "oyeanuj": "@ljharb Does this seem good to merge? I'm also running into this problem.. ",
    "SeanSilke": "@jseminck Thanks will definitely use it.. @jseminck Tried  7.4.0-rc0. \nUnfortunately it does not work for this case.\nNo warnings on misspelled .PropTypes. @jseminck Oh, my bad.\nI have typo in property of stateless functional component.\n\nThis rule is only for static property of a class.\nWill it be good to give this rule less broad name?\nIs it possible to extend this rule and add check for typos in properties of stateless functional component?\n. @jseminck \nYes it Works!\nI made errors in declaration of the rule.\nGreat thanks!\nThere is possibility to make better documentation.\nAdd functional components to  warning code examples.\n```js\nconst Welcome = ({name}) =>  Hello, {name} \nWelcome.PropTypes = {}\nconst Welcome = ({name}) =>  Hello, {name} \nWelcome.proptypes = {}\n```\nAdd mention of function in rule overview.\nEnsure no casing typos were made declaring static class properties\n-> Ensure no casing typos were made declaring static class or function properties\nIt makes sure that the following class properties have no casing typos\n-> It makes sure that the following class of function properties have no casing typos\nOnce again thanks for your help!\n. ",
    "shawninder": "hmm, that means that whenever I change myArray (which is from a separate file and used by many other pieces of code), I would need to remember to change this code too... It feels weird to write lesser quality code just to avoid a linting limitation. Of course if it's impossible to remove this limitation, feel free to close this issue, I'll just add some // eslint-disable-line comments and go on my merry way.. This array is used not only by various components but also by various backend services. The file holding it is the documentation, not the prop types of all components using it. I'm not sure how I can be more explicit without ending up with multiple sources of truth for this array.. I'm just going to close this since it has become obvious this is a problem with my code, not with this package.. ",
    "Tokimon": "I have sort of the same error, but not with any PropTypes.shape, but with a rest a destructuring.\nMy example\n```jsx\nclass MyComponent extends React.Component {\n  static displayName = 'MyComponent';\n  static propTypes = {\n    name: PropTypes.string\n  }\nrender() {\n    const { name, title, ...rest } = this.props;\n    return (\n      \n{name}\n\n    );\n  }\n}\n```\nHere it fails to detect title as not defined in the propTypes.\nI have narrowed it down to the spread on the JSX element: <div {...rest}>. When this is enabled the detection turns off. This is event if the spread happens in a separate context (ie. another method) like this:\n```jsx\nclass MyComponent extends React.Component {\n  static displayName = 'MyComponent';\n  static propTypes = {\n    name: PropTypes.string\n  }\nrenderName() {\n    const { name, ...rest } = this.props;\n    return {name};\n  }\nrender() {\n    const { title } = this.props;\n    return (\n      \n        {title}\n        {this.renderName()}\n      \n    );\n  }\n}\n```\nIn this example, if I remove the {...rest} from <h1 {...rest}> the title is correctly being marked as \"not defined in prop-types\".. ",
    "sstern6": "@ljharb https://github.com/yannickcr/eslint-plugin-react/pull/2029.  When youre ready.\nLet me know if you have any feedback.. @MatthewHerbst just checked locally and looks like with the example:\n```\nclass MyComponent extends React.Component {\n  static displayName = 'MyComponent';\n  static propTypes = {\n    foo: PropTypes.shape({}),\n  }\nrender() {\n    const { foo: { bar } } = this.props;\n    return (\n      \n        {bar}\n      \n    );\n  }\n}\n```\nDoes not throw any errors.\nThis PR was to test for spread destructruing and the errors associated with that.  I can open a new ticket that will include the test you asked for and the fix, how does that sound?\nHow do we feel about this?. Youre right sorry about that, ill get on a fix for the deep destructuring, got caught up in the spread operator examples.. ",
    "goodbomb": "```\n// .eslintrc\n/\n * These rules are for React and JSX syntax using a modified version of the AirBnB config files.\n * https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/react.js\n /\n{\n    \"extends\": [\n        \".es6-eslintrc\"\n    ],\n    \"env\": {\n        \"browser\": true,\n        \"es6\": true\n    },\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true,\n            \"modules\": true,\n            \"experimentalObjectRestSpread\": true\n        }\n    },\n    \"plugins\": [\n        \"react\",\n        \"promise\"\n    ],\n    \"rules\": {\n        \"jsx-quotes\": [2, \"prefer-double\"],\n        \"react/display-name\": [0, { \"ignoreTranspilerName\": false }],\n        \"react/forbid-prop-types\": [0, { \"forbid\": [\"any\", \"array\", \"object\"] }],\n        \"react/jsx-boolean-value\": [1, \"always\"],\n        \"react/jsx-closing-bracket-location\": [2, \"line-aligned\"],\n        \"react/jsx-curly-spacing\": [2, \"never\", { \"allowMultiline\": true }],\n        \"react/jsx-handler-names\": [0, {\n            \"eventHandlerPrefix\": \"handle\",\n            \"eventHandlerPropPrefix\": \"on\",\n        }],\n        \"react/jsx-indent-props\": [2, 4],\n        \"react/jsx-key\": 0,\n        \"react/jsx-max-props-per-line\": [0, { \"maximum\": 1 }],\n        \"react/jsx-no-bind\": [2, {\n            \"ignoreRefs\": true,\n            \"allowArrowFunctions\": true,\n            \"allowBind\": false,\n        }],\n        \"react/jsx-no-duplicate-props\": [0, { \"ignoreCase\": false }],\n        \"react/jsx-no-literals\": 0,\n        \"react/jsx-no-undef\": 2,\n        \"react/jsx-pascal-case\": 2,\n        \"react/sort-prop-types\": [0, {\n            \"ignoreCase\": false,\n            \"callbacksLast\": false,\n        }],\n        \"react/jsx-sort-prop-types\": 0,\n        \"react/jsx-sort-props\": [0, {\n            \"ignoreCase\": false,\n            \"callbacksLast\": false,\n        }],\n        \"react/jsx-uses-react\": \"error\",\n        \"react/jsx-uses-vars\": \"error\",\n        \"react/no-danger\": 0,\n        \"react/no-deprecated\": \"error\",\n        \"react/no-did-mount-set-state\": [2],\n        \"react/no-did-update-set-state\": [2],\n        \"react/no-direct-mutation-state\": 0,\n        \"react/no-is-mounted\": 2,\n        \"react/no-multi-comp\": [2, { \"ignoreStateless\": true }],\n        \"react/no-set-state\": 0,\n        \"react/no-string-refs\": 0,\n        \"react/no-unknown-property\": 2,\n        \"react/prefer-es6-class\": [2, \"always\"],\n        \"react/prefer-stateless-function\": 2,\n        \"react/prop-types\": [2, { \"ignore\": [], \"customValidators\": [] }],\n        \"react/react-in-jsx-scope\": 2,\n        \"react/require-extension\": [0, { \"extensions\": [\".jsx\"] }],\n        \"react/require-render-return\": 2,\n        \"react/self-closing-comp\": 2,\n        \"react/jsx-space-before-closing\": [2, \"always\"],\n        \"react/jsx-wrap-multilines\": [\"error\", {\n            \"declaration\": true,\n            \"assignment\": true,\n            \"return\": true,\n            \"arrow\": true\n        }],\n        \"react/sort-comp\": [2, {\n            \"order\": [\n                \"constructor\",\n                \"static-methods\",\n                \"lifecycle\",\n                \"/^on.+$/\",\n                \"/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/\",\n                \"everything-else\",\n                \"/^render.+$/\",\n                \"render\"\n            ],\n        }],\n        \"react/jsx-first-prop-new-line\": [2, \"multiline\"],\n        \"react/jsx-equals-spacing\": [2, \"never\"],\n        \"react/jsx-indent\": [2, 4],\n        \"complexity\": [0, 0],\n        \"dot-notation\": [2, {\n            \"allowKeywords\": true,\n            \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" // Allow snake case.\n        }],\n        \"max-len\": [2, 160, {\"ignorePattern\": \"\\s<\"}],\n        \"new-cap\": [2, {\n            \"newIsCap\": true,\n            \"capIsNew\": false\n        }],\n        \"no-console\": [2, {allow: [\"info\", warn\", \"error\"]}],\n        \"spaced-comment\": [2, \"always\", { \"exceptions\": [\"*\"] }]\n    }\n}\n```\n```\n// .es6-eslintrc\n/\n * These rules are for vanilla ECMAScript 6, and make no assumptions\n * about environments (e.g., Node, Browser). \n \n * Rules for ECMAScript 6 and specific environments are present in other files.\n /\n{\n    \"extends\": \".es5-eslintrc\", \n    \"rules\": {\n        \"constructor-super\": 2,\n        // Allows for the most consistency between named, anonymous, and shorthand generator functions.\n        \"generator-star-spacing\": [2, { \n            \"before\": true,\n            \"after\": false\n        }],\n        \"no-inner-declarations\": 0, \n        \"no-lone-blocks\": 0,\n        \"no-this-before-super\": 2,\n        \"no-var\": 2,\n        \"object-shorthand\": 2,\n        \"prefer-const\": 2\n    }\n}\n```\n```\n// .es5-eslintrc\n/\n * These rules are for vanilla ECMAScript 5, and make no assumptions\n * about environments (e.g., Node, Browser).\n \n * Rules for ECMAScript 6 and specific environments are present in other files.\n /\n{\n    \"rules\": {\n        \"accessor-pairs\": 2,\n        \"array-bracket-spacing\": [2, \"never\", {\n            \"objectsInArrays\": false\n        }],\n        \"block-scoped-var\": 2,\n        \"brace-style\": [2, \"1tbs\", {\n            \"allowSingleLine\": false\n        }],\n        \"camelcase\": [2, {\n            \"properties\": \"always\"\n        }],\n        \"comma-dangle\": [2, \"never\"],\n        \"comma-spacing\": [2, {\n            \"before\": false,\n            \"after\": true\n        }],\n        \"comma-style\": [2, \"last\"],\n        \"complexity\": [2, 5], // Evaluate this in real-world development.\n        \"computed-property-spacing\": [2, \"never\"],\n        \"consistent-return\": 2,\n        \"consistent-this\": [2, \"that\"],\n        \"curly\": [2, \"all\"],\n        \"default-case\": 2,\n        \"dot-location\": 0,\n        \"dot-notation\": [2, {\n            \"allowKeywords\": false,\n            \"allowPattern\": \"^[a-z]+(_[a-z]+)+$\" // Allow snake case.\n        }],\n        \"eol-last\": 2,\n        \"eqeqeq\": 2,\n        \"func-names\": 0,\n        \"func-style\": [2, \"expression\"],\n        \"global-strict\": 0, // This is deprecated, but breaks unless we turn it off.\n        \"guard-for-in\": 2,\n        \"indent\": [2, 4],\n        \"key-spacing\": [2, {\n            \"beforeColon\": false,\n            \"afterColon\": true\n        }],\n        \"keyword-spacing\": 2,\n        \"linebreak-style\": [2, \"unix\"],\n        \"lines-around-comment\": [2, {\n            \"allowBlockStart\": true,\n            \"beforeBlockComment\": true,\n            \"beforeLineComment\": true\n        }],\n        \"max-depth\": [2, 3],\n        \"max-len\": [2, 80], // Evaluate in real-world development.\n        \"max-params\": 0, // Often, constructors may require many dependencies.\n        \"max-nested-callbacks\": [2, 3],\n        \"max-statements\": 0,\n        \"new-cap\": [2, {\n            \"newIsCap\": true,\n            \"capIsNew\": true\n        }],\n        \"newline-after-var\": [2, \"always\"],\n        \"new-parens\": 2,\n        \"no-alert\": 2,\n        \"no-array-constructor\": 2,\n        \"no-bitwise\": 2,\n        \"no-plusplus\": 0,\n        \"no-caller\": 2,\n        \"no-catch-shadow\": 0, // only for IE8 and earlier\n        \"no-cond-assign\": [2, \"except-parens\"],\n        \"no-console\": 2,\n        \"no-constant-condition\": 2,\n        \"no-continue\": 0,\n        \"no-control-regex\": 2,\n        \"no-debugger\": 2,\n        \"no-delete-var\": 2,\n        \"no-div-regex\": 2,\n        \"no-dupe-args\": 2,\n        \"no-dupe-keys\": 2,\n        \"no-duplicate-case\": 2,\n        \"no-else-return\": 2,\n        \"no-empty\": 2,\n        \"no-empty-character-class\": 2,\n        \"no-eq-null\": 2,\n        \"no-eval\": 2,\n        \"no-ex-assign\": 2,\n        \"no-extend-native\": 2,\n        \"no-extra-bind\": 2,\n        \"no-extra-boolean-cast\": 2,\n        \"no-extra-parens\": 0, // Can aid readability.\n        \"no-extra-semi\": 2,\n        \"no-fallthrough\": 2,\n        \"no-floating-decimal\": 2,\n        \"no-func-assign\": 2,\n        \"no-implied-eval\": 2,\n        \"no-inline-comments\": 0,\n        \"no-inner-declarations\": [2, \"functions\"], // Only appropriate for ES5 code.\n        \"no-invalid-regexp\": 2,\n        \"no-irregular-whitespace\": 2,\n        \"no-iterator\": 2,\n        \"no-label-var\": 2,\n        \"no-labels\": 2,\n        \"no-lone-blocks\": 2, // Only appropriate for ES5 code.\n        \"no-lonely-if\": 2,\n        \"no-loop-func\": 2,\n        \"no-mixed-spaces-and-tabs\": 2,\n        \"no-multi-spaces\": 2,\n        \"no-multi-str\": 2,\n        \"no-multiple-empty-lines\": 2,\n        \"no-native-reassign\": 2,\n        \"no-negated-in-lhs\": 2,\n        \"no-nested-ternary\": 2,\n        \"no-new\": 0, // Can be useful, e.g. when passing a new instance as a parameter.\n        \"no-new-func\": 2,\n        \"no-new-object\": 2,\n        \"no-new-wrappers\": 2,\n        \"no-obj-calls\": 2,\n        \"no-octal\": 2,\n        \"no-octal-escape\": 2,\n        \"no-param-reassign\": 2,\n        \"no-proto\": 2,\n        \"no-redeclare\": 2,\n        \"no-regex-spaces\": 2,\n        \"no-return-assign\": 2,\n        \"no-script-url\": 2,\n        \"no-self-compare\": 2,\n        \"no-sequences\": 2,\n        \"no-shadow\": 2,\n        \"no-shadow-restricted-names\": 2,\n        \"no-spaced-func\": 2,\n        \"no-sparse-arrays\": 2,\n        \"no-ternary\": 0,\n        \"no-throw-literal\": 2,\n        \"no-trailing-spaces\": 2,\n        \"no-undef\": 2,\n        \"no-undef-init\": 2,\n        \"no-undefined\": 2,\n        \"no-underscore-dangle\": 0,\n        \"no-unexpected-multiline\": 2,\n        \"no-unreachable\": 2,\n        \"no-unused-expressions\": 2,\n        \"no-unused-vars\": [2, {\n            \"vars\": \"all\",\n            \"args\": \"after-used\"\n        }],\n        \"no-use-before-define\": 0,\n        \"no-warning-comments\": [2, {\n            \"terms\": [\"todo\"],\n            \"location\": \"start\"\n        }],\n        \"no-with\": 2,\n        \"object-curly-spacing\": [2, \"always\"], // Can prevent crowding, e.g., passing options object as a parameter.\n        \"one-var\": 0, // Case-by-case\n        \"operator-assignment\": [2, \"never\"],\n        \"operator-linebreak\": [2, \"before\"],\n        \"padded-blocks\": [2, \"never\"],\n        \"quote-props\": [2, \"as-needed\"],\n        \"quotes\": [2, \"single\", \"avoid-escape\"],\n        \"radix\": 2,\n        \"semi\": [2, \"always\"],\n        \"semi-spacing\": [2, {\n            \"before\": false,\n            \"after\": true\n        }],\n        \"sort-vars\": 0,\n        \"spaced-comment\": [2, \"always\"],\n        \"space-before-blocks\": [2, \"always\"],\n        \"space-before-function-paren\": [2, \"never\"],\n        \"space-in-parens\": [2, \"never\"],\n        \"space-infix-ops\": [2, {\n            \"int32Hint\": false\n        }],\n        \"space-unary-ops\": [2, {\n            \"words\": true,\n            \"nonwords\": false\n        }],\n        \"strict\": [2, \"global\"],\n        \"use-isnan\": 2,\n        \"valid-jsdoc\": [2, {\n            \"prefer\": {\n                \"returns\": \"return\",\n                \"class\": \"constructor\",\n                \"default\": \"defaultvalue\"\n            },\n            \"requireReturn\": true,\n            \"requireParamDescription\": true,\n            \"requireReturnDescription\": false\n        }],\n        \"valid-typeof\": 2,\n        \"vars-on-top\": 0, // Case by case.\n        \"no-void\": 2,\n        \"wrap-iife\": [2, \"inside\"],\n        \"wrap-regex\": 2,\n        \"yoda\": [2, \"never\"]\n    }\n}\n``. Uh, no it doesn't. My.eslintrcfile is already usingjsx-wrap-multilinesas you can see above. I'm aware thatwrap-multilinesis deprecated, and yet I'm still receiving the error that the definition can't be found. But, of course it's missing. I've removed it from myeslintrc` file.. Yeah. If it helps, I'm using:\n- node v8.4.0\n- npm v5.3.0\n- webpack v3.5.6\nBasically all of my dependencies are at the latest version.. I'm basically creating my own personal React boilerplate for my own projects. You can download and run it locally if you want: https://github.com/goodbomb/react-redux-webpack-starter\nYou can see all of my eslint files and package.json there. I use it during hot module reloading so I can immediately detect style issues. Regardless, I'm seeing the same error in Visual Studio Code.. I'll try deleting node_modules and reinstalling tomorrow. I need to head to bed for now. I'll let you know what happens. Thanks for the quick responses.. Looks like it was a different rule entirely that was causing this issue. Weird.\nI needed \"react/jsx-tag-spacing\": [2, { \"beforeSelfClosing\": \"always\" }], instead of \"react/jsx-space-before-closing\": [2, \"always\"],\nYour suggestion of running eslint directly seems to have done the trick. Thanks for the tip.. ",
    "byohay": "At the moment I'm not using any indentation rules for JS, but I do want to indent the JSX components with 2 more spaces than their parent.\nThe root component doesn't have a parent so I want the rule to ignore it (In the example above, I want it to ignore the indentation of the first View).. Even if I were to use indentation rules for JS, there would still be a problem. Assuming I use these rules:\nindent: [error, 4, {'ignoredNodes': ['JSXElement *']}]\n  react/jsx-indent: [error, 2]\nThen the example above still generates an error. In fact, I cannot satisfy both indent and react/jsx-indent in this scenario.. I've made a mistake, indent will ignore the first component so this will work:\njs\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <View />\n      </View>\n    );\nHowever, what I initially wanted is to have first component indented with 4 spaces and nested components indented with 2 spaces. That is, I want the first component to conform to indent rule and not react/jsx-indent.. I've made a mistake, indent will ignore the first component so this will work:\njs\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <View />\n      </View>\n    );\nHowever, what I initially wanted is to have first component indented with 4 spaces and nested components indented with 2 spaces. That is, I want the first component to conform to indent rule and not react/jsx-indent.. To me it doesn't look inconsistent. The way I view it the indentation should be determined by the \"outer scope\". The outer scope of the first component is the return in the case above, so it should be handled by indent rule. For a nested component its outer scope is the component above it in the hierarchy, so it should be handled by react/jsx-indent. \nindent rule can also be configured this way; For example, If I had the linter configured with:\nindent: [error, 2, {'ArrayExpression': 1, 'ObjectExpression': 2}]\nthen these examples pass the linter:\njs\nvar foo = [\n  bar,\n  baz,\n  qux\n];\njs\nvar foo = {\n    bar,\n    baz,\n    qux\n};\nThe indentation of  bar, baz, qux depends solely on whether they are in an array or object declaration, their \"outer scope\".. ",
    "dlahyani": "@ljharb consider this JS code for example:\njavascript\nfech(request)\n    .then((response) => {\n        if (response.headers.contentType && \n            response.headers.contentType.includes(\"application/json\")) {\n          return response.json();\n        }\n        throw new TypeError(\"Oops, we haven't got JSON!\");\n    })\n    .then((json) => {\n      let object = MyJSONObjectParser.parseSomeReallyLongNamedObject(\n          json,\n          additionalParsingParameters\n      );\n    })\n    .catch((error) => {\n      // Handle the error.\n    });\nIn this code you can see we have 2 different indentations:\n- 2 spaces is the normal indentation which is used when open opening a new block of code (the body of the callbacks and the if block).\n- 4 spaces is used when you break line in the middle of an expression, for example in the middle of function call, before each of the promise operators (then and catch) and in the boolean expression of the if statement.\nThe following code returning a JSX element is similar to breaking line in the middle of an expression and hence we want the indentation to be 4 spaces and not 2, but when the nested component ComponentB should only be nested 2 spaces from its parent as this is more like nested code blocks.\njavascript\nrender() {\n  return (\n      <ComponentA foo=\"foo\">\n        <ComponentB bar=\"bar\" />\n      </ComponentA>\n  );\n}. ",
    "idahogurl": "Thanks, guys. I put in the setting for \"createClass\" in my .eslintrc file and now it picks it up.. \njson\n{\n  \"globals\": {\n    \"__dirname\": false,\n    \"__filename\": false,\n    \"Buffer\": false,\n    \"clearImmediate\": false,\n    \"clearInterval\": false,\n    \"clearTimeout\": false,\n    \"console\": false,\n    \"exports\": true,\n    \"global\": false,\n    \"Intl\": false,\n    \"module\": false,\n    \"process\": false,\n    \"require\": false,\n    \"setImmediate\": false,\n    \"setInterval\": false,\n    \"setTimeout\": false,\n    \"Array\": false,\n    \"ArrayBuffer\": false,\n    \"Boolean\": false,\n    \"constructor\": false,\n    \"DataView\": false,\n    \"Date\": false,\n    \"decodeURI\": false,\n    \"decodeURIComponent\": false,\n    \"encodeURI\": false,\n    \"encodeURIComponent\": false,\n    \"Error\": false,\n    \"escape\": false,\n    \"eval\": false,\n    \"EvalError\": false,\n    \"Float32Array\": false,\n    \"Float64Array\": false,\n    \"Function\": false,\n    \"hasOwnProperty\": false,\n    \"Infinity\": false,\n    \"Int16Array\": false,\n    \"Int32Array\": false,\n    \"Int8Array\": false,\n    \"isFinite\": false,\n    \"isNaN\": false,\n    \"isPrototypeOf\": false,\n    \"JSON\": false,\n    \"Map\": false,\n    \"Math\": false,\n    \"NaN\": false,\n    \"Number\": false,\n    \"Object\": false,\n    \"parseFloat\": false,\n    \"parseInt\": false,\n    \"Promise\": false,\n    \"propertyIsEnumerable\": false,\n    \"Proxy\": false,\n    \"RangeError\": false,\n    \"ReferenceError\": false,\n    \"Reflect\": false,\n    \"RegExp\": false,\n    \"Set\": false,\n    \"String\": false,\n    \"Symbol\": false,\n    \"SyntaxError\": false,\n    \"toLocaleString\": false,\n    \"toString\": false,\n    \"TypeError\": false,\n    \"Uint16Array\": false,\n    \"Uint32Array\": false,\n    \"Uint8Array\": false,\n    \"Uint8ClampedArray\": false,\n    \"undefined\": false,\n    \"unescape\": false,\n    \"URIError\": false,\n    \"valueOf\": false,\n    \"WeakMap\": false,\n    \"WeakSet\": false,\n    \"window\": true\n  },\n  \"env\": {\n    \"node\": true,\n    \"es6\": true\n  },\n  \"rules\": {\n    \"accessor-pairs\": \"off\",\n    \"array-callback-return\": [\n      \"error\",\n      {\n        \"allowImplicit\": true\n      }\n    ],\n    \"block-scoped-var\": \"error\",\n    \"complexity\": [\n      \"off\",\n      11\n    ],\n    \"class-methods-use-this\": [\n      \"error\",\n      {\n        \"exceptMethods\": [\n          \"render\",\n          \"getInitialState\",\n          \"getDefaultProps\",\n          \"getChildContext\",\n          \"componentWillMount\",\n          \"UNSAFE_componentWillMount\",\n          \"componentDidMount\",\n          \"componentWillReceiveProps\",\n          \"UNSAFE_componentWillReceiveProps\",\n          \"shouldComponentUpdate\",\n          \"componentWillUpdate\",\n          \"UNSAFE_componentWillUpdate\",\n          \"componentDidUpdate\",\n          \"componentWillUnmount\",\n          \"componentDidCatch\",\n          \"getSnapshotBeforeUpdate\"\n        ]\n      }\n    ],\n    \"consistent-return\": \"off\",\n    \"curly\": [\n      \"error\",\n      \"all\"\n    ],\n    \"default-case\": [\n      \"error\",\n      {\n        \"commentPattern\": \"^no default$\"\n      }\n    ],\n    \"dot-notation\": [\n      \"error\",\n      {\n        \"allowKeywords\": true\n      }\n    ],\n    \"dot-location\": [\n      \"error\",\n      \"property\"\n    ],\n    \"eqeqeq\": [\n      \"error\",\n      \"always\",\n      {\n        \"null\": \"ignore\"\n      }\n    ],\n    \"guard-for-in\": \"error\",\n    \"max-classes-per-file\": [\n      \"off\",\n      1\n    ],\n    \"no-alert\": \"warn\",\n    \"no-caller\": \"error\",\n    \"no-case-declarations\": \"error\",\n    \"no-div-regex\": \"off\",\n    \"no-else-return\": [\n      \"error\",\n      {\n        \"allowElseIf\": false\n      }\n    ],\n    \"no-empty-function\": [\n      \"error\",\n      {\n        \"allow\": [\n          \"arrowFunctions\",\n          \"functions\",\n          \"methods\"\n        ]\n      }\n    ],\n    \"no-empty-pattern\": \"error\",\n    \"no-eq-null\": \"off\",\n    \"no-eval\": \"error\",\n    \"no-extend-native\": \"error\",\n    \"no-extra-bind\": \"error\",\n    \"no-extra-label\": \"error\",\n    \"no-fallthrough\": \"error\",\n    \"no-floating-decimal\": \"error\",\n    \"no-global-assign\": [\n      \"error\",\n      {\n        \"exceptions\": []\n      }\n    ],\n    \"no-native-reassign\": \"off\",\n    \"no-implicit-coercion\": [\n      \"off\",\n      {\n        \"boolean\": false,\n        \"number\": true,\n        \"string\": true,\n        \"allow\": []\n      }\n    ],\n    \"no-implicit-globals\": \"off\",\n    \"no-implied-eval\": \"error\",\n    \"no-invalid-this\": \"off\",\n    \"no-iterator\": \"error\",\n    \"no-labels\": [\n      \"error\",\n      {\n        \"allowLoop\": false,\n        \"allowSwitch\": false\n      }\n    ],\n    \"no-lone-blocks\": \"error\",\n    \"no-loop-func\": \"error\",\n    \"no-magic-numbers\": [\n      \"off\",\n      {\n        \"ignore\": [],\n        \"ignoreArrayIndexes\": true,\n        \"enforceConst\": true,\n        \"detectObjects\": false\n      }\n    ],\n    \"no-multi-spaces\": [\n      \"error\",\n      {\n        \"ignoreEOLComments\": false\n      }\n    ],\n    \"no-multi-str\": \"error\",\n    \"no-new\": \"error\",\n    \"no-new-func\": \"error\",\n    \"no-new-wrappers\": \"error\",\n    \"no-octal\": \"error\",\n    \"no-octal-escape\": \"error\",\n    \"no-param-reassign\": [\n      \"error\",\n      {\n        \"props\": true,\n        \"ignorePropertyModificationsFor\": [\n          \"acc\",\n          \"accumulator\",\n          \"e\",\n          \"ctx\",\n          \"req\",\n          \"request\",\n          \"res\",\n          \"response\",\n          \"$scope\"\n        ]\n      }\n    ],\n    \"no-proto\": \"error\",\n    \"no-redeclare\": \"error\",\n    \"no-restricted-properties\": [\n      \"error\",\n      {\n        \"object\": \"arguments\",\n        \"property\": \"callee\",\n        \"message\": \"arguments.callee is deprecated\"\n      },\n      {\n        \"object\": \"global\",\n        \"property\": \"isFinite\",\n        \"message\": \"Please use Number.isFinite instead\"\n      },\n      {\n        \"object\": \"self\",\n        \"property\": \"isFinite\",\n        \"message\": \"Please use Number.isFinite instead\"\n      },\n      {\n        \"object\": \"window\",\n        \"property\": \"isFinite\",\n        \"message\": \"Please use Number.isFinite instead\"\n      },\n      {\n        \"object\": \"global\",\n        \"property\": \"isNaN\",\n        \"message\": \"Please use Number.isNaN instead\"\n      },\n      {\n        \"object\": \"self\",\n        \"property\": \"isNaN\",\n        \"message\": \"Please use Number.isNaN instead\"\n      },\n      {\n        \"object\": \"window\",\n        \"property\": \"isNaN\",\n        \"message\": \"Please use Number.isNaN instead\"\n      },\n      {\n        \"property\": \"__defineGetter__\",\n        \"message\": \"Please use Object.defineProperty instead.\"\n      },\n      {\n        \"property\": \"__defineSetter__\",\n        \"message\": \"Please use Object.defineProperty instead.\"\n      },\n      {\n        \"object\": \"Math\",\n        \"property\": \"pow\",\n        \"message\": \"Use the exponentiation operator (**) instead.\"\n      }\n    ],\n    \"no-return-assign\": [\n      \"error\",\n      \"always\"\n    ],\n    \"no-return-await\": \"error\",\n    \"no-script-url\": \"error\",\n    \"no-self-assign\": [\n      \"error\",\n      {\n        \"props\": false\n      }\n    ],\n    \"no-self-compare\": \"error\",\n    \"no-sequences\": \"error\",\n    \"no-throw-literal\": \"error\",\n    \"no-unmodified-loop-condition\": \"off\",\n    \"no-unused-expressions\": [\n      \"error\",\n      {\n        \"allowShortCircuit\": false,\n        \"allowTernary\": false,\n        \"allowTaggedTemplates\": false\n      }\n    ],\n    \"no-unused-labels\": \"error\",\n    \"no-useless-call\": \"off\",\n    \"no-useless-concat\": \"error\",\n    \"no-useless-escape\": \"error\",\n    \"no-useless-return\": \"error\",\n    \"no-void\": \"error\",\n    \"no-warning-comments\": [\n      \"off\",\n      {\n        \"terms\": [\n          \"todo\",\n          \"fixme\",\n          \"xxx\"\n        ],\n        \"location\": \"start\"\n      }\n    ],\n    \"no-with\": \"error\",\n    \"prefer-promise-reject-errors\": [\n      \"error\",\n      {\n        \"allowEmptyReject\": true\n      }\n    ],\n    \"radix\": \"error\",\n    \"require-await\": \"off\",\n    \"require-unicode-regexp\": \"off\",\n    \"vars-on-top\": \"error\",\n    \"wrap-iife\": [\n      \"error\",\n      \"outside\",\n      {\n        \"functionPrototypeMethods\": false\n      }\n    ],\n    \"yoda\": \"error\",\n    \"for-direction\": \"error\",\n    \"getter-return\": [\n      \"error\",\n      {\n        \"allowImplicit\": true\n      }\n    ],\n    \"no-async-promise-executor\": \"off\",\n    \"no-await-in-loop\": \"error\",\n    \"no-compare-neg-zero\": \"error\",\n    \"no-cond-assign\": [\n      \"error\",\n      \"always\"\n    ],\n    \"no-console\": \"warn\",\n    \"no-constant-condition\": \"warn\",\n    \"no-control-regex\": \"error\",\n    \"no-debugger\": \"error\",\n    \"no-dupe-args\": \"error\",\n    \"no-dupe-keys\": \"error\",\n    \"no-duplicate-case\": \"error\",\n    \"no-empty\": \"error\",\n    \"no-empty-character-class\": \"error\",\n    \"no-ex-assign\": \"error\",\n    \"no-extra-boolean-cast\": \"error\",\n    \"no-extra-parens\": [\n      \"off\",\n      \"all\",\n      {\n        \"conditionalAssign\": true,\n        \"nestedBinaryExpressions\": false,\n        \"returnAssign\": false,\n        \"ignoreJSX\": \"all\",\n        \"enforceForArrowConditionals\": false\n      }\n    ],\n    \"no-extra-semi\": \"error\",\n    \"no-func-assign\": \"error\",\n    \"no-inner-declarations\": \"error\",\n    \"no-invalid-regexp\": \"error\",\n    \"no-irregular-whitespace\": \"error\",\n    \"no-misleading-character-class\": \"off\",\n    \"no-obj-calls\": \"error\",\n    \"no-prototype-builtins\": \"error\",\n    \"no-regex-spaces\": \"error\",\n    \"no-sparse-arrays\": \"error\",\n    \"no-template-curly-in-string\": \"error\",\n    \"no-unexpected-multiline\": \"error\",\n    \"no-unreachable\": \"error\",\n    \"no-unsafe-finally\": \"error\",\n    \"no-unsafe-negation\": \"error\",\n    \"no-negated-in-lhs\": \"off\",\n    \"require-atomic-updates\": \"off\",\n    \"use-isnan\": \"error\",\n    \"valid-jsdoc\": \"off\",\n    \"valid-typeof\": [\n      \"error\",\n      {\n        \"requireStringLiterals\": true\n      }\n    ],\n    \"callback-return\": \"off\",\n    \"global-require\": \"error\",\n    \"handle-callback-err\": \"off\",\n    \"no-buffer-constructor\": \"error\",\n    \"no-mixed-requires\": [\n      \"off\",\n      false\n    ],\n    \"no-new-require\": \"error\",\n    \"no-path-concat\": \"error\",\n    \"no-process-env\": \"off\",\n    \"no-process-exit\": \"off\",\n    \"no-restricted-modules\": \"off\",\n    \"no-sync\": \"off\",\n    \"array-bracket-newline\": [\n      \"off\",\n      \"consistent\"\n    ],\n    \"array-element-newline\": [\n      \"off\",\n      {\n        \"multiline\": true,\n        \"minItems\": 3\n      }\n    ],\n    \"array-bracket-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"block-spacing\": [\n      \"error\",\n      \"always\"\n    ],\n    \"brace-style\": [\n      \"error\",\n      \"1tbs\",\n      {\n        \"allowSingleLine\": false\n      }\n    ],\n    \"camelcase\": [\n      \"error\",\n      {\n        \"properties\": \"never\"\n      }\n    ],\n    \"capitalized-comments\": [\n      \"off\",\n      \"never\",\n      {\n        \"line\": {\n          \"ignorePattern\": \".*\",\n          \"ignoreInlineComments\": true,\n          \"ignoreConsecutiveComments\": true\n        },\n        \"block\": {\n          \"ignorePattern\": \".*\",\n          \"ignoreInlineComments\": true,\n          \"ignoreConsecutiveComments\": true\n        }\n      }\n    ],\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"always-multiline\",\n        \"objects\": \"always-multiline\",\n        \"imports\": \"always-multiline\",\n        \"exports\": \"always-multiline\",\n        \"functions\": \"always-multiline\"\n      }\n    ],\n    \"comma-spacing\": [\n      \"error\",\n      {\n        \"before\": false,\n        \"after\": true\n      }\n    ],\n    \"comma-style\": [\n      \"error\",\n      \"last\",\n      {\n        \"exceptions\": {\n          \"ArrayExpression\": false,\n          \"ArrayPattern\": false,\n          \"ArrowFunctionExpression\": false,\n          \"CallExpression\": false,\n          \"FunctionDeclaration\": false,\n          \"FunctionExpression\": false,\n          \"ImportDeclaration\": false,\n          \"ObjectExpression\": false,\n          \"ObjectPattern\": false,\n          \"VariableDeclaration\": false,\n          \"NewExpression\": false\n        }\n      }\n    ],\n    \"computed-property-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"consistent-this\": \"off\",\n    \"eol-last\": [\n      \"error\",\n      \"always\"\n    ],\n    \"func-call-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"func-name-matching\": [\n      \"off\",\n      \"always\",\n      {\n        \"includeCommonJSModuleExports\": false\n      }\n    ],\n    \"func-names\": \"warn\",\n    \"func-style\": [\n      \"off\",\n      \"expression\"\n    ],\n    \"function-paren-newline\": [\n      \"error\",\n      \"consistent\"\n    ],\n    \"id-blacklist\": \"off\",\n    \"id-length\": \"off\",\n    \"id-match\": \"off\",\n    \"implicit-arrow-linebreak\": [\n      \"error\",\n      \"beside\"\n    ],\n    \"indent\": [\n      \"error\",\n      2,\n      {\n        \"SwitchCase\": 1,\n        \"VariableDeclarator\": 1,\n        \"outerIIFEBody\": 1,\n        \"FunctionDeclaration\": {\n          \"parameters\": 1,\n          \"body\": 1\n        },\n        \"FunctionExpression\": {\n          \"parameters\": 1,\n          \"body\": 1\n        },\n        \"CallExpression\": {\n          \"arguments\": 1\n        },\n        \"ArrayExpression\": 1,\n        \"ObjectExpression\": 1,\n        \"ImportDeclaration\": 1,\n        \"flatTernaryExpressions\": false,\n        \"ignoredNodes\": [\n          \"JSXElement\",\n          \"JSXElement > *\",\n          \"JSXAttribute\",\n          \"JSXIdentifier\",\n          \"JSXNamespacedName\",\n          \"JSXMemberExpression\",\n          \"JSXSpreadAttribute\",\n          \"JSXExpressionContainer\",\n          \"JSXOpeningElement\",\n          \"JSXClosingElement\",\n          \"JSXText\",\n          \"JSXEmptyExpression\",\n          \"JSXSpreadChild\"\n        ],\n        \"ignoreComments\": false\n      }\n    ],\n    \"jsx-quotes\": [\n      \"error\",\n      \"prefer-double\"\n    ],\n    \"key-spacing\": [\n      \"error\",\n      {\n        \"beforeColon\": false,\n        \"afterColon\": true\n      }\n    ],\n    \"keyword-spacing\": [\n      \"error\",\n      {\n        \"before\": true,\n        \"after\": true,\n        \"overrides\": {\n          \"return\": {\n            \"after\": true\n          },\n          \"throw\": {\n            \"after\": true\n          },\n          \"case\": {\n            \"after\": true\n          }\n        }\n      }\n    ],\n    \"line-comment-position\": [\n      \"off\",\n      {\n        \"position\": \"above\",\n        \"ignorePattern\": \"\",\n        \"applyDefaultPatterns\": true\n      }\n    ],\n    \"linebreak-style\": [\n      \"error\",\n      \"unix\"\n    ],\n    \"lines-between-class-members\": [\n      \"error\",\n      \"always\",\n      {\n        \"exceptAfterSingleLine\": false\n      }\n    ],\n    \"lines-around-comment\": \"off\",\n    \"lines-around-directive\": [\n      \"error\",\n      {\n        \"before\": \"always\",\n        \"after\": \"always\"\n      }\n    ],\n    \"max-depth\": [\n      \"off\",\n      4\n    ],\n    \"max-len\": [\n      \"off\",\n      100,\n      2,\n      {\n        \"ignoreUrls\": true,\n        \"ignoreComments\": false,\n        \"ignoreRegExpLiterals\": true,\n        \"ignoreStrings\": true,\n        \"ignoreTemplateLiterals\": true\n      }\n    ],\n    \"max-lines\": [\n      \"off\",\n      {\n        \"max\": 300,\n        \"skipBlankLines\": true,\n        \"skipComments\": true\n      }\n    ],\n    \"max-lines-per-function\": [\n      \"off\",\n      {\n        \"max\": 50,\n        \"skipBlankLines\": true,\n        \"skipComments\": true,\n        \"IIFEs\": true\n      }\n    ],\n    \"max-nested-callbacks\": \"off\",\n    \"max-params\": [\n      \"off\",\n      3\n    ],\n    \"max-statements\": [\n      \"off\",\n      10\n    ],\n    \"max-statements-per-line\": [\n      \"off\",\n      {\n        \"max\": 1\n      }\n    ],\n    \"multiline-comment-style\": [\n      \"off\",\n      \"starred-block\"\n    ],\n    \"multiline-ternary\": [\n      \"off\",\n      \"never\"\n    ],\n    \"new-cap\": [\n      \"error\",\n      {\n        \"newIsCap\": true,\n        \"newIsCapExceptions\": [],\n        \"capIsNew\": false,\n        \"capIsNewExceptions\": [\n          \"Immutable.Map\",\n          \"Immutable.Set\",\n          \"Immutable.List\"\n        ]\n      }\n    ],\n    \"new-parens\": \"error\",\n    \"newline-after-var\": \"off\",\n    \"newline-before-return\": \"off\",\n    \"newline-per-chained-call\": [\n      \"error\",\n      {\n        \"ignoreChainWithDepth\": 4\n      }\n    ],\n    \"no-array-constructor\": \"error\",\n    \"no-bitwise\": \"error\",\n    \"no-continue\": \"error\",\n    \"no-inline-comments\": \"off\",\n    \"no-lonely-if\": \"error\",\n    \"no-mixed-operators\": [\n      \"off\",\n      {\n        \"groups\": [\n          [\n            \"%\",\n            \"**\"\n          ],\n          [\n            \"%\",\n            \"+\"\n          ],\n          [\n            \"%\",\n            \"-\"\n          ],\n          [\n            \"%\",\n            \"*\"\n          ],\n          [\n            \"%\",\n            \"/\"\n          ],\n          [\n            \"**\",\n            \"+\"\n          ],\n          [\n            \"**\",\n            \"-\"\n          ],\n          [\n            \"**\",\n            \"*\"\n          ],\n          [\n            \"**\",\n            \"/\"\n          ],\n          [\n            \"&\",\n            \"|\",\n            \"^\",\n            \"~\",\n            \"<<\",\n            \">>\",\n            \">>>\"\n          ],\n          [\n            \"==\",\n            \"!=\",\n            \"===\",\n            \"!==\",\n            \">\",\n            \">=\",\n            \"<\",\n            \"<=\"\n          ],\n          [\n            \"&&\",\n            \"||\"\n          ],\n          [\n            \"in\",\n            \"instanceof\"\n          ]\n        ],\n        \"allowSamePrecedence\": false\n      }\n    ],\n    \"no-mixed-spaces-and-tabs\": \"error\",\n    \"no-multi-assign\": [\n      \"off\"\n    ],\n    \"no-multiple-empty-lines\": [\n      \"error\",\n      {\n        \"max\": 2,\n        \"maxEOF\": 0\n      }\n    ],\n    \"no-negated-condition\": \"off\",\n    \"no-nested-ternary\": \"error\",\n    \"no-new-object\": \"error\",\n    \"no-plusplus\": \"off\",\n    \"no-restricted-syntax\": [\n      \"error\",\n      {\n        \"selector\": \"ForInStatement\",\n        \"message\": \"for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.\"\n      },\n      {\n        \"selector\": \"ForOfStatement\",\n        \"message\": \"iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.\"\n      },\n      {\n        \"selector\": \"LabeledStatement\",\n        \"message\": \"Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.\"\n      },\n      {\n        \"selector\": \"WithStatement\",\n        \"message\": \"`with` is disallowed in strict mode because it makes code impossible to predict and optimize.\"\n      }\n    ],\n    \"no-spaced-func\": \"error\",\n    \"no-tabs\": \"error\",\n    \"no-ternary\": \"off\",\n    \"no-trailing-spaces\": [\n      \"error\",\n      {\n        \"skipBlankLines\": false,\n        \"ignoreComments\": false\n      }\n    ],\n    \"no-underscore-dangle\": [\n      \"error\",\n      {\n        \"allow\": [],\n        \"allowAfterThis\": false,\n        \"allowAfterSuper\": false,\n        \"enforceInMethodNames\": false\n      }\n    ],\n    \"no-unneeded-ternary\": [\n      \"error\",\n      {\n        \"defaultAssignment\": false\n      }\n    ],\n    \"no-whitespace-before-property\": \"error\",\n    \"nonblock-statement-body-position\": [\n      \"error\",\n      \"beside\",\n      {\n        \"overrides\": {}\n      }\n    ],\n    \"object-curly-spacing\": [\n      \"error\",\n      \"always\"\n    ],\n    \"object-curly-newline\": [\n      \"error\",\n      {\n        \"ObjectExpression\": {\n          \"minProperties\": 4,\n          \"multiline\": true,\n          \"consistent\": true\n        },\n        \"ObjectPattern\": {\n          \"minProperties\": 4,\n          \"multiline\": true,\n          \"consistent\": true\n        },\n        \"ImportDeclaration\": {\n          \"minProperties\": 4,\n          \"multiline\": true,\n          \"consistent\": true\n        },\n        \"ExportDeclaration\": {\n          \"minProperties\": 4,\n          \"multiline\": true,\n          \"consistent\": true\n        }\n      }\n    ],\n    \"object-property-newline\": [\n      \"error\",\n      {\n        \"allowAllPropertiesOnSameLine\": true\n      }\n    ],\n    \"one-var\": [\n      \"error\",\n      \"never\"\n    ],\n    \"one-var-declaration-per-line\": [\n      \"error\",\n      \"always\"\n    ],\n    \"operator-assignment\": [\n      \"error\",\n      \"always\"\n    ],\n    \"operator-linebreak\": [\n      \"error\",\n      \"before\",\n      {\n        \"overrides\": {\n          \"+=\": \"after\",\n          \"=\": \"after\"\n        }\n      }\n    ],\n    \"padded-blocks\": [\n      \"error\",\n      {\n        \"blocks\": \"never\",\n        \"classes\": \"never\",\n        \"switches\": \"never\"\n      }\n    ],\n    \"padding-line-between-statements\": \"off\",\n    \"prefer-object-spread\": \"off\",\n    \"quote-props\": [\n      \"error\",\n      \"as-needed\",\n      {\n        \"keywords\": false,\n        \"unnecessary\": true,\n        \"numbers\": false\n      }\n    ],\n    \"quotes\": [\n      \"error\",\n      \"single\",\n      {\n        \"avoidEscape\": true\n      }\n    ],\n    \"require-jsdoc\": \"off\",\n    \"semi\": [\n      \"error\",\n      \"always\"\n    ],\n    \"semi-spacing\": [\n      \"error\",\n      {\n        \"before\": false,\n        \"after\": true\n      }\n    ],\n    \"semi-style\": [\n      \"error\",\n      \"last\"\n    ],\n    \"sort-keys\": [\n      \"off\",\n      \"asc\",\n      {\n        \"caseSensitive\": false,\n        \"natural\": true\n      }\n    ],\n    \"sort-vars\": \"off\",\n    \"space-before-blocks\": \"error\",\n    \"space-before-function-paren\": [\n      \"error\",\n      {\n        \"anonymous\": \"always\",\n        \"named\": \"never\",\n        \"asyncArrow\": \"always\"\n      }\n    ],\n    \"space-in-parens\": [\n      \"error\",\n      \"never\"\n    ],\n    \"space-infix-ops\": \"error\",\n    \"space-unary-ops\": [\n      \"error\",\n      {\n        \"words\": true,\n        \"nonwords\": false,\n        \"overrides\": {}\n      }\n    ],\n    \"spaced-comment\": [\n      \"error\",\n      \"always\",\n      {\n        \"line\": {\n          \"exceptions\": [\n            \"-\",\n            \"+\"\n          ],\n          \"markers\": [\n            \"=\",\n            \"!\"\n          ]\n        },\n        \"block\": {\n          \"exceptions\": [\n            \"-\",\n            \"+\"\n          ],\n          \"markers\": [\n            \"=\",\n            \"!\"\n          ],\n          \"balanced\": true\n        }\n      }\n    ],\n    \"switch-colon-spacing\": [\n      \"error\",\n      {\n        \"after\": true,\n        \"before\": false\n      }\n    ],\n    \"template-tag-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"unicode-bom\": [\n      \"error\",\n      \"never\"\n    ],\n    \"wrap-regex\": \"off\",\n    \"init-declarations\": \"off\",\n    \"no-catch-shadow\": \"off\",\n    \"no-delete-var\": \"error\",\n    \"no-label-var\": \"error\",\n    \"no-restricted-globals\": [\n      \"error\",\n      \"isFinite\",\n      \"isNaN\",\n      \"addEventListener\",\n      \"blur\",\n      \"close\",\n      \"closed\",\n      \"confirm\",\n      \"defaultStatus\",\n      \"event\",\n      \"external\",\n      \"defaultstatus\",\n      \"find\",\n      \"focus\",\n      \"frameElement\",\n      \"frames\",\n      \"history\",\n      \"innerHeight\",\n      \"innerWidth\",\n      \"length\",\n      \"location\",\n      \"locationbar\",\n      \"menubar\",\n      \"moveBy\",\n      \"moveTo\",\n      \"name\",\n      \"onblur\",\n      \"onerror\",\n      \"onfocus\",\n      \"onload\",\n      \"onresize\",\n      \"onunload\",\n      \"open\",\n      \"opener\",\n      \"opera\",\n      \"outerHeight\",\n      \"outerWidth\",\n      \"pageXOffset\",\n      \"pageYOffset\",\n      \"parent\",\n      \"print\",\n      \"removeEventListener\",\n      \"resizeBy\",\n      \"resizeTo\",\n      \"screen\",\n      \"screenLeft\",\n      \"screenTop\",\n      \"screenX\",\n      \"screenY\",\n      \"scroll\",\n      \"scrollbars\",\n      \"scrollBy\",\n      \"scrollTo\",\n      \"scrollX\",\n      \"scrollY\",\n      \"self\",\n      \"status\",\n      \"statusbar\",\n      \"stop\",\n      \"toolbar\",\n      \"top\"\n    ],\n    \"no-shadow\": \"error\",\n    \"no-shadow-restricted-names\": \"error\",\n    \"no-undef\": \"error\",\n    \"no-undef-init\": \"error\",\n    \"no-undefined\": \"off\",\n    \"no-unused-vars\": [\n      \"error\",\n      {\n        \"vars\": \"all\",\n        \"args\": \"after-used\",\n        \"ignoreRestSiblings\": true\n      }\n    ],\n    \"no-use-before-define\": [\n      \"error\",\n      {\n        \"functions\": false,\n        \"classes\": true\n      }\n    ],\n    \"arrow-body-style\": [\n      \"error\",\n      \"as-needed\",\n      {\n        \"requireReturnForObjectLiteral\": false\n      }\n    ],\n    \"arrow-parens\": [\n      \"error\",\n      \"as-needed\",\n      {\n        \"requireForBlockBody\": true\n      }\n    ],\n    \"arrow-spacing\": [\n      \"error\",\n      {\n        \"before\": true,\n        \"after\": true\n      }\n    ],\n    \"constructor-super\": \"error\",\n    \"generator-star-spacing\": [\n      \"error\",\n      {\n        \"before\": false,\n        \"after\": true\n      }\n    ],\n    \"no-class-assign\": \"error\",\n    \"no-confusing-arrow\": [\n      \"off\",\n      {\n        \"allowParens\": true\n      }\n    ],\n    \"no-const-assign\": \"error\",\n    \"no-dupe-class-members\": \"error\",\n    \"no-duplicate-imports\": \"off\",\n    \"no-new-symbol\": \"error\",\n    \"no-restricted-imports\": [\n      \"off\",\n      {\n        \"paths\": [],\n        \"patterns\": []\n      }\n    ],\n    \"no-this-before-super\": \"error\",\n    \"no-useless-computed-key\": \"error\",\n    \"no-useless-constructor\": \"error\",\n    \"no-useless-rename\": [\n      \"error\",\n      {\n        \"ignoreDestructuring\": false,\n        \"ignoreImport\": false,\n        \"ignoreExport\": false\n      }\n    ],\n    \"no-var\": \"error\",\n    \"object-shorthand\": [\n      \"error\",\n      \"always\",\n      {\n        \"ignoreConstructors\": false,\n        \"avoidQuotes\": true\n      }\n    ],\n    \"prefer-arrow-callback\": [\n      \"error\",\n      {\n        \"allowNamedFunctions\": true,\n        \"allowUnboundThis\": true\n      }\n    ],\n    \"prefer-const\": [\n      \"error\",\n      {\n        \"destructuring\": \"any\",\n        \"ignoreReadBeforeAssign\": true\n      }\n    ],\n    \"prefer-destructuring\": [\n      \"off\",\n      {\n        \"VariableDeclarator\": {\n          \"array\": false,\n          \"object\": true\n        },\n        \"AssignmentExpression\": {\n          \"array\": true,\n          \"object\": true\n        }\n      },\n      {\n        \"enforceForRenamedProperties\": false\n      }\n    ],\n    \"prefer-numeric-literals\": \"error\",\n    \"prefer-reflect\": \"off\",\n    \"prefer-rest-params\": \"error\",\n    \"prefer-spread\": \"error\",\n    \"prefer-template\": \"error\",\n    \"require-yield\": \"error\",\n    \"rest-spread-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"sort-imports\": [\n      \"off\",\n      {\n        \"ignoreCase\": false,\n        \"ignoreMemberSort\": false,\n        \"memberSyntaxSortOrder\": [\n          \"none\",\n          \"all\",\n          \"multiple\",\n          \"single\"\n        ]\n      }\n    ],\n    \"symbol-description\": \"error\",\n    \"template-curly-spacing\": \"error\",\n    \"yield-star-spacing\": [\n      \"error\",\n      \"after\"\n    ],\n    \"import/no-unresolved\": [\n      \"off\",\n      {\n        \"commonjs\": true,\n        \"caseSensitive\": true\n      }\n    ],\n    \"import/named\": \"error\",\n    \"import/default\": \"off\",\n    \"import/namespace\": \"off\",\n    \"import/export\": \"error\",\n    \"import/no-named-as-default\": \"error\",\n    \"import/no-named-as-default-member\": \"error\",\n    \"import/no-deprecated\": \"off\",\n    \"import/no-extraneous-dependencies\": [\n      \"off\",\n      {\n        \"devDependencies\": [\n          \"test/**\",\n          \"tests/**\",\n          \"spec/**\",\n          \"**/__tests__/**\",\n          \"**/__mocks__/**\",\n          \"test.{js,jsx}\",\n          \"test-*.{js,jsx}\",\n          \"**/*{.,_}{test,spec}.{js,jsx}\",\n          \"**/jest.config.js\",\n          \"**/vue.config.js\",\n          \"**/webpack.config.js\",\n          \"**/webpack.config.*.js\",\n          \"**/rollup.config.js\",\n          \"**/rollup.config.*.js\",\n          \"**/gulpfile.js\",\n          \"**/gulpfile.*.js\",\n          \"**/Gruntfile{,.js}\",\n          \"**/protractor.conf.js\",\n          \"**/protractor.conf.*.js\"\n        ],\n        \"optionalDependencies\": false\n      }\n    ],\n    \"import/no-mutable-exports\": \"off\",\n    \"import/no-commonjs\": \"off\",\n    \"import/no-amd\": \"error\",\n    \"import/no-nodejs-modules\": \"off\",\n    \"import/first\": \"error\",\n    \"import/imports-first\": \"off\",\n    \"import/no-duplicates\": \"error\",\n    \"import/no-namespace\": \"off\",\n    \"import/extensions\": [\n      \"off\",\n      \"ignorePackages\",\n      {\n        \"js\": \"never\",\n        \"mjs\": \"never\",\n        \"jsx\": \"never\"\n      }\n    ],\n    \"import/order\": [\n      \"error\",\n      {\n        \"groups\": [\n          [\n            \"builtin\",\n            \"external\",\n            \"internal\"\n          ]\n        ]\n      }\n    ],\n    \"import/newline-after-import\": \"error\",\n    \"import/prefer-default-export\": \"off\",\n    \"import/no-restricted-paths\": \"off\",\n    \"import/max-dependencies\": [\n      \"off\",\n      {\n        \"max\": 10\n      }\n    ],\n    \"import/no-absolute-path\": \"error\",\n    \"import/no-dynamic-require\": \"error\",\n    \"import/no-internal-modules\": [\n      \"off\",\n      {\n        \"allow\": []\n      }\n    ],\n    \"import/unambiguous\": \"off\",\n    \"import/no-webpack-loader-syntax\": \"error\",\n    \"import/no-unassigned-import\": \"off\",\n    \"import/no-named-default\": \"error\",\n    \"import/no-anonymous-default-export\": [\n      \"off\",\n      {\n        \"allowArray\": false,\n        \"allowArrowFunction\": false,\n        \"allowAnonymousClass\": false,\n        \"allowAnonymousFunction\": false,\n        \"allowLiteral\": false,\n        \"allowObject\": false\n      }\n    ],\n    \"import/exports-last\": \"off\",\n    \"import/group-exports\": \"off\",\n    \"import/no-default-export\": \"off\",\n    \"import/no-self-import\": \"error\",\n    \"import/no-cycle\": [\n      \"error\",\n      {\n        \"maxDepth\": null\n      }\n    ],\n    \"import/no-useless-path-segments\": \"error\",\n    \"import/dynamic-import-chunkname\": [\n      \"off\",\n      {\n        \"importFunctions\": [],\n        \"webpackChunknameFormat\": \"[0-9a-zA-Z-_/.]+\"\n      }\n    ],\n    \"import/no-relative-parent-imports\": \"off\",\n    \"strict\": [\n      \"error\",\n      \"never\"\n    ],\n    \"react/display-name\": [\n      \"off\",\n      {\n        \"ignoreTranspilerName\": false\n      }\n    ],\n    \"react/forbid-prop-types\": [\n      \"off\",\n      {\n        \"forbid\": [\n          \"any\",\n          \"array\",\n          \"object\"\n        ],\n        \"checkContextTypes\": true,\n        \"checkChildContextTypes\": true\n      }\n    ],\n    \"react/forbid-dom-props\": [\n      \"off\",\n      {\n        \"forbid\": []\n      }\n    ],\n    \"react/jsx-boolean-value\": [\n      \"error\",\n      \"never\",\n      {\n        \"always\": []\n      }\n    ],\n    \"react/jsx-closing-bracket-location\": [\n      \"error\",\n      \"line-aligned\"\n    ],\n    \"react/jsx-closing-tag-location\": \"error\",\n    \"react/jsx-curly-spacing\": [\n      \"error\",\n      \"never\",\n      {\n        \"allowMultiline\": true\n      }\n    ],\n    \"react/jsx-handler-names\": [\n      \"off\",\n      {\n        \"eventHandlerPrefix\": \"handle\",\n        \"eventHandlerPropPrefix\": \"on\"\n      }\n    ],\n    \"react/jsx-indent-props\": [\n      \"error\",\n      2\n    ],\n    \"react/jsx-key\": \"off\",\n    \"react/jsx-max-props-per-line\": [\n      \"error\",\n      {\n        \"maximum\": 1,\n        \"when\": \"multiline\"\n      }\n    ],\n    \"react/jsx-no-bind\": [\n      \"error\",\n      {\n        \"ignoreRefs\": true,\n        \"allowArrowFunctions\": true,\n        \"allowFunctions\": false,\n        \"allowBind\": false,\n        \"ignoreDOMComponents\": true\n      }\n    ],\n    \"react/jsx-no-duplicate-props\": [\n      \"error\",\n      {\n        \"ignoreCase\": true\n      }\n    ],\n    \"react/jsx-no-literals\": [\n      \"off\",\n      {\n        \"noStrings\": true\n      }\n    ],\n    \"react/jsx-no-undef\": \"error\",\n    \"react/jsx-pascal-case\": [\n      \"error\",\n      {\n        \"allowAllCaps\": true,\n        \"ignore\": []\n      }\n    ],\n    \"react/sort-prop-types\": [\n      \"off\",\n      {\n        \"ignoreCase\": true,\n        \"callbacksLast\": false,\n        \"requiredFirst\": false,\n        \"sortShapeProp\": true\n      }\n    ],\n    \"react/jsx-sort-prop-types\": \"off\",\n    \"react/jsx-sort-props\": [\n      \"off\",\n      {\n        \"ignoreCase\": true,\n        \"callbacksLast\": false,\n        \"shorthandFirst\": false,\n        \"shorthandLast\": false,\n        \"noSortAlphabetically\": false,\n        \"reservedFirst\": true\n      }\n    ],\n    \"react/jsx-sort-default-props\": [\n      \"off\",\n      {\n        \"ignoreCase\": true\n      }\n    ],\n    \"react/jsx-uses-react\": [\n      \"error\"\n    ],\n    \"react/jsx-uses-vars\": \"error\",\n    \"react/no-danger\": \"off\",\n    \"react/no-deprecated\": [\n      \"error\"\n    ],\n    \"react/no-did-mount-set-state\": \"off\",\n    \"react/no-did-update-set-state\": \"error\",\n    \"react/no-will-update-set-state\": \"error\",\n    \"react/no-direct-mutation-state\": \"off\",\n    \"react/no-is-mounted\": \"error\",\n    \"react/no-multi-comp\": [\n      \"error\",\n      {\n        \"ignoreStateless\": true\n      }\n    ],\n    \"react/no-set-state\": \"off\",\n    \"react/no-string-refs\": \"error\",\n    \"react/no-unknown-property\": \"error\",\n    \"react/prefer-es6-class\": [\n      \"error\",\n      \"always\"\n    ],\n    \"react/prefer-stateless-function\": [\n      \"off\",\n      {\n        \"ignorePureComponents\": true\n      }\n    ],\n    \"react/prop-types\": [\n      \"error\",\n      {\n        \"skipUndeclared\": true\n      }\n    ],\n    \"react/react-in-jsx-scope\": \"off\",\n    \"react/require-render-return\": \"error\",\n    \"react/self-closing-comp\": \"error\",\n    \"react/sort-comp\": [\n      \"off\",\n      {\n        \"order\": [\n          \"static-methods\",\n          \"instance-variables\",\n          \"lifecycle\",\n          \"/^on.+$/\",\n          \"getters\",\n          \"setters\",\n          \"/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/\",\n          \"instance-methods\",\n          \"everything-else\",\n          \"rendering\"\n        ],\n        \"groups\": {\n          \"lifecycle\": [\n            \"displayName\",\n            \"propTypes\",\n            \"contextTypes\",\n            \"childContextTypes\",\n            \"mixins\",\n            \"statics\",\n            \"defaultProps\",\n            \"constructor\",\n            \"getDefaultProps\",\n            \"getInitialState\",\n            \"state\",\n            \"getChildContext\",\n            \"componentWillMount\",\n            \"componentDidMount\",\n            \"componentWillReceiveProps\",\n            \"shouldComponentUpdate\",\n            \"componentWillUpdate\",\n            \"componentDidUpdate\",\n            \"componentWillUnmount\"\n          ],\n          \"rendering\": [\n            \"/^render.+$/\",\n            \"render\"\n          ]\n        }\n      }\n    ],\n    \"react/jsx-wrap-multilines\": [\n      \"error\",\n      {\n        \"declaration\": \"parens-new-line\",\n        \"assignment\": \"parens-new-line\",\n        \"return\": \"parens-new-line\",\n        \"arrow\": \"parens-new-line\",\n        \"condition\": \"parens-new-line\",\n        \"logical\": \"parens-new-line\",\n        \"prop\": \"parens-new-line\"\n      }\n    ],\n    \"react/jsx-first-prop-new-line\": [\n      \"error\",\n      \"multiline-multiprop\"\n    ],\n    \"react/jsx-equals-spacing\": [\n      \"error\",\n      \"never\"\n    ],\n    \"react/jsx-indent\": [\n      \"error\",\n      2\n    ],\n    \"react/jsx-no-target-blank\": [\n      \"error\",\n      {\n        \"enforceDynamicLinks\": \"always\"\n      }\n    ],\n    \"react/jsx-filename-extension\": [\n      \"error\",\n      {\n        \"extensions\": [\n          \".js\",\n          \".jsx\"\n        ]\n      }\n    ],\n    \"react/jsx-no-comment-textnodes\": \"error\",\n    \"react/no-render-return-value\": \"error\",\n    \"react/require-optimization\": [\n      \"off\",\n      {\n        \"allowDecorators\": []\n      }\n    ],\n    \"react/no-find-dom-node\": \"error\",\n    \"react/forbid-component-props\": [\n      \"off\",\n      {\n        \"forbid\": []\n      }\n    ],\n    \"react/forbid-elements\": [\n      \"off\",\n      {\n        \"forbid\": []\n      }\n    ],\n    \"react/no-danger-with-children\": \"error\",\n    \"react/no-unused-prop-types\": [\n      \"error\",\n      {\n        \"customValidators\": [],\n        \"skipShapeProps\": true\n      }\n    ],\n    \"react/style-prop-object\": \"error\",\n    \"react/no-unescaped-entities\": \"error\",\n    \"react/no-children-prop\": \"error\",\n    \"react/jsx-tag-spacing\": [\n      \"error\",\n      {\n        \"closingSlash\": \"never\",\n        \"beforeSelfClosing\": \"always\",\n        \"afterOpening\": \"never\",\n        \"beforeClosing\": \"never\"\n      }\n    ],\n    \"react/jsx-space-before-closing\": [\n      \"off\",\n      \"always\"\n    ],\n    \"react/no-array-index-key\": \"off\",\n    \"react/require-default-props\": [\n      \"off\",\n      {\n        \"forbidDefaultForRequired\": true\n      }\n    ],\n    \"react/forbid-foreign-prop-types\": [\n      \"warn\",\n      {\n        \"allowInPropTypes\": true\n      }\n    ],\n    \"react/void-dom-elements-no-children\": \"error\",\n    \"react/default-props-match-prop-types\": [\n      \"error\",\n      {\n        \"allowRequiredDefaults\": false\n      }\n    ],\n    \"react/no-redundant-should-component-update\": \"error\",\n    \"react/no-unused-state\": \"error\",\n    \"react/boolean-prop-naming\": [\n      \"off\",\n      {\n        \"propTypeNames\": [\n          \"bool\",\n          \"mutuallyExclusiveTrueProps\"\n        ],\n        \"rule\": \"^(is|has)[A-Z]([A-Za-z0-9]?)+\",\n        \"message\": \"\"\n      }\n    ],\n    \"react/no-typos\": \"error\",\n    \"react/jsx-curly-brace-presence\": [\n      \"error\",\n      {\n        \"props\": \"never\",\n        \"children\": \"never\"\n      }\n    ],\n    \"react/jsx-one-expression-per-line\": [\n      \"error\",\n      {\n        \"allow\": \"single-child\"\n      }\n    ],\n    \"react/destructuring-assignment\": [\n      \"error\",\n      \"always\"\n    ],\n    \"react/no-access-state-in-setstate\": \"error\",\n    \"react/button-has-type\": [\n      \"error\",\n      {\n        \"button\": true,\n        \"submit\": true,\n        \"reset\": false\n      }\n    ],\n    \"react/jsx-child-element-spacing\": \"off\",\n    \"react/no-this-in-sfc\": \"error\",\n    \"react/jsx-max-depth\": \"off\",\n    \"react/jsx-props-no-multi-spaces\": \"error\",\n    \"react/no-unsafe\": \"off\",\n    \"jsx-a11y/anchor-has-content\": [\n      \"error\",\n      {\n        \"components\": []\n      }\n    ],\n    \"jsx-a11y/aria-role\": [\n      \"error\",\n      {\n        \"ignoreNonDom\": false\n      }\n    ],\n    \"jsx-a11y/aria-props\": \"error\",\n    \"jsx-a11y/aria-proptypes\": \"error\",\n    \"jsx-a11y/aria-unsupported-elements\": \"error\",\n    \"jsx-a11y/alt-text\": [\n      \"error\",\n      {\n        \"elements\": [\n          \"img\",\n          \"object\",\n          \"area\",\n          \"input[type=\\\"image\\\"]\"\n        ],\n        \"img\": [],\n        \"object\": [],\n        \"area\": [],\n        \"input[type=\\\"image\\\"]\": []\n      }\n    ],\n    \"jsx-a11y/img-redundant-alt\": \"error\",\n    \"jsx-a11y/label-has-for\": [\n      \"error\",\n      {\n        \"components\": [],\n        \"required\": {\n          \"every\": [\n            \"nesting\",\n            \"id\"\n          ]\n        },\n        \"allowChildren\": false\n      }\n    ],\n    \"jsx-a11y/label-has-associated-control\": [\n      \"error\",\n      {\n        \"labelComponents\": [],\n        \"labelAttributes\": [],\n        \"controlComponents\": [],\n        \"assert\": \"both\",\n        \"depth\": 25\n      }\n    ],\n    \"jsx-a11y/mouse-events-have-key-events\": \"error\",\n    \"jsx-a11y/no-access-key\": \"error\",\n    \"jsx-a11y/no-onchange\": \"off\",\n    \"jsx-a11y/interactive-supports-focus\": \"error\",\n    \"jsx-a11y/role-has-required-aria-props\": \"error\",\n    \"jsx-a11y/role-supports-aria-props\": \"error\",\n    \"jsx-a11y/tabindex-no-positive\": \"error\",\n    \"jsx-a11y/heading-has-content\": [\n      \"error\",\n      {\n        \"components\": [\n          \"\"\n        ]\n      }\n    ],\n    \"jsx-a11y/html-has-lang\": \"error\",\n    \"jsx-a11y/lang\": \"error\",\n    \"jsx-a11y/no-distracting-elements\": [\n      \"error\",\n      {\n        \"elements\": [\n          \"marquee\",\n          \"blink\"\n        ]\n      }\n    ],\n    \"jsx-a11y/scope\": \"error\",\n    \"jsx-a11y/click-events-have-key-events\": \"error\",\n    \"jsx-a11y/no-static-element-interactions\": [\n      \"error\",\n      {\n        \"handlers\": [\n          \"onClick\",\n          \"onMouseDown\",\n          \"onMouseUp\",\n          \"onKeyPress\",\n          \"onKeyDown\",\n          \"onKeyUp\"\n        ]\n      }\n    ],\n    \"jsx-a11y/no-noninteractive-element-interactions\": [\n      \"error\",\n      {\n        \"handlers\": [\n          \"onClick\",\n          \"onMouseDown\",\n          \"onMouseUp\",\n          \"onKeyPress\",\n          \"onKeyDown\",\n          \"onKeyUp\"\n        ]\n      }\n    ],\n    \"jsx-a11y/accessible-emoji\": \"error\",\n    \"jsx-a11y/aria-activedescendant-has-tabindex\": \"error\",\n    \"jsx-a11y/iframe-has-title\": \"error\",\n    \"jsx-a11y/no-autofocus\": [\n      \"error\",\n      {\n        \"ignoreNonDOM\": true\n      }\n    ],\n    \"jsx-a11y/no-redundant-roles\": \"error\",\n    \"jsx-a11y/media-has-caption\": [\n      \"error\",\n      {\n        \"audio\": [],\n        \"video\": [],\n        \"track\": []\n      }\n    ],\n    \"jsx-a11y/no-interactive-element-to-noninteractive-role\": [\n      \"error\",\n      {\n        \"tr\": [\n          \"none\",\n          \"presentation\"\n        ]\n      }\n    ],\n    \"jsx-a11y/no-noninteractive-element-to-interactive-role\": [\n      \"error\",\n      {\n        \"ul\": [\n          \"listbox\",\n          \"menu\",\n          \"menubar\",\n          \"radiogroup\",\n          \"tablist\",\n          \"tree\",\n          \"treegrid\"\n        ],\n        \"ol\": [\n          \"listbox\",\n          \"menu\",\n          \"menubar\",\n          \"radiogroup\",\n          \"tablist\",\n          \"tree\",\n          \"treegrid\"\n        ],\n        \"li\": [\n          \"menuitem\",\n          \"option\",\n          \"row\",\n          \"tab\",\n          \"treeitem\"\n        ],\n        \"table\": [\n          \"grid\"\n        ],\n        \"td\": [\n          \"gridcell\"\n        ]\n      }\n    ],\n    \"jsx-a11y/no-noninteractive-tabindex\": [\n      \"error\",\n      {\n        \"tags\": [],\n        \"roles\": [\n          \"tabpanel\"\n        ]\n      }\n    ],\n    \"jsx-a11y/anchor-is-valid\": [\n      \"error\",\n      {\n        \"components\": [\n          \"Link\"\n        ],\n        \"specialLink\": [\n          \"to\"\n        ],\n        \"aspects\": [\n          \"noHref\",\n          \"invalidHref\",\n          \"preferButton\"\n        ]\n      }\n    ]\n  },\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"globalReturn\": true,\n      \"generators\": false,\n      \"objectLiteralDuplicateProperties\": false,\n      \"jsx\": true,\n      \"experimentalObjectRestSpread\": true,\n      \"modules\": true\n    },\n    \"ecmaVersion\": 2018,\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\n    \"import\",\n    \"react\",\n    \"jsx-a11y\"\n  ],\n  \"settings\": {\n    \"import/resolver\": {\n      \"node\": {\n        \"extensions\": [\n          \".js\",\n          \".jsx\",\n          \".json\"\n        ]\n      }\n    },\n    \"import/extensions\": [\n      \".js\",\n      \".mjs\",\n      \".jsx\"\n    ],\n    \"import/core-modules\": [],\n    \"import/ignore\": [\n      \"node_modules\",\n      \"\\\\.(coffee|scss|css|less|hbs|svg|json)$\"\n    ],\n    \"react\": {\n      \"pragma\": \"React\",\n      \"version\": \"16.0\"\n    },\n    \"propWrapperFunctions\": [\n      \"forbidExtraProps\",\n      \"exact\",\n      \"Object.freeze\"\n    ]\n  },\n  \"extends\": [\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/best-practices.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/errors.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/node.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/style.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/variables.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/es6.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/imports.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/index.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb-base/rules/strict.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb/rules/react.js\",\n    \"/Users/vestre/frontend/node_modules/eslint-config-airbnb/rules/react-a11y.js\",\n    \"airbnb\"\n  ],\n  \"root\": true,\n  \"parser\": \"/Users/vestre/frontend/node_modules/babel-eslint/lib/index.js\"\n}\n. ",
    "caravinci": "How difficult is it to implement such a thing for a new contributor? I may be able to give it a try.\nor perhaps this is something that can be added on top of the main \"indent\" rule?. Thanks :+1: may try an implementation this weekend.. One would think having babel as the parser would take care of this... Would love to give this a try, yet I'm afraid at first glance this is complexity beyond my current understanding of the package. . One would think having babel as the parser would take care of this... Would love to give this a try, yet I'm afraid at first glance this is complexity beyond my current understanding of the package. . So Babel's parser wouldn't expand the '...' into something the \"react parser\" part of this plugin would get (considering this code works), then make readable for eslint? haha as said before, the understanding of interactions and dependency complexities here eludes me. Wish I could be more useful \ud83d\udc4d. ",
    "sbonami": "@hallaathrad did anything come of this?\nEdit:\nOh, dupe of https://github.com/yannickcr/eslint-plugin-react/issues/398 it seems. I'll follow along there!. @hallaathrad did anything come of this?\nEdit:\nOh, dupe of https://github.com/yannickcr/eslint-plugin-react/issues/398 it seems. I'll follow along there!. ",
    "mpetkevich": "I have the same issue.. ",
    "cheriejiajia": "Same issue.. ",
    "evan-scott-zocdoc": "Correct.\n. Does not seem to be fixed in 7.8.2. Does not seem to be fixed in 7.8.2. @ljharb I could, but given the issue in this ticket isn't actually fixed and it's recent, shouldn't this just be reopened?. @ljharb I could, but given the issue in this ticket isn't actually fixed and it's recent, shouldn't this just be reopened?. Sure thing, here's the error:\n```\nUsers/evan.scott/code/pwa/src/Shared/Modals/addInsuranceModal/addInsuranceModal.js\n   74:13  error  Unused state field: 'initialInsuranceLoad'  react/no-unused-state\n   75:13  error  Unused state field: 'insuranceJustChanged'  react/no-unused-state\n   76:13  error  Unused state field: 'insuranceWasAccepted'  react/no-unused-state\n  125:21  error  Unused state field: 'insuranceJustChanged'  react/no-unused-state\n\u2716 6 problems (4 errors, 2 warnings)\n```\nand here's a code sample (I tried to clean it up a bit):\n``js\nexport default function addInsuranceModal(WrappedComponent) {\n    class AddInsuranceModal extends React.Component {\n        static displayName =AddInsuranceModal(${WrappedComponent.name || WrappedComponent.displayName || 'Component'})`;\n        static WrappedComponent = WrappedComponent;\n    static propTypes = {\n        bookingSpotlightIsOn: PropTypes.bool,\n        insuranceIsAccepted: PropTypes.bool,\n        locationId: PropTypes.string,\n        providerId: PropTypes.string.isRequired,\n        providerName: PropTypes.string,\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        if (!props.insuranceIsValidating) {\n            const insuranceIsNoLongerAccepted = (\n                state.insuranceWasAccepted &&\n                props.insuranceIsAccepted === false\n            );\n\n            const insuranceJustChangedAndIsNotAccepted = (\n                state.insuranceJustChanged &&\n                props.insuranceIsAccepted === false\n            );\n\n            const insuranceNotAcceptedOnInitialLoad = (\n                props.insuranceIsAccepted === false &&\n                state.initialInsuranceLoad\n            );\n\n            const newState = { ...state };\n\n            const insuranceNotAccepted = (\n                insuranceIsNoLongerAccepted ||\n                insuranceJustChangedAndIsNotAccepted ||\n                insuranceNotAcceptedOnInitialLoad\n            );\n\n            /**\n             * on desktop, show modal on page load- on mobile, wait until\n             * user clicks book appointment button\n             */\n            const displayReadyForModal = (\n                getWindowBreakpoint() > Breakpoints.medium ||\n                props.bookingSpotlightIsOn\n            );\n\n            if (insuranceNotAccepted && displayReadyForModal) {\n                newState.showModal = true;\n                newState.insuranceWasAccepted = props.insuranceIsAccepted;\n                newState.insuranceJustChanged = false;\n                newState.initialInsuranceLoad = false;\n            } else {\n                newState.insuranceWasAccepted = props.insuranceIsAccepted;\n                newState.insuranceJustChanged = false;\n            }\n\n            return newState;\n        }\n\n        return null;\n    }\n\n    state = {\n        initialInsuranceLoad: true,\n        insuranceJustChanged: false,\n        insuranceWasAccepted: false,\n        showModal: false,\n    };\n\n    mounted = false;\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.showModal && this.renderModal()}\n                <WrappedComponent\n                    {...this.props}\n                    onChange={this.onChangeInsurance}\n                />\n            </div>\n        );\n    }\n\n    renderModal() {\n        const { providerName } = this.props;\n        return (\n            <Portal>\n                <ModalView />\n            </Portal>\n        );\n    }\n\n    onChangeInsurance = insurance => {\n        if (this.mounted) {\n            this.setState({\n                insuranceJustChanged: true,\n            });\n        }\n\n        this.props.onChange(insurance);\n    };\n\n    onClickBookAnyway = () => {\n        this.props.onClickBookAnyway();\n        this.onClickCancel();\n    };\n\n    onClickChangeInsurance = () => {\n        this.props.onClickChangeInsurance();\n        this.onClickCancel();\n    };\n\n    onClickCancel = () => {\n        this.setState({ showModal: false });\n    }\n}\n\nreturn withInsuranceValidation(AddInsuranceModal);\n\n}\n```\nBasically it's a typical HOC pattern of wrapping another component.. Sure thing, here's the error:\n```\nUsers/evan.scott/code/pwa/src/Shared/Modals/addInsuranceModal/addInsuranceModal.js\n   74:13  error  Unused state field: 'initialInsuranceLoad'  react/no-unused-state\n   75:13  error  Unused state field: 'insuranceJustChanged'  react/no-unused-state\n   76:13  error  Unused state field: 'insuranceWasAccepted'  react/no-unused-state\n  125:21  error  Unused state field: 'insuranceJustChanged'  react/no-unused-state\n\u2716 6 problems (4 errors, 2 warnings)\n```\nand here's a code sample (I tried to clean it up a bit):\n``js\nexport default function addInsuranceModal(WrappedComponent) {\n    class AddInsuranceModal extends React.Component {\n        static displayName =AddInsuranceModal(${WrappedComponent.name || WrappedComponent.displayName || 'Component'})`;\n        static WrappedComponent = WrappedComponent;\n    static propTypes = {\n        bookingSpotlightIsOn: PropTypes.bool,\n        insuranceIsAccepted: PropTypes.bool,\n        locationId: PropTypes.string,\n        providerId: PropTypes.string.isRequired,\n        providerName: PropTypes.string,\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        if (!props.insuranceIsValidating) {\n            const insuranceIsNoLongerAccepted = (\n                state.insuranceWasAccepted &&\n                props.insuranceIsAccepted === false\n            );\n\n            const insuranceJustChangedAndIsNotAccepted = (\n                state.insuranceJustChanged &&\n                props.insuranceIsAccepted === false\n            );\n\n            const insuranceNotAcceptedOnInitialLoad = (\n                props.insuranceIsAccepted === false &&\n                state.initialInsuranceLoad\n            );\n\n            const newState = { ...state };\n\n            const insuranceNotAccepted = (\n                insuranceIsNoLongerAccepted ||\n                insuranceJustChangedAndIsNotAccepted ||\n                insuranceNotAcceptedOnInitialLoad\n            );\n\n            /**\n             * on desktop, show modal on page load- on mobile, wait until\n             * user clicks book appointment button\n             */\n            const displayReadyForModal = (\n                getWindowBreakpoint() > Breakpoints.medium ||\n                props.bookingSpotlightIsOn\n            );\n\n            if (insuranceNotAccepted && displayReadyForModal) {\n                newState.showModal = true;\n                newState.insuranceWasAccepted = props.insuranceIsAccepted;\n                newState.insuranceJustChanged = false;\n                newState.initialInsuranceLoad = false;\n            } else {\n                newState.insuranceWasAccepted = props.insuranceIsAccepted;\n                newState.insuranceJustChanged = false;\n            }\n\n            return newState;\n        }\n\n        return null;\n    }\n\n    state = {\n        initialInsuranceLoad: true,\n        insuranceJustChanged: false,\n        insuranceWasAccepted: false,\n        showModal: false,\n    };\n\n    mounted = false;\n\n    componentDidMount() {\n        this.mounted = true;\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.showModal && this.renderModal()}\n                <WrappedComponent\n                    {...this.props}\n                    onChange={this.onChangeInsurance}\n                />\n            </div>\n        );\n    }\n\n    renderModal() {\n        const { providerName } = this.props;\n        return (\n            <Portal>\n                <ModalView />\n            </Portal>\n        );\n    }\n\n    onChangeInsurance = insurance => {\n        if (this.mounted) {\n            this.setState({\n                insuranceJustChanged: true,\n            });\n        }\n\n        this.props.onChange(insurance);\n    };\n\n    onClickBookAnyway = () => {\n        this.props.onClickBookAnyway();\n        this.onClickCancel();\n    };\n\n    onClickChangeInsurance = () => {\n        this.props.onClickChangeInsurance();\n        this.onClickCancel();\n    };\n\n    onClickCancel = () => {\n        this.setState({ showModal: false });\n    }\n}\n\nreturn withInsuranceValidation(AddInsuranceModal);\n\n}\n```\nBasically it's a typical HOC pattern of wrapping another component.. Hmm, not sure how I feel about that. Those variable names are a suggestion, not part of the API.. Hmm, not sure how I feel about that. Those variable names are a suggestion, not part of the API.. ",
    "kingaiakab": "I see. Thank you. ",
    "AlexanderNaiden": "I didn't understand  what should I do in my case (it's also shows eslint error: propType \"isSmall\" is not required, but has no corresponding defaultProp declaration. (react/require-default-props)):\n```jsx\ntype SwitcherProps = {\n    isChecked: boolean,\n    action: () => void,\n    isSmall?: boolean\n}\nexport const Switcher = (props: SwitcherProps) => {\n    return (     \n\n\n\n\n    );\n};\n```. ",
    "not-an-aardvark": "This change has been reverted in eslint@4.7.2, so your tests should be passing again. Sorry about the breakage. . ",
    "ambewas": "We're using babel-eslint as parser. I've tried pinning that one down to a previous version, but that didn't work. \nI'm also having trouble understanding why this is occurring. It seems to be very random. \n```\n/ eslint-disable react/jsx-no-literals /\nliteral string\n```\n-> rule still triggers\nSo I then tried a global disable on top of the file:\n/* eslint-disable */\n<Component>literal string</Component>\n-> rule still triggers\nIt's leading me to believe this might have something to do with how the JSX is being parsed, but I can't figure out why. Our eslintrc file includes:\n...\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n        \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n...\nI'll open an issue with babel-eslint as well -- this might be related to the parser more than this plugin.. Problem was with the last release of eslint itself. Pinning eslint down to v4.6.1 resolves the issue for now.\nI'm closing this and opening an issue with eslint.. yep, I'm going to add to that \ud83d\udc4d \n. ",
    "Dajust": "Hi, I just wanna find out how soon we might have this features! \nThanks for the great work!\n. Hi, I just wanna find out how soon we might have this features! \nThanks for the great work!\n. ",
    "hozefaj": "Getting error Expected 'this' to be used by class method 'componentDidCatch'. I guess until this is fixed, need to disable the check for this method.. ",
    "k15a": "Yes, this is valid Syntax. You can read more about them here: https://flow.org/en/docs/types/typeof/. ",
    "cogell": "a workaround for my code was adding & {} to the type that was erroring out:\n```js\ntype CommonProps = {\n  bar: string,\n}\n// TODO: remove & {} when eslint-plugin-react/issues/1446 is resolved\ntype Props = CommonProps & {}\n```. ",
    "nicholas-l": "This looks like it might have been fixed in v7.10.0 (specifically #1806). Should this be closed?. This looks like it might have been fixed in v7.10.0 (specifically #1806). Should this be closed?. ",
    "haikyuu": "I am having this issue in async functions\njs\nmethod1 = async () =>{\n  const { propNotInPropTypes } = this.props\n}\nThis does not show warning missing in props validation. And if i remove async, it works as expected.\n. @ljharb done in #1583. ",
    "anchaljain123": "I am having the trouble when I use props in helper function in a component and specified props validation for those props. Here is my code \n```jsx\nconst specs = {\n    drop(props, monitor, component) {\n        document.getElementById(monitor.getItem().id).style.display = 'block';\n        const { placeholderIndex } = component.state;\n        const lastX = monitor.getItem().x;\n        const lastY = monitor.getItem().y;\n        const nextX = props.x;\n        let nextY = placeholderIndex;\n        if (props.cards.length >= props.limit && lastX !== nextX) {\n            return;\n        }\n        if (lastY > nextY) { // move top\n            nextY += 1;\n        } else if (lastX !== nextX) { // insert into another list\n            nextY += 1;\n        }\n    if (lastX === nextX && lastY === nextY) { // if position equel\n        return;\n    }\n    props.moveCard(lastX, lastY, nextX, nextY);\n},\nhover(props, monitor, component) {\n    // defines where placeholder is rendered\n    const placeholderIndex = getPlaceholderIndex(\n        monitor.getClientOffset().y,\n        findDOMNode(component).scrollTop\n    );\n\n    // horizontal scroll\n    if (!props.isScrolling) {\n        if (window.innerWidth - monitor.getClientOffset().x < 200) {\n            props.startScrolling('toRight');\n        } else if (monitor.getClientOffset().x < 200) {\n            props.startScrolling('toLeft');\n        }\n    } else if (window.innerWidth - monitor.getClientOffset().x > 200 &&\n        monitor.getClientOffset().x > 200\n    ) {\n        props.stopScrolling();\n    }\n}\n\n};\nexport default class Cards extends Component {\n....\n}\nCards.propTypes = {\n    connectDropTarget: PropTypes.func.isRequired,\n    moveCard: PropTypes.func.isRequired,\n    cards: PropTypes.array.isRequired,\n    x: PropTypes.number.isRequired,\n    isOver: PropTypes.bool,\n    item: PropTypes.object,\n    canDrop: PropTypes.bool,\n    startScrolling: PropTypes.func,\n    stopScrolling: PropTypes.func,\n    isScrolling: PropTypes.bool,\n    name: PropTypes.string,\n    limit: PropTypes.number,\n    removeCard: PropTypes.func,\n    itemStyle: PropTypes.object\n};\nIt still throws me es lint error of like 'error  'moveCard' PropType is defined but prop is never used        react/no-unused-prop-types'. I am having the trouble when I use props in helper function in a component and specified props validation for those props. Here is my codejsx\nconst specs = {\n    drop(props, monitor, component) {\n        document.getElementById(monitor.getItem().id).style.display = 'block';\n        const { placeholderIndex } = component.state;\n        const lastX = monitor.getItem().x;\n        const lastY = monitor.getItem().y;\n        const nextX = props.x;\n        let nextY = placeholderIndex;\n        if (props.cards.length >= props.limit && lastX !== nextX) {\n            return;\n        }\n        if (lastY > nextY) { // move top\n            nextY += 1;\n        } else if (lastX !== nextX) { // insert into another list\n            nextY += 1;\n        }\n    if (lastX === nextX && lastY === nextY) { // if position equel\n        return;\n    }\n    props.moveCard(lastX, lastY, nextX, nextY);\n},\nhover(props, monitor, component) {\n    // defines where placeholder is rendered\n    const placeholderIndex = getPlaceholderIndex(\n        monitor.getClientOffset().y,\n        findDOMNode(component).scrollTop\n    );\n\n    // horizontal scroll\n    if (!props.isScrolling) {\n        if (window.innerWidth - monitor.getClientOffset().x < 200) {\n            props.startScrolling('toRight');\n        } else if (monitor.getClientOffset().x < 200) {\n            props.startScrolling('toLeft');\n        }\n    } else if (window.innerWidth - monitor.getClientOffset().x > 200 &&\n        monitor.getClientOffset().x > 200\n    ) {\n        props.stopScrolling();\n    }\n}\n\n};\nexport default class Cards extends Component {\n....\n}\nCards.propTypes = {\n    connectDropTarget: PropTypes.func.isRequired,\n    moveCard: PropTypes.func.isRequired,\n    cards: PropTypes.array.isRequired,\n    x: PropTypes.number.isRequired,\n    isOver: PropTypes.bool,\n    item: PropTypes.object,\n    canDrop: PropTypes.bool,\n    startScrolling: PropTypes.func,\n    stopScrolling: PropTypes.func,\n    isScrolling: PropTypes.bool,\n    name: PropTypes.string,\n    limit: PropTypes.number,\n    removeCard: PropTypes.func,\n    itemStyle: PropTypes.object\n};\nIt still throws me es lint error of like 'error  'moveCard' PropType is defined but prop is never used        react/no-unused-prop-types'. My 'specs' are parameter to dragSource likejsx\n@DropTarget('card', specs, (connectDragSource, monitor) => ({\n    connectDropTarget: connectDragSource.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    item: monitor.getItem()\n}))\nso I cannot pass anything from 'specs'. My 'specs' are parameter to dragSource likejsx\n@DropTarget('card', specs, (connectDragSource, monitor) => ({\n    connectDropTarget: connectDragSource.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n    item: monitor.getItem()\n}))\n```\nso I cannot pass anything from 'specs'. ",
    "lydell": "The spec lists all the characters that are disallowed:\n\nJSXTextCharacter : SourceCharacter but not one of {, <, > or }\n\nNote that the spec does not define any way escaping them, so the linter rule must either skip reporting and converting string literals with such characters in them to JSXText, or use the defacto standard of using HTML-style escapes supported by Babel: &#123;, &lt;, &gt;, &#125;, respectively. https://github.com/facebook/jsx/issues/4. The spec lists all the characters that are disallowed:\n\nJSXTextCharacter : SourceCharacter but not one of {, <, > or }\n\nNote that the spec does not define any way escaping them, so the linter rule must either skip reporting and converting string literals with such characters in them to JSXText, or use the defacto standard of using HTML-style escapes supported by Babel: &#123;, &lt;, &gt;, &#125;, respectively. https://github.com/facebook/jsx/issues/4. Here's a problem I ran into in a production code base: <Color text={\"\\u00a0\"}/> was auto-fixed into <Color text=\"\\u00a0\"/>, which changed the text prop from a non-breaking space to the literal string \\u00a0.\nTL;DR The jsx-curly-brace-presence must either:\n\nBail out if a problematic character is found.\nImplement the below escaping logic.\n\nEscaping logic\nWhen going from JS to JSX, one has to:\n\nEscape everything that looks like a JSX &-escape. For example, &nbsp; \u2192 &amp;nbsp;. One can either replace all & characters with &amp;, or only valid &-escapes (not &foobar;, for example).\nReplace all JS \\-escapes with JSX &-escapes, or the literal unicode character. For example, \\u00a0 \u2192 &nbsp; (or &#xa0;), \\a (useless escape) \u2192 a, \\r \u2192 actual CR (or &#13;), \\n \u2192 space! (Babel seems to do so at least).\nEscape all disallowed characters in JSX, depending on context: \" \u2192 &quot;, or ' \u2192 &apos;, or {<>} \u2192 &#123;&lt;&gt;&#125;.\n\nWhen going from JSX to JS, one has to:\n\nEscape everything that looks like a JS \\-escape. For example, \\n \u2192 \\\\n.\nReplace all JSX &-escapes with JS \\-escapes. For example, &nbsp; \u2192 \\u00a0 (or \\xa0).\nEscape quotes and line terminator: \" \u2192 \\\" or ' \u2192 \\', similarly for the line terminators: CR, LF, U+2028 and U+2029.\n\nNote that I think it is important to for example convert \\u00a0 into &nbsp; (or &#a0;), and not into  (an actual non-breaking space character), since the author probably chose to use an escape instead of the real character in the first place.\nWhite space\nWhite space handling is not part of the JSX spec: https://github.com/facebook/jsx/issues/6. It is up to each implementation of JSX. I guess Babel is the defacto standard, but Facebook has some internal tooling with slightly different rules: https://github.com/prettier/prettier/issues/2279\nEither way check out the difference in white space in the output here:\n```jsx\n<a a=\"start\n  end\"/>\n\n;\n\njs\n\"use strict\";\nReact.createElement(\"a\", { a: \"start end\" });\nReact.createElement(\"a\", { a: \"start\\\n      \\\n      end\" });\n```\nI haven\u2019t had the time to think about how this should be handled yet.\nNotes\nThe babel repl is super handy for checking how Babel converts escapes.\nNeither quoted attribute values in JSX nor JSXText have JS-style \\-escapes. Compare the spec with string literals in the ES spec. (A SourceCharacter is \"any Unicode code point\".)\n&-escapes are undocumented but I guess how Babel treats them is the defacto standard.\nMany of the jsx-curly-brace-presence test are wrong (the fixed code output sometimes even contain syntax errors). For example, these ones: https://github.com/yannickcr/eslint-plugin-react/blob/1f14fad95d28672f1eb16dbe962557a7072d16e9/tests/lib/rules/jsx-curly-brace-presence.js#L183-L217\nMy opinion\nI'm in favor of choosing the \"bail out approach\" because:\n\nIt is simpler.\n<style type=\"text/css\">{'.mt0 { margin-top: 0; }'}</style> is much more readable than <style type=\"text/css\">.mt0 &#123; margin-top: 0; &#125;</style>.\n\nI could be interested in implementing this when we reach a consensus and I find the time.\nEven though I really like this rule (big thanks to @jackyho112), I\u2019m going to turn it off for now since it is not safe to use :(\n. Here's a problem I ran into in a production code base: <Color text={\"\\u00a0\"}/> was auto-fixed into <Color text=\"\\u00a0\"/>, which changed the text prop from a non-breaking space to the literal string \\u00a0.\nTL;DR The jsx-curly-brace-presence must either:\n\nBail out if a problematic character is found.\nImplement the below escaping logic.\n\nEscaping logic\nWhen going from JS to JSX, one has to:\n\nEscape everything that looks like a JSX &-escape. For example, &nbsp; \u2192 &amp;nbsp;. One can either replace all & characters with &amp;, or only valid &-escapes (not &foobar;, for example).\nReplace all JS \\-escapes with JSX &-escapes, or the literal unicode character. For example, \\u00a0 \u2192 &nbsp; (or &#xa0;), \\a (useless escape) \u2192 a, \\r \u2192 actual CR (or &#13;), \\n \u2192 space! (Babel seems to do so at least).\nEscape all disallowed characters in JSX, depending on context: \" \u2192 &quot;, or ' \u2192 &apos;, or {<>} \u2192 &#123;&lt;&gt;&#125;.\n\nWhen going from JSX to JS, one has to:\n\nEscape everything that looks like a JS \\-escape. For example, \\n \u2192 \\\\n.\nReplace all JSX &-escapes with JS \\-escapes. For example, &nbsp; \u2192 \\u00a0 (or \\xa0).\nEscape quotes and line terminator: \" \u2192 \\\" or ' \u2192 \\', similarly for the line terminators: CR, LF, U+2028 and U+2029.\n\nNote that I think it is important to for example convert \\u00a0 into &nbsp; (or &#a0;), and not into  (an actual non-breaking space character), since the author probably chose to use an escape instead of the real character in the first place.\nWhite space\nWhite space handling is not part of the JSX spec: https://github.com/facebook/jsx/issues/6. It is up to each implementation of JSX. I guess Babel is the defacto standard, but Facebook has some internal tooling with slightly different rules: https://github.com/prettier/prettier/issues/2279\nEither way check out the difference in white space in the output here:\n```jsx\n<a a=\"start\n  end\"/>\n\n;\n\njs\n\"use strict\";\nReact.createElement(\"a\", { a: \"start end\" });\nReact.createElement(\"a\", { a: \"start\\\n      \\\n      end\" });\n```\nI haven\u2019t had the time to think about how this should be handled yet.\nNotes\nThe babel repl is super handy for checking how Babel converts escapes.\nNeither quoted attribute values in JSX nor JSXText have JS-style \\-escapes. Compare the spec with string literals in the ES spec. (A SourceCharacter is \"any Unicode code point\".)\n&-escapes are undocumented but I guess how Babel treats them is the defacto standard.\nMany of the jsx-curly-brace-presence test are wrong (the fixed code output sometimes even contain syntax errors). For example, these ones: https://github.com/yannickcr/eslint-plugin-react/blob/1f14fad95d28672f1eb16dbe962557a7072d16e9/tests/lib/rules/jsx-curly-brace-presence.js#L183-L217\nMy opinion\nI'm in favor of choosing the \"bail out approach\" because:\n\nIt is simpler.\n<style type=\"text/css\">{'.mt0 { margin-top: 0; }'}</style> is much more readable than <style type=\"text/css\">.mt0 &#123; margin-top: 0; &#125;</style>.\n\nI could be interested in implementing this when we reach a consensus and I find the time.\nEven though I really like this rule (big thanks to @jackyho112), I\u2019m going to turn it off for now since it is not safe to use :(\n. @jackyho112 Awesome! Ping me in your PR and I'll help reviewing.. Reviewers: Don't feel intimidated by the walls of comments me and @jackyho112 have exchanged! If you look a the implementation (one file), you'll see that it's pretty clear and concise. The rest of the changes are just docs and tests updates.\nTL;DR on the whole issue: Some characters make it unclear* if braces are unnecessary or not. If we find such characters, bail out.\n* Because readability can suffer badly.. Regardless of the defaultProps discussion, something\u2019s buggy with this rule.\nThe following code:\njsx\n<button type={submit ? \"submit\" : \"button\"} onClick={onClick}>\n  {children}\n</button>\n\u2026 gives the following lint error:\n\"null\" is an invalid value for button type attribute\nSurely it shouldn\u2019t say \"null\" there?. There can also be a # after the &: &#123;.\nYou could also use /regex/.text(value) to return a boolean instead of null or an array of matches. No need for the g modifer.. This can be written as /[{<>}]/.test(rawStringValue). This can be written as /['\"]/.test(value). \\\" is a useless escape here. Do you mean \" or \\\\\"? There are several other occurrences of this throughout this file; you might want to go through it from top to bottom correcting all the useless escapes you come across.\n(It might even be worth using template literals for all/most of these tests to make them easier to read: No need to escape 's.). This autofix could have been kept. <App>foo \"bar\"</App> is valid.. This autofix could also have been kept.. I can't spot the difference between code and output here.. Not here either.. We also need to escape line terminators here.. IMO, it's fine to add /* eslint-disable that-rule */ at the top of this file if needed. You should be allowed to break rules when you can motivate why. But I'm not a maintainer of this repo so I can't say for sure if that's OK. But it would be sad if it's not allowed to make it easier to succeed writing correct tests.. Press the Enter key to type a LF (\\n) (or most likely CRLF \\r\\n on Windows).\nYou can also run one of the following in the Chrome or Firefox dev tools console to copy the character to the clipboard:\n\ncopy('\\n')\ncopy('\\r')\ncopy('\\u2028')\ncopy('\\u2029')\n\nThen you can simply paste the character.\nBut since the tests are written as JavaScript strings you should be able to use JavaScript escapes:\njs\ninput: '<div propWithLineTerminators=\"\\n\\r\\u2028\\u2029\"/>',. Check out the babel repl. It strips some whitespace. We either have to replicate that, or bail out.. I think we should bail out if there's a line terminator in there. Multiple spaces on a single line should be fine.. Actually, I think we should bail out if we find any line terminators at all, because of Babel's whitespace stripping thing.. There's no need for the + here.. I don't remember \u2013 have we addressed or talked about this one?. Final little nitpick: The parentheses in the regex are unnecessary. (Sorry, I can't help myself when I see a regex.). ",
    "magicmark": "\nGlobals are fine\n\nUnless it's a fresh VM per request, this could lead to unintentionally different markup on different requests though? (hence the motivation to want to lint against this)\n\nthe only place window, document, or any other browser-specific feature should be used is in componentDidMount or event handlers\n\nenforcing this would be the intent of the linting rule\nBut yeah, thinking about it, actually correctly checking this in all cases would be really hard/impossible (since we'd have to start figuring out the code-paths etc.)\nWhat is the general guidance for this class of problem when writing eslint rules? We could probably catch some things easily, but we couldn't catch all usages. Is it expected that an eslint rule is able to cover all edge cases? Or are we ok with it only providing partial coverage?\nThanks!. ",
    "vdsabev": "In some Virtual DOM-based libraries like Mithril and Hyperapp using class is the convention. If you already have a codebase written in such a library, to me it seems overkill to rewrite every occurrence of class to className just to keep the no-unknown-property rule.\nSo I support being able to tell eslint that class is allowed.. While that's a good point, I believe there are already some options in this plugin to easily allow other libraries:\n\"react\": {\n  \"createClass\": \"createReactClass\", // Regex for Component Factory to use, default to \"createReactClass\"\n  \"pragma\": \"React\",  // Pragma to use, default to \"React\"\n}\nYou can change that to use anything you want, including mithril, hyperapp.h, or Preact.h ((Preact also prefers class over className). This is extremely helpful for the whole community around React, allowing developers to more easily switch between libraries for different use cases - something smaller while they're prototyping, or for mobile devices, and React when they need to scale the project up.. ",
    "windhost": "\nHowever, with react-navigation options, it can not pass the rule. \nHowever, with react-navigation options, it can not pass the rule. @ljharb \ud83d\udc4c. #1736 . The example in react-navigation doc is arrow function. If using static method , I do not know wether binding this is necessary. . The example in react-navigation doc is arrow function. If using static method , I do not know wether binding this is necessary. . ",
    "aldeka": "Thanks for the quick response!\nMy eslint-plugin-react version is 5.2.2 and eslint version is 2.11.1.. Oh, I see. In that version of the docs (https://github.com/yannickcr/eslint-plugin-react/blob/v5.2.2/docs/rules/prop-types.md) there is no skipUndeclared option! I guess I better upgrade. :). ",
    "F3n67u": "javascript\n    \"overrides\": [\n        {\n            \"files\": [\"**/*.tsx\"],\n            \"rules\": {\n                \"react/prop-types\": \"off\"\n            }\n        }\n    ]\nput above override in eslint config file will solve the problem. . ",
    "hendrikswan": "@DianaSuvorova, thanks for creating this rule - my team is looking forward to when this gets merged in :) . @DianaSuvorova it seems like the changes were approved? . On realized that after my comment.. I admire your perseverance!\nOn Tue, 24 Oct 2017 at 5:34 PM DianaSuvorova notifications@github.com\nwrote:\n\n@hendrikswan https://github.com/hendrikswan, yeah, but I don't have\npermissions to merge to master.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/pull/1462#issuecomment-339032336,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQsNeAdBpZiscUk4C1L3ITfAXpwpovSks5svgOZgaJpZM4Psza7\n.\n. \n",
    "rbalicki2": "I, too, would like line-aligned. I don't think it's a niche requirement, TBH.\nAdding extra line breaks so that the opening tag and the closing tag can be in the same column adds a lot visual bloat that doesn't need to be there, especially in components with multiple nested conditions. (Yes, I know, these can be extracted out, but there's a lot of legacy code).. Um, I guess it's a thing now! https://github.com/yannickcr/eslint-plugin-react/pull/1671. Um, I guess it's a thing now! https://github.com/yannickcr/eslint-plugin-react/pull/1671. ",
    "ezzatron": "@ljharb Can you expand on the reasons why you recommend wrapping multiline JSX in parens? The react/jsx-wrap-multilines rule docs are pretty vague/subjective:\n\nWrapping multiline JSX in parentheses can improve readability and/or convenience.\n\nI did a bit of my own research, and found some potential reasons that have to do with automatic semicolon insertion for return statements:\n\nWhy use parenthesis on JavaScript return statements?\nThis comment on a prettier/prettier issue\n\nBut if that's the reason for the recommendation, wouldn't it be better / more comprehensive to simply lint for unreachable code? Happy to have my opinion changed btw, I just want to understand better.. @ljharb Can you expand on the reasons why you recommend wrapping multiline JSX in parens? The react/jsx-wrap-multilines rule docs are pretty vague/subjective:\n\nWrapping multiline JSX in parentheses can improve readability and/or convenience.\n\nI did a bit of my own research, and found some potential reasons that have to do with automatic semicolon insertion for return statements:\n\nWhy use parenthesis on JavaScript return statements?\nThis comment on a prettier/prettier issue\n\nBut if that's the reason for the recommendation, wouldn't it be better / more comprehensive to simply lint for unreachable code? Happy to have my opinion changed btw, I just want to understand better.. ",
    "Chudesnov": "This issue mostly concernes people who don't use airbnb's style guide (because jsx-wrap-multilines allows to avoid this issue), so I'll try not to mention it but focus on this individual rule. (Also I'd like to work on getting this issue resolved, so let's open a PR for it at #1745)\nI doubt that\n\nan opening tag enters you into an entirely distinct parsing context, it's incredibly important to denote that <...>\n\nWhile this statement is strictly true in terms of specifications (ECMA-262 / Facebook JSX), the distinction between them is irrelevant from the application developer's standpoint, instead, the whole point of using JSX is to hide the underlying nested-function-calls API, not to switch contexts (especially in code style).\n\na single method <...> should be wrapped <...> so that it's explicitly clear what the single value is.\n\nIf that's the rationale to warn about code style OP suggested, then it would also be fair to warn about \njs\n  return createElement(\n    LongComponentClassNameWithLotsOfUnneccessaryPrefixes,\n    {},\n    null\n  )\nand prefer\njs\n  return createElement(\n                        LongComponentClassNameWithLotsOfUnneccessaryPrefixes,\n                        {},\n                        null\n                      )\nor\njs\n  return createElement\n  (\n    LongComponentClassNameWithLotsOfUnneccessaryPrefixes,\n    {},\n    null\n  ) // except this does not work\nBut for JS it's unlikely a matter of objective readability (example 2 is actually less readable for people who don't have a lot of experience with languages other than JavaScript), but solely a matter of taste.. yeah, already realised that I edited the wrong test file, gonna fix it.. ",
    "ryami333": "Hope this helps, these are my steps to reproduce:\nThis works:\n```jsx\n// @flow\nimport React from 'react';\nimport type { ElementProps } from 'react';\nimport './button.scss';\ntype FooProps = ElementProps<'div'>;\nfunction Foo(props: FooProps) {\n    return (\n        \n    );\n}\nexport default Foo;\n```\nThis errors (introduced additional prop 'bar'):\n```jsx\n// @flow\nimport React from 'react';\nimport type { ElementProps } from 'react';\nimport './button.scss';\ntype FooProps = ElementProps<'div'> & {\n    bar: string,\n};\nfunction Foo(props: FooProps) {\n    return (\n        \n    );\n}\nFoo.defaultProps = {\n    bar: 'hello world',\n}\nexport default Foo;\n. Hope this helps, these are my steps to reproduce:\nThis **works**:jsx\n// @flow\nimport React from 'react';\nimport type { ElementProps } from 'react';\nimport './button.scss';\ntype FooProps = ElementProps<'div'>;\nfunction Foo(props: FooProps) {\n    return (\n        \n    );\n}\nexport default Foo;\n```\nThis errors (introduced additional prop 'bar'):\n```jsx\n// @flow\nimport React from 'react';\nimport type { ElementProps } from 'react';\nimport './button.scss';\ntype FooProps = ElementProps<'div'> & {\n    bar: string,\n};\nfunction Foo(props: FooProps) {\n    return (\n        \n    );\n}\nFoo.defaultProps = {\n    bar: 'hello world',\n}\nexport default Foo;\n. Could be wrong, but seems related to this issue: https://github.com/yannickcr/eslint-plugin-react/issues/1413. Could be wrong, but seems related to this issue: https://github.com/yannickcr/eslint-plugin-react/issues/1413. Can reproduce too, my use-case also happens to be with a union type:jsx\n// @flow\nimport React, { type ElementProps } from 'react';\nexport type RadioPropTypes = ElementProps<'button'> & {\n    checked?: boolean,\n    ...\n};\nfunction Radio(props: RadioPropTypes) {\n    return (\n        {/ ... /}\n    );\n}\nRadio.defaultProps = {\n    checked: false,\n    ...\n};\nexport default Radio;\n```\nGives (for all of my defined properties) :\nbash\nerror  defaultProp \"checked\" has no corresponding propTypes declaration   react/default-props-match-prop-types\n. Still no movement here?. ",
    "beaugunderson": "we're also hitting this; with the additional issue that the reference intersection type is made available from our .flowconfig's [libs] section as a declared type vs. being an imported one\nupdate: I've imported the type and also changed whether the intersection is before or after the other defined props (e.g. Type & {} vs. {} & Type; those changes made no difference\nwe get the same error as the OP in default-props-match-prop-types.js; we're using eslint-plugin-react@7.40. ",
    "Morglod": "```js\n// @flow\ntype Opts = { name: string } & { kek: Function }\n// eslint crash\nfunction foo({ name }: Opts) {}\n// no error\nfunction foo(opts: Opts) {\n    const { name } = opts;\n}\n```\neslint-react-plugin crashes when see union type destructuring. ",
    "justinanastos": "I created an MR with a failing test case and hopefully a resolution to this.\nhttps://github.com/yannickcr/eslint-plugin-react/pull/1563. Absolutely agree! I\u2019ll send an MR with another test with an import in the morning. . Sorry @ljharb , been spending too much time using GitLab (merge request versus pull request).. I created a new PR with additional tests (https://github.com/yannickcr/eslint-plugin-react/pull/1570). \n@jseminck I want to point out that this does not actually apply the rules with the imports or the union propTypes in the previous PR; this just prevents eslint from crashing.. Thank you @ljharb ! This is my first time contributing to this package. What is your procedure/requirement/schedule for cutting npm releases?. Thanks for the awesome work @ljharb . This package is amazing.. In that case, thank you to @yannickcr for this awesome plugin too.. @yannickcr Can you cut a release?. No need to apologize @yannickcr !  Thanks for building a great tool that thousands of people use every day!. No need to apologize @yannickcr !  Thanks for building a great tool that thousands of people use every day!. ",
    "lukemwillis": "@ljharb It looks like these options are supported in master now, but in v7.4.0, I get errors. This is my rule:\n\"react/jsx-wrap-multilines\": [\"error\", { \n    \"declaration\": \"parens-new-line\", \n    \"assignment\": \"parens-new-line\", \n    \"return\": \"parens-new-line\", \n    \"arrow\": \"parens-new-line\", \n    \"condition\": \"parens-new-line\", \n    \"logical\": \"parens-new-line\", \n    \"prop\": \"parens-new-line\"\n}]\n\nWhich gives me the error:\n\nError: .eslintrc:\n    Configuration for rule \"react/jsx-wrap-multilines\" is invalid:\n    Value \"[object Object]\" should NOT have additional properties.\n\nIf I remove the rules for condition, logical, and prop, then I get the error:\n\nError: .eslintrc:\n    Configuration for rule \"react/jsx-wrap-multilines\" is invalid:\n    Value \"parens-new-line\" should be boolean.\n\nAre the changes to this rule in v7.4.0? Or are they slated for a future release?. ",
    "dfsq": "Are there plans to make a release in near future? This rule is important.. ",
    "vzaidman": "Also, I'd like to specify default behavior:\n\"react/jsx-wrap-multilines\": [\"error\", \"parens-new-line\", {\n    \"arrow\": \"parens\", \n}]\nor\n\"react/jsx-wrap-multilines\": [\"error\", {\n    \"default\": \"parens-new-line\",\n    \"arrow\": \"parens\", \n}]\nAnd this rule is very importnat i hope it is updated soon.. ",
    "GerritSe": "Any updates on the merge?. ",
    "michaelhogg": "FYI: discussion of this PR is continuing in #1774.. @ljharb: The bug fix in this PR isn't regarding arrow functions in class properties.\u00a0 This is the bug I've fixed:\n```js\nclass Hello extends React.Component {\n// instanceMethod == false\nclassMethod() {}\n\n}\n```\ncheckPropsOrder() is wrongly classifying classMethod() with instanceMethod == false, and so it's being wrongly excluded from the instance-methods group :x:. @ljharb: Your point about arrow functions in React component class properties is actually an interesting topic for discussion.\nCurrently, checkPropsOrder() does classify them as instance-methods (and my PR does not change this functionality):\n```js\nclass Hello extends React.Component {\n// instanceMethod == true\nbar = () => {}\n\n}\n```\nTL;DR\nThere are basically two perspectives on this situation regarding arrow functions in class properties:\n\n@ljharb: I completely agree with you that they're not \"instance methods\" (since they're not defined on the class's prototype), and that they have definite disadvantages.\u00a0 (I'm aware that you're a TC39 member with 4 successful ECMAScript proposals, so I have much respect for your point of view!)\nOn the other hand, it's a very popular way (maybe the most popular way) of binding a function to a React component class instance, to create what many React developers might (loosely and inaccurately) refer to as an \"instance method\" (ie: a non-static function which can access the instance's context, in similar ways to a true \"class method\").\n\nRegarding the sort-comp rule, I think React developers are more likely to expect such functions to be included in the instance-methods group, rather than the instance-variables group.\nBut to avoid the debate/uncertainty about whether they're instance-methods or instance-variables (and to give more granularity to the sort-comp rule), it might be better to use a different set of group names instead, such as:\n\nprototype-methods\ninstance-functions\ninstance-bound-functions\ninstance-properties\n\n1. prototype, performance, testability\nAs the AST nodes indicate here, bar() is a ClassProperty, not a MethodDefinition:\njs\nclass Main {\n    foo() {}        // MethodDefinition\n    bar = () => {}  // ClassProperty\n}\nBabel stage-2 transpiles this to:\njs\nclass Main {\n    constructor() {\n        this.bar = () => {};\n    }\n    foo() {}\n}\nIn ES5, it becomes:\n```js\nfunction Main() {\n    this.bar = function () {};\n}\nMain.prototype.foo = function () {};\n```\nSo bar() is not a \"class method\", because it's not defined on Main.prototype, and so it can't be called using super: :warning:\n```js\ntypeof Main.prototype.foo  // == \"function\"\ntypeof Main.prototype.bar  // == \"undefined\"\nclass Child extends Main {\n    baz() {\n        super.foo();  // OK\n        super.bar();  // TypeError: (intermediate value).bar is not a function\n    }\n}\n```\nThere are two other problems:\n\nThere's a performance impact because the bar() function gets defined multiple times (once for each instance of Main) :warning:\nIt harms testability :warning: @ljharb I've seen some of your comments on this subject: https://github.com/facebook/react/issues/9851#issuecomment-362026580, https://github.com/airbnb/enzyme/issues/365#issuecomment-217355830.\n\nHere are some good articles on this issue:\n\nArrow Functions in Class Properties Might Not Be As Great As We Think\nOf Classes and Arrow Functions (a cautionary tale)\n\n2. Popularity in the React community\nThe usage of arrow functions in class properties is actually included in React's official documentation here and here.\nIt seems this technique is currently very popular in the React community.\u00a0 Here's a Twitter poll from Oct 2017 in which it was voted the most popular technique for binding functions:\n\nWhen doing a Google search for \"react binding functions\", some of the most popular results describe this technique as:\n\nhaving \"multiple advantages\"\nbeing the \"best solution\"\n\"the recommended way to bind your callbacks\"\n\"a much cleaner way\" with \"notable benefits\"\n\"the best of both worlds\"\n\nI think it wouldn't be so popular if React developers were generally impacted by the disadvantages of using such functions.\nFor example, in my opinion, the inability to call them from a child class using super isn't much of a problem for React components, since React recommends composition over inheritance, and super is usually only used in the constructor() (when calling the React.Component parent constructor with super(props)).\nIt'd be good to raise awareness of the potential performance impact and testability problems, but in general, I think the popularity of this technique is likely to continue.\n3. The meaning of the instance-methods group\nThe strict meaning of the word method is \"a function defined on a class's prototype\".\nBut given the popularity of using arrow functions in React component class properties, my guess is that many React developers would consider foo() and bar() to both be instance-methods, because they both have access to the class instance's context \u2014 they can both access the instance's properties (such as this.props and this.state) and component methods (such as this.setState() and this.forceUpdate()).\u00a0 I guess this is sufficient for the needs of many React developers, and they wouldn't be too concerned that bar() isn't actually a \"class method\".\nI'm not saying it's a good thing for any JS developer to be ignorant of important details of the JS language :stuck_out_tongue: I'm saying that when a React developer is reading this rule's documentation, in my opinion, they'll instinctively assume that arrow functions in React component class properties are more likely to be included in the instance-methods group, rather than the instance-variables group.\n4. Some proposals for groups\n@le0nik and @jozanza made a good point in https://github.com/yannickcr/eslint-plugin-react/issues/599#issuecomment-233215247 and https://github.com/yannickcr/eslint-plugin-react/issues/599#issuecomment-234097052:\n\nMaybe there can also be a prototype-methods special keyword, that would allow users to determine how functions like handleClick = () => {} and renderSection() {} should be ordered.\nit would be really nice to have a syntax that disambiguates static, prototype, instance props/methods.\n\nMaybe we could consider replacing the existing instance-methods and instance-variables groups with more granular groups like these? (to enable ESLint users to have full control over the ordering of all kinds of functions):\n```js\nclass Main extends React.Component {\naaa() {}              // \"prototype-methods\"\n\nbbb = function () {}  // \"instance-functions\"\n\nccc = () => {}        // \"instance-bound-functions\"\n\nddd = 42;             // \"instance-properties\"\n\n}\n```\n(This would be a breaking change, since the instance-methods and instance-variables groups have already been released in v7.6.0).\n. ",
    "mrichmond": "Yup... this got me too.. Once the bug is fixed... perhaps a new rule for no-undefined-shape?. ",
    "FDiskas": "\"eslint-config-airbnb\": \"17.1.0\",\n    \"eslint-config-prettier\": \"3.3.0\",\n    \"eslint-plugin-flowtype\": \"3.2.0\",\n    \"eslint-plugin-immutable\": \"1.0.0\",\n    \"eslint-plugin-import\": \"2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"6.1.2\",\n    \"eslint-plugin-prettier\": \"3.0.1\",\n    \"eslint-plugin-react\": \"7.12.3\",\n[Error - 11:14:02 PM] TypeError: Cannot read property 'type' of undefined\n    at resolveSuperParameterPropsType (***/node_modules/eslint-plugin-react/lib/util/propTypes.js:574:20)\n    at Object.ClassDeclaration (***/node_modules/eslint-plugin-react/lib/util/propTypes.js:610:39)\n    at updatedRuleInstructions.(anonymous function) (***/node_modules/eslint-plugin-react/lib/util/Components.js:706:43). ",
    "shanimal": "The documentation doesn't mention the unnecessary template string and the only way this throws an error for me is if I add spaces around my variable. I think rule only errors when you use curly braces but don't need them. So maybe this is a bug?\n<Route path=\"/:tab\" component={`${ Main }`} /> // Unexpected space(s) after '${'\nThis doesn't throw any kind of error:\n<Route path=\"/:tab\" component={`${Main}`} />\nThe .eslintrc entry looks like this:\nreact/jsx-curly-spacing: [2, { \"props\": 'never', \"children\": 'never' }]\nI also tried \nreact/jsx-curly-spacing: [2, 'never']\nreact/jsx-curly-spacing: 2\n. The documentation doesn't mention the unnecessary template string and the only way this throws an error for me is if I add spaces around my variable. I think rule only errors when you use curly braces but don't need them. So maybe this is a bug?\n<Route path=\"/:tab\" component={`${ Main }`} /> // Unexpected space(s) after '${'\nThis doesn't throw any kind of error:\n<Route path=\"/:tab\" component={`${Main}`} />\nThe .eslintrc entry looks like this:\nreact/jsx-curly-spacing: [2, { \"props\": 'never', \"children\": 'never' }]\nI also tried \nreact/jsx-curly-spacing: [2, 'never']\nreact/jsx-curly-spacing: 2\n. fwiw, I know Main is not a string \ud83d\ude02 \nHere's another example.\n```\nconst welcome = '/welcome';\n${ welcome }} component={WelcomeTour} /> (error)\n${welcome}} component={WelcomeTour} /> (no error)\n (rule should expect this)\n```\nThat rule seems to be complaining about the extra space around the variable, not the unnecessary string template.. fwiw, I know Main is not a string \ud83d\ude02 \nHere's another example.\n```\nconst welcome = '/welcome';\n${ welcome }} component={WelcomeTour} /> (error)\n${welcome}} component={WelcomeTour} /> (no error)\n (rule should expect this)\n```\nThat rule seems to be complaining about the extra space around the variable, not the unnecessary string template.. ",
    "shepmaster": "Appears to be closed by  #1481.. ",
    "louisscruz": "Any progress on this?. @yannickcr Any chance you could publish this so I can get access to this bug fix by default?. Adding now.. ",
    "cristianfraser": "I'm also using eslint-config-airbnb and get the same error. This is a minimal code that shows no-unused-state for ascending:\n```\nimport React from 'react'\nexport default class TestComponent extends React.Component {\nstate = {\n    list: [1, 2, 3],\n    ascending: true,\n  }\nonClick = () => {\n    this.setState(({ list, ascending }) => {\n      if (ascending) {\n        return {\n          list: list.sort(),\n          ascending: !ascending,\n        }\n      }\n  return {\n    list: list.reverse(),\n    ascending: !ascending,\n  }\n})\n\n}\nrender() {\n    return (\n      \nClick me\n        {this.state.list.map(item => {item})}\n      \n    )\n  }\n}\n```\nThis is my eslint config:\n```\n{\n  \"extends\": \"airbnb\",\n  \"parser\": \"babel-eslint\",\n  \"env\": {\n    \"browser\": true,\n    \"node\": true,\n    \"es6\": true,\n    \"jest\": true\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"settings\": {\n    \"import/resolver\": {\n      \"webpack\": { \"config\": \"webpack/dev.config.js\" }\n    }\n  },\n  \"rules\": {\n    \"camelcase\": 0,\n    \"semi\": [2, \"never\"],\n    \"react/require-default-props\": 0,\n    \"react/jsx-filename-extension\": 0,\n    \"jsx-a11y/label-has-for\": [2, {\n      \"components\": [\"label\"],\n      \"required\": { \"some\": [\"nesting\", \"id\"] }\n    }],\n    \"jsx-a11y/click-events-have-key-events\": 0,\n    \"jsx-a11y/anchor-is-valid\": [\"error\", {\n      \"components\": [\"Link\"],\n      \"specialLink\": [\"to\"],\n      \"aspects\": [\"noHref\", \"invalidHref\", \"preferButton\"]\n    }],\n  }\n}\n```\nAlso, I've used class properties with plain config-airbnb with no problems. . What do you mean by I can only use it with babel-eslint? That's what's in my config, that's the wrong parser for that rule? Is what's happening the expected behaviour in this case?. ",
    "Godsenal": "I'm having a same problem with latest verstion.\nstate = {\n    removeQueue: [],  <--- unused state field: 'removeQueue'\n}\nonUpdate = (date, id) => {\n    this.setState(prevState => ({\n      removeQueue: [...prevState.removeQueue, { date, id }],\n    }));\n  }\nI'm using removeQueue in functional setState, but eslint shows error.. ```\nconstructor() {\n    super();\n    this.onUpdate = this.onUpdate.bind(this);\n  }\nonUpdate(date, id) {\n    this.setState(prevState => ({\n      removeQueue: [...prevState.removeQueue, { date, id }],\n    }));\n  }\n```\nI've changed it like this.\nBut it shows me the same error.... sure!\n1697 .",
    "Rakib-R": "Thanks For The Reply. ",
    "OZZlE": "We're using the default configuration but it seems veeeeery buggy..\nI added one non native function to a file, it asked me to move it to another place, so I moved it there, then it asks me to move another existing method as well.. and then you can continue like that forever, making unnecessary changes.\nIt seems to want to sort non static/native react functions by alphabet but fails spectacularly. If you work in a team where anyone can add a function in a branch and you merge two different branches you might get a breaking eslint error.. doesn't make any sense to me to sort by alphabet!. ",
    "padsbanger": "@ljharb yes, thats intentional, changing it didnt fix anything :/. @sparkbone thank you kind sir \ud83c\udfa9  that was stupid mistake from my side.. ",
    "sparkbone": "Hi - I came across this page in a Google search for same error message. I believe you want Breadcrumbs.propTypes instead of Breadcrumbs.PropTypes (lowercase p). ",
    "kamronbatman": "Definitely need this.\nThere is also no rule to enforce a newline if the JSX curly brace block is multiline. Optionally I would not mind a rule that enforces curly brace blocks to be on their own lines too (the second example would be changed to Bad).\nBad:\n<MyTag>{ conditional ?\n  true :\n  false  }\n</MyTag>\nGood:\n<MyTag>{\n  conditional ?\n   true :\n   false\n}</MyTag>\nGood:\n<MyTag>\n  {\n    conditional ?\n     true :\n     false\n  }\n</MyTag>\nNot sure if it is possible, but inheriting the config settings from object-curly-newline is fine with me.. I am having the same problem:\n```javascript\nimport React from 'react';\nimport PropTypes from 'prop-types';\nclass SomeComponent extends React.Component {\n  state = {\n    example: this.props.example, // triggers\n  };\nstatic propTypes = {\n    example: PropTypes.string.isRequired,\n  };\nrender() {\n    ...\n  }\n}\nexport default SomeComponent;\n```\nAlso triggers on:\nstate = someFunctionHere(this.props.example);. It is a terribly simplified example, but I assumed you would understand what I meant.\nI hate having to use a constructor if I don't need to, blah.\nIt would be nice to have an option to skip class body property assignments.. @HenriBeck, #1740 looks good but it has merge conflicts.. ",
    "viktor-equinix": "Is anybody found the way how to configure eslint for 3rd example above?. Is anybody found the way how to configure eslint for 3rd example above?. ",
    "JBallin": "Should also enforce consistent spacing around content.\nBAD (missing space at end)\n<h3>{ `Error: ${error}`}</h3>\nGOOD (space before + after)\n<h3>{ `Error: ${error}` }</h3>\nGOOD? (no spaces before/after)\n<h3>{`Error: ${error}`}</h3>. @ljharb great suggestion! Added above (4), let me know if there's anything else I can improve.. ",
    "tomprats": "For a longer child I would line-align. If it's on one line, then I think I'd leave it up to other rules to deter that behavior. So maybe adding an option to allow single-line syntax in combination with the current closing tag options would work?. Could the autofix just do the current behavior, but it just wouldn't be flagged if it were a one-liner? I appreciate you working this out with me. I might try to build it to get some more experience and understand if it's not something that'll make it in. ",
    "oliverjam": "Yeah we've run into this a bit using Flow. If a prop is typed as a Maybe it could be null or undefined. Adding a default prop doesn't help here because a null value prop won't be replaced by the default.\ne.g.\n```jsx\ntype Props = {\n  quantities?: Array\n}\nconst Thing = ({ quantities }: Props) => (\n  {quantities.map(quantity => ...)}\n)\nThing.defaultProps = {\n  quantities: [0]\n}\n```\nwon't trigger this rule but will break at runtime if we pass quantities as null. Yeah we've run into this a bit using Flow. If a prop is typed as a Maybe it could be null or undefined. Adding a default prop doesn't help here because a null value prop won't be replaced by the default.\ne.g.\n```jsx\ntype Props = {\n  quantities?: Array\n}\nconst Thing = ({ quantities }: Props) => (\n  {quantities.map(quantity => ...)}\n)\nThing.defaultProps = {\n  quantities: [0]\n}\n```\nwon't trigger this rule but will break at runtime if we pass quantities as null. Yeah the prop type has to be a Maybe because it might be null. This value is coming from our GraphQL API, and GraphQL uses null for missing values. So the only real way for us to handle this is to make the type optional and let Flow force us to handle the potential null value inside the component.\nSetting a default prop doesn't help at all in that situation, which is why I think the rule is a little pointless. Yeah the prop type has to be a Maybe because it might be null. This value is coming from our GraphQL API, and GraphQL uses null for missing values. So the only real way for us to handle this is to make the type optional and let Flow force us to handle the potential null value inside the component.\nSetting a default prop doesn't help at all in that situation, which is why I think the rule is a little pointless. ",
    "DrummerHead": "@mrchief Thanks! Those deps worked for me\nNote: If you use \"eslint-plugin-jsx-a11y\": \"5.x\", you avoid this issue https://github.com/facebookincubator/create-react-app/issues/2631. @mrchief Thanks! Those deps worked for me\nNote: If you use \"eslint-plugin-jsx-a11y\": \"5.x\", you avoid this issue https://github.com/facebookincubator/create-react-app/issues/2631. ",
    "richardgorman": "Hi, can we please push this change along? @mrichmond . Thanks @ljharb, can you tell me a date of when this will be released?. ",
    "tomipaul": "@ljharb While I think this is a trivial issue, I don't completely agree with your submission.\nI have seen several instances of developers writing something like this\nconst messages = [ ...]\n<MessageList messages />\nthinking messages prop will have the array as value (ES6 object shorthand). While it is arguable that these people have not taken time to go through the react docs, I think it's rather becoming a pitfall and unnecessarily so. I'm not saying the rule should be removed, rather I feel the default can be changed to always and anyone can always go ahead to switch it to never. Although to eliminate ambiguity, I'd still recommend people stick to always.\nTalking about best practice, I believe best practices are often backed up with reasons that border on readability and efficiency. If it's about what people like, then styleguides don't stand a chance to begin with.\n\njsx is html, conceptually, even if it's implemented as syntactic sugar - so consistency with HTML is more important.\n\nIn another vein, I disagree with this, conceptually is meant to be the key word but it does not cut it. Javascript as a language, its DOM API and the ES6 syntax have all influenced JSX. That we have one or two deviations based on use cases does not prove this wrong.\nThis is an argument that has gone on for a long time already especially together with the class vs classname argument. Within the react development community and beyond, a lot has been said about JSX being closer to JS than HTML. So if this is your standpoint, it's all good.\nhttps://github.com/facebook/react/issues/2781\nhttps://github.com/facebook/react/issues/2782\nhttps://facebook.github.io/jsx/\nhttps://reactjs.org/docs/introducing-jsx.html#specifying-attributes-with-jsx. I get your point, if we are looking at it superficially from the aspect of how it reads, then I somewhat agree with you but then we have stuffs like dot notation for JSX types and spread attributes. Even the JSX specification draft says \n\nJSX is designed as an ECMAScript feature and the similarity to XML is only for familiarity.\nThis specification does not attempt to comply with any XML or HTML specification\n\nSee these issues;\nhttps://github.com/facebook/jsx/issues/68\nhttps://github.com/facebook/jsx/issues/65\nhttps://github.com/facebook/jsx/issues/23\nhttps://github.com/facebook/react/issues/9707\nIf these proposals are implemented, JSX will move much more closer to JS.. ",
    "ardok": "I seem to hit this issue: react/no-this-in-sfc for a method inside a component that extends another component.\n```\nclass Foo extends React.Component<{show: boolean}> {\n  renderTable = () => {\n    const {show} = this.props;\n    if (!show) {\n      return null;\n    }\n    return table;\n  };\nrender() {\n    return this.renderTable();\n  }\n}\nclass Bar extends Foo {\n  renderTable = () => {\n    const {show} = this.props;  // react/no-this-in-sfc error\n    if (!show) {\n      return null;\n    }\n    return something else;\n  };\n}\n```. @ljharb eh...I'll just disable it for now then.\nLike, it's a huge project that's been there. And we're not gonna change it anytime soon.\nTechnically, it should still be valid, as in when a component extends another component, it's not stateless functional component anymore.\nMaybe it should be another rule instead? Like \"prefer-composition-over-inheritance\" or something.\nAnyway, thanks!. ",
    "schoenwaldnils": "This is the default implementation of styled-components, like you can see here: https://www.styled-components.com/\nShouldn't it be possible to parse the tagged template literal to see if a prop is used or not?\n. ",
    "kpavankotesh": "Same problem while using CSSinJS. Eslint should check for props used in styles as well\nconst styles = {\n  button: {\n    background: props => props.color\n  }\n}. ",
    "scastiel": "Maybe this piece of code is easier to understand to reproduce the issue:\njs\nconst s = `${'' + { a: `${1}` }}`;\nconst t = '' ? `${2}` : <em />;\nThe problem happens when following is involved:\n\na first template string;\nin this template string, an object (with {} syntax);\nstill in this template string, another template string inside the referenced object;\nan expression using ternary operator;\nin this expression, some JSX in one of the operands;\nstill in this expression, a template string in another operand.\n\nThe problem does not happen if:\n\nthe JSX is removed or put outside the ternary expression;\nthe template string or the JSX is in the first operand of the ternary expression, nor if they're both in the same operand.. Some investigation later\u2026\n\nThe infinite loop comes from here:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/f36b0fa995a2bbe84ab28b035fc6aacbfcb11734/lib/rules/jsx-indent.js#L232-L234\nIt seems that in some cases, getTokenBefore returns the same token as before. This is confirmed when I add this into the loop:\njs\nlet prevPrevToken = null;\ndo {\n  prevToken = sourceCode.getTokenBefore(prevToken);\n  if (prevToken === prevPrevToken) {\n    throw new Error('Woops, entering into an infinite loop!');\n  }\n  prevPrevToken = prevToken;\n} while (prevToken.type === 'Punctuator');\nI added some console.log to see the content of sourceCode:\njs\nconsole.log(sourceCode.ast.tokens.map(t => t.value).join('\u00b7'));\nThis is the result for non working code (entering infinite loop) (line return added for clarity):\njs\nconst\u00b7s\u00b7=\u00b7`${\u00b7''\u00b7+\u00b7{\u00b7a\u00b7:\u00b7`\u00b7template\u00b7${\u00b71\u00b7}\u00b7template\u00b7`\u00b7}\u00b7}\u00b7template\u00b7`\u00b7;\nconst\u00b7t\u00b7=\u00b7''\u00b7?\u00b7`\u00b7template\u00b7${\u00b72\u00b7}\u00b7template\u00b7`\u00b7:\u00b7<\u00b7em\u00b7/\u00b7>\u00b7;\nAnd the result for working code (not entering infinite loop, I just inverted the first and second operand of the ternary expression:\njs\nconst\u00b7s\u00b7=\u00b7`${\u00b7''\u00b7+\u00b7{\u00b7a\u00b7:\u00b7`\u00b7template\u00b7${\u00b71\u00b7}\u00b7template\u00b7`\u00b7}\u00b7}\u00b7template\u00b7`\u00b7;\nconst\u00b7t\u00b7=\u00b7`\u00b7template\u00b7${\u00b72\u00b7}\u00b7template\u00b7`\u00b7?\u00b7''\u00b7:\u00b7<\u00b7em\u00b7/\u00b7>\u00b7;\nAs you can see there doesn\u2019t seem to be a lot of differences, and the tokens seem okay (I don't know what template stands for, but it's here in working example too).\nSo maybe the issue is in the getTokenBefore method provided by ESLint\u2026 I guess no matter what, there's no reason that the returned token is the same as the one provided as parameter. What do you think? Should I investigate more in this direction and eventually submit an issue in ESLint project?. After a lot of investigation on eslint-plugin-react, eslint, babel-eslint, babylon, etc., I confirmed the problem is in babel-eslint parser. I created the issue and submitted the PR for the fix.\nI think this issue can now be closed. Thanks a lot for your help!. ",
    "sharmilajesupaul": "+1 on warning on spread prop violations when the referenced object literal in the same file\nIs the \"safe\" thing generally not warning on propTypes that aren't explicitly declared in the same file? \n. @ljharb added change to cover closing paren, ptal thanks!. It looks like react/jsx-curly-brace-presence is erroneously warning on {' '} which is necessary even if children/global option is set to never. Once that's removed, react/self-closing-comp is autofixing the <span> to be self-closing.\nThe  react/jsx-curly-brace-presence rule doesn't have a test for this case but  react/self-closing-comp does. \nSo fixing react/jsx-curly-brace-presence will solve this issue... I think \ud83e\udd14. Will this also warn on the case where a spread property has an object literal referenced in the same file? \neg: \n```js\nconst defaults = {\n  foo: ''\n}\nclass Hello extends React.Component {\n  static propTypes = {\n    foo: PropTypes.string.isRequired\n  }\nstatic defaultProps = { ...defaults } // <---\nrender () {\n    return Hello {this.props.foo};\n  }\n}\n```. nvm read your pr discription. ",
    "chrisbutler": "@ljharb @jomasti i don't think either of you are addressing the issue...\nthe config examples in 7.4.0 link are identical to the ones in 7.1.0, but I was using 7.2.0 and they don't work\nalso, in the latest version, the config examples don't work. only the ones in this section: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md#shorthand-options\nbut I can't see how to set the options for children. @jomasti yeah, the fact that attributes (seemingly, from your examples) has to be present isn't documented anywhere. @jomasti ok well, neither of those example configs is working for me on eslint@4.11.0 and eslint-plugin-react@7.5.1. @jomasti eslint just fails to run at all, like the configurations are not valid. @ljharb i feel like this was closed prematurely\nin my .eslintrc.js the following does not cause a configuration error: \n\"react/jsx-curly-spacing\": [1, \"always\"],\nbut literally every other example usage in the docs causes Error while running ESLint:. ",
    "ionutcirja": "Can you release this change, please?. Can you release this change, please?. ",
    "renato": "@ljharb I did solve it by changing the code as I said but the point is: that code shouldn't yield an error, should it?\nThe same object destructuring works without any trick in normal components.. My mistake: the message happens with a stateful component too.\nActually, it happens even if not destructuring the object: onChange={props.input.onChange} and onChange={this.props.input.onChange}.\nIn other words, the rule always accepts a props.onEvent but never a nested props.nested.onEvent, and it's the same when destructuring.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/4f3fc51e32467afbeccc4954765f4312e8e76edf/lib/rules/jsx-handler-names.js#L39\nI think it's a bug because if props.onChange is acceptable, why props.input.onChange wouldn't be?. ",
    "jzaefferer": "PS: A release with the new rule would be neat. ",
    "benjie": "I can see that automatically escaping < and > would be risky (I would never expect that to work!), but perhaps it could be applied for certain other characters? For example ' and \" are commonly written out in JSX (though they shouldn't be!) but they don't typically indicate a bug - just someone being too lazy to escape them in my case \ud83d\ude33 \njsx\nrender() {\n  return (<div>Benjie's bullish on \"eslint --fix\"</div>);\n}\nI've never written an auto-fixer for ESLint so not sure if partial auto-fixing is okay.. There's discussion around this in https://github.com/yannickcr/eslint-plugin-react/issues/1263#issuecomment-309327876. Of course it's not always prose; but discussions around correct typography aside, could you give an example of where ' being replaced with &apos; in the child (text) context would not be safe to fix programatically? Even <code> handles it correctly\njsx\nrender() {\n  return (<pre><code>echo 'eslint --fix \"path/to/file\"' >> ./autofix</code></pre>);\n}\nvs\njsx\nrender() {\n  return (<pre><code>echo &apos;eslint --fix &quot;path/to/file&quot;&apos; >> ./autofix</code></pre>);\n}\nAt the moment the rule seems to relate to entities being unescaped; perhaps there should be a different rule about making typographical recommendations (or maybe the error message for this rule should be change to suggest using typographical quotes to make its intent clearer)?\n\nMy main motivation for this to be auto-fixed is due to GitHub's JS code formatting messing up when only one single quote is present, e.g.\njs\nrender() {\n  return (<pre><code>echo 'eslint --fix</code></pre>);\n}\n(Workaround is to use the jsx code formatting (e.g. by renaming your files), or to just correctly escape the quotes.). ",
    "stevemao": "Can the error message print more info? EG: \n- `>` can be replaced with `&gt;`\n- `\"` can be replaced with `&quot;`, `&ldquo;`, `&#34;` or `&rdquo;`\n- `'` can be replaced with `&apos;`, `&lsquo;`, `&#39;` or `&rsquo;`\n- `}` can be replaced with `&#125;`\nSo that I don't have to look it up every time.. @ljharb I just submitted a PR \ud83d\ude04 #2016. BTW, why is & not in the default?. @ljharb Do you also want to change the option to be array of\njs\n{\n  char,\n  alternatives,\n}\nThis would become a breaking change (change from array of strings)?. The structure of DEFAULTS changed to an array of objects. I'll add some tests.. I have added a test which takes an option, forbid.. @ljharb done :). Also added docs. Yeah, I tried. I couldn't find a Either type with this lib.. ",
    "asafda": "I'm still getting this error when passing an empty function as a default props.\nIn my code:\nFeedWithSubheader.propTypes = {\n  componentRef: (() => {})\n};\nI get this error:\nTypeError: Cannot read property 'properties' of undefined\n    at markPropTypesAsUsed (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:656:38)\n    at iterateProperties (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:825:15)\n    at iterateProperties (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:361:11)\n    at markPropTypesAsDeclared (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:810:11)\n    at MemberExpression (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:1027:13)\n    at listeners.(anonymous function).forEach.listener (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint/lib/util/safe-emitter.js:47:58)\n    at Array.forEach (native)\n    at Object.emit (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint/lib/util/safe-emitter.js:47:38)\n    at NodeEventGenerator.applySelector (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint/lib/util/node-event-generator.js:251:26)\n    at NodeEventGenerator.applySelectors (/Users/asafdavid/homeis-dev/home-is-mobile/node_modules/eslint/lib/util/node-event-generator.js:280:22)\nAlso, should I open this as a separate issue? ==> Opened a new issue https://github.com/yannickcr/eslint-plugin-react/issues/1581. @silvenon maybe try with a React Component rather than a function. I can't reproduce it anymore. I guess it was my mistake as @asbjornh noted.\n@AlexMarvelo if you can reproduce please share your code, otherwise i'll just close this issue.\nSorry for any time spent on this.. ",
    "k1nger": "+1 just received the same error. Trying to look more into it right now.. Tested and works on my environment.. ",
    "icd2k3": "Got this error after upgrading eslint-plugin-react from 7.4.0-> 7.5.0. ",
    "hadfieldn": "Just ran into this and came to see if there was a fix. Sure enough, less than 24 hours ago! Looking forward to 7.5.1. Thanks @jomasti !. Just ran into this and came to see if there was a fix. Sure enough, less than 24 hours ago! Looking forward to 7.5.1. Thanks @jomasti !. ",
    "maxammann": "What exactly is missing before this can be merged? Can we maybe split this task and add support for libs like airbnb/prop-types in an other task?. ",
    "jluxenberg-scoot": "Hah! Just tried to reproduce on master and couldn't (was going to open a PR). Thanks for your response!. ",
    "JamyGolden": "@jseminck this still seems to be a bug. Do you have any idea if there has been any progress with the issue?. ",
    "mikebarnhardt": "I agree this rule is handled poorly. defaultProps with a type of either button, reset, or submit should not trigger.\nA work-around is to just disable the rule temporarily:\n/* eslint-disable react/button-has-type */\nreturn <button {...passProps} className={buttonClassNames} type={type}/>;\n/* eslint-enable react/button-has-type */. I agree this rule is handled poorly. defaultProps with a type of either button, reset, or submit should not trigger.\nA work-around is to just disable the rule temporarily:\n/* eslint-disable react/button-has-type */\nreturn <button {...passProps} className={buttonClassNames} type={type}/>;\n/* eslint-enable react/button-has-type */. ",
    "vaske": "@pke which workaround works to you?. @pke yeah I did the same ;). @mattdell I did the same ;). ",
    "josephshambrook": "Yep, I disabled the rule too.\n```\nconst Button = ({ type }) => {\n/\n   * JSX line disabled for ESLint due to questionable rule implementation\n   /\nreturn (\n    // eslint-disable-next-line react/button-has-type\n    Test\n  );\n};\nButton.propTypes = {\n  type: PropTypes.string,\n}\nButton.defaultProps = {\n  type: 'button',\n}\n```. ",
    "elmigranto": "Sorry, didn't notice it was private repo. I removed everything that weren't triggering TypeError, here's what's left after:\njsx\nvar SearchForm = createReactClass({\n  render: function () {\n    return (\n      <div>\n        {(function () {\n          if (this.state.prompt) {\n            return <div>{this.state.prompt}</div>\n          }\n        }).call(this)}\n      </div>\n    );\n  }\n});\nLooks like IIFE is the issue, changing div contents to this works:\njsx\n{\n  this.state.prompt\n    ? <div>{this.state.prompt}</div>\n    : null\n}\nIDK if this is too \"edge-casey\" to fix compared to amount of work required, maybe mention in docs then?. ",
    "jay1337": "@yannickcr do you plan to release a new version soon with this fix ?. React only does a shallow comparison of this.props so a pure component will be rerendered.\nJust have a look to this example if you don't believe me: https://jsfiddle.net/69z2wepo/97573/\nSo what about this new rule ?. Thanks @ljharb !. Thanks @ljharb !. ",
    "saiichihashimoto": "I'm getting this issue in 7.6.0 but not 7.5.1. :-). I'm getting this issue in 7.6.0 but not 7.5.1. :-). ",
    "wmertens": "@saiichihashimoto maybe you got #1657?. @saiichihashimoto maybe you got #1657?. ",
    "rogerkerse": "I have the same issue. Is there any info on it?. ",
    "davazp": "I used dom as they keyword for this rule as I didn't find any other rule acting only on DOM Nodes, and element refers to both Component and DOM Nodes.  Hopefully it is a good name!\nI can imagine a more flexible set of option where you can forbid some properties based on the specific DOM Node, but I preferred to keep it similar to  forbid-component-props for now. I guess it can be extended if somebody finds that useful.. @ljharb There were tests for the 3 cases already I think?  I have anyway added extra SFC and class-based  invalid tests, that there was just one.\nAll code was derived from forbid-component-props, including the schema.  Would you like me to change also the schema of forbid-component-props to follow your requested changes as well?  Or keep it for backward compatibility?\nThanks,\nDavid.. I have also added Related section to the components to link to each other, following the example from default-props-match-prop-types.md.. I updated the PR with the refined schema \ud83d\udc4d . I misread your original comment. I fixed the schema now.. ",
    "briandipalma": "OK, added back in the plugins configuration, I see how it work now, thanks.. I want to make more tweaks, we are repeating configuration.. Actually no this is fine, keeping separate recommend/all blocks seems OK.. Moved and amended.. It's not necessary when using the recommended rule config (it defines itself). I'll edit to make that clearer.. ",
    "MikeTaylor": "Yes, the version from master.\nI see that the ESLin plugin we're using imports rules from eslint-plugin-react ^7.3.0 -- and that's the circumstances in which I found that I needed true and false values. So you're saying that you changed from true/false to \"parens\"/\"ignore\" in v7.5.0? If so, sorry to have wasted your time.. Ah yes, I see that is the case: https://github.com/yannickcr/eslint-plugin-react/commit/4a719e8b03355ff5be26c7a211b645641430f71a\nSo I think you should simply close this PR without merging. Thanks for checking it.. ",
    "hamlim": "Did some quick testing, going back to 0.14.0 it still doesn't warn: https://codesandbox.io/s/92rp6893po. And it seems like toArray didn't exist on React.Children in 0.13.0.. Will there be a new release pushed out soon with this change? We are about to migrate to React 16.3 and this rule, without this change, could start to become a pain for many of our developers/reviewers when using the new lifecycle methods.. Will there be a new release pushed out soon with this change? We are about to migrate to React 16.3 and this rule, without this change, could start to become a pain for many of our developers/reviewers when using the new lifecycle methods.. ",
    "alxmiron": "Also experiencing this issue. Yes, I still suffer from the issue, but looks like it's regarding more about #1542. How can I reproduce:\n1. Update to eslint-plugin-react: 7.5.1\n1. run eslint . from project root\n1. error in terminal:\nCannot read property 'properties' of undefined\nTypeError: Cannot read property 'properties' of undefined\n    at markPropTypesAsUsed (/Users/mac/dev/hitask-web/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:656:39)\n    at iterateProperties (/Users/mac/dev/hitask-web/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:825:15)\n    at iterateProperties (/Users/mac/dev/hitask-web/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:361:11)\n    at markPropTypesAsDeclared (/Users/mac/dev/hitask-web/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:810:11)\n    at MemberExpression (/Users/mac/dev/hitask-web/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:1027:13)\n    at listeners.(anonymous function).forEach.listener (/Users/mac/dev/hitask-web/node_modules/eslint/lib/util/safe-emitter.js:47:58)\n    at Array.forEach (<anonymous>)\n    at Object.emit (/Users/mac/dev/hitask-web/node_modules/eslint/lib/util/safe-emitter.js:47:38)\n    at NodeEventGenerator.applySelector (/Users/mac/dev/hitask-web/node_modules/eslint/lib/util/node-event-generator.js:251:26)\n    at NodeEventGenerator.applySelectors (/Users/mac/dev/hitask-web/node_modules/eslint/lib/util/node-event-generator.js:280:22)\nWith v7.4.0 everything is ok. @ljharb I found an old file, where () => {} was used as a prop type, instead of any. That was a reason of the problem for me. ",
    "asbjornh": "Shouldn't that be:\nFeedWithSubheader.defaultProps = {\n  componentRef: (() => {})\n};\n?\nI came here because I experienced the issue, and noticed that I misspelled defaultProps as propTypes when I saw your comment. Renaming to defaultProps fixed it for me. I'm able to reproduce example from https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-419687291 (and the ones from my previous comment https://github.com/yannickcr/eslint-plugin-react/issues/1958#issuecomment-420202921) with the following config:\n{\n  \"plugins\": [\"react\"],\n  \"parserOptions\": {\n    \"ecmaVersion\": 2018,\n    \"ecmaFeatures\": {\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"rules\": {\n    \"react/prop-types\": 1\n  }\n}\nFrom yarn.lock:\n```\neslint-plugin-react@^7.11.1:\n  version \"7.11.1\"\n  resolved \"https://registry.yarnpkg.com/eslint-plugin-react/-/eslint-plugin-react-7.11.1.tgz#c01a7af6f17519457d6116aa94fc6d2ccad5443c\"\neslint@^5.5.0:\n  version \"5.5.0\"\n  resolved \"https://registry.yarnpkg.com/eslint/-/eslint-5.5.0.tgz#8557fcceab5141a8197da9ffd9904f89f64425c6\"\n```\nIf I remove the spready bits from @swrobel's component I get the expected missing propTypes message.. ",
    "moimael": "It just shows me the eslint errors without doing any actual fixing . After checking the code for the rule, it seems that this particular rule do not implement autofix. ",
    "trisys3": "I'm still having this issue in an async class method. It's a normal method, e.g.\nclass MyClass extends PureComponent {\n    async myMethod() {\n        const {undetectedMethod} = this.props;\n    }\n}. Sorry, forgot about that. It extends PureComponent.\nIt was just an example, anyway. I can try to see if it actually warns, otherwise I can experiment to see how much is actually needed for breakage.. OK. I'll try to get a simplified test case that doesn't work.. ",
    "mo": "@jomasti nice.. thanks for the tip!. @jomasti nice.. thanks for the tip!. ",
    "syakuis": "That code is my fault. However, I could not figure out where the error occurred, so I had trouble solving it.. ",
    "denkristoffer": "@yannickcr Any word on when a new release could be ready? I'd love to get the fix in master into the upcoming Create React App 2.0 release.. ",
    "m10": "still getting this on 7.6.0. still getting this on 7.6.0. no i did not specify any custom ordering. I'd expect that the sorting order of custom properties is at least ignored (if not enforced to the top) by default. no i did not specify any custom ordering. I'd expect that the sorting order of custom properties is at least ignored (if not enforced to the top) by default. Yes, I understood that. But it is a weird default that instance properties should be placed somewhere in the middle of the class body. Yes, I understood that. But it is a weird default that instance properties should be placed somewhere in the middle of the class body. well, then it should be changed now that they exist?. well, then it should be changed now that they exist?. alright! Thanks for the feedback!. alright! Thanks for the feedback!. ",
    "rapheld": "@ljharb Did you mean to request changes on this PR. From your comment, it looks like you meant to approve.. I had tried that, but for whatever reason, it wasn\u2019t displaying a comment. Worked this time though. . Would love to see this get in. ",
    "anshulguleria": "Hi @ljharb  I am using \nextends: \"eslnt:recommended\"\nThat has no-undef applied by default. Also my sourceType: \"module\" is set.. Hi @ljharb  I am using \nextends: \"eslnt:recommended\"\nThat has no-undef applied by default. Also my sourceType: \"module\" is set.. ",
    "azrael": "Oh... Ok. However it's a little bit confusing that same versions of repo and npm package are actually has different functionalities.. Ok, got it. But in my world master === latest stable, that's why I was confused. I expected when I point something like \"eslint-plugin-react\": \"latest\" in my package.json and open the docs in the master branch, there will be the respective info. But your repo - your rules :). ",
    "renet": "+1 from me, this definitely is a bug.. +1 from me, this definitely is a bug.. ",
    "PoliakovMaksym": "I faced the same issue today but only with functional (stateless) components.\nStateless component:\n\nStateful component:\n. I faced the same issue today but only with functional (stateless) components.\nStateless component:\n\nStateful component:\n. @ljharb the issue is not with the prefer-stateless-function. This error is totally fine. I showed it to point out that it is not the default-props-match-prop-types error. The thing is that default-props-match-prop-types is present in stateless component and absence in stateful one with the exact same code (except stateless vs stateful differences). ",
    "mike1808": "what's the status of this issue?. ",
    "pbambusek": "Is there any progress on this? We use this quite extensively in our projects.. Is there any progress on this? We use this quite extensively in our projects.. ",
    "vojtakopal": "Any updates? This would really help us. Thanks.. Any updates? This would really help us. Thanks.. ",
    "digilifecz123": "it would be really nice to have this feature. thanks ;). it would be really nice to have this feature. thanks ;). ",
    "ritchieanesco": "may i ask how everyone is getting around this issue? Are you guys still using flow for stateless components?. ",
    "Elf2707": "You could just use this configuration for rule:\n\"react/default-props-match-prop-types\": [\"error\", { \"allowRequiredDefaults\": true }]\nThis will allow you to have defaultProps for not optional (required) props without warning and also this will work fine with flow, because for flow prop which has corresponding default prop is not optional prop.\n. ",
    "np-8": "Oh now I see! You can actually change the version of the README.md. I always thought the \"frontpage\" would mirror the latest release. Sorry, I am just learning GitHub. And thanks for the clarification.. ",
    "n1313": "@ljharb default for airbnb preset, which is [\"error\", 2]. Printing the full config shows\n\"indent\": [\n      \"error\",\n      2,\n      {\n        \"SwitchCase\": 1,\n        \"VariableDeclarator\": 1,\n        \"outerIIFEBody\": 1,\n        \"FunctionDeclaration\": {\n          \"parameters\": 1,\n          \"body\": 1\n        },\n        \"FunctionExpression\": {\n          \"parameters\": 1,\n          \"body\": 1\n        },\n        \"CallExpression\": {\n          \"arguments\": 1\n        },\n        \"ArrayExpression\": 1,\n        \"ObjectExpression\": 1,\n        \"ImportDeclaration\": 1,\n        \"flatTernaryExpressions\": false,\n        \"ignoredNodes\": [\n          \"JSXElement\",\n          \"JSXElement *\"\n        ]\n      }\n    ],\nShould I try removing ignoredNodes?. Indeed, setting \"indent\": [ \"error\", 2, { \"ignoredNodes\": [ \"JSXElement\" ] }] helped: invalid indentation in my test case is correctly identified and fixed. Is this something I should keep in my config? I got a bunch of other warnings but they actually look valid. . Thanks, will do!. ",
    "theetrain": "@ljharb indeed it depends on the use case for an individual component. I don't mean to say there is a 'right way', just that it would be helpful to detect which method the developer prefers. Maybe something like jsx-spread-props: \"before\".\nWithin my project, I always want my props to override the user's passed-in props as they consume the component. I understand your point though; making this a linting rule would change the overall behaviour of this situation every time it comes up. I appreciate that insight.. ",
    "vhenzl": "Yep, should be something like this.props.onChange({...this.state});. It's just example, not real code ;). @nbyarnell Nah, in your case it reports correctly. Your code is same as this:\njs\n  handleEvent = (thing) => {\n    this.setState({\n      \"a\": this.state.a.doSomething(),\n      \"b\": this.state.b.doSomethingElse(thing)\n    }, () => {\n      $(element).show();\n      $(otherElement).hide();\n    });\n  };\nThe correct version would be:\njs\n  handleEvent = (thing) => {\n    this.setState(prevState => ({\n        \"a\": prevState.a.doSomething(),\n        \"b\": prevState.b.doSomethingElse(thing),\n      }),\n      () => {\n        $(element).show();\n        $(otherElement).hide();\n      });\n  };. ",
    "nbyarnell": "I'm also experiencing a false positive, but not even with this.state being used in a setState callback:\n```es6\nhandleEvent = (thing) => {\n  const {\n      a,\n      b\n    } = this.state, // this line reports 'Use callback in setState when referencing the previous state.'\n    c = a.doSomething(),\n    d = b.doSomethingElse(thing);\nthis.setState({\n    \"a\": c,\n    \"b\": d\n  }, () => {\n    $(element).show();\n    $(otherElement).hide();\n  });\n};\n```. ",
    "brokentone": "This rule would really help me out! Looks like the outstanding question is to @ljharb, and a conflict to be resolved.. This rule would really help me out! Looks like the outstanding question is to @ljharb, and a conflict to be resolved.. This looks like an improvement to me!. This looks like an improvement to me!. ",
    "davidlewallen": "Any progress with this issue? Is there anything that I can do to further this along?\n. Any progress with this issue? Is there anything that I can do to further this along?\n. ",
    "cbranch101": "Hey guys, sorry for the delay, got pulled off into some other things, I'll take a look at the rebase this week. @ljharb Am I good on all of the changes you asked for? . ",
    "cinic": "Omg, my fault. :man_facepalming: \njavascript\ntype Props = Props & DispatchProps;\nNo syntax errors \u2014 eslint exited with error code.. ",
    "SlaUA": "The bug is still present in 7.7.0. Looks like I faced with cache.... ",
    "grajagandev": "Would you be interested in software that automatically finds TypeErrors like this? I am building Fuzz Stati0n to do that (free for OSS) - please take a look and consider signing up for our newsletter to keep in touch.. Would you be interested in software that automatically finds TypeErrors like this? I am building Fuzz Stati0n to do that (free for OSS) - please take a look and consider signing up for our newsletter to keep in touch.. Thank you - great feedback. We instrument the code and run npm test and we record functions called including arguments. Then we mutate those args (including objects) and re-run the tests many times in an attempt to force uncaught exceptions or other critical conditions. But it probably wouldn't have full knowledge of eslint/babel-eslint node types.\nYour suggestion makes me think that it could be smarter - we are very early stage so your input means a lot.. Thank you - great feedback. We instrument the code and run npm test and we record functions called including arguments. Then we mutate those args (including objects) and re-run the tests many times in an attempt to force uncaught exceptions or other critical conditions. But it probably wouldn't have full knowledge of eslint/babel-eslint node types.\nYour suggestion makes me think that it could be smarter - we are very early stage so your input means a lot.. ",
    "istana": "I just stumbled upon this issue from web search and I think it can be closed since months passed without any response.. ",
    "jaaberg": "There exists tests for <Foo bar={`Test`} /> and  <Foo>{\\`Test\\`}</Foo>, but we could add one for <Foo bar={`Test ${baz}`} /> to be explicit(?). @ljharb Great, the tests actually uncovered another bug. The rule should find all strings/literals, so {`foo` + 'bar'} should actually give two errors, one for foo and another one for bar. \nAdded tests in f27ebc2 and fixed in 28581df. . Added option preventInForms to opt-in to validating target-blank in forms with tests and docs. . @ljharb Thanks for feedback :) Updated the PR. . Right now, I will report this as a warning. The same with \n```javascript\ngetstate() {\n  return { value: this.state.counter++ };\n}\nincrease() {\n  this.setState(getState());\n}\n```\nI could easily make it only report this.state directly inside this.setState, but I don't see why you would use this.state and not the prevState-solution which is guaranteed to be up-to-date.\nDo you have an example when you actually would want to do that? \nThis is from the react docs: \n\nIf the next state depends on the previous state, we recommend using the updater function form, instead\nthis.setState((prevState) => {\n return {counter: prevState.quantity + 1};\n});\n\n@ljharb . Yes, I can probably do that for all this.state and setState mentions in the docs. Thanks, I will fix that first thing to the morning tomorrow. . @TheSavior (cc: @zpao )\nI actually have a PR proposing a rule catching all references to this.state used in at this.setState in #1374. Does this rule cover that as well? If not, I would be really happy for feedback. . Yeah I was thinking about it, do you think it is more readable? . ",
    "ca057": "Thanks for your reply!. ",
    "stomvi": "Is this the reason that if the props is checked using flow annotation and the Props type is imported from a separate file, eslint-plugin-react will show react/default-props-match-prop-types error?. ",
    "vcanales": "Sorry, I goofed the syntax on the example; key is not undefined, it was meant to be the second parameter on .map's callback. When using this in real life scenarios, I don't get an eslint error nor does react complain about my iterables having no key.. ",
    "iugo": "@ljharb \"use an override comment\" is nice. But I do not know this usage.\nHow to use JSDoc to comment id and data?\nconst {\n  id,\n  ...data\n} = this.state;. @ljharb This is not elegant, but only so. Thanks.. ",
    "rattrayalex-stripe": "In the case of spread, I would argue that (2) is more useful. In such cases, a typechecker with an exact object type should be used to prevent extraneous properties.\nNote that {...this.state} also already silences the rule. . ",
    "clubajax": "I have to agree with option #2 in the least. My problem is I am rendering a component from a function:\n{getComponent(this.state)}\nAnd the rule goes haywire at that point. I guess I could make getComponent a class method and then the rule works, but that makes my code less clean (React is supposed to be  functional-friendly). \nI may need to turn off this rule, which is unfortunate, because most of the time, it is a big help and has caught some needless state.. ",
    "Dzieni": "Thumbs up for this idea, it would be really helpful. Now I need to disable this rule since it's just officious in many cases.. Thumbs up for this idea, it would be really helpful. Now I need to disable this rule since it's just officious in many cases.. @ljharb In such a short function you rarely reference a property more than once.\nWhen the maxCount equals 1, it's a good compromise between optimising object referencing and avoiding to write unnecessary destructuring assignments.. @ljharb In such a short function you rarely reference a property more than once.\nWhen the maxCount equals 1, it's a good compromise between optimising object referencing and avoiding to write unnecessary destructuring assignments.. ",
    "SteveLillis": "The other thing to keep in mind is that if you allow inlining of one prop usage, you'll have messier Pull Requests for the iteration of software that adds a second prop usage.  That said, flexibility in the rule would be handy to allow the developer to decide what they prefer.. ",
    "Xiongqi-XQ": "```\nimport React from 'react';\nimport { connect } from 'react-redux';\nclass TodoApp extends React.Component {\n  render() {\n    return {this.props.todos};\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    todos: state.todos,\n  };\n}\nconst TodoAppContainer = connect(mapStateToProps)(TodoApp);\nexport default TodoAppContainer;\n``\"todos\" is missing in props validation (react/prop-types)`. thanks. ",
    "RobinClowers": "Here is a fairly small repro case. Removing the func function fixes this, as does removing Props & OP, so there may be two separate issues here?\n```js\n// @flow\nimport * as React from 'react'\ntype Props = {}\nconst func = (arg) => arg\nconst hoc = () => () => {\n  class Inner extends React.Component {\n    render() {\n      return \n    }\n  }\n}\n``. I'm on flow 0.61,OP` is a common abbreviation for \"Own Props\". This example is a bit confusing, because the hoc doesn't actually do anything. OP is commonly used with higher order components to denote the difference between props passed in props coming from redux or somewhere else.. Oh, and I'm on eslint 4.4.1 and eslint-plugin-react v7.5.1.. ",
    "ruyasan": "I am experiencing the same issue - it appears to be caused by using type intersections (&) as part of the prop types definition. . I am experiencing the same issue - it appears to be caused by using type intersections (&) as part of the prop types definition. . ",
    "simena86": "Getting the same eslint-plugin-react error with this example:\n``` javascript\ntype ReduxState = {bar: number};\nconst mapStateToProps = (state: ReduxState) => ({\n    foo: state.bar,\n})\n// utility to extract the return type from a function\ntype ExtractReturn_ R> = R;\ntype ExtractReturn = ExtractReturn_<*, T>;\ntype PropsFromRedux = ExtractReturn;\ntype OwnProps = {\n    baz: string,\n}\n// I want my Props to be {baz: string, foo: number}\ntype Props = PropsFromRedux & OwnProps;\nconst Component = (props. Props) => (\n   \n       {props.baz}\n       {props.foo}\n   \n);\n``` . ",
    "jakezatecky": "Offender appears to be the second conditional check at line 249.. ",
    "sbaechler": "Please add the option to only report an error if it actually triggered a re-render. E.g. as a prop to a PureComponent or a lambda function as a prop to a class component. \nBut a lambda function as prop to a function component or a HTML element would not cause an error.\nI think a rule like this would be more useful than jsx-no-bind. This rule should also catch Array.map or Array.filter in mapStateToProps(), which I see quite often in code reviews.. Please add the option to only report an error if it actually triggered a re-render. E.g. as a prop to a PureComponent or a lambda function as a prop to a class component. \nBut a lambda function as prop to a function component or a HTML element would not cause an error.\nI think a rule like this would be more useful than jsx-no-bind. This rule should also catch Array.map or Array.filter in mapStateToProps(), which I see quite often in code reviews.. @ljharb Would it be possible to enforce in the Type Script plugin? Otherwise I am afraid that this rule overshoots its goal since it really only matters for PureComponent. It could even lead to developers starting to mutate objects just to comply with it.\nIf eslint cannot detect map/filter, then the naming proposed in #2024 (no-update-forcing-props) is misleading. It might leave developers in false security since it only catches the most obvious of cases.. @ljharb Would it be possible to enforce in the Type Script plugin? Otherwise I am afraid that this rule overshoots its goal since it really only matters for PureComponent. It could even lead to developers starting to mutate objects just to comply with it.\nIf eslint cannot detect map/filter, then the naming proposed in #2024 (no-update-forcing-props) is misleading. It might leave developers in false security since it only catches the most obvious of cases.. ",
    "astorije": "Also, link in the changelog for 7.6.0 points to a 404.\n(Don't mind the other comment I deleted, this is just me missing a typo...). Also, link in the changelog for 7.6.0 points to a 404.\n(Don't mind the other comment I deleted, this is just me missing a typo...). I could see why that would be the intent in some cases. Why would you say it's intended?\nNaively, I would say because of elements like pre or textarea. It might get tricky with such elements. Though there could be an exclusion mechanism for them, there are legitimate cases when one would want to not care about text indentation.\nMaybe apply this rule only when there are other elements, not only text? That would solve the cases above, I think. But also it's really late here, so I might be overseeing a lot of things \ud83d\ude05 Can you think of any?\nOption sounds good. If the option is uncompromising, enabled by default would be nice, but if there are tricky cases, it would be reasonable to have it disabled by default.. I could see why that would be the intent in some cases. Why would you say it's intended?\nNaively, I would say because of elements like pre or textarea. It might get tricky with such elements. Though there could be an exclusion mechanism for them, there are legitimate cases when one would want to not care about text indentation.\nMaybe apply this rule only when there are other elements, not only text? That would solve the cases above, I think. But also it's really late here, so I might be overseeing a lot of things \ud83d\ude05 Can you think of any?\nOption sounds good. If the option is uncompromising, enabled by default would be nice, but if there are tricky cases, it would be reasonable to have it disabled by default.. Yes, absolutely, I should have specified \"enabled by default at next major release\" or something.\nRe: whitespace, if we're thinking about use cases, when I see:\nhtml\n    <div>\n        <p>Foo</p>\n                 Bar\n    </div>\nClearly that seems like an indentation issue to me.\nHowever, seeing:\nhtml\n    <pre>\nFoo\n    Bar\n    </pre>\nIt's likely intentional.\nThere can be HTML elements in pre/textarea, but as far as I know they are treated as plain text by HTML renderers. Does the AST make a difference between, say a <em> within a rando <div> and between things like <pre> or <textarea>?\nThat might be a bit of a headache, but I'm thinking there must be a logical way to look at this. I'm too new to the JSX world to be knowledgeable, but could the JSX-specific rules around whitespace help with this?. Yes, absolutely, I should have specified \"enabled by default at next major release\" or something.\nRe: whitespace, if we're thinking about use cases, when I see:\nhtml\n    <div>\n        <p>Foo</p>\n                 Bar\n    </div>\nClearly that seems like an indentation issue to me.\nHowever, seeing:\nhtml\n    <pre>\nFoo\n    Bar\n    </pre>\nIt's likely intentional.\nThere can be HTML elements in pre/textarea, but as far as I know they are treated as plain text by HTML renderers. Does the AST make a difference between, say a <em> within a rando <div> and between things like <pre> or <textarea>?\nThat might be a bit of a headache, but I'm thinking there must be a logical way to look at this. I'm too new to the JSX world to be knowledgeable, but could the JSX-specific rules around whitespace help with this?. @damianobarbati, we switched to Prettier when it comes to code style, and we are very happy with it :). @damianobarbati, we switched to Prettier when it comes to code style, and we are very happy with it :). ",
    "amerryma": "Just wanted to clarify something. Should this also apply to the shouldComponentUpdate function?. @ljharb Thanks for your review! I've made the changes requested. . ",
    "muhabalwan": "#1832 a related issue I'm guessing . ",
    "jcabrerazuniga": "I used like:   componentWillReceiveProps(nextProps: Props)\nI am getting syntax error at  :\nwhat is the syntax now?. ",
    "eaardal": "I have the same problem. Only in components that extends React.Component, and always where one element contains several children, which are siblings, like @alexpriceonline describes. Try this repo https://github.com/eaardal/eslint-indent-demo \nI stripped away as much as I could, so the app doesn't run, but you can use npm run eslint to see the mentioned error, and using the eslint plugin in your editor (I use VS Code) should also show the error. I tried reproducing the error using create-react-app, but didn't get this error there, and the most noticeable difference was that prettier was not used. But if the issue was with prettier, shouldn't running pure eslint (npm run eslint in my repo) then succeed? I know prettier is set-up as a plugin to eslint in the repo, but the failing rule is clearly from this repo. \ud83e\udd14 . Well if you don't use prettier and got the same problem it's likely not related? I can try to remove prettier and see if the error still persists once I get off work.. Well if you don't use prettier and got the same problem it's likely not related? I can try to remove prettier and see if the error still persists once I get off work.. ",
    "remotealex": "I'll try and get one in tomorrow!. I can't seem to replicate it on a clean repo :( I'll try again tomorrow!. \ud83d\ude4f Thanks @eaardal Confirmed the issue on my machine using your repo \ud83d\udc4d \nEdit: Do you think it could be a conflict with prettier?. Yeah I also tried to re-produce in CRA (without prettier) and couldn't. I don't have prettier setup as an ESLint plugin in my prod repo (where I originally got the error)... I'll pull your repo again and have a fiddle with the way prettier is configured.. @eaardal we do use it, but not with ESLint. Just in sequence.... @eaardal we do use it, but not with ESLint. Just in sequence.... @SimeonC OMG thank-you so much! \ud83d\ude80 . ",
    "SimeonC": "I had the same issue, my problem was I was using babel-eslint ^8 (which uses the babylon parser - babel-7).\nDowngrading babel-eslint to 7.2.3 fixed this issue for me.. ",
    "corysimmons": "@ljharb Thanks for investigating this so quickly! Yeah, it definitely \"felt\" hard-coded so I think that's the right thing.\nI think this should be upgraded to a bug and discussed/fixed. It definitely conflicts with React as React is expecting lowercase crossorigin (and explicitly throws an error when it encounters crossOrigin). https://reactjs.org/docs/cross-origin-errors.html. @ljharb Thank you! =). @ljharb Thank you! =). @jzDev Interesting. I think crossorigin was working as expected and the pascal casing was breaking it, which is why I opened the issue in the first place, but maybe I have a donkey brain.. @jzDev Interesting. I think crossorigin was working as expected and the pascal casing was breaking it, which is why I opened the issue in the first place, but maybe I have a donkey brain.. ",
    "jzDev": "It seems there was a confusion on the attribute name convention for crossorigin. \nThe correct naming convention is documented in the React DOM Elements documentation.\nThe previous reference was not a JSX implementation.\nI created a PR to fix this issue. https://github.com/yannickcr/eslint-plugin-react/pull/1659. It seems there was a confusion on the attribute name convention for crossorigin. \nThe correct naming convention is documented in the React DOM Elements documentation.\nThe previous reference was not a JSX implementation.\nI created a PR to fix this issue. https://github.com/yannickcr/eslint-plugin-react/pull/1659. I created a PR for this change here as well as the correct JSX naming convention https://github.com/yannickcr/eslint-plugin-react/pull/1659. I created a PR for this change here as well as the correct JSX naming convention https://github.com/yannickcr/eslint-plugin-react/pull/1659. ",
    "nirnaor": "@ljharb Great. Anything I can do to help with this verification?. ",
    "iansu": "Something like allowPropTypesInPropTypes? Or is that too confusing?. Something like allowPropTypesInPropTypes? Or is that too confusing?. allowPropTypesComposition?\nAlso, how do you feel about softening the error message a bit?. allowPropTypesComposition?\nAlso, how do you feel about softening the error message a bit?. Sounds good to me. I'll work on implementing this change.. Sounds good to me. I'll work on implementing this change.. I've improved the traversal up the tree in search of a parent AssignmentExpression. I also changed some of the method names to (hopefully) make the code more readable.. I've improved the traversal up the tree in search of a parent AssignmentExpression. I also changed some of the method names to (hopefully) make the code more readable.. Any idea when this will be released? I want to get it into create-react-app.. Any idea when this will be released? I want to get it into create-react-app.. No, I'm not sure the node will always have 4 parents. I'm sure there's a better way to handle this but I don't know what it is. Is there a method I can use to search the tree for a parent that's an AssignmentExpression? \nCreating a visitor for AssignmentExpression might be better but I'm not sure how to coordinate between the two visitors. If we find an AssignmentExpression where x.propTypes is on the left and allowInPropTypes is true then we need to ignore the rest of that block of code but the MemberExpression visitor will still be called for expressions inside that block of code. I'm not sure how to solve that.. This would have been done by Prettier. I'll revert it.. On the one hand I'm glad I didn't miss something obvious but on the other hand I wish there was an easy solution to this problem. \ud83d\ude00 \nI'll try adding a function that traverses the tree upwards until it reaches an AssignmentExpression. What are some other node types that should make it stop? I'm thinking Program and FunctionExpression at the very least. Anything else?. ",
    "dmose": "You're correct that I'm asking for \"after\" here; I'm already using the rule you cited to handle \"in\".  Assuming that both \"in\" and \"after\" can be used together, your proposal sounds good to me.. You're correct that I'm asking for \"after\" here; I'm already using the rule you cited to handle \"in\".  Assuming that both \"in\" and \"after\" can be used together, your proposal sounds good to me.. Maybe the new rule wants to be called \"no-race-with-setstate\"?. Maybe the new rule wants to be called \"no-race-with-setstate\"?. ",
    "ghost": "No, it literally renders &times; instead of x.. It's a stylistic concern. &times renders as two perpendicular bars whereas the bars that makeup the letter x are not perpendicular. Also, the look of the letter will vary depending on the page font while the html entity will not. When trying to create a close or cancel button, &times is generally preferred. It's what the bootstrap framework recommends.. I can use innerHTML, though. I use it so rarely that I forgot that it existed. Thanks!. > Personally I don't think that rule should ever be enabled.\nSo I have to disable it? Why? The rule should be changed, no? Because of...\n\nSince your component is stateful, you shouldn't actually do anything to \"optimize\" that component.. The rule is still there...\n\nIt disappear only if I put this:\njs\n  shouldComponentUpdate() {\n    return true;\n  }. ",
    "flyerhzm": "@ljharb sorry, I read the wrong doc. It's updated now.. @ljharb sorry, I read the wrong doc. It's updated now.. @ljharb updated. ",
    "xjmdoo": "Thanks for the review @ljharb. I've pushed a new version of the fixes.. Thanks for the review @ljharb. I've pushed a new version of the fixes.. ",
    "bjornreppen": "Example of failing test case:\n{\n      code: '<Surstr\u00f6mming />'\n     }. Example of failing test case:\n{\n      code: '<Surstr\u00f6mming />'\n     }. ",
    "cquezel": "I don't know the implementation details, but this might test a case not covered by the original proposed test.\n{ code: '<\u00c9urstr\u00f6mming />' }. I don't know the implementation details, but this might test a case not covered by the original proposed test.\n{ code: '<\u00c9urstr\u00f6mming />' }. ",
    "msmichellegar": "Great, thank you @jzDev!. Great, thank you @jzDev!. ",
    "enrique-ramirez": "I'm having this same issue after upgrading to 7.6.0 from 7.5.1. It was working fine before and downgrading works for now.\nCannot read property 'name' of undefined\nTypeError: Cannot read property 'name' of undefined\n    at ObjectPattern.node.properties.forEach.property (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint-plugin-react/lib/rules/no-access-state-in-setstate.js:151:28)\n    at Array.forEach (<anonymous>)\n    at ObjectPattern (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint-plugin-react/lib/rules/no-access-state-in-setstate.js:150:25)\n    at listeners.(anonymous function).forEach.listener (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint/lib/util/safe-emitter.js:47:58)\n    at Array.forEach (<anonymous>)\n    at Object.emit (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint/lib/util/safe-emitter.js:47:38)\n    at NodeEventGenerator.applySelector (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint/lib/util/node-event-generator.js:251:26)\n    at NodeEventGenerator.applySelectors (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint/lib/util/node-event-generator.js:280:22)\n    at NodeEventGenerator.enterNode (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint/lib/util/node-event-generator.js:294:14)\n    at CodePathAnalyzer.enterNode (/Users/enriqueramirez/Sites/aphrodite/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:608:23)\nNot sure what more information I could provide that could be useful.. ",
    "VladislavAnkudinov": "Hey guys, any news? Maybe there are workaround?. ",
    "manjula91": "Hey anyone working on the issue so far?. Hey anyone working on the issue so far?. ",
    "abenitesDC": "@ljharb I believe what you are pointing is a complete separate discussion from the actual problem reported. There are many teams that for various reasons are still using React without ES6 support. Unfortunately, for big projects, migrating code is not always as straight-forward as running a codemod.\nAnd to answer your first question, this indeed works in React. (check: https://reactjs.org/docs/react-without-es6.html). @ljharb I believe what you are pointing is a complete separate discussion from the actual problem reported. There are many teams that for various reasons are still using React without ES6 support. Unfortunately, for big projects, migrating code is not always as straight-forward as running a codemod.\nAnd to answer your first question, this indeed works in React. (check: https://reactjs.org/docs/react-without-es6.html). ",
    "realityking": "Sorry for not getting back to this earlier. React indeed supports mixing these two.\nWe're unlikely to switch to ES6 classes until Node.js natively supports class fields. I'd however like to eliminate the amount of changes needed when we do, thus this usage.. ",
    "DominicTobias": "These should really go at the top without generating an eslint error, they shouldn't be bundled into \"everything else\"\nThey are stage 3 and not experimental https://github.com/tc39/proposal-class-fields. ",
    "serhiipalash": "Hi @ljharb! Is it possible to make instance-variables work with eslint-plugin-react@7.12.4 (latest at the moment)?\nHere is our rule config\n{\n  \"rules\": {\n    \"react/sort-comp\": [\n      \"warn\",\n      {\n        \"order\": [\n          \"static\",\n          \"static-methods\",\n          \"state\",\n          \"instance-variables\",\n          \"/^constructor/\",\n          \"render\",\n          \"lifecycle\",\n          \"/^_.+$/\",\n          \"everything-else\"\n        ],\n        \"groups\": {\n          \"lifecycle\": [\n            \"componentWillMount\",\n            \"componentDidMount\",\n            \"componentWillReceiveProps\",\n            \"shouldComponentUpdate\",\n            \"componentWillUpdate\",\n            \"componentDidUpdate\",\n            \"componentWillUnmount\"\n          ]\n        }\n      }\n    ]\n  }\n}\nbut it seems like instance-variables doesn't have any affect. All instance variables are warned and asked to be placed at the bottom of class.. Somehow everything works fine, when I run eslint in Terminal, but in Sublime instance-variables are highlighted as warnings, if they are at the top.. @ljharb actually the problem was with create-react-app. It goes with its own ESLint config and installs eslint package with different from latest version.. @ljharb actually the problem was with create-react-app. It goes with its own ESLint config and installs eslint package with different from latest version.. ",
    "Gaafar": "We're working in a relatively large team and I want everyone to use PureComponent by default to avoid a lot of unneeded rendering. If a component is not pure in that sense (which we're trying to avoid), I want to make it explicit by adding a comment to disable this rule. Does this seem like a valid use case?. ",
    "hedgepigdaniel": "Do you have a link to support the finding that PureComponents hurt performance?\nThe way I tend to use them is to enforce that all props are immutable values (e.g. immutable.js). This way if any node changes in the props, then only each branch of the component tree where a changed value has passed though rerenders, instead of the entire tree as with regular Component classes. I'm sure there is a balance between constant/algorithmic factors, but if you imagine a large tree of components then this is an algorithmic improvement.\nI haven't tested this, but it seems to make sense?. ",
    "foray1010": "I doubt that PureComponent hurt performance as it is just shallow compare of props and state (https://github.com/facebook/react/blob/4fe6eec15bc69737910e5c6c749ebc6187d67be0/packages/react-reconciler/src/ReactFiberClassComponent.js#L259-L263). There are much more costly codes in js.\nAs a code reviewer/programmer, I prefer to reduce time on deciding where to use PureComponent to optimize things, it should be fine to use it as default. ",
    "MaxInMoon": "Sorry i wasn't on the latest version.. ",
    "alexlrobertson": "I use shape({}) frequently for components that consume an object and pass it to a child. The component doesn't care about the shape of the object, but the child does. Another use case would be style objects as the component doesn't need to care about the style shape.\nI'm all for configurable style though.. I use shape({}) frequently for components that consume an object and pass it to a child. The component doesn't care about the shape of the object, but the child does. Another use case would be style objects as the component doesn't need to care about the style shape.\nI'm all for configurable style though.. ",
    "Palid": "+1, I've seen this used a lot where developers are just being lazy and don't want to document the type.. +1, I've seen this used a lot where developers are just being lazy and don't want to document the type.. ",
    "alexkrautmann": "I definitely would like for this to be configurable. I can't think of a good reason to do PropTypes.shape().. ",
    "yuri-sakharov": "Yes, of course. . Yes, of course. . Added requested tests.. Added requested tests.. @ljharb what about this case:\nclass Hello extends Component {\n          static propTypes = {\n            something: PropTypes.bool\n          }\n          componentWillUpdate (nextProps, nextState) {\n            const {something} = nextProps;\n          }\n        }\ndoes it should throw error or not?. @ljharb what about this case:\nclass Hello extends Component {\n          static propTypes = {\n            something: PropTypes.bool\n          }\n          componentWillUpdate (nextProps, nextState) {\n            const {something} = nextProps;\n          }\n        }\ndoes it should throw error or not?. @ljharb  is it the same \ncode: [\n        'var Hello = createReactClass({',\n        '  propTypes: {',\n        '    something: PropTypes.bool,',\n        '  },',\n        '  componentWillReceiveProps (nextProps) {',\n        '    const {something} = nextProps;',\n        '    doSomething(something);',\n        '  }',\n        '})'\n      ].join('\\n'),\n      parser: 'babel-eslint'\nand \ncode: [\n        'var Hello = createReactClass({',\n        '  propTypes: {',\n        '    something: PropTypes.bool,',\n        '  },',\n        '  componentWillReceiveProps (nextProps) {',\n        '    const {something} = nextProps;',\n        '    doSomething(something);',\n        '  }',\n        '})'\n      ].join('\\n')\n?\nwill all use parser: 'babel-eslint'?. @ljharb  is it the same \ncode: [\n        'var Hello = createReactClass({',\n        '  propTypes: {',\n        '    something: PropTypes.bool,',\n        '  },',\n        '  componentWillReceiveProps (nextProps) {',\n        '    const {something} = nextProps;',\n        '    doSomething(something);',\n        '  }',\n        '})'\n      ].join('\\n'),\n      parser: 'babel-eslint'\nand \ncode: [\n        'var Hello = createReactClass({',\n        '  propTypes: {',\n        '    something: PropTypes.bool,',\n        '  },',\n        '  componentWillReceiveProps (nextProps) {',\n        '    const {something} = nextProps;',\n        '    doSomething(something);',\n        '  }',\n        '})'\n      ].join('\\n')\n?\nwill all use parser: 'babel-eslint'?. ",
    "forabi": "Should this be closed?. ",
    "wholesomedev": "Awesome, thanks @ljharb!. ",
    "pauldijou": "I think JSDoc needs one more *. Try to use /** @extends React.Component */.. I think JSDoc needs one more *. Try to use /** @extends React.Component */.. ",
    "Means88": "@ljharb Yes, that's it! Thank you very much!. ",
    "codypersinger": "I'm also searching for how to achieve this effect. I think the missing piece, for me, is that I'm unwilling to use jsx-one-expression-per-line due to issues #1848 and #1855. Without jsx-one-expression-per-line I'm able to achieve the following fixed output:\n```\n<button\n    data-next-button\n    type=\"button\"\n    class={style.nextButton}\n    onClick={this.handleButtonClick}\n\n{terms.buttonText}\n\n```\n\nWith the desired output being:\n```\n<button\n    data-next-button\n    type=\"button\"\n    class={style.nextButton}\n    onClick={this.handleButtonClick}\n\n{terms.buttonText}\n\n\n```. I'm also searching for how to achieve this effect. I think the missing piece, for me, is that I'm unwilling to use jsx-one-expression-per-line due to issues #1848 and #1855. Without jsx-one-expression-per-line I'm able to achieve the following fixed output:\n\n```\n<button\n    data-next-button\n    type=\"button\"\n    class={style.nextButton}\n    onClick={this.handleButtonClick}\n\n{terms.buttonText}\n\n```\n\nWith the desired output being:\n```\n<button\n    data-next-button\n    type=\"button\"\n    class={style.nextButton}\n    onClick={this.handleButtonClick}\n\n{terms.buttonText}\n\n\n```. \n",
    "dhansiddh": "Can we get this PR merged ?. Can we get this PR merged ?. ",
    "rgabs": "I checked the PR and it works. Could you please merge this PR?. I checked the PR and it works. Could you please merge this PR?. ",
    "nodkrot": "This similarly applies to this rule as well https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md\n. This similarly applies to this rule as well https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md\n. That could work as a wrapper \ud83d\udc4d . That could work as a wrapper \ud83d\udc4d . ",
    "leonaves": "Forgot about this, but re-reading, why do you need to detect that the function is a component? If the prop is unused in the function body then the rule should error, it shouldn't matter if it returns JSX or not.. Forgot about this, but re-reading, why do you need to detect that the function is a component? If the prop is unused in the function body then the rule should error, it shouldn't matter if it returns JSX or not.. ",
    "koba04": "@gbedardsiceupgrade Do you have an example code to reproduce this?. ",
    "gbedardsiceupgrade": "Ah, looks like updating from 7.5.0 to 7.7.0 fixes it. Thanks for the awesome plugin! Closing.. ",
    "Leonard-Li777": "I updated to 7.10.0 still get the error!\nprettier-eslint [ERROR]: eslint fix failed due to an eslint error\nprettier-eslint-cli [ERROR]: There was an error formatting \"/Users/lilun/workspace/supply-scm/src/layout/components/index.jsx\":\n    TypeError: Cannot read property 'properties' of undefined\n        at markPropTypesAsUsed (/Users/lilun/workspace/supply-scm/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:670:41)\n        at markDestructuredFunctionArgumentsAsUsed (/Users/lilun/workspace/supply-scm/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:953:9)\n        at Object.handleFunctionLikeExpressions (/Users/lilun/workspace/supply-scm/node_modules/eslint-plugin-react/lib/rules/no-unused-prop-types.js:982:7)\n        at updatedRuleInstructions.(anonymous function) (/Users/lilun/workspace/supply-scm/node_modules/eslint-plugin-react/lib/util/Components.js:698:75)\n        at listeners.(anonymous function).forEach.listener (/Users/lilun/workspace/supply-scm/node_modules/eslint/lib/util/safe-emitter.js:47:58)\n        at Array.forEach ()\n        at Object.emit (/Users/lilun/workspace/supply-scm/node_modules/eslint/lib/util/safe-emitter.js:47:38)\n        at NodeEventGenerator.applySelector (/Users/lilun/workspace/supply-scm/node_modules/eslint/lib/util/node-event-generator.js:251:26)\n        at NodeEventGenerator.applySelectors (/Users/lilun/workspace/supply-scm/node_modules/eslint/lib/util/node-event-generator.js:280:22)\n        at NodeEventGenerator.enterNode (/Users/lilun/workspace/supply-scm/node_modules/eslint/lib/util/node-event-generator.js:294:14)\nfailure formatting 1 file with prettier-eslint\n1 file was unchanged\n. ",
    "jsphstls": "Pull request: https://github.com/yannickcr/eslint-plugin-react/pull/1689. I adjusted the regex so that a capital letter is still required at some point after the word \"handle\" and added more test cases to demonstrate that minimum requirement.. I updated the error message to be more specific and removed the handleC test case that does pass, but should not be considered valid.. ",
    "03k64": "I agree that expanding the default message here will likely satisfy 99% of users insofar as it would provide context as to why the lint rule in question is necessary. To be clear, I absolutely agree that, provided the default messaging is expanded, the content of the messaging does not need to be tweaked per user.\nI do however think the custom message facility allows the format of the message to be tweaked to best utilise the chosen development environment. For instance, the Visual Studio Code plugin providing lint rule tooltips I mentioned has a maximum width of 64 characters. For non-users of Visual Studio Code, inserting line breaks/wrapping the message at this length does not necessarily make sense.. ",
    "fleischie": "Hey I just stumbled over this as well. I figured I just add some requested data:\nExample Code + Config\nCode\n```javascript\nimport React from 'react';\nexport const Test = () => (\n  \n);\n```\nConfig\njson5\n{\n  \"root\": true,\n  \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n  \"parser\": \"babel-eslint\",\n  \"parserOptions\": {\n    \"ecmaFeatures\": {\n      \"experimentalObjectRestSpread\": true,\n      \"jsx\": true\n    },\n    \"sourceType\": \"module\"\n  },\n  \"plugins\": [\n    \"react\"\n  ],\n  \"rules\": {\n    \"react/jsx-sort-props\": [2, {\n      \"reservedFirst\": true,\n      \"shorthandLast\": true\n    }\n  }\n}\nExpected Output\nNote: I run node_modules/.bin/eslint <file> to produce the following output.\neslint\nActual Output\n```eslint\n/Users/kfle/Documents/Programming/work/OetkerDigital/backen/test.js\n  4:15  error  Props should be sorted alphabetically  react/jsx-sort-props\n\u2716 1 problem (1 error, 0 warnings)\n  1 error, 0 warnings potentially fixable with the --fix option.\n```\n\"Interesting\" Observation\nIf I only supply the shorthandLast linting rule I get the expected result (also the expected output, if I incorrectly sort the shorthand prop before any others).\nExample working config for only shorthand rule:\njson5\n  ...\n  \"rules\": {\n    \"react/jsx-sort-props\": [2, {\n      \"shorthandLast\": true\n    }]\n  }. @zalishchuk can you elaborate a little on what you mean specifically? Do you mean the documentation, the rule's structure, the validation algorithm? I'm just curious.... Hmm, yes. And the ignoreCase and noSortAlphabetically would then be additional attributes to the options-object I guess? That would sound awesome indeed.... Before I dive deeper into this issue code-wise, I still have some questions as this will be a breaking change (the configuration structure will drastically change):\n- How would be a good way to get started on this?\n- Should I first fix the colliding options?\n- Should I directly break everything just for the sake of some awesom-o feature? (Probably not)\n- Should I wait for a maintainer to give his consent/guidance on this? (Probably)\nAny additional pointers will be gladly taken.. Before I dive deeper into this issue code-wise, I still have some questions as this will be a breaking change (the configuration structure will drastically change):\n- How would be a good way to get started on this?\n- Should I first fix the colliding options?\n- Should I directly break everything just for the sake of some awesom-o feature? (Probably not)\n- Should I wait for a maintainer to give his consent/guidance on this? (Probably)\nAny additional pointers will be gladly taken.. ",
    "graingert": "FYI, babel 7 got released. still a problem when you want to have an optional value:\njsx\n// avoid\nconst WrapTingy = ({ items }) => (\n  items && items.length && <Tingy items={items}/>\n);\nWrapTingy.propTypes = {\n  items: propTypes.array\n}. Other options without fragment are:\njs\nconst WrapTingy = ({ cond }) => (\n  cond ? <Tingy/> : null\n);\njs\nconst WrapTingy = ({ cond }) => (\n  (cond && <Tingy/>) || null\n);. Other options without fragment are:\njs\nconst WrapTingy = ({ cond }) => (\n  cond ? <Tingy/> : null\n);\njs\nconst WrapTingy = ({ cond }) => (\n  (cond && <Tingy/>) || null\n);. > I still feel like this is a runtime warning\nThis is only a runtime error when cond is undefined in development people might execute that branch. > I still feel like this is a runtime warning\nThis is only a runtime error when cond is undefined in development people might execute that branch. ",
    "bishwei": "is anyone working on this already?  if not, i'm happy to take a crack at this and push up a PR!. ",
    "xavierartot": "I found the problem, thx. ",
    "baleeds": "\nI found the problem, thx\n\nWhat was the fix?  I'm having the exact same issue.. Could you give more details?\nThere's no v6 in espree?  https://www.npmjs.com/package/espree. ",
    "ufon": "the same problem +1. ",
    "christophehurpeau": "duplicate of #1184. already exists with https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-sort-props.md. @yannickcr @lencioni @EvHaus can any of you review this ? Thank you so much in advance !. Thanks !\nMy team voted against the alphabetical rule because they prefer to sort some data (for example put user first on <User user={user} avatar={avatar} onClick={onClick} /> : \nUser.propTypes = {\n  user: UserShape.isRequired,\n  avatar: AvatarShape.isRequired,\n  onClick: PropTypes.func.isRequired,\n}\nBut still be able to use requiredFirst and callbacksLast :). Thanks for merging ! I know you just released 7.11.0, but do you plan to make another release with this soon ?. ",
    "renatorib": "I got it. Thanks.. ",
    "Tomekmularczyk": "I think this error is still a bit confusing. For example, this gives me an error while it supposed to be just fine:\n```javascript\n  componentDidUpdate(prevProps) {\n    const finished = prevProps.isFetching && !this.props.isFetching;\nif (finished && !this.props.error) {\n  this.setState({ email: '', sent: true });\n}\n\n}\n```\nAfter componentWillReceiveProps has been deprecated I think there will be a lot of situations like this.\n. I think this error is still a bit confusing. For example, this gives me an error while it supposed to be just fine:\n```javascript\n  componentDidUpdate(prevProps) {\n    const finished = prevProps.isFetching && !this.props.isFetching;\nif (finished && !this.props.error) {\n  this.setState({ email: '', sent: true });\n}\n\n}\n```\nAfter componentWillReceiveProps has been deprecated I think there will be a lot of situations like this.\n. @ljharb unless you need to have access to previous props, which is not possible with getDerivedStateFromProps. It would require saving some props in a state for comparisons. For simple situations like above componentDidUpdate is simpler option knowing that update like that is just fine. \nBut I'm not gonna speak for everyone else because of I just started migrating the code and I might be missing something.. @ljharb unless you need to have access to previous props, which is not possible with getDerivedStateFromProps. It would require saving some props in a state for comparisons. For simple situations like above componentDidUpdate is simpler option knowing that update like that is just fine. \nBut I'm not gonna speak for everyone else because of I just started migrating the code and I might be missing something.. ",
    "joggienl": "Just to be clear, does that mean that the example below (regardless what it does or implies it does) is not \"allowed\" and that I need to add the assignment for example to the constructor and in cWRP?\nAn approach like below is causing an error on one of my projects.\n```js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nclass SomeComponent extends React.Component {\n  // Next line triggers\n  // \"Must use destructuring context assignment  react/destructuring-assignment\"\n  example = this.context.someProp;\nstatic propTypes = {\n    example: PropTypes.string.isRequired,\n  };\nstatic contextTypes = {\n    someProp: PropTypes.string.isRequired,\n  };\nrender() {\n    const { example } = this.props;\n    const { someProp } = this.context;\nreturn (\n  <React.Fragment>\n    someProp equals example?\n    {someProp === example}\n  </React.Fragment>\n);\n\n}\n}\nexport default SomeComponent;\n``. Just to be clear, does that mean that the example below (regardless what it does or implies it does) is not \"allowed\" and that I need to add the assignment forexample` to the constructor and in cWRP?\nAn approach like below is causing an error on one of my projects.\n```js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nclass SomeComponent extends React.Component {\n  // Next line triggers\n  // \"Must use destructuring context assignment  react/destructuring-assignment\"\n  example = this.context.someProp;\nstatic propTypes = {\n    example: PropTypes.string.isRequired,\n  };\nstatic contextTypes = {\n    someProp: PropTypes.string.isRequired,\n  };\nrender() {\n    const { example } = this.props;\n    const { someProp } = this.context;\nreturn (\n  <React.Fragment>\n    someProp equals example?\n    {someProp === example}\n  </React.Fragment>\n);\n\n}\n}\nexport default SomeComponent;\n```. ",
    "alexandernanberg": "There is now a separate issue for the issues with class properties #1875 (didn\u2019t see this one until now). Hmm not sure that I agree with you on that, because there is no way to \"silence\" the warning without refactor the code to use a constructor instead, which in my opinion is unnecessary. \nBut I'll update my PR accordingly!. Okay I get it!\nHow would you like the option to be implemented? Not sure that I see a clear way to do it well without a breaking change. I guess we could add another enum option like ignoreClassProperties but I feel that it would maybe be a bit ambiguous?. Okay so I've now added the option, I went for another name because I thought it was more logical than using the \"allow\" word, but let me know if you want me to change it. I also a bit unsure if I wrote the schema correctly\nSo you would do this;\n[\"error\", \"always\", { \"ignoreClassFields\": true }]\n. I think this should be ready to get merged unless there is anything else you want me to adjust?. Well shit, this does not work when assigning an object with properties containing this.props to a class field.\njs\nclass Foo extends React.Component {\n  state = {\n    // this will still throw an error\n    bar: this.props.bar\n  }\n}\nDid a quick try to fix this but didn't make any progress, can somebody either try to solve this or point me in the right direction? @ljharb . Makes sense, I updated the PR so it should work with \"never\" as well \ud83d\udc4d . Yep it probably should. Sorry for missing that, I've never worked in AST or eslint-plugin projects before so it's all new to me. I've updated the PR again.. ",
    "kof": "@ljharb can you please make an example or something? I am not quite sure what makes it \"heavy handed\". @ljharb can you please make an example or something? I am not quite sure what makes it \"heavy handed\". Sure, it can be optional, right? I mean we both agree it makes sense, no?. Sure, it can be optional, right? I mean we both agree it makes sense, no?. I came to understanding that it does, but I understand that not everyone will share my opinion. What matters is if there are enough people who do, so we can add this linting rule.. I came to understanding that it does, but I understand that not everyone will share my opinion. What matters is if there are enough people who do, so we can add this linting rule.. @sergei-startsev probably better to call them specifically, e.g. no-class-component etc. Those things are not officially legacy yet.. Ah sorry, did see this one, but still configuring specific stuff is nicer, more explicit and we don't need to have this terminology, which might mean different things over time.. ",
    "zgrossbart": "My entire .eslintrc file looks like this:\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"script\"\n  },\n  \"env\": {\n    \"browser\": false,\n    \"es6\": true\n  },\n  \"extends\": [\"airbnb\"],\n  \"rules\": {\n    \"max-len\": [2, 130, 4],\n    \"no-param-reassign\": [2, { \"props\": false }],\n    \"no-plusplus\": 0,\n    \"no-underscore-dangle\": 0,\n    \"prefer-rest-params\": 0,\n    \"spaced-comment\": 0,\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"always-multiline\",\n        \"objects\": \"always-multiline\",\n        \"imports\": \"always-multiline\",\n        \"exports\": \"always-multiline\",\n        \"functions\": \"never\"\n      }\n    ]\n  }\n}\nI don't have any other .eslintrc files in my project.  I also know I'm getting the right file because if I change no-plusplus check from 0 to 2 then I see errors about it and if I change it back to 0 I don't see the errors anymore.. My entire .eslintrc file looks like this:\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"script\"\n  },\n  \"env\": {\n    \"browser\": false,\n    \"es6\": true\n  },\n  \"extends\": [\"airbnb\"],\n  \"rules\": {\n    \"max-len\": [2, 130, 4],\n    \"no-param-reassign\": [2, { \"props\": false }],\n    \"no-plusplus\": 0,\n    \"no-underscore-dangle\": 0,\n    \"prefer-rest-params\": 0,\n    \"spaced-comment\": 0,\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"always-multiline\",\n        \"objects\": \"always-multiline\",\n        \"imports\": \"always-multiline\",\n        \"exports\": \"always-multiline\",\n        \"functions\": \"never\"\n      }\n    ]\n  }\n}\nI don't have any other .eslintrc files in my project.  I also know I'm getting the right file because if I change no-plusplus check from 0 to 2 then I see errors about it and if I change it back to 0 I don't see the errors anymore.. Im running it through gulp.  Just gulp lint.. Im running it through gulp.  Just gulp lint.. I still see the same problem when I run eslint directly.  My .eslintrc file looks like this:\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"script\"\n  },\n  \"env\": {\n    \"browser\": false,\n    \"es6\": true\n  },\n  \"extends\": [\"airbnb\"],\n  \"rules\": {\n    \"max-len\": [2, 130, 4],\n    \"no-param-reassign\": [2, { \"props\": false }],\n    \"no-plusplus\": 0,\n    \"no-underscore-dangle\": 0,\n    \"react/no-did-mount-set-state\": 0,\n    \"prefer-rest-params\": 0,\n    \"spaced-comment\": 0,\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"always-multiline\",\n        \"objects\": \"always-multiline\",\n        \"imports\": \"always-multiline\",\n        \"exports\": \"always-multiline\",\n        \"functions\": \"never\"\n      }\n    ]\n  }\n}\nThen I run the eslint command:\n```\n$ npx eslint src/client/foo.js\nsrc/client/foo.js\n  71:5  error  Do not use setState in componentDidMount  react/no-did-mount-set-state\n\u2716 1 problem (1 error, 0 warnings)\n```\nAny other ideas?. I still see the same problem when I run eslint directly.  My .eslintrc file looks like this:\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"script\"\n  },\n  \"env\": {\n    \"browser\": false,\n    \"es6\": true\n  },\n  \"extends\": [\"airbnb\"],\n  \"rules\": {\n    \"max-len\": [2, 130, 4],\n    \"no-param-reassign\": [2, { \"props\": false }],\n    \"no-plusplus\": 0,\n    \"no-underscore-dangle\": 0,\n    \"react/no-did-mount-set-state\": 0,\n    \"prefer-rest-params\": 0,\n    \"spaced-comment\": 0,\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"always-multiline\",\n        \"objects\": \"always-multiline\",\n        \"imports\": \"always-multiline\",\n        \"exports\": \"always-multiline\",\n        \"functions\": \"never\"\n      }\n    ]\n  }\n}\nThen I run the eslint command:\n```\n$ npx eslint src/client/foo.js\nsrc/client/foo.js\n  71:5  error  Do not use setState in componentDidMount  react/no-did-mount-set-state\n\u2716 1 problem (1 error, 0 warnings)\n```\nAny other ideas?. Where is the right place in the .eslintrc file to add that?. I changed my .eslintrc file to look like this:\n{\n  \"root\": true,\n  \"parser\": \"babel-eslint\",\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"script\"\n  },\n  \"env\": {\n    \"browser\": false,\n    \"es6\": true\n  },\n  \"extends\": [\"airbnb\"],\n  \"plugins\": [\"react\"],\n  \"rules\": {\n    \"max-len\": [2, 130, 4],\n    \"no-param-reassign\": [2, { \"props\": false }],\n    \"no-plusplus\": 0,\n    \"no-underscore-dangle\": 0,\n    \"prefer-rest-params\": 0,\n    \"react/no-did-mount-set-state\": 0,\n    \"spaced-comment\": 0,\n    \"comma-dangle\": [\n      \"error\",\n      {\n        \"arrays\": \"always-multiline\",\n        \"objects\": \"always-multiline\",\n        \"imports\": \"always-multiline\",\n        \"exports\": \"always-multiline\",\n        \"functions\": \"never\"\n      }\n    ]\n  }\n}\nI still got the same result.  Is there a working test case of suppressing this error that I could look at?  Maybe I would see the difference between that case and mine.. Is it possible that this is the wrong name or the wrong format of the name of the URL?\nRunning npm ls just prints out the list of dependencies for my project.  Did you mean a different command?. I'm sorry, I meant name in my last comment.  That was just a typo.  I know I'm getting the right file because I can turn off other rules like no-plusplus and that works fine.  . Groan.  You were totally right.  I had a bunch of then in my node_modules files so I didn't see that there was one in the src directory.  When I change it there it works.  I feel more than a little silly now.  Thank you very much for all of your help and time.. ",
    "Krustal": "Hmm, I've not heard this. I've used it with native classes such as Date without much issue that I can recall. What do you mean by cross-realm I guess?. Do you have an article or other references I could look at? . Do you have an article or other references I could look at? . ",
    "ferhatelmas": "@j-martyn @ljharb Any ETA ? I see this crash too.\nFYI, it happens on files with jsx-control-statements.. @ljharb it doesn't disappear but it seems https://github.com/babel/babel-eslint/pull/697 fixed issue for us.. ",
    "gwenaellarmet": "PR #1723 fix this bug, need review and merge if accepted. PR #1723 fix this bug, need review and merge if accepted. Bug was fixed :+1: . Bug was fixed :+1: . I try to match the code style of the function, I can change it if needed. ",
    "mathieug": "I'm not sure for this case, I cannot find any example doing that with a constructor-bound instance method.\nEven this post hasn't got any response: https://stackoverflow.com/questions/45042687/react-router-and-jsx-no-bind. I'm not sure for this case, I cannot find any example doing that with a constructor-bound instance method.\nEven this post hasn't got any response: https://stackoverflow.com/questions/45042687/react-router-and-jsx-no-bind. I need to condition which attribute I set in the state.. I need to condition which attribute I set in the state.. ",
    "dwilt": "@ljharb Thanks for the reply. I wanted to keep all strings inside of curly braces in our project for consistency purposes. That way, if we were to put a variable in (interpolation), we wouldn't need to go and add the backticks and curlys after -- I just really prefer the consistency.  I also think it's clearer to read as you know it's a string.. @ljharb You're correct, it would only be a string.\nI wasn't aware that you are able to have interpolations directly:\n``jsx\nconst test =blah`;\n\n    What's {test} your first name?\n\n```\nThanks for your responses!. ",
    "leohxj": "\nsame as.. \nsame as.. @ljharb \nok, but why \"don\u2019t do things in class property initializers that depend on props or state\" ?\nI think Class properties transform can do this.\n. @ljharb \nok, but why \"don\u2019t do things in class property initializers that depend on props or state\" ?\nI think Class properties transform can do this.\n. ",
    "ericblade": "ah, yes, I suppose I didn't think that through all the way -- i was sort of thinking \"an exception for two letter names\", but then what would follow from that \"what if you abbreviate three words down to three letters?\" .. then you add all uppercase, i guess.  Either way, doesn't matter, I just put a disable-line on it.\n. ",
    "pferreir": "Other rules allow for options that most people will consider unorthodox (e.g. allowAllCaps in jsx-pascal-case). Would this option be that unanimously wrong that it wouldn't be worth having?\n@ljharb I see your point and I fully agree with it. Still, I cannot help but be bothered by stuff like:\njs\nconst {user} = this.state;\ndoWhatever(user);\nIf we're talking of readability, I believe most programmers out there would understand this.state.user better.. Other rules allow for options that most people will consider unorthodox (e.g. allowAllCaps in jsx-pascal-case). Would this option be that unanimously wrong that it wouldn't be worth having?\n@ljharb I see your point and I fully agree with it. Still, I cannot help but be bothered by stuff like:\njs\nconst {user} = this.state;\ndoWhatever(user);\nIf we're talking of readability, I believe most programmers out there would understand this.state.user better.. ",
    "UchihaVeha": "\njavascript \nconst SnackBarConnected = props => props.message && <SnackBar {...props} />;\njavascript \nconst SnackBarConnected = ({ message, ...props }) => \n message && <SnackBar {...props} message={message} />;\n\n@ljharb  Do you think variant 2 is looking better than 1?  . 1.\njavascript \nconst SnackBarConnected = props => props.message && <SnackBar {...props} />;\n2. \njavascript \nconst SnackBarConnected = ({ message, ...props }) => \n message && <SnackBar {...props} message={message} />;\n@ljharb  Do you think variant 2 is looking better than 1?  . @ljharb You did not understand me, what if I need to use some prop in current component and pass this prop to the child with other props and using the arrow function?\n 1.\njavascript\nconst myComponent = props => \n  <div>\n    <span>{props.user.email}</span>\n    <Account {...props} />\n  </div>\n2.\njavascript\nconst myComponent = ({user, ...props}) => \n  <div>\n    <span>{user.email}</span>\n    <Account {...props} user={user} />\n  </div>\n. @ljharb You did not understand me, what if I need to use some prop in current component and pass this prop to the child with other props and using the arrow function?\n 1.\njavascript\nconst myComponent = props => \n  <div>\n    <span>{props.user.email}</span>\n    <Account {...props} />\n  </div>\n2.\njavascript\nconst myComponent = ({user, ...props}) => \n  <div>\n    <span>{user.email}</span>\n    <Account {...props} user={user} />\n  </div>\n. ",
    "dolsem": "@ljharb What do you think of this\njs.es6\nshouldComponentUpdate(nextProps) {\n  return this.props.uri !== nextProps.uri;\n}\nvs this\njs.es6\nshouldComponentUpdate(nextProps) {\n  const { uri } = this.props;\n  return uri !== nextProps.uri;\n}\n?. @ljharb I like neither my second version nor the version you provided, because I think accessing uri directly without restructuring makes more evident what's happening conceptually. If you isolate the return line from the rest of the code, it's much clearer what's going on in my first version.\nIn the example you provided the problem is easily avoidable by not destructuring nextProps (Captain Obvious here). Cause if you do it this way, it's not as clear what argument exactly the method accepts (nextProps is a very descriptive name), and generally speaking, I feel like destructuring gets abused way too often, with cases just like this, where you don't really need it. \nI think it's almost always best to destructure this.props, but in my previous example the tradeoff is not in its favor, unless I'm missing something. Personally, I would prefer to have an option to disable the warning when the prop you're accessing is specifically being used to compare it with a variable or prop with the same name. Or, a less sophisticated alternative would be to have a config option that just disables the rule inside shouldComponentUpdate.. ",
    "dandonahoe": "Another scenario where this would be useful is when there's only one mention of this.props in a function. For instance\nToo verbose for simple functions\n```javascript\nhandleThing = (evt, id) => {\n  const { dispatchOpenDialog } = this.props;\ndispatchOpenDialog(DIALOG_ID, {\n    id\n  });\n}\n```\nCleaner solution when this.props is only used a single time. Having a linter option for minAttributes: 1 would be very nice to have\njavascript\nhandleThingSimple = (evt, id) =>\n  this.props.dispatchOpenDialog(DIALOG_ID, {\n    id\n  }). @ljharb Thanks for the response. \nCorrect me if I'm wrong, but wouldn't this be fine since the only value being passed back from handleThingSimple  is the return value from dispatchOpenDialog? It's not passing this.props anywhere, nor would that be accessible outside the scope of this code. \nIf I'm missing something, i have a good chunk of code to go back and refactor.... which if fine because I'd rather get it right.. ",
    "rdsedmundo": "+1 on that.\nI'm with @yardenhochman. I really prefer the 2nd code as this destruct is completely unnecessary IMO. I'd like to see a minAttributes option as well.. I'm also very unhappy of Airbnb's style guide asking for that.\nI have the exact same case:\nOne or more rows have failed to process. Please use the filter option below to check\n            which ones have failed and report it <strong>immediately</strong> to the engineering\n            team.\nI'm required to split up the <strong> part in a new line, which results in the necessity of having to add two more extra lines alongside with{' '} in order to preserve the whitespace.\nI'm disabling it for now.. ",
    "malyzeli": "\n@dandonahoe that example is exactly the worst hazard - this.props is now the receiver (the this value) of the prop function, and you\u2019ve just exposed yourself to a much larger class of bugs by implicitly passing the props object elsewhere.\nEven if there was an option like this (which I\u2019m not inclined to add) it would never allow you to avoid destructuring a function prop.\n\nCan you please elaborate (with a bit of code examples) or link us to some explanatory articles about this \"much larger class of bugs\"?\nThis is the first time I see it and unfortunately I have this syntax (see below) all around my codebase (usually disabling destructuring-assignment rule on individual file level) in many projects. \nI really want to understand the problem so I can fix it properly (and of course I will stop disabling the rule, haha).\nThanks for your time!\nExample:\njsx\nclass App extends Component {\n  handleLogin = () => this.props.loginUser(...)\n  // ...\n} . @ljharb well, it's true. I didn't realize that because most of my codebase is purely functional - I never mutate function input parameters and the only place I use this keyword is in React.Component classes.\nI think it's questionable if you need to be guarded by destructuring-assignment rule when you respect no-param-reassign. But that's of course something that must be considered individually, and each project may configure this rule according to their needs.\nI made an example code for those who want to see the difference, it's available here:\nhttps://gist.github.com/malyzeli/0476d96259fe97f5dfe25d8b5abf09ec. ",
    "Miziak": "Ok, I added suggested undefined check on node.. Ok, I added suggested undefined check on node.. ",
    "ksdmitrieva": "That is a fair point. I guess, I'm looking at it from security review point\nof view. In this case, I'd rather know that the link is created\ndynamically, so I can trace where the dynamic value comes from and if it\nmay contain untrusted input. But, yes, you're right this will generate some\nnumber of false positives.\nOn Fri, Mar 23, 2018 at 6:32 PM, Jordan Harband notifications@github.com\nwrote:\n\nThis seems reasonable; but what about the false positive case, where the\ndynamic link is internal?\nI'd hate to force people to disable the entire rule in that case.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1737#issuecomment-375815422,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AF1Rz5cbDIaYywfUNpNbpklWcIq_NAD2ks5thXfogaJpZM4S3qJK\n.\n. That is a fair point. I guess, I'm looking at it from security review point\nof view. In this case, I'd rather know that the link is created\ndynamically, so I can trace where the dynamic value comes from and if it\nmay contain untrusted input. But, yes, you're right this will generate some\nnumber of false positives.\n\nOn Fri, Mar 23, 2018 at 6:32 PM, Jordan Harband notifications@github.com\nwrote:\n\nThis seems reasonable; but what about the false positive case, where the\ndynamic link is internal?\nI'd hate to force people to disable the entire rule in that case.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1737#issuecomment-375815422,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AF1Rz5cbDIaYywfUNpNbpklWcIq_NAD2ks5thXfogaJpZM4S3qJK\n.\n. Thanks, @kenearley, for moving this along. The whole idea of the vulnerability is when untrusted link is added without \"rel=noopener\". When the link is hard-coded, it's most likely trusted. Otherwise, why would you add untrusted links to your application. Untrusted links will most likely come from user input. Anyway, I'm glad this is added.\nInteresting edge case with the spread operator. If it's an antipattern, I wonder if there is a rule that highlights that usage.. \n",
    "JustFly1984": "I use immutable.js extensively accross my apps.\nI get errors on ImmutablePropTypes.map and ImmutablePropTypes.list\nTypo in declared prop type: map  react/no-typos\nTypo in declared prop type: list  react/no-typos\nPlease help. Currently it breaks my build, so I will mute this rule until you fix it. Yes, it is fixed for me in v7.12.4. ",
    "Huespal": "Where can I see the plans for PR to be merged? I have the same problem as @JustFly1984. There's any workaround better than disabling the rule? \nThanks.. Where can I see the plans for PR to be merged? I have the same problem as @JustFly1984. There's any workaround better than disabling the rule? \nThanks.. ",
    "ybiquitous": "Thanks for your review!\n\nis there any way we could add a CI check that prevents these from being mis-sorted?\n\nI think it is easiest to use regular expressions, so what do you think?\nFor example:\njs\nconst pattern = /# List of supported rules([\\s\\S]+?)#/;\nconst source = '<README.md contents...>';\nconst ruleListText = source.match(pattern)[1];\nconst ruleList = ruleListText.trim().split('*');\n// check sorting...\n(I think using the markdown parser is too heavy for this task...)\n. Thanks for your review!\n\nis there any way we could add a CI check that prevents these from being mis-sorted?\n\nI think it is easiest to use regular expressions, so what do you think?\nFor example:\njs\nconst pattern = /# List of supported rules([\\s\\S]+?)#/;\nconst source = '<README.md contents...>';\nconst ruleListText = source.match(pattern)[1];\nconst ruleList = ruleListText.trim().split('*');\n// check sorting...\n(I think using the markdown parser is too heavy for this task...)\n. To install a markdown parser such as markdown-it for the purpose of CI check seems too difficult to me. \ud83d\ude13\nI don't know how to extract easily any list items from markdown text, what do you know it?. To install a markdown parser such as markdown-it for the purpose of CI check seems too difficult to me. \ud83d\ude13\nI don't know how to extract easily any list items from markdown text, what do you know it?. Sorry for late reply \ud83d\ude4f \n\nAn alternative would be to make an npm run-script that generates this list automatically, and then the CI check would simply be \"run the check, and fail if there's a diff\".\n\nThanks, I will try it!\nBut diffs in this PR becomes too large, so can I do this with another PR?\n. > is it OK if we do it in this PR?\nYes! No problem! \ud83d\ude4f . ",
    "afoon": "Does ignoreCase have to implicity set to false for the rule to be false, or is that the default setting? If it it is the default setting, it is not defaulting to the ignoreCase: false. Does ignoreCase have to implicity set to false for the rule to be false, or is that the default setting? If it it is the default setting, it is not defaulting to the ignoreCase: false. ",
    "samueljun": "Ah that works really well thank you!. Ah that works really well thank you!. ",
    "sergei-startsev": "Closed in favor of #1750 . Closed in favor of #1750 . Is it still actual? I suppose it has to be closed in favor of #1750. @ljharb, is there anything else that we have to discuss here?. @ljharb, is there anything else that we have to discuss here?. @gaearon I'm thinking about linting these legacy lefecycle methods with a separate rule, e.g. no-legacy. Thoughts? . @gaearon I'm thinking about linting these legacy lefecycle methods with a separate rule, e.g. no-legacy. Thoughts? . Just curious why is it beneficial to see React runtime warnings first? I'm not sure if it's expected to see leaked warnings in production without mechanism to catch them in build time. . @kof take a look at Dan's comment, they're legacy for now. . @ljharb it seems to be released in 7.8.0.. @ljharb, @gaearon what are our next steps regarding legacy methods? Would like to move it to a dedicated rule, adjust the existing? I can pick up the task if u specify the direction. . > Another option would be for no-deprecated to take React version as an argument. These methods could be tagged as something like 16.999 until we've decided which release deprecates them. People who want to opt in can specify 17 if they want to see the messages.\nI'm concerned about version 17 in lint configuration, it can confuse... As alternative I'd propose to move it to the existing no-unsafe rule since componentWillMount, componentWillReceiveProps, componentWillUpdate also cause Unsafe lifecycle methods warnings in strict mode. @gaearon does it sound reasonable to you?\n\nIf you see all warnings at once (instead of your little corner of the product) you're less incentivized to fix them. \n\nSometimes it's also useful to see the entire scope. If you decide to turn on a new lint rule, you usually expect to see warnings/errors. no-deprecated is a bad example here since it's included into recommended preset, however it should work fine with no-unsafe.. \ud83e\udd1d if you don't mind I'll request a code review for PR. @obartra I suppose we could close the issue since the requested changes were releases in v7.8.0.. The rule has been merged.. The rule is applicable for 16.3.0+ only now, good point.. Excluded the rule from the recommended for now. Would we like to track it somehow to turn on it in the next major release?. @EvHaus UNSAFE_ methods aren't deprecated, so no-deprecated rule isn't the right place for that. See discussion details #1750 (comment).. That's true, otherwise you cannot narrow the scope of the rule. Based on what I can see in the issue we wouldn't like to affect modules that aren't not related to React, wouldn't we?. @ljharb I'm a bit confused, should the following code be handled by the rule and considered as invalid?\njs\nfunction Foo() {\n   if (this.foo) {\n      something();\n   }\n   return null;\n}\nFor now it triggers lint errors, however the function isn't related to React and I suppose it shouldn't be considered as a component.. Thanks, I'll take a look. @ljharb I've created a separate PR #1989 to fix the particular issue with component detection for arrow functions inside a class field.\ncc @alexzherdev. @ljharb I've created a separate PR #1989 to fix the particular issue with component detection for arrow functions inside a class field.\ncc @alexzherdev. @ljharb Could we back to the example above:\njs\nfunction Foo() {\n   if (this.foo) {\n      something();\n   }\n   return null;\n}\nFoo can be a stateless React component, but it also can used as a constructor const f = new Foo(). It's not related to React, however there's no possibility to check it with static analysis. I'm thinking about adding an option to handle only modules with React import to prevent false positives. @ljharb Thoughts?. OK, let's say it takes some arguments:\njs\nfunction Foo({something}) {\n   if (this.bar) {\n      return something;\n   }\n   return null;\n}\nCan it be a component? There's no guarantee that it cannot be used as a component. It also can be used as a constructor.\nI suppose it can be beneficial to provide an option to ignore modules if there's no confidence that they have a React component. E.g. I wouldn't like to run the rule for the entire code base if I have thousands modules that aren't related to React (and there's no strict rule regarding placement React components in the file system -- feature based convention is used instead).\n. OK, here's a more realistic example:\n```js\nconst Placeholder = ({children}) => {\n    if (this.ready) {\n        return children;\n    }\n    return null;\n};\n``\nIs it not a component? I just replacedsomethingbychildrenandbarbyready`. \nI think if we could provide an option to just ignore such cases (it's turned off by default), it should allow to avoid possible confusion and make the rule more flexible.. > The majority case will be that it\u2019s trivial to apply React linting rules only to a React part of the codebase.\nI don't think that's always true, but I'll close PR for now, let's see if the community raise it again.. Fixed typo and added one more more test.. Fixed typo and added one more more test.. @ljharb A parent scope of arrow function can have FunctionDeclaration type. The check is required to detect parent function scope for arrow expressions properly. I've added a test to illustrate it.. @ljharb A parent scope of arrow function can have FunctionDeclaration type. The check is required to detect parent function scope for arrow expressions properly. I've added a test to illustrate it.. @ljharb PR doesn't cause any new errors for react/recommended preset, it disables linting of legacy lifecycle methods until it's decided which release deprecates them.\nTo allow developers to prevent using of unsafe methods in ^16.3.0 React versions, no-unsafe rule has been adjusted. The rule isn't in the recommended list.. I find it unlikely that no-unsafe rule is used without no-deprecated or code contains both legacy lifecycle methods and their aliases, however it can be theoretically. I could propose to split the PR to two:\n- the 1st includes disabling no-deprecated warnings (no breaking changes);\n- the 2nd PR will contain adjustments for no-unsafe (potential breaking changes)\nThoughts?. @ljharb There're no breaking changes in updated PR now.. @ljharb The breaking changes are hidden behind checkAliases option.. Could please point to an example of life cycle method in no-deprecated? I couldn't find any... . sure thing, see the updated tests. Could you take a look at the new message pattern?. Agree, in terms of consistency it would be better to deprecated them in favor of UNSAFE_ methods, it should allow to avoid confusion. @ljharb, does it sound reasonable to leave warnings with UNSAFE_ methods as new methods for now and deprecate them in 17.0.0?. Regarding the ignore list for that rule, I vote for adding a dedicated issue for further discussion. I could take a look at it. . @sahrens, legacy lifecycles (including componentWillReceiveProps) will continue to work until version 17, however you will see deprecation warnings for them. In version 17, it will still be possible to use them, but they will be aliased with an \u201cUNSAFE_\u201d, see details.. There're no deprecation warnings regarding using UNSAFE_ methods in strict mode, there is unsafe lifecycle methods warning: \n\nSo I'm not sure that no-deprecated is appropriate place for that (at least for now).\nI'm also not sure regarding strict-mode rule, I vote for adding no-unsafe rule that will be more specific. In the same way that it was done for no-string-refs rule -- using string ref API also cause warnings in strict mode. @ljharb, I could take a look at it if you find it reasonable.. >I don't think a \"no-unsafe\" rule makes sense when for users of React < 16, it is perfectly safe, and for users of React >= 17, the methods won't work at all.\nIt's not true, even in version 17, it will still be possible to use UNSAFE_ methods, see Component Lifecycle Changes.. Added details. Added a few more tests and position details for invalid cases. It seems that added position details causes issues in eslint 3, see TEST=true ESLINT=3 failed travis builds.. Added early termination for the rule.. Adjusted tests to support ESLint 3. I think yes, here's the proof. There's also no extra checks in the code above.. good catch, it should be FunctionExpression and FunctionDeclaration. I didn't find isFunction, only isFunctionLikeExpression in ast.js, so extracted some util functions for reusing in Components.js. I don't see any differences after removing require('babel-eslint'). See the proof #2004 . Also removed it here.. sure thing, fixed. Fixed. Fixed. It has to be semver-MINOR, otherwise it doesn't suppress deprecation warnings for the existing React versions (16.3.0 - 16.6.3) where these component lifecycle methods aren't deprecated yet.. I might have misunderstood your first comment. What semver did you mean? React or eslint-plugin-react? I agree that current PR can be considered as a patch of eslint-plugin-react.. fixed. ",
    "teameh": "Looks like it's coming up, PR is already merged: https://github.com/yannickcr/eslint-plugin-react/pull/1681 \nWhen will this land? . Since componentWillMount will disappear the state change done needs to go somewhere else. For this case, users can almost always use getDerivedStateFromProps to achieve this, but there will be some other cases where users need to call setState in componentDidMount or componentDidUpdate.\nFrom the blogpost:\n\n{...} In general, it is better to avoid cascading updates like this, but in some cases they are necessary (for example, if you need to position a tooltip after measuring the rendered DOM element). \n\nWhole post with more examples and best practices: https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html . haha yeah that's what I wrote, but the rest of docs we're like this so I changed it to be the same. I'll fix this. \n. Being a PureComponent does not make it a stateful component right? It just makes it benefit from shouldComponentUpdate\n. all the other methods say 'node'.. \n. Done (added to commit). \n. forgot to push.. done now \n. done\n. Check. And that's not possible because node is reassigned afterwards. Changed back tot original value. Thanks. \n. ",
    "pkuczynski": "When will this be released?. ",
    "dantman": "The PR also appears to test for the version of react to enable the new lifecycle hooks. However remember that some code uses react-lifecycles-compat to polyfill them on older versions.. The PR also appears to test for the version of react to enable the new lifecycle hooks. However remember that some code uses react-lifecycles-compat to polyfill them on older versions.. The fix for this appears to be extremely simple. react-in-jsx-scope.js just needs to apply itself to JSXOpeningFragment in addition to JSXOpeningElement.. ",
    "mrbinky3000": "Just wondering if this has been released yet?  If so, was there a regression?  I'm still seeing this error with the following packages:\n\n\"eslint\": \"^4.19.1\",\n\"eslint-config-airbnb\": \"^16.1.0\",\n\"eslint-plugin-react\": \"^7.8.2\",\n\"react\": \"^16.3.1\",\n\"react-dom\": \"^16.3.1\",\n\nExample of code:\n```javascript\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default class Example extends React.Component {\n  static propTypes = {\n    colorName: PropTypes.string.isRequired,\n    ext: PropTypes.string.isRequired,\n    // ... others\n  }\nstatic getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      colorName, ext,\n    } = nextProps;\n// ... code where colorName and ext are used\n\n}\n// ... rest of class\n}\n```\nerrors:\n11:16  error  'colorName' PropType is defined but prop is never used   react/no-unused-prop-types\n  12:10  error  'ext' PropType is defined but prop is never used         react/no-unused-prop-types\n. eslintrc file in the project root foler\n{\n    // this left intentionally blank\n}\neslintrc file in the folder that contains our react app\n{\n  \"extends\": [\n    \"airbnb\"\n  ],\n  \"settings\": {\n    \"react\": {\n      \"pragma\": \"React\",\n      \"version\": \"16.3\"\n    },\n  },\n  \"parser\": \"babel-eslint\",\n  \"env\": {\n    \"browser\": true,\n    \"node\": true\n  },\n  \"plugins\": [\n    \"react\",\n    \"jsx-a11y\"\n  ],\n  \"rules\" {\n     ... a few rule tweaks, none dealing with unused props.\n  }\n  \"globals\": {\n    \"expect\": true,\n    \"PRODUCTION\": true,\n    \"VERSION\": true,\n  }\n}. I ran eslint with debug.  Does Unknown node type \"ClassProperty\" help?\neslint:cli-engine Processing /Users/blah/project/component/Example.jsx +70ms\neslint:cli-engine Linting /Users/blah/project/component/Example.jsx +0ms\neslint:config Constructing config file hierarchy for /Users/blah/project/component +70ms\neslint:config Using .eslintrc and package.json files +0ms\neslint:config Using config from cache +2ms\neslint:linter Linting code for /Users/blah/project/component/Example.jsx (pass 1) +2ms\neslint:traverser Unknown node type \"ClassProperty\": Estimated visitor keys [\"type\",\"start\",\"end\",\"loc\",\"static\",\"computed\",\"key\",\"variance\",\"value\",\"range\"] +343ms\neslint:traverser Unknown node type \"ClassProperty\": Estimated visitor keys [\"type\",\"start\",\"end\",\"loc\",\"static\",\"computed\",\"key\",\"variance\",\"value\",\"range\"] +2ms\neslint:traverser Unknown node type \"ClassProperty\": Estimated visitor keys [\"type\",\"start\",\"end\",\"loc\",\"static\",\"computed\",\"key\",\"variance\",\"value\",\"range\"] +5ms\neslint:linter Generating fixed text for /Users/blah/project/component/Example.jsx (pass 1) +45ms. I ran eslint with debug.  Does Unknown node type \"ClassProperty\" help?\neslint:cli-engine Processing /Users/blah/project/component/Example.jsx +70ms\neslint:cli-engine Linting /Users/blah/project/component/Example.jsx +0ms\neslint:config Constructing config file hierarchy for /Users/blah/project/component +70ms\neslint:config Using .eslintrc and package.json files +0ms\neslint:config Using config from cache +2ms\neslint:linter Linting code for /Users/blah/project/component/Example.jsx (pass 1) +2ms\neslint:traverser Unknown node type \"ClassProperty\": Estimated visitor keys [\"type\",\"start\",\"end\",\"loc\",\"static\",\"computed\",\"key\",\"variance\",\"value\",\"range\"] +343ms\neslint:traverser Unknown node type \"ClassProperty\": Estimated visitor keys [\"type\",\"start\",\"end\",\"loc\",\"static\",\"computed\",\"key\",\"variance\",\"value\",\"range\"] +2ms\neslint:traverser Unknown node type \"ClassProperty\": Estimated visitor keys [\"type\",\"start\",\"end\",\"loc\",\"static\",\"computed\",\"key\",\"variance\",\"value\",\"range\"] +5ms\neslint:linter Generating fixed text for /Users/blah/project/component/Example.jsx (pass 1) +45ms. ",
    "canda": "I installed eslint-plugin-react@7.10.0 but I'm still seeing the same error.\nI have some props that I'm using on getDerivedStateFromProps but I still get the error react/no-unused-prop-types\nHow are you guys normally generate small environments to reproduce bugs?\nI tried unsuccesfully stackblitz and codesandbox, they didn't lint my code :/\nAny other tools you are using to share bugs?\n. ups!\nYeah, I didn't have the version set on my .eslintrc\nThanks @ljharb !. ups!\nYeah, I didn't have the version set on my .eslintrc\nThanks @ljharb !. ",
    "jayasme": "Still getting the error, I am using the latest version 7.11.1.. ",
    "kamataryo": "React seems to examine an element with whether it is a window.HTMLUnknownElement and depends on the browser which React is running on.\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/tests/ReactDOMComponent-test.js#L1033\nSome tagnames for SVG and MathML are hardcoded.\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/shared/isCustomComponent.js\nWe need an external DOM implementation like jsdom for this rule.. What we need is a function like ReactDOMFiberComponent.createElement which is on ReactDOM. Unfortunately this function hardcodes warning() and no export found on the built library.\nhttps://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMFiberComponent.js#L333\nIt seems that we can arrange the detection logic with 2 utility modules:\n- react-dom/src/shared/DOMNamespaces.js \n- react-dom/src/shared/isCustomComponent.js. ",
    "awthwathje": "Then I think it is good idea to explicitly mention this in the documentation.. Duh... Well, okay. Will do it.. ",
    "bumpah": "Sorry for not been to clear. \"componentWillMount\", \"componentWillUpdate\", \"componentWillReceiveProps\" will be deprecated life-cycle methods (React 16.3.0, introduced these and deprecation warnings are scheduled to come with 16.4.0), and replacements for those will be accordingly \"componentWillMount\" => \"componentDidMount\", \"componentWillUpdate\"\u200a => \"componentDidUpdate\" and \"componentWillReceiveProps\" => with new introduced \"getDerivedStateFromProps\". \nTherefore it's not relevant to have this rule and existing code bases should be migrated soon enough to match new life-cycles. https://medium.com/@baphemot/whats-new-in-react-16-3-d2c9b7b6193b here's short Medium posting according to changes.. Sorry for not been to clear. \"componentWillMount\", \"componentWillUpdate\", \"componentWillReceiveProps\" will be deprecated life-cycle methods (React 16.3.0, introduced these and deprecation warnings are scheduled to come with 16.4.0), and replacements for those will be accordingly \"componentWillMount\" => \"componentDidMount\", \"componentWillUpdate\"\u200a => \"componentDidUpdate\" and \"componentWillReceiveProps\" => with new introduced \"getDerivedStateFromProps\". \nTherefore it's not relevant to have this rule and existing code bases should be migrated soon enough to match new life-cycles. https://medium.com/@baphemot/whats-new-in-react-16-3-d2c9b7b6193b here's short Medium posting according to changes.. In my opinion most relevant use cases for this, would be async rendering or if you would like to meddle with refs.\nI don't see what is issue having setState in componentDidMount, except if you consider extra render as performance issue.. In my opinion most relevant use cases for this, would be async rendering or if you would like to meddle with refs.\nI don't see what is issue having setState in componentDidMount, except if you consider extra render as performance issue.. seems like 16.2.0 -version introduced improved support for fragments.\nhttps://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html. ",
    "yesmeck": "NVM.. NVM.. ",
    "brunodequeiroz": "Having the same issue here. ",
    "IgorMing": "Same issue here.. ",
    "bengeorge": "\nActually the rule did not detected the usage since you did not used the standard name for the getDerivedStateFromProps arguments (it should be nextProps and prevState instead of props and state).\n\nJust wondering where this 'standard' is defined ?  It seems the React docs use props and state.\nstatic getDerivedStateFromProps(props, state)\nhttps://reactjs.org/docs/react-component.html#static-getderivedstatefromprops. ",
    "Hal-pan": "eslint versions\njavascript\n{\n    \"eslint\": \"^5.7.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-config-prettier\": \"^3.1.0\",\n    \"eslint-import-resolver-webpack\": \"^0.10.1\",\n    \"eslint-loader\": \"^2.1.1\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-prettier\": \"^3.0.0\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n}\n## eslint config\n```javascript\n {\n  rules: {\n  },\n  parser: \"babel-eslint\",\n  env: {\n    es6: true,\n    node: true,\n    browser: true\n  },\n  parserOptions: {\n    ecmaVersion: 8,\n    sourceType: \"module\",\n    ecmaFeatures: {\n      jsx: true // enable JSX\n    }\n  },\n  extends: [\n    \"airbnb\",\n    \"eslint:recommended\",\n    \"plugin:react/recommended\",\n    \"plugin:jsx-a11y/recommended\",\n    \"plugin:prettier/recommended\"\n  ],\n  plugins: [\n    \"react\",\n    \"jsx-a11y\",\n    \"import\",\n    \"prettier\"\n  ],\n  settings: {\n    \"import/resolver\": {\n      webpack: {\n        config: \"./build/webpack.config.js\" \n      }\n    },\n    \"react\": {\n      \"pragma\": \"React\",\n      \"version\": \"16.5.2\"\n    },\n  },\n  root: true\n};\n```\n\n. ",
    "sag1v": "Fair enough, I didn't notice that one. . ",
    "alexhalf": "Has the same error with version 7.7.0. ```\n<XXXXX\n  ...other attrs\n  atr={ a && b(c) }\n\n...\n\n.\nconst Fail = () => {\n    const a = true;\n    return ;\n};\n\nconst Success = () => {\n    const a = true;\n    return ;\n};\n```. ",
    "guioconnor": "In my case the code was better after the fix, but I agree it should work.. ",
    "joe-denea": "I made an attempt to add this feature with #1771 \nWould love to hear any feedback/suggestions. @webOS101 The nomenclature is a bit strange on instance-variables as they actually explicitly exclude instance-methods even if instance-methods is not a specified rule. instance-variables only refers to non-static class property instantiations. Essentially the current behavior if you use class properties is for sort-comp to error out unless you define all your class properties after componentWillUnmount since they are caught by the everything-else rule, which is extremely strange, considering that they are essentially equivalent to this.myClassProp = 'my value' in the constructor, and are actually instantiated prior to the local constructor running (but after the super constructor). I will add an instance variable to the test case I added. Let me know if you still think I should separate the pull request though.. I don't believe that there is an auto fix in place for this rule unfortunately. I see your point that it could be separated out but I would consider the current behavior a bug and if someone wanted to keep the old behavior due to their code base having been written to that standard that person could copy the default ordering and remove instance-variables from it in their eslintrc. This option seems better to me than potentially exposing new users to broken behavior or requiring users to override the rule to get it into a non-broken state. Also the addition of instance-variables was extremely simple and could be removed very easily if necessary. Mostly I just didn't want to create a potentially broken commit. Just let me know if you want me to pull it out. Thanks for the feedback!. @ljharb Technically the current behavior catches both arrow functions and regular methods as instance-methods interchangeably, and, as I mentioned above, excludes arrow functions from instance-variables (regardless of whether any of these behaviors are desired). I can definitely add a prototype method version to my test as well though. I can also make all of the lifecycle methods prototype methods but technically they can use arrow function syntax and still work so it might be good to test both cases.. Does anyone know if this build issue with let being used in Node 4 is related to a change I made, possibly the use of ES6 class style React in a test without the babel-eslint plugin?. I saw that in the error but I wasn't sure if I could add 'use-strict' anywhere in order to fix the issue. I just attempted a fix by adding 'use-strict' before the test using an ES6 class on the default parser, but adding it there didn't change anything. I can try removing that test as well to see if the issue is actually related to it.. Ok it wasn't related to the test, and it in fact seems to be occurring on npm install inside of npm-cli.js.\n$ nvm install 4\nDownloading and installing node v4.9.1...\nDownloading https://nodejs.org/dist/v4.9.1/node-v4.9.1-linux-x64.tar.xz...\nComputing checksum with sha256sum\nChecksums matched!\nNow using node v4.9.1 (npm v2.15.11)\n$ node --version\nv4.9.1\n$ npm --version\n2.15.11\n$ nvm --version\n0.33.9\nbefore_install\n$ nvm install-latest-npm\nAttempting to upgrade to the latest working version of npm...\n* `npm` v2.x needs to first jump to the latest v2 to be able to upgrade further\n/home/travis/.nvm/versions/node/v4.9.1/bin/npm -> /home/travis/.nvm/versions/node/v4.9.1/lib/node_modules/npm/bin/npm-cli.js\nnpm@2.15.12 /home/travis/.nvm/versions/node/v4.9.1/lib/node_modules/npm\n* Installing latest `npm`; if this does not work on your node version, please report a bug!\n/home/travis/.nvm/versions/node/v4.9.1/bin/npx -> /home/travis/.nvm/versions/node/v4.9.1/lib/node_modules/npm/bin/npx-cli.js\n/home/travis/.nvm/versions/node/v4.9.1/bin/npm -> /home/travis/.nvm/versions/node/v4.9.1/lib/node_modules/npm/bin/npm-cli.js\nnpm@6.0.0 /home/travis/.nvm/versions/node/v4.9.1/lib/node_modules/npm\n* npm upgraded to: v\n$ npm install \n/home/travis/.nvm/versions/node/v4.9.1/lib/node_modules/npm/bin/npm-cli.js:79\n      let notifier = require('update-notifier')({pkg})\nThe above shows up in the logs on the Travis CI build, which makes it seem like NPM has pushed an update that has broken compatibility with Node 4. It seems like npm was upgraded to 2.15.12 here but it is hard tell since the \"upgraded to\" display is broken and has just printed v.\nAlso the AppVeyor build seems to be using npm@6.0.0, which was published 17 hours ago, and it failed on the same statement.. https://github.com/npm/npm/commit/834b46ff48ade4ab4e557566c10e83199d8778c6#diff-fff9baaea61bc82d9999fab7b965272c\nThis seems to be the commit that introduced the issue. I imagine this update has affected all of the automated builds in this repo since its release ~17 hours ago.. @ljharb Looks like AppVeyor is still using npm@6.0.0 and getting the error unfortunately.. There is a potential issue with including arrow functions in instance-variables with no separation, since the behavior of instance-variables in terms of class properties is equivalent to assignments of class properties in the constructor, and I believe should be placed directly after the constructor in the sort comp.\nIf we were to add arrow functions to this sorting group without the option to separate them, then we would essentially be forcing users to choose between the broken behavior of defining all class properties after componentWillUnmount, even though they are essentially an analogue for what is done in the constructor, or the broken behavior of defining all arrow function methods prior to the React lifecycle methods, which, while technically correct in terms of how arrow functions on the class are initialized and stored, would lead to cluttering of the component initialization code and a lack of separation between bound methods and class properties.\nIf we want to encourage users to separate their arrow function methods from other methods in order to inform developers that they are stored differently on instances, I would prefer it if we could create a separate group for arrow function methods (regardless of the name chosen) and place them either directly after componentWillUnmount or directly before render (since bound methods are most commonly used when methods need to be passed as props in React), and that we move instance-variables (or a new, separate group just for non-function class properties) directly below the constructor.\nWe could also note in the documentation that arrow function methods are created and stored separately on each instance of a class etc. if we want to educate developers about the difference.. Sorry about that, I should definitely have tested that.. Sorry about that, I should definitely have tested that.. I agree that it is strange to put it after componentWillUnmount. Where would you recommend putting it? Do you think it would make more sense directly after componentDidMount or directly before componentWillUnmount?\nI think part of the reason it was separated from the lifecycle and placed at the bottom in the docs is that it doesn't fall within the update cycle like the other methods between componentDidMount and componentWillUnmount.. I'm not sure, but you may even be able to throw an error it would catch from an unmounted child component, assuming you have an unhandled timeout somewhere. Putting componentDidCatch at the end does make it clear that it catches errors from the preceding lifecycle hooks, but then again it doesn't actually catch errors within the component it was defined inside of. I just went with the docs on this one originally since the existing ordering followed them, but I don't know whether they put it at the bottom to separate it documentation-wise or because they would actually suggest writing it at the bottom, since all of the examples I have seen have been error boundary components with no other lifecycle methods.. @yenshih That is not the ordering that the React documentation provides, as getDerivedStateFromProps is a lifecycle method, unlike other static methods and should be in a relevant position. Also statics only refers to the React.createClass statics object, and static-methods is actually where static methods on an ES6 class would be sorted to currently, which is before statics and actually lies at the very top of the component in the current default ordering.\n@otakustay I don't really see the similarity there, componentDidCatch can be called at any time based on child component errors, whereas componentDidUpdate is called after every update to the component and is part of the update lifecycle. Also componentDidCatch is not something that is supposed to be triggered during the normal flow of your app, and it is explicitly stated in the documentation that it should not be used for control flow, which is what the lifecycle represents. I believe that that is the reason why React documentation has componentDidCatch at the bottom, after the normal lifecycle methods.\nAt this point I think it would be best to just stick with the React documentation's ordering since that seems to be what the ordering here has been based on in the past for the default configuration. If that ordering is not someone's preference that person can choose to override the default configuration to suit his or her needs.. @otakustay \nI don't think it makes much sense for getDerivedStateFromProps to come after state since you would then be placing something that uses state before the definition of the initial state.\nAlso are you proposing that we sort all static-methods after defaultProps, place getDerivedStateFromProps before the constructor, and place instance-variables below state when it is defined as an instance variable?\nI would think that there would not be much of a use case for assigning an instance variable to the value of a state prop, but there could be one for assigning initial state based on a value stored in an instance variable, so I would prefer to put state after instance variables.\nI don't really have any opinion on where other static methods should be sorted to. However, I think getDerivedStateFromProps should be placed after the initial state definition since it is called after it and is used to modify it. Ultimately despite being a static method getDerivedStateFromProps is a part of the React update and component mount lifecycles, so it should be placed as such. I don't think that the distinction that it is static is really relevant here since it, like other lifecycle methods, should only be called by React itself anyway.. Since the super constructor is run prior to instance variable initialization, you can reference this.props in the state definition and write what you have above as:\nJavaScript\nstate = {\n  foo: 1,\n  bar: this.props.value,\n}\nThe code you wrote above with getDerivedStateFromProps is not equivalent to the code with constructor as it would update the state of bar when the value prop was updated.\ngetDerivedStateFromProps also receives the previous state as an argument, so it receives the initial state definition as an argument when the initial mount is going to be performed. It would therefore be backwards to the actual ordering of execution to place getDerivedStateFromProps prior to the initialization of state. That ordering would also be strange as defining instance variables and state as an instance variable is essentially shorthand for what is often done within a constructor in React, so you are proposing that getDerivedStateFromProps, a lifecycle method that is triggered on all component mounts and prop updates, be placed between an analogue for the constructor's functionality and the constructor itself, both of which are only run when the component is first initialized.. Whether or not those should be separated does not really impact that the initial state declaration happens before getDerivedStateFromProps is fired. In your own example, you would want to set previousPropValue in the initial state declaration based on this.props.value, or else the initial line of getDerivedStateFromProps is misleading, as it makes it seem like you are only updating on changes to the value prop (I assume you meant !==). I would write it like this:\n```JavaScript\nstate = {\n  value: this.props.value\n  bar: someExpensiveProcessing(this.props.value),\n}\nstatic getDerivedStateFromProps = (nextProps, prevState) => ({\n  ...(\n    (prevState.value !== nextProps.value) ?\n      {\n        value: nextProps.value,\n        bar: someExpensiveProcessing(nextProps.value),\n      } : {}\n  ),\n})\n```\nThis style may lead to some code duplication, but it ultimately makes the code clearer since the initial state is actually valid.\n\nAlso there is not necessarily any complete separation between the state here, as getDerivedStateFromProps receives the previous state, and could choose to only alter a state value if it hadn't been changed already, or a state value might need to be updated locally as well as on prop changes to keep it up to date. For instance:\n```JavaScript\nstate = {\n  toggle: this.props.isToggleOn,\n  countFromProps: this.props.extraCount,\n  count: 0,\n}\nstatic getDerivedStateFromProps = (nextProps, prevState) => ({\n  toggle: prevState.toggle || nextProps.isToggleOn,\n  count: (prevState.count - prevState.countFromProps) + nextProps.extraCount,\n})\nonClick = () => {\n  this.setState((prevState) => ({\n    toggle: true,\n    count: prevState.count + 1,\n  }))\n}\n```\n. To be clear I think there is also a use case for the initial state declaration as a set of defaults, like the following\n```JavaScript\nstate = {\n  localeString: '0',\n}\nstatic getDerivedStateFromProps = (nextProps, prevState) => ({\n  localeString: (\n    !Math.isNaN(Number(nextProps.number))\n    && nextProps.number.toLocaleString()\n  ) || prevState.localeString,\n})\n```\nsince this allows us to easily say that the component will convert the prop number to a locale string if it is a number and cache the value in state, and fall back to displaying the default of '0' or the last valid number that we received. In this case even if we wanted to avoid recalculating the value if the prop hadn't changed by caching the unmodified number prop in state for comparisons, we would have a sensible default of 0 for it since we wouldn't need to recalculate the default localeString if it were 0 initially. Also if there are nested objects in state that you spread out in getDerivedStateFromProps it would make sense to initialize the objects in the state declaration so that additional checks wouldn't have to be written and then executed on each update.\nIf there is a sensible value for the initial state that isn't derived from props and the code reads clearly I would prefer to avoid setting the initial state based off of props in general, since it is an antipattern as it does not respect prop changes after mounting. I just would not leave out required state values from the initial state declaration as it serves to annotate the expected state fields in a component as well as in some cases default values for those fields.\ngetDerivedStateFromProps remains a lifecycle method that is used for updates as well as mounting, and that is fired after the state initialization on the initial mount. If we were to place the state declaration below getDerivedStateFromProps in the code above it would appear as though localeString would come through as undefined in the initial prevState based on the ordering, which is not the case.. As far as I know I don't think I can test getDerivedStateFromProps with createReactClass. Is there a way I could specify a static method within the class body? I can write one for the other new methods though.. Ya, I just meant that writing it that way wouldn't test anything with this rule since it wouldn't be sorted within the component body. I checked earlier and if I remember correctly it doesn't get caught by the rule in that case (as one would expect) or in the case where it is placed within statics (which I am not sure is for declaring static methods anyway [since I don't have much experience with the React.createClass style of React]). I can just leave it out though, or preferably add it after the component definition like you mentioned to make sure that doesn't get caught as an error in future versions.. Oh, for some reason I didn't realize the default parser based tests had support for basic ES6 classes.. I changed the order in the documentation to match the actual order in the code, I didn't actually change the order in the code. Also the two are mutually exclusive in actual usage so testing them together would be strange, and I wouldn't be sure how to even write that test considering that state in this sense only exists as an instance variable on an ES6 class and getInitialState only exists as a createReactClass method.. We might want to just add indexes.length === 0 or something like that here so all named methods would be caught here rather than just getDerivedStateFromProps for future extensibility.. ",
    "richseviora": "Oh! I was bashing my head against ESLint b/c it wasn't outputting the deprecation messages on the lifecycle methods deprecated in 16.3. Just realized that master included unreleased changes :) . ",
    "kellyjosephprice": "Yea, I have no idea. But, I just assume it's better to be paranoid?. ",
    "browne0": "Just curious this was 16 days ago, when will the next release be coming out? \ud83d\ude04 . Just curious this was 16 days ago, when will the next release be coming out? \ud83d\ude04 . ",
    "LeonardoGentile": "CORRECTION: \nwhile typing and editing the component also this line:\nrender() {\n    const tabStore = this.props.tabStore;  // <== THIS LINE\n    return (\n      <div className={styles.whatever}> // CSS-Modules\n        <h4>I am The Index Page</h4>\n        <br/>\n        <h4>(tabStore.tabs): </h4>\n      </div>\n    );\n  }\nwill randomly trigger a false match.\nSimple example: if I remove the className attribute to the div\n// from this\n<div className={styles.whatever}> // CSS-Modules\n// to this:\n<div >\nThen the prop-type validation triggers a false match: 'tabStore is missing in props validation'\n. ",
    "deemoding": "In lib/rules/prefer-stateless-function.js line 374,I find this code\nJavaScript\nif (list[component].hasSCU && list[component].usePropsOrContext) {\n    continue;\n}\nBut,I find that list[component].usePropsOrContext === undefined ,so that the next code isn't skiped.\nSo what's the usage of list[component].usePropsOrContext?Can I delete  it? @yannickcr \n. ",
    "callumlocke": "I have the same problem. ignorePureComponents: true doesn't seem to do anything.\nDoesn't matter if I extend PureComponent or React.PureComponent.. I have the same problem. ignorePureComponents: true doesn't seem to do anything.\nDoesn't matter if I extend PureComponent or React.PureComponent.. ",
    "JavierLaguna": "I have the same problem. ignorePureComponents: true doesn't seem to do anything.\nDoesn't matter if I extend PureComponent or React.PureComponent.. ",
    "dimpiax": "As the option, if you are experimenting with views you can avoid this error writing:\n```\nrender() {\n  this.props; // declare this!\nreturn (Hello);\n}\n```. ",
    "FlaviooLima": "This bug need some attention :). ",
    "temowemo": "It looks like neither indent nor react/jsx-indent can perform the proper indentation in this case unless you wrap \"Plain Text\" in brackets and quotes like so:\nESLint Rules:\n\"react/jsx-one-expression-per-line\": \"error\",\n\"react/jsx-indent\": [\"error\", 2]\nOriginal code:\nconst something = () => (\n  <Text>{\"Plain text\"}</Text>\n)\nResult of eslint --fix:\nconst something = () => (\n  <Text>\n    {\"Plain text\"}\n  </Text>\n)\nSo while the react/jsx-one-expression-per-line rule should definitely not be expected to perform indentation, maybe react/jsx-indent should handle this indentation problem?. It looks like neither indent nor react/jsx-indent can perform the proper indentation in this case unless you wrap \"Plain Text\" in brackets and quotes like so:\nESLint Rules:\n\"react/jsx-one-expression-per-line\": \"error\",\n\"react/jsx-indent\": [\"error\", 2]\nOriginal code:\nconst something = () => (\n  <Text>{\"Plain text\"}</Text>\n)\nResult of eslint --fix:\nconst something = () => (\n  <Text>\n    {\"Plain text\"}\n  </Text>\n)\nSo while the react/jsx-one-expression-per-line rule should definitely not be expected to perform indentation, maybe react/jsx-indent should handle this indentation problem?. That sounds like a great idea to me! I would actually benefit from this option. I would do the honors, but unfortunately I do not feel comfortable submitting a PR as I have never done so, and I am not familiar with the procedure.. That sounds like a great idea to me! I would actually benefit from this option. I would do the honors, but unfortunately I do not feel comfortable submitting a PR as I have never done so, and I am not familiar with the procedure.. ",
    "peter-mouland": "Would it be easy to add an option to turn off this rule for plain text content?. There are 2 mistakes in the original PR!\nThanks for merging. ",
    "OverVlad": "@ljharb But this method (navigationOptions) created by react-navigation and i can't control what it passed to this method . @ljharb Similar problem with:\nrenderItem = ({ item, index }: { item: TraderType, index: number }) => <SocialTradersCard key={index} model={item} />;. @ljharb I understand that is it no-props, but when you use flow it's necessary to declare entry function types.\nhttps://gist.github.com/OverVlad/a11d62a965798ea3030769dedda59f7e. How can I use destructuring function params in Component methods if flow requires declaring types for each parameter?. I see that this problem only with external libs. @ljharb react-navigation and react-native-snap-carousel are occurs this error. ",
    "wcandillon": "if this.state is read, we should check if the state is initialized? . ",
    "pavlovanton": "Ok, sorry :-)\nBut, lint shouldn't return the error like in the point two above. I guess it should return the warning like this:\n89:94 error A space is required before closing bracket react/jsx-tag-spacing. Ok, sorry :-)\nBut, lint shouldn't return the error like in the point two above. I guess it should return the warning like this:\n89:94 error A space is required before closing bracket react/jsx-tag-spacing. I have eslint-plugin-react@7.7.0\nnpm ls returns\n\u251c\u2500\u2500 UNMET DEPENDENCY doctrine@^2.0.2\n\u251c\u2500\u2500 UNMET DEPENDENCY has@^1.0.1\n\u251c\u2500\u252c jsx-ast-utils@2.0.1\n\u2502 \u2514\u2500\u2500 UNMET DEPENDENCY array-includes@^3.0.3\n\u2514\u2500\u2500 UNMET DEPENDENCY prop-types@^15.6.0\nnpm ERR! missing: doctrine@^2.0.2, required by eslint-plugin-react@7.7.0\nnpm ERR! missing: has@^1.0.1, required by eslint-plugin-react@7.7.0\nnpm ERR! missing: prop-types@^15.6.0, required by eslint-plugin-react@7.7.0\nnpm ERR! missing: array-includes@^3.0.3, required by jsx-ast-utils@2.0.1. I have eslint-plugin-react@7.7.0\nnpm ls returns\n\u251c\u2500\u2500 UNMET DEPENDENCY doctrine@^2.0.2\n\u251c\u2500\u2500 UNMET DEPENDENCY has@^1.0.1\n\u251c\u2500\u252c jsx-ast-utils@2.0.1\n\u2502 \u2514\u2500\u2500 UNMET DEPENDENCY array-includes@^3.0.3\n\u2514\u2500\u2500 UNMET DEPENDENCY prop-types@^15.6.0\nnpm ERR! missing: doctrine@^2.0.2, required by eslint-plugin-react@7.7.0\nnpm ERR! missing: has@^1.0.1, required by eslint-plugin-react@7.7.0\nnpm ERR! missing: prop-types@^15.6.0, required by eslint-plugin-react@7.7.0\nnpm ERR! missing: array-includes@^3.0.3, required by jsx-ast-utils@2.0.1. ",
    "reergymerej": "https://github.com/yannickcr/eslint-plugin-react/commit/e4de3600c281c87bcb18d62c10ce279374ddcde4#diff-773de86741d8d58f3b917343e985eaf0R256 introduced getCommentsBefore which was dropped in eslint@4.0.0.\nDowngrading to eslint-plugin-react@7.6.0 bypasses the issue.  You could also upgrade to eslint@4.0.0.  \nIt looks like this commit should have also modified the peerDependency.  It now needs 4.0.0.\n. ",
    "jhicken": "@ljharb I'm not sure if that was a question or an answer or a possible solution. \nThat code you pasted does not currently work. Are you suggesting a change to make that work?\nWhy would the core indent rule need a special option?\nFor non jsx.. you can just use ignoreComments. And it works fine. There is no equivalent for jsx comments due to a comment actually being a child node evaulation. If jsx comments payed attention to ignoreComments for indentation and said ignore the parent node indentation.... That would work for me too.\nTo clarify a little bit I think this is a discrepancy between regular javascript comments and how jsx comments have to be embedded in jsx.. @ljharb I'm not sure if that was a question or an answer or a possible solution. \nThat code you pasted does not currently work. Are you suggesting a change to make that work?\nWhy would the core indent rule need a special option?\nFor non jsx.. you can just use ignoreComments. And it works fine. There is no equivalent for jsx comments due to a comment actually being a child node evaulation. If jsx comments payed attention to ignoreComments for indentation and said ignore the parent node indentation.... That would work for me too.\nTo clarify a little bit I think this is a discrepancy between regular javascript comments and how jsx comments have to be embedded in jsx.. If I understand correctly your asking if I can accomplish this with syntax highlighting. If thats whats your asking no I cannot.. due to my linter being connected to my build process. So when linting fails the build fails.\nI could make some sort of syntax highlighter and force the comments to start and end at the current indentation. But I not everybody on my team uses the same editors. So thats probably not a good option. And If I where to do that I would just prefer to create my own eslint plugin. \nHas the ignoreComments ignoring a jsx comments parent thing that i described been explored? . If I understand correctly your asking if I can accomplish this with syntax highlighting. If thats whats your asking no I cannot.. due to my linter being connected to my build process. So when linting fails the build fails.\nI could make some sort of syntax highlighter and force the comments to start and end at the current indentation. But I not everybody on my team uses the same editors. So thats probably not a good option. And If I where to do that I would just prefer to create my own eslint plugin. \nHas the ignoreComments ignoring a jsx comments parent thing that i described been explored? . I disagree with your first comment. They are two concerns... and they are closely related. If code quality does not meet team standards then it should not continue to be built in the CI process to go to production.\nThat doesn't really matter though. Different teams will do what works for them.\nI may give it a look.. but it wont be for a few weeks. busy busy.. I disagree with your first comment. They are two concerns... and they are closely related. If code quality does not meet team standards then it should not continue to be built in the CI process to go to production.\nThat doesn't really matter though. Different teams will do what works for them.\nI may give it a look.. but it wont be for a few weeks. busy busy.. ",
    "PezCoder": "My eslint was not running on jsx file.. The rule is working as expected. Closing this. ",
    "omarchehab98": "Same with node version 7 and node version 8 and eslint 4.19.1. ",
    "fcastilloec": "I'm still seeing this error when using eslint-plugin-react v7.8.2 with eslint v4.19.1, it supposed to have been fixed with v7.8.1. Here's the output I see:\n[Error - 17:34:55] ESLint stack trace:\n[Error - 17:34:55] TypeError: Cannot read property 'split' of undefined\n    at test (.../node_modules/eslint-plugin-react/lib/util/version.js:30:24)\n    at Object.testReactVersion (.../node_modules/eslint-plugin-react/lib/util/version.js:39:10)\n    at isDeprecated (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:104:21)\n    at checkDeprecation (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:109:12)\n    at methods.forEach.method (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:162:35)\n    at Array.forEach (native)\n    at Object.checkLifeCycleMethods (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:162:17)\n    at updatedRuleInstructions.(anonymous function) (.../node_modules/eslint-plugin-react/lib/util/Components.js:698:75)\n    at listeners.(anonymous function).forEach.listener (.../node_modules/eslint/lib/util/safe-emitter.js:47:58)\n    at Array.forEach (native). I'm still seeing this error when using eslint-plugin-react v7.8.2 with eslint v4.19.1, it supposed to have been fixed with v7.8.1. Here's the output I see:\n[Error - 17:34:55] ESLint stack trace:\n[Error - 17:34:55] TypeError: Cannot read property 'split' of undefined\n    at test (.../node_modules/eslint-plugin-react/lib/util/version.js:30:24)\n    at Object.testReactVersion (.../node_modules/eslint-plugin-react/lib/util/version.js:39:10)\n    at isDeprecated (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:104:21)\n    at checkDeprecation (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:109:12)\n    at methods.forEach.method (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:162:35)\n    at Array.forEach (native)\n    at Object.checkLifeCycleMethods (.../node_modules/eslint-plugin-react/lib/rules/no-deprecated.js:162:17)\n    at updatedRuleInstructions.(anonymous function) (.../node_modules/eslint-plugin-react/lib/util/Components.js:698:75)\n    at listeners.(anonymous function).forEach.listener (.../node_modules/eslint/lib/util/safe-emitter.js:47:58)\n    at Array.forEach (native). ",
    "jethrolarson": "I'm getting this one again with \n\"eslint\": \"5.11.1\",\n    \"eslint-plugin-react\": \"7.12.1\",\nSetting this in .eslintrc.yaml is my work-around\n    react/forbid-prop-types: 0\nST:\n```\n\nnode ./node_modules/eslint/bin/eslint.js --ext .js,.jsx .\nTypeError: Cannot read property 'split' of undefined\n    at Object.isPropWrapperFunction (/project/node_modules/eslint-plugin-react/lib/util/propWrapper.js:12:26)\n    at checkNode (/project/node_modules/eslint-plugin-react/lib/rules/forbid-prop-types.js:128:31)\n    at MemberExpression (/project/node_modules/eslint-plugin-react/lib/rules/forbid-prop-types.js:158:9)\n    at listeners.(anonymous function).forEach.listener (/project/node_modules/eslint/lib/util/safe-emitter.js:45:58)\n    at Array.forEach ()\n    at Object.emit (/project/node_modules/eslint/lib/util/safe-emitter.js:45:38)\n    at NodeEventGenerator.applySelector (/project/node_modules/eslint/lib/util/node-event-generator.js:251:26)\n    at NodeEventGenerator.applySelectors (/project/node_modules/eslint/lib/util/node-event-generator.js:280:22)\n    at NodeEventGenerator.enterNode (/project/node_modules/eslint/lib/util/node-event-generator.js:294:14)\n    at CodePathAnalyzer.enterNode (/project/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:632:23)\n. done. I'm also getting this with latest\n    \"eslint\": \"5.11.1\",\n    \"eslint-plugin-react\": \"7.12.1\",\n```\n\nSetting this in .eslintrc.yaml is my work-around\n    react/forbid-prop-types: 0\nST:\n```\n\nnode ./node_modules/eslint/bin/eslint.js --ext .js,.jsx .\nTypeError: Cannot read property 'split' of undefined\n    at Object.isPropWrapperFunction (/project/node_modules/eslint-plugin-react/lib/util/propWrapper.js:12:26)\n    at checkNode (/project/node_modules/eslint-plugin-react/lib/rules/forbid-prop-types.js:128:31)\n    at MemberExpression (/project/node_modules/eslint-plugin-react/lib/rules/forbid-prop-types.js:158:9)\n    at listeners.(anonymous function).forEach.listener (/project/node_modules/eslint/lib/util/safe-emitter.js:45:58)\n    at Array.forEach ()\n    at Object.emit (/project/node_modules/eslint/lib/util/safe-emitter.js:45:38)\n    at NodeEventGenerator.applySelector (/project/node_modules/eslint/lib/util/node-event-generator.js:251:26)\n    at NodeEventGenerator.applySelectors (/project/node_modules/eslint/lib/util/node-event-generator.js:280:22)\n    at NodeEventGenerator.enterNode (/project/node_modules/eslint/lib/util/node-event-generator.js:294:14)\n    at CodePathAnalyzer.enterNode (/project/node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:632:23)\n. Stack trace doesn't say where the actual problem is, so I'm not sure. Code is proprietary so I can't just share the project.. File with error (i think):js\nHeroTeaserList.propTypes = Object.assign({\n    heroIndex: PropTypes.number,\n    preview: PropTypes.bool,\n}, componentApi, teaserListProps);\nin another filejs\nexport const componentConfiguration = {\n  childComponentMapping: objectOf(string),\n  componentConfig: object,              \n  componentInstanceId: string,          \n  componentType: string,                \n  dataType: string,                     \n  filter: shape(TemplateFilter),        \n  filterVersionSetUuid: string,         \n  teasers: arrayOf(shape(TeaserContent)), \n  title: string,                        \n  titleOverride: node,                  \n  uuid: string.isRequired,              \n  visibleCount: number,                 \n  epgUuid: string,                      \n  readOnly: bool,                       \n};\n\nexport const componentApi = Object.assign({\n  getComponent: func.isRequired,\n  onNavigation: func,\n  onConfigurationChange: func,\n}, componentConfiguration);\nanother file\nexport const teaserListProps = {\n  'componentInstanceId': string,\n  'title':               string.isRequired,\n  'uuid':                string.isRequired,\n  'data':                object,\n  'listSize':            number,\n  'priority':            number,\n  'teasers':             arrayOf(shape(teaserProps)).isRequired,\n  'visibleCount':        number,\n};\n```\n. ",
    "DylanVann": "This bug is in 7.12.3. Issue should be re-opened.. @ljharb Awesome, and it has a test too \ud83d\ude04 . Thank you for letting me know. ",
    "shockey": "Thanks @ljharb, I wasn't aware of the pragma setting!\nFrom my perspective, having my linter (and therefore, my build) break due to a changing default in this plugin was not a fun thing to discover. I do see that the plugin documents its changing default React target version (React version, default to the latest React stable release). \nPerhaps a warning if a pragma is not present would provide a better experience than finding out the hard way when something like this happens?. ",
    "maaydin": "We have faced same error messages with react 16.2. Adding react version to .eslintrc file fixed the problem.\n{\n...\n  \"settings\": {\n    \"react\": {\n      \"version\": \"16.2.0\"\n    },\n  }\n...\n}. ",
    "lynxtaa": "@ljharb,\nhttps://pastebin.com/rrpxcAhu. Still the same issue with specified pragma.\nExample component Test.jsx:\n```jsx\nimport React from 'react'\nclass Test extends React.Component {\n    static getDerivedStateFromProps() {\n        return null\n    }\nconstructor(props) {\n    super(props)\n    this.state = { test: 'test' }\n}\n\nrender() {\n    return this.state.test\n}\n\n}\nexport default Test\n```\nReact 16.3.2. . No warning. But i should get \"react/sort-comp\" warning according to this https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md \ngetDerivedStateFromProps should be declared after constructor.. Static method declarations should be on top but it's not the case for getDerivedStateFromProps.\nIt was done that way because getDerivedStateFromProps is a lifecycle method (according to current rule description https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md#rule-details).. Thanks, checking for indexes.length === 0 will do the job. Fixed. ",
    "edmorley": "This appears to have caused #1821. Any ideas as to how to fix that case?. This appears to have caused #1821. Any ideas as to how to fix that case?. ",
    "markdemich": "The way it is now, this is requiring us to put static methods in the middle of other methods.  That can't be right, can it?  It's breaking all our builds.. ",
    "redbmk": "I ran into a similar problem, but I found it's OK with props as long as they aren't destructured, even though it prefers destructuring.\nThis isn't a fix (although it could be a workaround), but might help someone diagnose the bug.\ne.g.\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default class Example extends React.Component {\n  static propTypes = {\n    colorName: PropTypes.string.isRequired,\n    ext: PropTypes.string.isRequired,\n    // ... others\n  }\nstatic getDerivedStateFromProps(nextProps, prevState) {\n    const colorName = nextProps.colorName;\n    const ext = nextProps.ext;\n// ... code where colorName and ext are used\n\n}\n// ... rest of class\n}\n```\nshould get rid of the warning, but would introduce Use object destructuring. [Error prefer-destructuring].. I ran into a similar problem, but I found it's OK with props as long as they aren't destructured, even though it prefers destructuring.\nThis isn't a fix (although it could be a workaround), but might help someone diagnose the bug.\ne.g.\n```\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default class Example extends React.Component {\n  static propTypes = {\n    colorName: PropTypes.string.isRequired,\n    ext: PropTypes.string.isRequired,\n    // ... others\n  }\nstatic getDerivedStateFromProps(nextProps, prevState) {\n    const colorName = nextProps.colorName;\n    const ext = nextProps.ext;\n// ... code where colorName and ext are used\n\n}\n// ... rest of class\n}\n```\nshould get rid of the warning, but would introduce Use object destructuring. [Error prefer-destructuring].. ",
    "hornta": "I can not reproduce this with the latest version. @mrbinky3000 @redbmk . Yes. I can implement displayName and contextTypes as well.\nCurrently I have named the rule use-static-proptypes. But I don't really think that is a good name since it also incorporates defaultProps, and now, contextTypes and displayName.\nAnd having one rule for each feels like it would be a bit tedious.\nuse-static-proptypes\nuse-static-defaultprops\nuse-static-displayname\nuse-static-contexttypes\nDo you have any name suggestions?\n . Sounds good!\nSo having \"always\" set for \"react/component-static-property-style\" forbids object property notation style and forces you to provide them as static class properties?. No I have not. You can give it a go :-). @jseminck Oh yes of course. Thank you. I'll try to cover that aswell.. @jseminck I've updated this PR with React.createElement. \nI've also managed to get 100% coverage in this rule \ud83d\udc4d . > @hornta would you mind checking the \"allow edits\" checkbox on the right hand side of the PR?\nDone. I totally forgot this one! :fearful: . I can confirm this works in the latest release 7.11.0. 16.3.1. ",
    "noygal": "Can reproduce on version - 7.9.1\n```\nclass Test extends React.Component {\n  renderFunc ({x} = this.props) {\n    return (\n      \n        {x}\n      \n    )\n  }\n  render () {\n    return (\n      \n        {this.renderFunc()}\n      \n    )\n  }\n}\nTest.propTypes = {\n  x: PropTypes.string.isRequired\n}\n```\nI'm getting the error:\n[eslint] 'x' PropType is defined but prop is never used (react/no-unused-prop-types)\nEdit:\nI just opened the latest issue with false positive on props, but now I actually see that the issue is about life cycle functions.\nNon the less, I think it's a general destructuring problem as my example shows.. thanks @ljharb , I should have search the docs :). ",
    "peteruithoven": "\nclass fields should never have arrow functions\n\nCould you add some argumentation?\nI did just learn that it impacts performance, inheritance and mockability:\nhttps://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1. ",
    "milesj": "I'll try and double check JS only files, will be a bit tough.. ",
    "offero": "Why is that preferred?. ",
    "erfanio": "Agreed. 99% of the time you'd want a stateless component instead of a function anyway, so disallowing it would make sense.. ",
    "thers": "Yes, I am using flow, and that is indeed unrelated as it crashes no matter if this line present or not.. ",
    "maerzhase": "thats the rule config\nrules: {\n    'react/jsx-filename-extension': [\n      'warn',\n      {\n        extensions: [\n          '.js',\n          '.jsx',\n        ],\n      },\n    ],\n    'no-multi-spaces': [\n      'error',\n      {\n        exceptions: {\n          ImportDeclaration: true,\n          VariableDeclarator: true,\n        },\n      },\n    ],\n    'no-underscore-dangle': 'off',\n    'react/forbid-prop-types': 'off',\n    'react/no-unused-state': 'warn',\n    'no-param-reassign': [\n      'error',\n      {\n        props: false,\n      },\n    ],\n    'class-methods-use-this': 'off',\n    'max-len': 'off',\n    'jsx-a11y/no-static-element-interactions': 'off',\n    'react/no-unused-prop-types': 'off',\n  },\ni will dig inside a bit later aswell. i thought it was directly related to the last update. because freezing to 7.9.0 makes the error disappear. but of course it could be related to a combination with eslint-plugin-import and eslint-plugin-jsx-a11y. sorry...\nentire config is this\nmodule.exports = {\n  parser: 'babel-eslint',\n  extends: 'airbnb',\n  rules: {\n    'react/jsx-filename-extension': [\n      'warn',\n      {\n        extensions: [\n          '.js',\n          '.jsx',\n        ],\n      },\n    ],\n    'no-multi-spaces': [\n      'error',\n      {\n        exceptions: {\n          ImportDeclaration: true,\n          VariableDeclarator: true,\n        },\n      },\n    ],\n    'no-underscore-dangle': 'off',\n    'react/forbid-prop-types': 'off',\n    'react/no-unused-state': 'warn',\n    'no-param-reassign': [\n      'error',\n      {\n        props: false,\n      },\n    ],\n    'class-methods-use-this': 'off',\n    'max-len': 'off',\n    'jsx-a11y/no-static-element-interactions': 'off',\n    'react/no-unused-prop-types': 'off',\n  },\n};. from my current test i can say that its related to add the async to the static function.\ni will setup a test repo to reproduce the problem.. ok. i could reproduce it in a clean project but it seems not to be related to eslint-plugin-react but the airbnb config. the error was not thrown until i added the airbnb config to the project. so i will close the issue and checkout whats going on with the airbnb config.\nthanks anyway!. thanks for that! . tbh we are no longer using airbnb config because we didn\u2019t like some rules and use our own custome config for projects. are you using airbnb config aswell?. ",
    "nwalters512": "@maerzhase did you ever figure this out? I'm hitting the same problem.. ",
    "krawaller": "\n(@fatfisz) The rationale for this is that it's easy to forget to call super with props\n\nNote that there is a rule to catch omitted super calls.. That's true. Issue #626 in this repo suggests such a rule, but it hasn't happened yet.. Just to inject some energy, this looks sweet! Good work @lukyth! :)  . I managed to miss this issue, and implemented a rule as suggested here by @cburgmer in PR #2077.\nIt protects solely against using the truthiness of a length prop as guard, which as @ljharb said in the PR might be too narrow to be useful.\nI don\u2019t see an immediately obvious way of expanding the rule to cover more numeric guard cases, but my gut feeling is that the .length case is common enough to justify the rule.\nThen again, it might be that I want to believe that just so I\u2019m not alone in being a schmuck (did exactly this mistake in production code twice).... Hmm. Interesting. I was focused on the fact that implicit length truthiness is especially dangerous in JSX, earning me the title \u201d0 of the week\u201d on the main company whiteboard.\n\nBut I see your point - you\u2019ll live a happier life if you never rely on it, jsx or not.\nStill, in most other environments it\u2019s more arrogant than unsafe to do it, no? There I\u2019d classify this rule as \u201dcoding style\u201d, while in JSX it\u2019s a \u201dpotential error\u201d (actually pretty much a guaranteed one).\n@ljharb, would you consider this rule if we add a \u201dforbidEverywhere\u201d option, disallowing boolean casting of dot length anywhere as per the airbnb styleguide?\n. Another way of making the rule more useful could be to allow the user to add props other than .length to also be included in the check. Maybe I'm using lots of Set:s in my codebase and could thus add .size, for example.. A linter would've saved me, twice! But then again, so would writing better code. :)\nI agree there's no guarantee, but I think the argument is that there doesn't need to be, and that erroneous casting of .length is common enough to warrant a rule.\nAlso, protecting against this particular mistake with tests seems a bit off - would you really write a test to see that you didn't render a zero?\nBut I'm liking the idea of enforcing the AirBnB rule of never casting length to boolean, and so we'll probably widen the rule to do that and deploy it to our linting suite outside of the React package.\nThank you for the input!\n. @ljharb: I want to make a last attempt at convincing you! \nIn the 2.5 months passed I've seen the arr.length && <Something/> mistake thrice more in the wild. Yes, a rule that could catch all numeric guards would be better, and a rule that could catch all non-boolean guards would be better still. But I think the flawed arr.length usage is common enough to warrant a dedicated rule. It might not be a broad rule, but I argue it'll save more than enough grief to pay for the inclusion.\nTo me the bottom line is this: we have a very common pattern in normal JS that might be frowned upon by some, but it is still widely used and perfectly safe. In JSX it suddenly isn't safe anymore.\nSo yes, you could argue that users should use a general explicit-length-check rule like the one linked by @cburgmer above. But to me that rule enforces an opinion, which falls in a different category. The proposed jsx rule catches the usage in JSX specifically, which is always a mistake. . Doh, apologies, managed to completely miss that issue. Will continue discussion there!. ",
    "lukyth": "My employer happens to need this kind of rule as well. Is it okay for me to try working on this?\nMy idea is that the rule name is state-in-constructor. It could receive an option, always or never (default is always). If it's always, state initialization should be in a constructor. If it's never, it should be in a class property.\nThe reason I omitted no in the rule name is because no-state-in-constructor with an option never is a double negation and it seems confusing to me.. Yeah. Let me try this out. I'll open a PR once I got something.. @alexzherdev @ljharb Thank you so much for your reviews! I've addressed all of them with these commits 81d0e8b...b1024c0. Could you please check them out?\nI also removed some test cases which I think are redundant (81d0e8b). I'm not sure if that's the right call. If you guys don't think so then I can bring them back.. Anything I can do to get this merged?. Anything I can do to get this merged?. @EvHaus I've added this rule to the list in README.md (9415814). Sorry it took me so long. I just saw your comment here.. ",
    "romeovs": "I'm talking about the use case where it's not isRequired and absence implicitly means false.\nConsider: \n<Button primary />\n<Button />\n\nand then the defaultProp absolutely should specify false so that you're being explicit with your types.\n\nI'm asking for a flag to allow users to decide for themselves wether or not they agree with this or not.. ",
    "BrodaNoel": "What if I have:\n```js\nstate = {};\nconstructor(props) {\n    super(props);\n// No warning here\nthis.state.randomId = Math.round(Math.random() * 1000000);\n\nthis.props.tables.forEach((table, i) => {\n  if (table.isOpen) {\n    // Here we have a warning\n    this.state[`table${i}Shown`] = true;\n  }\n});\n\n}\n```. Actually there should not be warnings in any of both places. The \"direct state mutation\" is able in any part of the constructor (sync). Ok, so, clearly there is something that I'm missing. \nCould you explain to me why I see a warning inside the forEach?\nThanks\n\nEl 7 jun 2018, a las 02:44, Jordan Harband notifications@github.com escribi\u00f3:\nThe rule only allows assigning this.state in the constructor. It is never OK to mutate it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Actually, I'm not seen and I should not see a warning in the randomId line.\nThe state can be manipulated in the constructor as much as we want. It' doesn't affect the React state.\n\nI got your point after checking what you said in https://github.com/yannickcr/eslint-plugin-react/issues/832\nI disagree about warning in any place of the constructor. The react-state doesn't know anything about this.state var yet. It's just a var manipulation, not a \"React State manipulation\". But, anyways... Bug reported.\nThank you a lot for your time.. ",
    "nuragic": "Yup, unfortunately this one would be a breaking change. Maybe a codemod could also be provided in order to update?. Maybe we could start adding a new (optional for now) group like e.g. class-fields, which would decouple class fields from everything-else; but what about moving state?\nI imagine having something like this in my configuration:\njs\n{\n  order: [\n    'static-methods',\n    'lifecycle',\n    'everything-else',\n    'render'\n  ],\n  groups: {\n    'class-fields': [\n      'private-fields',\n      'public-fields': [\n        '*',  // i.e. any public field\n        'state', // <<<<< moved here\n       ]\n    ],\n    lifecycle: [\n      'displayName',\n      'propTypes',\n      'contextTypes',\n      'childContextTypes',\n      'mixins',\n      'statics',\n      'defaultProps',\n      'class-fields' // <<<<< would this be possible right now?\n      'constructor',\n      'getDefaultProps',\n      'getInitialState',\n      'getChildContext',\n      'getDerivedStateFromProps',\n      'componentWillMount',\n      'UNSAFE_componentWillMount',\n      'componentDidMount',\n      'componentWillReceiveProps',\n      'UNSAFE_componentWillReceiveProps',\n      'shouldComponentUpdate',\n      'componentWillUpdate',\n      'UNSAFE_componentWillUpdate',\n      'getSnapshotBeforeUpdate',\n      'componentDidUpdate',\n      'componentDidCatch',\n      'componentWillUnmount'\n    ]\n  }\n}\nAs we can see the lifecycle group is misleading cause it's grouping more stuff than React component's lifecycle, but that must be solved in a major release. With the above config, people could decide to override it and put the class-field whenever they want... do you see any flaws? :). Ok, I'll try to make a PR then!. \u2139\ufe0f I can't really find the time at the moment for this PR, sorry! Hopefully next week(s)... \ud83d\ude1e Anyway, if someone would like to make an intent in the meantime, it'll be very welcome! \ud83d\ude04 \ud83e\udd17 . ",
    "dimitarnestorov": "B is only exposed to A. And I modified the snippet to include an export. A is used by the outside world.. Doesn't work, probably because my environment is react-native. Actually I don't think passing a component instance to a child is a good practice. I'm even thinking of a rule that throws when such behaviour is present.\nSwitching to PropTypes.shape and closing.. Decided to make a simple script that publishes every commit to master on npm https://www.npmjs.com/package/eslint-plugin-react-nightly\nSwitching to it requires you to:\n1. npm install --save-dev eslint-plugin-react-nightly\n2. Switch from react to react-nightly in your plugins section of your ESLint config\n3. And the hideous part, find and replace every rule from react/ to react-nightly/\nHope that this is helpful to anyone.\nImprovements can be requested at the repo https://github.com/dimitarnestorov/eslint-plugin-react-nightly-script. 5 minutes after posting I realized that if you want to get the latest commit in your dependencies all you have to do is change your package.json to point to the repo like in the screenshot below and running npm install.\n\nShould I unpublish the package?. Done. ",
    "nosilleg": "I'm creating a PR. The fix is a bit more involved than a revert or added RegExp check.. The documentation isn't clear on expected behaviour. Does static trump all else? If something matches a RegExp and is static, does it go in the RegExp or static group? Does the order of rules impact this? (If RegExp is first, then it's RegExp, and if static is first then it's static?). If static-methods isn't included, then should it match the RegExp or everything-else?. The way that I'm implementing it at the moment is group order based. It's not a massive change to make statics the priority, but as you say, the API isn't flexible enough to cover all potential desired behaviours.. Possible change of plan. I just hit the test that says that if a method matches two RegExps then it can be placed in either location.\nShould this be the case for everything?\nThat would mean that static getDerivedStateFromProps could either he with the lifecycle methods or with the statics. \nThe example in the issue description could have the methods with the statics, or with the RegExps.\nThis is the most flexible option, but there will be people who do not like that flexibility.. I have no doubt that havinggDDFP in lifecycle is a valid view. I'm willing to bet others think having it with statics is preferable. The precedence set with RegExps when this rule was first created is that things can appear in any matching group.\nMaking it more strict would require going back to your original PR commit and having explicit exceptions to rules. It may be the case that my PR will be a partial revert of your PR in your eyes, since it's less strict.\nAllowing static methods/properties to be in multiple places fixes two additional issues. #1838 and #1808 \nI'll push the PR and see what the feedback is. It should be done shortly after adding a test for an undiscovered bug that my changes fix.  (While hopefully not breaking things we don't have tests for.). I have no doubt that havinggDDFP in lifecycle is a valid view. I'm willing to bet others think having it with statics is preferable. The precedence set with RegExps when this rule was first created is that things can appear in any matching group.\nMaking it more strict would require going back to your original PR commit and having explicit exceptions to rules. It may be the case that my PR will be a partial revert of your PR in your eyes, since it's less strict.\nAllowing static methods/properties to be in multiple places fixes two additional issues. #1838 and #1808 \nI'll push the PR and see what the feedback is. It should be done shortly after adding a test for an undiscovered bug that my changes fix.  (While hopefully not breaking things we don't have tests for.). I'm just wanted to calibrate my expectations with this PR.  Is there a rough estimate on when it will be merged/released?  Is there anything more I can do to help progress it?. It doesn't have to be a switch.  \nGenerally switch is considered to be more readable and more performant than a chain of if/elsees.  For me, the potential conciseness of the if/else chain wouldn't help with readability or maintainability; which would be my main concern.\nI don't know the performance characteristics for this in JavaScript, but this article would indicate that it's true for JavaScript as well.\nThe fallthrough block of lifecycle methods is the most verbose part of this.  That could be changed to be a part of the default block, which would allow for the shared array of lifecycle method names (mentioned in another comment) with an .includes(currentGroup).  I would say that this is less \"pure\" than the code as it stands, but not enough to block the suggestion.\nOf course, you may just want it to be all if/else.\nLet me know which option you want to go with.. I will update this to be a forEach (since we don't care about the resulting array that a map creates).\nI had considered making it a forEach, but reading the code I had assumed that fors were preferable since there's a lot of places that forEach could be used but is not.. I think this is a sane suggestion, but...\nIt only works if you want to move to one of the two options above where we remove the lifecycle switch block (or switch completely).  \nAnd there is code that can make use of the shared array.  (After a quick and rudimentary search I'm not seeing any other candidate code, but it may exist.). I will update to be if/else chain.\nI would be remiss if I didn't point out that your opinion goes against the popular opinion.  e.g. why switch case and not if else if  So while this change may be more readable and maintainable for you, it potentially wont be for the masses.. Done.. Hi Jordan. It's a shame we have to belabour this point.\nI didn't provide JavaScript specific discussions because you didn't specifically mention JavaScript in your opinion. Taking that into consideration is it fair to read your original statement as:\n\nI definitely disagree; I consider switch to almost always be less readable than an alternative, and certainly less maintainable for JavaScript. I agree that it is more readable, maintainable, and performant for other languages. This is the overwhelming shared opinion within the JavaScript community, despite the similarities in syntax between JavaScript and other languages, and the similar performance implications with other languages.\n\nIf so, can you please provide references as I'd like to be following community best practices.. I disagree with this.  In my opinion this makes sense in the config code, but not in the rule implementation itself.\nIf someone has their config set up so that it includes the UNSAFE_ methods and they have the UNSAFE_ methods in their component then eslint should enforce that config no matter which version of React they are using.. You mention styleguides, but only link to one person opinion pieces.\nThe styleguides themselves make no claims that switch should be avoided and instead encourage sane syntax as per every other language that has switch statements.\nThe opinion pieces that you link to make the main complaints that switch doesn't follow their preferred programming paradigm. I.e. it isn't OO enough (very appropriate for a 2010 opinion piece.), or not functional enough (the new hotness). JavaScript is not a single paradigm language.\nYou say that JSLint has discourage the use of switch since the 90s, but considering it was created in 2002, and Crockford himself doesn't advocate avoiding switch I'm not sure what to make of your claims.\nOthers stating that premature deoptimisation is preferable to using using the actual features of a language so that they can pretend it's a different language doesn't seem rational to me. Using JavaScript as JavaScript with the lint enforced best practices does, and the styleguides appear to back this view.. Agreed. This is a concern for the code that loads the default config. \nThis code is dealing with the finalised config. It should not undo a config based on assumptions about the environment.  eg the user may have their own UNSAFE_ method that just happens to match the choice a new version of React implements. One would hope this is unlikely, but it would be bad practice to assume it impossible.  \nAssuming we even wanted to try and undo the config, because custom groups are flattened in the config, and someone could overwrite the lifecycle group, we could only undo methods that were not contiguous with other lifecycle methods. Even then we would be assuming that the user used the lifecycle group when they may have hand coded the list.  We could inspect the raw config and deconstruct from there...  Why are we trying to undo the users config?. Yes, line 162 is a functional subset of 200. However 162 is documented behaviour and 200 is not. As stated in the PR description, I've added a test to make sure the functionality isn't lost, but presumed it was better to code to expected behaviours.\nWould you prefer that I comment L#200 making it explicit that it's undocumented functionality, or remove 162 and effectively hide (in my opinion) documented behaviour in the code for undocumented behaviour?  Of course the tests would catch if someone removed the code thinking they were removing the undocumented behaviour, but that feels too obfuscated to me.. Can you please provide sources that confirm it is best practice to avoid switch statements in JavaScript, or help me understand what is incorrect about my last message if you believe your previous sources were sufficient.. Done.. ",
    "jamesparksart": "Thank you for your comment Ijharb. I will put it on Stack Overflow. I appreciate your time and expertise. . ",
    "pronebird": "Alright I actually didn't know there is such option. I had impression that eslint parses it from the package.json.\nThanks @ljharb . ",
    "ReasonableDeveloper": "I had the same issue using prettier and prettier-eslint. Every time I saved, it created several new lines between the component and text.\nAdding following line to my .eslintrc file fixed it for me.\n\"extends\": [\"prettier\", \"prettier/react\"] \nBelow is my package.json since I'm not sure which package messed this up.\nJSON\n    \"eslint\": \"5.5.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-babel\": \"5.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.1\",\n    \"eslint-plugin-react\": \"7.11.1\",\n    \"eslint-config-prettier\": \"3.0.1\",\n    \"prettier\": \"1.14.2\",\n    \"prettier-eslint\": \"8.8.2\",\n    \"prettier-eslint-cli\": \"4.7.1\". ",
    "metreniuk": "@ljharb It is not quite clear what is the expected behavior. The docs says (lifecycle default group) that getDerivedStateFromProps should be after the constructor. Should getDerivedStateFromProps be removed from lifecycle group or the rule should be fixed to report when getDerivedStateFromProps is before constructor?\nFirst, I found GH-1795 that fixed that behavior. After I found GH-1856 that reverted the fix and removed the test case for the issue described here.. @ljharb It is not quite clear what is the expected behavior. The docs says (lifecycle default group) that getDerivedStateFromProps should be after the constructor. Should getDerivedStateFromProps be removed from lifecycle group or the rule should be fixed to report when getDerivedStateFromProps is before constructor?\nFirst, I found GH-1795 that fixed that behavior. After I found GH-1856 that reverted the fix and removed the test case for the issue described here.. @ljharb I made a PR (GH-1962) that enforces static lifecycles to be grouped under the lifecycle group. This seems the most reasonable behavior to me while working with lifecycle methods. This also seems to be the first guess behavior described in the docs, because getDerivedStateFromProps is mentioned explicitly in the lifecycle group vs implicitly in the static group.\nThe issue that I encountered is that having getDerivedStateFromProps in statics and lifecycle groups leads to a discrepancy in the same codebase. . By the way the impossible order of getDerivedStateFromProps issue seems to be fixed in GH-1858.. I've accidentally removed the fork from which I made the PR.  I will check if I could come with another one.. @alexzherdev what do you think about this? Is it accurate to do so or this is a breaking change that isn't worth doing?. @alexzherdev what do you think about this? Is it accurate to do so or this is a breaking change that isn't worth doing?. Since the current behavior was intended to allow the same method to be part of multiple groups I am willing to keep this as it is. At the same time there could be different opinions about where a method should be (ex: getDerivedStateFromProps before/after state declaration).\nWhat do you think about naming the option preferLifecycle that will be implemented under the behavior from this PR?. Since the current behavior was intended to allow the same method to be part of multiple groups I am willing to keep this as it is. At the same time there could be different opinions about where a method should be (ex: getDerivedStateFromProps before/after state declaration).\nWhat do you think about naming the option preferLifecycle that will be implemented under the behavior from this PR?. @alexzherdev sure. I've added the new functionality under the preferLifecycle option (false by default) and added more tests.. @alexzherdev sure. I've added the new functionality under the preferLifecycle option (false by default) and added more tests.. @ljharb I've made a fix and added tests in #1977 .. I see the problem. I was confused by the docs:\n\nWhen true the rule will ignore Components extending from React.PureComponent that use this.props or this.context.\n\nThe example that you mentioned leads to the fact that this rule will ignore all this's properties, not only props and context. Is it accurate?. I see. I was thinking about it and looking into project and I have seen some substring usage. I wonder why it's not recommended? Because of how it behaves if the second argument is greater than first?. ",
    "59naga": "Yes. This can't happen if you follow the React naming convention.\nThis issue asked jsx-uses-vars for warning as fool-proof.\nBut if it is due to the no-unused-vars behavior, I'll close this. the importance of this issue isn't higher.\nI use React's naming convention.. Yes. This can't happen if you follow the React naming convention.\nThis issue asked jsx-uses-vars for warning as fool-proof.\nBut if it is due to the no-unused-vars behavior, I'll close this. the importance of this issue isn't higher.\nI use React's naming convention.. ",
    "papandreou": "The test failure also happens on master and is due to babel-eslint@8.2.4. Downgrading to 8.2.3 fixes it.\ngit bisect says:\n```\ne63962ddd340e3a412ee33d9f0ed443a88d3975f is the first bad commit\ncommit e63962ddd340e3a412ee33d9f0ed443a88d3975f\nAuthor: Cristian Pallar\u00e9s cristian@pallares.io\nDate:   Wed Jun 6 00:18:13 2018 +0200\nrefactor: rename babylon to @babel/parser\n\n:040000 040000 c6b299854dde266cc8960551ab1ee334fd6f5e93 d08c0f67d7b0d9b795dbb8a8702ca787c3318182 M  lib\n```\nPerhaps the easiest fix is to just drop node 4 support now that everyone else in the eslint ecosystem is doing it.. The test failure also happens on master and is due to babel-eslint@8.2.4. Downgrading to 8.2.3 fixes it.\ngit bisect says:\n```\ne63962ddd340e3a412ee33d9f0ed443a88d3975f is the first bad commit\ncommit e63962ddd340e3a412ee33d9f0ed443a88d3975f\nAuthor: Cristian Pallar\u00e9s cristian@pallares.io\nDate:   Wed Jun 6 00:18:13 2018 +0200\nrefactor: rename babylon to @babel/parser\n\n:040000 040000 c6b299854dde266cc8960551ab1ee334fd6f5e93 d08c0f67d7b0d9b795dbb8a8702ca787c3318182 M  lib\n```\nPerhaps the easiest fix is to just drop node 4 support now that everyone else in the eslint ecosystem is doing it.. @ljharb, thanks for the quick response!\n\nPlease also add testing for eslint 4 vs 5 here: https://github.com/yannickcr/eslint-plugin-react/blob/master/.travis.yml\n\nOkay, do you mean like this? https://github.com/yannickcr/eslint-plugin-react/pull/1843/commits/d71706868923a4ff1a0bb772aca90f18530e7cc2\n... I guess the exact configuration depends on your answer to the below question :)\n\nAlso, please make the dev dep range for eslint identical to the peer dep range.\n\nI tried that initially, but it makes the build fail in node 4: https://travis-ci.org/yannickcr/eslint-plugin-react/jobs/395825658#L856\nAre you ready to part with node 4 support -- seems like everyone else is :). @ljharb, thanks for the quick response!\n\nPlease also add testing for eslint 4 vs 5 here: https://github.com/yannickcr/eslint-plugin-react/blob/master/.travis.yml\n\nOkay, do you mean like this? https://github.com/yannickcr/eslint-plugin-react/pull/1843/commits/d71706868923a4ff1a0bb772aca90f18530e7cc2\n... I guess the exact configuration depends on your answer to the below question :)\n\nAlso, please make the dev dep range for eslint identical to the peer dep range.\n\nI tried that initially, but it makes the build fail in node 4: https://travis-ci.org/yannickcr/eslint-plugin-react/jobs/395825658#L856\nAre you ready to part with node 4 support -- seems like everyone else is :). @ljharb, thanks a lot!\nI agree, but eslint 5 dropped node 4 support: https://eslint.org/docs/5.0.0/user-guide/migrating-to-5.0.0#drop-node-4\nWould be great for this project to maintain backwards compatibility via older eslint versions, of course.. @ljharb, thanks a lot!\nI agree, but eslint 5 dropped node 4 support: https://eslint.org/docs/5.0.0/user-guide/migrating-to-5.0.0#drop-node-4\nWould be great for this project to maintain backwards compatibility via older eslint versions, of course.. > ahhh well true, in that case for eslint 5 only, we should definitely not be testing on node 4.\nSounds like the right way to handle it.\nIt's probably faster for you to set that up? :). > ahhh well true, in that case for eslint 5 only, we should definitely not be testing on node 4.\nSounds like the right way to handle it.\nIt's probably faster for you to set that up? :). @ljharb, thanks for landing this! Would it be possible to release a new version to the npm registry?. @ljharb, thanks for landing this! Would it be possible to release a new version to the npm registry?. Sure, fixed in d0bebd7da5a1805e57be54106c9b575e37a637da :). Whatever you say, fixed in 61372b88cec82c453d65091068b3d37afe3d4d :). ",
    "existentialism": "@papandreou just released babel-eslint@8.2.5, which reverts the babel 7-b51 bump.. @papandreou just released babel-eslint@8.2.5, which reverts the babel 7-b51 bump.. ",
    "psa-gbellencontre": "I'm getting the same error. \nIt seems that the button type attribute cannot be dynamic. But I don't understand why.... ",
    "truckingsim": "@ljharb In our component library at my company we have a Button component that is used for various things.  We use a oneOf prop type to do an enum of type options and default to button since that's the sane default.  But the button can be used technically as a submit or reset button (and does get used).  \nWe have a component due to css and classes, its easier to have one shared one where the app people don't have to worry about css classes and semantics, they can just use our Button.\nI don't want to turn this rule off, but if its going to be forced to be static, don't really see another way.. @ljharb that's what I just did, but also feels like I shouldn't have to do that.\nIs there no way to take props into consideration for rules?  So that basically if there's a default + it only allows what is expected it passes?. ",
    "ryansully": "Had a similar experience when bumping up to 7.10:\n<h3><i className=\"fa fa-user\" /> <strong>User</strong></h3>\n{!!onClose && <button type=\"button\" onClick={onClose}>Close</button>}\n{!!onSave && <button type=\"submit\" onClick={onSave}>Save</button>}\nbecomes\n<h3>\n  <i className=\"fa fa-user\" />\n  {' '}\n  <strong>\n    User\n  </strong>\n</h3>\n{!!onClose && (\n  <button type=\"button\" onClick={onClose}>\n    Close\n  </button>\n)}\n{!!onSave && (\n  <button type=\"submit\" onClick={onSave}>\n    Save\n  </button>\n)}\nwhich are among the simpler of 100+ areas of code base that had to be changed. It's the simpler JSX though that should be able to be kept inline IMO.\nI think maybe an inline option in conjunction with ESLint's max-len rule would be sufficient to handle things like long inline links, if that's doable?\nI like the new rule and want to be able to enforce it in some way, but in its current state it's just overkill and actually has a negative impact on code appearance for what is essentially a purely stylistic rule.. Had a similar experience when bumping up to 7.10:\n<h3><i className=\"fa fa-user\" /> <strong>User</strong></h3>\n{!!onClose && <button type=\"button\" onClick={onClose}>Close</button>}\n{!!onSave && <button type=\"submit\" onClick={onSave}>Save</button>}\nbecomes\n<h3>\n  <i className=\"fa fa-user\" />\n  {' '}\n  <strong>\n    User\n  </strong>\n</h3>\n{!!onClose && (\n  <button type=\"button\" onClick={onClose}>\n    Close\n  </button>\n)}\n{!!onSave && (\n  <button type=\"submit\" onClick={onSave}>\n    Save\n  </button>\n)}\nwhich are among the simpler of 100+ areas of code base that had to be changed. It's the simpler JSX though that should be able to be kept inline IMO.\nI think maybe an inline option in conjunction with ESLint's max-len rule would be sufficient to handle things like long inline links, if that's doable?\nI like the new rule and want to be able to enforce it in some way, but in its current state it's just overkill and actually has a negative impact on code appearance for what is essentially a purely stylistic rule.. Somewhat, but sort of a different concern. I left feedback there as well.. Somewhat, but sort of a different concern. I left feedback there as well.. For something like\n<App>{foo} - {bar}</App>\nI'd probably use a template literal to preserve whitespace:\n<App>\n  {`${foo} - ${bar}`}\n</App>\nNot exactly an improvement though, and makes the code harder to understand.\nIn other places I add {' '} if I need whitespace that won't be eaten by React, though that's more of a flaw/feature of React itself than of this ESLint plugin.. For something like\n<App>{foo} - {bar}</App>\nI'd probably use a template literal to preserve whitespace:\n<App>\n  {`${foo} - ${bar}`}\n</App>\nNot exactly an improvement though, and makes the code harder to understand.\nIn other places I add {' '} if I need whitespace that won't be eaten by React, though that's more of a flaw/feature of React itself than of this ESLint plugin.. ",
    "Mindaugas-Jacionis": "@ljharb the reference to #1855 is confusing, because there you point back to this thread \ud83d\ude04 . ",
    "igorpupkinable": "This had messed up our pages with content. Text is missing meaningful spaces.. ",
    "Fandekasp": "I should have mentioned that I had this as well in the code\nes6\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\nI thought this.props was immutable. Can you give me an example where it can get mutated @ljharb ?\nThank you for the insight!. > Separately, you never want to put arrow functions in class fields\nThat's the first time I'm hearing about this. Is there an eslint rule to cover and explain this as well ? Couldn't find it :). es6\n  handleClick () {\n    const {firebase} = this.props;\n    firebase.logout();\n  }\nit is, then. Looking forward to the rule, please share it in this issue if you don't forget about it by then, thanks :). Guess I should have been more explicit. I do not understand the relation between the 2 rules and why adding \nsettings:\n  import/ignore:\n    - node_modules\nwould do anything to help with forbid-foreign-prop-types.\nAre you meaning that some dependencies might use proptypes in a way that removing them would break the library, and since we have no control over node_modules, it's simpler to just ignore them ?\nAfter thinking a bit more about it, I suppose you meant to add \nrules:\n  import/named: 1\nAlthough this isn't specifically written in the doc.. Thanks for the clarification, it makes more sense now :). ",
    "ArvinH": "I have the same issue on eslint 4\n```\nNode Version: v10.5.0\nnpm Version: 6.1.0\nstandard@11.0.1\neslint@4.18.2\neslint-plugin-react@7.7.0\nbabel-eslint@8.2.5\n```\nI believe this is caused by the conflict between rule indent and rule react/jsx-indent\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1679. I have the same issue on eslint 4\n```\nNode Version: v10.5.0\nnpm Version: 6.1.0\nstandard@11.0.1\neslint@4.18.2\neslint-plugin-react@7.7.0\nbabel-eslint@8.2.5\n```\nI believe this is caused by the conflict between rule indent and rule react/jsx-indent\nhttps://github.com/yannickcr/eslint-plugin-react/issues/1679. ",
    "nishantgeorge": "The above code still fails the lint with indent turned off:\njson\n{\n    \"env\": {\n        \"browser\": true,\n        \"es6\": true,\n        \"node\": true\n    },\n    \"extends\": \"eslint:recommended\",\n    \"parser\": \"babel-eslint\",\n    \"plugins\": [\n        \"react\"\n    ],\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n          \"jsx\": true\n        }\n    },\n    \"rules\": {\n        \"indent\": [\"off\"],\n        \"react/jsx-indent\": [\"warn\", 2]\n    }\n}\neslint version: 4.19.1\neslint-plugin-react version: 7.7.0. ",
    "RLesser": "This is still happening to me on v5.10.0\nIf I initially enter:\n```import React from 'react';\nimport { View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n\n\n\n\n\n    );\n  }\n}\n```\nThen using --fix turns it into:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n\n\n\n\n\n    );\n  }\n}\n```\nIt also happened more traditional < > < /> format. This:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n          Test\n        \n\n          Test2\n        \n\n    );\n  }\n}\n```\nwas \"fixed\" to this:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n          Test\n        \n\n          Test2\n          \n\n    );\n  }\n}\n```\nAny explanation as to why this might still be happening? Apologies if I'm missing something.. This is still happening to me on v5.10.0\nIf I initially enter:\n```import React from 'react';\nimport { View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n\n\n\n\n\n    );\n  }\n}\n```\nThen using --fix turns it into:\n```\nimport React from 'react';\nimport { View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n\n\n\n\n\n    );\n  }\n}\n```\nIt also happened more traditional < > < /> format. This:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n          Test\n        \n\n          Test2\n        \n\n    );\n  }\n}\n```\nwas \"fixed\" to this:\n```\nimport React from 'react';\nimport { Text, View } from 'react-native';\nexport default class xxx extends React.Component {\n  render() {\n    return (\n      \n\n          Test\n        \n\n          Test2\n          \n\n    );\n  }\n}\n```\nAny explanation as to why this might still be happening? Apologies if I'm missing something.. @ljharb Thought I had done that before, but I think I had a local/global issue. Looks like it is fixed now for me - thanks!. @ljharb Thought I had done that before, but I think I had a local/global issue. Looks like it is fixed now for me - thanks!. ",
    "jsnajdr": "@ljharb Thanks for reviewing this patch! I added a commit with line/column/endLine/endColumn checks.. Oops, ESLint 3 apparently didn't support the endLine and endColumn fields yet. I removed them from the tests, leaving only line and column.. Oops, ESLint 3 apparently didn't support the endLine and endColumn fields yet. I removed them from the tests, leaving only line and column.. ",
    "haggholm": "Ah, shoot. I\u2019m doing all I can to move functionality to HOCs and decorators, but the legacy code\u2026ah well, c\u2019est la vie.. Ah, shoot. I\u2019m doing all I can to move functionality to HOCs and decorators, but the legacy code\u2026ah well, c\u2019est la vie.. ",
    "kud": "Hello.\nI've got a little problem with this PR to be frank since I've got it.\nApparently this PR was done because of this https://github.com/yannickcr/eslint-plugin-react/issues/1789 which is in a way really cool.\nHowever, I'm in the opposite situation and I try to keep react always updated (or at least often).\nWith this PR, it forces me to keep my .eslintrc.js always synchronised with my react version. And I'm pretty sure my team or I will forget to update it in the same time that we update our React version.\nThe question is so, is it possible in fact to react the version of the react installed via package.json instead of having the need to specify the version in our eslint config file?. Another idea is to add \"latest\" as react version. :D. Yes, it's true.\nFor the moment, I use this workaround: \"version\": \"999.999.999\".. Yes, it's true.\nFor the moment, I use this workaround: \"version\": \"999.999.999\".. https://github.com/yannickcr/eslint-plugin-react/issues/1955#issuecomment-416659624\nWell, I use ncu to update my packages, and yes it's not hard to update .eslintrc but you have to remember this and it's not something I want. :D \nI'm using 999.999.999 for the moment.. ",
    "MiLeung": "./node_modules/.bin/eslint src/ yields:\nsh\n  4:16  error  Component should be written as a pure function  react/prefer-stateless-function\n  7:7   error  JSX not allowed in files with extension '.js'   react/jsx-filename-extension\nI added some more stuff into my .eslintrc\n{\n  \"extends\": [\n    \"airbnb\",\n    \"react\"\n  ],\n  \"plugins\": [\n    \"babel\"\n  ],\n  \"rules\": {\n    \"react/jsx-filename-extension\": [1, { \"extensions\": [\".js\", \".jsx\"] }],\n    \"babel/new-cap\": 1,\n    \"babel/no-invalid-this\": 1,\n    \"babel/object-curly-spacing\": \"always\",\n    \"babel/semi\": 1,\n    \"babel/no-unused-expressions\": 1\n  }\n}\nand this problem goes away.. ./node_modules/.bin/eslint src/ yields:\nsh\n  4:16  error  Component should be written as a pure function  react/prefer-stateless-function\n  7:7   error  JSX not allowed in files with extension '.js'   react/jsx-filename-extension\nI added some more stuff into my .eslintrc\n{\n  \"extends\": [\n    \"airbnb\",\n    \"react\"\n  ],\n  \"plugins\": [\n    \"babel\"\n  ],\n  \"rules\": {\n    \"react/jsx-filename-extension\": [1, { \"extensions\": [\".js\", \".jsx\"] }],\n    \"babel/new-cap\": 1,\n    \"babel/no-invalid-this\": 1,\n    \"babel/object-curly-spacing\": \"always\",\n    \"babel/semi\": 1,\n    \"babel/no-unused-expressions\": 1\n  }\n}\nand this problem goes away.. No. No. ",
    "adalbertoteixeira": "Hi. I'm getting this error using --fix as well, unfortunately.\nIt happens when react/jsx-one-expression-per-line is set to \"error\".. I was seeing the wrong indentation (what @MiLeung shows on his issue) when running eslint --fix as well, not just when using Atom.\nHe says he doesn't get the issue when running --fix, but I do.\nAnd I'm sorry, but isn't this eslint-plugin-react?. ",
    "VincentLanglet": "If my PR is merged before yours, you'll have to add my bug fix.\nhttps://github.com/yannickcr/eslint-plugin-react/pull/2182. If my PR is merged before yours, you'll have to add my bug fix.\nhttps://github.com/yannickcr/eslint-plugin-react/pull/2182. With foo = { bar: baz }.\n{ ...foo, bar } = { bar }\nAnd\n{ bar, ...for } = { baz }\nA fixer can break the code. @ljharb I agree that a correct fixer for this rule must not move anything across the boundary created by a spread prop.\nBut then this fixer won't fix something like\n{ a, ...foo, bar }\nAnd actually the expected code is\n{ a, bar, ...foo }\nBut\n{ a, bar, ...foo } !== { a, ...foo, bar }\nThat's why I asked for an option to use the sort-default-props without having eslint asking me or my team to break my code.. @ljharb I agree that a correct fixer for this rule must not move anything across the boundary created by a spread prop.\nBut then this fixer won't fix something like\n{ a, ...foo, bar }\nAnd actually the expected code is\n{ a, bar, ...foo }\nBut\n{ a, bar, ...foo } !== { a, ...foo, bar }\nThat's why I asked for an option to use the sort-default-props without having eslint asking me or my team to break my code.. Indeed, I didn't see the jsx-no-bind exists already.. Indeed, I didn't see the jsx-no-bind exists already.. @ljharb I'm not sure we understand each other.\nWhy are you talking about willfuly break language syntax ?\nI was aking about an option to avoid having error in case like this\nbar.defaultProps = { ...foo,  anotherProps }\nCause the rule actually ask for \nbar.defaultProps = { anotherProps, ...foo,  }\nIt's not a good thing if eslint ask for breaking my code and I have to add disable-next-line multiple times in my project.. @ljharb I'm not sure we understand each other.\nWhy are you talking about willfuly break language syntax ?\nI was aking about an option to avoid having error in case like this\nbar.defaultProps = { ...foo,  anotherProps }\nCause the rule actually ask for \nbar.defaultProps = { anotherProps, ...foo,  }\nIt's not a good thing if eslint ask for breaking my code and I have to add disable-next-line multiple times in my project.. To be clear with everyone\nWithout the option\n{ a, bar, foo } // valid\n{ a, foo, bar } // invalid\n{ ...foo, a, bar } // invalid\n{ a, ...foo, bar } // invalid\n{ a, bar, ...foo } // valid\n{ bar, a, ...foo } // invalid\nWith the option\n{ a, bar, foo } // valid\n{ a, foo, bar } // invalid\n{ ...foo, a, bar } // valid\n{ a, ...foo, bar } // valid\n{ a, bar, ...foo } // valid\n{ bar, a, ...foo } // invalid. To be clear with everyone\nWithout the option\n{ a, bar, foo } // valid\n{ a, foo, bar } // invalid\n{ ...foo, a, bar } // invalid\n{ a, ...foo, bar } // invalid\n{ a, bar, ...foo } // valid\n{ bar, a, ...foo } // invalid\nWith the option\n{ a, bar, foo } // valid\n{ a, foo, bar } // invalid\n{ ...foo, a, bar } // valid\n{ a, ...foo, bar } // valid\n{ a, bar, ...foo } // valid\n{ bar, a, ...foo } // invalid. @ljharb I started to look into the code to implement the option.\nIn test, we can see\n{\n    code: [\n      'export default class ClassWithSpreadInPropTypes extends BaseClass {',\n      '  static propTypes = {',\n      '    b: PropTypes.string,',\n      '    ...c.propTypes,',\n      '    a: PropTypes.string',\n      '  }',\n      '  static defaultProps = {',\n      '    b: \"b\",',\n      '    ...c.defaultProps,',\n      '    a: \"a\"',\n      '  }',\n      '}'\n    ].join('\\n'),\n    parser: 'babel-eslint'\n  }\nIs expected to be a valid code. There is a check\nif (/SpreadProperty$/.test(curr.type)) {\n          return decls[idx + 1];\n        }\nSo I think I found a bug. Cause this test case return an error.\n{\n    code: [\n      'const defaults = {',\n      '  b: \"b\"',\n      '};',\n      'const First = (props) => <div />;',\n      'export const propTypes = {',\n      '    a: PropTypes.any,',\n      '    z: PropTypes.string,',\n      '};',\n      'export const defaultProps = {',\n      '    ...defaults,',\n      '    a: \"a\",',\n      '    z: \"z\",',\n      '};',\n      'First.propTypes = propTypes;',\n      'First.defaultProps = defaultProps;'\n    ].join('\\n')\n  }. @ljharb I started to look into the code to implement the option.\nIn test, we can see\n{\n    code: [\n      'export default class ClassWithSpreadInPropTypes extends BaseClass {',\n      '  static propTypes = {',\n      '    b: PropTypes.string,',\n      '    ...c.propTypes,',\n      '    a: PropTypes.string',\n      '  }',\n      '  static defaultProps = {',\n      '    b: \"b\",',\n      '    ...c.defaultProps,',\n      '    a: \"a\"',\n      '  }',\n      '}'\n    ].join('\\n'),\n    parser: 'babel-eslint'\n  }\nIs expected to be a valid code. There is a check\nif (/SpreadProperty$/.test(curr.type)) {\n          return decls[idx + 1];\n        }\nSo I think I found a bug. Cause this test case return an error.\n{\n    code: [\n      'const defaults = {',\n      '  b: \"b\"',\n      '};',\n      'const First = (props) => <div />;',\n      'export const propTypes = {',\n      '    a: PropTypes.any,',\n      '    z: PropTypes.string,',\n      '};',\n      'export const defaultProps = {',\n      '    ...defaults,',\n      '    a: \"a\",',\n      '    z: \"z\",',\n      '};',\n      'First.propTypes = propTypes;',\n      'First.defaultProps = defaultProps;'\n    ].join('\\n')\n  }. @ljharb I found the fix and made the PR\nif (/SpreadProperty$/.test(curr.type) || /SpreadElement$/.test(curr.type)) {\n          return decls[idx + 1];\n        } . @ljharb I found the fix and made the PR\nif (/SpreadProperty$/.test(curr.type) || /SpreadElement$/.test(curr.type)) {\n          return decls[idx + 1];\n        } . @ljharb Done :). Done. ",
    "manuelnas": "It's set to 16.4, so that should not be the issue. It does complain about non \"UNSAFE_\" legacy lifecycle methods.. ",
    "MichielLeyman": "Doesn't seem like a duplicate, #1800 is about it erroring in files that have nothing to do with react. I have the same issue, complains about destructuring in class properties. ",
    "freehuntx": "For now i shamelessly copied code from the require-optimization and made it do what i want.\nShould i make a proper PR with it?\n```\n/*\n * @fileoverview Enforce React components to have a render method\n * @author Evgueni Naverniouk\n /\n'use strict';\nconst has = require('has');\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce React components to have a render method',\n      category: 'Best Practices',\n      recommended: true,\n      //url: docsUrl('require-render-method')\n    },\nschema: [{\n  type: 'object',\n  properties: {\n    allowDecorators: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    }\n  },\n  additionalProperties: false\n}]\n\n},\ncreate: Components.detect((context, components, utils) => {\n    const MISSING_MESSAGE = 'Component is missing a render method.';\n    const configuration = context.options[0] || {};\n    const allowDecorators = configuration.allowDecorators || [];\n/**\n * Checks to see if our component is decorated by PureRenderMixin via reactMixin\n * @param {ASTNode} node The AST node being checked.\n * @returns {Boolean} True if node is decorated with a PureRenderMixin, false if not.\n */\nconst hasPureRenderDecorator = function (node) {\n  if (node.decorators && node.decorators.length) {\n    for (let i = 0, l = node.decorators.length; i < l; i++) {\n      if (\n        node.decorators[i].expression &&\n        node.decorators[i].expression.callee &&\n        node.decorators[i].expression.callee.object &&\n        node.decorators[i].expression.callee.object.name === 'reactMixin' &&\n        node.decorators[i].expression.callee.property &&\n        node.decorators[i].expression.callee.property.name === 'decorate' &&\n        node.decorators[i].expression.arguments &&\n        node.decorators[i].expression.arguments.length &&\n        node.decorators[i].expression.arguments[0].name === 'PureRenderMixin'\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks to see if our component is custom decorated\n * @param {ASTNode} node The AST node being checked.\n * @returns {Boolean} True if node is decorated name with a custom decorated, false if not.\n */\nconst hasCustomDecorator = function (node) {\n  const allowLength = allowDecorators.length;\n\n  if (allowLength && node.decorators && node.decorators.length) {\n    for (let i = 0; i < allowLength; i++) {\n      for (let j = 0, l = node.decorators.length; j < l; j++) {\n        if (\n          node.decorators[j].expression &&\n          node.decorators[j].expression.name === allowDecorators[i]\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\n/**\n * Checks if we are declaring a render method\n * @param {ASTNode} node The AST node being checked.\n * @returns {Boolean} True if we are declaring a render method, false if not.\n */\nconst isRenderDeclar\u0435d = function (node) {\n  return Boolean(\n    node &&\n    node.name === 'render'\n  );\n};\n\n/**\n * Checks if we are declaring a PureRenderMixin mixin\n * @param {ASTNode} node The AST node being checked.\n * @returns {Boolean} True if we are declaring a PureRenderMixin method, false if not.\n */\nconst isPureRenderDeclared = function (node) {\n  let hasPR = false;\n  if (node.value && node.value.elements) {\n    for (let i = 0, l = node.value.elements.length; i < l; i++) {\n      if (node.value.elements[i] && node.value.elements[i].name === 'PureRenderMixin') {\n        hasPR = true;\n        break;\n      }\n    }\n  }\n\n  return Boolean(\n    node &&\n    node.key.name === 'mixins' &&\n    hasPR\n  );\n};\n\n/**\n * Mark render as declared\n * @param {ASTNode} node The AST node being checked.\n */\nconst markRenderAsDeclared = function (node) {\n  components.set(node, {\n    hasRender: true\n  });\n};\n\n/**\n * Reports missing render method for a given component\n * @param {Object} component The component to process\n */\nconst reportMissingRender = function (component) {\n  context.report({\n    node: component.node,\n    message: MISSING_MESSAGE,\n    data: {\n      component: component.name\n    }\n  });\n};\n\n/**\n * Checks if we are declaring function in class\n * @returns {Boolean} True if we are declaring function in class, false if not.\n */\nconst isFunctionInClass = function () {\n  let blockNode;\n  let scope = context.getScope();\n  while (scope) {\n    blockNode = scope.block;\n    if (blockNode && blockNode.type === 'ClassDeclaration') {\n      return true;\n    }\n    scope = scope.upper;\n  }\n\n  return false;\n};\n\nreturn {\n  ArrowFunctionExpression: function (node) {\n    // Stateless Functional Components are already the render method\n    markRenderAsDeclared(node);\n  },\n\n  ClassDeclaration: function (node) {\n    if (!(hasPureRenderDecorator(node) || hasCustomDecorator(node) || utils.isPureComponent(node))) {\n      return;\n    }\n    markRenderAsDeclared(node);\n  },\n\n  FunctionDeclaration: function (node) {\n    // Skip if the function is declared in the class\n    if (isFunctionInClass()) {\n      return;\n    }\n    // Stateless Functional Components cannot be optimized (yet)\n    markRenderAsDeclared(node);\n  },\n\n  FunctionExpression: function (node) {\n    // Skip if the function is declared in the class\n    if (isFunctionInClass()) {\n      return;\n    }\n    // Stateless Functional Components cannot be optimized (yet)\n    markRenderAsDeclared(node);\n  },\n\n  MethodDefinition: function (node) {\n    if (!isRenderDeclar\u0435d(node.key)) {\n      return;\n    }\n    markRenderAsDeclared(node);\n  },\n\n  ObjectExpression: function (node) {\n    // Search for the render declaration\n    for (let i = 0, l = node.properties.length; i < l; i++) {\n      if (\n        !node.properties[i].key || (\n          !isRenderDeclar\u0435d(node.properties[i].key) &&\n          !isPureRenderDeclared(node.properties[i])\n        )\n      ) {\n        continue;\n      }\n      markRenderAsDeclared(node);\n    }\n  },\n\n  'Program:exit': function () {\n    const list = components.list();\n\n    // Report missing render for all components\n    for (const component in list) {\n      if (!has(list, component) || list[component].hasRender) {\n        continue;\n      }\n      reportMissingRender(list[component]);\n    }\n  }\n};\n\n})\n};\n```. ",
    "Istoman": "I have the same problem on Windows yet my EOL is set to LF.. ",
    "grahammcculloch": "Hi. Would love to see this get merged :smile:  Currently making me sad about my Windows machine!. Hi. Would love to see this get merged :smile:  Currently making me sad about my Windows machine!. ",
    "luissmg": "@ljharb @grahammcculloch Doing that this weekend!. @ljharb @grahammcculloch Doing that this weekend!. Hi guys. I will try to fix this in this weekend. Sorry for not replying any sooner.. Hi guys. I will try to fix this in this weekend. Sorry for not replying any sooner.. Thank you so much for the tip! Will try to fix it this weekend. ",
    "evertonfraga": "@luissmg any news? :). ",
    "FeralFox": "Okay, thank you for the quick anwer!. ",
    "nickluger": "Thank you @callumlocke for staying with it in the other issue. The current workaraound for these often used rules would be then:\njson\n \"react/default-props-match-prop-types\": [\n      \"error\",\n      { \"allowRequiredDefaults\": true }\n    ],\n \"react/require-default-props\": [\n      \"error\",\n      { \"forbidDefaultForRequired\": false }\n    ]. ",
    "RWOverdijk": "One step further: If I make the static methods into instance methods, sort-comp picks them up.\nAfter looking into the code it would appear that this happens because static methods go first. Still not sure how a different environment could affect this. Perhaps it has something to do with babel?. Another update, I was wrong. It is different with node versions. It works as expected on Node version v7.10.1 and doesn't work as expected on v9.11.2.\nAlso tried v10.7.0, and it doesn't work as expected.. For anyone coming across this:\nFor some reason, the newer versions of npm installed v7.7.0 of eslint-plugin-react. After upgrading that to v7.10.0 it worked.\nLooks like it was fixed here.\nI found this by comparing sort-comp.js. If the top conditional does a static check, it's the wrong version.\nWhew.. ",
    "jfrej": "What are the plans for releasing the fix?\nI need this for data- prefixed props, which have to be quoted.\nFor example:\n```\nSomeComponent.propTypes = {\n    'data-testid': PropTypes.string,\n};\nSomeComponent.defaultProps = {\n    'data-testid': undefined,\n};\n```. ",
    "techimist": "Yup 7.11.1, the below still warns me about de-structuring props assignment:\nconst sampleSchemaData = this.props.schemaData\nwith the following rule in eslintrc: \n\"rules\": {\n    \"react/destructuring-assignment\": [1, \"always\", { \"ignoreClassFields\": true }]\n}\n. ",
    "zslabs": "This still throws one for me using the same setup as @anna93:\nclass Input extends React.Component {\n  id = `${this.props.name}-${generateUUID()}`;\n .... ",
    "viralganatra": "Interesting, how would you pass flat props to the React context provider given it only accepts the value prop?\nhttps://reactjs.org/docs/context.html#provider\n(Is this something that perhaps could be an exception to the rule, or apologies if I'm missing something?)\nThanks. Thanks for the guidance - for me it doesn't make sense to use multiple context providers for things that are related to the same context (in fact I already am using multiple providers). Also Memoizing a new object doesn't really sit right with me just to satisfy this warning. \nI think I'll just disable the rule in my file for this case.\nThanks for your help though, appreciate your quick responses \ud83d\ude03. ",
    "mdboop": "\nYou should never pass the props or state objects directly. The way to satisfy the warning is to extract the state fields you want, and make a new object with them. If you want to avoid rerenders, don\u2019t pass an object - pass flat props.\n\nWhat's your reasoning behind this? Passing this.state to a context provider is right in the React docs (here).\n```jsx\nimport {ThemeContext, themes} from './theme-context';\nimport ThemeTogglerButton from './theme-toggler-button';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\nthis.toggleTheme = () => {\n  this.setState(state => ({\n    theme:\n      state.theme === themes.dark\n        ? themes.light\n        : themes.dark,\n  }));\n};\n\n// State also contains the updater function so it will\n// be passed down into the context provider\nthis.state = {\n  theme: themes.light,\n  toggleTheme: this.toggleTheme,\n};\n\n}\nrender() {\n    // The entire state is passed to the provider\n    return (\n      \n\n\n    );\n  }\n}\n```. ",
    "henkvhest": "Thanks, that is exactly what I was looking for!. ",
    "psixdev": "I had a slightly different situation:\n```jsx\nconst React = require('react');\nconst OtherComponent = require('./OtherComponent');\nfunction Component() {\n    return (\n         {foo.name}}\n            renderBaz={({baz}) => {baz.name}}\n            renders={[{\n                foo: (foo) => {foo.name},\n                baz: ({baz}) => {baz.name}\n            }]}\n        />\n    );\n}\nmodule.exports = Component;\nI got a single error:\n10:12  error  'baz' is missing in props validation  react/prop-types\n```\nI think that there should be no errors at all.. ",
    "454de6e": "My bad. Config needs to be:\n{\n  \"extends\": [\"airbnb\", \"prettier\", \"prettier/react\"]\n}\nThen all is fine.. ",
    "kylemh": "I'd love to contribute to this purely to have the opposite rule available for my team. I'll likely poke around this weekend, but was curious what sort of extra work is entailed with making it a \"fixable\" rule.\nI also wanted to know what was meant by getting getters involved into this rule? I was thinking of keeping it simple by either ensuring proptypes are defined within a class, above a class, or a below a class. Should there be a separate rule for how functions are handled?. ",
    "Sharcoux": "Ok, forget about it. I just noticed that VsCode autocompleted propType by prototype without me noticing... Sorry for any time loss.. ",
    "rvanmil": "@borisding you could determine the version dynamically in your .eslintrc.js file if you don't want to specify it:\n```\nconst pkg = require('./package.json')\nconst reactVersion = () => {\n  if (pkg.dependencies && pkg.dependencies.react) {\n    return { version: pkg.dependencies.react.replace(/[^0-9.]/g, '') }\n  }\n  if (pkg.devDependencies && pkg.devDependencies.react) {\n    return { version: pkg.devDependencies.react.replace(/[^0-9.]/g, '') }\n  }\n}\nmodule.exports = {\n  'settings': {\n    'react': {\n      ...reactVersion()\n    }\n  }\n}\n```. ",
    "lidaiU0": "\"settings\": {\n        \"react\": {\n            \"version\": \"detect\"     // React version. \"detect\" automatically picks the version you have installed.\n                                    // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.\n                                    // default to latest and warns if missing\n                                    // It will default to \"detect\" in the future\n        }\n    }\n\nlet's do it. ",
    "eric-wood": "Also seeing this, and have found I can work around it by using destructuring:\njs\nthis.setState({ ...stuff }, () => {\n  const { asdf } = this.state;\n  console.log(asdf);\n});. ",
    "jaybekster": "Has it been fixed?. ",
    "321ckatz123": "@ljharb, just to be clear, all 3 props fail, not just the one I put inside addListener.. @ljharb, just to be clear, all 3 props fail, not just the one I put inside addListener.. ",
    "bensampaio": "Ok, I'll try that. Thanks! . ",
    "kuroisuna": "@ljharb oh, sorry, yes it is, and WidgetComponent extends React.Component.\nYou can also replicate this error if you try to use setState with a callback in a class that doesn't extends React.Component at all:\njs\nexport default class WellnessScore {\nWidgetComponent is a global variable.. ",
    "Jmenache": "Whenever I'm in the case of having to use props in state definition, I avoid the warning by using the constructor.\n``` javascript\nexport default class Thing extends React.Component {\n    constructor(props) {\n      super(props);\n  this.state = {\n      alpha: false,\n      beta: props.beta,\n      charlie: null,\n  };\n}\n// ...\n\n}\n```\nAbout getDerivedStateFromProps, the following React post recommends avoiding it most of the time. One of the preferred solutions uses props in state definition (Fully uncontrolled component with a key)\nhttps://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n. @ljharb I think the post recommends using a key instead of componentWillReceiveProps with this pattern, so that it creates a new component and goes through the constructor again.. @ljharb I think the post recommends using a key instead of componentWillReceiveProps with this pattern, so that it creates a new component and goes through the constructor again.. @ljharb As counter intuitive as it is, the article explains that it is usually not slower, and sometimes faster.\n\nNote\nWhile this may sound slow, the performance difference is usually insignificant. Using a key can even be faster if the components have heavy logic that runs on updates since diffing gets bypassed for that subtree.\n\nI agree it is not pretty and I would most likely try using the other recommended solution if I have a choice, but this pattern helped me a few times dealing with legacy code.. @ljharb As counter intuitive as it is, the article explains that it is usually not slower, and sometimes faster.\n\nNote\nWhile this may sound slow, the performance difference is usually insignificant. Using a key can even be faster if the components have heavy logic that runs on updates since diffing gets bypassed for that subtree.\n\nI agree it is not pretty and I would most likely try using the other recommended solution if I have a choice, but this pattern helped me a few times dealing with legacy code.. ",
    "pilarArr": "Yes, I'm doing that now, but it seems like a stretch and I have to keep track if I'm using the props inside a callback or not to check if I'm destructuring it in the correct place.\n```javascript\nclass Example extends Component {\ncallbackMethod = () => {\n    const { someProp, anotherProp } = this.props;\n    // do stuff with the props\n    // now I save anotherProp in the database with function\n    functionWithCallback( anotherProp, (error, result) => {\n      // when this is saved the props are updated after fetching the \n      // new ones from the database\n      // I get new props by destructuring again\n      const { someProp: newSomeProp, anotherProp: newAnotherProp } = this.props;\n      // do stuff with the props\n    } )\n  }\nrender() {\n    const { foo } = this.props;\nreturn <div onClick={this.callbackMethod}>{foo.bar}</div>;\n\n}\n}\n```.  I guess I would have to define the callback in another function to avoid any confusion or conflics \n```javascript\nclass Example extends Component {\nsomeCallback = (error, result) => {\n  // when this is saved the props are updated after fetching the \n  // new ones from the database\n  // I get new props by destructuring again\n  const { someProp, anotherProp } = this.props;\n  // do stuff with the props\n}\n\ncallbackMethod = () => {\n    const { someProp, anotherProp } = this.props;\n    // do stuff with the props\n    // now I save anotherProp in the database with function\n    functionWithCallback( anotherProp, this.someCallback);\n  }\nrender() {\n    const { foo } = this.props;\nreturn <div onClick={this.callbackMethod}>{foo.bar}</div>;\n\n}\n}\n```. ",
    "kitfit-dave": "Ah yeah, this seems fixed in master. At least now it does. I just added a test and noticed that it did not fail. :)\n. Ah yeah, this seems fixed in master. At least now it does. I just added a test and noticed that it did not fail. :)\n. ",
    "vadimshvetsov": "@ljharb Yep, it's imported from react-native package:\njs\nimport { ViewPropTypes } from 'react-native';\nIt's created for using in component PropTypes, when component extends View or using some of it props.. @ljharb Yep, it's imported from react-native package:\njs\nimport { ViewPropTypes } from 'react-native';\nIt's created for using in component PropTypes, when component extends View or using some of it props.. Yes, it's working in v7.11.1, thanks @alexzherdev. ",
    "chrisdothtml": "+1 for supporting latest as the value. +1 for supporting latest as the value. We also use a shared eslint config and this would make it quite annoying every upgrade. If \"latest\" isn't supported, everyone's just gonna use \"999.999.999\" instead, which could lead to issues in the future if this plugin assumes that property contains their actual React version . ",
    "marcofugaro": "Yeah please I don't want to update this config each time a new react comes out. Yeaaah... I don't have it in a package.json, I have it in the eslint config shared for the team, and each time I would have to upgrade deps, update by hand, publish a new version of the tool. \nMost importantly, I upgrade my dependencies using yarn upgrade-interactive --latest, not by hand. I (or other mantainers) might forget to update this version by hand.. ",
    "bhardy": "Comment removed and new issue created: https://github.com/yannickcr/eslint-plugin-react/issues/1963. @ljharb would you like me to create a new issue?. ",
    "mohsinulhaq": "I tried {\"version\": \"latest\"}, and it's working fine. Why are we pushing for '999.999.999'?. but there is no downside of using latest with regards to linting, right?. Cool! Thanks. is it ok now?. yes, you are right, so do we actually check package lock?. okay that makes sense.. ",
    "anilanar": "I think this is an important bug. There are editor plugins that rely on exit code and stdout of eslint --fix/prettier-eslint for auto-formatting.\nAs a formatter, prettier-eslint must not log something to stdout when exit code is 0.. ",
    "bertho-zero": "@anilanar Even when the version is filled the warning appears with prettier-eslint, I fixed that and I wait for a response. (https://github.com/prettier/prettier-eslint/pull/194). ",
    "jaydenseric": "I'm still seeing the warning, why is detect not the default?\n\n. That's ok, just publish a new default in a new major version.. Glad it's on the roadmap, although it's suboptimal to get all eslint-plugin-react consumers worried about a warning, have them change their config, just to make their extra config redundant when the new version is out. Will users be warned their config is bloated and can be simplified once their setting is a default? Probably not. Then they will be maintaining junk code.\nUseful defaults like this are a low hanging fruit; the sooner they are published the better for everyone.. ",
    "eeriee": "Add 'detect' to the setting but still encounter the warning.. ",
    "bensaufley": "@ljharb what's the timeline for the release that will include this?. ",
    "Juuro": "Mh, I have this example from your rules documentation for prop-types: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md propTypes works even if it's not defined as static. Maybe that is not \"nice code\" but it doesn't seem to be the problem here.\nHere is our ESLint configuration:\n```\n{\n  \"settings\": {\n    \"react\": {\n      \"version\": \"16.3.14\"\n    }\n  },\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:security/recommended\",\n    \"plugin:react/recommended\"\n  ],\n  \"plugins\": [\n    \"jest\",\n    \"security\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 6,\n    \"sourceType\": \"module\",\n    \"ecmaFeatures\": {\n      \"jsx\": true,\n      \"experimentalObjectRestSpread\": true\n    }\n  },\n  \"parser\": \"babel-eslint\",\n  \"globals\": {\n    \"browser\": true,\n    \"element\": true,\n    \"by\": true\n  },\n  \"env\": {\n    \"es6\": true,\n    \"browser\": true,\n    \"node\": true,\n    \"jquery\": true,\n    \"jest/globals\": true\n  },\n  \"rules\": {\n    \"no-await-in-loop\": 2,\n    \"quotes\": [2, \"single\"],\n    \"no-console\": 2,\n    \"no-debugger\": 2,\n    \"accessor-pairs\": 2,\n    \"no-var\": 2,\n    \"array-callback-return\": 2,\n    \"no-template-curly-in-string\": 2,\n    \"semi\": [2, \"always\"],\n    \"complexity\": [\"error\", { \"max\": 10 }],\n    \"no-trailing-spaces\": 2,\n    \"dot-location\": [2, \"property\"],\n    \"eol-last\": 0,\n    \"eqeqeq\": 2,\n    \"no-unused-vars\": 0,\n    \"guard-for-in\": 2,\n    \"dot-notation\": 2,\n    \"curly\": 2,\n    \"default-case\": 2,\n    \"consistent-return\": 2,\n    \"no-underscore-dangle\": 0,\n    \"no-alert\": 2,\n    \"no-caller\": 2,\n    \"no-eval\": 2,\n    \"no-extra-bind\": 2,\n    \"no-else-return\": 2,\n    \"no-extra-label\": 2,\n    \"no-lone-blocks\": 2,\n    \"no-implicit-coercion\": 2,\n    \"no-param-reassign\": 2,\n    \"no-implicit-globals\": 2,\n    \"no-octal-escape\": 2,\n    \"no-implied-eval\": 2,\n    \"no-new-wrappers\": 2,\n    \"no-useless-concat\": 2,\n    \"no-useless-return\": 2,\n    \"no-label-var\": 2,\n    \"no-undefined\": 2,\n    \"prefer-promise-reject-errors\": 2,\n    \"no-invalid-this\": 2,\n    \"no-proto\": 2,\n    \"no-with\": 2,\n    \"no-return-assign\": 2,\n    \"no-script-url\": 2,\n    \"no-self-compare\": 2,\n    \"no-throw-literal\": 2,\n    \"no-return-await\": 2,\n    \"no-iterator\": 2,\n    \"no-multi-spaces\": 2,\n    \"no-multi-str\": 2,\n    \"no-new-func\": 2,\n    \"no-labels\": 2,\n    \"global-require\": 2,\n    \"handle-callback-err\": 2,\n    \"no-mixed-requires\": 2,\n    \"no-new-require\": 2,\n    \"no-path-concat\": 2,\n    \"no-sync\": 2,\n    \"key-spacing\": [\"error\", {\"afterColon\": true}],\n    \"jsx-quotes\": [\"error\", \"prefer-double\"],\n    \"object-curly-spacing\": [\"error\", \"never\"],\n    \"prefer-const\": [\"error\", {\"destructuring\": \"any\", \"ignoreReadBeforeAssign\": false}],\n    \"prefer-destructuring\": [\"error\", {\"VariableDeclarator\": {\"array\": false,\"object\": true}, \"AssignmentExpression\": {\"array\": true, \"object\": false}}, {\"enforceForRenamedProperties\": false}],\n    \"no-duplicate-imports\": [\"error\", { \"includeExports\": true }],\n    \"arrow-parens\": [\"error\", \"as-needed\"],\n    \"quote-props\": [\"error\", \"as-needed\"],\n    \"keyword-spacing\": [\"error\", {\"before\": true}]\n  }\n}\n```\n. ",
    "blackbird91": "That's my example where props are not validated:\n```\nexport class TestComponent extends Component {\n    static get propTypes() {\n        return {\n            object: PropTypes.object,\n            }\n    }\nconstructor(props) {\n    super(props);\n}\n\ncomponentDidMount() {\n    const { func } = this.props;\n\n    func(); //does not throw missing props validation\n}\n\nrender(){\n     return <span/>;\n}\n\n}\n. That's my example where props are not validated:\nexport class TestComponent extends Component {\n    static get propTypes() {\n        return {\n            object: PropTypes.object,\n            }\n    }\nconstructor(props) {\n    super(props);\n}\n\ncomponentDidMount() {\n    const { func } = this.props;\n\n    func(); //does not throw missing props validation\n}\n\nrender(){\n     return <span/>;\n}\n\n}\n```\n. It was working just fine in previous versions. Also, If I'm missing propTypes for other types of objects I get a validation message. It was working just fine in previous versions. Also, If I'm missing propTypes for other types of objects I get a validation message. Capture @ version 7.11.1\n\nCapture @ version 7.10.0\n\n. I can't provide blocks of code, the small example I've posted before is very similar with the one I encounter in my project. I just wanted to show the difference between the 2 versions with these screen captures. ",
    "bbthorntz": "@alexzherdev yeah, version 7.11.1.. Thanks @alexzherdev! Looking forward to the fix.. ",
    "swrobel": "\nCan't reproduce example from #1958 (comment) either.\n\nThe key seems to be actually using ...rest in the return value, as far as I can tell. 7.11.1 will complain if it's just prop that's used.. ",
    "patrickvienneau": "Very excited for this fix, impatiently waiting for 7.11.2 for this fix to be released. In the meantime, do we know what the last working version for this was?. Thanks for the follow-up @ljharb!. ",
    "benwill": "I dropped back to 7.10.0 and that works correctly. ",
    "muuvmuuv": "Fixed this by using the build in dependencies manager from the system I wanted to create a plugin for. But thanks for the fast response!\nFrom the programm Unibeautify\nconst ESLintPluginReact = dependencies.get<NodeDependency>(\n        \"ESLintPluginReact\"\n      ).package;\n@ljharb I'll keep that in mind for other projects!. ",
    "bendtherules": "Not sure if this is due to the same reason.\nAnother sample causing unnecessary error:\n```jsx\nimport React from 'react';\nclass Extended extends Base {\n  testA = () => {\n    this.abc(); // Error here - react/no-this-in-sfc\nreturn (\n  <div>\n    Hello World\n  </div>\n);\n\n}\ntestB() {\n    this.abc(); // No error here\nreturn (\n  <div>\n    Hello World\n  </div>\n);\n\n}\n}\n```\nIt doesn't happen inside non-arrow functions\n. ",
    "nikolas": "I'm getting this warning as well, even with plugin:react/recommended in extends. Here's my .eslintrc.json:\n{\n    \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        }\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"env\": {\n        \"browser\": true,\n        \"es6\": true\n    },\n    \"rules\": {\n        \"no-console\": \"off\"\n    }\n}\nThe page this error links to (https://github.com/yannickcr/eslint-plugin-react#configuration) doesn't mention anything about specifying the React version in the eslint config. Should this warning just be removed?. I'm getting this warning as well, even with plugin:react/recommended in extends. Here's my .eslintrc.json:\n{\n    \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        }\n    },\n    \"plugins\": [\n        \"react\"\n    ],\n    \"env\": {\n        \"browser\": true,\n        \"es6\": true\n    },\n    \"rules\": {\n        \"no-console\": \"off\"\n    }\n}\nThe page this error links to (https://github.com/yannickcr/eslint-plugin-react#configuration) doesn't mention anything about specifying the React version in the eslint config. Should this warning just be removed?. ",
    "tohjustin": "Possibly a similar issue that was reported earlier on: https://github.com/yannickcr/eslint-plugin-react/issues/1697. ",
    "bjankord": "Started seeing this error recently. We just updated from using eslint-plugin-react v7.11.0 to v7.12.4\nWe have some code that is the same as @kaiyoma mentioned, using state that is only ever used for logic inside of setState.  It seems this code is now recognized as unused-state. . Started seeing this error recently. We just updated from using eslint-plugin-react v7.11.0 to v7.12.4\nWe have some code that is the same as @kaiyoma mentioned, using state that is only ever used for logic inside of setState.  It seems this code is now recognized as unused-state. . ",
    "barakyosi": "@bjankord  - I believe this should be fixed in https://github.com/yannickcr/eslint-plugin-react/pull/2151. @bjankord  - I believe this should be fixed in https://github.com/yannickcr/eslint-plugin-react/pull/2151. I thought about detecting method calls with props argument, then look inside the method body and check usage.\nStarted to work on it but wasn't sure how to get the method body from the call expression.\nWould be happy to know whether this check can be done (and if not what's the limitation). I thought about detecting method calls with props argument, then look inside the method body and check usage.\nStarted to work on it but wasn't sure how to get the method body from the call expression.\nWould be happy to know whether this check can be done (and if not what's the limitation). Sometimes passing all props makes it easier to follow. Especially when you need more than one prop and need to call it in different lifecycle methods.\nI understand it's impossible to catch all scenarios. Would love to see a solution covering this one :). Sometimes passing all props makes it easier to follow. Especially when you need more than one prop and need to call it in different lifecycle methods.\nI understand it's impossible to catch all scenarios. Would love to see a solution covering this one :). I agree your solution is better for this scenario, but if you need it in more than one place (in constructor & CWRP), or use many props inside doSomething - when adding a new prop you might forget to add it everywhere.. I agree your solution is better for this scenario, but if you need it in more than one place (in constructor & CWRP), or use many props inside doSomething - when adding a new prop you might forget to add it everywhere.. There's a check for node.arguments[0].params.length > 0.\nAdded a test as well.. ",
    "jbailey4": "\nWhen using a full-blown type checker like typescript/flow\n[...] the prop-types rule is satisfied by Flow/ts types [...]\n\nI know this is closed, but when using eslint + Typescript (now that it is possible), the react/prop-types rule does seem to conflict with TS Interfaces.\n. ",
    "alundiak": "+1\n. @sergei-startsev , @ljharb is that change going to be released as v7.11.2 ?. I'm on eslint-plugin-react@7.11.1 and I also have that described issue. No React/JSX code AT ALL.. ",
    "doums": "Yes it was that \"no-console\" instead of \"no_console\"  xD\nThank you, resolved. ",
    "jalal246": "Yeah, it is. \nDidn't see it when i opened the issue.. ",
    "luismendes535": "Issue solved running prettier. I wasn't aware of the chance that the app could crash with eslint and thought it was something related to the lib version. Thanks anyway :). Hey ljharb,\nIt was the way my colleague was declaring the functional component. He did const ComponentX = props => <div>....More JSX...</div> without brackets. Changing to const ComponentX = props =>(<div>....More JSX...</div>); solved the issue.. Alex, here I have the devDependecies and also the eslintConfig object because I notice that I'm extending the react-app config here in the package.json and in the eslintrc.js file I extend the airbnb config: \"extends\": \"airbnb\" . Is anything wrong with this?\n\"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n\"devDependencies\": {\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.1\",\n    \"eslint-plugin-react\": \"^7.11.1\"\n  },\nI might be setting up something wrong, I will take a deeper look. . ",
    "sebastian-nowak": "Any chance this PR will be merged soon?. ",
    "tgdev": "This looks great. Any idea on when this might be published to NPM?. ",
    "harsh-tamr": "or !!cond && <Tingy/>. ",
    "ngtan": "@ljharb Thanks for your reviews. I think I have addressed your comments already. Could you check it out again? If you have any concerns, just leave your comment.. @ljharb I really keen on your idea but, in my point of view it should be fixed by creator to make sure that they won't repeat it in next time. \nBeside that, I also figure out some common cases:\nclass Hello extends React.Component {\n  render = () => {\n    return (<div />);\n  }\n}\nclass Hello extends React.Component {\n  render = () => (<div />);\n}\nclass Hello extends React.Component {\n  componentWillReceiveProps = nextProps => {}\n  shouldComponentUpdate = (nextProps = { blabla }, nextState) => (returned)\n  render() {\n    return (<div />);\n  }\n}\nTo be honest, I didn't find out a good way to replace them with instance method yet. Anyway, I believe I will have a one to help it automatically fixed later after it was merged. \n. > $methodName($argList) { return $methodBody; }?\nI also thought about it. But, have idea for now. . > The autofix would be so easy if we had AST-driven fixers \ud83d\ude41 (although I'm guessing there's valid reasons we don't?)\nHonestly, I'm working on this. . Sure. ",
    "fabis94": "Okay thanks. Okay thanks. ",
    "atomcorp": "FWIW I'm using: \n``` json  \n\"eslint\": \"^5.6.0\",\n\"eslint-plugin-react\": \"^7.11.1\",\n````. FWIW I'm using: \n``` json  \n\"eslint\": \"^5.6.0\",\n\"eslint-plugin-react\": \"^7.11.1\",\n````. Thanks for the information!\nPersonally I find that doc page pretty unclear if you just quickly looking for the rule. I'll try and update it a little later on, similar to this style. Thanks for the information!\nPersonally I find that doc page pretty unclear if you just quickly looking for the rule. I'll try and update it a little later on, similar to this style. Made that change. I looked at some of the other docs more carefully, and reordered the Rule Options so hopefully it makes a bit more sense. \n. Made that change. I looked at some of the other docs more carefully, and reordered the Rule Options so hopefully it makes a bit more sense. \n. added. It's used on other pages (I copied it from one). For example: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-optimization.md. Again, I'm following how it works on some other pages . ",
    "mgcrea": "The issue is more the \"weight\" of these non-informative nullable defaultProps vs. the actual length of the component. In fact the shorter the component, the more bothersome the noise is, as it takes proportionally a lot of visual space. For instance:  \n```js\ntype Props = {\n  items: Array,\n  containerStyle?: ViewStyleProp,\n  inputContainerStyle?: ViewStyleProp,\n  leftIconContainerStyle?: ViewStyleProp,\n  rightIconContainerStyle?: ViewStyleProp,\n  required?: Boolean\n};\nexport default class StyledInput extends PureComponent {\n  static defaultProps = {\n    required: false,\n    containerStyle: null,\n    inputContainerStyle: null,\n    leftIconContainerStyle: null,\n    rightIconContainerStyle: null,\n  };\nrender() {\n    const {\n      items,\n      leftIcon,\n      required,\n      containerStyle,\n      inputContainerStyle,\n      leftIconContainerStyle,\n      rightIconContainerStyle,\n      ...otherProps\n    } = this.props;\n    if (leftIcon) {\n      leftIcon.color = colors.grey3;\n    }\n    return (\n       : null}\n        {...otherProps}\n      />\n    );\n  }\n}\n```. ",
    "jakub-chatrny": "I've found comment in code explaining this is not possible due to potencional prop override\n// Sort props according to the context. Only supports ignoreCase.\n  // Since we cannot safely move JSXSpreadAttribute (due to potential variable overrides),\n  // we only consider groups of sortable attributes.. I've found comment in code explaining this is not possible due to potencional prop override\n// Sort props according to the context. Only supports ignoreCase.\n  // Since we cannot safely move JSXSpreadAttribute (due to potential variable overrides),\n  // we only consider groups of sortable attributes.. ",
    "julia-dizhak": "the same happens for me with autofixer. ",
    "idanen": "Sure. Do you have some in mind?. That's much more difficult...\nDo you think we should use a different \"entry\" than what is currently used for this rule?\nI don't really have any experience or knowledge in AST so I think I'll need some help to continue . ",
    "JounQin": "@ljharb I just forgot to add this. in my example, although it doesn't change anything.. Sorry I don't understand what does Does sort-comp autofix here? mean here, it throws an error, of course it can't be autofixed.. I can only manually change the sorts to prevent eslint error from react/sort-comp, and then it throws an error from lodash.debounce about undefined function at runtime.. Do you mean it is a wont't fix for eslint-plugin-react?. ",
    "jlgonzalezdev": "PR: #2008. Yes, Basically My use case is:\nI need to print to the report the hardcoded text found in the JSX templates.\nfor something like  SIGN IN\nI need an output like:\nMissing JSX expression container around literal string: SIGN IN.\nSo, I need to print the node value(\"SIGN IN \" in the example above).\nI think that context.getSourceCode() instead of node.value would be the right approach for this, I'll be making some changes to my fork.\n. @ljharb  ok, removing the option. > Let\u2019s add a space after the colon, and it\u2019d be good to have some kind of boundary markers around the text - backticks or curly quotes, maybe?\nSure, let's use it like this->   : \"TEXT\"\n\nSeparately, I\u2019m not sure if the trimming is a good idea - if it\u2019s a literal, the whitespace could be important.\n\nI think Not having the trimming really impact the readability of the output, in every case that I have work with this kind of output, I have needed to use the trimming. So, I woud like to keep it.\n. ",
    "AnabelSalomone": "I've seen a fix for an issue like this one was made (here: https://github.com/yannickcr/eslint-plugin-react/pull/1995 ), any chance we can have it in a release soon? . ",
    "himynameisdave": "This would be awesome. I think it's fine if it's in a conditional or if you move the setState call off to another method.. @ljharb true, but I still want to use this rule. Maybe I'll just change it to a warning in our codebase, but overall I prefer rules to be strict so that they cannot be committed at all.. @ljharb thanks! I would actually like to try fixing this (as I use this plugin a lot, so it would be cool to contribute to it).. Thank you for fixing this!. @ljharb I've addressed your CR comments, please read through again and let me know if there is anything else you need me to change! \ud83d\udcaa\ud83d\udc4c\ud83e\udd19   \n. @ljharb I've addressed your CR comments, please read through again and let me know if there is anything else you need me to change! \ud83d\udcaa\ud83d\udc4c\ud83e\udd19   \n. ",
    "gaurav5430": "any updates on whether this is going to be an option or not ?. any updates on whether this is going to be an option or not ?. ",
    "seancrater": "@developit @yannickcr @ljharb It seems the Typescript linting issue related to this above was resolved by removing noopener as part of the a element linting. Any update on this? I can take this on if we'd like to do it. I believe this might be enough evidence to go through with this:\n\nAs per: https://html.spec.whatwg.org/multipage/links.html#link-type-noopener\n. @ljharb Probably should've noted that I only made this so it's available if the team decides to go through with it.. @ljharb Also shared what I found for research on the issue, I'm not sure if it's actually enough to draw a conclusion from but it seems like a pretty valid source to me.. ",
    "csantos1113": "This must be a valid case:\n```\nconst space = () => {};\nspace.propTypes = {\n    name: PropTypes.string\n};\nexport default class List extends PureComponent {\n  static propTypes = {\n    ...space.propTypes, // but I'm getting the warning here!\n    message: PropTypes.string\n  }\nrender() {\n     return {this.props.message}\n  }\n}\n```. ",
    "damianlajara": "You should add your rule here as well.. ",
    "wojtekmaj": "But defining e.g. new style object for <div /> with each render would force React to parse it and compare with previously processed output, wouldn't it? So HTML elements should also be included in my opinion. I added ignoreDOMComponents setting though.. ",
    "sayduck-daniel": "Same here. Same here. ",
    "iandunn": "Alright, sounds like I'll need to write a plugin. Thanks.. ",
    "Sachin124": "You need to add {Persons} after the button element from the return\n@Mohan-hari \n return (\n        this.togglePersonsHandler('Maximilian')}> Please press me!!!\n{Person}\n\n    );. ",
    "runmoore": "Oh ok, I didn't realise that. I just presumed that because passing a boolean in React worked, that it was valid. \nIn that case, I'll can close this issue. Thanks. ",
    "parvezalisha": "@ljharb I am seeing the same issue and jsx-indent doesn't fix it. The linter has stopped complaining about the indentation of the closing brace.. Any update on this?. ",
    "AndreasCag": "@ljharb Thanks for fast answer!\nHowever, I have tried to enable jsx:\n```\n/ .eslintrc.js /\nmodule.exports = {\n  parserOptions: {\n    ecmaVersion: 9,\n    sourceType: 'module',\n    ecmaFeatures: {\n      jsx: true,\n    },\n  },\n  extends: [\n    'eslint:recommended',\n    'plugin:react/recommended',\n  ]\n};\n```\nAnd it doesnt work either:\nerror  Parsing error: Unexpected token /. @ljharb Thanks \u2764\ufe0f . ",
    "joshuakelly": "@ljharb Okay if i take a stab at this one?. @ljharb Okay if i take a stab at this one?. ",
    "peterwiebe": "@yannickcr \ud83d\ude4f\ud83c\udffd. @ljharb my bad :( I will note that for the future. If there is anything I can do to help lighten your load feel free to msg me.. ",
    "andrew-humu": "Sorry, I didn't mean to cause anyone any stress.\nI'm just excited about some of the latest changes, and looking forward to getting my hands on them! \n (Especially this rule, now that babel@7 has landed: https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md)\nI occasionally need a little nudge to remember to keep on top of projects I'm helping to maintain, so I thought maybe a polite request would be forgivable.  \ud83d\ude42. ",
    "gtkatakura-bysoft": "This rule could be configurable to work only with native elements, scenarios like this make sense to me:\nconst Checkbox = ({ name, value, ...props }) => (\n  <input type=\"checkbox\" name={name} value={value} {...props} />\n). ",
    "hurrtz": "Ok, after your comment I have researched into that matter and I humbly appologize for the inconvenience. I will close this issue and refactor my code.. Ok, after your comment I have researched into that matter and I humbly appologize for the inconvenience. I will close this issue and refactor my code.. ",
    "TheAifam5": "@ljharb that does not fix my problem when I define: \"react/jsx-indent\" : [\"error\", 2].\nAlso when I remove all extends and plugins does not help.. @ljharb that does not fix my problem when I define: \"react/jsx-indent\" : [\"error\", 2].\nAlso when I remove all extends and plugins does not help.. @ljharb oh I disabled ES lint completely and looks like VSCode makes that space at the end.\nOk I changed to:\n\"editor.formatOnSave\": false,\n  \"eslint.autoFixOnSave\": true\nand works now :D. @ljharb oh I disabled ES lint completely and looks like VSCode makes that space at the end.\nOk I changed to:\n\"editor.formatOnSave\": false,\n  \"eslint.autoFixOnSave\": true\nand works now :D. @ljharb but I see, ESlint does not make intend, maybe u know which config should I set?. @ljharb but I see, ESlint does not make intend, maybe u know which config should I set?. @ljharb thanks, but what about empty tags <>? Looks like I need to use React.Fragment because with empty tags the intent does not work.. @ljharb thanks, but what about empty tags <>? Looks like I need to use React.Fragment because with empty tags the intent does not work.. ",
    "apfelbox": ".eslintrc.yml is here: https://github.com/Becklyn/kaba/blob/af2a8ab76c2d8de530063e9513454bac25301769/.eslintrc.yml\neslint-loader config is here: https://github.com/Becklyn/kaba/blob/af2a8ab76c2d8de530063e9513454bac25301769/lib/Kaba.js#L617-L622. Hmm, maybe I just didn\u2019t lint after adding the version constraint.. not sure anymore. \nMeanwhile I am so used to not quoting strings in YAML, that I now accidentally produced a number \ud83d\ude05\nThanks for the hint though, your great work and the improved error message. \ud83d\ude4c. ",
    "jeremypeters": "Ok, sorry about that. It was set by the airbnb config https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/rules/react.js. ",
    "dudiharush": "\"rules\": {\n                \"react/sort-comp\": [2, {\n                      \"order\": [\n                        \"static-methods\",\n                        \"instance-variables\",\n                        \"lifecycle\",\n                        \"everything-else\",\n                        \"render\"\n                      ],\n                      \"groups\": {\n                        \"lifecycle\": [\n                          \"displayName\",\n                          \"propTypes\",\n                          \"contextTypes\",\n                          \"childContextTypes\",\n                          \"mixins\",\n                          \"statics\",\n                          \"defaultProps\",\n                          \"constructor\",\n                          \"getDefaultProps\",\n                          \"state\",\n                          \"getInitialState\",\n                          \"getChildContext\",\n                          \"getDerivedStateFromProps\",\n                          \"componentWillMount\",\n                          \"UNSAFE_componentWillMount\",\n                          \"componentDidMount\",\n                          \"componentWillReceiveProps\",\n                          \"UNSAFE_componentWillReceiveProps\",\n                          \"shouldComponentUpdate\",\n                          \"componentWillUpdate\",\n                          \"UNSAFE_componentWillUpdate\",\n                          \"getSnapshotBeforeUpdate\",\n                          \"componentDidUpdate\",\n                          \"componentDidCatch\",\n                          \"componentWillUnmount\"\n                        ]\n                      }\n                    }]\n            }\nI think there is already an open issue about this problem: #1664. ",
    "EricTheRed-VT": "Webstorm/eslint already identifies when a component is called, and reads information from its propTypes (like whether a prop is required). It seems like all the necessary information is already used for other inspections/rules.\nAlthough I'm starting to see how this would be limited; it could only be checked when a component is directly called (i.e. without being wrapped in HOCs), and props are not spread from an object.\n```\nclass MyComponent extends Component {\n    static propTypes = {foo: PropType.string};\n    ...\n}\n...\n\n...\nconst someObject = {bar: \"something\", foo: \"another thing\"};\n\n...\nconst MyWrappedComponent = withSomeHOC(MyComponent);\n\n```\nThe third example would be difficult/impossible to statically check, but is also avoidable by using render-props/child functions instead of HOCs.\n<withSomeRenderProp\n    render={(foo, bar) => (\n        <MyComponent\n            bar={bar} // this line would be correctly marked as a warning/error\n            foo={foo}\n        />\n    )}\n/>. Fair enough. Thanks for talking me through it; I was having a really hard time finding any info on why this rule didn't exist.. ",
    "maikthomas": "Looks like this can be closed with https://github.com/yannickcr/eslint-plugin-react/releases/tag/v7.12.2. ",
    "cburgmer": "I might have misunderstood, the only linting rule I've sound so far is https://github.com/sindresorhus/eslint-plugin-unicorn/blob/master/docs/rules/explicit-length-check.md, which is not included in the Airbnb rule set.\nTo reproduce:\n$ npm install eslint-config-airbnb-base\n$ npx install-peerdeps --dev eslint-config-airbnb-base\n$ cat > h.js << EOF\nheredoc> const list = [];\nif (list.length) {\n  list.pop();\n}\nheredoc> EOF\n$ npx eslint .\n$. ",
    "EzequielDeSimone-Reflektion": "You can define as following:\ndataOptions: PropTypes.objectOf(PropTypes.object()),. ",
    "SiddharthSunchu": "jsx\nPaperSheet.propTypes = {\n  classes: PropTypes.InstanceOf(Array).isRequired,\n  title: PropTypes.string.isRequired,\n  data: PropTypes.array.isRequired,\n};\nThis is another solution you can solve the issue. ",
    "chiragSuccessive": "\nYou can define as following:\ndataOptions: PropTypes.objectOf(PropTypes.object()),\n\nPropTypes.objectOf(PropTypes.object),\nPropTypes.object() is not callable.. ",
    "VanessaChu": "I have included the explicit import and removing it as global did not change anything. ",
    "ahakanbaba": "Could there be a new release including this fix ? . ",
    "jayiconcmo": "Thank you for your comments, however in the scenario super props was called and the error still throw. The issue is that the function itself was left out of the constructor and eslint did not pick that up when the function uses 'this' keyword. I will adjust the example above. . @ljharb - exactly. :) Yeah I was moving code around and deleted the method from the constructor - specifically the openModal method. Because this.setState was in the method, the error popped. :(\nOnce I realized the code move was not going to work, I had to put the function back into the parent component - forgetting the one constructor line for the instance method. \nI thought I would ask about the linting, because the error in the console was not the best. :) . ",
    "aw-davidson": "Spreading propTypes was actually breaking static analysis for all props, but I might have been on an older version. I'll check later.\nFor const { props } = this, I wrote a rule warning against unpacking props from this. Analysis for this.props.something still will work, but does not work for props.propNotInPropTypes. And often times you will only use props and not this.props after unpacking in this way. I was seeing this pattern a lot in my codebase..  #1764 is the same issue. This happens anytime there is a reference to props. const props = this.props would also be another case. \nAs regards to the other issue (spread in propTypes definition), this is breaking static analysis for all props for me. Using eslint-plugin-react v 7.11.1 and react v 15.5.4. . @lagesag that looks like a different issue.\n@ljharb I am stilling having this issue after updating to 7.12.0. Again, the issue is that using spread in proptypes disables static analysis: \n```\nclass Button extends React.Component {\nrender() {\n       this.props.notDefinedInProptypes() // expect: 'notDefinedInPropTypes' is missing in props validation \n       return button\n   }\n   Button.propTypes = {\n        ...paddingPropTypes,\n        color: PropTypes.string\n    }\n}\n```\nIs this the expected behavior because any prop could be in paddingPropTypes?. @ljharb what about a rule that warns against dynamically defining propTypes?. ",
    "lagesag": "\nv7.12.0 is released; is this still an issue?\n\nYes. We use things like:\n```javascript\nclass C extends React.Component {\nstatic propTypes = {\n    ...B.propTypes,\n    own: PropTypes.any\n}\n\nstatic defaultProps = {\n    foo: \"bar\" // defined in B.propTypes but reported as missing from C.propTypes\n}\n\n}\n```. ",
    "hackwaly": "Could that be an config option.. ",
    "igorroch": "Similar issue when we have Ref element like this:\ncomponentDidUpdate() {\n        this.inputRef.focus();\n    }\n\nerror  'focus' is missing in props validation  react/prop-types\n\nUpdate: Also other standard methods like Array.findIndex, Array.length throw this error.. ",
    "Unsfer": "As I said, I tried to change to PropTypes.shape\njs\npropTypes = {\n    actions: PropTypes.shape({\n        doSomething: PropTypes.func.isRequired,\n    }).isRequired,\n};\nError still the same. ",
    "Studio384": "I'm having a similar issue:\n```js\nshouldComponentUpdate(nextProps) {\n  if (this.props.search !== nextProps.search) {\n    let query = nextProps.query;\n    let result = nextProps.list.filter(item => {\n      return (item.name.toLowerCase().includes(query.trim().toLowerCase()));\n    });\nthis.setState({ result });\n\nreturn true;\n\n}\n}\n```\n And am getting the following errors since 7.12\n\u26a0  91:51  'filter' is missing in props validation       react/prop-types\n  \u26a0  92:37  'toLowerCase' is missing in props validation  react/prop-types\n  \u26a0  93:34  'toLowerCase' is missing in props validation  react/prop-types. ",
    "devitito": "Same problem. ",
    "G100g": "Hi,\n also this code throw a error after upgrading to 7.12\njs\ncomponentDidUpdate() {\n...\n        const {\n            first_organization,\n            second_organization,\n        } = this.state;\n...\n155:13  error  'state.first_organization' is missing in props validation   react/prop-types\n156:13  error  'state.second_organization' is missing in props validation  react/prop-types\nThank you for your work.. ",
    "gargroh": "Facing same issue.. ",
    "brettjthom": "Is prop validation cascading down an object new behavior?\nFor code like this just started failing as well. The \"obj\" is in props validation. ('a' is missing in props validation  react/prop-types). From what I have noticed it seems to only throw on the lifecycle functions. I use children of the object in the render and it doesn't error.\ncomponentWillReceiveProps(nextProps) {\n    if (nextProps.obj.a!== this.props.obj.a) {\n        ...\n    }\n}`\n\n`\nIt's also checking state it seems now. Again only noticed it on lifecycle functions\n'working' is missing in props validation                 react/prop-types\nshouldComponentUpdate(nextProps, nextState) {\n    if (nextState.working === this.state.working) {\n        return false;\n    }\n    return true;\n}\n\n`. ",
    "ajfarkas": "Stupid question: if the prop is not required, why does this rule require us to define it?\nWouldn't that make it\u2026 required?\nJust really annoyed that this minor change broke my build and made me go through all of my files by hand.. ",
    "jeffrigby": "I'm seeing this too. I use react-router which passes location and match as props. When I compare the location search, it throws this error:\njs\n  componentDidUpdate(prevProps) {\n    const { match, location} = this.props;\n    const searchEquals = prevProps.location.search === location.search;\n    ...\n  }\n. ",
    "johnpmitsch": "@ljharb we are hitting this as well and updating eslint-plugin-react to use master fixes it. When do you anticipate https://github.com/yannickcr/eslint-plugin-react/commit/4da90ea19f805cb8e67523a983c2352aab144783 will land in a release?. @ljharb thanks for the update. Just to clarify, I wasn't trying to be pushy, I was just curious as the error is blocking our automation and we can take other steps if a release isn't planned in the near future. Apologies if it came off that way. ",
    "remcohaszing": "I am still getting this error using eslint-plugin-react@7.12.2.\nThe following code is triggering the error:\n```jsx\nimport React from 'react';\nexport default class extends React.Component {\n  onSubmit = () => {\n    this.setState((state, { a }) => {\n      a.b.c();\n      return null;\n    });\n  };\nrender() {\n    return null;\n  }\n}\n```. ",
    "connorsmallman": "Thanks @ljharb . ",
    "the-spyke": "I've got this error with 7.12.3 and this code:\n```js\nimport React from \"react\";\nexport default class Controller extends React.Component {\n    handleAdd = id => {\n        this.setState((state, { name }) => {\n            const item = this.buildtem(id);\n        });\n    };\n}\n```\nIt's okay with 7.11.0. Thanks, ESLint works fine now in my monorepo.. ",
    "paulmelnikow": "Hi! Thanks so much for your work on this plugin.\nWe're running into this issue at badges/shields#2609. Could this be released?. ",
    "mjhost": "in this case it was the after token. there's 3 fixes that I'm aware of: \n\nchanging the condition here\n  from tokenBefore.loc.end.line < node.loc.start.line\n  to tokenBefore && tokenAfter && tokenBefore.loc.end.line < node.loc.start.line\nchanging the parameter call of replaceTextRange here\n  from [tokenBefore.range[0], tokenAfter.range[0]]\n  to [tokenBefore.range[0], tokenAfter && tokenAfter.range[0]]\nchanging the initialization of const tokenAfter here\n  from const tokenAfter = sourceCode.getTokenAfter(node, {includeComments: true});\n  to const tokenAfter = sourceCode.getTokenAfter(node, {includeComments: true}) || { range: [false /*or whatever*/] };\n\nbut maybe there's a smarter use of getTokenAfter (or maybe the bug is definitely there) or a smarter use of replaceTextRange that I'm not aware of that may be worth implementing.\nanyway rule is yours, pick your favourite fix I'll be happy to send the PR.\nany choice you pick --fix works like a charm, my choice would be digging on getTokenAfter or replaceTextRange but I really don't know where to start searching for those . ",
    "radoslawgrochowski": "shouldComponentUpdate(nextProps, nextState) {\n    return (\n      nextState.disable !== this.state.disable ||\n      nextState.fieldCount !== this.state.fieldCount\n    );\n  }\nerror at nextState.fieldCount and nextState.disable. ",
    "murphy1312": "This fails now even with the newest version 7.12.2:\n```\nRowSpanTable.propTypes = Object.assign({}, Table.propTypes, {\n    propertyOrder: PropTypes.arrayOf(PropTypes.string).isRequired,\n});\nRowSpanTable.defaultProps = Object.assign({}, Table.defaultProps, {\n    propertyOrder: [],\n});\nTable.propTypes = {\n    pageOfItems: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onHeadlineClickedHandler: PropTypes.func.isRequired,\n    sortByColumn: PropTypes.string.isRequired,\n    getClassNameForHeadline: PropTypes.func.isRequired,\n    headers: PropTypes.arrayOf(PropTypes.instanceOf(JSModelTableHeader)).isRequired, // array of JSModelTableHeader\n    noItemFoundMessage: PropTypes.string.isRequired,\n    rowClass: PropTypes.func.isRequired, // e.g. MetricRow\n    rowProps: PropTypes.object.isRequired,\n    rowItemKey: PropTypes.string.isRequired, // the key property of the item\n};\nTable.defaultProps = {\n    pageOfItems: [],\n};\n```\nHad to disable the PropTypes check for now. \n. ",
    "emilyrohrbough": "@ljharb Thank you. Will get this tested out.. ",
    "doncesarts": "Change <React.Fragment /> to <></> that will let you run the eslint task. ",
    "gbakernet": "@ljharb I'm not too familiar with all the specific rules. A quick search for 'a' only yielded this rule, so I'm not sure what settings might look like given the additionally complexity of the href link attribute option.. I've updated the settings as I think you intend. Please let me know if you need any further changes.. Is there anything else I can do to this PR?. Updated. Removed.. Done.. Update. .eslintrc added to tests/util. ",
    "Justindmo": "Fixed the issue by adding a rule to .eslintrc.js \n'react/jsx-one-expression-per-line': 'off'\n. ",
    "CrOrc": "Source of issue seems to be here:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/5fc50aa9238768674cf2a2ca1d9676be629a920a/lib/util/Components.js#L403-L406\n. Maybe I should add check for both node.callee.property and node.callee.object?. Added a regression test. ",
    "rpellerin": "When will this be released? The latest published version still has the bug.. When will this be released? The latest published version still has the bug.. ",
    "Billy-": "Hm, I just realised that fixing this causes another error (no-unescaped-entities) - maybe this is why it didn't autofix? In which case, ignore me. If someone could confirm my thinking here then please feel free to close this issue..  Only the first and last lines are warned on, so this is the correct behaviour.\nOnly the lines containing > cause errors if not in curlies, the ones with < don\u2019t but as mentioned violate no-unescaped-entities.. ",
    "wesleyvandevoorde": "When will this item be included in a new release? This is currently breaking my application, looking forward for a new release 7.12.4 with this fix included!. ",
    "MakhouT": "I also need this, please release 7.12.4 ASAP. Thanks!. I also need this, please release 7.12.4 ASAP. Thanks!. ",
    "krisfrenette": "Just chiming in to say that I also need this ASAP.. Just chiming in to say that I also need this ASAP.. ",
    "Salles-FA": "\n(On a side note, there's zero reason for render to be an arrow function in a class field; that should be an instance method)\n\nI really appreciate it.\n\nI've added a test case that passes; that suggests this is fixed on master but not yet released. I'm happy to reopen if the next release doesn't fix it.\n\nThank you!  It's fixed now.. > (On a side note, there's zero reason for render to be an arrow function in a class field; that should be an instance method)\nI really appreciate it.\n\nI've added a test case that passes; that suggests this is fixed on master but not yet released. I'm happy to reopen if the next release doesn't fix it.\n\nThank you!  It's fixed now.. ",
    "jkrawczyk": "This is my use case:\n```\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nconst DisplayNames = (props) => {\n    const namesTable = () => {\n        return \n\n\nName\n\n\n\n            {\n                props.names.map((name, index) =>\n                    \n{name}\n\n                )\n            }\n            \n;\n    };\nconst noNames = () => {\n    return <span>No names</span>;\n};\n\nreturn props.names.length > 0 ? namesTable() : noNames();\n\n};\nDisplayNames.propTypes = {\n    names: PropTypes.array.isRequired,\n};\n```\nI didn't want to extract additional components because for me it was integral part of the component I was creating. Function was extracted just for better readability.\nI understand that this use case may be hard to recognise. I suppose I will leave it and just disable the rule for the file.\nThank you.. Certainly! \ud83d\ude03Thanks!. ",
    "r-mc2": "Thanks for looking into this.\nThrew together a quick gist to demonstrate better what I'm working with when the no-typos pops up.\nAnd a screenshot from my editor:\n\nAlso should have included my version number for you last time, apologies:\n\"eslint-plugin-react\": \"7.4.0\",. Thanks for looking into this.\nThrew together a quick gist to demonstrate better what I'm working with when the no-typos pops up.\nAnd a screenshot from my editor:\n\nAlso should have included my version number for you last time, apologies:\n\"eslint-plugin-react\": \"7.4.0\",. Hey, sorry for the delay in getting back to you, but yes updating to latest (7.12.4) did resolve the false-positive. Thanks, Jordan!. ",
    "Android3000": "Okay, this is weird. The code failing in question is very simple. Here is a contrived example:\nlet items = [];\nlet testData = [{a: \"test1\", displayName: \"test2\"}, {a: \"test1\", displayName: \"test2\"}];\nfor (let item of testData) {\n    items.push({a: item.a, b: item.displayName});\n}\nreturn items;\nIt's failing simply because of the property displayName. If I change that to any other name, e.g. displayName2 or b, the TypeError goes away.\nI wonder if this could actually be some unexpected transpiling issue that is then leading to refId.parent.init being null when it's not expected.. Okay, this is weird. The code failing in question is very simple. Here is a contrived example:\nlet items = [];\nlet testData = [{a: \"test1\", displayName: \"test2\"}, {a: \"test1\", displayName: \"test2\"}];\nfor (let item of testData) {\n    items.push({a: item.a, b: item.displayName});\n}\nreturn items;\nIt's failing simply because of the property displayName. If I change that to any other name, e.g. displayName2 or b, the TypeError goes away.\nI wonder if this could actually be some unexpected transpiling issue that is then leading to refId.parent.init being null when it's not expected.. The file in question where the error is originating from is lib/util/Components.js -- the commit link in the first post shows the changed line that is causing the exception. refId.parent.init.type !== 'Identifier' is blowing up, as refId.parent.init is null in my case.  A null check might help here -- e.g. ... && refId.parent.init && refId.parent.init.type -- but it seems odd that this is happening in the first place. \nIt's definitely strange that the property name of displayName appears to be what eventually leads to refId.parent.init being null. I know that displayName is used in things like React components sometimes, or the non-standard function.displayName -- but this is just an arbitrary Object, so it's odd that it would cause this. I do wonder if this is some transpilation issue further upstream that is eventually causing this, but I don't know enough about the internal code for eslint-plugin-react to know what init represents exactly.\nOn another note, I switched from for (let item of testData) to testData.forEach(item => and that also seems to work.\nSorry if I'm misunderstanding what you are asking!. The file in question where the error is originating from is lib/util/Components.js -- the commit link in the first post shows the changed line that is causing the exception. refId.parent.init.type !== 'Identifier' is blowing up, as refId.parent.init is null in my case.  A null check might help here -- e.g. ... && refId.parent.init && refId.parent.init.type -- but it seems odd that this is happening in the first place. \nIt's definitely strange that the property name of displayName appears to be what eventually leads to refId.parent.init being null. I know that displayName is used in things like React components sometimes, or the non-standard function.displayName -- but this is just an arbitrary Object, so it's odd that it would cause this. I do wonder if this is some transpilation issue further upstream that is eventually causing this, but I don't know enough about the internal code for eslint-plugin-react to know what init represents exactly.\nOn another note, I switched from for (let item of testData) to testData.forEach(item => and that also seems to work.\nSorry if I'm misunderstanding what you are asking!. Correct. This code also does not crash:\njavascript\nlet items = [];\nlet testData = [{a: \"test1\", anythingelse: \"test2\"}, {a: \"test1\", anythingelse: \"test2\"}];\nfor (let item of testData) {\n     items.push({a: item.a, b: item.anythingelse});\n}\nreturn items;\nIt looks like this is coming from the rule (this makes so much more sense now): \"react/display-name\". Thanks for putting in a fix for this!. ",
    "jwalton": "Can we please publish this fix?  This is breaking for me, too.. ",
    "pbondoer": "We are also experiencing this. I'm willing to take a look if nobody's worked on it yet. Any pointers on how I can easily test this?. ",
    "joshunger": "Thanks, I'll debug and get you repro steps or close. . Works with the command line but didn't work with vscode and eslint extension configured with autoFixOnSave. \ud83e\udd14 Closing.. I'm saying it would be helpful to stub out the boilerplate and you can fix the types. For example, \n// A value of any data type\nrequiredAny: PropTypes.any.isRequired,. ",
    "kognise": "Ok, got it. Should I close this issue?. Personally, as a naive Reacter, have used index.toString() many times. I am slowly replacing that code with a better approach, but it would've been nice to have been warned.. ",
    "iiison": "not sure what's wrong. Here is my package versions:\n| package              | Version |\n|----------------------|---------|\n| babel-eslint         | 10.0.1  |\n| eslint               | 5.12.1  |\n| eslint-config-airbnb | 17.1.0  |\n| eslint-loader        | 2.1.1   |\n| eslint-plugin-react  | 7.12.4  |. Here is link to my eslint config file.. hmm, maybe today is my bad day, another strange thing is happening: \nif I use:\njsx\n    items = <li className='suggestions col-12 lighter-color'>{'No matching suggestion.'}</li>\nI get error:\nsh\nCurly braces are unnecessary here.\nand I remove curly braces like this:\njsx\n<li className='suggestions col-12 lighter-color'>'No matching suggestion.'</li>\nI get error:\nsh\nStrings not allowed in JSX files: \"No matching suggestion\". how do I fix it then.. can't keep the curly braces can't remove them either... can I create a PR... @ljharb as you can see in my config file, I am using airbnb style guid too, and there the rule for jsx-no-literals is this: \njs\n'react/jsx-no-literals': ['off', { noStrings: true }], \nand in my config file I've this rule: \njs\n'react/jsx-no-literals': 2\nEverything works fine if I make noStrings to false in config. does that mean eslint doesn't overwrite the whole rule and I've to define write options too in order to truly overwrite the rule from plugin?\nNot sure if it's a bug or kept it this way for a reason. . one more thing, should we have a little more details about the API and how the control flows in contributing file. LMK if I could be a help... oh, I see. I will look into it.. @ljharb I've created a pull request for the issue, but when I see in test file, it doesn't allow strings in props. I've updated the test in PR tho. Just wanted to make sure if we are on the same page.\n. can you post your eslint config file... @TankRyze  can you add rule for react/jsx-max-depth for desired length? like:\njs\n\"react/jsx-max-depth\" : 0\nif you don't want to get bothered about the rule?. @ljharb added new option to validate props. I've set it to true by default so that behaviour stays the same, user can set the value to false in order to remove props validation.\nOne more thing, rule passes if prop is a strings literal(<div className=\"abc\" />), but if the prop value is a template literal, then rule will throw error. This behaviour was there from starting, LMK if you want to change this.. @ljharb added new option to validate props. I've set it to true by default so that behaviour stays the same, user can set the value to false in order to remove props validation.\nOne more thing, rule passes if prop is a strings literal(<div className=\"abc\" />), but if the prop value is a template literal, then rule will throw error. This behaviour was there from starting, LMK if you want to change this.. @ljharb the build is breaking from starting, it works fine in my local, is it because I am using ES6 syntax? Could you please help me if you are aware of the error... @ljharb the build is breaking from starting, it works fine in my local, is it because I am using ES6 syntax? Could you please help me if you are aware of the error... @ljharb I see you removed your comment to detect and disallow string literals in props, shall I add that feature or not... @ljharb I see you removed your comment to detect and disallow string literals in props, shall I add that feature or not... so, just to confirm, I shall introduce a new property in options to check string values in props. \nWill do it.. I was trying to mimic the same behaviour as before, will detect string literals too.\n. these tests seemed duplicate to me, I didn't notice the bar was string literal in first and foo was string in another. will add them again.. Added tests.. ",
    "mjdavidson": "false positive for https://github.com/sequelize/sequelize models, need to use \njavascript \nthis.getDataValue('deadline')\nto get the underlying data value. ",
    "jenil94": "@ljharb I can work on this issue if it is not assigned to anyone. @ljharb Anyone working on it? I would like to take a look at it.. <> is a JSXFragement rather then JSXElement. I am not able to think of a situation where JSXElement node will not be having openingElement but to be on safe side I have added null checks.. ",
    "MayhemYDG": "That was a regression in @typescript-eslint/parser: https://github.com/typescript-eslint/typescript-eslint/commit/6147de1bb20e269b1e0a650c8be5376d0f51752e. ",
    "andreubotella": "My bad, I only added Typescript to my project a few days ago and I didn't even know this was a regression. Since typescript-eslint's canary version already has the fix, and it'll be included in the next release, I guess this should be considered closed.. ",
    "GreenGremlin": "Sorry, I should have worded that better. The issue is that the ignoreTranspilerName option controls wether function and class name inference is sufficient for the react/display-name rule. We prefer to have the displayName defined in prod builds because we often poke around in react devtools on our production builds, but our production builds are minified which means class and function names are not meaningful.. > Minification doesn\u2019t require name mangling; that\u2019s just uglify\u2019s very unsafe default.\nThat may be the case, but I would imagine name mangling is used in a vast majority of build setups.\nIt seems to me there should be separate options for ignoring displayNames added by a transpiler and ignoring displayNames inferred by the name property. Additionally, the name property is not supported by all browsers, so there is a use case for requiring a displayName for named components, but not for components which have a displayName added by a transpiler.. ",
    "chocolatemelt": "I did see those threads so I somewhat get the gist of what's happening. On further inspection I think this is actually related to the indenting style of spaces vs tabs:\n\"react/jsx-indent\": [1, \"tab\"],\n\"react/jsx-indent-props\": [1, \"tab\"],\n\nvs without (after converting tabs to spaces):\n\nRegardless of intent, it seems like a bug that it reports the jsx-one-expression-per-line only along with tab enforcement over spaces - not sure if any other issues cover this, so apologies if this is a duplicate.. ",
    "Ghusar": "Thanks @ljharb replying. There was a slight error in my eslint config which was causing this issue. Now it's resolved.. Thanks @ljharb replying. There was a slight error in my eslint config which was causing this issue. Now it's resolved.. ",
    "Ailrun": "@ljharb The documentation of the babel would be better than my explanation.\nhttps://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom-1\nhttps://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragmafrag\n. @ljharb The documentation of the babel would be better than my explanation.\nhttps://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom-1\nhttps://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragmafrag\n. @ljharb As far as I know, the rule supports comment pragma. Am I wrong?\nIf there is any other context, could you let me know?. @ljharb As far as I know, the rule supports comment pragma. Am I wrong?\nIf there is any other context, could you let me know?. It looks like following util does not check pragma comment of jsx, but not of jsxFrag.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/4270205f3c22dd466cebb80cae7c46e67044acda/lib/util/pragma.js#L36-L54. It looks like following util does not check pragma comment of jsx, but not of jsxFrag.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/4270205f3c22dd466cebb80cae7c46e67044acda/lib/util/pragma.js#L36-L54. I notice that this is not simple as I thought.\nFirst of all, current shared setting options do not support different namespaces for jsx and jsxFrag. For example,\n```\nimport { jsx } from 'my-jsx-element-creator';\nimport React from 'react';\n(\n  <>\n    \n  \n);\ncannot be represented with current options.\nIMO, this package should use something like `jsxPragma` and `jsxFragPragma` whose default values are `React.createElement` and `React.Fragment`.\nCould you give your opinion, @ljharb?. For example, emotion@10 uses custom jsx creator to support css props. However, it uses `React.createElement` under the hood, so there is no reason to make a new type of Fragment and it should not make one.\nLikewise, one can use a custom jsx creator to extend library features, but it's just an extension so it should reuse Fragment type. . Yes, that's what I mean. This issue is not that simple as I originally thought.. Since semantics changed, I think new settings should be provided (not to break existing settings of current users)\nIf you think just breaking those (and probably update major version) is better, I will update this PR.. I mean, if old users use `pragma` with `React`, originally rules will detect `<pragma>.createElement`. With `jsxPragma`, rules detect `<jsxPragma>` so that its behavior aligns with babel's.\nTherefore, if I just use `pragma` and do not add new settings, it will break existing settings.. @ljharb Could you tell me your suggestion for the setting combination?\nI don't get the right point I need to explain, so I think that would be easier to me.. @ljharb FYI, what I considered are\n1. A case with custom element creator. (should use `jsxPragma`)jsx\n    import { jsx } from 'my-jsx';\n    import React from 'react';\n<><div /></>\n```\n\n\n\nA case with different local name for React. (should use localName)\n    ```jsx\n    import R from 'react';\n<>\n1. A case with different library with Fragment support. (should use `jsxFragPragma`)jsx\nimport O from 'other-jsx-library-supports-fragment';\n<>\n```\n1. Cases with mixes of others.. \n\n",
    "alexchen1875": "no,im not.  i just want to use my .eslintrc.js .\ni use  customize-cra to override the config ,\nthis. is config-overrides.js  \n```\n/* @format /\nconst {\n    override,\n    fixBabelImports,\n    addLessLoader,\n    useEslintRc,\n} = require('customize-cra');\nmodule.exports = override(\n    fixBabelImports('import', {\n        libraryName: 'antd',\n        libraryDirectory: 'es',\n        style: true,\n    }),\n    addLessLoader({\n        javascriptEnabled: true,\n        modifyVars: {\n            '@table-padding-vertical': '10px',\n            '@table-padding-horizontal': '10px',\n            '@form-item-margin-bottom': '10px',\n            '@text-color': '#000',\n            '@item-hover-bg': '#096dd9',\n            '@item-active-bg': '#096dd9',\n        },\n    }),\n    useEslintRc('.eslintrc.js')\n);\n```\n. ",
    "abdelrahmanrifai": "@alexchen1875 you should wrap plugin settings under react key inside the settings object in your .eslintrc as following:\nJSON\n{\n  \"settings\": {\n    \"react\": {\n      \"version\": \"detect\"\n    }\n  }\n}\nWhat you are doing incorrect is:\nJSON\n{\n  \"settings\": {\n    \"version\": \"detect\"\n  }\n}. ",
    "keenwon": "works. thanks!. ",
    "gomesalexandre": "It might actually be a duplicate of #1280, please close issue if you think that is the case . ",
    "karolisgrinkevicius-home24": "@ljharb when are you going to release it on npm?. ",
    "jack-lewin": "I've added a lot of tests in this PR. Happy to cut them down if you think that would make it easier for other contributors to follow.. I've added a lot of tests in this PR. Happy to cut them down if you think that would make it easier for other contributors to follow.. Just made a couple of small changes to make sure this is backwards-compatible \ud83d\ude42. Just made a couple of small changes to make sure this is backwards-compatible \ud83d\ude42. Would it be worth adding a new error message here?. I'm not sure whether there's a better way of checking this, instead of hard-coding the list?. At this point propType can be from anywhere - I hadn't considered the scenario of named custom validators like airbnb-prop-types. So yes, the example you mentioned would also trigger this error.\nI'm not sure how to go about avoiding that \ud83d\ude15 Do you have any ideas?. That would include prop-types which are not functions, e.g. string.\nSeeing as these are unlikely to change much, I think I'm happy with this, if you are?. I've given that a try \ud83d\ude04. Sorry, I'm not sure I understand this.\nFrom what I can see, the pragma util refers to instances where the code refers to an imported React, for example React.Fragment. I was using the example below as a point of reference:\nhttps://github.com/yannickcr/eslint-plugin-react/blob/4a72e6a0784f7cc7f16f4574ce7f14de55540a73/lib/rules/jsx-fragments.js#L97-L122\nI'm using this REACT_MODULE constant to determine when something is being imported from React, for example import { PropTypes } from React. Do I need to make changes to the pragma util in order to support this? Or is there something else I've missed here?\nThanks for your help with this PR, so far \ud83d\ude42 . ",
    "vdhieu": "@ljharb with the import name, too.\nActually I was used memo to name memorize-one package. I thought it might be because of the memorize-one so I created that memo function (as above) to test if it really because of the memorize-one\n. Ah, if I use other name the warning will gone.. ",
    "sarneeh": "\nYou can\u2019t possibly know it\u2019s unused statically - anything that imports Component could reference Component.prototype.someMethod or similar.\n\nI know that, but AFAIK it's not a good practice to reference React.Component static methods outside of the class component itself.\n\nSimilarly, you never directly use, say, componentDidUpdate, but React does - and there\u2019s no way for a general purpose linter to catch things like that.\n\nExactly - you never directly use those and you probably shouldn't also use other component methods outside of it. Knowing this you can filter out React-specific methods (componentDidUpdate etc.) and check if other methods are used in the class itself.. @ljharb Yeah! I'm sorry, maybe I wasn't specific enough about the request :) I've edited my first post to make it more clear.. ",
    "n-filatov": "Can i take this?. ",
    "monkindey": "It will be ok with this \njs\nconst value = this.isUpdatedByChange ? this.props.value: this.state.value;\nAnd it can pass for the non-destructuring form. It will be ok with this \njs\nconst value = this.isUpdatedByChange ? this.props.value: this.state.value;\nAnd it can pass for the non-destructuring form. Thanks. Thanks. ",
    "Br3nda": "5.14.1. 5.14.1. ",
    "PeterMerkert": "Well, I agree that adding in the README where it should be located helps.\nAnd further @Br3nda, I had the same issue and placing the settings key as the last entry in the eslintrc solved it for me.. ",
    "janryWang": "No matter how I configure it, it will print this error. @ljharb . No matter how I configure it, it will print this error. @ljharb . Warning: React version not specified in eslint-plugin-react settings.\n. I don't know where I changed, it just work.thanks \ud83d\ude05. I don't know where I changed, it just work.thanks \ud83d\ude05. ",
    "01taylop": "Oh, of course, I shouldn't work so late \ud83e\udd26\u200d\u2642\ufe0f . ",
    "spudly": "Flow\nOn Wed, Feb 27, 2019, 12:59 PM Jordan Harband notifications@github.com\nwrote:\n\nIs this TS or Flow?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/2179#issuecomment-467965582,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdunBYZlJV1-7y4QoqZ_6_Rw0HTec5Kks5vRsdmgaJpZM4bVHVF\n.\n. Flow\n\nOn Wed, Feb 27, 2019, 12:59 PM Jordan Harband notifications@github.com\nwrote:\n\nIs this TS or Flow?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/yannickcr/eslint-plugin-react/issues/2179#issuecomment-467965582,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAdunBYZlJV1-7y4QoqZ_6_Rw0HTec5Kks5vRsdmgaJpZM4bVHVF\n.\n. \n",
    "ericgio": "Thanks guys!. ",
    "ZYinMD": "For a quick test yourself, use this code:\n```\nimport React, { Component, PureComponent } from 'react';\nexport default class App extends Component {\n  state = {};\nhandleClick = () => {\n    this.setState({\n      foo: 'bar'\n    });\n  }\nrender() {\n    return (\n    \nre-render parent\n\n\n\n\n\n\n\n\n\n    );\n  }\n}\nconst Child1 = () => I re-renders when my parent does;\nclass Child2 extends PureComponent {\n  render() {\n    return I don't;\n  }\n}\n```\n. For a quick test yourself, use this code:\n```\nimport React, { Component, PureComponent } from 'react';\nexport default class App extends Component {\n  state = {};\nhandleClick = () => {\n    this.setState({\n      foo: 'bar'\n    });\n  }\nrender() {\n    return (\n    \nre-render parent\n\n\n\n\n\n\n\n\n\n    );\n  }\n}\nconst Child1 = () => I re-renders when my parent does;\nclass Child2 extends PureComponent {\n  render() {\n    return I don't;\n  }\n}\n```\n. Yes.. It was intended, so you could say it's not a bug, but it enforces something that's not ideal.. ",
    "sindresorhus": "Ah, it was not clear to me you used the prop-types package directly. I incorrectly assumed you had hard-coded the supported keys.. I think you meant (\\r\\n|\\r|\\n) or [\\r\\n] since brackets will match anything inside, even pipes. The best regex for line endings is simply \\r?\\n. It will match both CRLF and LF. Matching only CR is not needed as it's not used anymore.. ",
    "kevinwolfcr": "@alexzherdev sure, that's why I'd proposed to check if the react version supports hooks.\nTo be honest, I think maybe not everyone will be refactoring existing applications to hooks, but at least the majority will be using them on new apps.\nOr maybe a company wants to enforce the use of hooks and a new developer doesn't now about this convention, then he will have a warning (or error, depending on the configuration) about it.. ",
    "jordanbtucker": "This should probably be rebased with or merged into #1702.. I understand if you don't want to introduce a breaking change. An even more efficient yet compatible RegExp is ^(is|has)[A-Z]. I've updated the PR to reflect that. Let me know if you want me to squash the commits.\nI still disagree that isGood_Enough is intentionally allowed. The original RegExp appears to have meant to check the entire property name and it did not include any underscores. Note that the property name isA_$$$_Maker is also valid with the original RegExp. It seems odd to enforce a camelCase prefix and then allow snake_case for the rest of the property name.\nOne issue I still see with this improvement is that it makes it less clear what is intended. For example a user might see the lint error Prop name (enabled) doesn't match rule (^(is|has)[A-Z]) and conclude that boolean property names are only allowed to have one uppercase letter after is or has and nothing else. Alternatively, I can set the default RegExp to ^(is|has)[A-Z][A-Za-z0-9]*. This is less efficient than ^(is|has)[A-Z] but is still more efficient than the original and it is easier for humans to understand. However, this can also be misleading since users may think that it checks the entire property name.. ",
    "EricLambrecht": "You mean bar, right?\nI think the addition of something (even if not statically analyzable) to the propTypes should not prevent the rest of the propTypes from being statically analyzable, because it seems like this is the case.. I see! That's what I presumed. Thank you for clarifying that!\nI wonder if would make sense to make an option out of that:\n1. Ignore the spreaded objects, which could lead to false positives\n2. Treat the spread as \"all possible prop\" as it is right now.\nI don't know if that's worth the effort, though.. ",
    "rohan-deshpande": "I'm noticing something similar. I have the following rules set up\njson\n\"react/prop-types\": [\n  \"error\",\n  {\n    \"ignore\": [],\n    \"customValidators\": [],\n    \"skipUndeclared\": false\n  }\n],\nAnd the following component\njs\nconst Force = ({ type, emitterId, id, fx, fy, fz, life, easing, update }) => (\n  <Behaviour {...{ type, emitterId, id, easing, update }}>\n    <ControlsBlock>\n      <NumberInput\n        defaultValue={fx}\n        label=\"fx\"\n        onValueUpdate={fx => update(type, emitterId, id, { fx })}\n      />\n      <NumberInput\n        defaultValue={fy}\n        label=\"fy\"\n        onValueUpdate={fy => update(type, emitterId, id, { fy })}\n      />\n      <NumberInput\n        defaultValue={fz}\n        label=\"fz\"\n        onValueUpdate={fz => update(type, emitterId, id, { fz })}\n      />\n    </ControlsBlock>\n  </Behaviour>\n);\nDoes not cause any prop type validations to display errors. If I remove the spread object completely, the rules work again.. What you suggest is going against DRY quite a bit though and this is an extremely common React pattern so I don\u2019t think people are going to stop doing it. . ",
    "blainemuri": "By that definition, any function that returns jsx can be considered a \"component\" technically, but abstracting them out of the actual component doesn't necessarily solve the problem.\nProps are inherently defined in the parent class/file and thus the context would never change going to the children on what the props will be (children in this case being just the function). Additionally the props should be scoped to the rendered React element, which in this case is SomeComponent. renderComponent is not a react element. Expecting someone to double define proptypes in this case is a bit much.\nThe better solution is to exclude this case, or at a minimum give better logging as to where the proptypes need to be defined. Currently the error message will say that SomeComponent is missing propTypes, but it is not.. Then at a minimum the logging should be fixed. eslint-plugin-react, if it's assuming that it's a new component there, should log accordingly. It should not say that SomeComponent is missing proptypes, that's just incorrect. This isn't an issue of whether or not the coding style is correct, it's an issue of me having to dig into why the the plugin was pointing out missing props in the logging in a place where props weren't missing. The curious thing is why this issue would happen only when returning a function directly after the render. One would think that this error would also occur when a nested render is called (like in my second example) if it considers anything returning jsx to hold its own proptypes. ",
    "dtinth": "You might want to remove 2 spaces from these 3 lines\n. ",
    "baer": "Are you sure you meant to commit this?\n. ",
    "echenley": "Extra space before is easy?\n. ",
    "gitim": "yea, your solution is better, thanks, I'll fix this\n. Is this check is necessary? All tests pass without it.\n. I rewrote this with switch statement. I had an option to add another if statement or ternary operator to the last return, but switch seems more explicitly defining possible cases\n. ok, fixed\n. just put these declarations inside the function to reduce copy pasting\n. ah, sorry, just copy pasted and modified this case https://github.com/yannickcr/eslint-plugin-react/blob/master/tests/lib/rules/jsx-curly-spacing.js#L81-L86 \n. this test case was added in https://github.com/yannickcr/eslint-plugin-react/pull/584, and it seems that the issue wasn't related to babel-eslint parser, so I think it is safe to remove them both\n. ",
    "evcohen": "ah yes ill export from root directory too \ud83d\ude04 \n. True - you can move the logic outside of the prop value and just pass a var, but should probably just special case this to ignore. In this case, the rule is kinda pointless :)\n``` js\nrender() {\n   const prop = foo ? undefined : bar;\nreturn ;\n}\n```\n. that's not supposed to be there?!? \ud83d\ude1b \n. i didnt think react ignored null? i was under the impression that when passing down null, if you have a defaultProp set, it won't be set; whereas if a prop is undefined, the defaultProp is applied.\nfor reference: http://stackoverflow.com/questions/34809178/react-js-default-prop-is-not-used-with-null-is-passed\n. also re: following spread operator- if the above is true and you want to omit a value, we should probably ignore in the case that you want the defaultProp to be applied. or maybe this renders this rule futile because of that distinction.\n. ",
    "randycoulman": "It only matters because we break out of the for loop as soon as we find the rel attribute we're looking for.  I could add another test case, but it would pass on the old code, so doesn't illustrate the problem.  I didn't think it worth it at the time, but if you think it is, I'm happy to add it.\n. Good thought.  Added in 3db97e49912ce1cccffbbebb595d9bfb14f65512.\n. Do you want this as part of this PR, or should it be a separate one?  Feels unrelated to the bug IMO, but I'm willing to do it if you want.\n. I looked at this today.  There is a break inside the for loop which doesn't work in the forEach version.  I'm sure there's a way around that, but I think this should be in a separate PR.  I'd like to have this one considered done and merged (if acceptable).\n. I thought about doing that, but in looking through all of the tests in the project, there isn't a single other case where different parserOptions are used for different test cases.  There are eight other test cases that add experimentalObjectRestSpread: true to their top-level parserOptions, though.\nThat said, if you think it's important to establish a new pattern here, I'm happy to make the change.\n. I think you've got a valid point.\nBut I'm pretty big on code consistency, so I wonder if it would be better to do a separate PR with that change made in all of the cases like this.\n. Yes, this PR adds it here.  But there are eight other tests that include experimentalObjectRestSpread in their default parserOptions just like this one does.\nIf it's important to only set that option for certain test cases, then I think we should make that consistent across all of the tests that use that option.  That's why I suggested a separate PR to make that change.\n. We don't have a getAllRules() function here, but I'll take another run at this and see what I can come up with.  I agree that the duplicated knowledge of which rules are deprecated is not ideal.\n. @ljharb OK, here's what I came up with: 33aa4d5.  Let me know what you think.\n. I don't believe it needs to be.  It wasn't before - deprecatedRules was defined directly as:\njs\nvar deprecatedRules = {\n  'no-comment-textnodes': require('./lib/rules/no-comment-textnodes'),\n  'require-extension': require('./lib/rules/require-extension'),\n  'wrap-multilines': require('./lib/rules/wrap-multilines')\n};\nThe react/ prefix is only needed for activeRulesConfig, because those are used to define the all configuration, whereas rules and deprecatedRules both use the un-prefixed names.\n. Here's the relevant code from ESLint (from https://github.com/eslint/eslint/blob/master/lib/rules.js#L54-L63):\n`` js\nfunction importPlugin(plugin, pluginName) {\n    if (plugin.rules) {\n        Object.keys(plugin.rules).forEach(function(ruleId) {\n            const qualifiedRuleId =${pluginName}/${ruleId}`,\n                rule = plugin.rules[ruleId];\n        define(qualifiedRuleId, rule);\n    });\n}\n\n}\n```\nYou can see that it takes the responsibility of prefixing the plugin name.\n. ",
    "pl12133": "I'm not sure I understand, as that change makes the tests fail. It seems that if there is no space before the > then after fixing there should continue to be no space before the >.\nWould you prefer that the replacing value located in lib/rules/self-closing-comp.js - Line 88 be changed from \"/>\" to \" />\"?\n. Thank you for clarifying, I didn't realize the white space was part of the rule. I have added that behavior now. Do you specifically want to enforce a single white space character, or would multiple be valid? For example, would the following be invalid:\njs\n<Foo  /> // double white space\n. Good catch @tleunen, I have now tested this rule with jsx-space-before-closing which is also fixable, and both of these fixes are working together to fix all warnings when using my initial commit. Adding a white space may be beyond the scope of this rule, as that is better left to the fix implemented in jsx-space-before-closing.\nIf you and @ljharb agree after your own testing that the fix for jsx-space-before-closing works well with this fix, then I think f6cc36a should be reverted.\nAlso from our discussion I noticed that the jsx-space-before-closing documentation is missing the Fixable notice, I can add that to this PR if you like.\n. Great, and to be clear here is how I'm seeing the two rules interact:\nWith  'react/jsx-space-before-closing': [2, 'never']:\nInitial: <Foo></Foo>\nFixed: <Foo/>\nWith  'react/jsx-space-before-closing': 2:\nInitial: <Foo></Foo>\nFixed: <Foo />\nI have now reverted f6cc36a and updated documentation for jsx-space-before-closing page.\n. I reverted because white space considerations seem outside the scope of this rule. When running --fix the linter will first find the warning for self-closing-comp and fix it. The linter will then be run again against the code with fixed self-closing-comp rule, and apply the fix for jsx-space-before-closing. So it seems that white space and closing tags are unrelated, and this way the fixes for the two rules work together to give the result of producing a self-closing tag with the appropriate white space.\n. I believe that is the only ordering possible, because the jsx-space-before-closing rule does not produce a warning unless there is a self-closing tag. This obviously cannot happen if self-closing-comp is in violation, because that rule implies there is no self-closing tag. Therefore I think it is impossible for jsx-space-before-closing to produce an error on the same node as self-closing-comp, and the warning conditions for the two rules are mutually exclusive.\n. I see, in that case I can re-commit the white space character before a self-closing tag. Should there be any other behavior for white space than what is in f6cc36a?\n. Sounds good, let me know if you want commits squashed before merging.\n. ",
    "kentor": "sure thing\n. That would be handled by the existing multiline option. This is the multiline-multiprop option which does not warn because there is only 1 prop, but would if there are >= 2 props\nI wanted this option to allow something like this:\njsx\n<Hello style={{\n  'background': 'black',\n}} />\nbut not\njsx\n<Hello style={{\n  'background': 'black',\n}} secondProp />\nto fix the second case one would do (at a minimum):\njsx\n<Hello \n  style={{\n    'background': 'black',\n  }} secondProp />\nif the jsx-max-props-per-line rule is also enforced, then one would additionally have to move secondProp to its own line\njsx\n<Hello \n  style={{\n    'background': 'black',\n  }} \n  secondProp \n/>\n. fixed\n. ok sure\n. I don't personally have a use case of multiple replacements, but yeah your custom message suggestion would make specifying multiple replacements obsolete.\n. I like this suggestion. The only thing is I don't want to use the word component because to me that means a  react component which excludes simple DOM nodes. I like to use element because the it aligns with React.createElement()\n. Sounds reasonable. \n. If we specify forbid: ['Modal'], then for which of these do we warn?\njs\nReact.createElement('Modal');\nReact.createElement(Modal);\nor with forbid: ['button'], which one?\njs\nReact.createElement(button);\nReact.createElement('button');\ni think we should follow the same rules as JSX when translating names into either strings or identifiers\n. If we consider React.createElement calls that can be mapped back to JSX as \"valid\", then  React.createElement('Modal'), and React.createElement(button) would not be valid.\n<Modal /> translates to React.createElement(Modal), and there's no way that I know that we can get it to translate to React.createElement('Modal').\nThat's why I think this rule should not bother to make checks that cannot be mapped back to JSX, and can be left to a different rule that checks for createElement validity\n. Sorry, made some typos earlier. I guess I am arguing for two things:\n1) If 'button' is forbidden, I don't think this rule should stop someone from doing const button = 'div'; React.createElement(button) because that looks like that's done for a reason other than to circumvent the rule (otherwise they would just use eslint-ignore).\n2) In general:\n- if 'button' is forbidden, then the rule should check for React.createElement('button') and ignore  React.createElement(button)\n- if 'Modal' is forbidden, then the rule should check for React.createElement(Modal) and ignore React.createElement('Modal').\n- if 'a.b' is forbidden, then the rule should check for React.createElement(a.b) and ignore React.createElement('a.b').\n- if '_a' is forbidden, then the rule should check for React.createElement(_a) and ignore React.createElement('_a')\nbecause this aligns with how React translates JSX element names into createElement calls\nbabel example: https://goo.gl/ALVt2s\n. Not sure. It's valid if we're talking yaml, but not if it's json/js format.. ",
    "iancmyers": "@lencioni Looks like eslint-plugin-import has the named rule which would ensure that named imports are also named exports: https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/named.md. I believe that MemberExpression and ObjectPattern will always at least have a parent of Program.. ",
    "rjbailey": "Yep, every MemberExpression should have a property AFAIK. It may not have a name (if it's computed), but it won't crash.\nIf we used getName(node.property) === 'state' instead we'd also handle the computed case (so we'd detect uses like this['state']). Looks like I forgot to do that here :). ",
    "Calyhre": "Pragma would match if there is other thing than React.* used right?\nI don't think it should match if this is from another object than React.. Got it \ud83d\udc4d  PR updated. ",
    "SeanHayes": "I wasn't sure how to get this working with React.createElement(), thought I'd figure it out after getting some feedback.. I'm not sure, but it's done this way in lib/rules/void-dom-elements-no-children.js.. I've updated this code to use a regex for both literal spaces and nbsp.. ",
    "gfx": "the guard is for guard-for-in.. in forEach(), only there's onlyreturn available to control loops, but this loop needs return, continue and breaks, so forEach() is not suitable.. Right!\nFixed 664e5df. IMO your review seems right and the conditions are too complex; I also prefer to re-write them with ES2015 features.\nRefactored in 89c33b6. ",
    "kokobeware": "Yup, a different rule that checks for required parameters to React methods would be good. Maybe it could even give a hint on the order and nature of the parameters without needing to go to the docs.. ",
    "vonovak": "@ljharb not quite sure what you mean here. Having the arrow function assigned as a class property is the recommended approach.. ** recommended approach if one needs to preserve the this of a component, which is not always needed. Or is that otherwise? Yes, as for rendering, arrow functions that are not created in render won't trigger a re-render so this description should be fine.. @ljharb what do you mean by \"the meat of the function can be optimized.\"? Can you point me to some resource that explains this?. ",
    "brgibson": "updated the comment and fixed typo:\n\"component with no declared props followed by a failing component\". I was just following the pattern in the rest of the file, I have deleted it now though, since it does seem unnecessary \ud83d\udc4d . ",
    "cbengtson85": "Will update it this evening! . ",
    "SimenB": "node.object.type === 'MemberExpression' is asserted twice. Sure: #1502. ",
    "kevinzwhuang": "You're right, I'll take out the parser line and leave the test cases using the default parser. ",
    "Arcanemagus": "Fixed.. ",
    "jeffhandley": "@yannickcr Since this is being newly introduced, is it a breaking change for \"never\" to be the default?. Small typo: If \"never\", them should be If \"never\", then. What is the behavior when the tag is indented like this?\njsx\n    <Hello\n        firstName=\"John\"\n    >. :100:. ",
    "zhaozhiming": "Yes, it's not good. But I found a test case use {...other} should props be marked as used.\nThis test case and <div {... someRandomThing} /> seems have conflict.\nhttps://github.com/yannickcr/eslint-plugin-react/blob/8237551309e2beaaa751d3d3fcc8bdb15e0f9a1b/tests/lib/rules/no-unused-prop-types.js#L756-L763. I debug into the method JSXSpreadAttribute.\nBoth the 2 test case as below the parameter node object are the same.\nIt seems difficult to use the node object to check it resolve to the props object or not.\nCould you give me some suggestions? \nThanks. @ljharb \n``js\n// props should be marked as used\nrender() {\n  var {...other} = this.props;\n  render (<div {...other} />); //nodeobject is{...other}`\n// props should be marked as unused\nrender() {\n  const other = [{ className: 'foo' }];\n  render ();  // node object is {...other} too\n``  . My thought is: \n1. find all nodes relate with the jsx spread attribute name (which node name is equal with the jsx spread attribute name, such asother) in the component.\n2. check every related node whether resolves to the props object or not.\n3. if yes, set theignorePropsValidation` to true and break loop.\nBut I'm not familiar with AST. I think it's difficult for me to handle this problem \ud83d\ude02.\nMaybe I need someone help.. Perhaps we could make the rule a bit looser.\nThe case as below should be marked as used, others are not: \n {...this.props}\n {...props} (not matter what props is). ",
    "ronanmathew": "While not strictly necessary it allows use of this.props in the constructor and is suggested best practice by the React docs:\n\"Class components should always call the base constructor with props.\"\n- https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class. Comments addressed @ljharb. Anything else or are you happy to merge?. ",
    "asapach": "\nmethods defined when defining a component\n\nPhrasing could be improved.. no-deprecated is in 'Best Practices' category - maybe change it for consistency?. How about recommending componentDidMount() (or UNSAFE_componentWillMount() as a temporary measure)?. So for the sake of consistency this PR should deprecate the 3 life-cycle methods in favor of their UNSAFE_* counterparts and a future PR should deprecate the unsafe methods completely (after React 17)? Correct?. ",
    "yenshih": "It will be better to put getDerivedStateFromProps right before static, since it's a static lifecycle.. ",
    "pcorpet": "I couldn't find a case where node.value has a property but no object. But I added a guard anyways.. ",
    "sahrens": "Why not suggest getDerivedStateFromProps? And why not lint against UNSAFE_ lifecycle methods?. What's the point of linting against componentWillReceiveProps if we're just going to recommend UNSAFE_componentWillReceiveProps anyway? Both are equally bad, no? They do the exact same thing, just one has a scary name.. To clarify, you don't think we should lint against using any UNSAFE_ methods, even if we don't give a specific recommendation of what to use instead? Seems like linting against them earlier rather than later would help folks track down and remove usage before they start firing a bunch of deprecation warnings.. Perhaps it would make more sense to make a new \"strict-mode\" lint rule? Any plans in that direction?. ",
    "finnp": "Good point, I added test cases for this. Also there was already a bug that cause the linting to fail on PropTypes.shape(). I included this fix: https://github.com/yannickcr/eslint-plugin-react/pull/1842. ",
    "MrHen": "Yeah, me too. I can add explicit output for the tests touched by this PR tonight.. Yes. I find mixing && and || harder to read but if you prefer it that way I can switch it back.. Apparently I didn't quite understand how the nodes worked with whitespace. I had to break this up into separate functions since the newlines were getting attached to the previous token.. See my earlier comment: \nhttps://github.com/yannickcr/eslint-plugin-react/pull/1984#issue-215844164\nMy first attempts at fixing this caused extraneous newlines to disappear which seemed like an undesired side-effect of this particular rule. The extra newline isn't being added by the fix -- its in the original test condition. The test is making sure the extra newline is not being stripped.. ",
    "mikkelrd": "I think that would be flexible enough. May I ask why you don't like it more open-ended?. Also, are you referring to allowing wildcard only at the beginning of the string? End? Both? Multiple? E.g. *Icon*. ",
    "bsonntag": "Did you mean method === node.key.name?\nAlso, does it make sense to do both checks? What we want to do here is check if the current node is a static lifecycle method.\nI'm using .toLowerCase() so that this is caught sooner by the user. For example, the following code would give two errors (note: I should add a test for this):\njs\nclass Foo extends Component {\n  GetDerivedStateFromProps() {}\n}\nOne for the typo and other for the missing static keyword.\nIf instead we do method === node.key.name, the user will first only see the typo error, and after fixing it would see the missing static keyword error.. I added a test to check that static getDerivedStateFromProps is valid.\nRegarding the second, there is already a test that checks static GetDerivedStateFromProps is invalid. Is it necessary to check static getDERIVEDStateFromProps too?. But I'm not reporting typos on the name here, I'm reporting missing static keywords.. Yes, the other check covers that.. ",
    "MohammedEssehemy": "If I retype the same condition as \nif (condition) {  const { foo } = this.state; }\nthe linter would accept this; \nbut if I type:\nconst {foo} = condition? this.state : {};\nI will get unused field state, although the two are the same and the state field is unused if the condition is falsy.. Actually, I don't agree with that, I don't consider this as bug, there are punch of cases where you need to conditionally get field from state.\nIMO the linting rule applies on static analysis of code, so is a field will be sometimes used based on dynamic conditions, it should be considered as used.. compare this\n\nyou should always be unconditionally extracting from state, and then conditionally using those values.\n\njavascript\nconst { foo } = this.state;\nif(condition) {\n // use foo\n}\nwith \njavascript\nif(condition) {\nconst { foo } = this.state;\n // use foo\n}\n you first comment still applies for both cases.\n\nbut if the condition isn't \"always true\", then the state is unused in some cases, so it's appropriate for the rule to warn about it.\n\nbut, in the first form when condition is false, I created a variable (foo) although I might not use it at all, I think the second approach would be better for resources.\n. ",
    "drx": "Good question. I checked and AST that typescript-eslint-parser generates for function Hello(props: {name: string}) {...} is:\nFunctionDeclaration\n  TSTypeAnnotation\n    TSTypeLiteral\n      TSPropertySignature\n        Identifier\n        TSStringKeyword\nso it's safe.. ",
    "dmason30": "Everything, I have done so far has been based on looking at and learning from other rules. The fixable code in the other rules looks like a lot of trial and error.\nI had a go at putting something together but there just doesn't seem to be an efficient way to get the value/return value of the property/function and then to create a new node in the correct position. I ended up getting lost in conditions. \nI did mention in the OP that making it fixable is nice to have but I feel more experienced hands with this codebase would know how to write an fixer for this in the best way.. I think leaving it as a follow up is best. I make no promises that it will be me \ud83d\ude04 . "
}