{
    "adamvr": "Done!\n. This major rewrite should have fixed it.\n. Done!\n. Fix't\n. Yeesh, should've linted it. Thanks!\n. Not sure what the problem is, I can parse payload JSON just fine.\n```\nvar mqtt = require('../lib/mqtt');\nmqtt.createClient(1883, 'localhost', function(client) {\n    client.connect();\n    client.on('connack', function(packet) {\n        client.subscribe({\n            topic: 'test'\n        });\n    client.publish({\n        topic: 'test',\n        payload: JSON.stringify({\n            keyone: 'one',\n            keytwo: 'two'\n        })\n    });\n\n    client.on('publish', function(packet) {\n        var json = JSON.parse(packet.payload);\n\n        console.log(packet.payload); // {\"keyone\": \"one\", \"keytwo\": \"two\"}\n\n        // Key: keyone, Value: one\n        // Key: keytwo, value: two\n        for (var k in json) {\n            var v = json[k];\n            console.log('Key: %s, Value: %s', k, v);\n        }\n        client.disconnect();\n    });\n});\n\n});\n```\n. That for loop is going to spawn a few clients. Is that the problem?\n. Yeah, you're calling createClient three times so there's going to be three separate connect packets sent.\n. Thanks Bergie!\n. Excellent. Cheers!\n. Right you are. Fixed.\n. Thanks again Ori!\n. Didn't notice that one. Cheers!\n. Okay, fixed. It's probably a bad idea to have a default client at all though.\n. Yeah, I changed the API to move it in line with normal nodejs practice. Have a look at issue 11.\nThanks anyway though, docs are updated now!\n. Sorry about sitting on this for a while without a response Ori, it's taken me a while to decide what to do with it.\nNow, my thinking is that mqtt_pub and _sub aren't really worth putting any effort into. I only really keep them around as examples and if I ever want to actually pub or sub anything I defer to mosquitto_pub and _sub. \nAs to the ssl stuff, I'm not sure if it's the same but we have mqtt#createSecureClient now.\nThanks for the contribution though!\n. You're right, QOS_MASK should be 0x06, rather than 0x05.\nA couple of qos >= 0 tests scripts are here: https://gist.github.com/2920833\nCheers!\n. Cheers! I hadn't looked at those in ages.\n. Should be fixed now, thanks Andy!\n. Right you are. This was in the todos, just something I hadn't gotten around to yet. Cheers!\n. I hope we've got them all now! Thanks @mcollina!\n. Quite right, the default client ID is pretty badly done. I've fixed it, but really if you want non-colliding client ID names you should probably generate them yourself and pass them in as arguments to connect, as @radekg has said.\n. Thanks radekg, consider it merged!\nIs that var nulling necessary though? I'm not an expert on javascript scope, but I would have assumed that the vars would be cleaned up when the function exits.\nCheers!\n. Cheers @kmpm!  I've been meaning to do this for a while now\n. Since this library is so low level, I've left this kind of plumbing in the hands of users (cf. mqtt-growl). It's super boilerplatey if you want to use the library for standard stuff though, you have to handle pingreq/resps, qos, and connection/connacks manually, so I'm currently hacking on a higher level api for it. Check back soon!\n. It might also be worth noting that some brokers (I'm thinking of mosquitto in particular) add a grace period on top of the keepalive before the broker cuts the connection. This is why you might see in some places pingreq periods equal to the keepalive.\n. Fixed!\n. That's strange, the only problem I was having with keepalive = 1 was that it sometimes timed out. Which version of mosquitto are you on?\n. Is MqttClient throwing any errors? Another problem I have is that if you set keepalive to 0 (i.e. no pings) it will try to do a ping before the underlying socket connects and complains that the socket isn't open. Maybe it's something to do with that?\n. Oh, I didn't realise that Buffer.concat wasn't there all along. Sadly, I think we'll have to support it since 0.6 is what's in the apt repositories.\nCheers!\n. Rewritten using buffer.writes instead of buffer.concat. See #44\n. Oh, that makes me sad. Bind is so tidy.\nOkay, I'll see what I can do!\n. Sure is! Offline messages were the next big improvement I had planned and auto reconnects should tie into those nicely. And it should help with the race condition we seem to have in #37\n. Cheers!\n. Rewritten using buffer.writes\n. https://gist.github.com/adamvr/5098647\n. Closed by #101 \n. Related to #102 \n. I reckon 0.3.0 is getting pretty fat now, so let's just push it and add this in 0.3.x. It's not going to be an api change so I think that should be fine. Same for #126 I suppose.\n. Haha, great minds! :beers:\n. This undoes some of 23ff7d9 but I think it's a legitimate space vs. speed tradeoff. The only time you're likely to see the buffer growing out of control is if you point it at something like mqtt://test.mosquitto.org/#, and even then it's however much net.Socket is allowed to throw at you at one time.\nOn the other hand, if that does happen we have a whole lot of wasted buffer space. Perhaps it's worth thinking about shrinking the buffer if we haven't seen data for a while.\n. https://gist.github.com/adamvr/5106632#file-results\n. Vielen dank!\n. Update on this, it now emits these additional parameters as an object (the original publish packet, incidentally), so using it looks a little more like:\nclient.on('message', function(topic, message, etc) {\n  var qos = etc.qos\n     , retain = etc.qos\n     , mid = etc.messageId;\n    // And so on\n});\n. Ha, I was just starting to work on this! Massive improvements!\nhttps://gist.github.com/adamvr/5106632#file-0-2-4-results\n:beers:\n. On it!\n. The trouble is that the socket api requires that we supply either a buffer or a string, not just bare bytes.\nWorkarounds:\n- stream.write(String.fromCharCode(byte)) - hilariously slow, probably 10x slower than the others\n- stream.write(new Buffer([byte])) - about the same as below, but unnecessarily creates an array that needs to be gc'd later.\n- var b = new Buffer(1); b[0] = byte; stream.write(b); - fastest, but exacerbating the problem.\nAlternatively we could have just one 'outgoing' buffer which we reuse. The problem here is that we'll always need to do a buffer.slice before we write which creates another buffer anyway. Hoooo....\nAny other ideas?\n. Ah, that explains a lot. Looks like we need to squeeze somewhere else!\nCheers!\n. Cheers!\n. Weird:\n\nAdding a 'data' event handler, or calling pause() or resume() will switch into \"old mode\".\n. It's in there, but it's in the wrong place. Currently helping @andypiper with getting it in the right place.\n. That's fantastic! Thanks!\n\nWhat's the situation for node <0.8?\n. Okay, I'll have a look\n. Probably due to poorly written tests, changes when order of tests changes.\n. Mysterious! Let's just call it passing for now. I'm going to rewrite those tests to use just plain streams anyway.\n. I hate to do it, but I think it's probably better if we drop node <v0.7.11 support. If anybody really needs it, open an issue! \n. I can't remember, was this fixed by #64?\n. Oh, right!\n. Thanks again Matteo! #60 is still there, so I guess it's an unrelated problem.\n. Yep! The old api is accessible through mqtt.createConnection, but I would recommend using createClient\n. Cheers Paul, totally forgot about those.\n. Yep, the whole remaining length business is a big headache. While I can understand the rationale, I think it's one of the biggest weaknesses in protocol.\nBugs: yep, most of those should be fixed by @mcollina's patch.\nMQTT over UDP: this is really what it's designed to do, and I'm surprised that nobody's really touched it yet. The protocol has all this stuff for reliable transmission and making sure clients are alive and it really isn't necessary if you have a tcp connection. \nThanks for the contribution and don't hesitate to drop me an email if you have any ideas!\n. Thanks!\n. Thanks!\n. I don't think I've ever touched the secureClient stuff (other than to refactor it). I'll take your word that this is right!\n. Hah, yeah I was wondering when that one would come up. @mcollina yep, you're in now!\nThanks guys!\n. Make it so, Mr. Collina!\n. The other problem with 2 is that puback/comp are only concerned with receipt of the message at the mqtt level. I guess you could say that if it gets lost between the mqtt client and the message queue, that's your problem. Nice idea though!\n. Nice one, thanks!\n. Yeesh, that's a pretty obvious one. Thanks!\n. There's some in examples/client and in the readme now. Sorry about the confusion!\n. Another long overdue thing. Well it's done now!\n. I don't think I'll be supporting that at the MqttClient level, since it uglies up the api some. One of the goals of v0.2.0 was to make the client api less hideous and I think allowing something like client.subscribe([{topic: 'asdf', qos: 1}, {topic: 'fasdf', qos: 2}]); doesn't help. If it's really, really necessary, you can always use MqttConnection!\n. Cheers!\n. Yes >_>\n. Thanks travis!\n. Yep, there's two types of client now. MqttConnections are like the old clients (minus a few features like string only subscriptions) and MqttClients are more full featured\nhttps://github.com/adamvr/MQTT.js/wiki/migration#mqttcreateclient-and-mqttcreateconnection\n. Oops, I didn't mean to close the issue. Let me know if that was the problem!\n. Are you using the npm version on cloning from the repo? Those examples won't work with what is currently in npm, unfortunately.\n. Any chance you could share your code?\n. Quoting @reneklootwijk from other issue:\nI modified one of your examples:\n```\nvar mqtt = require('mqtt')\nmqttClient = mqtt.createClient(\n    1883,\n    ,\n    {\n        protocolId: 'MQIsdp',\n        protocolVersion: 3,\n        keepalive: 300,\n        will: {\n            topic: 'test',\n            payload: 'test message',\n            qos: 0\n        },\n        clientId: 'testclient'\n    }\n);\nmqttClient.subscribe('messages');\nmqttClient.publish('messages', 'hello me!');\nmqttClient.on('message', function (topic, message) {\n  console.log(message);\n});\nmqttClient.end();\n```\nThis works, but as soon as you remove the qos: 0 from the will, it will fail.\n. There's no good way to make that a non-compulsory argument. You'll have to specify it, unfortunately.\n. So let's say our default arguments object looks like:\n{ clientId: 'mqtt' + 'random junk',\n  protocolId: 'MQIsdp',\n  protocolVersion: 3,\n  keepalive: 3000,\n  will: {\n    qos: 0\n  }\n}\nIf that's the case, it will try to generate a will with an empty topic and payload.\n. I was going to say no to this, but then I realised that it means removing code rather than adding it. Consider it done!\n. Thanks guys!\n. client_test.js and evict.js are cruft that are left over from the old api. They're gone now. What are you trying to do?\n. Check out examples/client now. If you're benchmarking, I wouldn't use the server examples. They're 5 minute hacks and are by no means optimised. It would be best if you ran up your own instance of mosquitto and tested against that.\n. The client will run until you call #end() on it. You can find mosquitto at http://mosquitto.org and there's a test mqtt server running on test.mosquitto.org. So you can connect to it using mqtt.createClient(1883, 'test.mosquitto.org')\n. @davedoesdev Any chance you have a script to reproduce this?\n. It's pretty clear what the problem is though - the parsing code hasn't been updated properly to include that ${property}_and_length stuff. It's currently: \n/* Parse protocol id */\nprotocol_and_len = parse_string(buf, len, pos);\npacket.protocolId = protocol_and_len[0];\nif(packet.protocolId === null) return null;\npos += protocol_and_len[1] + 2;\nand it should be:\nprotocol_and_len = parse_string(buf, len, pos);\nif (!protocol_and_len) return new Error('Can't parse protocol!');\npacket.protocolId = protocol_and_len[0];\npos += protocol_and_len[1] + 2;\nBad bad bad.\n. #94 \n. What part of parse#publish is still raising an exception? I would have thought all of those moles would have been whacked by #94, or is it a different problem?\n. Try-catch? In the most called function in the library? :scream:\nSo the solutions as I see them are (in order of my personal preference):\n1. Strongly discourage throwing exceptions in event handlers. Unfortunately not really feasible. We could probably rewrite some of the parsing stuff to make it suffer a little less but there's not really a good way to continue parsing already received data after an exception. Maybe something like process.on('uncaughtException', function() { if (client.stream.readable) client.parse(); } )?\n2. Domains - This means no pre v0.8 support or a hybrid (e.g. use domains when requireable, try catch if not). That ship has probably already sailed with readable-stream though.\n3. Vanilla try-catch.\nI'm keen to experiment with these domain things. What do you guys reckon?\n. No votes for 'encourage proper exception handling by breaking violently'? Okay, I'll have poke around domains.\n. Okay, here are the situations when this might come up:\n1. Handler throws its own exceptions and deals with them itself - not our problem, doesn't cause us problems\nclient.on('publish', function(packet) {\n      try {\n         throw 'error!';\n      catch(e) {\n         //\n     }\n   });\n2. Handler throws exception and it bubbles up to uncaughtException - not (really) our problem, causes us to stop parsing until the next packet comes (or stream becomes readable again, somehow)\nclient.on('publish', function(packet) {\n       throw 'error!';\n   });\n   process.on('uncaughtException', function() { console.log('proceed!'); });\nSo as I see it, user thrown exceptions aren't our responsibility. If it hits the uncaughtException handler other parts of the app are going to be invalid states anyway and as the docs say\n\nDon't use it, use domains instead. If you do use it, restart your application after every unhandled exception!\n\nAm I missing anything here?\n. Naturally, it's not the same case with MqttConnections, since there's more to do there (restart timers, reconnect, etc.) but it seems to me that thrown exceptions should be handled as close as possible to where they were thrown from.\n. With regards to connection problems - they're swallowed now (since the whole automatic reconnection thing results in a million econnrefused and epipes) so they should be fairly tolerant now.\nThis means the only errors that can be produced by mqttclients are now only user errors (e.g. bad arguments) or bad server errors (e.g. can't parse messages).\nIf you think you're going to do either of those things, you can always wrap your mqttclients in domains:\nvar d = require('domain').create()\n    , client = require('mqtt').createClient();\nd.add(client);\nd.on('error', console.dir);\nclient.on('connect', ...);\n. Oh, and if you're throwing exceptions in event handlers (which you should only really be doing if you want to crash the app, in event of an unrecoverable error or something) it's on you to handle that as well, either through domains or wrapping the parts of the handler that throw in a try-catch block.\nNice discussion though! Thanks @davedoesdev @mcollina!\n. Closes #90 \n. Ha! I wrote exactly this yesterday! https://github.com/adamvr/bearded-dangerzone\nGo for it, though! I'd be happy to take a look.\n. It's not part of the public MqttClient api.\nhttps://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L372-398\n. You're not \"allowed to\" change how the client responds to connacks according to the api. Therefore it isn't documented in the api.\n. The connect event doesn't have any arguments.\nSee: https://github.com/adamvr/MQTT.js/wiki/client#event-connect\n. Connacks only have one parameter (the return code) and it's exposed on error. If you really want to see the raw connack packet, do a client.conn.on('connack', ...) or use MqttConnections.\n. @Watke I'm still not sure what you're trying to achieve with this connack stuff. The idea of the high level API is that you should't need to care about these low level problems like connacks, qos control, pinging etc. (that is, unless something goes wrong). As @mcollina said, if you really, really need to worry about them (and it most cases you don't), you should use mqtt#createConnection.\n@mcollina It's already not documented in the API spec so I'm not sure how I can push it any further out of the public api. I reckon it's nice to still have it available for testing/debugging/hacking purposes. Prepend an _, perhaps? As to the google group - I think it's okay to have everything on here still. The noise level is still okay and I would probably never check it ;)\nThis does raise the issue of how the client should behave if it connects to something that isn't an mqtt broker. #99\n. I haven't quite addressed that yet. This just fixes the connection being in a weird state if a handler throws. It'll resume parsing when the stream goes readable again.\n. Not to be merged yet, here for visibility and criticism.\n. @carlhoerberg Maybe I'll add retry time later, but probably not something like a backoff. Way too complicated!\n@mcollina #102!\n. Still to come: flip the clean start connect flag if we're reconnecting. It's always false now anyway, so maybe it isn't necessary. Let the user specify in the connect options?\n. That'll do for now I think.\n. Gah, I never pay attention to the examples. Thanks!\n. Cheers!\n. Looks like the wrong version of node. You need to run it with node >0.8. That Buffer.concat method doesn't exist in old versions.\n. Yep, I'd say so. As to time between attempts, it's already supported, just not documented. See https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L355 and #108\n. Yeah, this was just a cut corner to get things working quickly. Perhaps a setEncoding method on Connection?\n. 'What was disconnecting for again Adam?' 'I don't know, it's probably not important'\nThanks again Matteo.\n. I rereleased it as 0.2.10. I think you're right about this semver thing.\n. I'm not sure about suppressing them if they're not user driven but I definitely plan to add something like reconnect and offline. \n. It is, admittedly, a bit of a pain in the arse to have to check client.disconnecting on every close to see if it's actually going to stay disconnected. What's your use case for it, outside of cleaning up once the client disconnects?\n. @mcollina I'm unsure about the stream builder thing. Is there actually a problem with reusing the same socket?\n. Aha, okay. I guess I'll defer to you then. Make it so, Mr. Collina!\n. p.s. node_redis just calls connect again on the socket as far as I can tell. See https://github.com/mranney/node_redis/blob/master/index.js#L479-494\n. Is it actually necessary to have a full pipe, though? I mean, the only information the parser needs to know from the stream is the data coming out of it, not whether or not the stream is connected, disconnected, closing, piping or whatever. I'm having good (passing tests) results just doing something like:\nthis.stream.on('readable', function() {\n   var chunk = that.stream.read();\n   that.parser.write(chunk);\n}\nAny chance you could gist your benchmarks so I can test that against them?\nAs to the version number, I don't know. I would probably put it in the 0.2.x since it isn't an API changing change (externally, anyway. I'm sure the few if any people who do new MqttClient are going to be right confused), but you're right that we probably should have bumped reconnection/offline into 0.3.0.\n. @mcollina Looks good! Feel free to pull in #111 and publish it as 0.3.0. \n. :+1: setEncoding(null) was super ugly.\n. :+1: to connections as streams, duplex, writable or otherwise. Much more portable. As to the createX methods, what is your alternative @mcollina? Would we do something like:\n```\nvar conn = new mqtt.Connection()\n    , sock = net.connect(1883, 'localhost');\nsock.pipe(conn);\nconn.on('connect', ...)\n```\nThat seems to me to be more complex, unless I'm missing something here.\n. Yes yes yes!\n. Connection level errors are echoed by the MqttClients, so you can handle them by listening to the error event:\nclient.on('error', function(err) { \n   console.dir(err); \n });\nHope that helps!\n. Looks great! I always hated that new Buffer([...]) crap. What's the decision on binary being default? It sounds good to me but I'm sure someone's going to freak out about having buffers coming out of .on('message').\n. :+1: for an options object, so we can add more options later. I think the secureserver API wasn't very well thought out.\n. Should consider giving the same treatment to the secureClients.\n. Let's save it until 0.4, I'd like the client and server apis to match before releasing this anyway.\n. Yeah, the timer dependent stuff really sucks, particularly on travis.\nOn calling _reconnect: I think a better idea is to kill the connection and let reconnect kick in automatically, so that reconnect options are respected. \n. :+1: Fine by me\n. I would think that we're already supporting it. parse.connect makes no assumptions about the length of the protocol name field, generate.connect happily takes any string for a protocol name and to the best of my knowledge, none of the higher level code makes any assumptions about the value of the name field (we don't every say something like, \"the protocol name isn't mqisdp, better disconnect\").\nAm I missing something here?\n. That sounds about right. I was having some issues with it timing out when it was just 1000, particularly for short keepalives. It should work correctly with 1000 for a sensible length keepalive.\n. Correct - the publish call back, as it turns out, has no arguments. It purely acts as a notification of the publish qos chain completing.\n. Should check this for performance. If it isn't any good we could move it to Connection's prototype or pass in encoding (and possibly others) as arguments\n. Or that. Are there actually any performance issues with using call?\n. ",
    "ghost": "Yes!\n. I think I've over-simplified it.  Had to do with Base64 encoding of one of the values (via StackOverflow).  Thanks!  Needed a sanity check, ha.\n. I'm confused, then.\nhttps://github.com/adamvr/MQTT.js/issues/1\n. Got it. I see that .1 is not supported, it just happened to work in earlier versions. Thanks!\n. I am kinda a beginner at Node.js.\nBut, let me try it.\nCould you take at look at it when you are free?\nThank you!\n. I made some changes. So, now I successfully extract HEX without any unexpected change. However, I have another problem for outgoing messages. I created buffer and put HEX numbers into the buffer and tried to send it. However, the MQTT seems to not allow me to do that if a message contains a weird char. Let me keep taking a look at it.\nBy the way, I am going to use your MQTT library with the changes I made. I will submit a pull-request with some more fixes sometime. But for now, I will use it for my project, Is it ok?\n. Alright, let me try mosca. Thank you.\n. PR ready, dont'have time for a test now, maybe another day. \nI don't think it's a best possible fix anyway.\nThe code just mixes host with hostname somewhere and reconnects to the same host all the time, istead of rotating\n. Test added. Works for me..\n. Ok now it tests it.\nI changed existing test, it was checking if client reconnect to second server, but wasnt checking hostname param\n. I am using mqtt.js with TypeScript. I can contribute if you need my help.. And DefinitelyTypes repo must be updated as well.\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/mqtt. I installed mqtt 2.5.0 by \"npm install mqtt\", but type definition files are not provided.. * I have \"\\node_modules\\mqtt\\types\".\n* I am using the follwoing modules.\n\"mqtt\": \"^2.5.2\",\n    \"typescript\": \"^2.2.2\",. My tsconfig.json is as follows.\n{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"es2015.promise\", \"es2015.collection\", \"es5\", \"es6\"],\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noImplicitThis\": true,\n    \"noUnusedLocals\": true,\n    \"alwaysStrict\": true,\n    \"strictNullChecks\": true,\n    \"sourceMap\": true,\n    \"types\": [\n        \"mocha\"\n    ],\n    \"outDir\": \"./dist\"\n  },\n  \"exclude\": [\n      \"node_modules\"\n  ],\n  \"include\": [\n     \"src/**/*.ts\",\n     \"test/**/*.ts\"\n  ]\n}\nThe result of trace resolution is like this. The tsc compiler is trying to search the module in node_modules/@types/mqtt.d.ts. But not in node_modules/mqtt/types/index.d.ts.\nMaybe this is an related to module resolution setting in tsconfig.json.\n$ $(npm bin)/tsc -p . --traceResolution\n======== Resolving module 'mqtt' from 'D:/work/xx.ts'. ========\nModule resolution kind is not specified, using 'Classic'.\n....\nFile 'D:/work/iotc_msgpub_js/node_modules/@types/mqtt.d.ts' does not exist.\n.... Thanks. I fixed it with the \"moduleResolution: Node\" in the \"compilerOptions\".\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"Node\"\n  }\n} . It's easier to support Javascript only, because TypeScript is just a superset of it. \ud83d\ude02 . This is fixed with #567. Is this fixed by #585?. It is already void.. @PekkaPLeppanen Please check this issue.. merged. I just found #571. No other issues so far.. fixed by #585. @PekkaPLeppanen please let me know what do you think about this. \nOr you may want to keep it and add some explanation to use type definition on this repo.\nhttps://www.npmjs.com/package/@types/mqtt. Thanks.. @mcollina Could you release new npm with the latest source code? I need this fix.. Why is this closed? I see no resolution... just a roll back.. @mcollina  No, unfortunately I work on a proprietary code base. However it seems like I'm not the only one having the issue, and I don't think fixing a dependency at a certain version is a solution at all. This means that a dependency manager like NPM is useless as the engineer then has to, post npm install, manually go into their package.json and magically know to set readable-stream to version 2.2.9. That's ridiculous. I suggest that since the culprit is known as a dependency of this package, that the solution lies in that relationship and should be investigated thoroughly to the changes and implicates that have effected this dependent.. I rolled back the package and in temporary fixed MQTT.js @2.5.2, and it was just a bug... I was speaking of the approach to the 'solution' not the fix that's been implemented. I absolutely appreciate a fix so quickly and being able to line my packages back up to update instead of fixing the version in a package manager! Not only that, I appreciate this package being available at all so I don't have to write up the code and hooks myself into the node core, don't think I'm unappreciative!! And my code continues to work just fine...\n-- EDIT--\nClosed related issue.. FIXED: https://github.com/mqttjs/MQTT.js/issues/596#issuecomment-292697559. The original issue #615 is \"qos on the options are required\". Can I fix this issue first then fix the following as an another issue?\nAre you saying passing an empty opts object should imply qos=0. And we\nshould fix the js rather than religiously follow the quirks in TS?\nDefinitely, if that is not the case yet.. OK. So both of opts object and qos are optional. Then default values are set if they are skipped. Right?. Is npm run tslint already included in CI on travis?\nhttps://github.com/mqttjs/MQTT.js/blob/master/package.json#L30. It succeeded without TLS (MQTT and Websocket).. I set the following callback but it did not throw any erros. It just called close callback.\nclient.on('error', function (err) {\n  console.log(JSON.stringify(err))\n}). Sorry. The code with MQTTS throws the error.\nerror = {\"reason\":\"IP: 172.31.12.4 is not in the cert's list: \",\"host\":\"172.31.12.4\",\n\"cert\":{\"subject\":{\"C\":\"JP\",\"ST\":\"Tokyo\",\"L\":\"Minato\",\"O\":\"My Company\",\"OU\":\"ITdept.\",\n\"CN\":\"172.31.12.4\"},\n\"issuer\":{\"C\":\"JP\",\"ST\":\"Tokyo\",\"L\":\"Minato\",\"O\":\"My Company\",\"OU\":\"ITDept.\",\"CN\":\"MyCA\"},\n\"subjectaltname\":\"DNS:172.31.12.4\",. Without JSON.stringify\nerror = Error: Hostname/IP doesn't match certificate's\naltnames: \"IP: 172.31.12.4 is not in the cert's list: \". I signed the sertificate as follows. \nhostname=172.31.12.4\nopenssl req -new -sha256 -key $1/server.key.pem -subj \"/C=JP/ST=Tokyo/L=Minato/O=My Company/OU=ITdept./CN=$hostname\" > $1/server.csr.pem\nAnd I also added alternative subject names.\nhttps://stackoverflow.com/questions/43665243/chrome-invalid-self-signed-ssl-cert-subject-alternative-name-missing\n```\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = 172.31.12.4\n```\nSo, the private address is in the cert's list. But it would be OK for DNS but not good for IP address because the error for MQTTS says :  error = {\"reason\":\"IP: 172.31.12.4 is not in the cert's list: \",\"host\":\"172.31.12.4\",\n\"cert\":{\"subject\":{\"C\":\"JP\",\"ST\":\"Tokyo\",\"L\":\"Minato\",\"O\":\"My Company\",\"OU\":\"ITdept.\",\n\"CN\":\"172.31.12.4\"},\n\"issuer\":{\"C\":\"JP\",\"ST\":\"Tokyo\",\"L\":\"Minato\",\"O\":\"My Company\",\"OU\":\"ITDept.\",\"CN\":\"MyCA\"},\n\"subjectaltname\":\"DNS:172.31.12.4\",. Thanks! So,  alternative subject names for IP address should be as follows.\n[alt_names]\nDNS.1 = kb.example.com\nDNS.2 = helpdesk.example.org\nDNS.3 = systems.example.net\nIP.1 = 192.168.1.1\nIP.2 = 192.168.69.14. ",
    "observant": "It also happens in the connect message before it actually publishes anything. You can see it if you change the on 'connect' to the following\njavascript\n   client.on('connect', function(packet) {\n        console.log(\"[connect] %s\", JSON.stringify(packet));\n        //client.connack({returnCode: 0});\n        //clients[client.id] = client;\n    });\nThe output indicates that it has received the message more than once.\nListening on port 9999\n[connect] {\"cmd\":\"connect\",\"retain\":false,\"qos\":0,\"dup\":false,\"length\":24,\"version\":\"MQIsdp\",\"versionNum\":3,\"clean\":false,\"keepalive\":3,\"client\":\"mqtt_54049\"}\n[connect] {\"cmd\":\"connect\",\"retain\":false,\"qos\":0,\"dup\":false,\"length\":24,\"version\":\"MQIsdp\",\"versionNum\":3,\"clean\":false,\"keepalive\":3,\"client\":\"mqtt_54049\"}\n[connect] {\"cmd\":\"connect\",\"retain\":false,\"qos\":0,\"dup\":false,\"length\":24,\"version\":\"MQIsdp\",\"versionNum\":3,\"clean\":false,\"keepalive\":3,\"client\":\"mqtt_54049\"}\n. opps ... you'e right the for loo is enclosing the createClient. Apologies for that\n. ",
    "cifer-lee": "@adamvr but...why the three client id are all the same?\n. @adamvr  is it means that the 'connack' event won't be triggered when return code is 0?\n. @mcollina because it is 'connack', the mqtt specification specifies \"The CONNACK message is the message sent by the server in response to a CONNECT request from a client.\"\nno matter what the returnCode is, just for integrity and normalization, I think it should be there.\nit makes me confusion when I bind the callback to 'connack' but the callback was never called. I even considered the library haven't implemented this feature yet!\n. ",
    "oribrost": "@nivertech\nWhen we use npm install we still get the code without fixes. When will the fixes be done in the npm version?\n. ",
    "imperio59": "Thanks!\n. ",
    "radekg": "Cool, that explains then.\n. What I can't understand is why in https://github.com/adamvr/MQTT.js/blob/master/lib/parse.js#L108 you check packet.qos if it's nowhere read. If I change that check to -1 I get my message id, I'm not quite sure why QoS is incorrect then? According to https://github.com/adamvr/MQTT.js/blob/master/lib/generate.js#L123 it should not be there if QoS was 0. Can you help?\n. I know how to get message ID back, retain and dup flags seem to be working but I can't get qos out correctly, No matter what I set it to - 1 or 2 it always comes back as 0.\n. Looking at paho source, seems you have a couple of issues here: in protocol your QOS_MASK is 0x05, paho has 0x03. Other problem is bitwise operation order when reading qos: instead of (byte & mask) >> shift it should be (byte >> shift) & mask. It is working fine in this order.\n. Or just pass it as an argument?:\nclient.connect({ client: self.client_id, versionNum: 3 });\n. And a cleanup commit:\nhttps://github.com/radekg/MQTT.js/commit/2c1b0fc15fb28071997626776c38ed79a51d3714\n. ",
    "andypiper": "Now seems to be available.\n. Yep, thanks - need to update the software list - thanks Adam for setting up a wiki page :-)\n. ",
    "reneklootwijk": "I had a client written in python and used a numeric value as payload. When I converted this client to node.js using your module, the publish failed. After digging in the source I found you check the payload to be of type string. This is not conform specs, as freehaha already mentioned. Are you planning to change this?\n. OK, that's the problem then, I was using the NPM version. \n. I cloned the git repository and the tests worked right away, however my code still did not. Turned out that the qos attribute of the will, defined as part of the createClient method, is mandatory at least that is how it is implemented in generate.js:\n// It must have a number qos\nif ('number' !== typeof will.qos) {\n  return new Error('Invalid will - invalid qos');\n}\n. Why not set it to 0 when not specified? It worked in the 0.1.x version.\n. Offcourse a topic and message are mandatory for a will, however when no qos is set explicitly it could be set to 0 instead of failed to connect.\n. ",
    "mcollina": "Thank you for your work! :)\n2013/1/9 Adam Rudd notifications@github.com\n\nI hope we've got them all now! Thanks @mcollinahttps://github.com/mcollina\n!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/pull/25#issuecomment-12042108.\n. The TLS client needs to support connecting without specifying the key and certificate, which are optional.\n. I know I need to implement it on top of that, but it might be tricky for beginners.\nAn high level API will be awesome.\n. As I have implemented a broker on top of MQTT.js, I believe the fine-grained control is better. I would like to tweak with it in the most \"impossible\" ways :).\nIf you go for a 'simplified API', please do not remove the 'old one', like you did for MqttClient (I had to switch to the Connection to test Mosca).\n\nYou cannot implement QoS without providing a full-featured broker, as (by the spec) it will need to store the messages to disk.\n. I'm closing this as I think it will not happen :(.\nFeel free to reopen!\n. The latest one I can get from homebrew: 1.1.2\n1362133095: mosquitto version 1.1.2 (build date 2013-03-01 10:17:52+0000) starting\n1362133095: Using default config.\n1362133095: Opening ipv4 listen socket on port 1883.\n1362133095: Opening ipv6 listen socket on port 1883.\n1362133139: New connection from 127.0.0.1.\n1362133139: Socket read error on client (null), disconnecting.\nIf I call it through Ascoltatori I got this error, however if I tweak your client, i don't have the same problem.\nAny idea in debugging this?\n. If I pass 10 everything works fine.\n. It's not throwing any errors.\nMaybe you should setUp the keepalive timer after the connection is setted up.\n. Closing, I have not experienced the problem anymore :(\n. What version of Mosquitto are you running? Is it the latest one? Can you please provide a script to reproduce?\nAlso, opening a new issue might be good :)\n. I totally agree with you on this point.\nBind is really nice, still.. :(\n. :beers: \n. Super cool! :beers: \n. Should we fix this for v0.3.0 aka #118?\n. Wooops. I just release v0.3.0 as you were not responding :(. Sorry man.\nHow about adding it later in the v0.3.x series?\n. Oh, gosh. We are saying the same thing :).\n. According to MQTT 3.1.1, we need to retransmit all inflight packets only when a reconnect happens, which currently we are not doing.\nIt should not be hard, any volunteers for fixing this?\n. You are right, it does not cover all the usecases.\nI'll try to fix this problem in a new PR.\nI have an intuition but I need more data to know if it is the right\ndirection.\nIl giorno gioved\u00ec 7 marzo 2013, Adam Rudd ha scritto:\n\nhttps://gist.github.com/adamvr/5106632#file-results\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/pull/49#issuecomment-14549542\n.\n. As you can see here:\nhttps://gist.github.com/mcollina/5106962#file-results\n\nAfter an initial transitory the read buffer usage settle to 'zero'.\nThis is clearly when it is possible to reduce its space.\n. I believe it is possible to do more :).\nI have this goal: be as fast as mosquitto for a turn around message (same client subscribing and publishing).\nRight now Mosquitto performs at around ~125ms and Mosca is at around ~165ms.\nBefore these changes, it was at ~220ms.\n. You are actually right.\nI don't think that using a big buffer and then slicing will help. I've just made a simple bench and it gets things worse. It seems that slicing an old buffer is slower than allocating a new, empty one.\nActually slicing it after the packet generation is fine, but it gaves very little performance gain (~1%).\nThe only thing I have not tried is to write directly the payload on the socket on publish.\nAfter a little bit of more studying, the problem goes like this:\n1. node.js allocates an 8KB buffer as a buffer pool (somewhat 'slow' call).\n2. every time someone allocates a buffer, it get some portion of that pool.\n3. when a new Buffer is allocated, if it does not fit in the pool, node.js generates a new buffer in the heap (which is the slow call, and involves a c++ binding).\nIt seems there is no solution, it's just how node.js work.\nThe new buffer generation will happen from time to time, because buffers come from the sockets.\nYou can find some more details here:\nhttp://stackoverflow.com/questions/14009048/what-makes-node-js-slowbuffers-slow\nThanks a lot!\n. We may even want to forward this to upstream.\nA full node crash should not happen :/.\n. However it's better to switch to switch the new stream2 api.\n. I've added the readable-stream support.\nStill, the performance on node v0.10.0 it's slower than the one on node v0.8.\nAt the current state, this branch is as fast as 'master' on node v0.8 for the publish throughput.\n. Unfortunately I have not checked.\n. I bet that's my fault. It should be a test that runs on 0.10 or 0.8, which is not listening to the right callbacks.\n. On my machine, this is fixed on the latest master.\n. It is fixed by #64 but has not been released on NPM yet.\n. are you sure? On my mac I don't see the problem anymore with the latest node.\nOn Wed, Apr 3, 2013 at 6:11 PM, Adam Rudd notifications@github.com\nwrote:\n\nThanks again Matteo! #60 is still there, so I guess it's an unrelated problem.\nReply to this email directly or view it on GitHub:\nhttps://github.com/adamvr/MQTT.js/pull/64#issuecomment-15846215\n. A client as returned by mqtt.createClient is not a Connection, but a Client.\nThey have different APIs for good reason.\n. Could you try the latest master? It should be fixed by my latest pull request.\n\nFor the discussion, mail me at matteo DOT collina @@@ gmail.com. Maybe we can collaborate on something.\nOn Wed, Apr 3, 2013 at 5:56 PM, glenlivet notifications@github.com\nwrote:\n\nHi guys, I did use the version 0.2.4 MQTT.js in my research and find that the connection.js (in version 0.2.4 which is using Buffer to handle socket reading) works improperly when handle big data(which cannot be done in one shot). I tried to modify it without changing the original mechanism, and below is what I got.\nconnection.js in matt\\lib\n```\nvar events = require('events')\n  , util = require('util')\n  , protocol = require('./protocol')\n  , generate = require('./generate')\n  , parse = require('./parse');\nvar Connection = module.exports = \nfunction Connection(stream, server) {\n  this.server = server;\n  this.stream = stream;\n  //buffer used to record unread data\n  this.buffer = null;\n  this.packet = {};\n  var that = this;\n  this.stream.on('data', function (buf) {\n    that.parse(buf);\n  });\n  events.EventEmitter.call(this);\n};\nutil.inherits(Connection, events.EventEmitter);\nConnection.prototype.parse = function(buf) {\n  if(null !== this.buffer){\n      //if there's unread buffer from last call,\n      //add to the current buf\n      buf = Buffer.concat([this.buffer, buf], \n              this.buffer.length + buf.length);\n}\n  var pos = 0,                //next read position\n  len = buf.length;           //total buf length\nif('undefined' !== typeof buf[0]){\n      if(!this.packet.cmd){\n          //parse the header\n          parse'header';\n          pos++;\n      }\n      if(!this.packet.length){\n          //parse the remaining length\n          var tmp = {mul: 1, length: 0};\n          var _pos = pos;       \n                        //trying to read remaining length, record the read position\n              //may fail if lack of available data, \n          //so use _pos instead of manipulating directly on pos\n          do{\n              if(_pos >= len){\n                  //not enough data \n                  //record the unread buffer \n                  this.buffer = buf.slice(pos, len);\n                  return;\n              }\n              tmp.length += \n                  tmp.mul (buf[_pos] & protocol.LENGTH_MASK);\n              tmp.mul = 0x80;\n          }while(\n              (buf[_pos++] & protocol.LENGTH_FIN_MASK) !== 0\n          );\n                  //successfully read the remaining length\n                  //record and set pos to the right position\n          this.packet.length = tmp.length;\n          pos = _pos;\n      }\n      if(len - pos < this.packet.length){\n          //not enough data for variable header & payload\n          //record the unread buffer, then return\n          this.buffer = buf.slice(pos, len);\n          return;\n      }else{\n          //enough\n          parsethis.packet.cmd;\n          //renew the read position\n          pos += this.packet.length;\n          //emit event\n          this.emit(this.packet.cmd, this.packet);\n          //reset packet\n          this.packet = {};\n                }\n  if(pos < len){\n      //still have some data, \n      //must belong to the next mqtt message\n      //record in buffer\n      this.buffer = buf.slice(pos, len);\n  }else{\n      //no data left\n      //clear buffer\n      this.buffer = null;\n  }\n\n}\n};\n```\ndid some test and seems work ideally. Hope it helps.\nThen, today I see mcollina modified the connection.js with readable-steam. I tried to understand and I think the part parsing the remaining length is hard to be understood, so I tried to write it myself and got below stuff.\nin Connection 's constructor, add a new property called remLen as below:\n    this.remLen = [];    //used to record remaining length digits\nthen in Connection#parse()\n    ...//content above\n    if(!this.packet.length){\n      do{\n        //try read one byte\n        byte = this.stream.read(1);\n        if(byte === null){\n          //unsuccessful\n          //wait for next data\n          return;\n        }else{\n          //succeeded\n          //save it and read next\n         this.remLen.push(byte[0]);\n        }\n        //do read until the end of remaing length\n      }while((byte[0] & 0x80) !== 0);\n//to record the length\n  var _length = 0;\n  //handle `remaining length` digits\n  for(var i=0;i < this.remLen.length;i++){\n    //for i = 0,1,2,4; mul = 1,128, 128*128, 128*128*128;\n    var multiplier = Math.pow(0x80, i);\n    _length += (this.remLen[i] & 0x7f)*multiplier; \n  }\n  this.packet.length = _length;\n}\n...//rest\nuntested. but maybe a little easier to be understood. \nFinally, I want to discuss mqtt mobile solution with you guys, hopefully get some inspiration. My project is to do a push notification system for server-to-mobile communication. The mobile network circumstance here is quite under-developed. Most people here still use 2G and the network of the mobile can be very unstable while moving. Considering this, I'm wondering that if UDP would be a better choice compared with TCP, since it is really hard to maintain a long time connection. Another question is, under frequent transports, which one would cost less power. Any advice is appreciated.\nReply to this email directly or view it on GitHub:\nhttps://github.com/adamvr/MQTT.js/issues/67\n. Not happening, as we need to test secure and websocket compatibility, reconnects etc.\n. Ok, maybe it deserves some more testing.\nI'm going to add TLS support to https://github.com/mcollina/mosca, so if there are bugs they will come out :).\n\nThanks for commit access! :tada: \n. Are you sure the connection is arriving to the MQTT.js server?\nCould you provide a full example that shows the problem on a gist? Could you also provide the same example running on moquitto? (with a mosquitto -> mosquitto bridge).\nSo we can run it to know if it was solved.\nWhat version of MQTT.js are you running? What version of ndoe?\n. Thank you for reporting it!\nTry in the mosquitto ML :).\n. @halfblood369 Thanks for reporting! Could you please test this branch if it solves your problem: https://github.com/adamvr/MQTT.js/tree/bug-75\n@adamvr, could you please add me as an owner on NPM? https://npmjs.org/doc/owner.html\nSo I can push out a new version.\n. Closed, see #76.\n. Done! :)\n. Could you please split these in two pull-request?\n1. is easy, could you please try to add some tests? As an example, you can close a Broker when the client is connected.\n2. is not really going to get through, as it requires a substantial API change. The problem is that an eventemitter is a pub/sub system, so you can have multiple callbacks, and the parent broker will se multiple acks. I think we should add a new method for this that can be overwritten by an user and leave the simple eventemitter as it is. Some tests are needed for this too.\nOn a side node, have you tried https://github.com/mcollina/mosca? It does exactly what you are trying to do. Maybe we can collaborate.\n. Beware, Mosquitto is not performing very well with this kind of setup. The more messages are 'in flight', the more Mosquitto slows down (at least from my tests).\n. Thanks!!!\n. That GIST is 11 month old: in that period we had a package name change, a new client API to solve the shortcomings of the old API, and a compliant broker based on MQTT.js available on Github. I've tested this package against mosquitto and it has been working since the early days.\nPlease, look at the example of this website and explain what is not working.\nThe new package name: https://npmjs.org/package/mqtt\nThe broker: https://github.com/mcollina/mosca\nI have also written an high level API for pub/sub system. If you do not want to study what MQTT is and how it works, please use that one. https://github.com/mcollina/ascoltatori\n. BTW, they are already there: \nhttps://github.com/adamvr/MQTT.js/blob/master/bin/mqtt_pub\nhttps://github.com/adamvr/MQTT.js/blob/master/bin/mqtt_sub\n. The 2. option is actually what is planned by #46.\n. Is that high level api compatible with the new client?\nIt will definitely benefit everyone of us.\nPeople were implementing the same stuff over and over again, and the new client is much simpler to use.\nYou can get almost the \"old\" functionality by using a Connection object, it's low-level enough. I had just to add a little bit of boilerplate code.\n. That will be so helpful, thanks!\n. @reneklootwijk seems fair.\nWe need to set the default qos for will only if there is a will-payload and will-topic.\n. @davedoesdev good catch.\nI've a couple of your issues to walk trough now.\nDo you fancy a pull-request with an added test?\n. @davedoesdev however a good node practice is to NEVER throw an exception.\nSo to speak, if the emit calls throws, then the exception should be routed inside the error event of the Connection.\n. @davedoesdev an uncaughtException should not cause the process to exit. You will lose all your concurrent connected clients.\nCould you please try https://github.com/adamvr/MQTT.js/commit/814202301851842745df7765e2b328610edd83c1 and confirm it solves the problem?\nIn this way, if everything happen in the publish event handler, it's jailed and it can't mess up the MQTTConnection.\n. Reopening, as the commit still needs to be merged in master and released.\n. I think domains are the way to go :+1: , I'm using them almost everywhere and they are fine.\n. User-thrown responsibility are not our problem, but we have to provide a way for a user to specify the domain which should be attached to that connection/client.\nSupporting domains might just be an example were domains are used, to show how to do it.\n. Well, the real thing in node.js error handling is that you should never ever have to stop process, otherwise you are closing all the 10k connections :)\n. Super cool work. :beer: \nThat code needed a refreshment!\n. The people inside Eclipse Paho are standardizing MQTT over Websockets ref.\nIt can be a very nice thing, if it's run on top of something similar to SockJs.\nI'm planning to add the support for it into Mosca.\n. I don't like socket.io: it's kind of a walking-dead library. SockJS is just a little better, because it does less things.\nTunneling MQTT over Websocket/polyfills has a great advantage over socket.io.\nIn the Paho solution, the brokering is done by MQTT broker, while in the MQTT+socket.io scenario, the brokering is done by both socket.io and the MQTT broker.\nI was skeptical too, but tunnelling MQTT over Websocket seems a good idea in the end.\nThe real difference is if your server needs to modify the MQTT payloads and elaborate them: in that case, something like socket.io or SockJs are what you need.\n. @Watke the length is the remaining length as defined in the standard.\nIt needs a LENGTH_MASK because of the encoding of the remaining length as defined in the spec.\nThe sole fact that this works with Mosquitto means that the algorithm is working right.\nWhat is the 'higher level'? You should not use that length value at all in your code.\nMoreover,\n{\"cmd\":\"publish\",\"retain\":false,\"qos\":0,\"dup\":false,\"length\":31,\"topic\":\"test0\",\"payload\":\"This is a testing string\"}\nand\n{ cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 31,\n  topic: 'test0',\n  payload: 'This is a testing string' }\nSeems exactly the same to me.\n. As defined in the specification, the topic is augmented by two bytes to identify the length of the topic.\nhttp://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#publish\n. The 'connack' event is not triggered by the Client that abstract that away.\n@cifer-lee why do you need it?\n. @cifer-lee if you want full control on the MQTT protocols internals, you should use a MQTTConnection, not a MQTTClient.\nThe MQTTClient provides an higher-level API that abstracts away most of the complexities of the MQTT protocol, e.g. connect/connack, publish/puback, retransmissions, keep-alives and so on. It is also much simpler to use.\n. The object returned from mqtt.createClient is an high-level API that handles the connect-connack exchange for you. If you want to handle it, you should use the mqtt.createConnection method.\n@adamvr I think we should remove the conn from the public API of the high-level client, so this kind of problem do not surface anymore.\nMoreover the server under the /example folder is not a full implementation of an MQTT broker, it's just an example, so it may not behave according to the spec. If you think you can improve it, submit a pull-request.\nThere may be bugs in this library, but you should not cite any of the example as a \"MQTT bible\". Try that against a full MQTT broker, like Mosquitto. If you need a JS implementation, you might want to try Mosca.\n@adamvr should we start a google group for answering this kind of questions/discussions?\n. @adamvr I'll think about prepending it with a _, so at least every user knows it's kind of private stuff.\nWe should do in the 0.3.x series, if we want to.\n. This was fixed sometime ago.\n. The only question mark about this is that firing an exception inside a callback is very bad. We might want to still add an optional support for domains. How about an option to mqtt.createClient and mqtt.createConnection?\n. Looks good to me :+1:!\nHow about a pluggable \"queue\" implementation? so we can store the packets to be sent to disk or redis.\n. One thing it's missing is a maximum retry handler.\nFor the backoff algorithm I'm using https://npmjs.org/package/backoff.\n. No. However if you connect with a specified clientId and clean: false, the broker will restore your subscriptions.\n. How about a Queue object that we can encapsulate?\n. @adamvr should we release it in v0.3.0 aka #118?\n. Done in 1.0.0.\n. There is no fixed number of reconnect attempts, but you can implement it on top using events.\n. Done in the README.\n. Please do so! Thanks a million!\nIl giorno luned\u00ec 2 settembre 2013, Mark Wolfe ha scritto:\n\nOK\nI found it.\nclient = mqtt.createClient({encoding: 'binary'});\nIf you like I will update the readme and add a test.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/issues/109#issuecomment-23654639\n.\n. Can I release master as 0.2.11? I need this patch :).\n. Closing, as already merged in #118.\n. In my code I had to change all client.on(\"connect\") into client.once(\"connect\"), and the very same for close.\n. Actually the clients I was firing up in my Mosca tests kept reconnecting.\n\nA part from that, it is much related to setting up everything correctly for each client after connect and tearing everything down on close. That code was pre-offline and pre-reconnect: it is very possible I could get rid of it totally.\nThe real error was releasing offline & reconnect without changing the \"minor\" version number: with this API, you should never want to listen to these events anyway. However, if there is a valid use case I will fire two events, connect and close for an \"online+offline\" closing and reconnect and offline for the reconnection.\n. @adamvr, If it is not a problem I'll release it as 0.3.0 over the weekend\n. You were doing it wrong before. Node.js sockets retain same state when they close, and they cannot be piped again. The connect method is not really supposed to be used that way :(.\n. Maybe it is a node v0.10/stream2 thing, I am not sure.\nStill, you cannot pipe a stream after it has been closed :(.\n. Do you think it is better to release it as 0.3.0, or just as the next in the 0.2.x series?\n. The real difference is that by using pipe you handle the \"pressure\" on the stream, e.g. if it has not completed then it's not called again, and there is some good old buffering (which is good, btw).\nMy benches are there: https://github.com/mcollina/mosca/blob/master/benchmarks/bombing.js and https://github.com/mcollina/mosca/blob/master/benchmarks/throughputCounter.js\n. Already included in #118.\n. Cool!! I planned to do it for Mosca, but I always postponed :(.\nLook, I am implementing most of the same thing you've done with setStream by passing a streamBuilder function: https://github.com/adamvr/MQTT.js/pull/113. @adamvr which approach do you prefer? I prefer not exposing the state and keep the state internally in the Connection.\nI think we might want to do a 0.3.0 release with this one and #113.\n. This is merged in v0.3.0-dev.\n. Cool you noticed that :).\nThe problem is twofold:\n1. made clean sesson=true the default.\n2. throw an exception/return an error if connecting without a clientId with clean session=false.\n. @adamvr should this be on 0.2.x or on a upcoming 0.3.x release? The fix itself is trivial.\n@oojah is this impacting your test.mosquitto.org hardly? Could you please check how many of these are subscribing to QoS 1 topics?\nThe benefit of a 0.2.x release will be that everyone will get it (as they likely depend on the ~0.2.x), and some of them will open bug reports here. Doing a 0.3.x release will surely be easier for us but harder on test.mosquitto.org.\n. Released as 0.2.11, thanks!\n. Releases as 0.2.11.\nThanks!\n. @samirnaik, could you please verify all the changes I made to update your branch were correct? The tests pass, but another eye might spot something,\n. @adamvr maybe you want to include #111?\n. @adamvr should we produce some new docs for this version?Or we just get it out and wait for bug reports?\n. Thanks!\n. Thanks again! :)\n. I'm closing this, in favor of #124.\n. We are about to release v0.3.0, could you please rebase against #118 and send a PR there?\nMoreover, the travis-ci build is failing on node v0.8.\n. I personally do not like the setConfig method, but I prefer options in the constructor. Could you please add the config as an optional parameter?\nMoreover, parsing this information should really belong to a separate package on NPM that we can depend on: this is the node philosophy.\n. In the upcoming v0.3.0, the Connection object is an instance of stream.Writable, so you can:\n1. open your server connection as a normal TCP server\n2. just pipe the upcoming streams into your proxy\n3. pipe the result into our Connection.\nIt should work, could you please test it with the branch in #118?\nClosing for now, as the new API should allow you to solve this in your code.\n. Right now the syntax for not encoding is setEnconding(null), which I do not like.\nI'll say we can move it to setEncoding('binary').\n. I'm also in favor of deprecating createConnection, createServer and createSecureServer.\nAll of these are just convenience methods around a Connection object, and to me they seem just to make things more complex.\n. Ok, let's leave this reasonings to a next version and merge this.\n. Definitely.\nHopefully v0.3.0 will be released by the end of the month, see #118.\nClosing.\n. 1. Could you please send a pull-request against v0.3.0-dev to fix this?\n2. It should be a node.js setting, as TLS is provided by it. Please check if that is not exposed/settable by the API, and if not could you please submit a pull-request to add it?\n3. I don't really undestrand: SSL/TLS support is provided through the mqtt.createSecureClient API. However, you can use the Client directly (not sure if this is exposed by the main interface) by passing a function to its constructor that returns the stream to use (it's a a function because we need to support reconnects). \n. This was implemented LOOOONG ago in v1.\n. Actually MQTT.js has two core components: MqttClient and MqttConnection.\nThe Connection just handles the protocol parsing, and not the semantics.\nThe Client builds on top of the Connection to provide reconnections, QoS, and it provides a simpler API.\nIn order to implement them, it has to hide some events from the Connection, e.g. suback and connack, as they do not make sense for it.\nAs an example you can:\njs\nclient.subscribe(\"hello\", function() {\n  // this will be called when the suback is received.\n});\nFeel free to fix the doc and submitting a PR for fixing the example :).\nWe really welcome people contributions here, so feel free to fork and submit a pull-request.\n. Is this solved? Could we close this issue?\n. Thanks!\n. The build on Travis failed. https://travis-ci.org/adamvr/MQTT.js/jobs/10753569\nMoreover, can you add a test for the new feature?\n. Could you please add a unit test for this feature?\n. Perfect, thanks! :)\n. Thanks!! :)\n. The code that does 'magic' of running MQTT over websocket lives there: https://github.com/mcollina/mqtt.js-over-websocket :).\n. On hold because it creates a little performance regression due to the bops dependency. We are waiting this to be released: https://github.com/chrisdickinson/bops/pull/9.\n. Merged in! New version with browser support coming soon!\n. I'm :+1: for this, but we should also maintain the 'old' methods and deprecate them with a warning when used.\n. Are you on node v0.8, right? What version, precisely?\nCould you please try with v0.10 and see if it has the same bug?\nIf not, I think the best solution is adding a destroy method to MqttConnection that just closes the write stream and nothing more.\n. The first is that you need to recompile all your binary modules. So, remove\nyour node_modules folder and npm install again.\nThe second is mosca logging exactly what's happening: for some reasons the\nsocket to Arduino closed and you get an ECONNRESET. Maybe Mosca can do some\nbetter logging in this case.. :)\nIl giorno venerd\u00ec 6 settembre 2013, Andrea Reginato ha scritto:\n\nYes @mcollina https://github.com/mcollina, I was using node v0.8.8.\nWith the newer 0.10.18 everything works fine. But now I get two new error\nmessages.\nOn startup, when running the node app with Mosca.\n[Error: Module version mismatch. Expected 11, got 1.]\n00:51:08 web.1  | { [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n00:51:08 web.1  | { [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\nWhen reconnecting from Arduino opening the Serial Monitor\n{\"name\":\"mosca\",\"hostname\":\"reggie\",\"pid\":58702,\"client\":\"99721000001\",\"level\":40,\"err\":{\"message\":\"read ECONNRESET\",\"name\":\"Error\",\"stack\":\"Error: read ECONNRESET\\n    at errnoException (net.js:901:11)\\n    at TCP.onread (net.js:556:19)\",\"code\":\"ECONNRESET\"},\"msg\":\"read ECONNRESET\",\"time\":\"2013-09-05T22:55:14.333Z\",\"v\":0}\nEverything keep on running, but I wanted to ask if you know what those\nerrors are about.\nThanks a lot.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/issues/132#issuecomment-23908092\n.\n. @adamvr what do you think?\n\nCould we just switch the payload to be binary by default? Or I just add to the wiki that to have better performance you should pass the { encoding: 'binary' } option?\n. @timoxley could you please check this out?\n. I'd like to thank @trevnorris for his support at nodeconf.eu with some cool performance tips!\n. @timoxley a very important part is avoiding the decoding of strings, as @trevnorris suggested.\nBe sure that you are not doing this decoding (buf.toString()) in your code, until it is needed.\n. I'm merging this in, I'll release this and #130 as 0.3.2.\n. I think we should bump the minor version if we want to use buffers by defaults for payloads and release 0.4.0.\n. I'll just release this as 0.3.2, and in the next days we'll see about browserify and eventually a binary default.\n. Thanks! The examples are fixed now!\n. What broker are you using?\nI tested them with Mosquitto and they work smoothly.\n. MQTT is a protocol that requires a broker to connect to. You can try mosquitto or mosca.\n. Merged in! Thanks!\n. @adamvr How about moving to an option-object for this?\nExample:\njavascript\nmqtt.createSecureServer({\n  key: fs.readFileSync(keyPath),\n  cert: fs.readFileSync(certPath),\n  passphrase: passphrase\n}, function() { .... });\nWe will have to support the previous syntax too, as I don't want to bump the minor version for this issue.\n. I'm thinking about supporting the current API and the new one.\nIt is possible using this technique:\n``` javascript\nfunction createSecureServer(key, cert, callback) {\n  var opts;\nif (typeof key === 'object') {\n     opts = key;\n     callback = cert;\n  } else {\n     opts = {\n       key: fs.readFileSync(key),\n       cert: fs.readFileSync(cert)\n     }\n  }\n//  continue as usual\n}\n```\nCan you implement this and add one test for it?\nMany thanks!\n. @tobyjaffey would you like to updated this and refactor for supporting both the old and new API?\n. Have you run into real-world problems for this? \nJust one little note: having a fixed starting id is very bad from a security point of view. So, make that random and we can merge :).\n. Fixed and merged in! Thanks!\n. The license is MIT, as in the LICENSE file. I've added a reference to it in the README.\n. Thanks!\n. just pass an encoding option to mqtt.createClient(), like so:\njs\nvar client = mqtt.createClient({ encoding: 'binary' });\nOk, it is undocumented in the wiki :/.\n. Updated the docs in the wiki!\nThanks for reporting!\n. Actually it's not possible, but we should definitely add an option.\nWould you like to submit a pull-request about that?\n(Sorry for the delay, I was traveling on Friday and I missed the notification)\n. Merged, thanks!\n. Cool! In what situation have you experienced this bug? What (buggy) broker is out there that it is not replying to PINGRESP?\nA part from this, would you like to submit a pull-request with a unit test and a fix for this issue? Thanks!\n. I'm just curious how you've found this :).\n. I'm :+1: for this and for doing the same for the secureClient.\nI'm ok for doing a deprecation warning and bumping the minor version to 'v0.4.0'.\n. Should we merge and release this? I will try releasing in 0.3.8 soon.\n. the build is failing on node v0.8, could you please fix it?\n(I know 0.8 is old, but we still support it).\n. I think we should move all the timers to use sinon fake timers, they work great in simulating the passing of time.\nMaybe that's another pull-request.\nBTW, having fixed timeouts sucks. You really want random exponential backoff, as it ensure not all 10.000 clients reconnects at the very same time, crashing you again and again. (another pull request).\nFor this reason, I think that it's better to let reconnect kick in automatically.\n. I'm merging this in and removing the call to _reconnect().\n. @adamvr I'm releasing this and #143 as 0.3.5, if it's ok for you.\n. Thanks, that's my fault!\nI'll release ASAP :).\n. > Hi,\n\nI tested the client using the script \\benchmarks\\bombing.js when the\nconnection is lost and I noticed the following:\n1. When there is no internet connection and the script is run a\n   'close' event is emitted (I' created a 'close' listener')\nCan you please provide an example?\n1. While the script was running I enabled the internet connection and\n   the client emitted 'connect' events and started to publish messages. This\n   is ok but connect is emitted when the network connection was only available\n   to my router but had not already access to the internet (the server I was\n   using is on Amazon) so my question is how to handle publish errors when\n   publishing? (no client 'error' event is emitted)\nThe client supports 'deferred open', which means that you can use it\nbefore the connection is done, and all the messages/commands will be queued.\nThe connect event is emitted  when the client receives a CONNACK packet\nfrom the server, so it's impossible to receive it without an internet\nconnection.\nIf it is not behaving in this way, please submit a code snippet to\nreproduce the bug.\n1. When a internet connection is available I run the script and\n   suddenly I disable the network connection the script keeps emitting\n   'connect' events and publishing (but that's impossible because there is no\n   access to the broker). Of course this is a test script but I'm wondering\n   how connection/disconnection and error handling should be done using\n   MQTT.js. Any suggestions?\nThe events of the reconnect cycle is weird. At the moment, there is no\n'reconnect' event, and after a CONNACK packet is received it always emit a\nconnect event.\nBTW, the bombing script publish independently of a connection and error\nbeing present, so it is not a good example for that.\n\nIf you run in specific problems and you can provide some code, we are happy\nto help you with it or fix the issue.\n. > If I want to ensure the publisher does not lost any message when it can't connect what is the best way to do it?\nIt does not loose any messages if the process keeps running, but not across restart.\nThe only solution to overcome this problem is to implement a storage system for in-flight messages using an embedded database, like levelup. This is something that has been on my radar for quite a while #47 #126. I think I'll dig into it at the beginning of next year, as I need it for a commercial project I am working on.\n. Also, you can't know if you are disconnected and then reconnected: https://github.com/adamvr/MQTT.js/issues/112.\n. @ldstein @AlfonsoPantoja any of you would like to make a proposal for changing the current behavior with a pull-request? We would love to better support these use cases. Thanks!\n. This is an awesome news. Thanks for contributing so much to these projects :).\n. Thanks for asking! MQTT have two semantics, one by the publisher and one of\nthe subscriber. Ascoltatori uses qos 1 by default, as it tries to achieve\nthe same qos across all backends.\nWhat it's not clear is how it reports two different lenghts. Can you please\nprovide an example that trigger the behavior? As Ascoltatori is based on\nMQTT.js, you might be able to reproduce using only MQTT.js.\nWhat broker are you using?\n. Passi { qos: 1 } to the MQTT.js subscribe() method allow to get the exact same metadata (even length).\nThe length is different because 'messageId' is only transmitted with QoS 1/2 packets (http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#msg-id).\nIf there is an error, the client automatically disconnect & reconnect, but at the moment it does not resend all not-acked packets #47.\nClosing, as the issue is solved.\n. You are getting that error because you are passing a 'protocolVersion' of 3.1, while it only support integers (e.g. 3).\nThe '.1' is not supported by the spec either (see \nhttp://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect).\nMoreover, you should leave that setting to MQTT.js, as it currently support only version 3 of the protocol.\n. 3.1 and 3 reports the same protocol version number, as the username/password change is backward compatible.\nAnyway, the protocol version number passed in the connect packet is a one-byte integer.\n. mqtt.createServer do not implement the semantics of MQTT, it provides only the protocol parsing facility. If you want to learn about the protocol, this is the best option.\nIf you need a MQTT broker for a project, you should use Mosca as it requires much less time. Moreover, Mosca implements both offline and retained messages in a very efficient way.\n. I'm not sure which MQTT server in MQTT.js you are speaking about, as\nMQTT.js do not implement any subscribing logic in the library, but only in\nthe examples.\nThat said, in MQTT there are two kind of clients, clean and unclean: clean\nclients need to redo all their subscription when they reconnect, while\nunclean clients do not. Moreover, if an unclean client do a subscription\nwith qos: 1 and then disconnect, it will receive all the messages that were\nsent when it was offline.\nMQTT.js clients are clean by default, so you have to listen to the\n'connect' event and do all your subscriptions again.\nI hope this helps. If you find issues regarding Mosca, please open a bug\nthere.\n. MQTT.js Server does not handle the semantics of the MQTT protocol, as described above.\nMosca supports clean and unclean sessions.\n. MQTT negotiate QoS during subscription, and a broker might not implement that level. As an example, Mosca supports only QoS 0 and 1, as it is not possible to support QoS 2 across all backends (e.g Redis and Mongo). \nIs your use case in need of QoS 2?\n. Mosca do not support QoS 2. Adding QoS 2 is a major undertaking which is not planned right now.\nIf you want to use QoS2, you can use Mosquitto (OSS) or Hive (Commercial).\nThe whole purpose of clean clients is to not receive messages when they are disconnected. This is the MQTT spec. If Mosca is not following the spec, please submit an issue there. \n. Yes of course, but there is no persistence client-side.\n. The travis build is failing. Can you please fix it? Thanks for the pull request!\n. Thanks!!\n. This is fixed in #157.\n. This is not true. The Client exposes the whole received packet as the 3rd argument: https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L520-L524.\nMoreover, it is documented in the wiki: https://github.com/adamvr/MQTT.js/wiki/client.\n. I don't think I get your question. The code snippet you pasted is from the\nbroker example, which is clearly simplicistic and highly inefficient.\nRegarding the batch support, the MQTT protocol has no such concept. If you\nwant to send multiple messages, just call publish for each of them. If you\nwant to use the QoS 1 acknowledge, you might want to try the async library,\ne.g. async.each, to simplify the control flow.\n. That code scales poorly with the number of connected client.\nIf you want to write a MQTT broker, try Mosca first: it implements most of the MQTT semantics and it offers a simplified API.\n. Oh right :). I've just stumbled upon that, and I added the issue.\nMaybe we can just add a test to check that.\n. It seems all is ok for MQTT 3.1.1.\n. I think we might listen to 'error' and do something useful if we are in the 'connecting' state, not 'reconnecting'.\nAs I see it, the client has four states:\n1. connecting (first connection)\n2. connected\n3. disconnected\n4. reconnecting\nThe errors should be reported in the connecting state, but ignored in the others (assuming an error truncates the connection, otherwise we need to close it).\nThoughts?\n. The current 'client' implementation is built for long-running clients, not for quick disconnection. MQTT has an extremely low overhead, so it's ok to keep a connection open.\nIf you want to have a 'connect&publish&disconnect' function, you might want to use the createConnection method and build your own module (https://github.com/adamvr/MQTT.js/wiki/connection).\n. Actually all that is planned for later this year, if anybody is going to work on that.\nI'll work on that around April/May/June maybe, as I need it for one of my clients.\nI will use a levelup based storage, but I think it will be pluggable, e.g. a separate module.\nhttps://github.com/adamvr/MQTT.js/issues/126\n. As of 1.0.0, publish has a callback.\n. How long was the process running? Node.js GC runs only 'whenever there is\nneed', so for such a low volume application it might decide to run very\nlittle, as there is plenty of memory. Try running your script for long\ntimes, and monitor memory usage.\nWhich version of node.js are you using?\n. Well, an hour should be fine to stabilize the memory consumption. I'm more interested to see if it keeps growing or not. \nWhich version of node.js are you using? Which broker are you using?\nA very useful article for tracking down leaks is: https://hacks.mozilla.org/2012/11/tracking-down-memory-leaks-in-node-js-a-node-js-holiday-season/\n. The MQTT keepAlive is totally independent from the TCP keep alive. One is at application level, while the other is at transport level. They solve two different tasks.\nThis functionality is not implemented in MQTT.js, but it is implemented in Mosca. In Mosca, it is implemented using a timer per connection.\n. Can you please add a test for this? Thanks!\n. Can you please try #183 and check if everything works as planned? I did some refactoring.\n. It is exactly like that in #183: https://github.com/adamvr/MQTT.js/blob/0.3.9-dev/lib/mqtt.js#L128-L137.\nCan you git pull that branch and test it? In case it's not working, can you please provide a script that show the issue?\n. I would like to get some feedback from @knolleary and @ralight on the URL\nformat.\nActually I have implemented it a few times myself so it makes complete\nsense to have it in here.\nThe main thing we are missing is a new 'createClient' interface that can\nhandle both normal and encrypted, with an object-based parameters (not\npositional).\n. @knolleary do you think the clean flag should be in the URI, in the same way client id is specified?\n. Thanks!! Can you:\n- [ ] add some more detailed docs in the wiki\n- [ ] add support for the ?clientId= option in the parsing. \nI'm not sure why a SSL test fails, but surely it's not your fault.\n. Oh, I did not see you had updated the README in the commit. That was already fine!\n. Thanks!! I hope to get this released soon!\n. reconnect works on my current setup, can you please post a script to reproduce?\n. @illbilly yes unless you are not passing { clean: false, clientId: 'anuniqueid' } as a options, and you use only qos 1 subscriptions. Otherwise, your subscriptions are lots during reconnects.\nHowever, it is counterintuitive to have deferred open scenario and not restoring them for subsequent connections.\n. Thanks to @mdickens we have support for the sessionPresent bit in CONNACK.\nHere is my proposal to address this issue:\n1. everything happens before connect goes into a 'special' storage  that will be replayed every time there is a reconnect if the sessionPresent bit is not set.\n2. the 'connect' event is fired only when a new session is created, while the 'reconnect' event will be fired thereafter.\nWhat do you think? Anybody that would like to give it a go?\n. @gorhgorh @256dpi any of you two wants to tackle this?\n. I'm not sure about publish commands, but the behavior you describe for subscribe sounds perfect.\n. Thanks :). No hurry\nIl giorno mer 20 gen 2016 alle 04:39 Jason Diamond notifications@github.com\nha scritto:\n\nHaven't had much time to finish this, but I have made progress here:\nhttps://github.com/jdiamond/MQTT.js/tree/resubscribe-on-reconnect\nIt's not done, but I'll submit a PR as soon as I'm able.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/166#issuecomment-173075621.\n. @psorowka maybe we should implement this :P. It is causing a lot of issues.. https://github.com/mcollina/mosca/issues/435\n. Currently MQTT.js has a lot of automagic going on, it automatically reconnects, and it implements the deferred open scenario for publish and subscribe. The problem is that the whole reconnection setup is implemented wrong for subscribes: a reconnection without clean: false will loose the subscribes. Given the fact that deferred open is hard and reconnection are hard, I think we should implement both here. This leaves with very few option on what to do for subscribes.\n\nI'm ok with having some more option to control auto-reconnect, restore-subscribtions etc.\nI'm also ok in splitting this into two modules: one without the autoreconnect stuff, and one with auto-reconnect, promises etc (maybe even adding a dependency on QLobber here to provide the routing for individual callbacks). I would keep the mqtt module as full-featured as possible, and maybe move all the rest into mqtt-core. However, this will take time, and we should probably release v2 with this auto-subscribe sooner.\nAnybody that wants to contribute this feature? Any other opinions?\n. If you would like to contribute the automatic-resubscription here, we can go ahead and release v2 :)\n. What version of node are you using? Can you please provide a code snippet to replicate?\n. Can you please post a script to reproduce? \nI think these lines \nhttps://github.com/adamvr/MQTT.js/blob/master/lib/mqtt.js#L155-L159\nShould be moved here: https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L163-L165\nPlus, we should emit the error and not throw it.\nWhat do you think? Would you like to assemble a pull-request?\n. I think this should be fixed in #183. Can you please check? Is this still an issue?\n. This works without issue on my system with both Mosquitto and Mosca: \njs\nvar mqtt = require('mqtt')\nclient = mqtt.connect('mqtt://user:pass@localhost?clientId=abcde');\nclient.subscribe('presence');\nclient.publish('presence', 'Hello mqtt');\nclient.on('message', function (topic, message) {\n    console.log(message);\n});\nclient.end();\nSo, it might be some problem of your system. What combination of node.js/operating system are you using?\nYou can't put a callback there, but you don't need to. All messages are queued and sent when the connection is setted up. If you want to know when everything is working properly, you can hook to the connect event (https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L86-L89).\n. createClient\u00a0 has been deprecated long ago. Check the updated example in the README.. very likely he has an older version of MQTT.js. I did not understand. Can you please make an example?\nIl giorno ven 21 lug 2017 alle 14:00 Kril Allen notifications@github.com\nha scritto:\n\nHi !@mcollina https://github.com/mcollina I have another issue , today\n,I do a test that send the data from client to service and send the data\nfrom service to client at the same time. The issue is that nothing will\noccur of client where I send the data and set up to show. But it will occur\nafter I shield the code of send the data from client to service. Can you\ntell me the reason .Whether the passageway of message only response the\none-way rather than two-way?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/168#issuecomment-316983103, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL4-zzjjAOWLRRl10j-AZjKB8jpxNfks5sQJLogaJpZM4BtO4v\n.\n. I'm closing this.\n. No problem!\n. At the moment no. If you want to submit a pull request for that, I'll be happy to review it.\n. MQTT.js has no special logic for subscribes and wildcards. Something weird\nis going on :/.\n. Can you post an example that replicate the issue?\n. The message event is emitted for every message received by the connection.\nYou should do it only once and then disambiguate.\n\nCheck out http://npm.im/ascoltatori because it implements the in-app\nmessage disambiguation for Redis, MongoDB and also MQTT.\n. You need to:\nmqtt sub -t 'hello/+/hi' -h 'test.mosquitto.org' -v\nmqtt pub -t 'hello/vikram/hi' -h 'test.mosquitto.org' -m 'from MQTT.js'\n. I think it might be a good idea! PR?\n. Good catch!\nCurrently the username and password fields does not respect the 'encoding' option, and thus are not parsed as binary if requested. These are the relevant lines: https://github.com/adamvr/MQTT.js/blob/master/lib/parse.js#L75-L86\nCurrently I'm somewhat busy, can you please submit a pull-request with a fix? Remember to include unit tests for this.\n. I would suggest you submit your PR as soon as it is ready, so we can review it and maybe fix some subtle bug that might be in there. Usually having one more pair of eyes helps.\n. Thanks for the check!\nI would like to see the error situation reported in the MQTTClient after a\nsubscribe command. I'm not sure this happens.\nYou checked only the MQTTConnection.\n. > mqttClient.publish(topic, payload , {qos: 0, retain: true}, publishCallback);\nThe callback in the publish call is called only by QoS 1 payloads.\n\nI have noticed that the other console log messages appear to be interleaved as if several message are being processed at once. Is that possible/likely?\n\nIt depends on how the IBM server does the delivery, it does not depend on the client.\n\nIs it possible to configure the mqtt client so that it only delivers one message at a time to an application?\n\nNo, you have to do it in the application code.\n. Right, but that callback with QoS 0 does not guarantee anything, be careful because it does not even imply it has been written to the TCP socket (https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L428).\nIf you want to debug the client, just put some console.log calls inside your node_modules/mqtt folder.\n. Any updates on this?\n. Closing.\n. This should be fixed in 1.0.0.\n. Hi Mark! Thanks for the fix!\nCan you please add a unit test for this, so we do not break it again in a later release?\nThanks!\n. Any update on these tests? If you can figure it out, feel free to refactor the old ones too!\n. Can you please test https://github.com/adamvr/MQTT.js/pull/183 and check if it solves the problem already? from my tests it does (but I might be wrong all along on this issue)\nI've refactored the whole logic on TLS by emitting 'error' on the client, and now the client emits 'close'. Please, let me know ASAP.\n. What broker are you using?\nThe mqtt.createServer does not implement a full broker, so in that case you need to write your own logic. You can find a full MQTT broker at http://npm.im/mosca!\n. Can you please check if #183 works smoothly?\n. You volunteering to submit a PR :D.\nJokes apart, I have no band right now, but it's something I want for 0.4.0.\nWould you like to work on this?\n. the problem is that I have no way to differentiate between normal errors and TLS errors (see https://github.com/joyent/node/issues/7605)\nYou can find hopefully working branch here (https://github.com/adamvr/MQTT.js/tree/wolfeidau-fix_end_for_tls_client) can you please check? I promise to get some certificate ecc if the thing will not work after this :D.\n. This is almost ready. I'm setting an hard deadline on monday morning to publish this on NPM. Please test this :D.\n. May I ask why picking node 0.8? 0.10 is way better.\nAnyway, I'm working on v1.0. Would you like to help with 0.8 support and\nmake sure all tests are green there? In case, send a pr!\nIl giorno ven 12 dic 2014 alle 15:16 Mateusz Bochy\u0144ski \nnotifications@github.com ha scritto:\n\nwe just started using mqtt on node v0.8.22\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/adamvr/MQTT.js/issues/184#issuecomment-66777367.\n. You might want to test https://github.com/adamvr/MQTT.js/pull/232 on node v0.8, and see if any problem arises. I cannot support 0.8 without help, I have no bandwidth for it.\n. Closing this, as 1.0.0 will (still) support node v0.8.\n. Here is the catch: the current client is automatically reconnecting if it closes. In order to do that, we need to 'nop' the error event.\nThe weird thing is that this:\n1. does not fit all use cases\n2. remove useful feedback from the user\n3. does not provide any clue that a reconnect happened\n\nI think all that should be rewritten/fixed.\nAny ideas @adamvr?\n. @maug The error you are experience is emitted by the client itself, not by the stream. It is an unrecoverable error condition: the client identifier is not accepted by the broker.\n. The standard node way should work fine.\n``` js\nvar mqtt  = require('mqtt')\n    , conn = mqtt.createClient();\nconn.on('error', function(err) {\n  // handle errors\n});\n```\n. That code should work, see https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L670-L671.\n. Please add unit test for it and submit a pull request.\nThanks a million!\n. I would like to have these in for the upcoming v1.0.0 release (see https://github.com/adamvr/MQTT.js/pull/232). Would you like to contribute a PR?\n. Everything is exposed and documented in 1.0.0.\n. Good one, can you please add a unit test for it?\n. Can you please move it https://github.com/adamvr/MQTT.js/blob/master/test/client.js? Thanks!\nEverything else is good ;).\n. Merged into #183.\n. Yes it is, thanks! Remember to add a unit test for it!\n. Any updates on this? I'd love to have it in 0.3.9.\n. Got it, add sinon as a devDepenency and you are done :).\n. Any update on this?\n. Don't worry, I'll fix it when I merge it!\nThanks!!\n. This is usually an operating system limit, check your OS documentation.\nOn Linux: http://ben.goodacre.name/tech/Increase_simultaneous/concurrent_TCP_connections_(Linux)\n. Can you please post the code for your MQTT.js app? Can you please try to\nreplicate this bug using two MQTT.js clients?\n. In order to help solving an issue, the best you can do is to write the\nleast code that hightlight the problem and nothing more.\n. Closing as not updated for a while, feel free to reopen if the problem persists.\n. Yes, good catch! :+1:\nI don't know why it was done like that. I actually think it should be something like keepalive * 1000 * 4/3, just to allow some network delay.\n@adamvr thoughs?\n. You are right, let's just go ahead with 1000 and forget about it.\nCan you please fix it and send a pull request? You can use sinon's fakeTimer to mock the passage of time.\n. thanks for reporting this! Can you please submit a pull request to fix this?\n. Go ahead with 4.x ;)\nIl gioved\u00ec 12 giugno 2014, nevill notifications@github.com ha scritto:\n\n@mcollina https://github.com/mcollina Sure, I would like to. Can you\nconfirm which way do you prefer? Using 4.x with contain or 3.x ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/adamvr/MQTT.js/issues/194#issuecomment-45844965.\n. Can you please rebase against current master and add a unit test? Thanks.\n. You can use sinon's fakeTimers to simulate the passing of time. Have a look at how mosca does that: \nhttps://github.com/mcollina/mosca/blob/master/test/server.js#L147-L238\n. First, the MQTT protocol does not specify what is inside the payload, it's up to the application to detect that. This means that the encoding is at the application level, and it's not really inside MQTT.js.\n\nHowever, MQTT binary encoding means that we use buffer, not that we pass the 'binary' option as encoding to the Buffer class. I think that we should default MQTT.js to be binary by default in 0.4.0.\nOther opinions on this?\n. In MQTT.js when you issue 'binary' as an encoding, you will get node's Buffer object in place of payloads, usernames and passwords. These will not be parsed as UTF-8. In MQTT.js 0.4.0 this is going to become the default.\n. As you can see, just before line 192 (https://github.com/adamvr/MQTT.js/blob/master/lib/generate.js#L192) there is a check if the payload is a buffer or not.\nSo, the payload you are passing is not a Buffer, and as the error states, it is neither a string. What are you passing as a payload?\n. This is fixed in 1.0.0 (or before).\n. Can you please paste here an example that is throwing that exception?\nI think I got the issue but I need a test.\n. Can you please check if https://github.com/adamvr/MQTT.js/pull/201 solves it?\n. which broker are you using?\n. I've updated the branch, it should work now.\nThis is a client that works:\njs\nvar client = require('./').createClient(1883, 'test.mosquitto.org');\nvar topic = '\u4e2d\u56fd';\nclient.subscribe(topic, function() {\n  client.publish(topic, 'some data');\n});\nclient.on('message', function(topic, message) {\n  console.log(topic, message);\n  client.end();\n});\n. No idea, you should ask @ralight.\nmosquitto_sub on Mac Os X works fine with UTF-8 topics.\n. This has already been solved by #197 and released in 0.3.9. I think you should update your fork.\n. This has already been solved by #197 and released in 0.3.9. I think you should update your fork.\n. This has already been solved by #197 and released in 0.3.9. I think you should update your fork.\n. Thanks!!\n. What version of node.js are you using?\n. I think you should have mqtt@0.3.10.\n. Can you please post a full example?\n. My tests works fine with the latests mosquitto on test.mosquitto.org and the latests MQTT.js. Please, can you provide some code that shows the issue, otherwise I can't help.\n. If you can provide some code to reproduce, I might try to help you.\nOtherwise it's very hard.\n. You should look into using Mosca instead, it handles all the complexities\nof a mqtt broker for you.\n. MQTT.js does not implement the full specification of a Broker.\nYou can use Mosca in place of Mosquitto and have all the customizability of node.js.\n. There is no 'magic wand' when you want to scale any system. I have successfully run Mosca 10K clients on a single AWS Medium machine. In order to reach 100K and beyond, you will have to run on multiple machines interconnected by Redis (my best bet): https://github.com/mcollina/mosca/wiki/Mosca-basic-usage#in-this-example-we-will-be-using-redis.\nIt also depends on your application.\nMosquitto cannot be scaled horizontally, so it might become an issue later on.\n. Anyway, if you have further questions, feel free to mail me at hello@matteocollina.com.\n. @mocheng that's MQTT, and any other broker will behave in the exact same way, not just Mosca. A clientId is defined to be unique: a good solution is to use the MAC address.\n. It depends on your scale. Redis usually offers lower latencies if you have to distribute less than 1 million messages per second. RabbitMQ can offer super-high availability. Unfortunately, there is no easy recipe for scaling :(.\n. @RangerMauve it is not true, you can use Capped Collections and a Tailable Cursor to exchange messages between processes in MongoDB. Mosca uses those to exchange messages between instances, so @joltup mongodb support in Mosca is a quick-win solution that does scale upon a certain point. I would recommend Redis anyway.\n. It really depends on the target system. Are you asking for a browser only implementation? In case have a look at mows, it does what you are trying to do.\nIf your automation system is server-side, you are out of luck: MQTT requires some kind of TCP or WebSocket API, which is provided by Node or by the Browser.\n. Looking at MQTT, QoS 1 is only meant for reception, not for handling application errors but I agree with you. However this is not possible using the current API, as it's based on the EventEmitter, which does not allows a callback. I'm researching an alternative eventemitter based on callbacks MQEmitter, which can support that pattern. But.. we are kind-of against changing the API of MQTT.js as it's heavily used.\nAnother possibility is to have a 'messageHandler' property on the client, that a user can override to specify a function that accepts a packet and a done callback.\nAny other opinions?\n. Here is the problem, there is no way for MQTT.js to do that for you without a topic-parsing library (like http://npm.im/qlobber by @davedoesdev, which is the one I use in Mosca).\nI don't think that logic should be in here, but we can discuss this (ping @adamvr).\nAnyway, I still have no band for that implementation right now, so you may have to do that yourself in the form of a PR to MQTT.js, if you want to contribute :).\n. I like this implementation, it should not be too complex to add.\nThanks for the suggestion/discussion, this is really a nice-to-have.\n. Released in 1.0.0. See https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L613-L623.\n. @rossjourdain it has been possible for over a year. Maybe the docs are not great (please send PR :P), and definitely there is an issue with #425. Add an handleMessage\u00a0function to the client, and call the callback when you are done. \nAny contribution/help into the project is welcomed!\n. Just to clarify, I think that's not ok to have two functions.\nI think that we must ACK a message or fail the client. If the callback is called with an 'error', we should probably forward that 'error' to the client itself, and that will disconnect it.\n. Fixed in #697 . It's already exposed, albeit kind-of deep in the code: https://github.com/adamvr/MQTT.js/blob/master/lib/connection.js#L33-L35\n. Updated the docs.\n. Short answer: it can't be done as the code stands right now.\nLong answer:\nFinally somebody pointed this out. I have been struggling with this a lot, especially on Mosca. There is no way around this without a (complete? big?) refactor of this library: it would take some time, albeit most of the code can be reused somehow. This library was born long ago and it was based around EventEmitter, which turned out to be a very bad idea to handle any kind of async stuff that requires an ack. The way we 'solved' the issue in other projects is to use streams whenever possible.\nI have been prototyping with stream-based pub/sub libraries and I think it is definitely the way to go. Have a look at MQEmitter, MQStreams and MQBroker.\nWhat I plan to do:\n1. extract the parsing of MQTT packets into its own repo, in a complete non-stream way.\n2. rewrite the Connection as a duplex (or two streams, a Readable and a Writable) on which we write and read packets in a JS-form (the same we have right now, so it will not emit new packets until the receiver have not handled the previous (plus some buffer). Maybe this can live in its own repo too.\n3. rewrite the Client to support the current API plus having a callback-oriented message handler.\n4. remove mqtt.createServer and let people use the net API\nIf you want to help, we can discuss the rewrite and collaborate on some code.\n@adamvr ping.\n. The server sends a SUBACK packet after a successful subscribe.\n. Can you please do a PR on this? It's a nice addition.\nRemember to fix the inline docs and add a unit test.\n. Already added.\n. Thanks!\n. Forget about, it's reserved: https://issues.oasis-open.org/browse/MQTT-12.\n. @dglozic you can submit a PR now :).\nThis is something we can get added quickly for the main MQTT Client.\n. If you are on AWS, you can use ElasticLoadBalancer.\n. Yep, but that's something that might help lots of people too ;).\n. Hi @kapilkarda.\nI think you should have a look at: \nhttps://www.youtube.com/watch?v=WE7GVIFRV7Q\nhttps://www.youtube.com/watch?v=BxJ-27Nnakc\nCheers,\nMatteo\n. Yes it is, but I think it's related to your code.\nThe broadcast server has a memory lead but you should not use it, it's\nthere only as a proof-of concept.\nIn particular, it does not delete the reference to the client in case of\nerror. I've just updated that.\nBeware that node.js cleans the memory only when it needs to, so it might\npass a long way before your memory is collected.\nHowever, 2 days is fine.\nI think you should use Mosca (http://npm.im/mosca) as it supports all the\nMQTT semantics you need.\n. Forget about the server, it does not make a lot of sense on such a small device like the tessel.\n@sandro-k faced similar things on running MQTT.js inside a Google Chrome App.\n. yeah, I'm merging this. However that is measurable :)\n. Sorry I messed up, can you please keep the thing without the switch?\nThanks.\n. Can you please check if master is still working fine on tessel? It should be :).\n. Nice one, but I think it's not an issue for us, right?\n. In go? Try asking to the author of that library, or on the MQTT mailing list (https://groups.google.com/forum/#!forum/mqtt)\n. Oh that's just a bug. If you would like to submit a PR go ahead, otherwise I'll fix it as soon as I can.\n. Can you please add unit tests for this?\n. Ping\n. The unit test is good! Please add one more for the unicode characters.\n. Sorry for not noticing earlier, GH does not send an email for every (new) commit on a PR, so you have to write a comment :),\n. Thanks! :)\n. If you are not authorized to publish stuff you will just be kicked out by the MQTT broker. The callback with QoS 1 is called when a PUBACK is received, which makes things much more useful. To my knowledge, there is currently no message in MQTT to say 'this publish did not went ok, try again later'.\n. Can't we fix end() instead?\n. I think we need a destroy() method, you are right. However, I don't like how it is implemented, it should be inside the Connection object, in this way it is available for everybody. Ideally having in the Connection would remove the need for https://github.com/mcollina/mows/pull/18/files (it can look for both a destroy and a close method).\nWhat do you think?\nPlus, add a unit test.\n. I see the issue from a library perspective: putting it in four places (MQTT client and server, MOWS client and server) make no sense. The standardized (by OASIS) usage of MQTT is just over TCP or WS, and a different library that leverages MQTT.js for running MQTT on top of protocol X is definitely off standard, so it's ok for me to focus on supporting the 'normal' use cases.\nAnyway, we can feature-detect it: if there is destroy() method, then call it, or just call end().\n. As for the testing, I think you can just open a connection to a server (as a client) and destroy() it.\n. The failures are due to your changes, however they are related to differences between 0.8 and 0.10.\nThe current version of MQTT.js still support node 0.8. I think we should bump that minor and forget about 0.8 at all.\n@adamvr any ideas on this?\n. I think:\n``` js\nvar mqtt = require('mqtt')\nmqtt.connect('mqtts://yourbroker', { will: { topic: 'death', payload: 'me' } })\n```\n. First: upgrade your node.js. This is unrelated, but I'm definitely not supporting that version :).\nSecondly, also unrelated, MQTT is a protocol optimized for low bandwidth and usage. Definitely not something you want to run lots of messages into.\nAnyway, how many messages are you trying to send?\nSaid both points, you should be able to do it without too many issues. However, in order for your messages to be enqueued to delivery you need to relinquish the event loop, i.e. make it tick (it's when it delivers all the I/O). A good trick is to use setImmediate.\nFinally, there is a known issue in this library that cause that problem. I've been working on it for a while, and hopefully it will be solved in the next weeks/months. If you need it urgently, contact me directly.\n. > I've tried setting a keepalive value of 200 (instead of 20) and everything goes 'better'. It seems that because of the stream is being used to publish messages, the ping response is delayed and it does timeout to expire. Isn't it?\nI highly recommend to increase the keepalive to 1 minute or more (The default is 60). It is no sense having a value that short (20 seconds). You need to take into account network latency, throughput etc..\nSo, it is unrelated to the issue I am working on, which is due to the buffers filling up.\n\nI know that MQTT is intended for low bandwidth and usage. But I've a three levels Mosquitto hierarchy and the root of the hierarchy receives the aggregated messages of the rest. Behind this root Mosquitto, there is a node.js backend that send responses to every received message; I was testing whether Mosquitto was able to support a \"high\" traffic rate or not and the overall behaviour of MQTT hierarchy. Mosquitto supported it, but then mqtt.js diconnection issues happened several times. I did not expect it as we chose Node.js because of its network performance.\n\nI suggest you to move to a 'clustered Mosca configuration', and use the 'published' event to hook into any data processing you might want to do (https://github.com/mcollina/mosca/blob/766e1ca9edf075cfd582cc91afaccd2918d06c4d/README.md#embedded). In this way, you can also have a high-available setup by scaling through multiple machines.\nMosca does not support the bridge protocol (https://github.com/mcollina/mosca/issues/25), but that can be added.\n\nI did not expect it as we chose Node.js because of its network performance.\n\nIf you are just publishing a message every 10ms you might be doing something wrong somewhere else. I could easily achieve 10k+ publish/sec on my machine. Mosquitto can handle it pretty well (also on my machine).\nYou might be having some issues at kernel level, you might need to increase your networks and TCP buffers.\n. > We are designing an end-to-end acknowledged protocol on top of MQTT (that follows point-to-point paradigm) so we need to ensure that packets are delivered and are delivered only once.\nIt doesn't seem really a good idea. MQTT is pub/sub, if you need point-to-point other protocols make more sense.\n\nAnd about the subscribing question... why it does not fail although it is configured with the same keepalive? \u00bf?\u00bf?\u00bf\n\nI have no clue, I can guess that for some reason the subscribing leaves the event loop less full.\n. Are you sending data? Are you disconnecting the client?\nDebugging these can be tricky. You definitely need to intercept what's\ngoing on using wireshark or similar.\nAnyway, can you post me the code that shows the problem? Can you do a 'lab\nsetup' without a 3G connection?\nIl sab 1 nov 2014 alle 08:01 ALEXIS LE GOFF notifications@github.com ha\nscritto:\n\nHey I'm testing different values for the keepalive option but I can't see\nany difference. I tried 60, 600 and 3600.\nI would expect to have a 60 times lower traffic with 3600 but it's still\nthe same ~100 kB/hr which is a far too much for my 3G application\nAny idea?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/adamvr/MQTT.js/issues/228.\n. The current timeout is 60 seconds, you can increase it by passing the keepalive option: https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L13\n\nAlso see https://github.com/adamvr/MQTT.js/wiki/client#mqttclientstreambuilder-options.\nI'm closing, reopen if it's still a problem.\n. It's exactly that time: https://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L468-L473\nFrom MQTT 3.1.1 spec:\n\nIf the Keep Alive value is non-zero and the Server does not receive a Control Packet from the Client within one and a half times the Keep Alive time period, it MUST disconnect the Network Connection to the Client as if the network had failed\n\nCurrently the client disconnects after two times the keepalive period. A good rule of thumb that I use is:\nmake the keepalive flag between 10 and 100 times the delay of the network. Sensible production values are 15 minutes, 30 minutes or 60 minutes. Beware that keepalive can be zero, disabling it.\nIf you are on 3G, the connection might be killed also by the network operator (usually after 30min or 60min)\n. The problem for this library is that the 'server' does not provide any\nsemantic that is defined in the MQTT standard. This is not optional\nbehavior, but mandatory one. Basically what the server provides is a parser\nattached to a socket. The parser/generator is already extracted in\nhttp://npm.im/mqtt-packet in a more scalable and backpressure-oriented way.\nThe server included in MQTT.js is basically not worth using in production.\nIl giorno dom 7 dic 2014 alle 12:48 Jo\u00ebl G\u00e4hwiler notifications@github.com\nha scritto:\n\nI'm relying on this feature in my project. I like that the library\nprovides the client and server code, as a lot node.js modules do. Maybe the\ndocumentation can be updated to point people towards using mosquitto or\nsimilar brokers instead of building their own?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/adamvr/MQTT.js/issues/231#issuecomment-65934782.\n. I agree. The current API is really flawed: you cannot build a performant\nand resilient broker on top of it. I am refactoring MQTT.js and Mosca, and\nthen extract a barebone implementation of a Broker.\nIl giorno lun 8 dic 2014 alle 18:34 Jo\u00ebl G\u00e4hwiler notifications@github.com\nha scritto:\nOk, I think I got your point. Using just the createServer API does not\nactually create a working MQTT \"server\".\nI still think it would be nice to have that node like API to implement a\nserver somewhere available to prevent duplication? Maybe a module that\nprovides this higher level API and can be used by my project, mosca, mows,\n...?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/adamvr/MQTT.js/issues/231#issuecomment-66152880.\n. All is well, feel free to contribute!\n. Published on NPM with tag 'next', install it via: npm install mqtt@next, with -g to test the new cli tools!\n. Waiting for https://github.com/maxogden/websocket-stream/pull/54 to fix the websocket reconnect errors we are now seeing in Travis.\n. At this point in time these are not exposed.\nI think we should map these to 'debugging messages' to events into the Client, and a user can subscribe to these events and log them as they like.\n\nWould you like to send a PR against https://github.com/adamvr/MQTT.js/pull/232?\n. We just released 1.0.0. Would like to contribute this feature in?\n. replace all ^ in package.json with ~, for our purposes it is very similar.\n. you can run npm install npm@latest -g as a before_install command. Actually, this is definitely better than the package.json fix.\nSee http://docs.travis-ci.com/user/build-configuration/#Build-Lifecycle.\n. Nice catch! Would you like to help with the implementation of the fix? I think the parsing needs to be fixed into mqtt-packet, plus some handling of it should be done here.\nWhich broker and version of it are you using?\n. Send me a pull request on both projects, remember to update unit tests.\n. That was released as mqtt-packet 3.2.0. You should get it if you reinstall MQTT.js.\n. The problem is with this line:\nclient.end(); // Close the connection when published\nIn fact, the callback is called straight-away as it is a QoS 0 message, while the subscribe is still in-flight.\n1.0.1 fixed this case for the README example, but I have not thought of about this case.\nThanks for reporting, I'll get back with a fix soon.\n. There is a problem in parsing the port number (so weird): if you use 'mqtt://test.mosquitto.org' everything works fine.\n. Thank so much!\n. Wooow, thanks! This should be a huge space-saving thing for browsers.\nAre you using MQTT in production somewhere?\n. I think you can add long-polling in by leveraging streams, i.e. this client can run on any node binary stream. I think something like primus can do the trick, or basically anything than gives you a node binary stream. You just have to call the MqttClient directly, passing a function that returns a stream (for automatic reconnect). As for the server, what are you using? If it's custom-built, you can just use mqtt-connection on top of anything, or if it is Mosca you might require some more refactoring (that I'll be happy to merge), but I think it will be worth it.\nThe way this library is built is to leverage node Buffer API. mqtt-packet, also uses Buffer (and bl) for parsing. So, removing Buffer is out of scope. However, you can use MQTT.js on node, and paho.js in the Browser. That is built around the standard websocket API (good), and array buffers (good), but it is less pluggable (you cannot plug in a custom transport stream).\n. Thanks a million!\n. I think we should move the whole connect argument parsing to the individual client test files, these already include real servers. Would you like to submit a PR on that?\nHow do you feel in helping maintaining this project? Check out CONTRIBUTING.md and let me know if you agree with it.\nRegarding using a full-featured broker for tests, I don't think it is a good idea. It would be a chicken-egg problem, which one is right? Regarding having a 'mqtt-server' inside the mqttjs org, it would be a good idea, even to simplify the tests here. However I would split it in two modules, a create-stream-server thing that just creates all the TCP, TLS and WS servers, and then the mqtt-server could just be built on its top, just by wrapping the callback and providing some alias for 'mqtt' and 'mqtts'.\nI am working on a big refactoring of mosca, splitting out the core mqtt broker handling from all the rest (which is still private), which will be based directly upon mqtt-packet to achieve more speed. However this is far from being completed, so nevermind :D.\n. Added you to the repo, add yourself in the README! :)\nI have created the two repos under the main org. Have fun! :dancers: \nPing me when you have something to review!\n. Thanks!!\n. It would be very helpful if you send a PR do address that use case. You can just throw/emit an error in that case, a warning is not enough I think.\n. It really depends where we can catch this behavior. I am attaching the most probable places:\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L148-L203\nRegarding the latter, I think we might have a CONNACK timeout, i.e. if we do not receive a CONNACK in 5 seconds, we might just trigger the restart event.\nAlso, we currently swallow all connection errors to handle automatic reconnect in https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L183 but we might want to re-emit them as a 'connectionError' event, and document that in the README.\nWhat do you think?\n. Cool! If it works prepare a PR :D.\n. Closing for now.\n@gorhgorh feel free to send that PR in case!\n. Let me make an example: I have a page running on localhost:3000. I want\njust to run mqtt.connect(), and I have my mqtt connection. However, if I\nwant to connect from there to test.mosca.io, I want it to be on port 80. If\nthis is not happening now, can you please send a PR? Thanks a million!!\nIl giorno mar 3 feb 2015 alle 20:17 RangerMauve notifications@github.com\nha scritto:\n\nI noticed that when the port isn't specified in the URL being passed to\nthe buildBuilderBrowser\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js#L27\nfunction, it's defaulting to using whatever port the current page is being\nloaded with. Wouldn't it be more intuitive to use whatever the default port\nfor ws and wss be? (I'm assuming that would be the same as http and https,\nso 80 and 443)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/245.\n. Thanks for contributing!!\n\nI think we are missing some functionality here, let's recap:\n1. if nothing is provided, it should use the host/port combination of the current page\n2. if only a hostname is provided, it should use that hostname, and the port based on the protocol\n3. if both a hostname and port are provided, it should use those\nI think that the current code fails on one, because line https://github.com/RangerMauve/MQTT.js/blob/patch-2/lib/connect/ws.js#L37 can never be reached, as protocol is always set (see https://github.com/RangerMauve/MQTT.js/blob/patch-2/lib/connect/ws.js#L19-L25).\nCan you try adding a unit test for this? The in-browser tests live in https://github.com/mqttjs/MQTT.js/tree/master/test/browser, and you can run them with npm run browser-test.\n. Try starting a MQTT broker using https://github.com/defunctzombie/zuul/wiki/zuul.yml#server-optional\nIt should support websockets!\n. Ahum, it passes the current sets of tests, and I do not see how that can be tested anyway. Merging.\n. First thing: createClient is still there but deprecated. Does it still work for you?\nencoding is not needed anymore.\nWhich broker are you using? And which version?\nThis versions passes the parameters for MQTT 3.1.1, which your broker might not understand. Try passing:\nhttps://github.com/mqttjs/MQTT.js/blob/1090fa6ce841790af2f51e72c4cd64f5fbd2d1c4/lib/client.js#L14-L15.\n. Have you tried passing the 'old' protocolId and protocolVersion:\nhttps://github.com/mqttjs/MQTT.js/blob/1090fa6ce841790af2f51e72c4cd64f5fbd2d1c4/lib/client.js#L14-L15?\nDoes it work without credentials?\n. I have updated the README, so other people will find the solution in the docs.\n. If it is the first time you install a binary addon, then it might take some time to download the node.js headers. You should look into /usr/lib/node_modules/mqtt/node_modules/ws/builderror.log and see if the build is stopped somehow. So, ensure your pi is connected to the outside internet, and let it go for a while.\nWe might even put ws and websocket-stream as optional dependencies. Anybody has other opinions on this?\n. Nice! :)\n. I am a little low on bandwidth to maintain everything, you or anybody else would like to submit a fix for those? Maybe also we can add some form of testing for them, so we know when they break?\n. This is really good! Thank so much! How are you using MQTT.js? We are always looking for new committers who wants to help maintaining this :)\n. This one is websocket-related. I think we might ask to @ralight. MQTT.js might not be passing some of the standard-compliant headers around, Mosca is quite tolerant in that sense, basically it considers any websocket connection a mqtt over websocket connection.\n. My bad, I think I did not port the the mqtt subprotocol thing when I merged this with mows. I will add it asap. Thanks for helping debugging it @ralight.\nIs mosquitto v1.4 with websocket running somewhere on the cloud, so I can test that easily?\n. @mkarliner would you like to send a PR? I think you should just switch the line https://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js#L10 to 'MQTT4'. Can you try it and send a PR if it does work?\n@ralight It should be sending the old 'mqttv3.1' subprotocol, which was custom to send in MQTT 3.1. I think it might be a good idea to add the support for it in Mosquitto, just because older version of the all the libraries will keep working in that way.\n. Can you please test it frome node? Just to be sure it is a browser-only\nthing. There might be a problem in the new version of websocket-stream in\npassing the subprotocol in the browser.\nI'm afraid that doesn't fix it for me. I tried it by patching the generated\n\nbrowser code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/251#issuecomment-74311923.\n. Version 1.0.10 sends the mqtt subprotocol. @mkarliner can you please test and confirm?\n. @mkarliner have you tested the 7 minutes old release?\n. @mkarliner Feel free to reopen if it is still broken.\n\n@ralight the instance running in test.mosquitto.org:8080 seems not to be working.\nThe example on http://test.mosquitto.org/sys/ uses mqttv3.1 returns this error:\nWebSocket connection to 'ws://test.mosquitto.org:8080/mqtt' failed: Error during WebSocket handshake: Unexpected response code: 404\n. Oh I should be connected to a bad hotel wifi that is blocking that via a\nproxy server :/.\nIl giorno dom 15 feb 2015 alle 20:36 Roger Light notifications@github.com\nha scritto:\n\n@mcollina https://github.com/mcollina It works for me just fine on\nChrome and Firefox. The websockets mqtt[v3.1] handler doesn't pay any heed\nto paths so it wouldn't return a 404. Only the http handler returns 404s.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/251#issuecomment-74435521.\n. @256dpi @mdickens @RogerMauve any of you has time to look into this? I am very low bandwidth at the moment, and this looks like a complex bug.\n\nOr if @meilon would like to understand what the problem is and provide a fix, we would be grateful.\n. The diagram you linked explain the the exchange poorly, replace 'client' with 'sender' and 'server' with 'receiver'. As the two roles can be exchanged if a client does a qos2 subscription.\nI think you should try to debug it\nRegarding options, send a PR against the README, I'll get that merged :D.\n. @mdickens it is all yours, thank so much in helping out!\n. I think I found the bug\nhandlePubrel should accept two parameters, one packet and a callback, in particular the callback should be passed to sendPacket here https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L766 \nIn fact, here https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L219 it is called with two arguments.\nYou should be able to write a unit test by sending any packet after a PUBREL, it will not get processed.\n@mdickens It's still on you to assemble a PR :P. Thank so much for debugging it!!\n. No worries, I have been busy myself :(.\n. ahahah yes :D.\n. Thanks very much for the great work put into this. Anybody else would like to review the changes before we merge in? Thanks!\n. @adamvr @256dpi @mdickens what do you think? For me is LGTM.\n. I will merge this on Monday if nobody else has objections.\n. @itavy thanks so much! I added you to this organization! Feel free to add yourself to the README.md.\n. Thanks!\n. Thank so much! A new release is coming :)\n. Which example are you using that it is not working?\nThere might be a race condition problem in the example in the README. It seemed fixed, but please try:\n``` js\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://test.mosquitto.org');\nclient.on('connect', function() {\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  console.log(message.toString());\n  client.end();\n});\n```\n. Which version of Mosquitto are you running locally?\nIl giorno mer 18 mar 2015 alle ore 23:02 bbx10 notifications@github.com\nha scritto:\n\nHi,\nI am usinge Ubuntu 14.04, mosquitto, and node mqtt on the same laptop.\nmosquitto_sub and mosquitto_pub on localhost work as expected but node mqtt\ndoes not.\nnode v.0.10.25\nnpm install mqtt\nHere is the test code with log messages for every event.\nvar mqtt    = require('mqtt');var client  = mqtt.connect('mqtt://127.0.0.1');\nconsole.log('mqtt.connect');\nclient.on('connect', function () {\n  console.log('on connect');\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\nclient.on('error', function(err) {\n  console.log('on error', err);\n});\nclient.on('close', function() {\n  console.log('on close');\n});\nclient.on('disconnect', function() {\n  console.log('on disconnect');\n});\nclient.on('reconnect', function() {\n  console.log('on reconnect');\n});\nclient.on('offline', function() {\n  console.log('on offline');\n});\nclient.on('message', function (topic, message) {\n// message is Buffer\n  console.log(message.toString());\n  client.end();\n});\nThe output looks like this:\nmqtt.connect\non offline\non close\non reconnect\non offline\non close\non reconnect\nIf the URL is changed to mqtt://test.mosquitto.org, the test works fine.\nThe output looks like this:\nmqtt.connect\non connect\nHello mqtt\non close\nI suspect this is a race problem since connecting to localhost must be <\n1ms while connecting to test.mosquitto.org is probably > 50 ms depending\non location.\nI will try to work backwards from the offline event since it is emitted in\na single place in the code.\nThanks,\nbbx10node\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/257#issuecomment-83201468.\n. Thanks for reporting and helping triaging this one. I updated the README accordingly.\n. @jimbojw I think it's fairly straightforward. Would you mind to send a PR?\n. So:\n\n1) createConnection is going to be removed in v2, in favor of mqtt-connection. The whole idea of a 'connection' object is completely broken.\n2) connect() (https://github.com/mqttjs/MQTT.js/blob/master/lib/connect/index.js#L132) is responsible for allocating a new MqttClient. The tests verifies the options\u00a0 on which this is created. The actual tests are really spread in files, because of how this project evolved over time. Any consolidation there will be easy.\n3) mqtt-connection tests failing: they were passing last time I checked. Maybe some library got updated, feel free to send a PR.\n4) Yes.\nYou want to place the fix here: https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L681-L701.\nFor the test, you can start a new server for a test in https://github.com/mqttjs/MQTT.js/blob/master/test/client.js, where you listen only to the 'connect' event, and reply with the given CONNACK return code.\n. Thanks for investigating this, and providing a definite answer for this.\nI'm closing this issue, and opening a new one for maxFirstConnects options.\n. I have no idea what is wrong with pm2, which I do not use.\nnode orig.js works fine for me, I have never seen those error. Please, try running it without PM2.\n. Closing as v2 will remove the server counterpart.\n. Redis plays no role in MQTT.js.\n. They all seem async to me, can you please point me to the sync ones?\n. They seem all legit to me. If you would prefer to change them, submit a PR and we will discuss there.\nMerging this one, thanks for reviewing @itavy!\n. I think it is necessary, but not how it is implemented in this pull request.\nmqtt.connect() creates a client that continuously try to connect at those address. The right approach is to actually make sure either:\n1. the 'client' event in the server is emitted, and the client closes\n2. it never connects to anything (a small timeout is ok), i.e. the 'connect' event in the client is never emitted.\nAfter each of those cases the client needs to be closed properly.\nBoth these checks are asynchronous, and in the current code causes spurious failures.\n. I don't think we reached an agreement on this. Just closing for now.\n. I have added the relevant information to README.\n. That there is bug. See https://github.com/mqttjs/MQTT.js/pull/266, as it should fix it.\n. It is working in this branch, have you checked it out?\n. Anyone else can try and confirm?\n. Can you please try it again? Should be working now.\n. username and password are supported. what problem are you seeing?\n. All the mqtt-related connect options are listed here: https://github.com/mqttjs/mqtt-packet#connect.\nIf you want to send a PR to update the documentation, it would be awesome!\n. Already supported, see the examples.\nIl giorno sab 4 apr 2015 alle 21:42 Lucas notifications@github.com ha\nscritto:\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/268.\n. I think this was fixed.\n. test.mosquitto.org uses a self-signed certificate, which means it is not secure, and it should be used only for testing (and you know what are you doing). In that case, you should pass { rejectUnauthorized: false } to mqtt.connect(url, opts) as documented in https://nodejs.org/api/tls.html#tls_tls_connect_options_callback.\n. It seems there are still some problems with the certificate chain. How are you starting Mosca?\nMQTT.js and Mosca accept the same options of https://nodejs.org/api/tls.html (which it uses internally). I suggest trying to connect using that certificate using just TLS to a simple TLS sever on the other side.\n. It seems correct. Does that work with a self-signed certificate, passing rejectUnauthorized to the client? Which CA emitted your certificate? If it's self-signed, please recreate it, as you might have made an error. \n. MQTT.js v0.3.1 has rejectUnauthorized set to false by default. I have no\nidea about mqttws31.js. I think Comodo CA certificate is not trusted by\nnode by default.\nIl giorno mer 22 apr 2015 alle 08:54 Joel Dapello notifications@github.com\nha scritto:\nusing openssl s_client gives Verify return code: 21 (unable to verify the\nfirst certificate);\nmeanwhile, passing { rejectUnauthorized: false } to the client allows\nconnection with the current cert. The cert is from comodo.\nAdditionally, using mqtt.js v0.3.1 in a node app and mqttws31.js from a\nbrowser both connect without throwing errors.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/271#issuecomment-95052246.\n. :+1: for me, but you need to get travis happy, the code style validations are failing :).\n. It seems a spurious failure on Travis. Can you please remove that blank commit?\n. Would you like to add a unit test for this?\n. I think you can reproduce all the possible scenarios with https://github.com/mqttjs/MQTT.js/blob/master/lib/store.js, without calling the close method.\nYes, several connecting/disconnecting scenarios would be good!\n. Ping, any update on this one?\n. Hi @erwinkendo I completely lost your question :/, can you please repeat it?\n. Thanks, that's perfect, I'm merging!!\n. Thanks! This will be updated on NPM when we publish a new version!\n. It looks like you are hitting a bug. Would you mind sending a PR that address this issue?\n. You clone this repo, browserify it again, verify the bug is there, put some console log, browserify it again, and so on :D.\n. The instructions for browserify it are https://github.com/mqttjs/MQTT.js#browserify.\n. Ouch! :D I thought I had already fixed it, but I thought it was a regression on a very specific situation :(.\n. Thanks!!\n. dont't worry and take your time :)\nIl giorno dom 3 mag 2015 alle 04:57 Dave Jensen notifications@github.com\nha scritto:\nI can help implement this but I won't be able to look at it until later\nthis month.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/277#issuecomment-98434131.\n. @djensen47 feel free to send a PR whenever you want on this :). Closing for now.\n. Yes it works. I am not sure about MessageSight as I do not have one, and this project is not sponsored by IBM. It would be great if you could suggest a fix for your issue and submit a pull request.\n\nIf it works in the browser with 'mqtt' it's because it's falling back to 'ws', which is kind of wrong.\nAre you switching between the right ports for ws and mqtt (they do not run on the same port)? \n. Closing, feel free to reopen.\n. maybe some of that logic creates a couple of conflicting options. can you print in full the two objects?\n. This works for me:\n``` js\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('ws://test.mosca.io');\nclient.subscribe('presence');\nclient.publish('presence', 'Hello mqtt');\nclient.on('message', function (topic, message) {\n  console.log(message.toString());\n});\nclient.end();\n``\n. Good catch, thanks!\n. Good catch, thanks!!\n. I think so, given that the PSK stuff is just TLS. However I do not know the options for doing it in node.js, a good starting point is https://nodejs.org/api/tls.html#tls_tls_connect_options_callback. You can pass any of those options through themqtt.connect()` method.\nIf you would like to document that in the examples folder and send a PR, that would be great!\n. TLS-PSK is not available in Node.js, when that will be added it would be supported in piggyback.\n. I strongly recommend you to update your node installation to 0.10.38 (or 0.12).\nYou need to pass a ca option containing an array with the CA certificate in it (as a buffer) see  https://github.com/mqttjs/MQTT.js/blob/97d3f158f11c3be6bb58b74376964c3571e162ef/test/secure_client.js#L97.\n. Node.js is versioned using a pattern MAJOR.MINOR.PATCH, and in 0.10.38 and 0.10.5 the patch versions are 38 and 5, respectively. And 38 > 5, so it s far more recent.\n. Yes.\n. Never mind, the 'connect' event is in fact emitted.\n. 1. exactly like you did, but you either need to use a valid certificate, or tell MQTT.js what to do. The default is to be secure, so self-signed certificate are not allowed by default.\n2. There are various options, look at https://nodejs.org/api/tls.html#tls_tls_connect_options_callback for everything, as the options are passed as-is to tls.connect. The simple one is to pass rejectUnauthorized: false in the options.\n3. No.\n. Can you send a PR for these fixes?\n. If somebody sends a PR with tests, I'll be happy to review, test and merge :).\n. Thanks!\n. Thanks! I didn't know it was not there, nice tool!\n. You can use the 'authorizeForward' method in Mosca: https://github.com/mcollina/mosca/blob/master/lib/server.js#L395-L407\n. 1. the MQTT protocol specifies no way to know that all retained messages have been delivered, so MQTT.js will not have one.\n2. assuming that the retained messages will be delivered before other messages is currently implementation specific, in particular this has some performance implications so different brokers might chose differently. Section 3.1.1 of the latest spec (3.1.1) does not address retained messages. If you want to send a patch to Mosca to implement this, I will be happy to review it and merge.\n3. I think that retained messages should be used on their own topics, and logically separate them. This clarify the behavior too, and then it is a lot easier to debug.\n4. Relying on non-algorithmic message ordering is almost always a bad thing in a distributed environment: it does not work (lamport), because bad stuff can always happen.\n. @cefn my major concern there is performance. But yes, that can work. A probably simpler way is emitting an event into server from here https://github.com/mcollina/mosca/blob/master/lib/persistence/abstract.js#L82-L91, and then react to that event in your code.\n. Thanks so much!! Can you please add a unit test for this?\nIl giorno mer 10 giu 2015 alle 21:33 RangerMauve notifications@github.com\nha scritto:\n\nFixes #295 https://github.com/mqttjs/MQTT.js/issues/295\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/mqttjs/MQTT.js/pull/296\nCommit Summary\n- Fix #295\nFile Changes\n- M lib/client.js\n  https://github.com/mqttjs/MQTT.js/pull/296/files#diff-0 (3)\nPatch Links:\n- https://github.com/mqttjs/MQTT.js/pull/296.patch\n- https://github.com/mqttjs/MQTT.js/pull/296.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/296.\n. Can you please fix the linting errors? https://travis-ci.org/mqttjs/MQTT.js/jobs/66288162\n. Do you mind sending a PR to update https://github.com/mqttjs/MQTT.js/blob/master/lib/connect/tcp.js#L16 to use this variant: https://nodejs.org/api/net.html#net_net_createconnection_options_connectionlistener\n\nSo you can pass the relevant parameters localAddress and localPort.\nHowever, it seems that the same does not apply to TLS connections: https://nodejs.org/api/tls.html#tls_tls_connect_options_callback. However, it might just be a doc issue, so please verify.\n. Closing.\n. :+1:!\n. This is really really good! Thanks for fixing it. Can you please add a unit test, so that we don't hit this bug again?\n. Can you please send a PR for that? Also a unit test in https://github.com/mqttjs/MQTT.js/blob/master/test/browser/test.js might be good.\n. Fixed in https://github.com/mqttjs/MQTT.js/pull/303.\n. The CI build failed, can you please resolve the issues?\n. Thanks!!!\n. You can pass username and password to mqtt.connect, as they are part of the CONNECT packet. I will leave this open, and it is probably worth to add them to the README.\nWould you like to send a PR? \n. Thanks!\n. This is not really clear. Can you please provide steps to reproduce?\n. Yes of course, just don't do it.\nIl giorno sab 11 lug 2015 alle 15:53 Chris Kalafarski \nnotifications@github.com ha scritto:\n\nIs it possible to make a one-off request to an end point (i.e. without\nneeding to subscribe)?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/308.\n. Oh I thought you wanted to do it for a publish.\n\nFor a subscribe, you need to use retain messages when publishing, and those\nwill be sent to you when subscribing. So aftet the first messages, you just\ndisconnect.\nIl giorno sab 11 lug 2015 alle 21:52 Chris Kalafarski \nnotifications@github.com ha scritto:\n\n@mcollina https://github.com/mcollina Why not? What's the alternative\nfor getting data when using something AWS Lambda where it doesn't make\nsense to subscribe?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/308#issuecomment-120655122.\n. Sorry for not replying earlier. I hope you solved your issue.\nI'll reopen if needed.\n. there is the 'close' event, which is emitted when the user requests a disconnection via end(). The 'offline' event is instead used when the connection to the server is closed (for whatever reason) and the client reconnects.\n. Thanks!!\n. You should use it gobally, or better not use it at all in a web app server (it does not scale). If you need to do something for every published message, just use mosca and put the behavior in there.\n\nRead: http://www.nearform.com/nodecrunch/internet-of-things-how-to-build-it-faster/.\n. Mosca only supports QoS 1, it's stated in the README.\n. If it has minor impact, I would consider a PR that supports that.\nAny other opinions?\nIl giorno sab 22 ago 2015 alle 11:46 Alexandre BM notifications@github.com\nha scritto:\n\nIt's not a standard yet, but that would be nice to support mozTCPSocket,\nwhich is supported by FirefoxOS.\nhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozTCPSocket\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/314.\n. I'm all in in for more modularity.\n\nAlexandre, is there a module that wraps TCPSocket in a Node stream? I think\nthat would be the first step.\nI'm also new to that standard, does it support SSL?\nIl giorno sab 22 ago 2015 alle 18:12 itavy notifications@github.com ha\nscritto:\n\nHi,\nI think if we can refactor the transport and separate it fron the protocol\nwe will be able to support more in the future. My ideea is to make a\nfactory for transports and each type has its own module. Atm i am not able\nto look and make a PR but in about 2 weeks i will be able to look and see\nhow it can be separated\nOn Aug 22, 2015 6:59 PM, \"RangerMauve\" notifications@github.com wrote:\n\nIf the code to enable it isn't very long then I think it'd be a very good\nidea. Maybe make it so it supports the unprefixed version just in case it\nbecomes standardized. If it takes a lot of code, then I would suggest\njust\nhaving a stream wrapper and using that as a separate library so that\nthere\nisn't needless bloat.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/314#issuecomment-133717615.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/314#issuecomment-133718245.\n. MQTT.js requires a node duplex stream. I think it would not be too hard to\ndo that, the functionality is similar. A similar wrapper is\nhttp://npm.im/websocket-stream.\nIl giorno sab 22 ago 2015 alle 22:58 Alexandre BM notifications@github.com\nha scritto:\nI agree with @RangerMauve https://github.com/RangerMauve .\n@mcollina https://github.com/mcollina I'm not a NodeJS guy I'm only\nworking on the browser side. but yes, it does support SSL. it's raw sockets\nfor the web.\nyou can find the description of the TCPSocket interface here :\nhttps://developer.mozilla.org/en-US/docs/Web/API/TCPSocket\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/314#issuecomment-133754558.\n. Closing, feel free to reopen if needed.\n. Thanks @itavy! I've merged your commit into this PR. If it's all good, then we can release 1.4.0.\n. Done\n. Perfect!\n. Hi @philmaker1! Would you mind sending a PR to fix them?\n\nThanks!\n. Fixed long ago.\n. The library should install fine, all binaries should be optional. Also, I\nbelieve this to be specific to the ws module.\nIl giorno dom 13 set 2015 alle 11:47 yangpu notifications@github.com ha\nscritto:\n\nwindows 10, 64 bits, compile error after updating node 4.0:\nerror C2988: unrecognizable template declaration/definition\nlooks like v8.h header file has been changed dramatically in version 4.5.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/318.\n. This should be fixed.\n. Thanks for contributing this fix for webpack! \n. Thanks!\n. Can you please send a PR? If you could add a test, we will be sure not break it again.\n. Fixed by #321.\n. Anybody wants to clean this up, review it, add a test?\n. This looks good, would you mind adding a test for this?\n. Thanks! released as 1.7.1\n. I'm willing to take over mqtt-spec, while I will probably neglect mqtt-server. Any volunteers for mqtt-server?\n. @kokeksibir I've added you to the mqtt-server group in github, you have commit access now. Let me know your npm handle so that I can add you there as an owner.\n. Done :)\n. Nice one. Which path? Would you mind sending a PR to fix it?\nIl giorno dom 27 set 2015 alle 12:45 Benget Immanuel Nata \nnotifications@github.com ha scritto:\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/323.\n. Probably fixed, feel free to reopen in case.\n. This is an example of an offline store: https://www.npmjs.com/package/mqtt-level-store\n. The reality is the exact opposite. You won't get an error event, but it will automatically try again. You would get an 'offline' event, followed by a 'reconnect' event.\nWhat do you mean by \"brief categories\"?\n. Thanks! I didn't even know about it!\n. Can you please also add these to subscribe?\nAnd also update the docs https://github.com/mqttjs/MQTT.js/tree/master/doc.\n. Oh my bad :). Thanks for sending this PR! :)\n. Good point! Which node version are you using?\nI usually use that callback for QoS 0 for that purpose - to avoid writing too fast.\nSee https://github.com/mqttjs/MQTT.js/blob/master/benchmarks/bombing.js.\n. I think a complete fix should be to increase the max number of listeners in the stream as well, something like 1000 or so, as the same problem would happen for QoS 1 and 2.\nWould you mind sending a PR for that as well?\n. Thanks!\n. Thanks!! :)\n. Are we talking about sensor -> broker load, or something else?\n\nI suggest you to use wireshark to check what data is flowing through. Maybe you did a wrong subscription on the device end, and too much data is coming down.\n. BTW, the heartbeat should be in the order of minutes, not seconds. Good values are 15 min/30 min/1 hour, depending on your connection.\n. Which broker are you using?\nMQTT 3.1.1 supports clients without a clientId.\nAre MQTT.js broker tests passing on IE10?\nAlso you should have a look at checking mqtt-packet tests pass fine in the\nbrowser.\nIl giorno mer 14 ott 2015 alle 16:35 Sanndro notifications@github.com ha\nscritto:\n\nHey I am trying to get mqtt-elements\nhttps://github.com/mqttjs/mqtt-elements with MQTT.js to work with IE10.\nI have an old bundle of MOWS\nhttps://github.com/sandro-k/mqtt-connection/blob/master/mows/mows.js\nthat is working with IE10.\nTo locate the problem I am using a browserified version of MQTT.js without\nany Webcomponent/ Polymer add-ons. The bundled version of MQTT.js is build\nwith\nbrowserify ../node_modules/mqtt/mqtt.js --standalone mqttjs > bundle.js\nwhen running\nvar client = mqttjs.connect(\"ws://localhost:3005\",  options);\nin Chrome the MQTT connection is established and I get the following log\non the broker\nclient connected (client=mqttjs_test)\nafter that I can subscribe/ publish using the console. Running the same\ncode in IE10 actually connects the client to the MQTT-Broker and I get the\nfollowing log message on the broker:\nclient connected\nIt looks like the client is connecting without a clientId to the broker.\nI am not able to subscribe or publish any messages. The payload of both\nCONNECT packets from Chrome and IE10 is identical.\nRight now I have no clue what is broken withe the build.\nA VM with IE10 can be obtained at https://dev.modern.ie/tools/vms/.\nThanks Sandro\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/333.\n. I'm from my mobile now. Look into package.json, there should be a script\ndefined\nIl giorno mer 14 ott 2015 alle 17:02 Sanndro notifications@github.com ha\nscritto:\nOn my local machine I am using mosca and testing it against a Mosquitto\ninstance.\nWhich is the right test to run test/browser/test.js? How would you run it\nin the Browser?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/333#issuecomment-148077540.\n. Possibly something in lib/connect/* is wrong for IE 10, at least regarding\nthe connect arguments. Put some console.log in there, and try understanding\nwhere the problem is. Comparing it with chrome might help.\nIl giorno mer 14 ott 2015 alle 17:11 Sanndro notifications@github.com ha\nscritto:\nFound the command [image: :+1:]\n4 Test are failing\nMqttClient :: specifying a port :: should publish and subscribe\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\nMqttClient :: specifying a port and host :: should connect\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ndone() invoked with non-Error: [object Event]\ndone() invoked with non-Error: [object Event]\nMqttClient :: specifying a URL :: should connect\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ndone() invoked with non-Error: [object Event]\ndone() invoked with non-Error: [object Event]\nMqttClient :: specifying a URL with a path :: should connect\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/333#issuecomment-148079887.\n. Was this fixed?\n\nI'm closing for now, as there seem to be no interest in supporting IE10, and time is passing by.\n. Thanks for the PR! I've added a small comment.\nWould you mind:\n1. Adding a unit test for this\n2. Updating the README\n. I think this is a bug. Maybe you can send a PR with a couple of unit tests for it!\nBrowser tests lives in https://github.com/mqttjs/MQTT.js/tree/master/test/browser\nRun npm run browser-test to run them.\n. I'm :-1: on exporting an UMD, but I'm :+1: on providing an already built library. We need to automate that, so doing a release is easy. The options are either to add the bundle in a dist/ folder, or to stick it into the GH release (and automate that). Anybody that wants to send a PR? \n. @RangerMauve I think we should publish it on Github, rather than NPM. If the target host uses NPM, we can safely assume it is using browserify/webpack/*, so no need for UMD.\n@jmeas this library is built to exploit dependencies coming from NPM, so we can update them safely in case of bugs. An UMD bundle will break all of that, by bundling everything on a single file. Moreover, an UMD is really hard to debug (ok we can add sourcemaps). Finally this library should run well on both Node and the Browser. Currently it is easier to run on Node than the Browser, and we should not break one to fix the other.\n. Closing, if somebody is still interests we'll reopen.\n. Thanks @jmeas! :)\n. Would you like to send a PR to address this one as well?\n. I think it should pass key and cert vs keyPath and certPath.\n. I think all of this is fixed.\n. cc @gkwicker might help\n. Closing this :).\n. This is nice @sandro-k. While we are at it, we should refactor this to fix #343 as well.\nWhat do you think?\n. Actually we should ditch queue alltogether, and get packets in the store.\n. We can still accept a queue array in the constructor. For QoS 1+ publishes, we need to put them also in the store. \n. This has saw very little activity in the past while. Closing for now.\n. v0.10 is known to have a bad garbage collector. You should probably switch to node v4.\nHowever, the default behavior of node v0.10 is to eat up all your memory before collecting anything (I'm oversimplifying). \n. You are wrong about the Store API. Its purpose is to store both incoming and outgoing messages and confirmations.\nFor outgoing, see https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L46-L53.\n. If there is no connection, then the packet goes in the queue. There might be a bug in this code, but it was written to handle your use case.\n. mqtt-level-store should be on disk.\n. Before it's connected? Oh, just saw that: it's a bug. Would you mind sending a PR to fix it? https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L586-L588\n. @oroce any update on this?\n. It might have been fixed. Feel free to reopen if not.. There are a couple of options in the MQTT spec regarding how messages are stored for QoS 2. Maybe the way it is implemented here is not working well with HiveMQ.\nHave you checked with Mosquitto as well?\nProbably the best way to fix this is to add some console.log where things are deleted: https://github.com/mqttjs/MQTT.js/blob/master/lib/store.js#L72\n. @jdiamond, would you like to have a look at #343, #344 and #166. These should be along the lines of what you have contributed recently.\n. @jdiamond would you mind testing/reviewing this?\n. Please, send a PR against this branch that replaces them with the inherits module.\n. @roccomuso what do you mean? We bump the dependency not because of ES6, but because of streams 3, and the complexities of keeping the codebase in shape for that. v1 is still there to use, and if we want to backport patches, we can! Would you like to take care of the v1.x.x of MQTT.js?\n. @roccomuso we are not using any ES6 for inhering. Giving that util.inherits its discouraged, we switched to the npm module http://npm.im/inherits\n. So, it seems there is some problem at the networking level. Not sure we can handle this case in JS land. Are you running this in a controlled environment? Which version of node are you using?\nI'd really welcome a PR to address this problem, but I have little clue on where that could be.\n. Do you experience the same problem when running the code on your computer?\nIl giorno ven 13 nov 2015 alle 12:43 Agor Maxime notifications@github.com\nha scritto:\n\nI'm using node v0.10.40.\nIn this test case, the client is an odroid C1 (a raspberry pi clone)\ndirectly connected to my computer (I run wireshark on the computer) through\nan ethernet cable, so there shouldn't be any packet-loss or something like\nthat..\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/346#issuecomment-156406397.\n. You should send an empty message. This is a standard MQTT feature, and fully supported.\n. It is worth a fix.\n\nWe should:\n1) emit an error if credentials are wrong, and catch it in the CLI\n2) validate that the port is a number\nWould you mind sending a PR?\nIl giorno dom 15 nov 2015 alle 18:52 Rocco Musolino \nnotifications@github.com ha scritto:\n\nThis is just something I would like to point out.\nRunning this command, the mqtt.js CLI 'freezes' with no response:\nmqtt publish -h '192.168.1.12' -t 'anyone' -m 'hello world' -u 'megatron'\n-p 'ciao123'\nBecause mistakenly using the lower case -p instead of -P to specify the\npassword (mqtt.js acts as 'ciao123' was the port number..).\nI don't know if this is worth a 'fix', but can't be useful some kind of\nhint/error in this scenario?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/348.\n. That should already be handled by https://github.com/mqttjs/MQTT.js/blob/master/bin/pub.js#L23.\nWhat's happening in minimist when port\u00a0 is not a number? Is passed straight as a string?\n. Thanks!! :)\n. If a subscription fails, you would find something different from 0,1,2 as the qos in the first argument of the subscribe\u00a0callback: https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L801-L805.\n. Not really, an unathorized publish will disconnect the client, there is no feedback from the broker.\n. Is this done?\n. Yes. But not really. in one case you'd get a 'bad' disconnect triggered from the server, on the other it will actually disconnect cleanly.\nIt's probably impossible to tell with QoS 0, as it disconnects straight away. But it should be possible to do something for QoS 1 & 2.\n. Merged with #345 \n. Actually we plan to add it in https://github.com/mqttjs/MQTT.js/issues/166. Would you like to send a PR?\n. Which broker are you using?\n. Which version? It should be handled.\n. You also need to configure a persistence to enable the offline storage: https://github.com/mcollina/mosca/wiki/Mosca-advanced-usage#redis-persistence-options.\n. Redis for \"backend\" is used for running multiple brokers (HA), You need to configure a persistence to enable offline: https://github.com/mcollina/mosca/blob/master/test/server_redis.js#L34-L36. The options are in the above wiki page. Yeah.. a nice pass on the docs will be nice :).\n. Are you subscribing to anything with QoS = 1? If you have no offline subscription, there is nothing to restore.\n. Try with mosquitto (one of the latest). It might be a problem with Mosca (which I would need to track down).\n. or mosca standalone.\n\nIn the code above:\nsetTimeout(function(){\n   client.subscribe('test'); \n}, 3000)\nshould be:\nsetTimeout(function(){\n   client.subscribe('test', { qos: 1 }); \n}, 3000)\n. Closing.\n. Yes! Would you like to send a PR?\n. I don't know why jshint complains about those, but they are used if you check in the code. A fix for this might be really helpful.\n. setImmediate is needed to support node v0.8. We are killing node v0.8 support in the next version #345: if you want to remove them, please send a PR against that branch, I'll get those in. \n. There seems to be a jscs error :).\nBut great job! Would you like to help contributing to mqtt.js?\n. I've given you the commit bit, please follow the CONTRIBUTING.md guide :).\nAdd yourself to the README as well!\n. I think that should be supported. You should place some console log in https://github.com/mqttjs/MQTT.js/blob/master/lib/connect/index.js and https://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js, and possibly send a PR.\nThis is definitely not standard anyway, and I recommend deploying it to /mqtt (as the spec prescribes).\n. @mkarliner would you mind sending a PR to fix this?\n. Not really, I should set something up and test this.\nIl giorno mer 9 dic 2015 alle 11:14 Michael Karliner \nnotifications@github.com ha scritto:\n\nCertainly, when I find what is doing it :-) Any clues much appreciated.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/356#issuecomment-163361532.\n. @knolleary thanks for the clarification!\n\nAnyway, we should solve this. @sandro-k have you got some bandwidth for solving this one?\n. > Dropping connection on error is the lesser of many evils, we think its worse to say OK! when a device is trying to subscribe but actually some topics aren't allowed.\nThat is not correct. A broker can return qos >= 128 to say it was not allowed. However, there is no error code for the PUBLISH command.\ncc @knolleary \n. This is not really helpful. According to my understanding of the 3.1.1\nspec, that is valid. However, that behavior might not be supported by old\nbrokers. Which broker are you using? On which version? Can you upload a\nsnipper?\nThis is the relevant part of the spec:\nIf the Keep Alive value is non-zero and the Server does not receive a\nControl Packet from the Client within one and a half times the Keep Alive\ntime period, it MUST disconnect the Network Connection to the Client as if\nthe network had failed [MQTT-3.1.2-24].\nIl giorno gio 10 dic 2015 alle 00:46 blbird notifications@github.com ha\nscritto:\n\nI look over the recent changes that have rescheduling for ping request.\nI thinks this is the cause of my problem.\nAccording to below part of mqtt specification, PINGREQ seems not to be\nrelated to data from server.\nThe PINGREQ Packet is sent from a Client to the Server. It can be used to:\nIndicate to the Server that the Client is alive in the absence of any\nother Control Packets being sent from the Client to the Server.\nRequest that the Server responds to confirm that it is alive.\nExercise the network to indicate that the Network Connection is active.\nTherefore, I think that the client must send ping request regardless the\ndata from server. So, please reconsider this change.\nThanks.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/357.\n. Thanks!! :+1: \n. I'm :+1: on this. Fix the code style so that travis can pass.\n\nI think we should get all the code style stuff pass on windows (maybe move to standard or semistandard).\nAnyway, would you like to help assembling the v2 release? It seems you are keen on performance (2000 concurrent qos1), and the new one is at least 3x faster. There are a couple more things to do.\nAlso, would you like to be a contributor to this module? check out CONTRIBUTING.md.\n. @jdiamond add yourself to the README, I've made you a collaborator.\n. Thanks for spotting this @knolleary! Would you mind adding a quick unit test, so we don't have any regression on this in the future?\nThere is also a small code style issue in travis.\n. ahahha no worries. I keep doing these mistakes when on the other side :D.\nBTW, node-red is one of the main dependents of MQTT.js. Would you like to help maintaining this one too?\n. mqtt-packet v4.x.x breaks compatibility with node 0.8, which this MAJOR version of MQTT.js still support.\nThe pull request #345 contains the next MAJOR version of MQTT.js, which breaks some backward compatibility, including v0.8 support. If you want to help, feel free to chip in.\n. I'm not understading your question.\nMQTT.js will emit the message event when something arrives. There is no\nneed for loop_start or loop_forever, node.js has a reactor pattern built in.\nIl giorno dom 27 dic 2015 alle 17:47 AdamMiltonBarker \nnotifications@github.com ha scritto:\n\nFound my answer here: #352 https://github.com/mqttjs/MQTT.js/issues/352\nThis is the correct way to continually check for latest messages? Wasn't\nsure if you needed to continually subscribe.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/364#issuecomment-167425688.\n. This works on my box with mosquitto:\n\n``` js\nvar mqtt = require('mqtt');\nvar settings = {\n    clientId: 'abcde',\n    clean: false,\n    reconnectPeriod: 1000 * 1\n}\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect(settings);\nclient.on('connect', function () {\n    console.log('connected to the server');\n   client.subscribe('test', { qos: 1 });\n});\nclient.on('message', function (topic, message) {\n  console.log('received', message.toString());\n});\nclient.on(\"error\", function(error) {\n    console.log(\"ERROR: \", error);\n});\nclient.on('offline', function() {\n    console.log(\"offline\");\n});\nclient.on('reconnect', function() {\n    console.log(\"reconnect\");\n});\n//start sending\nvar i = 0;\nsetInterval(\n    function(){\n        var message = i.toString();\n        console.log(\"sending \", message)\n        client.publish(\"test\", message, {qos: 1}, function(){\n            console.log(\"sent \", message)\n        });\n        i += 1;\n    },\n3000)\n```\nI might guess that your keepalive is way to small, possibly your broker is on the net and 1s is not enough.\nWhich broker are you using?\n. This works fine as well:\n``` js\nvar mqtt = require('mqtt');\nvar settings = {\n  keepalive: 1000\n}\nvar mqtt = require('mqtt');\nvar client = mqtt.connect(settings);\nclient.on('connect', function () {\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\nclient.on('message', function (topic, message) {\n  console.log(topic, message.toString());\n});\n```\nthere is no need for loop_forever in node.js and MQTT.js. It's an asynchronous platform and it just works.\nThe problem lies in your broker, not in MQTT.js. MQTT is a complex protocol, and you should use mosca or aedes as your broker if you want to plug in some node.js behavior. \nFor this reason we are deprecating the server implementation here in v2, see #345. There is also https://github.com/mqttjs/mqtt-stack.\n. The server will be removed in v2.\n. I have no idea of what prefetch is for RabbitMQ.\nQoS 1 works fine with other brokers, so I fear this is a Rabbit issue. Not\nsure how to debug it either.\nDoes the python library work with a similar configuration?\nIl giorno mer 30 dic 2015 alle 19:44 Nicol\u00e1s Fantone \nnotifications@github.com ha scritto:\n\nOne thing that I should mentioned is that the messages that don't end up\nin the subscriber's `message' event are still consumed and silently\ndiscarded. So, no messages are left in the queue after the above process.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/367#issuecomment-168053656.\n. The python client: https://eclipse.org/paho/clients/python/\n\nRegarding AMQP prefetch: MQTT has no such feature. Also the meaning in the\nMQTT context is weird: mqtt is push-based, not pull-based.\nAnyway, It should be enabled and set to 10 by default at plugin level:\nhttps://www.rabbitmq.com/mqtt.html\nMaybe it's conflicting somehow with the global setting.\nIl giorno mer 30 dic 2015 alle 22:01 Nicol\u00e1s Fantone \nnotifications@github.com ha scritto:\n\nI have no idea of what prefetch is for RabbitMQ.\nhttps://www.rabbitmq.com/consumer-prefetch.html\nBasically, it defines the amount of unack messages to be fetched per\nconnection/channel in a single round-trip to the broker.\nQoS 1 works fine with other brokers, so I fear this is a Rabbit issue.\nCould be. But I'm reluctant to think that, since RabbitMQ's MQTT support\nhas been around longer than Mosca and almost the same time as Mosquitto.\nDoes the python library work with a similar configuration?\nSorry, which python library would that be?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/367#issuecomment-168073096.\n. Again, there is no pulling on MQTT. An MQTT client does not ask for\nmessages continuosly or when it is ready. There is no such mechanism. It\nonly sends a PUBACK to confirm it has received a message.\n\nThis problem might possibly be due to MQTT.js not sending a correct PUBACK\nfor RabbitMQ, or RabbitMQ not interpreting the PUBACK sent by MQTT.js\ncorrectly.\nDoes the code above work with other brokers, right?\nOr some sort of MQTT v3.1.1 compat that slipped through here.\nIl giorno gio 31 dic 2015 alle 04:23 Nicol\u00e1s Fantone \nnotifications@github.com ha scritto:\n\nAnyway, It should be enabled and set to 10 by default at plugin level:\nWe change that setting on purpose to showcase the error more easily in the\nexample I described. With the default value, anything lower than 10\nmessages was lost during pulling.\nMaybe it's conflicting somehow with the global setting.\nThere is no global setting for this. Prefetch is a QoC value per\nchannel/connection. The plugin sets that value at 10 for every channel\nwhile on MQTT.\nI could try the python client and see if it behaves the same. I'll get\nback to you, guys.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/367#issuecomment-168114870.\n. These works for me on a local mosquitto (you were missing a clientId):\n\n``` js\nvar mqtt = require('mqtt');\nvar client = mqtt.connect({\n  clean: false,\n  clientId: 'abcde'\n});\nclient.on('connect', function(connack) {\n  console.log(JSON.stringify(connack));\n  client.subscribe('mqtt/test', { qos: 1 }, function(){\n    console.log(arguments)\n    console.log('Now waiting for incoming messages...');\n  });\n});\nclient.on('message', function(topic, message) {\n  console.log(topic + ' : ' + message);\n});\nclient.on('error', function(err) {\n  console.log(err);\n});\nprocess.once('SIGINT', function() { console.log('Client ended connection to broker'); client.end(); } );\n```\n``` js\nvar mqtt = require('mqtt');\nvar client = mqtt.connect();\nclient.on('connect', function() {\n  setInterval(function() {\n    var message = JSON.stringify({\n      id: Math.random() * 100,\n      from: 'Me',\n      message: (Math.random().toString(36) + '00000000000000000').slice(2, 7 + 2)\n    });\n    client.publish('mqtt/test', message, {\n      qos: 1\n    }, function() {\n      console.log('Message sent');\n    });\n    console.log('Published ', message, 'to mqtt/test');\n  }, 2000);\n});\nprocess.once('SIGINT', function() {\n  client.end(function() {\n    console.log('Client ended connection to broker');\n    process.exit();\n  });\n});\n```\n. It can happen, because if sessionPresent is true, the messages might arrive right after CONNACK, as you don't need to do a subscription again.\n. No worries :dart: \n. Sorry for being rude, but it is closed for me. It is not a MQTT.js bug, as it works with solid MQTT brokers out there. My understanding is that it is a problem of your setup because I cannot reproduce. I can help you solve it, but again it is not a bug: as a bug it is closed. On a closed issue, you can keep replying.\nIf you can tell me how to reproduce with Mosquitto, HiveMQ or any other known broker, I am very willing to dig into it.\nI guess your problem is in the authentication: basically your user/pass are wrong, or you are not authorized to publish on that topic. Either the authentication fails, or you are disconnected because you are not authorized to publish. It is a standard behavior of MQTT.\n. So, what is your Mosquitto config? Which version of Mosquitto are you using? It works fine for me on Mosquitto and I cannot reproduce.\n. Would you mind uploading the settings that fails?\nWithout any config mosquitto works absolutely fine.\n. The above script works exactly fine with that config using Mosquitto 1.4.5.\nI have edited it to store the username/passwords in a local folder, and I have generated the password using mosquitto_passwd.\nNot sure I can help more.\n. If you are in a competition, just disable username and password in your Mosquitto and you'll be fine.\n. @AdamMiltonBarker definitely not. However I was not able to reproduce the problem. As I said, using mosquitto_passwd it all works smoothly.. You should have a fixed clientId, as the messages are bound to that client.\n. You should check in the Mosca logs if the clientId arrives correctly down to the server.\nAs far as I know, MQTTLens uses an old version of MQTT.js so we might have a regression here.  @sandro-k, what do you think?\n. @ktersius check also if clean is coming down correctly.\n. Extremely weird. @sandro-k would you mind having a look and try to submit a fix?\n. I think we should possibly copy all of these using a loop.\nRegarding the test.. it might take a bit of work to get that rolling. We\nare removing the server in the next version anyway.\nIl giorno mar 12 gen 2016 alle 04:02 Ryan notifications@github.com ha\nscritto:\n\nAdded options to pass ca, cert, and key options to the underlying\nwebsocket-stream instance. This allows use with self-signed CAs and\ncertificate based client authentication.\nTested against a mosquitto install, but not sure how to test as part of\nthis project as the server does not appear to (currently) support wss.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/mqttjs/MQTT.js/pull/372\nCommit Summary\n- Passthrough for certificates to support TLS server and client auth\n  with wss:// protocol\nFile Changes\n- M lib/connect/ws.js\n  https://github.com/mqttjs/MQTT.js/pull/372/files#diff-0 (15)\nPatch Links:\n- https://github.com/mqttjs/MQTT.js/pull/372.patch\n- https://github.com/mqttjs/MQTT.js/pull/372.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/372.\n. Me doing it :)\n. Yeah, I know of this particular issue :).\nI didn't fix/release it before now because we are not affected by that specific bug (we are validating that we are always sending a Buffer). Also websocket-stream changes a bit in v3, as it becomes an object mode stream.\n\nBut you are right that we need to get this fixed and release asap, just to please nsp.\n. Released as 1.7.0.\n. I'm splitting Mosca and Ascoltatori into multiple modules. Check out Aedes.\n. Aedes already provides that: https://github.com/mcollina/aedes#instanceauthorizepublishclient-packet-doneerr\n. @alliv8 you can use redis: https://gist.github.com/mcollina/a37f135136192d9c58a4. Other options coming soon.\n. On which browser? I think we should setup SauceLabs to avoid these regressions.\nI think this is https://github.com/maxogden/websocket-stream/issues/82. A fix is coming soon.\n. Fixed.\n. Sorry about not replying early. Feel free to reopen or send a PR if this is still an issue.\n. Would you mind sending a PR against the README?\nIl giorno mer 3 feb 2016 alle 00:50 Rick Bullotta notifications@github.com\nha scritto:\n\nActually, looking at the source, there appears to be a this.connected\nproperty, but overall I think it may be a documentation issue. Also, it\nshould be documented that the reconnect event does not imply a successful\nreconnect, only a reconnection attempt.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/379#issuecomment-178892879.\n. Lint checks are failing: https://travis-ci.org/mqttjs/MQTT.js/jobs/107350732\n. Would you mind adding a unit test for this?\n. Also, thanks for commenting everything up!\n. Closing for low activity.\n. How long is your keepalive? It should really be measured in minutes.\n. Try increasing that.\n. Nope, increasing it to 60+.\nIl giorno dom 14 feb 2016 alle 16:34 Michael Teeuw notifications@github.com\nha scritto:\nThe default keepalive is 10 seconds. Would you suggest lowering it? To 5\nseconds?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/381#issuecomment-183917607.\n. Which version of Mosquitto do you have on your server, and which one do you have locally?\nMaybe the two versions behave differently.\n\nI think this is due to https://github.com/mqttjs/MQTT.js/pull/355 cc @4rzael .\n. Can any other reproduce this problem? I fear it might be something in the server config.\n. I think we should just include this in v2, as it is a major bump anyway if you are relying on the default on v1.\n. Would you mind to send a PR to address this issue?\n. Closing for now. Feel free to reopen and/or send a PR.\n. Does the same code works outside a browser?\n. Websockets also work outside of the browser: it is browser specific then?\n. Can you please provide an example that I can run easily (with instructions) to reproduce this?\n. @mayooran99 can you please upload a simple script using only MQTT.js that can run on node v4, a mosquitto config and instructions to run all the above?\n. I have hard trouble replicating this. Can anybody please upload an archive with everything needed to replicate? Include a README with all the instructions to replicate.\n. A couple of questions here, as I know nothing about TypeScript. Should this be better hosted in this repo? Does TS support configuring these from package.json or something similar?\n. That's great, so it seems the DefinitelyTyped repo is the way to go. But how do you handle type differences in different versions of the library?\n. Awesome, thanks! Might I ask you to watch this repo and keep this in sync? Also check out #345.\n(If you want to contribute more here, you are highly welcome to! :)) \n. Thanks for your contribution!\nCan you please add a unit test and update the README? Also, I would try to shorten the name of the configuration, something like reschedulePings, and add a default to true.\nCan you also fix the linting? Travis is failing.\n. Thanks! Merging and releasing!\n. You are possibly in the best position to fix this, I have access to a win\n10 box, but I will have no time for the next 3 weeks :/. Maybe @sandro-k?\nIl giorno lun 29 feb 2016 alle 13:38 Pedrozena notifications@github.com\nha scritto:\n\nApparently, the event \"connect\" is never fired while using mqtt.js with\nmicrosoft Edge (25.10586.0.0).\nFrom my tests, the broker states that the Microsoft Edge client is\ncorrectly connected, but this information does not get intercepted by the\ncallback function attached to the event \"connect\" (as it correctly happen\nusing Firefox or Chrome)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/389.\n. Might be. Can you reproduce just using websocket-stream?\n. So, have we got any clue?\n. So, Mows uses a different version of MQTT.js and websocket-stream. So the\nproblem is between these two modules\nIl giorno ven 8 apr 2016 alle 20:15 Hans Klunder notifications@github.com\nha scritto:\nBy accident I stumbled across mows https://github.com/mcollina/mows.\nI installed mows using NPM and used browserify to build mows.js per\ninstructions in the readme.md\nDoing a comparison between mows and mqttjs using the script below shows\nthat in Chrome both get a connection an in Edge only mows gets a connection.\n@mcollina https://github.com/mcollina do you have any clue ?\nvar mowsClient = mows.createClient(\"ws://test.mosquitto.org:8080/mqtt\");\nvar mqttClient = mqtt.connect(\"ws://test.mosquitto.org:8080/mqtt\");\n// setup the MQTT listener for connect messages\nmowsClient.on(\"connect\", function(){\n    console.log(\"MOWS received connect\");\n});\nmqttClient.on(\"connect\", function(){\n    console.log(\"MQTT received connect\");\n});\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/389#issuecomment-207543160\n. Ahum, the browser unit tests are passing on Edge without issues (just tested). What can it be?\n. Regarding the issue above, which version of browserify did you use to create the bundle?\n. I've just run the browser unit tests on Edge, and they pass using the latest zuul (which uses Browserify 13).\nDoes that build work for you? Is it an issue with Mosca (requires a browserify bump?)\n. Happy we cracked this!\n. Ahum, the doc should be ok: https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L816-L830.\n\nIf not, we have a bug.\n. can you upload the full script? you should not be calling 'client.suback'.\nIl giorno mar 1 mar 2016 alle 18:07 jerrywu notifications@github.com ha\nscritto:\n\n@mcollina https://github.com/mcollina it may be a bug. when i call\nclient.suback({messageId: xxx, granted:[{topic:'test',qos:1},{topic:'test 2', qos: 2 }]})\nsocket close connection\nand i change it to\nclient.suback({messageId: xxx, granted:[1,2]})\nprocess run success! and subscribe callback function call.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/390#issuecomment-190817198.\n. So, that's an example of the server, and we will remove the server API from v2. The API in the README refers to the client, not to the server. You can use mqtt-server, mosca or aedes to implement something on top of an MQTT broker.\n. We need more details, and possibly a full example. It was working for me as of yesterday.\n. So, I am not using multiple servers. Can you please try:\n1. just use one server, something like { host: host, port: port, username:username, password: password }\n2. specify the user-name password combination within each server object so { servers: [{ host: host, port: port, username:username, password: password }] }\n. Closing as there was no more activity for a while.\n. Yes, please send a PR! However you might want to overhaul that logic completely. The whole protocolList thing was used to to avoid having those kind of ifs, and it fails the purpose. Maybe a simple regexp if we are in a browser? \n. Closing for no activity.\n. None, it can be closed. The issue tracker is completely out of my hands. If you would like to help triaging, it would be fantastic @mbrandau.. @sandro-k please have a look at the setup. You might want to do the same for your polymer components.\n\nAny opinions on this, should I merge?\nThis might help in making sure #389 does not repeat again. However it supports only an ancient version of Edge :(, so we can't really add it here (MQTT.js does not work on that version of edge, because of https://github.com/feross/buffer/issues/86.\n. @sandro-k no worries :). Merging now.\n. I have never encountered the problem. What is your goal?\nHave you looked into http://stackoverflow.com/questions/20747817/error-unable-to-verify-leaf-signature-phonegap-installation?\n. I think the best way is try to do the same without mosca and mqtt, just with net.\nThen we can address that issue.\n. I'd suggest you follow the tls\u00a0approach, and try to do the same thing cutting out the middlemen (mqtt.js and mosca). This is what you are looking for: https://github.com/mcollina/mosca/blob/master/examples/Server_Wtih_All%20Interfaces-Settings.js\n. So, caching is the wrong term, as we are not caching anything. The correct term is 'offline queue', or 'send queue'. Can you please reframe your issue? \nDisabling the queue is currently not possible.\nI agree with you that we should address this is a bug that will need fixing in a next major release #345 (or after that one). The whole queue system needs to be highly refactored to address various issues. I currently have no bandwidth to do so. \n. > I can't speak to refactoring the whole system, but after looking at Client.js a bit, it shouldn't be hard to add an option for 'sendQueue' or something like that, and check it in MqttClient.prototype._sendPacket() before adding a packet to the queue. I can send a PR for this in a bit.\nThat can solve your issue, but that option will break a lot of the behavior of MQTT.js. The whole point is that you need to check if it's a publish QoS 0 and then discard that. All the other stuff would need to be queued anyway.\n\nI haven't contributed to this project before, is there anywhere I would need to update tests and documentation other than Readme.md and test/client.js?\n\n@Densaugeo no.\n. Yes to all questions, good work!\n. Yes, I think so.\n. Can you please upload a code snippet that exhibit the issue?\n. Whoaa, right! Thanks for catching this, it has been around for a bit. The problem is that the message is not being stored if we are not connect, but just put in the in-memory queue: \nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L598-L610\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L48-L55\nThis needs to be reworked so that we are actually storing things when we are offline. Would you like to send a PR? \n. It might have been fixed. If not, feel free to reopen.\n. @johan13 would you mind to open a new issue, with a script to reproduce? . I think we can revert the option logic, something like queueQoSzero, defaulting it to true.\n. negative options are hard to reason about. I'm happy with the ternary.\ncb(new Error('..')) is nice, I'm concerned only with emit('error').\n. I'm \ud83d\udc4d on this. Let's wait a couple of days if any others have opinions.\n. @Densaugeo it was me rerunning the failed task.\nProbably the timeout on travis needs to be extended, now they are passing anyway.\n. Thanks! Release as v1.9.0!\n. I think you are using an old version of Mosquitto.\nFrom the README:\n\nIf you are connecting to a broker that supports only MQTT 3.1 (not 3.1.1 compliant), you should pass these additional options:\n{\n  protocolId: 'MQIsdp',\n  protocolVersion: 3\n}\nThis is confirmed on RabbitMQ 3.2.4, and on Mosquitto < 1.3. Mosquitto version 1.3 and 1.4 works fine without those.\n. You created a module call mqtt, and then you want to install mqtt inside it. You can't, that is forbidden by NPM. Rename your module to something else.\n. > When I use mqtt pub -t 'hello' -h localhost --stdin then no messages are processed until stdin is closed (e.g. STRG+D). I would expect that each line is a message.\n\nIs that written anywhere? The help is pretty clear: https://github.com/mqttjs/MQTT.js/blob/master/doc/publish.txt#L12.\nHowever your expected behavior is an important use case, would you like to send a PR? It should be straightforward using http://npm.im/split2 and http://npm.im/through2.\n. Thanks @megastef! Just do not disrupt the current behavior, something like --stdin --multiline or equivalent.\n. Merged\n. you can publish(topic, payload, cb) and cb\u00a0will be called when the message is written to the socket (QoS 0) or when it receive the ack.\u00a0\n. @4rzael great response!\n. I think we can just expose the connected property. Why wrapping it in a accessor?\n. I think it will make more sense in the current API to have just connected. Any other opinions?\n. Thanks for the fix! :)\n. I'm \ud83d\udc4d on firing the event, go ahead.\n. This seems to be working fine with other brokers? might be your broker implementation? \n. I will need to have a look at your code, because it is working here.\n. @vasco-santos I am confident this is a bug on hbmqtt, as your project works as-is with other brokers.\n. Your project works perfectly with 'ws://test.mosquitto.org:8080' and several Mosca versions. Just change the connection string to 'ws://test.mosquitto.org:8080'.\nI'm happy to help debugging this, maybe there is something that we are doing that hbmqtt does not like (or vice versa), but it is hbmqtt-specific.\n. @vasco-santos that's why I think it's hbmqtt problem, not MQTT.js.\nhey @njouanin can you help us here?\n. Wow, that was a hard find. \nAnyway, anybody that wants to send a PR?\nThe idea is to send 'mqtt' as default subprotocol and 'mqttv3.1'if in the mqtt.connect options for MQTT 3.1 are passed:\njs\n{\n  protocolId: 'MQIsdp',\n  protocolVersion: 3\n}\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js#L16\n. Have you tried with a stock configuration, without authentication?\nAre you trying connecting from a browser?\n. no known issue in this library. You need to setup websocket in mosquitto, use 'ws' in the url and connect to the right port.\n. Given the examples in #407, those will have a different meaning than the callback for QoS 1 and 2.\nI am not sure this is the behavior we want.\n. Maybe there is another option: emit a packetSent\u00a0 event, to be emitted after write(), with every packet, and then leave the QoS handling to the user. That will solve all the logging issues, and in fact it can serve a greater audience, as it can track the full flow of messages in the client.\n. @Densaugeo exactly that.\n. How about we also add 'packetreceived' event? The whole debuggability of MQTT.js always lacked those.\nare there any opinion pro or against camelCase in events? I do not care.\n. how about we use on('receive') and on('send')? Shorter and there is no problem of disambiguation here.\n. i guess we should name correctly in the README: these are debug events for 3rd parties that want to support logging etc.\n. Let's follow the browser convention and also use present tense verbs. How about sendpacket and receivepacket?\nAnyway, any of these are ok, bikeshedding names is not really helping.\n. I would emit it in handlePacket, before the packet is handled, so we can\nuse t to debug error situations.\nIl giorno mer 1 giu 2016 alle 01:39 Densaugeo notifications@github.com ha\nscritto:\n\nSo I've changed packetsent to packetsend, which follows the browser\nconvention of all lowercase letters, present-tense verbs, and nouns first.\nI propose that this is enough discussion of event names\nIs the description for the readme clear? I'd like it to be very obvious\nthat this is for debugging, not listening to messages.\nIf all are in agreement on the packetsend event, I will add a\npacketreceive event to match. After skimming through code, it looks like\nit could be emitted in ._handlePacket() or maybe .process().\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/410#issuecomment-222853091, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AADL4493YD_irdr9KkHW41-ulOGlj1Krks5qHMa0gaJpZM4IlC9L\n.\n. Thanks, releasing soon!\n. I think you are not passing any topic, because # is interpreted as a comment in bash.\nThe real bug is the lack of a decent error message.. would you like to send a PR?\n\nThanks!\n. Re: documentation. We need help, please contribute some guide and/or example regarding TLS.\nYou need to use key\u00a0 and cert if you pass in buffers. keyPath and\u00a0certPath are only for file paths (and they should not be used).\n. @mayooran99 would you mind contributing an example for https://github.com/mqttjs/MQTT.js/tree/master/examples on how to setup mosquitto as well for LTS, etc..?\nI see everybody struggling with this stuff.\nAlso, improving the README on that regard my be helpful.\n. The client will disconnect. It's a known weakness of MQTT.\n. It should be 'offline'.\n. Which broker are you using? This behavior is governed by the broker, not really by the client.\n. Can you please add a unit test for this case?\n. Yes, you are right :)\n. You are right, the logic needs to be changed so that it does not error when getting unknown message ids. Would you (or someone else) like to send a PR?\n. Can you please add a unit test for this?\nI think it's ok, but can anybody else have a look as well?\n. Any update on this?\n. Closing for no activity, fell free to reopen.\n. @vingorius would you like to send a PR with the change and a unit test?. @vingorius can you please submit a pull request to this repository with this change and a unit test? Thanks.. The best way to test this is to spin up a new net server, and use mqtt-connection directly. Reply to CONNECT with CONNACK, and send a PUBREL with whatever id.. @peppesilletti the best way would be to start working on a unit test that triggers the problem (and fail), and then work on a fix from there. You can open the PR when you have the unit test ready, or when you have the bug fixed. I have no time to work on this directly atm.. There is something wrong with the browserify version you are using:\nI got this line:\njs\n  if(length === -1 || end > this._list.length ||\u00c2\u00a0end > this.packet.length)\n. I checked this here, and I get the same output, not sure what's up to.\n@sandro-k can you have a look?\n. I don't think there is a need to do a release, as we depend on mqtt-packet with the ^.\nIf anyone faces this issue, just zap your node_modules folder and reinstall.\n. if the client connects with clean: false, and specifies a unique clientId, the subscriptions are restored by the broker.\n. It's part of the MQTT protocol\n. Yes, that would be awesome. Please send a PR!\n. Closing with no activity. Feel free to reopen if this is still a bug for you.\n. Unfortunately not, would you mind to send a PR, or at least add a quick unit test to reproduce? Those are tricky to produce :(.\n. Can you please explain the rationale of this a bit further, as the main way to connect should be through mqtt.connect()?\n(I know it's probably because of aws-iot-sdk).\n. thx!\n. You can't use client side certificates in the browser from a JS API. Maybe you can install a client side certificate through some other mean (but I do know nothing about it).\n. I've never experienced this, can you please upload an example that triggers this exception, or send a fixing PR with a unit test?\n. It seemed solved, and there was no activity (and in many other issues). I did a lot of activity.\nIt's still missing an example on how to reproduce or a PR.\n. Closing, see #457.\n. @BrandonSmith yes I agree with you.\nRegarding IncomingStore - it depends if they are acked or not. Maybe there is a bug in our APIs when you are using them in the above way. I have never worked in such a case.\nWould you like to assemble a PR?. Fixed in #697 . MQTT Acks are to indicate message reception, not handling of the message itself. It's a transfer of ownership. If you would to improve with multiple in-flight message support during reception, feel free to send a PR!. Can we add a unit test for this?\n. @RangerMauve yes, it's get set by the server. Here is the server https://github.com/mqttjs/MQTT.js/blob/master/test/websocket_client.js#L22-L29. you can just create a test and check if the ws connection has the expected subprotocol.\n. Don't worry about encrypted websockets.\n. Can you please commit those, I don't understand. This is a test specific\nfor websockets.\nIl giorno gio 23 giu 2016 alle 23:52 RangerMauve notifications@github.com\nha scritto:\n\nWell, currently I have the test in abstract_client, so it's getting\nexecuted for encrypted sockets as well. Is there a better place for me to\nput it?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/426#issuecomment-228195895, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AADL4415jexrKMQ1QfeEtZyfZ_OhMzEQks5qOwAKgaJpZM4I86by\n.\n. Perfect, thanks!\n. Released as 1.12.0.\n. Not really, any PR is welcomed.\n. Yes it does. I'm not fan of committing a built package to the repo, but I see it might be helpful for the bower community. Any other opinion?\n. @ccravens the problem with this setup is that it will not work. You need a browserified thing rather than the common js module.\n. Any updates on this? Feel free to reopen with a way to bundle mqtt.js with browserify.\n. Great job @4rzael!\n\nWhy don't you add a little FAQ doc to the README with the above description about QoS and storage?\n. Yes they are supported. Would you mind sending a pull request against the README to clarify?\n. It seems an MQTT feature. Can you upload an example?\n. @rudylacrete can we close this?\n. I have no clue, as I'm not a TypeScript user.\ncc @PekkaPLeppanen.\n. how can we reproduce?\n. Closing because of no activity.\n. Thanks!\n. You need to specify a protocol, in your case 'mqtts'.\nFeel free to send a PR to the README to explain this a bit more :P.\n. You can pass protocol: 'mqtts' in the options.\nIt might also be good to have url\u00a0 in options too.\n. protocolId is the name of the MQTT protocol itself, 'MQIsdp' for MQTT v3.1 or 'MQTT' for MQTT v3.1.1. Also this should be set as protocolVersion, 3 or 4 respectively.\n. This is ok for me. Any other opinion?\n. Thanks!!\n. offline is currently emitted even if a connection fails. I'm ok in a PR to address this.\n. I think the current interface is ok, we should just avoid emitting out 'offline' every time it fails to connect. Maybe we should even add a limit, just to avoid a wait-forever loop.\nThe reason for not having a callback is that it will introduce two ways of handling errors: one at the first connection, and one afterwards. Maybe that's what we should be talking about, as it might be the underlining issue at API-level.\nAlso, the current state \"is it connected/disconnected/connecting/waiting\" is not currently well exposed.\nAny other opinion?\n. if we specify a callback, what happens if both a callback and a 'error' handler are specified?\n. I think MQTT.js should provide this in some form, and emit offline only once.\nA user should be able to query: a) if we are TCP connected and b) if we are online.\nErrors should probably be more verbose too, and include a boolean to check if it was auth, at least.\n. Yes exactly @RangerMauve.\n. This was fixed and released in 1.14.1.\n. Maybe it's a webpack issue then, the browser build should not load those.\n. Closing as I think it was fixed.\n. Can you please add an explanation on the README of the various status flags? And maybe an explanation of the state machine?\n. @anhldbk github diff messed things up, and that line showed up as added. I checked and I removed my comment.\n. All good for me.\nI think this is semver-minor. Anybody thinks it's semver-major?\n. Ok, to be minor, merging and releasing.\n. Any updates on this?\n. Thanks!! Feel free to contribute more to the examples, they are always neglected!\n. you should use cert\u00a0 in place of certPath. Not sure why it is not emitting a proper error.\nAnyone that wants to dig into this and send a PR?\n. If cert\u00a0 is the file of the certification authority, you should use the ca option: https://github.com/mqttjs/MQTT.js/blob/master/test/secure_client.js#L94-L99\n. Hi @mckn,\nSorry for not noticing this issue before. Probably it's a bug, either in the server you are using or in MQTT.js. Can you please add a script to reproduce?\nCheers,\nMatteo\n. Can you please upload a full example? It's really hard to debug in this way.\n. Which broker are you using? In any case, try version 1.14: I've released it today, with some improvement on the offline mode.\nI don't have time to help debug this, but I'm happy to review a PR.\n. Use a debugger, and understand why the messages are pulled off-order, and then send a pull request.\n. Thanks!!!\n. I never had the issue.\nI assume you want to tunnel a websocket connection through a proxy (which proxy support those?). Internally we use https://www.npmjs.com/package/ws, so you should check if that works out of the box: we do nothing special here to support proxies.\nKeep us updated on your findings!\n. Yes, but I have little time. Would you like to send a PR?. can you send a PR that fixes it? Maybe with unit tests.\n. > An error occurs if client is disconnecting.\nThe callback is always called.\n. Thanks!!\n. No there is not.\n. @anhldk would you mind adding a little guide with Mosquitto or Mosca on how to setup all of this? It's probably the most asked question, and it seem we need some more how-tos in the area.\n1. the *Path version should not be use and are deprecated\n2. it all just works as the tls module from core\n. Which part of https://nodejs.org/dist/latest-v4.x/docs/api/tls.html#tls_tls_ssl are not clear? You can pass the same options in the same places.\n. @anhldbk That's good. Also, add a link on the README for that to the tutorial \"if you have TLS errors, go here\".\n. MQTT.js v2 will remove the support for Server ans SecureServer, as they are misleading.\n. thx!\n. Thanks, a PR is highly welcomed!\n. @pguerin-miovision roughly days or at most a week, as you can see from past prs. We all do this in our free time: if you want you can help.\n. @sandro-k can we fix this issue here?\n. @hijklmno prs are always welcome!\n. I do not know what nativescript is, but I'm happy to accept a pull request that solves the issue.\n. I have never used socks5 with MQTT, so there are no examples.\nHowever, it would be great to have one? Do you mind sending a PR?\nI would suggest you to look at https://github.com/mscdex/socksv5.\n. I think we should catch those situations and emit a proper error! Would you like to send a PR?\n. Contributing a pull request is an easy way to learn git, and get familiar with node.js tooling.\nI have no time to tackle this, so feel free (you or anyone else), to send a pull request.\n. I think we should just throw if the protocol is missing, but with a more meaningful error\n. This was not wanted, and in case it is a bug. \nThe problem you are describing is Websocket specific.\nI think a similar issue was fixed in the latest release of websocket-stream. Can you please check if you are using the latest version?\nCan you please upload a script and instructions on how to reproduce this problem?\nIf you are using this from AWS-IoT-sdk, it might be better to include them in triaging and fixing.\n. @ralphtheninja anything to help on those test is highly welcomed :).\n. There are some nits to be fixed: https://travis-ci.org/mqttjs/MQTT.js/jobs/163202357#L475-L505.\nAlso, this is targeting v1. Can you also send one for v2?\n. Same comments for #460. I'm ok if you work just on one of them, and then we backport the commit to the other one.\n. Thanks, releasing soon. Feel free to update your PR for v1.\n. The test is not passing on my box :(. Any idea?\n. duplicate message on your test :/\n. @sandro-k @ralphtheninja would you mind to please review this?\n. @miotabbott can you send a PR on top of this branch that checks that for PUBLISH? queuing up subscribes was wrong in the first place.\n. @miotabbott can you send me a PR against this branch to address the issue @sandro-k brought up?\n. I would like to get this shipped.\nApart from the ugly test, might I merge?\n. Merging now.\n. Thanks, I will release this with #470 \n. Can you please do the same for both tests, we need to check both subscribes and publishes.\n. @miotabbott any update?\n. Can you please upload a full example with the problem?\n. Yes we should. Would you like to contribute a PR?\n. As far as I understand, this questions revolves around ES6 modules, and not other ES6 features. If this is not the case, please explain.\nMQTT.js will be based on ES6 modules when it could run on top of any supported version of Node without a transpilation step. Currently this number is zero, so it will probably take a few lts cycles to get there.\nAnyway, I am very happy of accepting any PRs that would make the integration with rollup easy, as long as it keeps running with no transpilation step on all supported versions of Node.\nIt would be good to see if we can work a reference on how to achieve this. Maybe rollup supports some metadata.\n. closing this now. Feel free to open issues if it turns out it's MQTT.js fault.\n. Can you please rephrase it?\nIf I understand it correctly, that issue should be solved, and it should be moving binary data only now.\n. Are you on https://github.com/maxogden/websocket-stream v3.3.0?\nIn the browser or on node?\n. It might be a bug there, I have probably fixed it for Node, but not for the browser: https://github.com/maxogden/websocket-stream/blob/master/stream.js#L63-L83.\n(see the coerceToBuffer var)\n. See my last comment. I'm stuck for the next couple of days, would you like to send a PR to websocket-stream?\n. Closing for no activity, feel free to reopen.. This is fixed in: https://github.com/maxogden/websocket-stream/pull/100, which has not hit npm yet.\n. Should be fixed in 2.1.2. Please check and let me know.\n. Test version 2.1.3.\n. Thanks!!!!\n. @dpjanes can you please remove that 'integer' thing? I think that was in a very old minimist release.\n. This library uses websocket-stream, which has its own issues on how we are using it (see other reported issues on v2.0.x).\nI think:\na. we should make websocket-stream pluggable, so that we can use it with uws.\nb. make websocket-stream behave like a true binary stream, which currently does not.\nI'm co-maintaining that library, so send PR there if you want to help :).\n. @TotallyInformation that would be an handy feature, yes!\n. @TotallyInformation I've just done a release. Please test (v2.1.0 still does not show up on unpkg, it might take a while)\n. Here it is: https://unpkg.com/mqtt@2.1.1/dist/mqtt.min.js.\n. Let me know if it works as expected.\n. @andyfenelon that is a duplicate of #482, and addressed in https://github.com/maxogden/websocket-stream/pull/100. You can rebuild the bundle with some custom code in websocket-stream and test.\n. V2.1.2 released.\n. Should be fixed in 2.1.2. Please check and revert.\n. This happens because you are effectively creating an infinite loop, as the subscription test/# matches test.\nThis is how MQTT works.\n. As I said test/# includes test.\n. It's still not clear what you want to achieve. You can still use http://npm.im/mqtt-connection if you prefer.\n. MQTT does not support that. If you need a subscriber on the \"cloud\" side of things, add it as a plugin inside the broker.. Thanks for reporting, would you like to send a PR to fix this issue?\n. I think we should error on the client side, before  sending a message to the server.. Fixed by #497. Thanks!!!. Can you add a unit test for this?. thanks!. I'm sorry but that npm script has been written for Linux and Mac in mind. I do not have much Windows time to solve this. Would you like to send a PR?. One thing we do not put a distinction on our side is if the connection closes or if we receive a DISCONNECT packet. That's the only difference we can do.\nI'm happy to get a PR on that.\nClosing this for now.. You are trying to send all the messages in parallel: the broker is probably telling you that you cannot do that.\nTry sending them one after another, using something like http://npm.im/async.. You can use http://npm.im/fastq. zero. But I think we should.. I have no time to coordinate this :(. I would suggest we should start with Mosquitto and Mosca. Please go ahead and do it, I will be happy to review. . @anhldbk I think so, yes.. It would be awesome to have integration tests also via SauceLabs.. @anhldbk yes! Go ahead and make it docker-based.\nBonus points (but keep it separate): websockets in browsers.. can you please send a full JS example?. @djflex68 please do, and provide a full example that reproduces the issue reliably. Thanks!. how do I run/use your code? Can you provide an example that I can run to reproduce your error?. the code seems right. Does it work if you connect to test.mosquitto.org instead? Are the credentials correct?\nBrowser or Node?. try publishing in the subscribe callback.\nIl giorno sab 3 dic 2016 alle 06:44 OczkoSX notifications@github.com ha\nscritto:\n\nI'll try later. Credentials are 100% fine, broker is Mosquitto on RPi. I'm\nusing node. Does mqtt.connect return any errors? It doesn't print anything\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/508#issuecomment-264637190, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL49UaqSwFJ2ORgrtcpm1_Loe7HyeTks5rEWQQgaJpZM4LDP9f\n.\n. yes. You can't. you create the connection when the button is clicked.. Using the current API, yes.\n\nI'm happy to discuss a semver-major contribution on this, if you are willing to help.. Thanks!!. Linting is failing. We use http://npm.im/standard.. cc @ralphtheninja @sandro-k can you please have a look?. Can you please include the example with the proxy in the examples folder?. @Manu3756 You might be trying to fix two issues at the same time. Why can't we just move the agent property?\nAfter the bug is solved, then we can fix the \"protection\" issue.. @Manu3756 I am still not sure what problem are you trying to solve, and thus I am unable to have a preferred opinion. I would like some option that:\na. is neat and do not involve big arrays with all the properties\nb. support agent both in ws and wss\nc. do not break backward compatibility, especially for wss. That will be perfect, thanks.. cc @ralphtheninja this is the same of #511 . @Manu3756 this seems ok to me. Would you mind to add docs in the README?\n@mqttjs/mqtt-js what do you think?. any updates?. @Manu3756 no problem. My bad, the PR is fine this way.. There should be no slowdowns on Node. Can you please check and verify?\nI feel this MQTT.fx delivering receiving data over websocket or over TCP/TLS?\nWhat is this CGI script you are mentioning?\n. Can you try connecting with the MQTT.js client above to port 1883 without websockets from Node.js? I fear it might be websockets.. I fear it's the websocket layer in Mosquitto or in this library, or a combination of the two. Are you using websockets from a Browser or Node?\nPlease try using https://eclipse.org/paho/clients/js/. It has a different way of dealing with Websockets, and we might be able to track down what is the problem.\nThe problem is sending the payload or receiving the payload?. have you tried any other broker?. Is this websocket or plain TCP?\nProbably we should wrap the connect packet into a cork/uncork.. Yes.\nIn order to do that you should wrap the write in a cork() and uncork() pair. Schedule the uncork() using nextTick for max perf.. Awesome!!. I don't know what is the problem. Probably a debug session would show the underlining error, as it is usually a TLS error. I'd be very happy in a PR that improves the debuggability of those situations.. Seems good!. No it's not static. It will return a new client.. Folks, any opinion on this? @ralphtheninja @sandro-k?. @wcatron we can even do a slightly bigger refactoring and remove the need for that array altogether.. What I mean is that we need to test that we should have a test that:\n\ncreate a client with start: false\u00a0 in the options\nadd an event handler into the server, like https://github.com/4rzael/MQTT.js/blob/7659a9f57b3de87d1851ec9150529b1270455b7d/test/client.js#L155. In the handler we fail the test if the client connects.\nafter 200ms (or similar), it removes the handler and calls start(). It also adds a new handler to check if there is in fact a client. . Any updates on this?. Closing, feel free to reopen.. can you send a PR?. Thanks!!. Thanks @seymar!. At the moment there is no plan for it.\nI'm happy to discuss it, because of async/await in node 8.. > Though I don't think that a promise is necessarily the right return from \"connect\". \"connect\" and \"error\" can be emitted multiple times, and you might want to cancel the connection. Using the existing event handlers on the connection seems like a better approach for most use cases. Promises would be useful for replacing non-event callbacks, like the result of a \"publish\".\n\n@RangerMauve I'm more on the \"lightweight\" promise support as you described when node 8 comes by, as you describe. Having support for it in connect is good, but I would have a mqtt. connectAsPromise() method that returns a Promise.\nIdeally we could also have AsyncIterator https://github.com/tc39/proposal-async-iteration support for receiving the messages, if that lands in Ecma.. Yes. That'd be ideal. Let's wait until it's part of ecma. We'll be probably adding it to streams as well.\nIf you want, you can prototype it as a separate module in the meanwhile.. I think we should have the least breakage, if any. So, new names etc. Alternatively, we can do another package with this org.. @RangerMauve I've invited you the the organization :). Feel free to create/coordinate a new repository to provide a promisified client if you want to.. @RangerMauve you should be able to create a repo now.\nI like the approach!. @RangerMauve would you mind adding unit tests (just some to check everything is in place) and travis-ci?\nYou can add me, I'll be very happy to help you maintain it.\nAlso, we should add a link in MQTT.js that if anyone needs a promise-based API, we maintain that as well!. @RangerMauve this is FANTASTIC!!!!. @RangerMauve would you mind to send a PR to the README here?. Awesome! Can you add it to the README as well?. @yohei1126 while reviewing, it seems better to have getLastMessageId()  instead of getLastId(),  as it is not super clear in the docs.\nAlso, you should mention this is for sent messages only.. Linting is failing, and docs and tests are missing.. Any updates on this?. Closing, feel free to reopen.. Would you mind to upload a full example to reproduce the issue?. @medric would you like to send a PR to solve the problem?\nI think https://github.com/mqttjs/mqtt-packet/issues/14 is fixed, but maybe we need to regenerate the bundle here. Are you using the precompiled bundle?. @medric would you like to send a PR? That seems the callback for SUBSCRIBE and SUBACK, not UNSUBSCRIBE and UNSUBACK. @aignacio can you upload an example of what you are trying to do?. @aignacio you need to call mqtt.connect() within the callback of unique.getMac().. @aignacio all the logic has to happen after you initialize mqttClient. I recommend you to do some of the nodeschool workshoppers to familiarize yourself with Node.js https://nodeschool.io/.. @aignacio you should move all that logic into its own file, and call that from the callback.. Fixed in 2.3.1.. I think your MQTT broker should expose a websocket server itself, you can't proxy from websocket to tcp in NGINX.\nSee also https://www.nginx.com/blog/websocket-nginx/.. Thanks @akashgoswami!. I'm more keen on passing a function to connect that will return the URL (or call a callback with an URL).\nIf that simplifies things for SDKs, then let's go for it.. @jed if it does not add too much complexity, sure!. Disclaimer: I am not a typescript user, and there is no one in the maintainers.\nIf you want to join and help, you are welcome!\nIn https://github.com/mqttjs/MQTT.js/pull/386 it was discussed this matter. I'm happy to embed the type definition here, if you want to help maintaining that.\ncc @PekkaPLeppanen. @sublimator send a PR, I'll add you then.. this should be done now in 2.5.1. PR?. Good job on the testing side, thanks!!!!!!. > Anyway, I think this is an efficient/pragmatic and reasonably non-invasive way of solving the issue, as the transformUrl function gets passed the url/options/client and can use either the url or the already parsed components, in the options, and check any possibly relevant client state.\nAgreed, let's try to get this in then.\nWould you mind to adding the docs?. @sublimator yes, move the example at the top inside the browser section.. the main reason is that the behavior is non-deterministic. Your publish is\nexecuted before your subscribe is acked in emqtt.\nIl giorno dom 12 feb 2017 alle 20:41 Dustin notifications@github.com ha\nscritto:\n\nI tried it with https://github.com/mcollina/mosca\nmosca -v | pino\nand it works. I leave this open. Perhaps anyone knows the reason.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/540#issuecomment-279242674, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL434EIIb9X6EttF8dO1BROcSVQu76ks5rb2B9gaJpZM4L-gOM\n.\n. @gyurobenjamin you need to bundle it, and treat it like it is a web browser. React Native is not Node.\n\nWould someone take some time to prepare a guide for React Native to be contributed to this repo? I think it would help everybody. . ws v2 is not compatible with this module.\nAlso, this is not vulnerable, as https://github.com/websockets/ws/releases/tag/1.1.2 will be pulled.. because we use ws in websocket-stream: https://github.com/maxogden/websocket-stream/pull/106\n. Also, this is not vulnerable, as https://github.com/websockets/ws/releases/tag/1.1.2 will be pulled.. All of that is broker based, and it's how MQTT works. There is very little we can do about it in this library.. > @mcollina Does that behavior is required in MQTT specifications?\n@jeromevalentin I think so, yes.. LGTM. At this point, just making sure if those are valid it's good.. I mean linting them.. Can you please do not touch/remove/alter any existing functionality in this PR? I'm not sure what you want to achieve, and that is a semver-major change, while this is not.\nI'll comment on the typescript questions later on.. @sublimator are you ok in closing this? Or it's a mistake?. @shan888 not at the moment. A generic suggestion is to publish during the subscribe callback.. @willshulstad I do not think this PR is correct. Specifically:\n\nIn the QoS 1 delivery protocol, the Receiver MUST respond with a PUBACK Packet containing the Packet Identifier from the incoming PUBLISH Packet, having accepted ownership of the Application Message (Section 4.3.2).\n\nThe important part for this PR is \"accepted ownership\", which I think it is about reception, not having successfully processed the message.\n. There is incomingStore for that https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L87.\nSpecifically, incomingStore\u00a0is used for QoS 2 packets: https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L802-L804.\n\nI agree with Will that it would be great to be able to have the implementation control whether it takes responsibility for the received message. In the event of an error in my client, I'd rather trust a broker to keep the data safe than I would my own implementation of a data store. This would also mean that I would have to make sure my data store is performant and truly durable.\n\nI am not 100% convinced about this. Let's make the case that the broker has a \"botched\" message in the queue to be sent, one that will crash the client on receipt. With the current approach, the client will crash and likely restart. However, with the approach you are suggesting, the client would continue to crash, because the message is never removed from the broker queue.. > Correct me if I'm wrong, but it doesn't appear that the incomingStore handles recovery from any sort of failure, rather it is just responsible for keeping track for the QOS2 publish exchange. It doesn't actually help ensure that QOS1 or QOS2 messages are persisted once the client takes ownership and responsibility of the message. Further, there's no actual mechanism in this library to protect the messages it owns in the event of a server or application failure.\nDefinitely. You are probably looking for a different type of library or even protocol, with a different design choices. MQTT is a protocol is build for device -> broker communication, not a server <-> server protocol.\n\nIn any sort of serious application that I can think of, it would be preferable to have the implementation handle malformed packets, rather than just dumping data. Data integrity, I would think, is higher priority than handling bad messages, as the former is explicitly covered in the spec and the latter is an implementation detail.\n\nIn fact, it's quite the opposite. MQTT is a protocol to be deployed in the field, and a supreme imperative is to keep working, even if there is some form of \"panic\". A malformed message in the the queue to the client can make a client crash over and over again at each reconnect.\nI have seen this in real-life several time, and a lost message is always better in IoT systems.\nFrom the spec:\n\nThe receiver is not required to complete delivery of the Application Message before sending the PUBACK. When its original sender receives the PUBACK packet, ownership of the Application Message is transferred to the receiver.\n\nOur current failure model is \"if it crashes it crashes\", and every data that is \"in flight\" is lost.. Closing for no activity, feel free to reopen!. I'm fairly certain that this is an aurelia bug, and I fear it is some flavour of https://github.com/nodejs/readable-stream/issues/226.\nI would recommend to open an issue on their side, and cc myself in there. I'd be happy to help.. I'm currently traveling, I will review this asap.. In your code, you are calling server.listen() at line 37 of /home/tin/Projects/ExtensionEngine/mqtt-node-api/server.js. It's in your code.. fantastic, yes, go ahead with a PR.. This depends on the latest one. Are you using the pre-made build during on-publish?\nIMHO I should npm update and republish bumping the minor if that's the case.. I'm definitely -1 on the idea. I'm ok in supporting TypeScript, not in using it directly.. Would you mind to send a PR?\nI think we should also cap the max timeout.. @sublimator this is an absolutely valid contribution. We can get it merged when we decide to bump the major version number.. let's merge this, then we can do that in a followup!\nThere is a definitely typed link in the README. Maybe we should remove that!. Do we need to indicate in some other way this library has full TypeScript definitions?. A section in the README would be awesome :). I think sending 1k messages and process them as a single unit is not what MQTT is built for.\nWhere are you setting this browserBufferSize option?. why is it disconnected? Either the browser or the broker are emitting some logs?. @yetifortrees do you have a script to reproduce?. Is this a regression between v2.4.0 and v2.5.0?. @milanito if you understand what's happening, would you mind adding a failing unit test to reproduce and send a PR?. I'm a bit lost, as I am missing why the hostname at which the broker listen causes MQTT.js to error.. It seems we can close this now. Feel free to open a new issue if it is still an issue.. @RangerMauve can you upload a script/project that reproduces the problem, ideally just using Node.js? Or if you understand why this is happening, can you send a PR?. @cordovapolymer there is not much we can't do here. You should use QoS 2 only if you know your broker supports it, as there is no way in the MQTT protocol to know.\nMaybe we should discuss removing a failed \"message\" from the delivery queue if it fails more than X times.. You can achieve most of what QoS 2 provides with QoS 1. QoS 2 is really expensive for the client and the broker.\nI'm closing this, feel free to reopen.. Feel free to send a PR to the docs!. Hey @franleplant, I understood your solution but I did not understand the problem you are facing.\nYou can easily do require('mqtt/dist/mqtt'), it should work. It's inside the package in the lastest versions, so there should  be no problem.. @franleplant that is highly possible. You probably have to have your webpack build it together with your application. Would you like to send a PR to improve the support for RN in here? You shouldn\u2019t have to fork to make it run there, it would simplify maintenance if we work together.. @irfanka I am not a react-native user. If anyone wants to devote the effort of making this module work as-is with react-native, I'm more than encouraging them to do this. I have absolutely no bandwidth to help.. done.. @micbuh it can be improved. Specifically, we need to implement _writev in https://github.com/maxogden/websocket-stream. Or maybe add support for uws.\nWhich broker did you try? Have a look at https://github.com/mcollina/aedes.. @micbuh Aedes API allows you to embed custom authorization logic: https://github.com/mcollina/aedes#api.. this should improve once it's merged and MQTT.js updated: https://github.com/maxogden/websocket-stream/pull/112.. I will have little time to dedicate to this in the coming month, but I will try to have a look. What did you use to debug this situation? I'd need to replicate.. no it can't. You can add that information into the topic or the payload.. Can you please upload an example?. after you call .end(), it should not try to reconnect. I fear it's a bug, would you mind uploading an example so we can replicate?. I'm closing this issue.\nI do not know about the second error, it might be related to your application. Feel free to open another issue and attach a way to reproduce the problem.. would you mind sending a PR?. merged.. I do not know. I think mqtt should just load like any other module, so it should not be in the externals. Can you send a PR with an example of using webpack2 + react with mqtt? I think everybody would benefit by that. I will help fixing the example.. can you send an example project that demonstrate this failure?\ncc @sublimator . Doing a lot of QoS 1 publishes in parallel it's not really a good idea. If you can stagger them, or use something like http://npm.im/fastq to only send a few.\nAnyway, send the PR :).. @sublimator more CI is always welcomed.. This is actually quite nice. Is this ready to go?. which browser are you using? Can you upload an example of this regression?. @CVarisco tests are green, I can't replicate. In order to fix, I need to replicate the bug. Can you provide me with a bare-minimum example where this does not work? I need a full example that I can run to diagnose the problem.. This was fixed by blocking the version of readable-stream to v2.2.6, so maybe there is an issue with webpack and the changes we recently did to readable-stream.. @flodonsky can you upload a full example to reproduce the issue?. @yohei1126 there might be some other condition, that's working for me.\nAnyway, this should be fixed in readable-stream@2.2.9. Wipe your node_modules folder and you should be ok.. @flodonsky please moderate your language. \"That's ridiculous\" is not accepted. You are not forced to use Node, NPM, MQTT.js or any of the like, if those are not of your liking. I'm not responsible for your code not working, you are.\nThis bug has been fixed over the weekend on readable-stream, and it just requires a big npm update or a wipe of node_modules. I think you should appreciate a 24-hours turnaround on a bug.. I think a custom error object is ok. Or just attaching a property to it.\nWould you mind assembling a PR?. @wcatron the problem is caused by https://github.com/nodejs/readable-stream/issues/277, which was solved in readable-stream v2.2.9. Removing your node_modules and reinstalling should solve this issue. . @ozomer the best way to do write this doc is to look at the code, and fill in the documentation.\nI'll be happy to review.. @ozomer this is done by volunteers, so you (or anybody else) can be one! :). Is the connect event firing?. So, it's connecting.\nYou must do the publish in the subscribe callback.. Also, don't call client.end(), it will close the client.. Can you connect from the same host that is running mosquitto? Do you or the other PC have any firewall installed? Can you see port 1883 on that ip as open? (use nmap)\nthe client.publish should be in the subscribe callback.. What's the other computer version of Node.js, npm and operating system?. Maybe it's an issue with Windows 8, can you try disabling all the firewall that are in place?. I'm open to suggestion on how to deal with that, would you like to assemble a PR?. Maybe it's not clear in the README. If clean: true, MQTT.js will take care of resubscribing in case the connection goes down. If clean: false, the broker will do it for you.. Yes. It recreate a new session, and it does new subscriptions. From an API and user perspective, it makes sense, because otherwise everybody had to redo all their subscriptions on reconnect if the network went down.. @sublimator would you mind reviewing this?. Mosca does not support QoS 2. It's clearly stated in the readme.. I'm not exactly sure how to handle that case, and I have little time atm. Would you like to attempt a more graceful degradation if QoS 2 is not supported?. @knolleary subscriptions are degraded, but publishes are ignored, to avoid continuous killing of connections. Maybe we should revise that, as it seems not having the desired effect.. I think we should have a timeout here, and some way to notify the user of the situation. How long has the server to reply, before considering the message as not sent?\nWhat are other clients doing in this specific situation?. It's really hard to help you without a sap broker.\nHave you tried running a debug session on your node client?\nThe best option is for you to contact their support.. There seems to be a bug in your broker code:\n2017 05 16 14:05:13#+00#ERROR#com.sap.iotservices.mms.ws.api.MqttService##anonymous#http-nio-8041-exec-11#na#WWWWWWWWW#iotmms#web##Parsing failed.java.io.EOFException: null\nat java.io.DataInputStream.readUnsignedShort(DataInputStream.java:340)\nat com.sap.iotservices.mms.ws.mqtt.ConnectMessage.(ConnectMessage.java:63)\nat com.sap.iotservices.mms.ws.mqtt.Message.getMessage(Message.java:102)\nat com.sap.iotservices.mms.ws.api.MqttService.handleMqttMessage(MqttService.java:165)\nat com.sap.iotservices.mms.ws.api.MqttService.handleBinaryMessage(MqttService.java:156)\nat sun.reflect.GeneratedMethodAccessor132.invoke(Unknown Source)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.apache.tomcat.websocket.pojo.PojoMessageHandlerPartialBase.onMessage(PojoMessageHandlerPartialBase.java:71)\nat org.apache.tomcat.websocket.WsFrameBase.sendMessageBinary(WsFrameBase.java:589)\nat org.apache.tomcat.websocket.WsFrameBase.processDataBinary(WsFrameBase.java:549)\nat org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:301)\nat org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:131)\nat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:67)\nat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:204)\nat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:203)\nat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:93)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:635)\nat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1760)\nat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1719)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.lang.Thread.run(Thread.java:805). Thanks!!!. Have you tried just using MQTT.js? Does it causes the same error?. This is very hard to debug. Would you mind either to send a PR, or to send a PR with a failing test?. @eiabea you can use a self-signed certificate as long as you pass the signing CA to the ca arguments.. would you mind adding a unit test for this?. Closing for no activity, feel free to reopen!. Ahum, I think the bug should be fixed by having the re-subscription issued on 'connect' rather than 'reconnect', as 'reconnect' fires before CONNACK is established:\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L192-L197\nIf I understand correctly, that would remove the bug, as it will not grow the queue indefinitely for each reconnect.. @Shinjifei you can also fire a PR if you want.. Yes it is, so maybe it's something in the browser.. Would somebody try a PR for this?. line 262 is completely superflous and can be removed. All errors are intercepted by https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L266. Can you add a unit test for this?. what error was it crashing on?. I get what you are saying now. calling the function is wrong, but we are losing a reference to the callback by storing it. The queue is callback-aware, i.e we should call that callback when the subscribe is done, and by passing it to the store we loose a reference to it. I'm not sure what's the right fix atm :/.. > > Callbakcs have to be stored in memory\n\nthey are already stored in client#outgoing\n\nNot true. That works only for QoS > 1.\nHowever, we can limit the queue to publishes with QoS 0.\n@RangerMauve may I get a LGTM?\n@behrad would you like to join this org?. @yohei1126 would you like to help maintaining the typescript definitions of this library?\nI'll add you to the org.. I think this might be more a bug in the implementation rather than a bug in the definition. For all intent and purposes qos: 0\u00a0should be the default in any case. Can you send a PR if this is not the case?. > Are you saying passing an empty opts object should imply qos=0. And we\nshould fix the js rather than religiously follow the quirks in TS?\nDefinitely, if that is not the case yet.. > But JS libary cannnot refuse empty object using type system. So, the default value must be set if an empty object is specified.\nYes!. I think we should also run it on travis, would you mind updating?. oh yes. Ok, merging.. As per https://test.mosquitto.org/, mosquitto test server for websockets is on port 8080.. if you are using a browser, mqtt is translated to ws, because we can't open a TCP socket in the browser. Possibly a bug on my side, if you would like to change that, feel free to open a PR.. @MartinMuzatko exactly.. what do you mean? Can you write down steps to reproduce?. Is the client not reconnecting or not receiving messages on the subscriptions? Who is the sender?. Can you upload a full example that demonstrate your problem?. See https://github.com/mqttjs/MQTT.js/issues/628#issuecomment-305417900. You need to connect to port 1884, as it is there the HTTP server is listening.. I think this is easier to be fixed in the CLI, subscribing on connect is not necessary anymore, as it will automatically reconnect anyway.. Ok! Could you add some unit tests for this?. Thanks!. Would you mind to work on a fix?. I think this is not MQTT.js related, but rather some problem in the underlining certificate chain.. You should use the xtend module, not xtend, that's what we use through the normal dependencies. extend is likely in one of the tree, but we do not depend it directly and so it fails on an old version of npm.. Perfect!. No you can call end safely, you will be disconnected. If you are connecting with clean: false, the subscription will be restored when the same client reconnects.. You need either:\na. to fetch those credentials dynamically via XHR\nb. to use a custom auth logic in Mosquitto, so that you can validate the credentials using a cookie or something similar\nc. sign the connection URL for that user: https://github.com/mqttjs/MQTT.js#signed-websocket-urls\n. The behavior is correct. You are receiving only test3 because you have received the rest with the first connection. I recommend you to add a ' message' listener also to client1 to see those messages.. I thought you were referring to the QoS 2 part and for the offline subscription.\n@peppesilletti which broker are you using? Can you please verify with mosquitto?\n. can you please provide a script in pure javascript so I can reproduce?. Does removing QoS: 2 fixes the issue?. The behavior is correct, mosquitto is not sending the retained messages after a restored session, but only for new subscribes.\n@behrad this proves that the behavior in aedes is wrong, and you are right. We should not send the retained messages when restoring a session.. retained messages are sent only in case of new subscriptions. If a client restores the session, it is not a new subscription after all.. Definitely passing a callback is mandatory. Can you please send a PR?. Can you reproduce the same error without TypeScript? Also, che you include a full example?. Would you like to contribute? i have no time right now.. I think protocolVersion should be 4 for Azure.. Nothing in those stacktrace shows MQTT.js, or am I reading them wrong?. I'm a bit lost in what is weapp, wx and such.. Unit tests will be good?. Yes.. I'll merge this. However, can you please restore lib/connect/index.js to what is there on master? It's all reported as changed in this PR.. You can remove the skipped tests.\nWhat have you changed to the lib/connect/index.js file? GH reports it was all changed, but it does not seems so. Can you please restore it to what was before and apply only your modifications?. @sublimator can you please refactor https://github.com/mqttjs/MQTT.js/blob/master/test/typescript/broker-connect-subscribe-and-publish.ts#L3 so that it spins up a local server like the other JS tests?. @gleroi can you reproduce it by connecting via websocket from Node.js? What are you using as a broker?. Yes, README.md.. This issue is not really clear. I think you would like to receive an Error if qos is 128 (or greater) during subscribe.. This is ok now!. @boneskull do you think we should remove support for weapp?. @boneskull you would like to revert package-lock? IMHO if it start to work as expected, I have no problem with it. I had more rm -rf node_modules in the last few months than in the rest of the years I have been doing node.. Have you tried waiting for a while? Maybe the socket gets closed/notified after a while. This is very platform dependent.\nWhich version of Node.js are you using? If it is a bug, it's likely to be part of Node.js itself.. Who prints \"ethernet eth0: Link is Down\"? What's your code?. have you got a keepalive setup?. It fails with what error?. Does it work without TLS for websockets?. Can you please confirm with the latest version?. I think you have an issue with your cert.. Would you mind sending a PR to address the problem you have found? I'm also ok in having a flag disable the automatic resubscribe behavior.. Can you also add a fix for the other issue? There seem to be some new lines that are not covered by unit tests, would you mind adding those too?\nThanks!. Yes it's the information you are looking for is in the granted property.. You should instantiate a new server and replace the 'subscribe'\u00a0event. See https://github.com/mqttjs/MQTT.js/blob/master/test/client.js#L128-L149 as an example.. Thanks, released as v2.12.0.. Thanks for reporting! Would you like to send a PR with a proposed fix?\nHow would you expect this library to behave?. Would you like to make a proposal and send a PR to implement it?. @unirey There are several open (or closed) issues on errors to things we might want to change.\nI'm very open to discuss the current situation and what to improve, but someone else should take the lead on this.. it's .end().. @MartinMuzatko would you mind to send a PR? thanks!. As said yesterday, it's .end(): https://github.com/mqttjs/MQTT.js/issues/670#issuecomment-323529299.. there can be a lot of reasons. you should check your broker logs.. It is already. As indicated in the README: https://unpkg.com/mqtt@2.12.0/dist/mqtt.min.js. MQTT over WebSockets in http://test.mosquitto.org/, as it's written in the website is on port 8080.. @leecoder can you upload a snippet to reproduce? Or send a pull request with the change you would like to make?. You should study up how MQTT QoS works, check out http://www.hivemq.com/mqtt-essentials/.\nYou can use https://github.com/mcollina/mqtt-level-store to persist on disk.. why are you publishing when you are offline, if you do not want them to be sent?\nThis library aims for simplicity of usage, and it supports several patterns that are common in the Node.js world.\nIf the problem are too many subscribes, maybe there is a compltely different change to be made.. Thanks!!. Is there any update on this one? Thanks!. This is not how it behaves. The publisher and the subscriber are fully decoupled. The callback is fired when the messages ownership has been transfered from the client to broker. . I am \ud83d\udc4e  with this change as is.\nThe spec reports:\n\nIf a Client does not receive a PINGRESP Packet within a reasonable amount of time after it has sent a PINGREQ, it SHOULD close the Network Connection to the Server. (Section 3.1.2.10 - Keep Alive).\n\nSo, we should schedule the PINGRESP to be checked not at any given interval, but rather after a reasonable amount of time after a PINGREQ has been set.. My original implementation was: if you didn't receive one before sending the next one, then it's probably time to drop. I don't see what is wrong with that, and how it can cause problems (the code might, the principle seems sound).. the timer is shifted only if the client is connected, as https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L711 dictates. \nThe goal is to never hit _checkPing(), that's the point. If we are sending data and the connection has not been severed, we should not send, receive or check PINGREQ and PINGRESP.. Have you tried setting the timeout on the socket itself with https://nodejs.org/api/net.html#net_socket_settimeout_timeout_callback?\nMaybe we should provide that as option, or maybe set it automatically a 2x keepAlive.. This PR can be closed.\nI think the suggestion in https://github.com/mqttjs/MQTT.js/pull/683#issuecomment-330186022 still holds.. for sessionPresent\u00a0 to be true\u00a0in Mosca, you need to have an offline subscription active, as far as I remember.\nIn any case, if you need to support multiple windows, you must use different clientIds. I would recommend you to check out  https://github.com/mcollina/aedes. It has a simpler design than mosca.. You can't send objects. Something in the client is erroring and you get a disconnection as a result. You should use JSON.stringify to convert your object to a string before sending.. Can you please upload a script to reproduce the problem?. You should probably open an issue against the nedb store.. This is fixed on master, thanks.. Tests are failing on CI, are they related?. Definitely.. You should use handleMessage.. As MQTT 3.1.1 states:\n\nThe receiver is not required to complete delivery of the Application Message before sending the PUBACK. When its original sender receives the PUBACK packet, ownership of the Application Message is transferred to the receiver.\n\nInstead of introducing a newer API, I would actually prefer it PUBACK was sent after handleMessage is completed (with an option). Would you mind sending a PR?. It seems weird that the same message is transmitted twice when reconnecting. Can you write an example that reproduces the problem?\nRelated to dup.. yes it\u2019s probably a bug. Would you mind sending a PR?. We are using standard, and not really the eslint file. Would you mind removing it completely?. Unfortunately \n1) should not send a `pubrel` if the execution of `handleMessage` fails for messages with QoS `2`\nis very flaky on my box. Can you please send a PR to address the problem?. I just run npm test on Mac OS X.\n```\n  357 passing (57s)\n  3 failing\n1) MqttClient publishing should not send a pubrel if the execution of handleMessage fails for messages with QoS 2:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n2) MqttSecureClient publishing should not send a pubrel if the execution of handleMessage fails for messages with QoS 2:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n3) Websocket Client publishing should not send a pubrel if the execution of handleMessage fails for messages with QoS 2:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n```. @bengl I think so, too. However our tests are network heavy and they tend to bet too flaky to be in CITGM.. can you please add a unit test for this?. Can you send a PR?. Unfortunately these are all volunteers, so we'll fix this when/if we have time.. I don't know, I've never tested this situation. It should converge itself over time, error the old socked, and reconnect. If this is not working, something is broken. If you identify what the problem is, I'm very happy to land a PR.. Oh I didn\u2019t know you could add a flag to mocha.opts to get the old behavior.\nI would still prefer if someone could come up and clean up the current mess.. @4rzael this is very interesting.\nWere you able to pinpoint the problem in our code (or our tests)?. Can you rephrase? I'm not understanding what problem you are having.\nCan you show what behavior you would like to have with a code example?. Is it providing any error? It should work.\nCan you please provide an example? or maybe a PR with a proper fix if you can figure it out?. As I said, can you please produce an example to reproduce this bug? thanks.. Unfortunately, I will not set up a react application to check this. Let me ask again: can you provide a failing test case for Node.js or the browser?. Which version of mosquitto are you using? I cannot reproduce this issue with 1.4.14.. Good find! Let's discuss the change in the PR.. If you can send the fix as a separate PR it would be nice, thanks!\nI'm not sure what's the best way forward is in this one. I think we need another option in the client to tell not to close the stores on disconnect. clean will not do, because we might want to close the stores when disconnecting with clean: false.. Thanks, this is good!. Thanks!!. That is not possible, the websocket API in the browsers does not allow you to specify those.. This looks like a bug, would you mind sending a PR?. Maybe it's a bug. Would you have time to do a PR?. A unit test would be really good at this point. You can at least add a test that checks that an 'error'\u00a0 event is emitted on the stream.. Is there any update to this one?. More or less I want  a test that verified that 'error' is emitted on the stream if this.end(true) is passed in, and such callback is called.\nAlso, an example showing that such callback is indeed not called without this change. \n. 8081 is encrypted. 8080 is not encrypted.. Thanks!!!. Can you add a unit test for this?. Thanks!!!. I acutally don't know what this is. I've used webpack to bundle this several times.. Definitely, but why https://github.com/mqttjs/MQTT.js/blob/master/package.json#L60 is not recognized anymore?\nWould you like to send a PR?. Which broker are you using? Where you able to track down why this is happening?. I think the bug is in websocket-stream. Can you send a PR there?. @edog1973 you actually are correct! But this should be handled in WebsocketStream, more or less not writing down the buffer into the actual websocket in:\nhttps://github.com/maxogden/websocket-stream/blob/master/stream.js#L104-L121\nIt is just a matter of moving that code over there!. I\u2019m not really familiar with the wechat support. We can\u2019t really test it, so it\u2019s best effort. I really don\u2019t have an answer for you :/.. Closing as duplicate of https://github.com/mqttjs/MQTT.js/pull/719.. Very likely you have wrong username or password.. Good spot, would you mind sending a PR with a unit test?. You can create a new mqtt.Store() and override the put method in there.. no. Just:\njs\nconst store = new mqtt.Store()\nstore.put = function (packet, cb) {\n  process.nextTick(cb, new Error('kaboom'))\n}. CI didn't run for the last commit (not sure why). Can you also fix the conflicts with master?. Can you please check in https://github.com/mqttjs/MQTT.js/pull/732/files?\nI think there are still too many changes in there.\nYou might be better off in doing another branch and cherry pick your commits.. I\u2019m sorry, can you rephrase in English?. Good work, landing!. Can you add a unit test for this?. Have you been able to debug why this is happening? Can you send a PR to fix it?. Go ahead and propose a change that make sense. We follow standard in the rest of the codebase.\nIs there a linter to catch these issues?. I abstain: I\u2019m very unfamiliar with Typescript.. You can't use the key, cert, and ca in the browser. You need to trust that certificate manually in the browser, otherwise the secure websocket connection will fail. Feel free to send a PR to update the README with this info!. It seems the error is coming from pg, not really from the pg module, not really from MQTT.js. You should use https://github.com/aws/aws-iot-device-sdk-js to connect to aws iot. It is different enough from a plain MQTT broker to require its own module. It uses this one internally.. can we add a check in tslint to validate that there are no semicolons?. Thanks for the explanation!. The broker should automatically subscribe you.. > When the amq is restarted, we see the subscriber hanging.\nIs the client emitting an 'offline', 'connect'\u00a0or 'reconnect' events?\nHave you checked if the same code work with Mosquitto? I fear it might be a problem with Rhel AMQ configuration, and you should check with them.. Is persistent storage configured in both brokers?. Can you please share the Mosquitto configuration that you are using?. no it is not possible.. Thanks!!!. Can you provide a script and instructions to reproduce?. does that need a username/password combination?\ncan the raspberrypi connect to 192.168.178.32?. I have no idea. You are probably better off checking with wireshark or node inspector what's going on.\nIf you find what the problem is, feel free to send a PR.. I think the best way would be to start separate environments, so that we test mosquitto/mosca/eqmttd independently.. Which broker are you using?\nYou should be getting the messages - it's likely a broker config issue.. Check out the node.js docs, the mqtt instance is an event emitter.. Your question is definitely not clear.. Unfortunately, this might be an issue with your broker. If you want to send a PR, I\u2019m very happy to review.. Would you like to make a proposal (PR) on how to improve the current situation? . You open a PR and we discuss them.. @einargs I mean those changes are very hard to reason about without code that implements them. Propose some changes on how things should work, and we'll work from there.. Probably we have a bug in our typings. Would you like to send a PR?. Thanks!. Oh, good spot, would you or @pierreca be able to help with a PR? Thansks!. Definitely, would you like to send a PR with a proposal?. Send another PR!. which broker are you using?\nCan you send a PR to fix this bug?. Can you please check with Mosquitto, too?. I think it's just the CI that is flaky.. @gautaz this seems to be breaking Node v4.3.2, which we still support because of AWS Lambda.. what's your stacktrace?. This would be a very nice feature, would you like to send a PR?. That is indeed not possible. Closing.. Are you using yarn or package-lock, or webpack? Can you please update your dependencies?\nThis should not be happening and it is a package manager/bundling issue.. remove it, remove node_modules, and reinstall.. I would recommend you to open this issue against aws-iot-device-sdk. AWS has the resource to track down this problem and help you, while this is a community maintained project.\nThis is not a bug in this library.. it\u2019s a bug between webpack and yarn, they are caching too much. There is\nnothing that is not working here, and I have yet to see a full way to\nreproduce.\nThe \u201cproblem\u201d originates from readable-stream. I\u2019ve update mqtt-packet to\nhelp.\nIl giorno mer 7 mar 2018 alle 07:01 Ramesh Mahadevan \nnotifications@github.com ha scritto:\n\n@mcollina https://github.com/mcollina Pls let me know , what would be\ncausing this i can check and see if i can send a pr\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/774#issuecomment-371032438, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL45J2J-uEovwpbYKnNg2LJIZifSsqks5tb3eugaJpZM4SPBL-\n.\n. You have investigated the issue quite well the issue. Would you like to send a PR?. If you want throttling you will have to override handleMessage.. @Eric24 they are puback'ed after all the synchronous event listeners are executed. If you want to delay or wait for some async operation to finish, you need to specificy handleMessage\u00a0 and call the passed callback when you are done.. I think you are connecting from a https page.. that would be fantastic, yes\nIl giorno mar 27 feb 2018 alle 07:00 freebyron notifications@github.com\nha scritto:\nShould I add some unit tests ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/779#issuecomment-368757213, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL44JUxAJoYuO0SGUmmNFaoJDn0yvOks5tY5oAgaJpZM4SUZe-\n.\n. 4 is 3.1.1.\n\nAs stated in https://github.com/mqttjs/MQTT.js/issues/651, I have no time to contribute this. I'd be very supported if anybody wanted to work on it.. All the code in this repository runs without babel in modern browsers and all Node.js LTS versions. That's a target. I'm very \ud83d\udc4e on using async await and other features that are not widely supported in all LTS lines of Node.js and modern browsers.\nUpdating Node.js on a raspberry Pi is not super easy, especially on old hardware.\nThat being said, I would love to see mqtt.publish() and others potentially returning a promise if no callback is passed through. If you want to work on a PR, please file one.\nWhy would you need to extend and override the methods? This is a MQTT client, and you would like to make a specialized MQTT client, specialized for what? I'm failing to understand the use case of being able to extend the client.\n\nI have a working solution inelegant as it is so this is really just a comment/suggestion at this time.\nThx for this mqtt project. It of course saved me a lot of time even as it is.\n\nInstead of proposing a complete API redesign, you might want to help sorting out some of those 83 open issues, if you want to give back.. what would happen if a client connects with clean=false? We are expecting those callbacks to be called when the client reconnects and will be able to deliver those messages.. > As it stands, even with my changes, with a reconnect value > 0 it will indeed attempt to resubmit those packets in the output store.\nwhat do you mean by reconnect > 0?\n\nWould it be acceptable to only flush the packets in outgoing if reconnect = 0? Should it also delete the \"matching\" packets in the output store?\n\nPackets in the store should never be deleted if clean: false, and with clean: true the logic is already there.\n\nWith respect to the MQTT protocol, is it EVER reasonable to return with an error some packet with qos > 0?\n\nonly if we are dumping them from the queue, we should call the callback with an error. And only if clean: true.\n\nIf packets are allowed to complete with an error, wouldn't cleanup(true) be the best place?\n\nwhat do you mean?. > Who is doing the reconnect? Is it the reconnect logic built into mqttjs?\nThe reconnect logic is built in into mqtt.js and it happens automatically.\n. @periclesroalves I agree. Would you mind helping getting this to the finishing line?. > As you pointed, if the user is using the internal store, the reconnect method will wipe the stores. According to this spec it shouldn't be doing that, regardless if the store is user-provided or internal.\nThis was discussed in https://github.com/mqttjs/MQTT.js/pull/734#discussion_r155227295 and other comments in that PR. The problem is that end() will close the stores. So, new stores should be provided.\nI'm at a loss on how you would change the current API to meet the spec.\n\nThe library does not clear the stores across automatic reconnections. The only case where it does it (except from the one mentioned above) is when the end method is called explicitly. According to this spec, the library should clear the stores even if it tries to reconnect automatically.\n\nOnly if clean: true. If clean: false, the stores should be left as they are. Feel free to address this.. > Are there any plans to implement this?\nWould you like to contribute?  See #651 .. @stephendeyoung unfortunately I will have no time to investigate this issue for the next few weeks. Feel free to send a pull request if you figure it out.. Awesome news!. I think the latest one should still run fine. Let us know!. our tests are currently passing on 4.3.2 (https://github.com/mqttjs/MQTT.js/blob/master/.travis.yml#L6). I expect it to work on 4.3.1 as well.\nWhat are you executing and with what output?. I think your username/password/clientId combination has no right to publish to the second broker. . Can you please upload a full example? Consider that this is likely your code or your broker problem.. As I said, can you please upload a full example?\n. In fact I expect the exact opposite, to have all code and examples. More often than not, I use those to get info about the module.. Because it is not. Some of the most downloaded modules do include tests and examples. Some of the most downloaded modules do not include those.\nYou open this issue not saying why this is a problem for you, and you hint you could be wrong. It did not seems you wanted a discussion, but a generic question about this module and npm.. @sublimator I know.. @chrste90 I would really like if we could do so. Would you like to send to highlight the main offenders?\nI suspect this is shared also to some of our dependencies (I know of a few myself), so it would be very hard to fix.\nLet me know if you plan to open a PR.. setTimeout has a completely different meaning than process.nextTick, and it would a very slow replacement for Node.js.\nI don't think we can easily change the behavior in readable-stream, but we can specify a browser field in process-nexttick-args package.json, to avoid using process in the browser.\n\nBut for bin/sub.js and bin/pub.js there are uses of process.exit(). Is this code used by consumers or only for examples in this repo (sorry, i'm not very familiar with mqtt.js yet :))\n\nThese are executables for Node.js, it should stay as it is.. > Ideally it should be replaced by the asap module that handles environment differences gracefully.\nWe can't use that module because the behavior is different in Node.js. However, we can use the same technique that's in asap to not use process in there.. I've absolutely not bandwidth to do this.. @sclausen unfortunately it's not possible for two reasons. Firstly, promises wrap every function in a try-catch, changing how error would work. Secondly, Promise is not available in all the supported of readable-stream.\nThe approach with setTimeout is fine. There is a need for a browser field in package.json to instruct to use that in the browser, so we can avoid to load process\u00a0 completely.. Can you please add a unit test?\nWhat \"does not work\" mean? Can you make sure it'd throw in that case?. Which protocol would it use if it's not specified?\nI'm not ok in doing a semver-major upgrade for this.. Ok, can you add a unit test?. why? The callback is always called for the message you have published.. This is very interesting! Would you like to send a PR for this?. Thanks!. Thanks!. Thanks, can you use this PR so that it uses the newly published mqtt-packet@5.6.0?. I would recommend to ask the folks at AWS to help you out, or send a PR with the fix.. This feature was contributed to better support AWS IoT. AWS IoT is a paid product, and while they are using this library, they are not helping with the maintenance of this library.\nI'm happy to review a PR that fixes this bug.. Good work, I\u2019ll wait to land this until mqtt-packet and mqtt-connection has been updated and release.\nDo you think this is a semver-minor change?. @scarry1992 can you please update this so that tests are passing? Please do not bump the version or merge this. Thanks.. It is now.. I think so, yes. Look at the areas that are not covered in codecov.. I'm sorry for the long delay in reviewing this. I've been traveling for most of the last month, with more traveling next month.\n@scarry1992 Good work!\n\nMQTT 5 enables communication between the broker and the client using reason codes, which, in my understanding, means that there should be the opportunity to send puback/pubrel packets manually by a user. Did I get it right? More details here: pubac specs in reason codes section (Implementation specific error).\n\nI agree with you.\n@psorowka I would like to keep this implementation minimal, so we can cut a new major and then improve on that one. We can even land it and start cutting -rc releases, and iron bugs along the way.\n@scarry1992 @psorowka can you please point me to some docs about topic alias?. Travis is a bit flaky these days. Do you know which brokers are currently compatible with this? I would like to do some manual testing.\nMy goto broker for this type of things is Mosquitto, and it's not supporting MQTT v5, but it should be ready sooner rather than later https://mosquitto.org/blog/2018/05/press-release/.\nRegarding the CI, could you: a) drop testing on Node 4, 4.3.2 (lambda), 5, 7, and 9? Also, add Node 10.. Could you add a note in the README that MQTT v5 support is experimental as it has not been implemented by brokers yet?. @scarry1992 can you please rebase your changes or merge master? It's conflicting now.. Those are not MQTT topics by the spec. It's custom behavior from your broker.. @taoqf what do you think? You originally added this.. Thanks!. I\u2019m no angular expert but this looks like a bundling issue.. This is fantastic! Good job!. Yes it should be. Would you like to send a PR?. 1883 is the MQTT port. If you want to connect via Websocket, you need to use a HTTP/Websocket port.. Thanks!. Can you please add a unit test for this case?. I'm a bit lost.\nI'd like to retain the current functionality. We might want to delay clearing up the stores until all messages are delivered, if I understand your goal correctly.. Can you please add a unit test that verifies one of those edge cases?. use removeListener('message', cb).. Are you running your bundle in the browser, right? In the browser, there is no tcp socket.. Yes\nIl giorno dom 5 ago 2018 alle ore 12:13 lucaele notifications@github.com\nha scritto:\n\nyes i'm running on browser.\nSo I think the same problem is on cordova mobile app, right?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/849#issuecomment-410509514, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL4zgLhZa52-6gh9ei7ItJzpApfOHwks5uNsVOgaJpZM4Vu-EC\n.\n. I don't think that's currently supported. Would you like to send a PR?. This should not be needed, readable/read are functionally equivalent to data/pause/resume. Let\u2019s fix the bug in the previous logic.. You should not use pause() and resume()\u00a0 with 'readable'.\n\nJust call .read() to get an item, and if it's null you should wait for another 'readable' event. There is no need to pause, because it's already paused.\n.read(0) forces a read, which is what I think it's the problem in the current code. . @redboltz can you please confirm that this works as expected, and if not, please add a unit test or example with code from just this repo.. I've updated this branch, it should fix your problem.\n\nSo I introduced my under developing mqtt-level-store to packet.cmd check on put (replacing case). Replace is needed only 'publish' to 'pubrel' case.\n\nI think that would be needed.. It's already published, 2.18.6.. Or do you need this as well?. Done.. I just forgot to publish 2.18.7 on github. I've just tagged it.. It\u2019s not clear what you mean. Can you pass in a custom object to add this test?. go for it!\nIl giorno mer 19 set 2018 alle 03:21 Masaaki Fujiwara \nnotifications@github.com ha scritto:\n\nAlong with #869 https://github.com/mqttjs/MQTT.js/pull/869, need to\nupdate type scripts. Can I create new PR?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/871#issuecomment-422613655, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL44MUSk1-KMaKDK0jZacmoIbaMTn7ks5ucZv-gaJpZM4WtY4D\n.\n. if the streams ends, we are not going to error the client (autoreconnect), but routing it to the close event in https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L283.. What do you mean? Would you like to send a PR?. no time atm :/.\n\nIl giorno mer 24 ott 2018 alle ore 10:13 scarry1992 \nnotifications@github.com ha scritto:\n\nI don`t think about PR for now, but I can attach my usecase:\nif we attach broken will-object to config, we have the error in\nmqtt-packet, but in MQTT.JS we have no catching thats errors.\nI think you can resolve that issue faster, then me.\nAnyway, if you have no time, I can resolve it later.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/871#issuecomment-432557274, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADL43-r52dzKP1kMudW1P6P-xE-i_4Wks5uoCErgaJpZM4WtY4D\n.\n. Unfortunately I can\u2019t help atm :/.. Can you add a test or some assertions that checks if nothing is left in incomingStore?. > If highWaterMark is not 1, on('readable',...) doesn't called until the number of packets reaches the highWaterMark value. It is not good.\n\nThis is not correct. \u2018readable\u2019 is emitted once there is data.\nI think we should refactor our code to avoid this. there should be no such requirement.. Can you please restore the test, and add a similar one for ali?. @SyMind is this ready to go?\n@taoqf can you review as well?. Please send a PR\nIl giorno mar 11 dic 2018 alle 23:24 Artem Skok notifications@github.com\nha scritto:\n\nTypings in this projects contain some kind of issues so that it is\nimpossible to import * as mqtt from 'mqtt';\n\nplanttron.api@0.0.1 start:dev D:\\projects\\planttron\\planttron.API\nset NODE_ENV=development&& ts-node ./src/startup.ts\n\nD:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:261\n    return new TSError(diagnosticText, diagnosticCodes)\n           ^\nTSError: \u2a2f Unable to compile TypeScript:\nsrc/services/mqtt.service.ts(1,24): error TS2307: Cannot find module 'node_modules/mqtt/types/index'.\nat createTSError (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:261:12)\nat getOutput (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:367:40)\nat Object.compile (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:558:11)\nat Module.m._compile (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:439:43)\nat Module._extensions..js (internal/modules/cjs/loader.js:699:10)\nat Object.require.extensions.(anonymous function) [as .ts] (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:442:12)\nat Module.load (internal/modules/cjs/loader.js:598:32)\nat tryModuleLoad (internal/modules/cjs/loader.js:537:12)\nat Function.Module._load (internal/modules/cjs/loader.js:529:3)\nat Module.require (internal/modules/cjs/loader.js:636:17)\nat require (internal/modules/cjs/helpers.js:20:18)\nat Object.<anonymous> (D:\\projects\\planttron\\planttron.API\\src\\core\\app.ts:8:1)\nat Module._compile (internal/modules/cjs/loader.js:688:30)\nat Module.m._compile (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:439:23)\nat Module._extensions..js (internal/modules/cjs/loader.js:699:10)\nat Object.require.extensions.(anonymous function) [as .ts] (D:\\projects\\planttron\\planttron.API\\node_modules\\ts-node\\src\\index.ts:442:12)\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/899, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AADL46ZHJfGHA6hiw4wuVeoglTuVvT_5ks5u4DCzgaJpZM4ZOW5c\n.\n. Hey @scarry1992 @redboltz @mqttjs/mqtt-js, can you have a look at this one?\n\nI'm seeing a lot of broken tests related in Node 11 (some related to MQTT v5):\n```\n  9 failing\n  1) MqttClient\n       auto reconnect\n         should resend in-flight QoS 1 publish messages from the client:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n2) MqttClient\n       auto reconnect\n         should resend in-flight QoS 2 publish messages from the client:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n3) MqttClient\n       reconnecting\n         should not be cleared by the connack timer:\n     Error: Timeout of 4000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n4) MqttClient\n       reconnecting\n         should not send the same subscribe multiple times on a flaky connection:\n     Error: Timeout of 3500ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n5) MqttClient\n       reconnecting\n         should not send the same publish multiple times on a flaky connection:\n     Error: Timeout of 3500ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n6) MqttClient\n       MQTT 5.0\n         auto reconnect\n           should resend in-flight QoS 1 publish messages from the client:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n7) MqttClient\n       MQTT 5.0\n         auto reconnect\n           should resend in-flight QoS 2 publish messages from the client:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n8) MqttSecureClient\n       auto reconnect\n         should resend in-flight QoS 1 publish messages from the client:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n9) MqttSecureClient\n       auto reconnect\n         should resend in-flight QoS 2 publish messages from the client:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n```\nOverall I would need some help in getting those fixes, so I can get 3.0.0 out.. Would you mind having a look at https://github.com/mqttjs/MQTT.js/pull/901? I'd like to get the tests green before landing this.. Can you please rebase or merge master?. I'll see if I can get a new release out asap.. Thanks!. Done in https://github.com/nodejs/package-maintenance/pull/175.. Are you sure? Shouldn't be an else part, to actually close the connection if the connection is indeed connected?\n. Why do not pass the Connection as a third argument instead?\n. You should cache the read byte, as the packet might be splitted.\n. The problem here is bind: it's slow. The only solution here is to unwind that big for loop into multiple function definition, copy-pasted :(.\n. This is ok, but I'd prefer it being exposed as a big switch, that's faster.\n. You need to use Buffer.byteLength if it's a string, and will.payload.length if it's not. The problem are unicode chars, which are counted as 1 in string.length, but they are actually multibyte.\n. still not correct :/\n. also here\n. You can just do a\njs\n// setup the global setImmediate if missing\nrequire('setimmediate')\nwithout assigning it to anything.\n. I actually prefer to have module dependencies at the top, and then all the rest.\n. you can define this in the top block\n. you can define it as a function, function defaultId, so it follows the same pattern of nop behind.\n. This line is too long. Move module.expors at the bottom and remove the whole var thing.\n. Move it at the top, no problem for me.\n. Can't remember, feel free to change/improve.\n. Remove the comment and keep ignoring it. It is meant to be used this way.\n. this does not close the stream if the client gets disconnected, it might leak memory.\n. can you please remove this code?\n. This is perfect. However I noticed that the stream does not get destroyed properly if a disconnect happens while we are still sending the messages. My bad, I did not put in this feature in the first place. Would you mind adding it while you are at it?\n. yes it is :D.\n. I fear this might cause some issue in the browser. Can you please check?\nOtherwise I would prefer to add it only if it is not a browser.\n. just throw an exception\n. You should probably move the browserify related commands into the browserify section.\n. I would do:\njs\nthis.emit('connect', packet);\nso we avoid a useless object allocation.\n. You might possibly add the meaning of sessionPresent here, so it's more clear why this is important.\n. While you are at it, we should fix this TODO as well :).\n. can you please roll this back to 1.5.0. The lead maintainer (myself) usually bump that number.\n. as far as I know, this is not a global variable. What do you mean here?\n. maybe a for loop?\n. you should also check if cmd\u00a0 is\u00a0publish. The qos bit has different meaning with other packets.\n. I'm not convinced we should error the client for sending a message when not connected.\nIf it's QoS 0, then you are accepting that the packet can be lost. I think we should just ignore this packet if there is no callback.\n. you should add an assertion verifying that an error is returned from the callback.\n. Using a function here is definitely not ok, as it will cause a perceivable slowdown in the benchmarks (at least in #345). Moreover, this function will be allocated even for every other packet (where there is no need).\n. Given how the logic work, we can generate a wrapping function only if write returns false.\nHowever, for logging purposes, we might even emit it anyway even if write\u00a0returns false.\n. waiting \"drain\" does not really help in guaranteeing a packet was sent. It's used only for handling backpressure.\nI would avoid allocating a function and emitting the event anyway, without waiting.\nAlso, I would just have client.emit('packetsent', packet).\n. I'm not really convinced by this, I think this should be a incomingStore.del() in the first place.\n. You should move these to https://github.com/mqttjs/MQTT.js/blob/master/test/websocket_client.js.\n. Use a full error here, not a string.\n. It would be probably good to move these into another file, client.js is already too big.\n. Can you please split this test into multiple cases? all of those are invalid, but this test verifies that just one is invalid.\n. can you add also a/b/c/d?\n. Can you please remove the double newlines here and before?\n. we should close the server before calling done.\n. I am really scared about timeouts in tests, as they are often a source of flakyness.\nCan we remove it?\n. Why are you using some, if you are not storing the result in  duplicateId?\n. @miotabbott this line was missing in your test.  Basically the server connection was destroyed, but the client never received a corresponding puback. From the client perspective, the publish was never acked, so it had all the rights to retry.\n. because c.destroy destroys the stream/socket, but the packet has been already received and parsed, so it will be delivered synchronously.\nPlease verify on AWS IoT if everything works correctly with this fix.\n. we return an Error here.. we can do\u00a0setImmediate(callback, new Error('Invalid topic ' + invalidTopic)). You are right, I reviewed this wrongly. Merging now.. Can you please change Mqtt to MQTT?. why the need of all of this?. Ok, this is the first, correct?. can you please articulate that better?. Thanks. I don't understand why we can't just add agent here.. can you call it WebSocket? and mention it as specific for WebSocket?. Can you also mentions all the possible options for WebSockets? Otherwise it is not really helpful and it would create confusion (even in another section underneath).. there is no need for (). how about we call it start? and maybe call the option start? I think it might play better with the rest of the API, specifically about end().. how about calling it _started?. can you reduce this?. \nAlso, can you verify that before that startConnection()\u00a0 does not automatically connect to the server?. you can just call this.start() here.. why do not we just compute this from nextId?. while we are at it, can we limit this with ^?. awesome!. we can also add snazzy here, it's nice!. why those todos?\ncc @sandro-k . this needs to be specified that is for websocket only.. can you move it after the API?. this should read ws/wss. I think backOffStrategy should be a function, rather than a string, and it should be more modular.\nI'm happy if we provide this back off strategy as a separate module as well.. We might just support an object BackOffStrategy, with methods next(), reset(), unref(). I'm throwing in ideas, I'm not 100% sure that comparing strings is the best option.. Can you move it there? They should pass on travis.\nWhy are they failing?. can you add a unit test that cover this case, so we check we don't get a duplicate subscription?. have you tried just using once('client') here?. this would need to be moved in the publish section of the README, just like all the other options.. instead of checking if it is not an 'ECONNREFUSED', can we verify if it is a TLS error?. @eiabea you can create a test-specific server with https://github.com/mqttjs/MQTT.js/blob/master/test/client.js#L242.. this would store subscribes as well, do you think it will have any drawbacks?. I think we should call cb() every time, not just in case of an error. I think you can pass it directly to put().. we should always call the callback, if it's not there let's just noop it.. you can just avoid the storePacket function, and use client.outgoingStore.put here.. I think this is ok, but add a unit test that covers this case.. this should be var.. This new method is not needed, you can use https://github.com/redboltz/MQTT.js/blob/c35e0a615b44bb235fecffb6b2ae8bdee4556c5a/lib/store.js#L74 and call it with { messageId }.. you can pass nop to  del.. maybe we should call the callback store in this object with an Error.. Maybe we should call the outgoing callback (if exists) with an error?. the name could be a bit more meaningful, something like removeOutgoingMessage.. why this?. we should not be adding wx if it's not a browser. the main wx object is not there.. Because it's still a very experimmental technology and there have been a lot of bugs. Plus, it does not make the life of a maintainer easier. So, no, we should not use them.. @imZack definitely. Would you like to send a PR? I've it disabled globally, so it's not a big deal for me, but I can see why it's needed for others.. this should be QoS aware, multiple subscribes with different QoS should be treated separately.. we need to test that the callback is called anyway.. I would prefer this to stay as destroy(), or are you seeing test failures because of it? destroy() ensures no more data is sent in the socket.. remove this try-catch.\nWe should also allocate a closure:\njs\nthis.emit('message', topic, message, packet)\nthis.handleMessage(packet, (err) => {\n  if (err) {\n    return done(err)\n  }\n  this._sendPacket({\n     cmd: 'puback',\n     messageId: mid\n  })\n}). can you rewrite the test to avoid the setTimeout?. as we are erroring, should a PUBACK be sent anyway?. You are right, no PUBACK if handleMessage errors.. we use should in this module.. this is ok.. this is not correct. Some of the stores close connections here. If we do not call close(), we will not release those resources and quit cleanly.. It needs to keep the content of the stores, but the default are in-memory and we are clearing the context during close: https://github.com/mqttjs/MQTT.js/blob/master/lib/store.js#L103. That might be wrong. Close should really be a no-op by default on those.\nIf you consider only MQTT, you are correct. However, we need to take into account that this is a node module. If the stores are maintaining a connection to a database, those normally prevent the process to terminate correctly. So, close() needs to always be called to free those resources. . Unfortunately, I\u2019m not able to convey my reasoning: the close() method is something that MUST happen in the normal case independently of the MQTT clean flag. We should just add another option closeStoreOnEnd: false, so that in your edge case you can avoid calling close. This means that the stores would need to be closed by the application and they are not managed anymore by MQTT.js.. I'm \ud83d\udc4d  in passing options.clean to the store. However, pass it on creation rather than during close(), so we don't have to change the API.. can you use the xtend module here?. Can you call c.end() everywhere?. as deferredReconnect\u00a0 is only used internally, can you please add a _\u00a0 prefix?. I don't think this is generically correct. I think we should not close store.close()\u00a0 in this scenario.. We could add the two stores as an option to reconnect.. Can you use a more describing name for this? It's not really mqtt, it's connect() from a Node perspective.. thanks!. That will be perfect, can you push?. this is not testing what you think you are testing. As you have modified the client, you should test the client, not the store.. why all these changes in the test? Can you only add the new one?. Can you please restore them as they where on master?. Yes, that would be the preferred path.. this can pass an error as well.. no error to 'end' please.. Generically, I prefer if PRs did not tweak the version number. This is done as part of the release itself.\nI'll land it anyway, but please remember for the next time.. Oh, this was weird. Can you please rebase and squash your commits? It seems something went wrong with the merge. and a commit of myself is showing up here.. There is no need to have this as an instance method, it can be a top-level function.. we might want to return after this? Emitting 'error'\u00a0 is a distructive action.. if we are emitting error, we should really destroy the client or fully disconnect (and reconnect).. why is this block commented here? If it's not needed, remove.. Don't do this. It's super slow in older versions of Node.js (< 6), and not really needed in this case.. this should really go to the top of the file. There is no need to declare this here.. we should call the callback with the error, not emitting one.. same here. why this change?. I typically bump the version when releasing. Can you please revert this?. At some point this was added and it was deemed as working. Maybe you can check if document exists instead and throw _only in that case?. Can you please explain it a bit more? I think our goal with this client is to keep operating. If we receive such a bad packet (and we keep receiving it), the client will not be able to operate anymore.. it seems we are manipulating this.options\u00a0 a lot in this function. Would you mind extracting it into a variable var options = this.options?. Can you please add a comment explaining this block?\nAlso, can you extract var options = this.options\u00a0 for readability?. Is this previous form now removed?. we are manipulating a lot _resubscribeTopics. Can you please extract it into a separate variable?\nCan you also add the docs for nl\u00a0, rap and rh? If these are not exposed, can you please add a comment somewhere explaining them?. This is better implemented with:\njs\nvar args = new Array(arguments.length)\nfor (var i = 0; i < arguments.length; i++) {\n  args[i] = arguments[i]\n}\nbecause using Array.prototype.slice is extremely unperformant in older Node.js versions. . Can you extract var options = this.options?. All this function becomes very complicated with the customHandleHack function. Can you please refactor so that there is always a default for that, and we avoid all those ifs?. the signature for the callback of customHandleAcks must be function (err, code) {}. We should also validate that code is valid, or is this done when generating a PUBACK?. we don't need es6-map,Mapshould be around in all the environments this run. Or maybe not?. Can you please add a comment before therequire('es6-map')with  that comment? This is the case for IE11 I presume.. I'd prefer if we calledhandleMessage_before_ sending a PUBCOMP.. can done be null? If that is true, than can you please assign it to a noop function?. can you please assign an empty function to callback if it's not present and remove the two checks?. can you shorten these? A process.nextTick might be enough.. There is a handynop()function https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L66.. I think the callback should be defined here.. can you move this to a top level function instead?. can you justemit('connect')?. You can pass the packet to_onConnect(packet)and wrap it in the closures there.. can you make this_firstConnection? this should ideally be private.. I would prefer the new callabck to be in the option instead?. Is{'test1': 0, 'test2': 1}` still supported?. I think we might want to change this error condition. Should we really send pubcomp here?. The guarantee about being processed only once is important for QoS 2.\nI think we might want to keep the put, but rather call a del\u00a0 after _sendPacket(comp) callback.. > The thing I'm unclear on here, should the message be considered processed if the call to handleMessage returns an error? With this logic, if handleMessage fails and prevents pubcomp from being sent, when the server resends pubrel the check for the previous pubrel message will prevent handleMessage from being called again.\nI think so, yes. When handleMessage is called, the responsibility passes down to the application.\n\nAnother concern is that if _sendPacket were to fail, the message wouldn't be removed from the incoming store when the server resent pubrel, although that could probably be resolved by splitting out the check for the pubrel and duplicating the send/del logic\n\n+1 for splitting the logic\nCan you add tests for those cases?. Can you remove this console.log?. I fear this might throw for alis.. When will these packets be published if we just store them?. Can this work without highWaterMark: 1? Other implementers of the same interface might not set it.. I think these two properties are better prefixed with a _, those are internal.. ",
    "kmpm": "In b3e0db3 there is a test for issue #32 \n. ",
    "binarybucks": "IMHO automatic pinging would be a convenient feature\n. Allright\n. Thanks :+1: \n. It is now called mqtt (without js) and located here https://npmjs.org/package/mqtt \nThus it would be nice if @adamvr could publish a new version that includes all the recent changes ;)\n. ",
    "manolodd": "OK... I've the same error at this moment.\n- Connecto from client to Mosquitto using TLS.\n- After a while Mosquitto disconnects the client with \"Socket read error on client (null), disconnecting.\"\n- The client reconnect.\nBut... when I publish a message, the message is printed by client many times. One time for each connection. So It seem that the client reconnects, but the previous connection is still alive \u00bf\u00bf\u00bf\u00bf????\n. Solved!\nIt was a problem of Haproxy configuration. Setting up keepalive values for mqtt-nodejs clients greater than clitimeout option of haproxy makes haproxy think that the connection is idle (because I was only connected but there is not real traffic). As I configured clitimeout to a very low value to prevent slowloris attacks (inherited from my haproxy http configuration), the connection is closed by haproxy (not by Mosquitto).\nSetting clitimeout to a value grater than mqtt-nodejs keepinterval solves the situation because at least a ping is sent through the connection before haproxy timeout expires. \nSo sorry again :-(\nWell, at least this information could be of interes for the rest of the people.\nThanks.\n. Next time I'll open a new issue. I though that both cases were the same .\n. Hi Matteo,\nI'm so sorry. I was been reading options for secure client creation (https://github.com/adamvr/MQTT.js/wiki/mqtt) instead of mqtt connection (https://github.com/adamvr/MQTT.js/wiki/connection) you pointed out.\nOptions for secure client creation does not show up parameters for will, but I suppose createSecureClient will recognize them as in a MqttConnection, isn't it?\nOk, let me try!!\nThank you so much and sorry.\n. Ok, it works fine!! Than you again.\n. Hi Matteo, this is the code I use. It's very simple:\nvar mqtt = require('mqtt');\nvar config = {};\nconfig.mqtt = {};\nconfig.mqtt.options = {\n    username: 'AnUser',\n    password: 'APassword',\n    keepalive: 20,\n    clean: true,\n    clientId: 'clientID'\n};\nvar client;\nclient = mqtt.createClient(1883, '192.168.1.7', config.mqtt.options);\nclient.on('connect', onConnect);\nclient.on('message', onMessage);\nclient.on('close', onClose);\nclient.on('disconnect', onDisconnect);\nclient.on('error', onError);\nvar counter = 0;\nvar max = 10000;\nvar frequency = 10;\nvar io;\nfunction onConnect() {\n    console.log('Connected');\n    io = setInterval(publish, frequency);\n}\nfunction onMessage(topic, message) {\n    console.log('Message received');\n}\nfunction onClose(packet) {\n    console.log('Connection closed');\n}\nfunction onDisconnect(packet) {\n    console.log('Disconected');\n}\nfunction onError() {\n    console.log('error!!');\n}\nfunction publish() {\n    setImmediate(function () {\n        client.publish(\"/testTopic\", \"Msg: \" + counter);\n    });\n    if (counter >= max) {\n        clearInterval(io);\n    }\n        counter++;\n}\n\nI've tried setting a keepalive value of 200 (instead of 20) and everything goes 'better'. It seems that because of the stream is being used to publish messages, the ping response is delayed and it does timeout to expire. Isn't it?\nIf there is a bug that causes this problem and you expect to solve it in next months, it's OK for me. I'm not in a hurry. We still have to code for 4-6 additional months :-)\nI know that MQTT is intended for low bandwidth and usage. But I've a three levels Mosquitto hierarchy and the root of the hierarchy receives the aggregated messages of the rest. Behind this root Mosquitto, there is a node.js backend that send responses to every received message; I was testing whether Mosquitto was able to support a \"high\" traffic rate or not and the overall behaviour of MQTT hierarchy. Mosquitto supported it, but then mqtt.js diconnection issues happened several times. I did not expect it as we chose Node.js because of its network performance.\nThanks for all, Matteo.\n. One more thing. As I said before, MQTT.js is able to receive the same amount of aggregated messages without disconnections. Only publishing seems to have this issue.\n(Publishing and subscribing are done by different mqtt.js clients  on the backend)\n. > I highly recommend to increase the keepalive to 1 minute or more. It is no sense having a value that\n\nshort. You need to take into account network latency, throughput etc..\n\nOk, thank you. But backend and the broker are in the same local network that is giga ethernet and have an average RTT = 0,5 ms. Throughput is far to its limit, too. However, keepalive for remote clients are greater (two minutes).\n\nI suggest you to move to a 'clustered Mosca configuration', and use the 'published' event\nto hook into any data processing you might want to do \n\nWe analyzed the use of Mosca for our platform, but we need QoS 2 support and Mosca only support QoS 0 and 1. We are designing an end-to-end acknowledged protocol on top of MQTT (that follows  point-to-point paradigm) so we need to ensure that packets are delivered and are delivered only once. \nWe do not need bridging at all, we would prefer a clustering model, but we cannot renounce to QoS 2. It is a must.\nAnd about the subscribing question... why it does not fail although it is configured with the same keepalive? \u00bf?\u00bf?\u00bf\nThank you again.\n. ",
    "jeloou": "I'll do it. Let me check the spec.\n. ok, the unit test is ready. Looks fine for you? \n. Hey guys, \nI was checking the protocol specification and the source code, but I couldn't find anything about an  acknowledgement back to the server after a subscribe. Maybe I'm missing something.\n. @mcollina I mean after the server sends a SUBACK.\n. All test are passing now. Forgot to reset callback when treated as opts.\n. ",
    "williammartin": "Doh. Of course I was looking at https://npmjs.org/package/mqttjs \nThanks!\n. ",
    "neoqing": "sorry, my problem, my node.js engine is out of date\n. ",
    "paularmand": "Yes, I'm sure the connection is arriving (CONNECT comes in with the correct\ncredentials).\nI can't give an example working on the bridged mosquitto as it's running on\na flukso device (see flukso.net).\nI'm unsure about the version of MQTT.js/node I'm running -> I'll check on\nMonday.\nBut great idea. I'll substitute the MQTT.js with a another mosquitto broker\nto check whether it's related to MQTT.js. Thanks, I'll report back !\nOn Fri, May 3, 2013 at 3:31 PM, Matteo Collina notifications@github.comwrote:\n\nAre you sure the connection is arriving to the MQTT.js server?\nCould you provide a full example that shows the problem on a gist? Could\nyou also provide the same example running on moquitto? (with a mosquitto ->\nmosquitto bridge).\nSo we can run it to know if it was solved.\nWhat version of MQTT.js are you running? What version of ndoe?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/issues/74#issuecomment-17394059\n.\n. Ok, I found the time to test the mosquitto -> mosquitto bridge: Same behavior, so it's not related to MQTT.js. Thanks for the tip on tracking down the problem. \n. \n",
    "halfblood369": "Good job, thanks!\n. ",
    "davedoesdev": "Yes- my use case is somewhat different to the normal one for MQTT.js. I'm using it to relay messages to my custom server and I want to puback/comp back to mosquitto only when my custom server has delivered the message to one of its clients. I'll maintain my fork with these changes and rebase it from time to time to pick up other fixes.\n. Thanks. It's fine for now as I have a small number of sensors so far.\nI can also configure my relay to ack straight away if required (my custom server has persistent message queues).\n. I can still get this to happen in a mocha test but only if I stop mocha's uncaughtException handler and instead ignore the exception. Then the packet never gets reset and the puback gets interpreted as a publish.\nI'm not sure this is valid anyway - I think an uncaughtException should cause process exit.\n. That looks good because it will emit an \"error\" so the process will exit unless handled, right?\n. I just threw an exception in my handler\n. Yep, https://github.com/adamvr/MQTT.js/commit/814202301851842745df7765e2b328610edd83c1 fixed it.\nThe test in there is basically the same as mine.\n. Not used domains yet. Have you instrumented the effect of try-catch?\n. Seems it makes a big difference so yeah I think domains look interesting. I wouldn't mess with uncaughtExceptions, seems a bit hacky.\n. Yes, let the exception go and let the user deal with it.\nI'm in the 'stop the process (or domain I guess) and restart it' camp but that's my choice.\n. For servers yes I'm striving for that, but on client I like to use a supervisor.\nEven on the server, if something unrecoverable happens (like you have some state that's difficult to recover cleanly) then those 10k connections will just have to reconnect. Ideally the clients should be tolerant of frequent connection problems.\n. Seems a good conclusion. I do use exceptions to intentionally crash the app but leaving it up to the user is a good thing. \n. ",
    "knolleary": "Good to see it listed. \nCan I ask it is looked at sooner rather than later? The whole purpose of the qos1/2 flows is to assure message delivery over fragile networks. The client as it now stands isn't able to assure that delivery.\nThe hard deprecation of mqttjs and the fact the new client in mqtt doesn't have this ability has broken me very badly.\nWith mqttjs, I had written my own wrapper that provides the higher level API to the packet events it emitted. This was working well.\nBut now rather than deprecate mqttjs in the traditional sense (leaving it functional, but with log messages that it is deprecated), it has been ripped out entirely - leaving me unable to install my app on any new machines.\nLuckily I still have the old mqttjs module, so I can manually copy it around - but this prevents me from distributing my code very widely.\n. My api isn't identical to the new client, but with the simplicity of MQTT, it doesn't take much to port between api's, assuming they are functionally comparable.\nThe fact a proper client API has been added to this module is great to see.\nMy feedback here is largely to help make it a first-rate client based on my experience of MQTT. If I can get the appropriate approvals from my employer, I would happily backup my feedback will pull requests,\n. Ahh - I had missed the createConnection function. A couple minor changes to my code and I'm up and running again. Which is good.\nGiven you've already got the original feature request (auto-reconnect) on the list, I'll close this one.\n. @mcollina this was discussed recently on the MQTT mailing list. A summary of the discussion was put on the wiki here.\nThe piece that is missing is how to specify the client-id in the uri. The only place for it is as a ?clientId= style parameter, which doesn't look elegant to me...\nAdmittedly this is all informal - I will bring it up on the OASIS list for discussion to see if we can get something added in time for the 3.1.1 doc.\n. Have raised an issue against 3.1.1 - https://tools.oasis-open.org/issues/browse/MQTT-203\n. Just to chip in, the 3.1.1 spec does not require a path of /mqtt - that was part of an earlier proposal, but it was decided that requiring a specific path would be far too restrictive - for example if you wanted to handle multiple websocket endpoints for different MQTT clients.\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718127\n. Well, that's a bit embarrassing - you'd think I'd know better.\nUpdates on their way shortly.\n. Tests added and Travis passing.\nHappy to chip in when I can, although node-red does keep me pretty busy.\n. Has anything been done to address the bug? Apologies for not following up with a pr by now, but this is a real issue.\n. What does mosca do if it receives a qos2 publish?\nI'd expect it to kill the connection rather than ignore it.. ",
    "Kenzku": "I tried to measure the message overhead comparing with other Pub/Sub protocols, by using your mqtt library. I want to use a client to subscript a topic, then publish an event with the same topic and the server should return the event back to the client. \nCan you link me to a version that will work please?\n. yes, I found out something new. Can the client run constantly? (Did you talk about the mosquitto tested server?)\n. I could not use a server over the Internet, otherwise the tests are not running on the same level. I think I will use your server instead.\n. @mcollina you are right, they are the same, so I said, \"Subscribe to the same topic\". \nAccording to the specifications, the remaining length:\n\"Represents the number of bytes remaining within the current message, including data in the variable header and the payload.\"\nThus, the remaining length corresponds to the payload length if there is no variable header.\nIn the above example, I sent 24 characters, then the remaining length is 31, where it holds the difference 7. The 7 should be the variable header, and according to the specification, you have topic as one of the variable headers, which length is 5 (test0), so I was wondering where the rest 2 goes? (I guess is the keep alive time, but not sure in the code)\nthe high-level API is e.g. the JSON representation of the MQTT message, and the low level packet format e.g., the one from the specifications.\n. @adamvr Sorry, what does that mean, please, sir?\njavascript\nclient.on('connect', function (packet) {\n    \"use strict\";\n    console.log('this is on connack: %j', packet);\n});\n. I modified a bit the client.js\njavascript\nif (rc === 0) {\n    this.emit('connect', packet);\n  } else if (rc > 0) {\n    this.emit('error', \n        new Error('Connection refused: ' + errors[rc]));\n  }\nso that I can get the parameter from the connect event, because I think the parameter will be helpful for the measurement of your code. \n. ",
    "TrevorPage": "Ah, excellent! I'll most certainly find that very useful for what I'm doing.\nI'll close this off in that case, but will certainly try to contribute anything I think may be useful down the line. \n. Thanks mcollina. I did notice that JavaScript source the other week, and I must admit I haven't yet taken the time to understand exactly how it is to be used, and I don't know what advantages that script offers over, say, using adamvr's library together with socket.io.\nI'm assuming that the Paho JavaScript WebSockets source you referenced is used at client-side, so I assume this means that the raw MQTT protocol is exchanged over the WebSocket and therefore much of the translation between MQTT and application events is done in client script as well. On the other hand by using adamvr's server-side client, I can keep all the MQTT specifics at the server side and just transfer my own application messages to the web page. Does that sound correct, or have I misunderstood the Paho JavaScript WebSockets library?\nApologies for this being the wrong place to discuss this. It's something I'm very interested in and will happily take the discussion to an appropriate mailing list or wherever you suggest.\n. ",
    "tennessine": "i use socket.io to support ie6-ie8 which do not support websocket.\n. there's a clean session option indicate that this session is clean\n. The code in the example is highly inefficient? \nHow to write a highly efficient broker. which broker writen with node can I refer to and how to persistence the message.\n. Thanks a lot\n. Look at the mqtt specification.\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html\n. I want to know how to write? Is that ok??\n. var mqtt = require('mqtt')\nclient = mqtt.createClient(1883, 'localhost', {\n    clientId: \"Musikar\",\n    keepalive: 60,\n    clean: false\n});\nclient.subscribe('hello/world');\nclient.on('message', function (topic, message) {\n    console.log(message);\n})\nclient.end();\n. var mqtt = require('mqtt');\nvar count = 1;\n(function connect() {\n```\nclient = mqtt.createClient(1883, '192.168.2.24', {\n    keepalive: Math.floor(140 + Math.random()*40)\n});\nclient.on('connect', function() {\n    console.log(count++);\n    connect();\n});\nclient.on('disconnect', function(){\n    console.log(client.clientId, 'disconnect');\n});\n```\n})();\n. Agree~ up!\n. client.subscribe('hello', { qos: 1 });\nclient.publish('hello', 'hello world');\n. client.on('publish', function (packet) {\n    console.log(packet.payload); // that's it\n    console.log(\"PUBLISH(%s): %j\", client.id, packet);\n    for (var k in self.clients) {\n        self.clients[k].publish({ topic: packet.topic, payload: packet.payload });\n    }\n});\n. Delete mosquitto db file and restart it. mosquitto will store subscriptions if you connect with a clientid and set clean session flag to false.\n. Thanks. ",
    "carlhoerberg": ":thumbsup: like the simplicity (no configuration, back-off algorithm etc.) \n. but default should be infinity, right? and if you can configure number of attempts i think you should be able to configure the time between attempts. \n. agree, the user should do the encoding/decoding\n. ",
    "RangerMauve": "Just for clarification: connections don't re-subscribe when they reconnect, right?\n. Interesting, thanks!\n. Is QoS 2 supported on the client, though?\n. Cool, thank you. \n. @VikramTiwari Yes. MQTT doesn't allow you to publish to topics with wildcards in them AFAIK.\nYou must publish to topics that match the wildcards.\n. @anhldbk What makes you say that this is related to the wildcards? Is there an error you're seeing that would suggest that? Because it just looks like your socket is disconnecting and reconnecting for no particular reason.\n. Are you logging any errors on the client side or on the broker itself?\n. Any progress on this?\n. Interesting proposition. I'll take a look at the source of the projects to see if it'd be something that I can undertake in my spare time.\n. If the default does become binary, make sure to be sending a buffer in the example in the README, because I can see that being very confusing.\n. Oh, sorry. I'm using node v0.10.28, npm says I have mqtt@0.3.1, and I'm on Windows 8.1\n. I'll install it and see if that helps fix the problem. Not sure why NPM didn't install it by default since I just set up the project today. \n. Using 0.3.10, I'm still getting the same error.\n. Yes, of course. Sorry for not responding sooner, I was afk for the weekend. I'll try to make a minimal example of it breaking in a gist\n. Might take a while. Stripping it down to what I thought was the core isn't causing any errors. :x\n. Hello, sorry for the delay, a bunch of stuff came up before I could work on this more.\nIn my use case, I was setting up a MQTT broker instance which would then try to relay publishes and subscribes on to another broker.\nI bound to the close and disconnect events and was calling incoming_client.stream,end() when that was emitted. I was using the mosquitto_pub command-line utility for making connections to my broker, and it seems that the server crashed after mosquitto_pub disconnected. The thing that's confusing me is that whatever was causing this should have emitted an error event rather than just crashed node. (Or should it?)\n. Here's a gist of what I've got for reproducing the problem. I think it might be line 30 which is causing problems because either disconnect or close are sending data to stream.end. I guess the whole time it was just me misusing function.bind and not MQTT.js at all. :P\n. MongoDB doesn't really facilitate passing messages between processes. It's used to store data.\n. Redis is a lot easier to set up in my opinion. Though you can get more customization with rabbitmq in the long run.\n. @mcollina Oh, I didn't know you could do that with MongoDB! Definitely going to have to look into it some more.\n. I'm not sure if that would be the best idea considering Writable already implements a end() method.\nTCP sockets define both end and destroy, the former of which takes additional data to send before closing.\n. I could see having a destroy() method inside Connection, but I don't know if it would work too well considering we can't be sure what library might be piping a stream into Connection. In this case we know how to close the socket for MQTT.js and Mows, but if a different library uses it it might lead to unexpected behavior.\nMaybe have connection.destroy() just call .end() on the incoming stream and allow for specific implementations to use something else?\nAlso, should the unit test have a server that just destroys a connection right away?\n. That's a good point, and I suppose that anyone that has an unexpected type of stream can just re-implement .destroy() if they want to. I'll try getting around to it later tonight.\n. The failed tests don't seem to be related to my changes, any chance of this getting merged?\n. Oh, I hadn't realized. It was working fine on my machine, but that's probably because I'm not using 0.8. Any hints as to why it might be breaking things? I've only added the one function.\n. Yeah, in your example, it would connect to test.mosca.io:3000. I'll take up the challenge.\n. Not really sure why this failed. Travis CI seems to just be saying\nError: shasum check failed for /home/travis/tmp/npm-2022/1423012627457-0.11922413692809641/tmp.tgz\n. Good point. I'll look into it further later tonight.\n. I'm running the tests now, and it's failing on MqttClient :: specifying nothing :: should connect because it's trying to connect to http://localhost:61017/ and I assume that it's because there is no MQTT broker set up on that port.\nAny idea on what I should do? Change the test?\n. @mcollina Ha ha, I just noticed you tried to tag me. It's ranger not roger :p\n. On some thought, it's really just an issue with the server and hacking around that is probably a bad idea.\nI'll raise an issue there instead.\nAlso, for forcing the connection to close, one can use client.stream.end() in case that's useful for anyone.\n. That example uses Redis as a means to pass messages between other brokers.\nBasically, you can create a server using the boilerplate that MQTT.js provides you, but that on its own is very limited.\nThe example you're talking about adds a feature that lets you run several instances of your server and synchronize messages between them.\nSo if you have a client publishing to server A, a client connected to server B can also receive that message.\nRedis is being used for its pub/sub feature\n. The only place that defines 30 seconds appears to be the connectTimeout option. It seems that the connackTimer is only being cleared inside #_handleConnack(). What must be happening is the following:\n1. Socket disconnects\n2. Reconnect timer starts\n3. New stream is created\n4. connackTimer is started\n5. Stream closes almost instantly\n6. 1-3 happen over and over until the first connackTimer is evaluated\n7. #_cleanUp is called and the timer for the next stream to be opened is cleared\n8. No more sockets are opened while the other connackTimers execute once their turn is reached\nThe fix seems pretty simple. Just make sure to clear the current connackTimer before setting a new one.\nI'll submit a PR in a bit\n. Honestly, I'm not really sure how I would approach making a unit test for something like this. Would just making sure that the previous connackTimer was changed upon making a new stream be sufficient?\n. Or should I add something in the reconnecting tests?\n. Of course. Lemme just get to a computer first. :P\n. REST APIs aren't good for push notifications. It'd be better to just have your MQTT client be client-side and have a custom broker with validation logic.\n. Alternately you might want to look into Server Sent Events\n. I think I fixed this via #296 Try upgrading to 1.3.0\n. I personally think that distributing the bundle with mqtt-elements would be a better alternative if you're planning on integrating them with bower anyways.\n. If the code to enable it isn't very long then I think it'd be a very good idea. Maybe make it so it supports the unprefixed version just in case it becomes standardized. If it takes a lot of code, then I would suggest just having a stream wrapper and using that as a separate library so that there isn't needless bloat.\n. Exporting UMD directly won't make sense since this library has a bunch of dependencies that are on NPM. It might be useful to have a bundled version in the releases, though.\n. If you take a look at the package.json, you'll notice that there are 11 dependencies. And I think it's safe to assume that most of them do not offer a UMD wrapper. As well, UMD is great when you have a self-contained module, but it's very crappy for dealing with external dependencies since there's a bunch of different ways to do it and they're all mostly incompatible. As well, this project only really works in the browser when browserified since it has configs specifically for that. Granted, as far as I recall, Webpack also supports the browser field.\nI totally see the point of having a bundle that's easily accessible to people since it wasn't entirely user friendly to build the bundle when I initially started playing with this client-side.\nAlso, I guess this was kinda brought up before.\n. @mcollina Were you thinking that the dist would just be on NPM, or on Github as well? Because if it was the former, the easiest route would be a prepublish script in the package.\n. You are correct that the client doesn't re-subscribe upon reconnecting, though I'm pretty sure this is by design. I usually wrap over the client with something that keeps track of subscriptions and re-subs on the connect event.\n. Are you waiting for the callback from subscribe to be executed before publishing?\n. @ralphtheninja Sadly the dev tools are kinda lacking and we didn't have time to go into this too much further after the downgrade fixed things. I'll see if I can get one later today.\n@mcollina This was in mobile safari on an iPad running iOS 7.1.2, didn't check to see if it had issues on other platforms, though it looked to be fine in Chrome on Windows.\n. Seems like it'd be an error in websocket-stream\n. @mcollina We're currently looking into this on my end, will update when we figure out what's wrong. So far it looks like onReady in websocket-stream isn't being invoked for some reason.\n. @mcollina Had to put this on hold for now because other stuff came up which was more urgent than supporting Edge. Will post here when we get back to it.\n. @mcollina I've got it happening on 10.2.6\n. I'm not using Mosca for this, so I'm assuming it's a client-side problem. Sadly, can't test the new browserify version just yet.\n. Personally, I like the simplicity of the connected attribute more than an isConnected method.\n. However, I don't really see myself using it much since it seems like reacting to events is a better way to go in the long run\n. I've been using Chrome with websockets just fine with Mosquitto and a custom JS broker built on top of MQTT.js.\n. What version are you currently on? I know that at least 1.7.4 is working for me at the moment.\n. Sorry, I confused myself. I only got TCP working with mosquitto.\n. Posting to get notifications. I've noticed that every now and then machines in the wild have trouble reconnecting until we reboot them, but haven't been able to get logs or reproduce it.\n. I'm looking into this now to see if I can figure out what's happening. By the looks of it, this would require createStream to have been called after close. Reading up on the code to see if I can find anything that would cause that.\n. So, looking at the code. It seems this might happen if MqttClient emits connect after .end() was called on it. So, this would require the stream to somehow send a connack packet after it has already emitted a close event. Not really sure how I could reproduce this manually.\n@WilliamHolmes What sort of connection was this? Was it TCP or WS? What was the broker that you were connected to? Did this happen after ending the connection manually?\n. Would you ever be calling .end(true) synchronously after .connect?\n. Well, the issue is related to calling .end() before the connect event occurs, as far as I can tell. Either your code needs to anticipate this, (maybe not calling .connect() if you already know it shouldn't be connected), or we need to figure out how to handle in in the library. And I'm guessing a PR for that would be welcome, though it seems to be a bit of an edge case.\n. I'm having a bit of an issue trying to figure out how to check that the protocol was being passed correctly to the websocket. By the looks of it, it should be accessible via client.stream.socket.protocol. But it seems like that only gets set by the server\n. Alternatively I'd need to somehow set up servers that expect 3.1 or 3.1.1 for the tests, and I think that's a bit outside the range of what I can do at the moment.\n. What should I do about the encrypted sockets? I have a test over here at the moment that works on non encrypted sockets properly\n. Well, currently I have the test in abstract_client, so it's getting executed for encrypted sockets as well. Is there a better place for me to put it?\n. Here's my attempt at the tests. It just checks to see that the protocol gets set, to the default, and to mqttv3.1 if 3.1 is used as you described in the issue.\n. HTTP isn't a valid protocol for MQTT. If you're in the browser you can only really use websockets. If you really want TCP you'd need to wrap over some sort of ionic specific plugin for TCP which you could pass into MQTT.js as a stream.\n. Doesn't bower require the code to be built into something other than CommonJS?\n. I've found this happens with Mosquitto. My solution was to abstract my MQTT interactions and keep track of subscriptions so that I wouldn't subscribe to something I was already subscribed to. Also, for automatically re-subscribing on reconnecting.\n. Did you use the callback in subscribe to make sure you didn't accidentally publish before your subscription was registered fully?\n. What I usually do for handling connect issues, is I wrap my connect call in a Promise which resolves or rejects based on whether connect or error got emitted first.\n. @anhldbk The relevant code looks like:\n```\nfunction connect(url) {\n    return new Promise(function (resolve, reject) {\n        var connection = mqtt.connect(\"ws:example.com\");\n    connection.once(\"connect\", on_connect);\n    connection.once(\"error\", on_error);\n\n    function on_connect() {\n        connection.removeListener(\"error\", on_error);\n        resolve(connection);\n    }\n\n    function on_error(err) {\n        connection.end();\n        reject(err);\n    }\n});\n\n}\n```\nYou might want to refactor it to take an instance of connection instead, so you can attach listeners earlier on.\n. @anhldbk I think he meant\n- When the actual socket connection (either plain TCP or Websocket, or whatever else) gets established\n- When the initial handshaking packets have been exchanged\n. React Native supports websockets which should seamlessly work with mqtt.js\n. Are you trying to use a TCP MQTT connection in React-Native? Because it should only work with WebSockets. And as @mcollina said, your build should be respecting the \"browser\" field in package.json for this to work properly.\n. Try compiling ./lib/connect/index.js instead. That's the entry point that Browserify uses.\n. Also, have it ignore the \"fs\", \"tls\", and \"net\". This is all specified in the browser field of the package.json. Browserify should be doing this automagically, but I guess you'll need to fiddle with React Native or Webpack or whatever it is that you're using.\n. Where are you running your webpack command from? Is it from within the mqtt folder with the source code for the client? If not, then you might want to make a small JS file which just contains\nmodule.exports = require(\"mqtt/lib/connect/index.js);\nand build that instead.\n. So, how are you then consuming the bundle you're creating from the rest of your code?\nIdeally, your app's React Native code should just be calling require(\"mqtt\"), and the React Native build tools should automatically require and bundle it for you.\n. Try to import from mqtt/lib/connect/index.js\n. You don't need to compile the client with webpack if you're importing it from within your react-native project. Do you think you could post the commands you're running to build your project, as well as a snippit of the code you're using importing / using the module?\nAlso, I think the issue is that React-Native is missing a bunch of Node standard modules. You can install pure JS versions from NPM. For instance to fix your current error you could use npm install -s events which would install the events module\n. I think it's minor. I doubt many people would have used the \"offline\" event in a way where it needs to be called each time a reconnection is attempted.\n. Can we see what's around line 203 in iot_device_test.js?\n. This seems to be something that should be addressed in the ws module. https://github.com/websockets/ws\n. Hi, I haven't progressed on this on my side because I got sidetracked. You should try to browserify the MQTT.js bundle and import that instead of the module and see if that works.. @ralphtheninja If you choose to have a default protocol, make sure to take into account whether you're in the browser, as well.\n. Are there any errors being thrown in the console?\n. An easy solution would be to use the rimraf and mkdirp modules as dev dependencies.. What broker are you using? It might be related to that since this library doesn't do anything special to subscription topics.. @leontastic Are you getting an error in the callback passed to .subscribe?. If possible, link back here if you find a solution so that others can follow your steps if they face this issue.. I suppose the simplest API would be to return promises in cases where a callback was omitted, as is done in most other libraries.. @yan-foto That's more or less exactly what I have in some code that I have in the wild. However, rather than using \".on()\", I use \".once()\", and I remove the other listener once it's ready.. Though I don't think that a promise is necessarily the right return from \"connect\". \"connect\" and \"error\" can be emitted multiple times, and you might want to cancel the connection. Using the existing event handlers on the connection seems like a better approach for most use cases. Promises would be useful for replacing non-event callbacks, like the result of a \"publish\".. AsyncIterator support would be amazing. I've been really into it ever since I found it a few months ago. Would the client itself be async iterable and it would yield message events?. @yan-foto That's reasonable. I think something like connectAsPromise, as @mcollina proposed, would be a good approach. That way it'll be totally backwards compatible while serving peopel that need the use case. Not sure about the name, though. :P. Alternately, would it make sense to maybe have an AsyncMqttClient which is returned by connectAsync which will have all the methods named the same, but have them be async?. @mcollina a new project that has this one as a dependency would make sense.\n@jdiamond I tend to agree here. My use case was so that I could abort my connection process if the authentication failed when initializing. I would wager that that isn't the only way to do it, but promises are like a hammer, in that everything looks like a nail.\nPerhaps @yan-foto 's use case could be effected by a new method on a client which takes a callback for checking if the current connection succeeds or fails, then the promise version of the mqtt library will yield a promise instead of taking a callback.\nOn a side note, if we don't supply a callback for a method call now, the error gets sent to the \"error\" event, right? This would get in the way of reusing existing methof names, since you can't tell if a promise got any error subscribers or not. Personally,  I don't like libraries having different method names for promise yielding methods, so I'm kind of leaning towards having a separate type of client, be it another library or added to this one.. @mcollina Thanks! I've been really busy with work/life balance stuff lately, but I'll see if I can whip something over a few hours this week. I'm thinking I'll copy over the unit tests and docs over from this repo and use it as a dependency.\n@jdiamond Yeah, I totally agree with your points. I'm thinking that I'll limit the initial version to just methods that take callbacks directly like publish and leave the events and connect as is.. Can't create repos in the org, but here's an initial sketch of what I was thinking.\nTo summarize: it's a pass through for all the existing MQTT client methods, with the exception that publish, subscribe, unsubscribe, and end now return promises by supplying the callback argument automatically.\nI haven't tested if it works yet, but I doubt the overall design is going to change much unless somebody has suggestions. I'll implement the AsyncIterator stuff after I've got the other stuff to work.. Sorry for the lack of progress! Haven't been doing as much open source the past while.:'( \nI've created asyn-mqtt and will hopefully copy over the tests later and see if it works.\nIf so, I'll publish on NPM.\nAnybody else want access to the NPM package for publishing?. Hey! Sorry for the radio silence. I'm just finishing up the unit tests now and I'm going to publish afterwards. Do you have any suggestions for tests to check that errors are properly being propagated?. Published 1.0.0 and added @mcollina as owner. https://www.npmjs.com/package/async-mqtt. @mcollina Yup!. @yan-foto We do! It's right here. It'd be easier to just create a new client instance, tbh.\nHowever you could hack around that by modifying client.options at runtime, though this is unsupported so don't complain if something you hack on top of it breaks. \ud83d\ude1b . @cordovapolymer You can try to modify the options property directly on an instance of an mqtt client.\njavascript\nvar client = mqtt.connect(something);\nclient.options.something = \"something else\";. This might just be a problem with using qos 1, if you use it to subscribe to a topic the broker guarantees that you'll receive it \"at least once\". That means you can have duplicates. You should use qos 2 which has a guarantee of receiving it only once.. With MQTT in the wild, I haven't ever needed to extend it directly, favoring composition over inheritance when adding new capabilities. I would vote for not exposing the private variables for simplicity. (for autocomplete, for example). @willshulstad AFAIK MQTT.js does persistence via a store. If that isn't working for your use case, you could implement a custom store that integrates with your application.. Oh jeeze. It appears I had an outdated version of MQTT.js installed. What an obvious mistake on my part. \ud83d\ude2d \nI'll update it and close this once I see it working. I somehow messed up my project entirely while updating, but this should be fine.. \ud83d\udc4c Hopefully people find this useful. \ud83d\ude04 . I'm getting this exact pattern on iOS when people are on their data plan. I've reverted to 1.4.1 which fixed the looping issue and I'm gonna see which version broke things and hopefully track the details down.. Upgrading from 2.4.0 to 2.8.2 made the issue worse. With 2.4.0 we were only seeing this happen when the app was in the background for a while, but with 2.8.2 it happens after the first time we connect. Sadly we can't debug the problem with breakpoints because connecting the debugger makes the problem go away.. So far we're only seeing this happening on iOS when users are on a mobile network. I'm not yet sure if it's entirely the client-side that's causing trouble, or if it's related to our broker misbehaving.\nMy goal is to track down which release caused the problem to manifest and do a PR with a fix. :D. Seems that a change in 2.0.0 effected the issue. Gonna dig around in the code tomorrow.. @marleau Sorry for the lack of follow up! Sadly I didn't find the issue and we ended up downgrading our version of mqtt.js for that project. 1.14.1 is what we're using actively right now and it's working fine for all use cases.. I'm going to be working on React-Native support within the next two weeks, I had an initial attempt that let me compile the module successfully, but it resulted in runtime errors. I'll post here when I have progress.. @franleplant Thanks for the offer! Here's the PR I did to get the ball rolling and discussion around it: https://github.com/nodejs/readable-stream/pull/258\nThe original problem was that readable-stream was trying to require the stream module which was causing RN's bundler to freak out because it didn't see that module anywhere in its dependency graph (since it's a node thing).\nI added a fix to explicitly exclude the stream module for RN, but now the issue is that excluding it still returns an empty object, which will cause util.inherits to freak out.\nMy idea (when I get around it it, or somebody else does), is to add a check so that if Stream is required properly, we should add a check to see if it actually has some stream-related property defined before using it.\nSomething like \njavascript\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n  // This is the addiition\n  if(!Stream.on) Stream =  require('events').EventEmitter;\n})();. You can try modifying the file in your node_modules folder to see if it works and if there's other issues that pop up.. Well, I'm going to get it to work by the end of April for sure since it's relevant to my day job. We've just been focusing on a react-native-web version first, so I hadn't gotten around it to it yet. :P. That error is kind of weird. It shouldn't be requiring that file and instead should be getting stream.js in websocket-stream directly. What OS are you developing on?\nAlso, are you using the latest version of MQTT.js?\nAlso, what version of React-Native are you using for bundling?. Are you 100% sure that the error is within that file and not in here? Can you post a stack trace?. What version of MQTT.js and websocket-stream are you seeing in your package.json?\nThat file shouldn't even be imported because websocket stream specifies a browser field in it's package.json which should prevent it from loading server.js and instead only load stream.js.\nIt could be that either websocket-stream or packager are out of date if that alias isn't being effected.\nEdit: Not package.json, node_modules folder. Hmm, sadly I don't have time today since I've gotta work on other stuff, but as I said, I'll be getting to it in about a week.\nIn the meantime, there's definitely something fishy happening with the packager not respecting the browser field. Maybe also look into updating your react-native version of the project to something a little newer.\nAFAIK even though the CLI is installed globally, the scripts defined in your project for npm run start should be using the local version of the CLI in node_modules. When I was mucking about with the packager for a different reason, I had to modify it in my project rather than globally. I may be wrong, though, depending on how you're running your project.. @alexleonescalera Good find! You should open an issue in their repo so that somebody looks into it. :D. @PCaponetti I have it working with MQTT.js 2.4.0 and websocket-stream ^3.3.3. Not sure why. :P. @irfanka @mc\nI'm using the following modules and making sure they are imported before anything else:\n - global\n - buffer add import {Buffer} from \"buffer\"; global.Buffer = Buffer;\n- process add import process from \"process\"; global.process = process;\nIn addition, I'm using\n - MQTT.js@1.14.1 (had some issues with reconnecting with 2.4.0\n - websocket-stream@^3.3.3\n - readable-stream@2.2.3\n - stream@0.0.2\nI don't remember how we got to this combination, but we just kept fiddling with things until it worked. Haven't had time to investigate using the latest MQTT.js, but this could be a good starting point.\nIn addition, we listen on AppState.addEventListener(\"change\", etc...) and invoke mqttClient._checkPing() if the state is active in order to force the connection to attempt to reconnect when the app comes into focus because the JS timers don't work while it's in the background.. @behrad Yes, it's been up and running for a few months now without too many issues.\nWe found that when the app goes in the background the timers for the keepalive don't run, so we force Android to attempt to reconnect when it regains focus.\nOther than that it's working perfectly.. Yes. You will have it complaining about some node specific global variables being missing. Make a new file that defines global.process, global.Buffer and global.self. make sure to import this file before anything else. . @rclai Thanks for the update! I'll add a doc somewhere once we have the steps figured out. It's been months since we set it up so I was probably missing some things. \ud83d\udce6 \nI always use the URL method of connecting in our app.\nAlso, please note that I've only got the websocket version of MQTT working since React-Native is basically a browser environment and doesn't provide Node's TCP stack.. I'm not sure, actually. Maybe @mcollina Has more insight on what's happening there.\nMaybe it has to do with you using the object form of mqtt.connect instead of passing in a string URL.. I think that might just be something that needs to be done for this to work. Getting stuff that was made for node or for the browser to work in React-Native is a bit of a dark art at the moment. \ud83d\ude05 . Try following the steps I had in https://github.com/mqttjs/MQTT.js/issues/573#issuecomment-355039873. @tomzaku I usually have a separate file, bootstrap.js, which I have all my weird global-adding code. Then I make sure that it's the first file that gets imported in index.js.\nThe way import works is different then require because all of your dependencies are loaded and executed before your current file gets to execute. That's why all your bootstrapping code should be in a different file that's guaranteed to be the first one to be imported.. This is what my bootstrap.js looks like:\n```javascript\nimport global from \"global\";\nimport {\n    Buffer\n} from \"buffer\";\nimport process from \"process\";\nglobal.Buffer = Buffer;\nglobal.process = process;\nif(!global.self)\n    global.self = global;\n``. @angelos3lex I haven't used a non-websocket broker with this technique yet, so I can't say for sure, but you might be able to get it to work by using the [react-native-tcp](https://github.com/PeelTechnologies/react-native-tcp) library and aliasingnettoreact-native-tcp` to have mqtt.js use it when it loads.\nLet me know if you get it to work or have any trouble setting it up.. @vanesp In your mosquitto_sub command, you're only subscribing on the el topic, if you have slashes after el then it won't be matched by that pattern. If you want all topics starting with el, subscribe on el/#\ni.e. mosquitto_sub -d -t el/#. Alternately you may want to subscribe on # so you can see all events. No worries! Happens to everyone. :P. @boneskull If this is an async-mqtt problem could you raise an issue there?. @CVarisco could I get a copy of your webpack config to see what might be causing issues?. @flodonsky When bugs are fixed in modules, it's common practice to update your version in order to get the fix. You don't need to manually go into package.json since npm install will fetch the latest version of the dependency with the bug fix.\nAs for the relationship to readable-stream, it's the only module for using Node streams outside of the node core, and anybody trying to use streams has no choice but to depend on it at some point.. @clem91 If you're using trusted certificates on your server, all you need to do is use mqtts as the protocol in your connections.\ne.g.\njavascript\nvar client = mqtt.connect(\"mqtts://localhost:420\");. @clem91 You might have a configuration error, because the default port for TLS in MQTT is 8883 according to the connection code. Cool, glad you're sorted out! Hope this library proves useful for whatever you're doing!. That sounds pretty awful. This seems like it was introduced with the automatic resubscribe feature that was added a while ago. Would it make sense to de-dupe the subscription packets? Or would the issue be somewhere else?. Would a quick way forward be to make the auto-resubscribe be optional and configurable through the config object? We could set that up initially and then look into doing a more thorough fix for this issue.. Sadly, I'll be busy for the next week or so, but if anybody wants to do a PR, here's what we'll need:\n\nA new config option, maybe call it autoResubscribe or something similar, have it be true by default so that we're fully backwards compatible\nModify the code here to check that configuration before trying to subscribe again\nAdd a unit test here to make sure the new option is being used. This library passes subscriptions as is to the broker without doing any additional processing on them, it's up to the broker to support wildcards. Would you mind posting a code sample so we can debug what's wrong?. The problem is here: this.topicActionMap[actionMap[action]] = action;\n\nWhat you're doing is making topicActionMap look like\njavascript\n{\n\"log/#\": \"LOG_RECEIVED\"\n}\nWhen you get MQTT events coming in from the broker, you'll get log/gw1 and log/gw2, neither of which equal log/#, so when you use topicActionMap[\"log/gw1\"] you will get undefined.\nYou should use a library for matching MQTT patterns like mqtt-pattern. Glad I could help! \ud83d\ude04 . Maybe have both in-memory (for callbacks) and in the store for persistence?. > let the Store to choose between memory/file system/...\nSure, but you can't store callbacks in a file system. Callbakcs have to be stored in memory. Disregard what I said, then. \ud83d\ude04 . Seems to be related to NativeScript not supporting the browser attribute in the package.json.\nChange your code to use require(\"mqtt/lib/connect\") instead. There's a good change that NativeScript won't support this library, though since we require either a Node.js or a Browser environment.. I think the first step will be to modify mqtt-packet to be able to support the new message types.. You should consider feeding your MQTT events into a different message queue that supports round-robin balancing like RabbitMQ, then have a bunch of Node worker processes consuming from that queue.. @amanthegreatone You should look into the concept of \"work queues\" or \"task queues\".\nThe idea is that you have a central broker that receives all events, and then one or more workers that connect to the broker. Instead of all workers getting all events, the broker will spread the events across the workers so that the load is balanced between them.\nWhat you can do in this case is feed all your MQTT events into a RabbitMQ broker without processing them, then have workers connect to RabbitMQ to have the load spread between them.\nHere's a tutorial from their docs which might help get you started.\nEven though I suggested RabbitMQ, there are loads of alternatives that might suite your use-case or environment better. Zero MQ is one alternative.\nTo spin up multiple workers easily, take a look at the cluster module, and various libraries out there for simplifying its use.\nThe problem with using MQTT for handling huge numbers of messages, is it's not made for having tonnes of messages on a single topic that a single consumer uses.\nA better approach is to have different topic patterns and having different consumers set up per-pattern.\nThere may be work out there on using MQTT brokers with load balancing, but from what I recall there's nothing in the actual spec that would facilitate this.. @ffamar Does your broker support keepalive messages? I had this issue in the past in a custom broker that wasn't properly setting up listeners to kill the connection if the keepalive failed.. Could you please specify what issues you're having with the integration? Are you getting build errors? If so could you please post a stack trace. Also, knowing the version of MQTT.js and SystemJS that you're using would help us debug.. Are there any logs visible from your build server?. Adding 'mqtt': 'npm:mqtt to the map object and see if that helps.\nIs the process you're running to build the bundle outputting any errors or warnings?. Not sure what I can do without additional logs. If you could try to find a way to get logs from systemJS on why it's unable to import mqtt even with the changes to the config, that would help me get you to the next step. Maybe look up a guide for using systemjs with npm modules. If anything you could try following this guide to build the mqtt.js library into a single bundle that you can import in your app. You should append a random number to the ID so that different tabs won't collide.\nHaving a unique clientIID per connection is part of the MQTT spec so you don't have much choice here.. I guess we should be waiting for the disconnect event before calling the callback as well,.. @boneskull connect is emitted when we get the MQTT packet for connack, since it requires a network trip it'll be guaranteed to be async.. Yeah, if connect() in the tests is connecting to a local server, then it should be async. Don't see any way for a debugger to make it sync. We have a whole bunch of listeners for connect in the constructor, maybe they're interfering with each other or with the connect listener you've added in the beforeEach? Not sure if that makes sense, though.\nCould you describe again what the problem you're seeing is? Does it time out or throw an error? Or was it that it's auto-reconnecting?. Could you please show the code you're using to invoke mqtt.connect()?. Could you also please provide a stack trace for the error?. This looks like a bug with readable-stream and your build environment. Could you post your webpack config? Also, are you sure it's actually using the version of readable-stream that you specified? Check your node_modules to see if mqtt/node_modules has its own readable-stream.. If you're deploying this to the web, you can't use the mqtt:// protocol, you need to have your MQTT broker configured to use websockets, and then you can use the ws:// protocol. Does that seem relevant?. @mcollina should be well versed on both. Sorry, but I think that's about all I can do with my current knowledge. :(\nCheck that your config supports the browser field for aliasing files. Well, readable-stream was originally geared for use with browserify, and the introduced a new field in the package.json called browser which browserify would use to alias files before they got compiled for the web. \nIf the browser field isn't being respected by webpack by default, you should add the aliases defined in readable-stream manually. You should look into resolve.aliasFields to see if that can be configured to use the browser field. That's really strange. I'm out of ideas at this point. Sorry!. Browsers cannot make TCP connections. You must use websockets if you want to use MQTT from a browser.. Try using async-mqtt and awaiting the promise returned from client.publish. @edog1973 Are you sure your broker is up / supports websockets?. What does your message look like?. How do you know for sure that the request doesn't leave the client?. @Qtianv587 The browser version of MQTT.js uses the built-in Websocket implementation, which means it uses the Browser's TLS support.\nBrowsers don't provide any APIs to developers that allow custom certificate chains, you have no choice but to use certificates that are signed by an authority that's trusted by the browser.\nIf getting a valid certificate is a problem, I would advise using Letsencrypt. I'm honestly not sure. Could you post some code so that I can see in detail?. I'm not sure you need to use wsConnect here, maybe you can get away with using fetch to make a request to the website first, but if opening a websocket connection is enough to prompt you to add the certificate, I think it makes sense.\nHowever, I must warn you that self-signed browser certificates are vulnerable to man-in-the-middle attacks, so you should not trust them if you're planning on using any public wifi, or if you can't trust your Internet Service Provider (most of the time you shouldn't). @goliatone Would you be interested in contributing a pull request that fixes this and adds a test case?. Could you add a new test? Maybe create a fake stream as the connection and emit an invalid packet?. Inside _setupStream we listen on various events and send a connect packet down the socket.\nAfter the connection is verified, we receive a connack packet and emit the connect event on the client.\nCould you show a minimal code sample of the connect not being emitted? Make sure to listen on the error event so you can catch any errors happening during connection.. Glad I could help! :D. It does support Cordova. You'll need to use a tool like browserify to compile it to run in the Cordova environment.. You could define a getter on the options object which returns different credentials every time. \ud83d\ude02 . Hi ivands. I'd suggest synchronously returning a stream, then piping your websocket into it once your promise resolves. \nSomething like this:\n\nCreate two PassThrough streams, one for input, and one for output\nCreate a duplex stream using the two passthrough streams. I'm sure there's something on NPM for this\nCreate a promise to get credentials. Once it resolves, create the websocket stream, pipe the input into it, and pipe it into the output.\nReturn the duplex stream synchronously\n\nThat way you can have your actual stream get created asynchronously, without needing to change anything in the library.\nOtherwise, if you want to add asynchronous support, it'll require changing _setupStream in the Client implementation to handle promises (or preferably node-style callbacks). I think a PR which adds unit tests and is backwards compatible would be welcome in that case.. @reejinbouk Try the mqtts protocol instead in your URL. Just to confirm, when you reconnect to the internet, you keep looping?\nWhat's your reconnect interval?. Does your MQTT server have more information in it's logs? It looks like you're connecting successfully, but the broker is throwing an error when subscribing. Maybe the broker can give more information on why the subscribes are a \"client error\". What does your code look like? Do you have error listeners everywhere?\nSadly when a broker has an error they send a pretty opaque status code and break the connection. \"CLIENT_ERROR\" is the best we can do because that's all the server can provide us with.\nI think MQTT v5 is working towards improving that, but I don't think there's much out there that supports v5 yet.. I think I get what you want.\nWhen we setup a new stream, we don't relay the \"error\" events to the MQTT client, we just relay the \"close\" event.\nI think a PR that changes this line to instead pass the \"error\" event on to the client would be welcome.\nThat way you can get actual errors for when this happens to help diagnose problems.. Glad you figured it out, I'll keep that in mind next time somebody has issues with subscriptions. :P\nWould you mind if I closed this issue for now?. Could you provide more details like the version of MQTT.js you're using?\nAre you seeing anything in your console?\nIs this using remote debugging or are you running it from within the app?\nHave you followed the thread in #573?\n. Try using version 1.14.1 like I said in my post. That's why I have running in prod right now. Haven't had time to investigate why the newer versions weren't working.. Also, I'd suggest trying a local mosquitto broker or something that you can access server logs for more easily.. Cool, glad to see you're making progress!. I haven't seen that before, actually.\nCould you post a code snippet of how you're connecting?. Please note that the browser version only supports the websocket version of MQTT, make sure your broker supports websockets and that you're using the correct port for websockets.\nYou also need to set the protocol to ws\n. Which version of MQTT.js are you using?\nYou're sure that 8083 is the correct port to use?\nThe error message you posted implies that the webserver you're trying to connect to isn't listening on WS. I'm not sure. Are you able to inspect what URLs other libraries are using to connect to the broker? Maybe it's the trailing / that's causing a problem.. I think this is something we'll need the EMQ authors to weigh in on.. @tartavull Try the steps described here. What you want is to add a router over top of your MQTT client.\nI'd suggest using my mqtt-emitter library to wrap over your client.\nCreate an MQTT client instance and an MQTTEmitter instance.\nRelay events from the MQTT client to the MQTTEmitter\njavascript\nclient.on(\"message\", function(topic, data){\n  emitter.emit(topic, data);\n});\nThen you'll want to listen on new listeners in the MQTTEmitter and subscribe on MQTT topics\njavascript\nemitter.onadd = function (topic) {\n  client.subscribe(\"topic\");\n}\nemitter.onremove = function (topic) {\n  client.unsubscribe(\"topic\");\n}\nNext you'll be able to just add listeners on the emitter and it'll automatically subscribe and unsubscribe them on the MQTT client.\nemitter.on(\"/house/livingroom/device1\", function(payload) {\n  console.log(\"Wow!\");\n});\nemitter.on(\"/house/bedroom/device2\", function(payload) {\n  console.log(\"Cool!\");\n});\nYou can even do fancy things by using mqtt-regex patterns.. Nothing so far, I don't think anyone has looked into it in detail. If you have time, you could help by running a node process and using the new inspector feature to take memory snapshots to find where the leak is happening.. @svogl Which version of node are you using to test this?. Weird, there's nothing obvious that would cause this to happen. If you have time, do you think you could use the memory snapshot feature of the node inspector to see what exactly is being stored in memory?\nAs far as I can see, it should be garbage collectable once the function exits.\nAnother thing you could try is setting node ---max-old-space-size=666 where 666 is the memory limit in MB before it starts garbage collecting more aggressively.. Have you tried setting the --max-old-space-size flag? It might be that the garbage collector isn't kicking in because it doesn't think it's reached a high enough limit.. This really seems like an issue with node internals rather than something MQTT.js has control over.\nThe reason I say this is the newAsyncId call in one of your screenshots that's a node internal.\nIs this reproducible if you generate some junk data and process it within process.nextTick calls?. In your example, is mqttClient.subscribe the same as self.client.subscribe?\nWhat version of MQTT.js are you using?\nAre you making sure to wait for the connect to happen before trying to subscribe?. Also, which broker are you using?. The client should be automatically reconnecting, manually invoking reconnect may be messing stuff up.\nIs your broker giving you logs for why it's closing? Maybe that can give us a clue as to what's happening.\nAre you sure your client is authorized to subscribe to those topics?. I'm not sure to be honest. I think that's something you'll need to ask the authors of the broker.. Awesome, glad you figured it out! I'll try suggesting this earlier next time someone has a problem. :P. You need to make sure both of them have succesfully subscribed before trying to publish.\nYou'll need to modify your code to look something like\n```javascript\nfunction notifyResponse(clientName, client, topic, initiate=false) {\n  var first = initiate;\nreturn function(connack) {\n    console.log(clientName + \": notification: connack.sessionPresent = \" + connack.sessionPresent);\n    client.subscribe(topic, function(err){\n      if(err) return console.error(err);\n      console.log(clientName + \": subscribed to topic: \" + topic);\n      if (first) {\n        const msg = 'Hello from ' + clientName;\n        console.log(clientName + ': initiating first publish: ' + msg)\n        client.publish(topic, msg);\n        first = false;\n      }\n    });\n  }\n}\n``. I don't think we can get this module to work with the TCP version of MQTT due to React-Native not supporting thenet` module that we need for node.js. \nYou might be able to mess around with aliasing to alias net as react-native-tcp.\nYou'll want to modify the package.json in mqtt.js.\nAdd a new field called react-native which is the same as the browser field, but with \"./mqtt.js\" pointing to \"./mqtt.js\" and aliases for the other three modules (net, tls, fs) pointing to react-native equivalents.\nYou might also want to consider using nodejs-mobile-react-native which will allow you to just use the raw node.js version of this library without having to shim it to work with RN. The only caveat is you'll need to coordinate between RN and Node.js with events, which shouldn't be too hard.. Do you have logs from your second broker that might indicate why the client is disconnecting?. Sadly the MQTT protocol doesn't give any readable logs when things go wrong, so errors are better tracked  in the broker's logs.\nCan you show us the code you're using for publishing the messages?. Could you post more of the code to do with cleintThing? It's hard to analyze what's happening with just that. Do you have any errors that pop up when it disconnects? Can you show us the code you have that detects that the client has disconnected?. Glad you figured it out! Any idea what the problem was in the end?. Hi, are you talking about the client-side? The messages you're receiving are from the broker, not a client.\nThe MQTT protocol doesn't allow for a clientID within messages. If you need to tag messages with an origin, either put that in the topic string or as part of the message contents.. You could put validation rules within your broker if it supports it.\nWith your setup I would strongly suggest putting the client ID in the MQTT topic and using authentication.\nE.g.\nCreate a user called example1 whose client ID is example1 and is allowed to publish to client/example1/some/data\nCreate a user called example2 whose client ID is example2 and is allowed to subscribe on client/+/some/data\nNow when the client receives messages, you know that the second item in the path is the client ID of the publisher, and you know nobody else is allowed to publish there.\nYou can pair that with having an mqtt-emitter client side so you don't have to manually parse MQTT messages in the message callback.\nThis will mean more effort when setting up new accounts, but if you have programmatic access to the broker, it probably won't be too hard.. Ideally it should be replaced by the asap module that handles environment differences gracefully.. Why can't you import a browserified version of mqtt.js? What did you use to create the browserify bundle?\nThis sounds more like an angular-cli problem than an mqtt.js problem.. Sorry to hear you got screwed over so hard! Do post any updates if you find a clever workaround!. Wouldn't it be better to have node-shims included in the build? Would this be defining the process global that's needed by the code?. Yeah, it's pretty finicky stuff. That's why I stick to browserify a lot these days.. Speaking of which, if you're in a rush and having trouble, you could turn mqtt.js into a browserified bundle and import that in your angular app.. It might be related to your MQTT URL being messed up. the protocol needs to have a // in it like mqtt://.. Which callback are you taking about? Did you figure out what you needed?. Would you be able to submit a PR and unit tests that fix this?. Duplicate of https://github.com/mqttjs/MQTT.js/issues/651\nPlease continue discussions there.. @muka I totally get that your post had more substance, but there's already an issue about v5 support. It would be better to keep everything in one place instead of having people jump through many issues to keep up to date.\nThere's absolutely nothing wrong with using existing issues to make progress on a problem. Creating many new ones, however, just makes it harder to find information.\nI think you could just copy paste your OP into the existing issue and have the benefit of everyone subscribed to that issue getting notified of your post.. There's no easy way to do what you want because the way the functionality works is it processes the packets one at a time from storage without really inspecting the packet types or topics.\nYou might be able to add some custom logic by modifying the library around here.. In your code are you checking for CommState.OFFLINE, or CommState.CONNECTED? AFAIK the reconnect event goes out right after the conenction closes, so I doubt you'd be in the OFFLINE state for long.\nOther than that it all looks good to me. You may want to play around with the reconnectPeriod time if you're expecting your device to be offline for a long time.. Checking for this._commState!== CommState.CONNECTED sounds like a good approach, I've used similar logic in some of my code.\nYeah, reconnectPeriod is the time between retries, it should save you some CPU cycles.\nIt should retry forever, if it doesn't raise an issue. :P. The problem is your build system isn't using the \"browser\" field.\nThe library was initially made to work with browserify which uses the browser field to select files that should be used whe compiling to a browser target (or RN).\nPlease look in the other issues for details on building for RN. #573 . The \"build system\" in your case is webpack. I'll need you to do a bit of reading up on webpack and babel before I can explain more. Sadly the thing you're trying to do is a bit complicated. (universal apps that use node.js modules in RN). @amerllica The mqtt.js file is used in the CLI and isn't supposed to be loaded as part of the library. The shebang there is standard Linux/Node.js syntax that specifies what executable should be used to run the file.\nNode.js command line applications specify this so that they can be set as \"executable\" in linux and can be run like a compiled program.\nIn Node.js, ashebang on the first line is ignored.. If you open the DevTools in the browser, do you see any errors in the console?\nAlso, if you inspect the Network tab and look at the Websocket connection, do you see a packet for the data?. Would you mind telling us which broker you were using so we know for next time?. The MQTT protocol expects you to have your own routing set up for topics.\nI don't think it'd be a good idea to add non-standard features to the client.\nThe subscriptions don't exist as data structures on the client-side, it's made to be tracked by the broker and it'd be hard to make all brokers adopt your idea.\nI suggest using something like mqtt-pattern to do routing client-side which should make life a lot easier.. This looks good to me! I'll wait for someone else to sign off so we can release a new version. Thank you!. Hi, MQTT.js is made to handle connecting to MQTT brokers and subscribing.\nIf you want to \"route\" events to certain listeners, consider using something like this: https://github.com/RangerMauve/mqtt-emitter. I could see this changing assumptions made in existing codebases. +1 to it being semver-major.. Hi, I would suggest looking at some of the existing issues related to weapp to see if there are any examples there.. Hi, are you sure that Amazon MQ supports websockets on that port?. Glad you figured it out. \ud83d\ude00. @SyMind Fair enough. :)\n@mcollina Do you think we could include this in the next release? I don't think I have publish rights for MQTT.js. ",
    "tanpinsiang": "I also run into this problem, maybe provide an option for the user to get binary payloads.\n. ",
    "hudgins": "I see, makes sense.  Turns out I habitually send stringified JSON when not sending binary, and apparently JSON.parse() can handle a Buffer containing a string.\n. ",
    "wolfeidau": "So is there an example or test using an encoding other than utf8? I am trying to send binary messages.\nBasically want to try out msgpack.\nCheers\n. OK\nI found it.\njavascript\n    client = mqtt.createClient({encoding: 'binary'});\nIf you like I will update the readme and add a test.\n. I just started using this library in anger and came looking for an answer for reconnects, and it has already been done.\nLook forward to trying this out!\nCheers\n. Yeah I would encourage you to consider moving to something like.\n``` javascript\nvar mqtt = require('mqtt')\n// either mqtt:// or tcp://\nclient = mqtt.connect('mqtt://guest:guest@localhost');\n```\nWith an options argument available to support extra params for things like TLS related params.\n``` javascript\nvar mqtt = require('mqtt')\nvar options = {\n  rejectUnauthorized : true, \n};\n// either mqtts:// or ssl:// \nclient = mqtt.connect('mqtts://guest:guest@localhost', options);\n```\nThis would avoid breaking the existing code while offering a nice clean interface for connecting using a URI.\n. Yeah no problem will sort them out.\nCheers\n. I have updated it to support the clientId query param, added some information for the call to the API docs in the wiki and tweaked the README.md.\n. Yeah I tried copying the existing reconnect test a couple of times but it is very confusing what is connecting with what servers.\nI will have another shot tonight.\nThanks for reminder!\n. Heya mate\nMy testing says no this branch doesn't fix the issue.\nSo the challenge with testing this is you need to:\n- setup the secure client and attempt to connect\n- wait for more than one reconnect period\n- start the secure server\nResult is error is tripped in the first connect attempt and never tries again..\nAnother way to test it is:\n- start the server\n- connect the client\n- stop the server for at least 2 reconnect periods\n- start the server\nResult is the same as above, first reconnect fails with an error and then never tries again.\nUsing anything from the existing test suite is pretty hard, if you have any ideas on things that could make this easier I am all ears :)\nAs you can imagine if your using this for IoT service on a device out on the internet this is a pretty common situation.\n. That one tests out fine.\nHappily retrying till it finds a server, then connects fine.\n. ",
    "samirnaik": "Just saw that the test cases aren't passing for node 0.8.  Working ok on node 0.10.  Will take a look. \n. Just looked at #113, I like your streamBuilder solution better :).  Also\ncleans up the reconnect code.\nOn Tue, Jul 2, 2013 at 2:13 PM, Matteo Collina notifications@github.comwrote:\n\nCool!! I planned to do it for Mosca https://github.com/mcollina/mosca,\nbut I always postponed :(.\nLook, I am implementing most of the same thing you've done with setStreamby passing a\nstreamBuilder function: #113https://github.com/adamvr/MQTT.js/issues/113.\n@adamvr https://github.com/adamvr which approach do you prefer? I\nprefer not exposing the state and keep the state internally in the\nConnection.\nI think we might want to do a 0.3.0 release with this one and #113https://github.com/adamvr/MQTT.js/issues/113\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/pull/114#issuecomment-20376728\n.\n. Yep looks good. Everything with the secure server/client is running as\nexpected, thanks for the merge!\n\nOn Sat, Jul 20, 2013 at 4:14 PM, Matteo Collina notifications@github.comwrote:\n\n@samirnaik https://github.com/samirnaik, could you please verify all\nthe changes I made to update your branch were correct? The tests pass, but\nanother eye might spot something,\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/adamvr/MQTT.js/pull/118#issuecomment-21302150\n.\n. This is fixed in v0.3.0-dev.  Take a look at this commit for details:  https://github.com/adamvr/MQTT.js/commit/0ae33d91130d74c9a9759e2b80a894be6e3c2697\n. \n",
    "mtolczak": "Issue seems to be valid for me.\n. Issue closed as problem was on my side (= receiving client was not supporting payload over 128 bytes) \n. ",
    "andreareginato": "@mtolczak, were you using the Arduino client? How did you solve this issue? I'm asking you because right now I'm trying to figure it out on how to make long payload messages work with Arduino and MQTT.js. Thanks a lot\n. Yes @mcollina, I was using node v0.8.8. With the newer 0.10.18 everything works fine. But now I get two new error messages.\nOn startup, when running the node app with Mosca.\n[Error: Module version mismatch. Expected 11, got 1.]\n00:51:08 web.1  | { [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\n00:51:08 web.1  | { [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' }\nWhen reconnecting from Arduino opening the Serial Monitor\n{\"name\":\"mosca\",\"hostname\":\"reggie\",\"pid\":58702,\"client\":\"99721000001\",\"level\":40,\"err\":{\"message\":\"read ECONNRESET\",\"name\":\"Error\",\"stack\":\"Error: read ECONNRESET\\n    at errnoException (net.js:901:11)\\n    at TCP.onread (net.js:556:19)\",\"code\":\"ECONNRESET\"},\"msg\":\"read ECONNRESET\",\"time\":\"2013-09-05T22:55:14.333Z\",\"v\":0}\nEverything keep on running, but I wanted to ask if you know what those errors are about.\nThanks a lot.\n. Thanks a lot. The recompiling phase solved the first notification. For the second, it's fine with the log of what's happening. I close the issue.\n. ",
    "ralight": "test.mosquitto.org is fine, don't worry about it. It expires clean session clients that haven't disconnected for a week. I'm mostly just concerned about getting all client implementations implement the random id behaviour sensibly.\n. If you've compiled mosquitto yourself, modify websockets.c to change lws_set_log_level(0, NULL); to lws_set_log_level(255, NULL); and you'll get lots of websockets logging to stderr (so you'd have to run the broker in a way you can capture stderr). Thanks for the reminder - I need to make this configurable and usable.\nMosquitto expects websockets connections to declare themselves as \"mqtt\" (as per the v3.1.1 spec) or \"mqttv3.1\" (from before the v3.1.1 spec was introduced). If MQTT.js isn't doing that, it would certainly fail - but then none of the examples in the MQTT.js documentation would work either.\n. /* we didn't find a protocol he wanted? */\nif (!hit) {\n    if (lws_hdr_simple_ptr(wsi, WSI_TOKEN_PROTOCOL) == NULL) {\n        /*\n        * some clients only have one protocol and\n        * do not sent the protocol list header...\n        * allow it and match to protocol 0\n        */\n        lwsl_info(\"defaulting to prot 0 handler\\n\");\n        wsi->protocol = &context->protocols[0];\n    } else {\n        lwsl_err(\"No protocol from list \\\"%s\\\" supported\\n\", protocol_list);\n        goto bail_nuke_ah;\n    }\n}\nRelevant code from libwebsockets above suggests that MQTT.js isn't sending a subprotocol, so LWS is defaulting to protocol 0 - which is http only.\n. Yup, test.mosquitto.org:8080 ( I think!)\nOn Feb 13, 2015 6:42 PM, \"Matteo Collina\" notifications@github.com wrote:\n\nMy bad, I think I did not port the the mqtt subprotocol thing when I\nmerged this with mows. I will add it asap. Thanks for helping debugging it\n@ralight https://github.com/ralight.\nIs mosquitto v1.4 with websocket running somewhere on the cloud, so I can\ntest that easily?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/251#issuecomment-74303919.\n. @mcollina - it supports both \"mqtt\" and \"mqttv3.1\" already. The example on http://test.mosquitto.org/sys/ uses mqttv3.1.\n. @mcollina It works for me just fine on Chrome and Firefox. The websockets mqtt[v3.1] handler doesn't pay any heed to paths so it wouldn't return a 404. Only the http handler returns 404s.\n. \n",
    "timoxley": "+10 looks great to me. can't wait\n. A big +1 from me for all of the above.\n. Would #121 come back perhaps in a later version?\n. ooh, this looks good, will try it out tomorrow \n. ",
    "pyhrus": "I will make the necessary changes and resubmit the pull request\n. I have cached them in the proxyBuffer property\n. ",
    "ZiCog": "Thank you for that. Those examples in v.0.3.0 are working well. I will be hamming on the dev version(s) in the coming weeks.  \nI don't want to raise issues unnecessarily so I'll put a couple of questions here.\n1) It's a bit disturbing to see the secure client and server using the same certs and private keys. This does not seem to set a good example.\n2) When using TLS sockets I have clients and servers that can accept CA certificates. I use my own root CA certificate and a CA hierarchy that can be used to authenticate the server to the client and vice versa if I like. I'm not interested in buying certs, home grown is good for me. In fact I generate my certs using a modified version of the makecerts script in the node.js TLS tests.  \nI see no way to get a CA hierarchy into MQTT.js to achieve similar authentication.\n3) On a related note. To use a client against test.mosquitto.org with certificate based SSL/TLS encryption we need to be able to use their certificate authority file.\nIs this an intentional omission and if so how can I piggy back MQTT.js onto a regular TLS stream?\n. ",
    "paultanner": "Yes ths.  I submitted a PR which seems to have been applied.\n. ",
    "anjz": "Sorry, there was a mistake. My fix need this ca parameter instead of consider it optional, so when ca array is not supplied it fails. I will fix this and I will add a test.\n. Yes, tomorrow I will add a unit test and a example.\n. Thank you! A timer per connection should work.\n. ",
    "oren": "weird, i still see nothing in the console (for both of the examples).\n. not using any broker.\nI just followed the readme: npm install mqtt and node node simple-both.js\n. yup, works! thank you\n. ",
    "tobyjaffey": "@adamvr @mcollina Long term, an option-object would be better, but, I guess it will break the API.\nMy change adds an optional parameter on the end, so should have no effect on existing code.\n. Sorry @mcollina, I'm not likely to get round to it for a while (until a customer shouts for it). Feel free to take over.\n. ",
    "mantoni": "No, not that I've run into any real issues. Just thought it's not a great idea if two consecutive messages have the same ID.\nWill change to random initial ID tonight. Thanks.\n. ",
    "daiwei": "@mcollina thanks!  :)\n. ",
    "keithamus": "It's not so much a case of buggy brokers not replying to PINGRESPs as it is the client code missing the ability to close connections after not receiving a PINGRESP. I've written a  reduced test-case:\nServer.js\njavascript\n'use strict';\nrequire('mqtt').createServer(function (client) {\n    client.on('connect',    function () {\n        console.log.apply(console, ['connect'].concat([].slice.call(arguments)));\n        client.connack({ returnCode: 0 });\n    });\n    client.on('publish',    console.log.bind(console, 'publish'));\n    client.on('subscribe',  console.log.bind(console, 'subscribe'));\n    client.on('pingreq',    console.log.bind(console, 'pingreq'));\n    client.on('disconnect', console.log.bind(console, 'disconnect'));\n    client.on('close',      console.log.bind(console, 'close'));\n    client.on('pubrel',     console.log.bind(console, 'pubrel'));\n}).listen(1883);\nconsole.log('Server started on 1883');\nClient.js\njavascript\n'use strict';\nvar client = require('mqtt').createClient(1883, 'localhost', { keepalive: 1 });\nclient.on('connect', console.log.bind(console, 'connect'));\nclient.on('close', console.log.bind(console, 'close'));\nclient.on('message', console.log.bind(console, 'message'));\nAs you can see I've set the keepalive to 1 (which as far as I can read in the code means it PINGREQs every 600ms). The server does not explicitly send PINGRESPs, but the client remains connected when it should disconnect and reconnect every time it sends a PINGREQ without receiving a PINGRESP since the last PINGREQ.\nI'll work on a PR now.\n. I was trying to see how reliable my client/server implementation (which uses this library) would be under failure, such as the server dropping out - so I simulated the conditions by making the server not respond to commands after the initial connection, and noticed the PINGREQs being sent but the client not attempting to reconnect.\n. I hate to say it but the tests are not consistently passing on my machine on origin/master or on my build, however they do pass. I think there might be some race conditions inside the test suite\nTravis will pass if you re-run it on this branch, I believe.\n. Build is passing now (I didn't change any code, I just amended the commit and force pushed until the build went green)\n. ",
    "endymion00": "@mcollina  thanks for answering.\nRegarding point 1, using the bombing script  I've observed that based on seeing the network tray icon on my Windows. When there is no internet connection but the wifi is connected to the router an exclamation sign is shown and that is the moment I saw that the bombing script started to publish (because publish is inside connect event)\nBut as you said, I agree it is not a good script to test connect/disconnect events.\nJust wanted to figure out what should I do in order to handle errors but couldn't capture them. \nIf I want to ensure the publisher does not lost any message when it can't connect what is the best way to do it?\nThank you in advance.\n. Ciao Matteo,\nI'm using Mosquitto broker.\nI made several tests, but all where based on examles from Ascoltatori and MQTT.js.\nFor publishing I used a code like this:\nMQTT.js publisher\n```\nvar mqtt = require('mqtt')\nvar connectionOptions = {\nprotocolId: 'MQIsdp',\nprotocolVersion: 3,\nkeepalive: 1000,\nusername: null,\npassword: null\n\n}\nfunction getPublisherOptions(qos, retain) {\nreturn {\n    qos: qos || 0,\n    retain: retain || false\n};\n\n}\nvar port = 8080;\nvar ip = 'MY_SERVER_IP';\nconsole.log('PUBLISHER');\nclient = mqtt.createClient(port, ip, connectionOptions);\nclient.publish('hello/x/world', 'Hello mqttxx3', getPublisherOptions(1, true), function(){\n    console.error('PUBLISH CALLBACK); \n});\n```\nAscoltatori subscriber:\n```\nvar ip = 'MY_SERVER_IP';\nvar port = 8080;\nconsole.log(' Ascoltatori SUBSCRIBER');\nvar ascoltatori = require('ascoltatori');\nsettings = {\n  type: 'mqtt',\n  json: false,\n  mqtt: require('mqtt'),\n  host: ip,\n  port: port\n};\nascoltatori.build(settings, function (ascoltatore) {\nascoltatore.subscribe(\"hello/+/world\", function() {\n       console.log(arguments); \n  });\n});\n```\nMQTT.js subscriber:\n```\nvar mqtt = require('mqtt')\nvar ip = 'MY_SERVER_IP';\nvar port = 8080;\nconsole.log(' MQTT SUBSCRIBER');\nconnectionOptions = {\n    protocolId: 'MQIsdp',\n    protocolVersion: 3,\n    keepalive: 10,\n    username: null,\n    password: null\n}\nclient = mqtt.createClient(port, ip, connectionOptions);\nclient.subscribe(['hello/+/world']);\nclient.on('message', function(topic, message, packet) {\n    console.log(\"Received message %s with topic %s\", message, topic);\n    console.log('Packet', packet);\n});\n```\n. By the way, on more question related to this: if there is an error getting the message (i.e: connection error) how can I capture the 'error' event?\n. @ldstein: thank you for your help.\n@mcollina:\nIf I'm not wrong when the createClient is called the connection is stablished but I think it would be interesting to create a \"publisher\" that only connected when publish were called.\nI meant:\n1. connect\n2. publish\n3. disconnect\nAnd it should have a callback for success/fail control.\nIn the first scenario (connected on client creation) maybe what you said is convenient however in the second scenario an error control would be required on publish.\n. Ok, I see...\nIn that case a publish error control is necessary because if a long-running\nclient is created and the only operation that is used is \"publish\" then it\nis necessary to catch all delivery errors in order to handle them by\nstoring the messages in a database for trying to deliver them late,\nlogging, etc.\n. ",
    "ldstein": "On a similar note, if the keepalive times out and MqttClient.prototype._cleanUp is run, there doesn't appear to be any sort of recovery / reconnect attempt.\njs\n/**\n * _cleanUp - clean up on connection end\n * @api private\n */\nMqttClient.prototype._cleanUp = function() {\n  this.conn.disconnect();\n  this.stream.end();\n  if (this.pingTimer !== null) {\n    clearInterval(this.pingTimer);\n    this.pingTimer = null;\n  }\n};\ndisconnect or close events are not emitted, so no real way to tell the connection has been killed. A timeout event could also be useful.\n. Hi Matteo, my colleague @elliottye has been looking into this issue. We've both become much more familiar with the MQTT spec over the past few days :)\nShould have a pull request for your consideration shortly.\n. In lib/client.js, error events on the stream object are suppressed:\njs\n  // Suppress connection errors\n  this.stream.on('error', nop);\nIn your main application, you could add an 'error' event handlers to the Mqtt stream event:\njs\nvar client = mqtt.createClient(...);\nclient.stream.on('error', handleError);\n@Matteo, @adamvr :\nWould a 'stream-error' event would be useful than nop to handle this scenario?\njs\n  // Emit connection errors\n  this.stream.on('error', this.emit.bind(this, 'stream-error'));\n. That's a pretty open-ended question and a lot will depend on your Project's requirements, intention and infrastructure.\nHowever, it's pretty straight forward to do some simulated load testing using Malaria (https://github.com/remakeelectric/mqtt-malaria). You can use it to test any MQTT broker.\n. ",
    "haio": "Thank you for the response.Yet I met another problem with Mosca,I have 2 process, one running a Mosca broker, one running a subscriber with MQTT.js, let's say this issue: publish a message and i can sub it , but after i restart the broker, i can't sub new published message except restart the subscriber too.This issue won't happen in the MQTT.js server.\nThanks.\n. I use mqtt.createServer discribe here, and the default client, it should be clean client. BTW, after listen the 'connect' event and resub the topic, my probelm get solved.\n. QoS 2 might not necessary for me now, I use Mosca as broker, how can I use QoS 2 if it is really needed , thanks. \n. Btw, if a clean client with QoS: 1 disconnect, how could it get the missing message when it get reconnected. For now only unclean client can do that.\n. Got it! Thanks.\n. ",
    "csrgxtu": "i am wonder that weather MQTTJS supports the clean session functionality, sure it use clean session by default, but sometimes I want to use unclean session.\n. ",
    "elliottye": "Just want to let you know that the test failure was due to the fault of testing logic that created a data race for state of the reconnectTimer between the close event handler and _setupStream(). Now the logic has been wrapped into the fire-and-forget close event handler.\n. ",
    "kriskep": "https://github.com/kriskep/MQTT.js/commit/d7a87a0f4f67a0327d9cb15ee37c3e47e9c9f487 seems to fix it.\nNot sure it is valid as I am very new to this project.\n. I digged a bit further and the problem is the following:\n1. ping response fails and a close event is generated. Socket.end() is called. reconnect timer is started. (reconnectPeriod)\n2. after reconnectPeriod, reconnection attempt is made\n3. a close event is generated for the socket.end() in 1. reconnectTimer is started again\n4. network connection is restored\n5. reconnection succeeds and connect is sent\n6. reconnectTimer from step 3 expires, and a new reconnection attempt is made(!)\n7. mosquitto detects 2 connections for the same clientId and closes one of them\netc ....\n. https://github.com/kriskep/MQTT.js/commit/2e662a87cb6465dbdc55b01145a1f70c1bcc09fe fixes this problem\n. ",
    "iangregory": "Apologies, I missed the fact that the retained flag was exposed as part of the packet.\n. ",
    "yangpu": "My bad, I just run 1 hour. I will close this issue after runing two days, thanks.\n. My node.js version is 0.10.9, and mosquitto(http://mosquitto.org/) is my message broker.\nThe memory is keep bellow 80 M in the test case, so that I will close this issue. Thanks for your suggest and the instructive link.\n. No, the bug is still existing.\n. I have tried several times after check out the branch, but the issue is still there.\n. great, it works now!\n. ",
    "noppermann": "+1\n. node v0.10.21 on Windows x64.\nThe CA certificate is actually not invalid, just not matching the CA of the certificate presented by the server.\nWhen I use the same options with tls.connect(...) it returns\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: SELF_SIGNED_CERT_IN_CHAIN\nWhen I use \"rejectUnauthorized : false\" mqtt.js returns the same error, but then connects anyhow as expected:\nConnection not authorized: SELF_SIGNED_CERT_IN_CHAIN\nConnected\n. ",
    "mrose17": "this is kind of embarrassing to admit\u2026 i've never really figured out how to do the node test harness stuff\u2026 all i can tell you is that i've been using the code 24x7 for the last two months (-; sorry!\n. sorry, it's still broken. the issue is that opts.keyPath/opts.certPath are logically separate from opts.ca -- keyPath and certPath deal with the client authenticating itself, whilst ca deals with the certification authorities to be used when the server authenticates itself. so the logic needs to look like this:\nif (opts.keyPath && opts.certPath) {\n      tls_opts.key = fs.readFileSync(opts.keyPath);\n      tls_opts.cert = fs.readFileSync(opts.certPath);\n    }\n    tls_opts.ca = [];\n    if (opts.ca) {\n        for (var i = 0;i<opts.ca.length;i++) {\n            tls_opts.ca[i] = fs.readFileSync(opts.ca[i]);\n        }\n    }\n    tls_opts.rejectUnauthorized = opts.rejectUnauthorized || false;\n. oops, my bad! ok, i'm running with it now and don't see any issues. i'll keep running with it locally. if there's an issue, i'll report back\u2026 otherwise, let's call this one closed. thanks!\n. ",
    "raajeshk88": "This is my client\nclient = mqtt.createClient(PORT,MQTT_SERVER, { encoding : 'binary', username : MQTT_USERNAME, password : MQTT_PASSWORD, clientId : 'backend'});\nclient.subscribe(TOPIC);\nclient.on('message',function(topic,message){\nconsole.log(message);\n}):\nFor my broker ,\n /usr/sbin/mosquitto -d -c /etc/mosquitto/mosquitto.conf\nMy mosquitto.conf file is\npid_file /var/run/mosquitto.pid\npersistence true\npersistence_location /var/lib/mosquitto/\nlog_dest file /var/log/mosquitto/mosquitto.log\ninclude_dir /etc/mosquitto/conf.d (this file holds my broker username/passwd).\nSo, whenever there is a message published I log it. But i when restart my broker, my client program continues to run but there is not output in the console.If i restart my client program then everything fine again. I hope this helps you to understand my issue. Please let me know if you need anything else. Thanks\n. oh this is interesting... so every time the client will try to reconnect but the subscribe has to be triggered manually. but how long will the reconnection attempt ? if it is not successful\n. ",
    "illbilly": "I have this same issue.  My publishers will reconnect but my subscribers do not!\nI'm using mosca as the MQTT broker\n. @mcollina @adamvr Looks like I was able to fix this issue by adding my subscriptions inside the \"connect\" event.  In other words, it appears my subscriptions are lost on disconnect from client.\njavascript\n        client.on('connect',function(packet){\n        client.subscribe('mytopic');\n    });\nIs that how it is suppose to work?\n. AHHH never mind, a bit more digging and I see what I'm looking for is the CLOSE event!  Sorry for creating an issue.\n. ",
    "jdiamond": "I'm not so sure about logging everything before connect to replay on reconnect for these reasons:\n- it's possible to publish before connect--why replay those?\n- it's possible to subscribe after connect-- why not replay those?\nIf MQTT.js tracked what topics (and their QoS levels) get subscribed to, it could automatically resubscribe regardless of whether the subscription happened before or after connecting.\nSince it's possible to unsubscribe at any time, MQTT.js should probably update its list of active subscriptions after an unsubscribe to avoid resubscribing to those topics.\nIf sessionPresent is set in the connack packet, MQTT.js should only replay the QoS 0 subscriptions. Otherwise, it should resubscribe to all topics?\nDoes this sound right?\n. Haven't had much time to finish this, but I have made progress here:\nhttps://github.com/jdiamond/MQTT.js/tree/resubscribe-on-reconnect\nIt's not done, but I'll submit a PR as soon as I'm able.\n. At QoS 1, I wouldn't consider a message received until it's safely in my database.\nI was imagining something like this for the API:\nclient.subscribe('topic', {\n    qos: 1,\n    receive: function(topic, message, packet, callback) {\n        // puback/pubrec not sent until callback invoked with no error\n    }\n}, function(err, granted) {\n    // subscription acked\n});\nThe message event could still get emitted like normal, but that would be after receive and its callback are invoked. Users that use receive probably wouldn't also use message for the same topic.\nThe default value for receive would just immediately invoke callback with no error which then sends the puback/pubrec and emits the message event.\n. That API is assuming you could restrict sending messages to receive for just the topic that was subscribed to. I think that would be more useful than the existing message event which forces me to implement that dispatch logic myself or use multiple clients (and, therefore, connections) to avoid having to do that.\n. I thought that's what you were suggesting using MQEmitter for?\nWe've pretty much already decided to use AMQP for this since it can provide both the QoS guarantee and abstraction we're looking for so I probably won't be able to submit a PR. =(\n. I read a bit on qlobber and it looks nice. I also found the mqtt-router project which does routing, but it doesn't use qlobber. But routing is a separate issue.\nSo if you want to keep the routing out of MQTT.js, it seems like the messageHandler property on the client is an OK way to go. Do you think using it would look like this?\nclient.messageHandler = function(topic, message, packet, callback) {\n    // callback() sends puback/pubrec\n};\nI suppose users who want to control the ack would hook that instead of listening for the message event. And they could do whatever kind of routing they want in there.\n. I tried reproducing this using the public HiveMQ test broker with the following script:\n```\n!/usr/bin/env node\nvar mqtt = require('mqtt');\nvar client = mqtt.connect('mqtt://broker.hivemq.com');\nclient.on('connect', function() {\n    var count = 0;\n(function publish() {\n    client.publish('foo', 'bar', { qos: 2 }, function(err) {\n        if (err) {\n            console.log(err);\n            process.exit(1);\n        }\n\n        count++;\n\n        if (count % 100 === 0) {\n            console.log('published %d messages', count);\n        }\n\n        publish();\n    });\n})();\n\n});\n```\nIt published 1000 messages without errors before I stopped it.\nThis broker seems verrry slow. I imagine it's either throttled because it's only for testing or it's overloaded because it's public and being abused.\nIf this is still an issue for you and you have more information to help us reproduce it, feel free to reopen.\n. I had to skip the style checks because I'm at work on a Windows box and they weren't working there. I'll fix the style errors found by Travis when I'm home on my Mac.\n. Travis is passing now.\nI think the problem on Windows has something to do with cmd.exe not expanding wildcards the way Unix-based shells do. So it's looking for a file literally named \"lib/*\" and can't find it. Might be an easy fix, but I also have no objection to using standard if switching to that would be better.\nI am very interested in the performance improvements. CPU utilization on the servers using MQTT.js is very high. We are load balancing to them to allow us to scale, but it would be nice if they struggled less.\nI just read CONTRIBUTING.md and will not force push anymore. I'm used to doing that on my personal branches to submit clean PRs (but never master), but I can not do it for this project.\nOn the v2 PR, I don't have any experience with Browserify so can't help there. A big change like switching to standard seems like it should come after the open PRs are merged to avoid conflicts?\n. Does the topic start with a $? You don't receive notifications for those topics when subscribing to #.. @yan-foto The connect method and the connect event work together in a way that doesn't make them compatible with promises.\nThe connect method tells the client to connect and reconnect as necessary. The connect event gets emitted every time the client connects/reconnects to the broker. That event is needed by \"clean\" clients to resubscribe to topics they want messages for.\nMQTT.js is implemented to queue messages while offline (including before the first connect event is emitted) so it's not normally necessary to wait for a connection to be made before using the client.\nI use promises in my apps with MQTT.js, but have never needed to wrap connect with a promise. As @RangerMauve said, I have wrapped publish, though, since that's a method that actually accepts a callback argument (unlike connect) and is, therefore, easily convertible to a method that returns a promise.. @yan-foto I thought the same thing when I first started using MQTT.js, but then I learnd that you do not need to wait for the connection to be made before using the client to publish messages. Just call connect and start publishing! It's even listed as a feature in the README.\nThe MQTT protocol itself specifically allows clients to send a connect packet and then immediately start sending publish packets without waiting for a connack packet from the server. MQTT.js goes the extra mile and allows you to publish before even the connection is even opened.\nIf you really want to wait, you can client.once('connect', onFirstConnection) as @RangerMauve noted. Would a new method really add much value over that? IMO, the first connection is not special enough to justify this because of all the things that could go wrong during publishing that require you to wait for your second, third, etc, connections.\nI'm a huge fan of promises and use them in all my apps, but I've painfully learned that it's better to let the MQTT.js client (with a persistent outgoingStore if I can't tolerate losing messages) manage all the complexity around reconnecting and republishing so that I don't have to deal with it in my apps.\nNot to discourage @RangerMauve from working on a promisified wrapper. I don't even know what an AsyncIterator is, but it sounds cool so I'm interested to see what it can do. \ud83d\ude03 . Thanks for this!\nYou don't think it should automatically disconnect when the handleMessage callback receives an error?. @mcollina: I think you see MQTT.js as the \"receiver\" in the spec. To me, MQTT.js is just a library and my applications are the receivers and, therefore, should have the ability to decide when they accept ownership of a message.\nI agree with you that not sending a PUBACK violates the spec, but sending it without giving the application any say feels too presumptuous to me. Should it at least be able to end the connection instead of sending a PUBACK?\nI think overriding handleMessage is an advanced use case that only experienced developers should be doing and we should document it with appropriate warnings that the connection should really be terminated if it can't call back without an error. But having it gives others the ability to experiment with use cases that might be different from the ones we have experience with.. Are those workers running in the same process--sharing the same _mqtt_client instance--or in separate processes?. This sounds normal to me. All clients subscribed to a topic receive a copy of messages published to that topic. The broker really has no idea which clients are related and form some sort of worker pool and that only one should get a copy.\nThe QoS is a separate agreement between each individual client and the broker. Setting it to 2 tells the broker not to send any duplicates to that client. Other clients will still receive their own copies and will have their own QoS levels set.\nFYI: The MQTT plugin for RabbitMQ doesn't even support QoS level 2 so you would need to be prepared to handle duplicates even if you only had one worker.\nIf you only want one worker to receive each message, MQTT is the wrong protocol. Use AMQP and consume from a queue.. IMO, the easiest way is to make the publisher put a unique ID in the message and then use that as a unique key in your database.. I think multiple subscribers receiving the same message within a few seconds will be very common (like all the time). MQTT is not designed to prevent that.\nCould you use AMQP for just this part? The rest of your system can continue to use MQTT where it makes sense. That's how I do it at work.. No, service workers can't open TCP sockets. Nor can Chrome extensions to my knowledge.\nThe instructions for installing MQTTBox say to install an external program. I suspect the extension is communicating with that to get around the browser limitations.\nIf you want to use MQTT from a \"normal\" browser-based app, you must tunnel MQTT over WebSockets so your broker will have to support that.. I use MQTT.js directly without Socket.IO in multiple apps. I don't remember having to workaround anything. My broker supports WebSockets and the URL I use in my apps start with \"wss:\". Everything just works.\nWhat broker are you using? How are you building your project? Webpack or Browserify?. There is no way for JavaScript running in browsers to open TCP sockets so \"normal\" MQTT is impossible in browser apps. To get around this limitation, MQTT.js uses MQTT over WebSockets instead when it detects it's running in a browser.\nSo what you're seeing is how MQTT.js is supposed to work in browser apps. If your broker doesn't support MQTT over WebSockets, you need to find another way to communicate with it.\nTo use test.mosquitto.org, you need to be explicit about the port since they run their WebSocket endpoints on non-standard ports. I would be explicit about the protocol, too, and use this URL: wss://test.mosquitto.org:8081\nHowever: the WebSocket endpoints on test.mosquitto.org have been broken for a few weeks now. I tried to bring attention to it in their IRC channel. We have no ability to fix it.\nDownloading and configuring mosquitto to use WebSockets and run on your local machine isn't too hard. You might want to consider doing that instead of relying on their public test broker. Even when it works, it's very slow. Not to mention insecure.. If vertx-mqtt-server implements MQTT according to the spec, there's no reason it shouldn't work.\nI use MQTT.js with RabbitMQ, Mosquitto, and a custom broker. Never encountered issues with MQTT.js specific to the broker.\nDo you have a server running? Install MQTT.js globally and use the mqtt sub and mqtt pub commands to test like this:\n```\nnpm i -g mqtt\nmqtt sub -h my.server.name.or.ip.address -t my/topic\nin another shell:\nmqtt pub -h my.server.name.or.ip.address -t my/topic -m \"my message\"\n```\nUse mqtt help to read about the other options if you need them (port, username, etc).\nIf it works with these commands, I feel confident it will work with your app using MQTT.js directly.. Polling?\nAre you sure your client didn't disconnect/reconnect during that period? MQTT.js does that automatically.\nYou're using a dynamic clientId and not setting clean: false so the broker definitely isn't saving messages for you while you're offline.\nOf course, the publisher needs to publish with qos: 1 and your client needs to subscribe to their topics with qos: 1 for that to work.\nIf I was confident my client was not disconnecting, I would expect to receive all the messages even without the above, but I can't rely on that. Clients always disconnect. When I care about not losing messages, I do all of the above.\nTo see if you're reconnecting, handle the connect event and log something. If you're not disconnecting and still losing messages, you'll probably have to share more code.. MQTT.js is a client library. It would be up to your broker to support checking a CRL. Assuming it does, you would set the cert and key options when connecting to it just like with any TLS connection, and the server would check your cert against its CRL. So as far as I'm aware, MQTT.js already supports everything it can to enable this. Hope this helps.. The aedes error you have says \"keep alive timeout\". That means your client disconnected without telling the server or is otherwise unable to send a PINGREQ packet before the server thinks the client is no longer present.\nBy default, MQTT.js sends a PINGREQ every 60 seconds. Did you disable it?. Below is an example that publishes 4 test messages in a row. It's not disconnecting for me. Can you modify it to demonstrate your issue?\n```\nconst mqtt = require('mqtt');\nconsole.log('connecting');\nconst client = mqtt.connect('mqtt://test.mosquitto.org');\nclient.on('connect', () => {\n  console.log('connected');\nclient.subscribe('test/1234');\nclient.publish('test/1234', '1');\n  client.publish('test/1234', '2');\n  client.publish('test/1234', '3');\n  client.publish('test/1234', '4');\nsetTimeout(() => {\n    console.log('disconnecting');\n    client.end();\n  }, 5000);\n});\nclient.on('message', (topic, message) => {\n  console.log(message.toString());\n});\nclient.on('offline', () => {\n  console.log('went offline');\n});\nclient.on('error', () => {\n  console.log('got error');\n});\nclient.on('close', () => {\n  console.log('connection closed');\n});\n``. Storage is the responsibility of the [Store](https://github.com/mqttjs/MQTT.js#mqttstore) objects you pass in tomqtt.connect(). The default implementation stores messages in memory which is not persistent. If you want persistence, you can use an alternateStoreimplementation, but you have to pass it in as theincomingStoreandoutgoingStore` options when you connect.\nI'm not actually sure what sets dup when re-publishing a packet. In all the years I've used MQTT, I've never checked dup to see if a message was re-published because I try very hard to write my subscribers so that they're idempotent. If your system should not process duplicate messages and checking for duplicates is expensive, you can choose to only do it when dup is true, avoiding the unnecessary check when it's false. I've never needed that, but it might be useful for you.. You don't have to wait until you establish a connection before you start publishing. MQTT.js queues up all messages you publish in your outgoing store until it actually connects and then it publishes them for you.\nYou got the persistent store working, so it may already behave the way you want. \ud83d\ude04 . QoS 1 and retained messages aren't really related the way your question seems to imply.\nQoS 1 subscriptions: The subscriber is saying \"I want the broker to save all messages published to these topics while I'm offline\". The publishers do NOT have to set retain: true. Not sure what the spec says about TTL, but I know Mosquitto and RabbitMQ have options for controlling this.\nRetained messages: A publisher is saying \"I want clients to immediately receive this message as soon as they subscribe without having to wait for me to republish it\". There's an implied limit of 1 retained message per topic.\nIME, I mostly publish and subscribe with QoS 1, but very rarely use retained messages.. I think @RangerMauve is correct. This is just the nature of MQTT. Further on in the spec, it says:\nIf the ClientId represents a Client already connected to the Server then the Server MUST disconnect the existing Client [MQTT-3.1.4-2].\nUnfortunately, MQTT doesn't define a way to tell the existing (older) client that it's being disconnected because a new client is using its ID--the connection just gets closed.\nYou should decide if you want a second tab to open a new MQTT connection or if you want to reuse the existing connection. If you want a new connection, you have no choice and must make the client ID unique. If you'd rather reuse the existing connection, you need to figure out how to share it between tabs (not sure how to do this).\nIn my browser-based MQTT apps, every tab gets a new connection, but I ensure they each have unique client ID. Authentication is done with usernames and short-lived access tokens in the password field so I don't really care what the client ID is.. I just tested and both 8080 and 8081 are broken on test.mosquitto.org.  When I use the same code to connect to my private broker (using wss: in my URL), it works as expected.. Based on your first post, I think you're trying to use MQTT.js in a browser app? That means you must use MQTT over WebSockets.\nAre you sure your broker supports WebSockets? Not all do. Seeing you put the port as 1883 in your first post makes me think you're confusing your broker's support for plain MQTT with support for MQTT over WebSockets.\nWhat broker are you using? Can you share your working Python code so we can see if it's really using MQTT over WebSockets?. Glad you figured out the issue. Hope it's easy to add WebSocket support to your broker or replace it.. The options you're passing to connect in your SO post are full of options that aren't supported by MQTT.js. See here: https://github.com/mqttjs/MQTT.js#mqttclientstreambuilder-options\nThe URL you're using starts with ws, but I'm pretty sure AWS only supports mqtts and wss. Since you're not in a browser, there's no need to use wss.\nIIRC, AWS requires clients to use certificates to authenticate. Your second example shows you trying to use one. I would verify I have the correct CA, cert, and key using openssl as AWS documents here: https://docs.aws.amazon.com/iot/latest/developerguide/diagnosing-connectivity-issues.html\nOnce I know my certificates are in order, then I would try using MQTT.js again. This time with the ca, cert, and key options.\nTo see errors, handle the error event. MQTT.js tries to recover from errors by automatically reconnecting, but I think you should at least see socket-level errors (which is what I assume is happening since you're trying to use a port that AWS' broker doesn't support).. ",
    "psorowka": "phew... let's have a chat about that somewhere.. this sounds like a lot automagic. if we really touch this, I'd have a lot more suggestions, some of which would be... \n- add explicit option for auto-reconnect / auto-restore-subscriptions so users know what they do\n- add subscriptions not via a subscribe function but rather provide some configuration like ensureSubscriptions and probably attach subscription-wise message handler callbacks at the same place.\n- provide more callbacks / promises instead of event emitters (more natural program flow)\n- .....\n. while reading through that again: all of this should probably not go into mqttjs. but we could create something like a convenience-wrapper-library with all the automagic (comfort-mqtt.js) and let the original mqtt.js stick more closely to the specs\n. we are working on similar stuff internally (also e.g. SRV lookups for connecting) and most probably make in OpenSource anyway.. I can well imagine contributing this to mqtt.js. But it will take some more time...\n. Build looks good. But check-style seems to require a lot of work... When I fix the .eslintrc I receive 203 errors and 22 warnings. mostly indentation\n. I could reduce the errors to 60 by configuration, mainly the SwitchCase Option in indent and the Markers in spaced-comment . Remaining errors are mostly from space-comment (from things like: function (/*error*/) and indentation from var declaration. \n\"no-underscore-dangle\": [\n-      0,\n-      false\n+      0\n     ],\n     \"yoda\": [\n       1,\n@@ -23,7 +22,8 @@\n     ],\n     \"indent\": [\n       2,\n-      2\n+      2, \n+      {\"SwitchCase\": 1}\n     ],\n     \"brace-style\": [\n       2,\n@@ -43,7 +43,7 @@\n     \"no-nested-ternary\": 2,\n     \"no-undefined\": 2,\n     \"radix\": 2,\n-    \"space-after-function-name\": [\n+    \"space-before-function-paren\": [\n       1,\n       \"always\"\n     ],\n@@ -52,12 +52,17 @@\n       \"always\"\n     ],\n     \"space-before-blocks\": 2,\n-    \"spaced-line-comment\": [\n+    \"spaced-comment\": [\n       2,\n       \"always\",\n       {\n         \"exceptions\": [\n           \"-\"\n+        ],\n+        \"markers\": [\n+          \"eslint\", \n+          \"jshint\",\n+          \"global\"\n         ]\n. :+1: \n. looks good from my side. go for it. ponte is the next candidate for iojsv3 :)\n. :+1: can you leave me a note when you have published to npm?\n. ahh sorry just realized there is #345 already in the pipeline. I'll close this and try to push that one forward\n. Hi @scarry1992 thanks for the great effort!\nI have a question regarding your design choices. I understand that most of the publish property fields (like contentType) are application knowledge and thus must be specified by the outer application when calling publish.\nHowever I believe the topicAlias feature falls into a different category as it basically is a compression feature that requires some special handling for managing and resolving the alias<->topic map. I think this burden should not be put onto the application but it would be convenient if mqttjs would manage the topic alias mapping auto-magically under the hood.\nCurrently - if I didn't miss anything in your implementation - I understand that the application must give the topicAlias as a parameter to publish and also in the on('message') handler the application must handle cases when topic or topicAlias or both is set and resolve aliases to topics accordingly. Is that correct?\nOther question: could you state whether your implementation implements the full set of MQTT5 features or is there anything still to do?. I am also thinking about other convenience features that could reflect some MQTT5 ideas in the client API, e.g.:\n\nautomatically set the payloadFormatIndicator flag depending on if the payload parameter is of type String or other\nprovide additional events that represent specific subscriptions (subscription_id feature) <-- or is that a bad idea from a performance perspective, @mcollina ?\n\nmight be more.. but that's just for now.. @scarry1992 what are the arguments towards leaving the alias logic to the user?\nMy strong opinion is that such kind of communication logic is what a user expects to be handled by a well tested client library instead of heaving to implement that manually in each application.. @scarry1992 as for the PUBACK. As far as I understand, that does not mean that a PUBACK packet should be triggered manually, it's still always the direct response to a PUBLISH packet. As the usual way to receive messages is the event listener, I think it's not possible to set a response from the callback. The only way I can think of would be to offer the ability to add an \"interceptor\" function that's called before the message event is triggered and may set a reason code.\nOn the other hand I am really wondering if it's really the intention of the spec to have the client set other reason codes than 0x00 or 0x80.. what should the broker do with the responses.... Vernemq is already almost completely supporting everyithing of mqtt5, just for testing.\nIMHO topic aliases are one of the coolest features as it reduces the package size significantly. \nWhen releasing this to major we must be very careful that topicaliases are disabled by default (topicAliasMaximum 0) because otherwise a user might receive onMessage events with empty topic strings unexpectedly. @mcollina VerneMQ has a MQTTv5 preview release see https://vernemq.com/mqttv5.html. sorry, just realized that mqtt5 is not released at all yet on npm. closing.. ",
    "user1020": "Matteo,  thanks for answer. It helps. \n. ",
    "Huang9495": "Hi @mcollina @user1020  First,I use your code to my test .Unlucky, I have error after I test,I don't know why. Can you help me to resolve the issue. Second, I try a test by another code and takes place the same as error.Can you tell the reason of the issue.\nMy operate environment :Ubuntu:14.04 ;Node.js:6.11;MQTT:2.9.1;Mosquitto:1.4.12;\nThe error is mqtt.createClient is not a function .\nThe picture is here:\nclient = mqtt.createClient(1883, 'localhost');\n              ^\nTypeError: mqtt.createClient is not a function\n    at Object. (/home/kris-allen/mqtt/mqtt/MQTT.js/test.js:2:15)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:389:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:504:3\nThe second code is :\nvar mqtt = require('mqtt');\nclient = mqtt.createClient(1883, 'localhost');\nclient.subscribe('datasend')\nclient.on('datasend',function(client){\nconsole.log('client connected');\n});\nclient.on('message', function (topic, message) {\nconsole.log(message.toString())\n})\nsetInterval(function(){\nclient.publish('datasend','1');\nconsole.log('datasend');\n},2000);\nclient.end();. Hi ! @mcollina  Thanks for your help , I am reading README.But I remain have question is why this code is test in my workmate's computer is OK, the environment is similar to me.. Hi @mcollina  I have complete my test through you method ,Thank you again your help!. Hi !@mcollina I have another issue , today ,I do a test that send the data from client to service and send the data from service to client at the same time. The issue is that nothing will occur of client where I send the data and set up to show. But it will occur after I shield the code of send the data from client to service. Can you tell me the reason .Whether the passageway of message only response the one-way rather than two-way? . Hi @mcollina \nFirst example :\nservice code\nvar mqtt = require('mqtt')\nvar client  = mqtt.connect('mqtt://localhost:1883')\nclient.on('connect', function () {\n       client.subscribe('datasend1')\n       console.log('OK')\nclient.on('message', function (topic, message) {\n       console.log(message.toString())\nsetInterval(function(){\n       client.publish('datasend2','1');\n       console.log('ohnow');\n},4000);\nclient code\nimport paho.mqtt.client as mqtt\nimport json\nimport time\ndata_topic1 = \"datasend1\"\ndata_topic2 = \"datasend2\"\nmqtt_srvr = '\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7\u00d7'(I input my IP in fact)\nmqtt_srvr_port = 1883\ni=1\ndef mqtt_on_connect(client, userdata,flags, rc):\n    print(\"34134\")\nclient.def mqtt_on_message(client, userdata, msg):\n        print (str(msg.payload))subscribe(data_topic2)\nmqtt_client = mqtt.Client()\nmqtt_client.on_connect = mqtt_on_connect\nmqtt_client.on_message = mqtt_on_message\nmqtt_client.connect(mqtt_srvr, mqtt_srvr_port, 60)\nwhile i<=100:\n    mqtt_client.publish(data_topic1,'546')\n    i+=1\n    print('gogogo')\n    time.sleep(2)\nmqtt_client.loop_forever()\nin this example I can see the \"OK\"\u3001\"546\"\u3001\"ohnow\" on the terminal of service and the \"gogogo\" without \"34134 \"and \"1\" on the terminal of client;\nBut after I shield the code of send data from client to service, I can see  the \"34134\" and \"1\" ;\nwhy?why?why?can you tell me the reason?\nAnd I don't realize the mean of what you say that Il giorno ven 21 lug 2017 alle 14:00 Kril Allen notifications@github.com\nha scritto:\n\u2026\n. ",
    "scaret": "Thank you, @mcollina ,I'll have a try.\n& I want my mqttClient disconnect from one broker and connect to another broker with subscribed topic automatically registered. Is there any method about it(e.g. connect)?\n. ",
    "rjbordon": "Hi @mcollina,\nSure, below a sample you can use to replicate the issue:\n```\nvar mqtt = require('mqtt'),\n    host = '127.0.0.1',\n    port = 1883,\n    client = mqtt.createClient(port, host),\n    pubArgs = {\n        qos: 1,\n        retain: false\n    };\nconsole.log('subscribing to devices/+/activation');\nclient.subscribe('devices/+/activation')\n    .on('message', function(topic, message){\n        console.log('message got to DEVICES ACTIVATION with topic: %s, message: %s', topic, message);\n    });\nconsole.log('subscribing to devices/+/metadata');\nclient.subscribe('devices/+/metadata')\n    .on('message', function(topic, message){\n        console.log('message got to DEVICES METADATA with topic: %s, message: %s', topic, message);\n    });\nvar id = Math.floor(Math.random()*10000);\nvar topic = 'devices/' + id + '/activation';\nconsole.log('publishing to %s', topic);\nclient.publish(topic, 'I\\'m message for activation!!!', pubArgs);\n```\nWhat I'm seeing in my console is:\nsubscribing to devices/+/activation\nsubscribing to devices/+/metadata\npublishing to devices/9956/activation\nmessage got to DEVICES ACTIVATION with topic: devices/9956/activation, message: I'm message for activation!!!\nmessage got to DEVICES METADATA with topic: devices/9956/activation, message: I'm message for activation!!!\nThx a lot for your help.\n. oh, got it, on method is attached to message event which is fired when any topic is fired against an instance of client.\nthanks a lot for your help. very appreciated.\n. ",
    "VikramTiwari": "@mcollina Not exactly the same behaviour, but unable to publish/subscribe on the wildcard topics.\nlistening to mqtt sub -t 'hello/vikram/hi' -h 'test.mosquitto.org' -v\npublishing to mqtt pub -t 'hello/+/hi' -h 'test.mosquitto.org' -m 'from MQTT.js'\ngetting no data on the subscriber side.\nPS: Using node v4.1.0\n. Does this means I can subscribe on wildcard topics but can not publish to wildcard topics?\nEdit:\nYes, can't publish on wildcard topics. Ref: https://developer.ibm.com/answers/questions/29899/publishing-topics-with-wildcards-not-working.html\n. ",
    "anhldbk": "@mcollina This issue still persists. Here is the demo code:\n``` js\n// test.js\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://test.mosquitto.org');\nclient.on('connect', function () {\n  console.log('Connected')\n  client.subscribe('#/:event/status') // <- using # will cause the problem below\n});\nclient.on('offline', function () {\n  console.log('Offline')\n});\n```\nThe output will be:\ntext\n$ node test.js\nConnected\nOffline\nConnected\nOffline\nConnected\nOffline\nConnected\nOffline\nConnected\nOffline\nConnected\nOffline\nConnected\nOffline\nConnected\nOffline\nConnected\n...\n. @RangerMauve There are many reasons:\n1. If I subscribe to another mailboxes like +/:event/status, data..., it works well.\n2. My network connection is stable. Actually, I tried to run the program above with a local MQTT broker before using test.mosquitto.org\n. @RangerMauve There's no error logged on the client side.\njs\nclient.on('error', function (error) {\n  console.log('Error: ' + error) // <-- Nothing is printed out\n});\n. @sandro-k Thank you for your explanation! \n@mcollina Is it a good idea for mqtt.js to validate topics before sending the subscriptions to brokers? \n. @mcollina I'm working on it.\n. @mcollina If the client disconnect, so there's an event fired? I expected to have event reconnect, close, offline or error to be fired. But none of them showing up.\n. @mcollina actually no such event fired\n. @mcollina Ah, I see. I'm using emqtt. Thank you anyway!\n. @mcollina I think there's no need for a unit test. I just swapped lines of code. \n. @mcollina You made my day.\n. @mcollina Is option clean: false is necessary? In my experiment, I just need the unique clientId. \n. @mcollina Thank you so much!\n. @mcollina lol, you've made my day:\n``` js\nvar mqtt    = require('mqtt');\nvar options = {\n  username: 'ping',\n  password: '123456',\n  rejectUnauthorized: false\n}\nvar client  = mqtt.connect('mqtts://127.0.0.1:8883/',options);\nclient.on('connect', function () {\n  console.log('Connected')\n  client.subscribe(':event/status')\n});\nclient.on('offline', function () {\n  console.log('Offline')\n});\n```\n. @mcollina \nWould you pls let me know: why do we need parameter url for mqtt.connect([url], options) ? \nThe URL can be on the following protocols: 'mqtt', 'mqtts', 'tcp', 'tls', 'ws', 'wss'.\nAny use case for  protocols: 'mqtt', 'mqtts', 'tcp', 'tls', 'ws', 'wss' ?\nIs that good to have url in options? \n. @mcollina What's the role of protocolId in the options? Should we replace it by protocol?\n. @mcollina So yes?\n. @jonahzheng You mean: in addition to qos = 2, there will be an active client receives  such message?\n. And if the client goes offline, I will receive multiple offline events:\nsh\n$ node test2.js\nConnected\nOffline\nOffline\nOffline\nOffline\n...\nDo you think we should notify client once? That means: event offline will be fired once when the client first disconnects from the server.\n. @mcollina What's about connect with callbacks? \n. @mcollina Ping ping ping\n. @mcollina  you said about two ways of handling errors. Why don't we think it as handling 2 types of errors, including:\n- connection errors: invalid username/password, offline service...\n- operation errors:  any other one\n. @mcollina Seriously I'm thinking about it\n@RangerMauve Would you pls show me your code?\n. @RangerMauve My approach is the same as you:\n``` js\nclass Data {\n    connect(callback){\n        this._client = mqtt.connect( this._conf )\n        this._client.on('connect', this._onOnline.bind(this) )\n        this._client.on('offline', this._onOffline.bind(this) )\n        this._client.on('error', this._onError.bind(this) )\n        this.once( 'status', callback )\n    }\n_onOnline(){\n    this._online = true\n    this.emit('status') // success\n}\n\n_onError(){\n    this.emit('status', 'status.failure.invalid_username_or_password')\n}\n\n_onOffline(){\n    var this = this\n    if( !this._online ){ // notify only once\n        return\n    }\n\n    this._online = false\n    this.emit('status', 'status.failure.offline')\n}\n\n}\n``\n. @mcollina What do you mean by:TCP connectedandonline?\n. It works well on Android. I already built a React Native app withmqtt.js`.\n. @mcollina Ok, I'm gonna update the README.\nBtw, you said: \ntext\nwhy are you emitting 'packetsend' here?\nCan you send another PR for 'packetsend'  and 'packetreceive', so it's easier to discuss?\nStill I really don't know with the diff about emitting packetsend. I looked at the code Current client.js, line #274 and found no difference.\n. @mcollina I updated the README. Is that ok?\n. @ralphtheninja Man in-the-middle attacks can fake self-signed public keys. Just FYI :3\n. @mcollina Currently I have no idea about TLS-configured clients. Would you mind explaining it a little bit? \n. @mcollina Ok! I read the TLS documentation. Let's me see what I can help.\n. @mcollina Should the tutorial be in a separated file or in README.md? I think it's better to get the tutorial placed in examples/tls server.\n. Would you guys elaborate more on how we take integration tests? I think we should make a to-do list now. For example:\n\n[ ] Listing all OSS Brokers\n[ ] Specify what to test .... Currently, I am using emq broker and find it great. It's written in Erlang (suitable for production environments). \n\nAbout What to test, should we have tests for  MQTT Over WebSocket?. The integration test results should be organized into a report with:\n\nInformation about brokers\nFor each broker, we should have describe the running environment. It must be reproducible. (Docker may be a great relief)\nAssociated test scripts\nFinally, a summary\n\n@sandro-k , @mcollina is that ok?. Fixed! I've moved the implementations into validations.js\n. Fixed \n. Tests are divided into smaller ones.\n. @mcollina , @sandro-k : All tests are included in.\n. I removed them :)\n. @mcollina His test is ok, right?. ",
    "sandro-k": "@anhldbk the # has to be at the end like foo/bar/#. If you want to subscribe to everything just use #\n#/:event/status === # because everything that is after the # is irrelevant. See http://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices\n. @NancyZY sub to floor/+ and pub to floor/1 is valid. As already mentioned the MQTT-Spec is saying what is possible and what not. A good explanation can be found at http://www.hivemq.com/blog/mqtt-essentials-part-5-mqtt-topics-best-practices\n. 42 - no just joking. As many as your System can handle CPU/RAM wise.\n. It is a scalability issue you are facing. Split up hierarchy to support multiple processes and threads so that each process is doing a portion a the topics.\n. As an alternative mqtt-elements could provide the bundled version. \n. I agree and will bundle everything with the mqtt-elements\n. On my local machine I am using mosca and testing it against a Mosquitto instance. \nWhich is the right test to run test/browser/test.js? How would you run it in the Browser?\n. Found the command :+1: \n4 Test are failing\n```\nMqttClient :: specifying a port :: should publish and subscribe\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\nMqttClient :: specifying a port and host :: should connect\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ndone() invoked with non-Error: [object Event]\ndone() invoked with non-Error: [object Event]\nMqttClient :: specifying a URL :: should connect\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ndone() invoked with non-Error: [object Event]\ndone() invoked with non-Error: [object Event]\nMqttClient :: specifying a URL with a path :: should connect\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\ntimeout of 2000ms exceeded. Ensure the done() callback is being called in this test.\n``\n. This is not fixed yet, but currently we are not getting any IE10 traffic and therefore no errors. If the need to support IE10 pops up again I will reopen this issue.\n. I am using MQTT.js in <mqtt-elements> and theusernameandpasswordoptions work for me, can you please try http://mqttjs.github.io/mqtt-elements . Just click on the asterisk and add yourusernameandpassword`\n. Yes I am making the connection over WebSockets in the browser. Just checked - mqtt-elements uses MQTT.js (1.3) I am going to upgrade and check if it is still working. You can test your own backend over at http://mqttjs.github.io/mqtt-elements it is a live Web demo that runs in the browser\n. Maybe I am missing something hear but... \nvar options = {username: \"FOO\", password: \"BAR\"}\nmqtt.connect(\"ws://HOST:PORT\", options);\nThen on https://github.com/mqttjs/MQTT.js/blob/master/lib/connect/index.js#L32\nopts will have \n```\nopts.username \n=> FOO\nopt.password\n=> BAR\n```\n. Yes it will do that.. there is no point in \nopts.username = opts.username\nopts.password = opts.password\nAs long as\nopts.auth\n=> null\nthe username and password will not be overwritten.\n. You are welcome.. happy mqtting :)\n. @ajsharp If you like yo update/ add something to the documentation PR are always welcome :+1: \n. Just to let you know. I am bundling MQTT.js for the  to load MQTT.js for the  element. Yesterday I wrote some test for the project and discovered that I need to change the bundling of the library to have access to new Store() to be able to create the store before creating the MqttClient. With that in mind I think providing a bundled version often helps to get stared, but you often have to specifically build it for your use case. \n. This example looks promising http://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html \n. PR is alway welcome. Have a look at https://github.com/aws/aws-iot-device-sdk-js how they connect awsIot.device to there MQTT broker.\n. Sure, would the expected behavior be that the packet is added to the queue and not jump out of the _sendPacket method?\n. Ok, we can do that. But I kind of like the simplicity of queue just being an Array. Every environment is capable to just create an array and store packets within the the array without the need to create a different object. If we remove queue, the user has to be able to reach Store to create it before the user creates the MqttClient.\n. The current implementation of <mqtt-publish> actually needs this change to work as expected. I might reopen this in the future.\n. Hey, looking at you code it is hard to tell what is not working. But my guess is that you crate a new client in $('button').click(function() and to not re-register the client.on('message', function(topic, message) function to the client..\n```\n$('button').click(function(){\n            client.unsubscribe(topic);\n            host = $('.formDiv div input[name=\"host\"]').val()\n            port = $('.formDiv div input[name=\"port\"]').val()\n            topic = $('.formDiv div input[name=\"topic\"]').val()\n            client.end();\n            client = mqtt.connect({ host: host, port: port });\n         client.on('message', function(topic, message) {\n            messageCount++;\n            message = '<div>Message ' + messageCount + ' ['+topic+']: ' + message + '</div>';\n            $('.messages').append(message);\n          });\n\n        client.subscribe(topic);\n    });\n\n```\nAs a side note we have a wrapper for MQTT.js mqtt-elements to use it in a Polymer project, maybe that is something you would like to look at :) \n. @pedro93 Have a look at https://github.com/mqttjs/mqtt-elements/blob/master/demo/elements/demo-element.html#L248, I am calling disconnect and connect on the <mqtt-connection> element in between you are able to change the broker url. A live demo is online here http://mqttjs.github.io/mqtt-elements/. I am closing this issue here. You can open up one at <mqtt-elements> if you like to have more information.\n. @mkarliner can you try to use http://mqttjs.github.io/mqtt-elements/ to test your setup. The demo uses the browserify version of MQTT.js. At work I have a broker running at wss://HOST/api/ws/ and the connection works without any issues.\n. @mkarliner I am going to change the demo to to make it possible to set a user defined client id. In the mean time you can open up a console in the browser and type \ndocument.querySelector(\"mqtt-connection\")._generateClientId = function () {return \"myClientId\"}\nand change \"myClientId\" to your ID before hitting connect.\n. Not in this week, back in the office in the new year.\nAm 23.12.2015 2:52 nachm. schrieb \"Matteo Collina\" <notifications@github.com\n\n:\n@knolleary https://github.com/knolleary thanks for the clarification!\nAnyway, we should solve this. @sandro-k https://github.com/sandro-k\nhave you got some bandwidth for solving this one?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/356#issuecomment-166900333.\n. MQTTLens uses an old version of MQTT.js - I am working on a rewrite with mqtt-elements\n. I can have a look and try to reproduce this. \n. @mcollina yes I can have a look. I just checked with http://mqttjs.github.io/mqtt-elements/ and I am able to receive messages that where send while the client was offline. Going to reproduce this with node.js.\n. @ktersius I am not able to reproduce this with my current setup\n\nclient.js - subscribes to topic test\n```\nvar  mqtt = require('mqtt');\nvar clientId = 'browser123';\n//var client = mqtt.connect(\"ws://iot.eclipse.org:80/ws\", {clean: false, clientId: clientId});\nvar client = mqtt.connect(\"ws://localhost:3000\", {clean: false, clientId: clientId});\nclient.on('connect', function () {\n    console.log('mqtt client connected');\n    client.subscribe(\"test\", {qos: 1});\n});\nclient.on('message', (topic, message, packet) => {\n    console.log(message.toString());\n});\n```\npublisher.js - publishes a message every second\n```\nvar  mqtt = require('mqtt');\n//var client = mqtt.connect(\"ws://iot.eclipse.org:80/ws\");\nvar client = mqtt.connect(\"ws://localhost:3000\");\nvar count = 0;\nclient.on('connect', function () {\n    console.log('mqtt client connected');\n    setInterval(send, 1000);\n    function send() {\n        console.log(count);\n        client.publish(\"test\", count + \"\", {qos: 1})\n        count = count +1;\n    }\n});\n```\nFirst I start client.js and then publisher.js and start receiving messages at the client. Then I kill client.js and wait a couple of seconds and start it again. Once the client gets connected it prints a bunch of messages that where send by publish.js while client.js was offline.\nAm I missing something? @ktersius? \nJust a side note the MQTT-broker running at ws://localhost:3000 is mosca. The test even works at ws://iot.eclipse.org:80/ws\nMaybe it is a bug at Mosca when running with mongodb?\n. @ktersius I had a look at you code. I don't have mongodb instance running to test it with your mosca setup. \n. @ktersius I cloned your repo and It is working fine with for me..\nMy setup: \n1. mqttsample.js on a windows VM\n2. Mosca on 192.168.0.204:3005\n3. publisher.js on 192.168.0.204\n4. Starting publisher.js and  mqttsample.js\n5. Disconnecting the network from the windows VM\n6. Connecting the windows VM \n7. See output below:\nmqttsample.js:23 231\nmqttsample.js:23 232\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://192.168.0.204:3005/' failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nmqttsample.js:19 reconnecting\nmqttsample.js:10 mqtt client connected\nmqttsample.js:23 233\nmqttsample.js:23 234\nmqttsample.js:23 235\nmqttsample.js:23 236\n. npm install mosca bunyan -g\nmosca -v --http-port 3005 | bunyan\n. I just disconnected my client for 5 minutes and it received every single message :+1:  after reconnecting\n. @ktersius can this be closed?\n. @GavinDmello could you pleas give some more information how your setup looks like? What OS, MQTT.js version, what MQTT-broker and your client code.\n. I can have a look, but I only have the issue on IE10, Edge works fine. \n. Is your MQTT-broker at mqtt 3.1.1? I can definitely confirm that username and password authentication works with mosquitto.\n. Is the authentication working with other clients?\n// edit sorry wrong button, not intended to close the issue\n. Pleas post the code that creates the client and then connects.\n. Ok I just tested with my server and this works for me \n```\nvar host = \"localhost/ws/\";\n  var port = 80;\n  var username = \"user\";\n  var pass = \"pass\";\n  var client = mqtt.connect({servers : [{ host: host, port: port}], username : username, password :pass})\nclient.on(\"connect\", function(){\n    console.log(\"connect\", arguments);\n  });\nclient.on(\"error\", function(){\n    console.log(\"error\", arguments);\n  });\n```\nAre you connecting via ws or wss?\n. @yugandhar23 did you solve it?\n. @mcollina I can have a look, but right now I am in the US and will not be able to do this before mai.\n. LGTM \ud83d\udc4d \n. Maybe it would be sufficient to log QoS1 and 2 after the PUBACK, as QoS0 is fire and forget anyway.\n. @mayooran99 could you pleas expand the error given in the Console. Just copy-paste the stacktrace and the version of Chrome you are using.\n. @mayooran99 and @mcollina I can confirm that this is a bug in https://github.com/mqttjs/mqtt-packet/blob/master/parser.js#L355 and https://github.com/mqttjs/mqtt-packet/blob/master/parser.js#L370. Somehow a char 160 ended up after if(length === -1 || end > this._list.length ||\nI will create a PR\n. @mayooran99 thanks for reporting this.\n. I can confirm when forcing \"mqtt-packet\": \"^3.4.7\" I can now bundle and use mqtt.js in the browser without any issue. \n. Can you please post the code you are using to connect to the MQTT-Broker.\n. Is the broker configured to accept SSL on port 1883 or is that the default no SSL bare TCP Port? If you connect without SSL, which port are you using?\n. From my perspective \n\nBower  - A package manager for the web \n\nis a package is something that runs in the Browser or similar like Chrome Packaged Apps and therefor should include a bundled version of MQTT.js for the Browser. Publishing MQTT.js to Bower like this does not benefit over npm install --save-dev mqtt and then bundle it yourself. What would be your benefit of publishing MQTT.js to Bower?\n. Bower allows to run a postinstall script that we can use to bundle MQTT.js for the Browser and avoid to publish it via Git.\n. @mayooran99 just as a side note MQTT only allows + - Single Level and # - Multi Level wildcards, both are supported by MQTT.js\n. @anhldbk disconnect and connect :)\n. Hey @hijklmno I started a little project a while ago mqttWorker to provide the same api MQTT.js API but do all MQTT work in a WebWorker. The project is not ready but you can have a look at it. \nTo fix the var document.URL I just create the document in the beginning of the Worker see mqttWorker.js#L25, so your fix is the same.\n. I have to say that the test is a bit difficult to read, it is not always clear what var client is referring to.\n. Don't be sorry for sending in a PR \ud83d\udc4d \n. I am on board.. Lets start with something simple like Mosca and expand from there.. I am trying to free some time next week.. Thanks @anhldbk for getting this started again.\nBrokers\n\nMosquitto\nMosca\nEMQ\n\nWhat to test\n\nConnect \nSSL/TLS\nWebsockets\nSubscribe\nQOS 0,1,2\nRetained \nPublish\nRetained\nLWT\n\nPlatform\n\nNode.js\nBrowser\nIntegrationtests via SauceLabs\n\nEDIT I am updating this list with information that are posted in the comments below... Can you please post an example and what kind of error you are getting. Probably the MQTT-Server is not using the right SSL certificate!  . Your check works just fine..  Currently I am creating the document object before MQTT.js is running See L25. Ideally it should be possible to pass this option to MQTT.js.. @sublimator Yes you are correct.. looks very clean.. No I would not do that.. the line var parsed = urlModule.parse(document.URL) basically connects to the current hostname on the same port via Websockets. I don't even know a good usecase for hat behavior. On a Web Worker it would be even more confusing having the site at \"https://footbar\" and suddenly connecting Websockets to \"http://localhost\"... \nI rather like to fail than try an ambitious strategy... There is no MQTT WS service at ws://test.mosquitto.org/ . Please try ws://mosquitto.org:8080/. At this point it is not 100% clear to which topic is referenced, you can use packet.topic.should.equal(topic) or rename topic = 'test_topic' to testTopic = 'test_topic'\nEDIT\njust saw, that you call packet.topic.should.equal(topic) in line 432 and topic.should.equal(topic) should always work\n. a/+/c and a/+/+/d - thanks\n. I am not sure what the question is on line \n71 // TODO: Why doesn't this check for `host` ? re: `Specify host manually.`. // Throwing an error in a Web Worker if no hostname is given, because we can not determann the hostname automatically. If connecting to localhost, please supply the hostname as an argument.. ",
    "NancyZY": "@mcollina,  @sandro-k ,  why I cannot accpt the message ? \nsub topic : 'floor/+'\npub topic : 'floor/1' \n. @sandro-k ,yeah, I got it. I want to ask for another aspect: What is the limit of subscribe ? In other word, How many topics sub-client  can accept  at most? and How to solve it ? Does it have a method to test the limit?\n. Ooh, I knew it , thank you! It is a few number. How can I deal with the situation? I want to deal with the cloud  client which can sync status, then notify the mobile phone, it subscribe the topic like \"floor/+\" , but the number of publish topic is thousands. What can I do to run normally\uff1f\n. Hi, the whole process that subscribing  and publishing topic is right, BUT,  sometimes it happened wrong , the console hints [Errno 54] Connection reset by peer,  what is it? How can I solve it\n. @AdamMiltonBarker  Have you solved the  problem? I meet too.\n. ",
    "john-colgrave": "As you can see from the \"Publish succeeded\" messages the callback is being called. The publish implementation does:\nswitch (opts.qos) {\n      case 0:\n        // Immediately callback\n        callback();\n        break;\n...\n}\nAs the original publish is QoS 0 I think any interleaving of callbacks in my application will be entirely due to the client. The server will send PUBLISH packets as it receives the original publications.\nIs there any way to trace what is going on inside the client?\n. ",
    "rbasoalto": "Maybe it has something to do with payloads being encoded/decoded in UTF-8?\n. ",
    "mikelfo": "Thank you, I was also experiencing this issue!\n. ",
    "MBThaumatec": "we've just started using mqtt on node v0.8.22\n. We have custom ARM linux gateway where 0.8.22 is the 'newest' node available.\n. Sure, we are aware that support for node 0.8 is going to be dropped across node modules.\n. I push your suggestion, but I can see there is issue with Travis CI tests. I'm quite sure it's about too old npm version. With node 0.8.x in Travis there is npm v1.2.x. As you can see here: \nhttps://github.com/npm/npm/issues/4984\nor \nhttps://github.com/npm/npm/issues/5906\nthis npm version is not working good with ^ - compatible version mark which you are using in package.json. It should be at least npm v1.4.x.\nWhat we can do about it? \n. OK, I'll do. I was thinking that maybe there is way to tell nvm in Travis to use newer version of nvm. But I'm not familiar with Travis, and my searching for such option in travis.yml was not successful. I thought, that maybe something you can do on Travis webpage.\n. ",
    "maug": "@curtispd How did you add an error handler to the client's stream?\nI tried:\nclient = mqtt.createClient(...);\nclient.stream.on('error', function () {\n  ...\n});\nbut it doesn't receive an error, instead the error is thrown and I don't know how to catch it:\nevents.js:72\n         throw er; // Unhandled 'error' event\n               ^\n Error: Connection refused: Identifier rejected\n     at MqttClient._handleConnack (mqtt/lib/client.js:508:9)\nmqtt v0.3.10\n. Thanks @mcollina. Could I intercept it anyway? (I would rather my app not to blow into my face in case of an error ;) Try/catch around createClient doesn't work.\n. Thanks mate, works good. I thougth I've tried that but apparently I haven't...\n. ",
    "arturi": "Hey! Since the API changed from createClient to client, trying to catch the error:\nvar mqtt = require('mqtt');\nvar mqttClient = mqtt.connect({\n  host: 'localhost',\n  port: 1883,\n  username: config.mqttCredentials.username,\n  password: config.mqttCredentials.password\n});\nmqttClient.on('error', function(err) {\n  console.log(err);\n});\nError event is not emitted, it throws:\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: Connection refused: Not authorized\n    at MqttClient._handleConnack (/var/koti-new/node_modules/mqtt/lib/client.js:665:9)\n    at MqttClient._handlePacket (/var/koti-new/node_modules/mqtt/lib/client.js:273:12)\n    at process (/var/koti-new/node_modules/mqtt/lib/client.js:196:12)\n    at Writable.writable._write (/var/koti-new/node_modules/mqtt/lib/client.js:206:5)\n    at doWrite (/var/koti-new/node_modules/mqtt/node_modules/readable-stream/lib/_stream_writable.js:237:10)\n    at writeOrBuffer (/var/koti-new/node_modules/mqtt/node_modules/readable-stream/lib/_stream_writable.js:227:5)\n    at Writable.write (/var/koti-new/node_modules/mqtt/node_modules/readable-stream/lib/_stream_writable.js:194:11)\n    at write (_stream_readable.js:602:24)\n    at flow (_stream_readable.js:611:7)\n    at Socket.pipeOnReadable (_stream_readable.js:643:5)\nWhat should I do? Thanks.\n. Thanks! Tried again now and it works:\nvar mqtt = require('mqtt');\nvar mqttClient = mqtt.connect('mqtts://example.com', {\n  username: '123',\n  password: '123',\n  rejectUnauthorized: false\n});\nmqttClient.on('error', function(err) {\n  console.log(err);\n});\nmqttClient.on('connect', function() {\n  console.log('I am connected!');\n});\nDon\u2019t know why it was\u2019t able to catch it before. But with the cli it throws an error (which is fine, I guess, but I expected a simple error message):\nmqtt pub -t '/something' -h 'example.com' -C 'mqtts' -u '123' -P '123' -m 'something' --insecure\n. ",
    "chris-kruining": "I seem to have the same problem, And I'm not sure how to fix it. \nThis is my current code to 'handle' connection errors :: \n```js\nlet client = mqtt.connect('mqtts://mqtt.domain.tld:1885', {\n    reconnectPeriod: 5000,\n    will: {\n        topic: 'game-over',\n        payload: sessionId,\n        qos: 2,\n        retain: true,\n    }\n});\nclient.stream.on('error', () => client.end());\nclient.on('connect', () => {\n    client.subscribe(sessionId, {\n        qos: 2,\n    });\n});\n```\nWhen for example the broker is down I get an error in the console, which I of course want to catch and write logic to handle such exceptions. However the error event on the client is not triggered at all, the error event on the stream is only triggered once and it doesn't prevent the error being written to the console at all. So to prevent an overloaded console with the some error I now simply cancel the connection to the server. Is there a way for me to catch such errors, because like I said, I would like to have some logic to handle these situations :D. @jakkso No not really, we kind of 'solved' it by making sure the up-time of the broker is okay...\nI still use the same error event code (which for as far as I know doesn't work) :: client.stream.on('error', e => client.end());. ",
    "samuelcotterell": "Any updates here??? I am getting the same issue where connection errors are not being caught by \nclient.on(\"error\") handler. ",
    "jakkso": "@chris-kruining Did you ever figure it out?\nI'm also having an issue catching some errors.  I'm using a version for the following:\nclient.on('error', (err) => {\n  // Handle errors here\n})\nThis approach  catches an connection refused: not authorized error, but not, for example, the following error:\nWebSocket connection to ... failed: Error in connection establishment: net::ERR_INTERNET_DISCONNECTED\nWebSocketStream @ stream.js:61\ncreateWebSocket @ ws.js:55\nbuildBuilderBrowser @ ws.js:83\nwrapper @ index.js:144\npush../node_modules/mqtt/lib/client.js.MqttClient._setupStream @ client.js:271\npush../node_modules/mqtt/lib/client.js.MqttClient._reconnect @ client.js:735\n(anonymous) @ client.js:752\nHow should I go about catching this type of error?. ",
    "seubert": "@mcollina The patch is easy, but I'm having trouble figuring out how to put a useful test in. Mocha doesn't have spies so I can't easily make sure the right things are being passed to createClient and I can't find anywhere that the host is exposed after connect() is called. Ideas?\n. Ahhh, so sorry, I will get this in within the next couple hours. Rough weekend personally.\n. Travis build erroring out because I used a caret on the devDependency for sinon. Want me to drop it to a tilde?\n. ",
    "soulraven": "i will make a repo with all the app, is a sniffing protocol app for gps monitoring devices\n. ",
    "mocheng": "@mcollina The mqtt protocol http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#keep-alive-timer reads\n\nIf the server does not receive a message from the client within one and a half times the Keep Alive time period (the client is allowed \"grace\" of half a time period), it disconnects the client as if the client had sent a DISCONNECT message. This action does not impact any of the client's subscriptions\n\nIMHO, the \"one and a half\" times is for network delay. \nDo we still need keepalive tweaks in code?\n. It seems impossible to write a unit test case for this change:-(\n. I seems impossible to write unit test case for this change :-(\n. It seems impossible to write a unit test case for this change:-(\n. It seems impossible to write a unit test case for this change:-(\n. I learned something.\nI'll send another pull request.\n. This is annoying. I'll submit a Pull Request to fix it by changing package.json.\n. Quick Fix\uff01Bravo\uff01\n. @mcollina I suppose there is some issues in horizontally scale Mosca. For the time being, if one client (identified by client id) connects to a Mosca server, it kicks out all other client connection with same client id. However, if multiple Mosca servers are deployed, connection to one server would not kick out connection with same client id to other Mosca servers.\nIMHO, only solution is to have frontend load balancer to distribute connection by client id. So same client id is always directed to same Mosca server.\nAny other ideas?\n. +1\nMy project needs access to server-side socket to diagnose socket conditions. There are quite a few FIN-WAIT-2 state sockets hanging arround.\n. ",
    "nevill": "@mcollina Sure, I would like to. Can you confirm which way do you prefer? Using 4.x with contain or 3.x ?\n. This issue is now blocked by #195 :wink: \n. I can run all the tests successfully some days ago, it's really because of the cert test/helpers/tls-cert.pem has been expired.\n. ",
    "conect": "\"However, MQTT binary encoding means that we use buffer, not that we pass the 'binary' option as encoding to the Buffer class. I think that we should default MQTT.js to be binary by default in 0.4.0.\"\nCould you tell me what that means?\nThx.\n. I'm using the current lib installed via npm install mqtt. Now I want to send an byte array as binary not as a string. I created my client like: var mqtt_client = mqtt.createClient(1883,{encoding: 'binary'});\nBut nevertheless I receive:\nnode_modules/mqtt/lib/generate.js:192\n    length += Buffer.byteLength(payload);\n                     ^\nTypeError: Argument must be a string\nCould you tell me why. Thanks.\n. Thanks for the fast reply. That was my fault I was sending an array of doubles. But I was confused about the warning \"TypeError: Argument must be a string\" well javascript obviously cannot distinguish. Whatever now my problem is on the client side, I'm using the paho mqtt client and it says my data is malformed: Error: AMQJS0009E Malformed UTF data:d4 -3f . . I know that's not part of your code but perhaps you could give me a hint. Is it possible to receive binary with paho mqttws31.js Thanks in advance.\n. ",
    "duyaokun": "var client = require('mqtt').createClient();\nclient.publish('\u4e2d\u56fd', 'hello!');\nclient.end();\n. var client = require('mqtt').createClient();\nclient.publish('\u4e2d\u56fd', 'hello!');\nclient.subscribe('\u4e2d\u56fd');\nclient.on('message', function(topic, message) {\n  console.log(message);\n});\nclient.end();\n. There is no longer exception throw, but I still can't  receive the messages from the Chinese topic.\n. http://mosquitto.org/download/\n. If I use mosquitto client to subscribe the topic '#', the message received is only 'h';\nmy publish code is \"client.publish('\u4e2d\u56fd', 'hello!');\"\n. Your client works right,but my client that used \"mosquitto_sub.exe -t \u4e2d\u56fd\" cannot receive right topic.mosquitto's encode is not 'utf-8'? \n. The encode of windows console isn't UTF-8.\nOf cource, if the encode for topic is UTF-8 in our project, everything works fine! \nThank you very much!\n. ",
    "bo-bo2016": "Good job\uff01\uff01\uff01. ",
    "sublimator": "Uhm wat?\n. \ud83d\udc4d  for Promises :). Something like:\ntypescript\ninterface Options {}\nclass MqttClient {}\ntype urlCallback = (err: Error, url: string) => void\ntype asyncUrlBuilder (cb: urlCallback) => void\ntype urlBuilder = () => string | asyncUrlBuilder\ntype url = string | urlBuilder \nfunction connect(url : url, options: Options) => MqttClient\n?. js\n/**\n * connect - connect to an MQTT broker.\n *\n * @param {String} [brokerUrl] - url of the broker, optional\n * @param {Object} opts - see MqttClient#constructor\n */\nfunction connect (brokerUrl, opts) {\nHrmmm . IMO it would probably be simplest to just add a function (through the opts) that synchronously transforms the url passed to websocket() each time, here:\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js#L99\n and here: \nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/connect/ws.js#L45. Yeah, keen! we at @flomio are going full TypeScript.\n. k, once we got the other one sorted to your satisfaction, I'll get onto it :). Awesome :) There's a @types/mqtt package we can work with it's author with\n:)\nJust to find the time ...\n. I've been playing with async/await in TypeScript 2.1 and it's lovely. It would be nice to Promise-able the API while we're at it.. Can you verify that you have the typings in your node_modules/mqtt ? Are you using @mcollina's latest npm push of mqtt?  What version of typescript?. Interesting, as it \"works for me\" here. \nimport { connect, MqttClient } from 'mqtt'\nIs all I'm using. . I'm using moduleResolution: \"node\"\nTry that?\n. I'm relatively new to TypeScript btw\n. I'm using it with an angular 4 app, that was scaffolded by the angular cli,\nwhich creates a tsconfig file with compilerOptions.moduleResolution, set\nto node\n. We should update the TypeScript section of the README I guess. Done. We might wanna add some CI tests that use all the strict tsconfig settings. I'll try and get around to that at some point.. \nI'm not sure what's going on here: https://saucelabs.com/open_sauce/user/mqttjs/tests. \nAfter making this change (to clean tip of origin/master):\n\nI'm getting:\n\n\n. So I see there's a pre commit hook (specified in package.json, didn't know you could do that :) ) that runs the test script but not browser-test, which off course seems to be because zuul just hangs when the --local option is passed. It would be nice if that project had some kind of ability to process.exit( passed ? 0 :  1).   \nI guess at the least we could add browser-build to the pre-commit list of scripts?. Todos r questions to you guys and reminders to myself! I can remove if/b4 u\nmerge\n. Will add docs/strip todos after lunch\n. re: TODO: Why doesn't this check for host ? re: Specify host manually.\nlook at the old code:\n```js\nfunction buildBuilderBrowser (mqttClient, opts) {\n  var wsOpt = {\n    protocol: 'mqtt'\n  }\n  var url\n  var parsed\n// for Web Workers! P.S: typeof(document) !== undefined may be becoming the faster one these days.\n  if (typeof (document) !== 'undefined') {\n    parsed = _URL.parse(document.URL)\n  } else {\n    throw new Error('Could not determine host. Specify host manually.')\n  }\n```\nThe code doesn't even give the user a chance to specify a host manually, no?. I'm not quite sure about the implications of WebWorkers and browsers but it seems like the old error message indicated that you ought to be able to specify a host manually somehow? \nWhat should the correct behaviour (ou showing my Aussienessness lelz) be? Should it only throw an error if there's not enough information in the opts to piece together an url?. > I'm more keen on passing a function to connect that will return the URL (or call a callback with an URL).\nMy thoughts on that:\nIf you passed in solely a function, it would return a fully signed url, and then as the code stands, it would be parsed, in the connect function, which it must do, due to having to route to the corresponding stream builders for the appropriate protocol. \nThen later, inside the stream builder, you would need logic to check if there's an url builder function and either run that, or use the current logic to build the url from the options. For the first connection, this would mean running the url builder function twice, once for the connect protocols[url.parse(urlBuilder())] routing, and then again inside the stream builder. Or add some convolution to avoid this.\nI guess you could specify the protocol manually in the connect options and bypass this need: {protocol: 'wss', url: urlBuilder} ?\nAnyway, I think this is an efficient/pragmatic and reasonably non-invasive way of solving the issue, as the transformUrl function gets passed the url/options/client and can use either the url or the already parsed components, in the options, and check any possibly relevant client state.\nI'm a little fuzzy on how the urls are used by the other protocols, but it seems it's nothing other than a convenient way of expressing domain/ip/port etc, whereas with WebSockets, the url is actually transported over the wire. Correct me if I'm wrong there.\n. @sandro-k \nI'm still confused. Should it only parse the document.URL and throw an error if it cant if there's not enough information in the opts to piece together an url?. Btw, this comment here seems stale, https://github.com/mqttjs/mqtt-worker/blob/master/mqttWorker.js#L23-L25, the url is passed in as the first arg no?. ```js\nfunction buildBuilderBrowser (client, opts) {\n  if (!opts.hostname) {\n    opts.hostname = opts.host\n  }\nif (!opts.hostname) {\n    if (typeof (document) === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.')\n    }\n    var parsed = urlModule.parse(document.URL)\n    opts.hostname = parsed.hostname\nif (!opts.port) {\n  opts.port = parsed.port\n}\n\n}\n  return createWebSocket(client, opts)\n}\n```\nThis seems like the correct logic that would be inline with the Error string. @mcollina I added draft @ docs\n@sandro-k  I removed the comment about webworkers, can you provide me with an updated one to add? (Because I'm not really understanding the implications myself). @mcollina \nI added codecov.io, it's really simple to set up, though of course, you'd have to do that yourself. You  can have a browse here: https://codecov.io/gh/sublimator/MQTT.js/src/d3a09f051f16459985d7c70fb64d497324395cd4/lib/connect/ws.js. Heh, pretty slick, it's already got some info: https://codecov.io/gh/mqttjs/MQTT.js/src/262f872c997af410376660d238d8b92e00ce5e32/mqtt.js\nBut it's causing the builds to fail because there's no base commit to compare coverage to. I think you can set the tolerance, if you have repo rights and login via github. Probably easiest to just check the travis result, which seems to have passed and then once a build is triggered for master, the base should be set. I think .... . @sandro-k Why can't we just default to localhost in webworkers?. I'm completely unfamiliar with web workers. Ok, makes sense :)\n. @mcollina should I put the Signed WebSocket Urls section inside the\nbrowser section?\n. Updated and pushed. Sorry, fell asleep!\n. Got it, yeah browser tests === goodness. Will take a look when I can :) \ud83d\udc4d . Still haven't gotten around to this. We could add the browser-test to the prepublish script in the interim I guess for a quick tiny improvement. I'm not experienced in SauceLabs (yet, but want to be!). re: #536 \nI extended the client options from Url, because of the funny parsing done, but actually the port is more generally a number so need to fix that. \nAlso TODO: remove the _\\w+ private functions . https://github.com/Microsoft/TypeScript/issues/1867#issuecomment-209018980\nHrmmm. Removing the private members was my initial impulse also, but one of the m$\ndevs made a point that it helps when extending the class to not\naccidentally over-ride private members. The tsc compiler will balk on any\nattempts to use the members, even on extended classes, where protected\nmust be used.\nHaving said that, you could argue it's less a maintenance burden to only\nexpose the public API.\nThoughts?\nI'm easy either way really. Out at the moment so can't make any changes.\nOne other thing to consider is how much of the url.parse options do we\nactually want in the ClientOptions. The 'slashes' etc ... it's kinda messy.\n. So it seems like the consensus is to remove the private variables. There was some discussion about having an option to omit them in the automatically generated .d.ts files (which is what these are) but seems like MS dug their heels in on this one. I'll just remove them manually. \n@mcollina As far as tests go, we'd need to have a typescript compiler added to the dev-dependencies, which is not really a biggie. What sort of testing did you have in mind? Just simple tests (connect, subscribe, publish, receive etc) or more extensive ones to somehow notice when the declarations ones get out of sync? . Yeah, that seems like a good simple step \ud83d\udc4d \nOk, I will remove the private variables, install tslint and add it to the CI build :) \nProbably tomorrow. @mcollina \nOk, I removed private variables, and deprecated the hostname option in lieu of host which is used in the servers: [{host: 'localhost', port: 1337},...] option, for consistency. I also removed most of the jibberish url parse options (hash, query, etc), reducing it to just port (as a number) host, path, protocol and clientId and username / password. . The tests on Travis pass, but because of Js code changes related to hostname, the coverage has gone down by a fraction so it's marked as failed. . My intention was to clean up the messy extending of the IClientOptions with\nALL the url.parse variables. It's quite glaring once you see it all\nmapped out in TypeScript declarations, so I got a bit carried away making\nalterations, while removing the url jibberish like hash/query etc. We\nuse hostname/host variously, while in server we use host.\nI added a deprecation warning for hostname, for later removal but if\nremoving the rest warrants a sem-ver change then so be it. Is that an\nissue? I can separate the changes into multiple pull requests if you'd like.\n. ^ while in the servers config array we use host.\n. I will open another one later on :) Out at the moment\n. I can't recall a vhost option. But I could be wrong. You need to\nsubscribe to topics before you will receive any on('message', ... events\n. I'm not sure :) I'd try connecting from the same box, without any vhost\ncomplications. Your tcp:// url seemed ok.\nrequire the node 'url' module and use the parse function on the string and\nlook at the result to assure yourself of its well formedness.\nAre you sure you want that version of mqtt? 3.1 vs the default 3.1.1?\nI have no experience with the broker you are using. New to mqtt and have\nbeen using it only with the aws IoT broker\n. I'm assuming \"hostname.com\" is some kind of redaction :)\n. Could try having some fun with wireshark haha\n. Anyone?. No rush :)\n. Ok, was just floating the idea :) Feel free to close the issue. I'm on\nmobile or I'd do it myself.\n. Totally willing to hear if it aint broke, don't fix it on this. It's not really a big deal.. Yeah, they probably should be, but I can't be bothered at this point in time :). We can close this and wait until I can be bothered ... (Mondayitis haha) ... or just push it as is now and move them later on I guess ... \nHrmmm Lemme look tomorrow, got other stuff need to attend to . Removed the badge! Feel free make other any changes you want and merge!. > Do we need to indicate in some other way this library has full TypeScript definitions?\nI'm not sure! I'm kinda new to TypeScript myself. You'll note that I added a types entry to the package.json, which the TypeScript compiler is aware of, so it all should \"just work\". As far as badges etc for advertising goes ... . Here's an example of a repo with inline .d.ts files: https://github.com/aws/aws-sdk-js. It has no badge, but has a README section, which we could add at some point. \nCould slap one of the badges from here up top: https://ellerbrock.github.io/typescript-badges/. hopefully AWS don't sue me for plagiarizing their section! haha. I vaguely recall a similar issue, when using the @types/mqtt typescript bindings which led me to misuse the (subscribe??) function with a non conforming function overload ( yeah, yeah, JS lol ). Perhaps there's been some subtle changes ... since 1.x or a more recent release ... I've only used 2.x\nCheck that you're supplying the callbacks and options objects in the right order to subscribe/publish etc ... Read the source code for said functions for the ultimate truth :)  ( to check if the docs are wrong )\n```js\nMqttClient.prototype.subscribe = function () {\n  var packet\n  var args = Array.prototype.slice.call(arguments)\n  var subs = []\n  var obj = args.shift()\n  var callback = args.pop() || nop\n  var opts = args.pop()\n  var invalidTopic\n  var that = this\nif (typeof obj === 'string') {\n    obj = [obj]\n  }\nif (typeof callback !== 'function') {\n    opts = callback\n    callback = nop\n  }\n``\n. I believe so\n. Probably void is more appropriate than any as a return type ?\n. Soz, thought I saw it as 'any' ... never mind :)\n. See also: #575 . #585 . Any other issues you came across ?. @yohei1126 Thanks! Merged . Hi, you seem to be missing the@types/nodepackage. I believe we need to update the types index.d.ts to export more members than it currently is. I think I missed that because I was using a custom index, and importing the module viaimport * as mqtt from 'mqtt/tsso I could navigate to the source directly rather than the.d.ts` files.  \nWill fix exports with #592 . No, actually, it seems the index is exporting everything:\ntypescript\nexport * from './lib/client'\nexport * from './lib/connect'\nexport * from './lib/store'\nexport * from './lib/types'\nexport * from './lib/client-options'\nimport { MqttClient } from './lib/client'\nexport { MqttClient as Client }\n. The correct name for the options type is actually IClientOptions rather than ClientOptions. Be sure to npm install @types/node --save-dev in your project.. We might wanna add a CI test that involves compiling with various tsconfig settings eh?. Will get to it :) @ #592 . @yohei1126  \nDo you want to help me with this? Anything else need improvement? When I get a block of time I will look into it. Thanks. Exports seem fine, though we could do it more explicitly rather than using wildcard exports: https://github.com/mqttjs/MQTT.js/blob/master/types/index.d.ts. TODO: Add on/once overloads for all emitted events. Yohei, what do you mean ?\n. I can fix up the merge conflicts and add it to the CI I guess ... we can always revisit it. It's better than nothing right ? . I'm merging this, as it doesn't touch any actual code so it's safe to do so. We can improve it later . @yohei1126 \nFeel free to improve/add/etc of course!. Try another public broker.\n. broker.mqttdashboard.com\n. Thanks @yohei1126! sorry so slow to merge, have been really busy!. Sorry guys. I had a quick look the other day, but I wasn't sure. Been so busy :/\nI asked this question: Would you call it like publish('some/topic', null, function() {}) ?\nLet me try and answer that myself now. . Eh, I'm not even sure what I was asking myself before now haha :). What cases are the changes to the new publish/subscribe overload\ndefinitions intended to handle?\n. yes, would be great have someone else help out with TS maintenance.\nEvery time I remember to look at this, I'm usually wiped out and in email\nreading mode, with little time or energy left\nThis seems fine and the qos change clearly a fix, however I'm questioning\nthe need for the publish/subscribe changes?\nCan you state which cases it allows that it didn't before?\n. They (publish/subscribe) each had two overloads. One with 3 args, the other\nwith 2 (or 4/3 for publish) I thought any sensible case was already\ncovered. If you omitted opts, then you'd only have two args, and the 2 arg\noverride would be used, no?\nLets look at subscribe:\nSubscribe(topic, opts) ( uses 3 arg overload)\nSubscribe(topic, opts, callback) ( uses 3 arg overload)\nsubscribe(topic, callback) ( 2 arg overload)\nSubscribe(topic) (2 arg overload)\nThe existing definition handles those cases fine. What other case is this\nchange intended to handle?\nIs this something to do with strict null checks?\n@mcollina\nAre you saying passing an empty opts object should imply qos=0. And we\nshould fix the js rather than religiously follow the quirks in TS?\n. Hrmmm, looking at the JS code, it looks like we need to update the way the defaults are set, when an object is passed and missing some args. \nWe already have a dependency on xtend (https://www.npmjs.com/package/xtend) so we could probably use that.. I think @mcollina was saying that qos should NOT be required? That there\nshould be a qos=0 default. I don't quite understand, sorry.\n. I believe that's what @mcollina wants\n. Ugh, sorry, yes. Let me look in a few hours!\nOn Jul 11, 2017 6:01 PM, \"Yohei Onishi\" notifications@github.com wrote:\n\n@mcollina https://github.com/mcollina it seems @sublimator\nhttps://github.com/sublimator is super busy now..\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/626#issuecomment-314409746, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAgDmwcEZX7I2Kj40sIDn3uFX92iwUyJks5sM1YcgaJpZM4NrmKV\n.\n. @yohei1126 \n\nMany apologies for the long delay!. awsIotUrlsigner is just mock code, that must be provided by the user\n. hrmmm, that doesn't seem right because I've used mqtt with AWS IoT service,\nand some of the topics start with an $aws prefix\n. forage??\n. I'd say it is actually less common to have semicolons in TypeScript code,\nthough that might just be my preference speaking :) The fact that I don't\neven know clearly speaks to the invisibility/redundancy of them. Given the\nREQUIRED compilation step, it's pretty safe to omit semicolons in code, as\nthe compiler will pick up the few rare cases when they are actually\nrequired ( wrapping expressions in parentheses )\nI'd vote for consistently none :)\n. I don't really care either way :). Matteo, you need break\n. Take one. If it makes you feel better I broke my toe today kicking a door\nbetween myself and a mother beating ... child ...\nAll this will wait\n. oops. pushed fix. \n\n. need to kill these off. Should just inline the Url options ... playing around . typescript is a peer dependency of tslint\n. @mcollina \nWhat do you want exposed here? And once we've decided, should we only extend the IClientOptions with those, rather than \njust grabbing the kitchen sink?\n```\n\nu.parse('mqtt://www.broker.com/mqtt')\nUrl {\n  protocol: 'mqtt:',\n  slashes: true,\n  auth: null,\n  host: 'www.broker.com',\n  port: null,\n  hostname: 'www.broker.com',\n  hash: null,\n  search: null,\n  query: null,\n  pathname: '/mqtt',\n  path: '/mqtt',\n  href: 'mqtt://www.broker.com/mqtt' }\n```\n\nI'll switch to TypeScript branch and find usages and report back. these weren't prefixed with a _ so I marked them public (default in TypeScript if not specifide) (the first tslint configuration, before I used the standard variant wanted explicit so I just used the --fix options) \nIn any case, I guess we don't really want them exposed?. @mcollina I had a crack at cleaning up the url.parse/xtend section. Take a look. Personally I'd just remove this .... I did it this way due to a test:\nit('should throw an error when called with no protocol specified - with options', function () {\n      (function () {\n        mqtt.connect('tcp://foo.bar.com', { protocol: null })\n      }).should.throw('Missing protocol')\n    })\n. It's interesting that the servers option uses {host, port} keys:\nopts.host = opts.servers[client._reconnectCount].host\n      opts.port = opts.servers[client._reconnectCount].port\n      opts.hostname = opts.host\nPerhaps at some point it would be nice just to use one or the other (of hostname/host)\n. I mean use only one of host or hostname consistently. Hrmmm, ok, so I looked up the url.parse() function and\n\nhost is supposedly the hosname + ':' + port . You could argue that to be consistent with deprecating, should leave the hostname until it's completely removed. Assuming you guys are down with that direction.. ",
    "modeio": "I'm looking at this for a large scale system > 100k clients.   Could you provide some guidance on how to scale horizontally with Mosca?\n\nOn Jul 14, 2014, at 9:51 AM, Matteo Collina notifications@github.com wrote:\nMQTT.js does not implement the full specification of a Broker.\nYou can use Mosca in place of Mosquitto and have all the customizability of node.js.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes in our case each client id would be unique.  \nOn Jul 14, 2014, at 10:51 PM, Matteo Collina notifications@github.com wrote:\n@mocheng that's MQTT, and any other broker will behave in the exact same way.. A clientId is defined to be unique: a good solution is to use the MAC address.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "joltup": "Would redis work better than rabbitmq for scaling horizontally? Why is would that be the case?\n. What about mongodb?\n. ",
    "ej81": "Indeed it's server side (Z-Way). I'll have to use a separate process as a proxy between the REST API and MQTT then. Thanks for your quick response.\n. ",
    "cmyang001": "http://eclipse.org/paho/clients/js/\nThis is provided by IBM. \n. ",
    "rossjourdain": "Hey @mcollina, I'd quite like to use this but I'm not sure how to prevent the puback from going out if I haven't managed to take care of the message yet.  Is that possible now?\n. I'm more that happy to contribute how ever I can once I get my head around this ;)\nI can't seem to find any examples of the handleMessage process.\nWhen I set the handleMessage function, it fires no trouble but the puback packet goes out regardless.  From my reading of the code, there's no way anything but that can happen.\nI guess one way to do it is to make handleMessage take a success callback as well as a failure callback.  Something like this?\n``` javascript\nclient.handleMessage = function(packet, success_cb, failure_cb) {\n  console.log('handleMessage callback: ' + packet.cmd);\nif(processTheMessage(packet.payload)) {\n    success_cb();\n  } else {\n    failure_cb():\n  }\n}\n```\nWhile the client.js side is something like this:\nModified version of:\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L776-L800\njavascript\nswitch (qos) {\n    case 2:\n      this.incomingStore.put(packet, function () {\n        that._sendPacket({cmd: 'pubrec', messageId: mid}, done);\n      });\n      break;\n    case 1:\n      this.emit('message', topic, message, packet);\n      // Send the puback on success only\n      this.handleMessage(packet, function(){\n        that._sendPacket({cmd: 'puback', messageId: mid}, done);\n      }, done);\n      break;\n    case 0:\n      this.emit('message', topic, message, packet);\n      this.handleMessage(packet, done, done);\n      break;\n    default:\n      // do nothing\n      // log or throw an error about unknown qos\n      break;\n  }\nDoes that make any sense at all @mcollina?\nBy the way, thanks for all your work on this! It's a great package.\n. ",
    "monteslu": "thanks!\n. ",
    "dglozic": "Phew, good :-). For a while I was thinking it was there and I was just blind :-).\nI don't know enough about the innards of the module but I agree with (4) - we are only using the client.\nI realized this was a problem during a meetup when somebody asked me how we handle a callback crashing while processing the message and I realized we don't :-).\n. It is entirely possible. I was reading the Java client and it has an explicit 'ack()' on the message you can call. I don't know if it is a 'feature' of that specific client only, and how it is implemented. I also think this only works for QoS >=1.\n. That's now what I was after though - I was after an explicit ack at the end of the on ('message', ...) callback. But now that I am re-reading Eclipse PAHO Java MQTT client, I cannot find ack(). I may have mixed it up with the AMQP client that DOES have an option to explicitly acknowledge the message in the subscriber upon receipt (when auto-acknowledgement is set to false). \nSigh... Based on this, you can close the issue as 'don't mix your protocols' :-).\n. A did a bit of extra digging and since we are also using node-amqp module, I found out that it allows for the 'host' property to be specified as an array. An array of URLs would be more flexible, but if you set up multiple RabbitMQ nodes using the same port, user and password, it would work (although it is harder to test locally since you cannot install two rabbitmq instances in localhost without using different port numbers).\n. I was searching around a bit and found that an alternative would be to stand up an HAProxy in front of RabbitMQ nodes and continue to use one virtual address. HAProxy would handle TCP proxying and health checks/failover. We will try that first. Or even LVS on our Linux VMs. \nThe advantage of the client handling multiple URLs is that you don't add another single point of failure that you need a backup for :-).\n. It came across in my searches, although considering I work for IBM, I am most decidedly not on AWS :-).\n. Yes, sorry, I forgot am not the only one reading these issue :-).\n. ",
    "johnnyman727": "@mcollina I had to fix one issue with our Buffer parsing but now it works great! Tessel can act as a client or server. I don't recommend using it as a server because it will probably crash if it gets more than four connections.\nThanks for all your help!\n. ",
    "boristian": "Hi. Sorry,  I am on a trip right now. I will have time to look at it around thursday.\n. So, I added some unit tests. Since I'm relatively new to the field, I don't know for sure if this is alright and enough.\n. Any opinions?\n. I hope the indentions are correct now.\n. Hi,\nsorry, I recently switched my editor and have obviously some trouble with the tab behavior :) .\n. ",
    "shajumohamed": "so what if there is a publishing error?\n. ",
    "alexislg2": "I don't send any data, I'm just tryng to have a living connection 24/7 to see how much data it requires per month.\n``` js\nvar mqtt = require('mqtt')\nvar client = mqtt.createClient(1883, 'my_mosquitto_broker_url',\n    {\n    protocolId: 'MQIsdp',\n    protocolVersion: 3,\n    clientId: 'my3Gdevice',\n    keepalive: 60 // also tried 600, 3600\n});\nclient.on('message', function (topic, message) {\n    console.log('topic:', topic);\n    console.log('message:', message);\n    }\n);\nclient.on('connect', function(){\n    console.log('connected');\n    reconnection(client);\n});\nclient.on('close', function(){console.log('mqtt connection closed');});\nfunction reconnection(client){\n    client.unsubscribe('#', function(){\n        client.subscribe('channel1/' + sn, {qos: 2});\n        client.subscribe('channel2/' + sn, {qos: 2});\n    });\n}\n``\n. Wait... I just discovered I have other traffic on the connection. I have to make sure only mqtt use the line before making any precise measurement\nI keep you in touch\n. It's working well I have now a less than 1kB/hr traffic with 3600\nSorry for my mistake\nYou can close the issue\nThanks again\n. I was not talking about thekeepalive` parameter which is the time between\n2 pings but about the timeout option for each ping\n On Nov 14, 2014 5:21 PM, \"Matteo Collina\" notifications@github.com wrote:\n\nThe current timeout is 60 seconds, you can increase it by passing the\nkeepalive option:\nhttps://github.com/adamvr/MQTT.js/blob/master/lib/client.js#L13\nAlso see\nhttps://github.com/adamvr/MQTT.js/wiki/client#mqttclientstreambuilder-options\n.\nI'm closing, reopen if it's still a problem.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/adamvr/MQTT.js/issues/230#issuecomment-63088753.\n. Thanks\n. \n",
    "256dpi": "I'm relying on this feature in my project. I like that the library provides the client and server code, as a lot node.js modules do. Maybe the documentation can be updated to point people towards using mosquitto or similar brokers instead of building their own?\n. Ok, I think I got your point. Using just the createServer API does not actually create a working MQTT \"server\".\nI still think it would be nice to have that node like API to implement a server somewhere available to prevent duplication? Maybe a module that provides this higher level API and can be used by my project, mosca, mows, ...?\n. I created a repository here: https://github.com/256dpi/mqtt-server\n. Would be cool to help contributing as I'm dependent on the libraries in my side project.\nThe 'create-stream-server' module is a good idea. Maybe wen can transfer the mqtt-server repo to mqttjs and work with PRs from there. I have also other ideas in my head, which I would like to discuss.\n. Cool thanks! I'll let you know!\n. looks cool! :+1: \n. Thanks for the work, but can you elaborate what the benefit of that approach is?\n. IMHO it is unnecessary. @mcollina What do you think?\n. The idea of mqtt-stack was basically to provide an \"express\" like way for building MQTT brokers.\nAs with express, the developer and can build his app out of middlewares that integrate in the stack and together provide the functionality of a broker. That way, one can easily use standard middlewares, while implementing a custom backend or authentication mechanism. The code is documented and there is also an example which should give you an idea.\n. Cool to see that the projects will be continued! Please ask me if you need more detailed information about the projects.\n. I just created a browser lib from MQTT.js 2.0.1 using browserify and my broker rejected the connection as the messages are sent using the TextMessage WebSocket message type. My latest build from 1.4.0 still uses the BinaryMessage.\n. Yes npm installed v3.3.0.\nI was testing with Safari and a recent Chrome.\n. I'll first make a fix for shiftr.io and look into it if I have time. ;)\n. ",
    "jpolaroid1978": "Hi,\nSure I would be happy to help any way that I can. What would be the optimal way to get a proposed change out to you for review?\nWe saw the problem while trying the client out yesterday with the IBM IoT Foundation service https://internetofthings.ibmcloud.com/  . \n. Hi,\nI sent a pull request for mqtt-packet. \nAfter looking at some other clients, it is not clear to me yet what to do as far as handling other than not failing when the bit is set (which the mqtt-packet fix achieves I think).\nPlease let me know what you think, thanks!\n. Hi,\nI took a look at it, Could @meilon document exactly the steps to recreate? I tried with the above sample and it seemed to work for me on x86. Here are my steps: (note mqtt.252b.js is the exact same code as originally posted)\n1  node mqtt.252b.js\n this.options.clean is false\n this.options.qos is undefined end\n13:09:29 GMT-0600 (CST) [MQTT] connected!\n13:09:30 GMT-0600 (CST) [MQTT] Subscribed to topic /poke with QoS 2\n< next output showed up after step 2>\n13:09:39 GMT-0600 (CST) [MQTT] Topic: /poke, message: hi\n13:09:39 GMT-0600 (CST) [MQTT] Published alarm to \"/ping\"\n2 ./mqtt.js publish -v --host test.mosquitto.org -t /poke -m \"hi\"\n this.options.clean is true\n this.options.qos is 0 end\nWith those above steps i didn't see the offline part. What steps do you do in order to get the offline?\n. Hi I think i would like to work on this. Do the issues get assigned to prevent someone else from duplicating the effort at the same time?\n. I just recreated it on a local setup with mosquitto. It seems that the client does not receive the PINGRESP sent by the server in this particular usage pattern.\n\nclient trace\ngenerate:pingreq\n{ cmd: 'pingreq' }\n15:58:08 GMT-0600 (CST) [MQTT] now offline!\n\nmosquitto trace\n1424210278: Received PINGREQ from delayed-demo\n1424210278: Sending PINGRESP to delayed-demo\n1424210288: Socket error on client delayed-demo, disconnecting.\n. ok i will work on it , thank you\n. My apologies, i got distracted with some other work, including having to move all of my furniture, but I still plan to do this if the delay is not too much trouble for everyone. Thanks!\n. Hi, \nI got the mocha test running, but could use some advice about where you think the test would be best placed. Do you think it should go in the abstract_client.js file or where is the best place?\nThanks,\nMarc\n. is there another test that  you think is close to what we need that would be a good starting point for me to check that pattern\n. i sent a pr with what i have done, hope it helps!\n. Hi,\nI see the build failed, Its all passing when i run it, please let me know what next steps are.\n225 passing (24s)\n  2 pending\n. ",
    "ForbesLindesay": "No, but actively considering it.  He other big (but much more work) saving would be to omit the requirement for Buffer to be loaded.  Unfortunately that would be much more difficult.  I've been working on a project to try and do data flow analysis to figure out which methods of Buffer are actually used and then remove all the dead code, which may well do the trick, but it's a tall order and I haven't actually got very far.\nThe other thing I would need to actually support this in production would be a fallback to long-polling (which I'm guessing would also require some additional work on the server)\n. ",
    "gorhgorh": "Sure and yes I agree it should error, looking at the code to prevent that, a simple protocol check should do the trick\n. we may use a pure feature detection in the buildBuilderBrowser function (so we could also test if the browser is ws ready) \nI'll make a reduced test case tonight and see if that work\n. Sorry I totally forgot about this thing ... will try to have a look at it soon !\n. ",
    "sguilly": "With version > 1.0.x, both method \"createClient\" and \"connect\" don't succes to etablish the connection with my broker RabbitMQ 3.2.4, Erlang R16B03.\nEverything work fine with 0.3.13.\n. The connection success with your additionnal parameters:\nprotocolId: 'MQIsdp',\nprotocolVersion: 3,\nI use now :\nvar options = {\n    port: 1883,\n    host: '200.200.200.200',\n    clientId: 'guest',\n    username: 'guest',\n    password: 'guest',\n    keepalive: 60,\n    reconnectPeriod: 1000,\n    protocolId: 'MQIsdp',\n    protocolVersion: 3,\n    clean: true,\n    encoding: 'utf8'\n};\nvar clientMqtt = mqtt.connect(options);\nThanks for your help.\n. ",
    "mark-bom": "Thanks; success!  Yes, it was the first install.  Not sure how long it took, but I left it going over night. \n. ",
    "simplesmiler": "Are you running windows or linux?\nI've ran into quite a lot of similar issues on windows 7. They were\nipv4/ipv6 related.\nOn 12 February 2015 at 22:40, Michael Karliner notifications@github.com\nwrote:\n\nI've been trying various variations on\nclient = mqtt.connect(\"ws://192.168.10.22:9001\", {protocolVersion: 3,\nprotocolId: \"MQIsdp\", keepalive: 10}); all day.\nThe same code connects to a local instance of mosca OK. client.connected\ngives me false, but no other information. On the mosquitto end, I get no\nsign that it has seen a connection attempt, even with verbose logging.\nHowever, it is this code will give an error if, say, I change the port, and\nnetstat on the target machine shows me that there is a socket connection.\nI'm at a loss on how to debug further.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/251.\n. \n",
    "mkarliner": "I'm happy to provide access to my test case (ssh, web) if it helps anyone.\nBTW @simplesmiler, mosquitto is on ubuntu 14.04, with a git repo build, and the browser and (meteor) server are on Yosemite.\n. Thanks Roger. I've done as you said, and here is the log.\nIt shows my doorbell bot connecting from a ruby script, which I'd forgotten about (sorry) and then the web socket attempt. Hope this helps.\n1423830271: mosquitto version 1.4 (build date 2015-02-11 14:56:26+0000) starting\n1423830271: Config loaded from mosquitto.conf.\n1423830271: Opening ipv4 listen socket on port 1883.\n1423830271: Opening ipv6 listen socket on port 1883.\n1423830271: Opening websockets listen socket on port 9001.\n[1423830271:1857] NOTICE: Initial logging level 255\n[1423830271:1857] NOTICE: Library version: 1.3 bb87ac8\n[1423830271:1858] NOTICE: IPV6 not compiled in\n[1423830271:1858] NOTICE: libev support not compiled in\n[1423830271:1858] INFO:  LWS_MAX_HEADER_LEN: 1024\n[1423830271:1858] INFO:  LWS_MAX_PROTOCOLS: 5\n[1423830271:1858] INFO:  SPEC_LATEST_SUPPORTED: 13\n[1423830271:1858] INFO:  AWAITING_TIMEOUT: 5\n[1423830271:1859] INFO:  SYSTEM_RANDOM_FILEPATH: '/dev/urandom'\n[1423830271:1859] INFO:  LWS_MAX_ZLIB_CONN_BUFFER: 65536\n[1423830271:1861] NOTICE:  static allocation: 4480 + (12 x 1024 fds) = 16768 bytes\n[1423830271:1862] INFO:  LWS_MAX_EXTENSIONS_ACTIVE: 3\n[1423830271:1863] NOTICE:  canonical_hostname = verdi\n[1423830271:1863] NOTICE:  per-conn mem: 152 + 2140 headers + protocol rx buf\n[1423830271:1863] NOTICE:  Compiled with OpenSSL support\n[1423830271:1864] NOTICE:  Using non-SSL mode\n[1423830271:1873] INFO: insert_wsi_socket_into_fds: wsi=0x8fe6170, sock=8, fds pos=1\n[1423830271:1874] NOTICE:  Listening on port 9001\n[1423830271:1874] PARSER:   Protocol: http-only\n[1423830271:1874] PARSER:   Protocol: mqtt\n[1423830271:1874] PARSER:   Protocol: mqttv3.1\n1423830271: New connection from 192.168.10.195 on port 1883.\n1423830271: New client connected from 192.168.10.195 as mqttjs_af914e4c (c1, k10).\n1423830271: Sending CONNACK to mqttjs_af914e4c (0, 0)\n1423830279: New connection from 192.168.10.195 on port 1883.\n1423830279: New client connected from 192.168.10.195 as rubybl683bgcbg8tmyh4 (c1, k15, u'mike').\n1423830279: Sending CONNACK to rubybl683bgcbg8tmyh4 (0, 0)\n1423830279: Received SUBSCRIBE from rubybl683bgcbg8tmyh4\n1423830279:     doorbell (QoS 0)\n1423830279: rubybl683bgcbg8tmyh4 0 doorbell\n1423830279: Sending SUBACK to rubybl683bgcbg8tmyh4\n[1423830279:3332] DEBUG: accepted new conn  port 59467 on fd=11\n[1423830279:3333] INFO: insert_wsi_socket_into_fds: wsi=0x8fe7848, sock=11, fds pos=2\n[1423830279:4336] PARSER: issuing 507 bytes to parser\n[1423830279:4337] PARSER: WSI_TOKEN_NAME_PART 'G'\n[1423830279:4337] PARSER: WSI_TOKEN_NAME_PART 'E'\n[1423830279:4337] PARSER: WSI_TOKEN_NAME_PART 'T'\n[1423830279:4338] PARSER: WSI_TOKEN_NAME_PART ' '\n[1423830279:4338] PARSER: known hdr 0\n[1423830279:4338] PARSER: WSI_TOK_(0) '/'\n[1423830279:4338] PARSER: WSI_TOK_(0) ' '\n[1423830279:4338] PARSER: WSI_TOK_(15) 'H'\n[1423830279:4338] PARSER: WSI_TOK_(15) 'T'\n[1423830279:4339] PARSER: WSI_TOK_(15) 'T'\n[1423830279:4339] PARSER: WSI_TOK_(15) 'P'\n[1423830279:4339] PARSER: WSI_TOK_(15) '/'\n[1423830279:4339] PARSER: WSI_TOK_(15) '1'\n[1423830279:4340] PARSER: WSI_TOK_(15) '.'\n[1423830279:4340] PARSER: WSI_TOK_(15) '1'\n[1423830279:4340] PARSER: WSI_TOK_(15) '\n'\n[1423830279:4340] PARSER: \n[1423830279:4340] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4340] PARSER: WSI_TOKEN_NAME_PART 'H'\n[1423830279:4341] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4341] PARSER: WSI_TOKEN_NAME_PART 's'\n[1423830279:4341] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4341] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4341] PARSER: known hdr 3\n[1423830279:4341] PARSER: WSI_TOK_(3) ' '\n[1423830279:4342] PARSER: WSI_TOK_(3) '1'\n[1423830279:4342] PARSER: WSI_TOK_(3) '9'\n[1423830279:4342] PARSER: WSI_TOK_(3) '2'\n[1423830279:4342] PARSER: WSI_TOK_(3) '.'\n[1423830279:4343] PARSER: WSI_TOK_(3) '1'\n[1423830279:4343] PARSER: WSI_TOK_(3) '6'\n[1423830279:4343] PARSER: WSI_TOK_(3) '8'\n[1423830279:4343] PARSER: WSI_TOK_(3) '.'\n[1423830279:4343] PARSER: WSI_TOK_(3) '1'\n[1423830279:4344] PARSER: WSI_TOK_(3) '0'\n[1423830279:4344] PARSER: WSI_TOK_(3) '.'\n[1423830279:4344] PARSER: WSI_TOK_(3) '2'\n[1423830279:4344] PARSER: WSI_TOK_(3) '2'\n[1423830279:4344] PARSER: WSI_TOK_(3) ':'\n[1423830279:4345] PARSER: WSI_TOK_(3) '9'\n[1423830279:4345] PARSER: WSI_TOK_(3) '0'\n[1423830279:4345] PARSER: WSI_TOK_(3) '0'\n[1423830279:4346] PARSER: WSI_TOK_(3) '1'\n[1423830279:4347] PARSER: WSI_TOK_(3) '\n'\n[1423830279:4347] PARSER: \n[1423830279:4348] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4349] PARSER: WSI_TOKEN_NAME_PART 'C'\n[1423830279:4350] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4350] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4351] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4352] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4352] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4353] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4354] PARSER: WSI_TOKEN_NAME_PART 'i'\n[1423830279:4355] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4355] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4356] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4357] PARSER: known hdr 4\n[1423830279:4357] PARSER: WSI_TOK_(4) ' '\n[1423830279:4358] PARSER: WSI_TOK_(4) 'U'\n[1423830279:4359] PARSER: WSI_TOK_(4) 'p'\n[1423830279:4359] PARSER: WSI_TOK_(4) 'g'\n[1423830279:4360] PARSER: WSI_TOK_(4) 'r'\n[1423830279:4360] PARSER: WSI_TOK_(4) 'a'\n[1423830279:4362] PARSER: WSI_TOK_(4) 'd'\n[1423830279:4363] PARSER: WSI_TOK_(4) 'e'\n[1423830279:4364] PARSER: WSI_TOK_(4) '\n'\n[1423830279:4364] PARSER: \n[1423830279:4365] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4366] PARSER: WSI_TOKEN_NAME_PART 'P'\n[1423830279:4366] PARSER: WSI_TOKEN_NAME_PART 'r'\n[1423830279:4367] PARSER: WSI_TOKEN_NAME_PART 'a'\n[1423830279:4368] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4368] PARSER: WSI_TOKEN_NAME_PART 'm'\n[1423830279:4369] PARSER: WSI_TOKEN_NAME_PART 'a'\n[1423830279:4370] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4370] PARSER: known hdr 23\n[1423830279:4371] PARSER: WSI_TOK_(23) ' '\n[1423830279:4371] PARSER: WSI_TOK_(23) 'n'\n[1423830279:4372] PARSER: WSI_TOK_(23) 'o'\n[1423830279:4373] PARSER: WSI_TOK_(23) '-'\n[1423830279:4374] PARSER: WSI_TOK_(23) 'c'\n[1423830279:4374] PARSER: WSI_TOK_(23) 'a'\n[1423830279:4375] PARSER: WSI_TOK_(23) 'c'\n[1423830279:4376] PARSER: WSI_TOK_(23) 'h'\n[1423830279:4377] PARSER: WSI_TOK_(23) 'e'\n[1423830279:4377] PARSER: WSI_TOK_(23) '\n'\n[1423830279:4378] PARSER: \n[1423830279:4379] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4379] PARSER: WSI_TOKEN_NAME_PART 'C'\n[1423830279:4380] PARSER: WSI_TOKEN_NAME_PART 'a'\n[1423830279:4381] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4381] PARSER: WSI_TOKEN_NAME_PART 'h'\n[1423830279:4382] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4383] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4383] PARSER: WSI_TOKEN_NAME_PART 'C'\n[1423830279:4384] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4385] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4385] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4386] PARSER: WSI_TOKEN_NAME_PART 'r'\n[1423830279:4387] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4387] PARSER: WSI_TOKEN_NAME_PART 'l'\n[1423830279:4388] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4389] PARSER: known hdr 24\n[1423830279:4389] PARSER: WSI_TOK_(24) ' '\n[1423830279:4390] PARSER: WSI_TOK_(24) 'n'\n[1423830279:4391] PARSER: WSI_TOK_(24) 'o'\n[1423830279:4391] PARSER: WSI_TOK_(24) '-'\n[1423830279:4392] PARSER: WSI_TOK_(24) 'c'\n[1423830279:4393] PARSER: WSI_TOK_(24) 'a'\n[1423830279:4394] PARSER: WSI_TOK_(24) 'c'\n[1423830279:4394] PARSER: WSI_TOK_(24) 'h'\n[1423830279:4395] PARSER: WSI_TOK_(24) 'e'\n[1423830279:4396] PARSER: WSI_TOK_(24) '\n'\n[1423830279:4396] PARSER: \n[1423830279:4397] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4397] PARSER: WSI_TOKEN_NAME_PART 'U'\n[1423830279:4398] PARSER: WSI_TOKEN_NAME_PART 'p'\n[1423830279:4399] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4400] PARSER: WSI_TOKEN_NAME_PART 'r'\n[1423830279:4400] PARSER: WSI_TOKEN_NAME_PART 'a'\n[1423830279:4403] PARSER: WSI_TOKEN_NAME_PART 'd'\n[1423830279:4403] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4404] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4405] PARSER: known hdr 5\n[1423830279:4405] PARSER: WSI_TOK_(5) ' '\n[1423830279:4406] PARSER: WSI_TOK_(5) 'w'\n[1423830279:4407] PARSER: WSI_TOK_(5) 'e'\n[1423830279:4407] PARSER: WSI_TOK_(5) 'b'\n[1423830279:4408] PARSER: WSI_TOK_(5) 's'\n[1423830279:4409] PARSER: WSI_TOK_(5) 'o'\n[1423830279:4409] PARSER: WSI_TOK_(5) 'c'\n[1423830279:4411] PARSER: WSI_TOK_(5) 'k'\n[1423830279:4412] PARSER: WSI_TOK_(5) 'e'\n[1423830279:4412] PARSER: WSI_TOK_(5) 't'\n[1423830279:4413] PARSER: WSI_TOK_(5) '\n'\n[1423830279:4414] PARSER: \n[1423830279:4415] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4415] PARSER: WSI_TOKEN_NAME_PART 'O'\n[1423830279:4416] PARSER: WSI_TOKEN_NAME_PART 'r'\n[1423830279:4417] PARSER: WSI_TOKEN_NAME_PART 'i'\n[1423830279:4418] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4418] PARSER: WSI_TOKEN_NAME_PART 'i'\n[1423830279:4419] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4420] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4420] PARSER: known hdr 6\n[1423830279:4421] PARSER: WSI_TOK_(6) ' '\n[1423830279:4422] PARSER: WSI_TOK_(6) 'h'\n[1423830279:4422] PARSER: WSI_TOK_(6) 't'\n[1423830279:4423] PARSER: WSI_TOK_(6) 't'\n[1423830279:4424] PARSER: WSI_TOK_(6) 'p'\n[1423830279:4425] PARSER: WSI_TOK_(6) ':'\n[1423830279:4425] PARSER: WSI_TOK_(6) '/'\n[1423830279:4426] PARSER: WSI_TOK_(6) '/'\n[1423830279:4426] PARSER: WSI_TOK_(6) 'l'\n[1423830279:4427] PARSER: WSI_TOK_(6) 'o'\n[1423830279:4428] PARSER: WSI_TOK_(6) 'c'\n[1423830279:4428] PARSER: WSI_TOK_(6) 'a'\n[1423830279:4429] PARSER: WSI_TOK_(6) 'l'\n[1423830279:4430] PARSER: WSI_TOK_(6) 'h'\n[1423830279:4430] PARSER: WSI_TOK_(6) 'o'\n[1423830279:4431] PARSER: WSI_TOK_(6) 's'\n[1423830279:4432] PARSER: WSI_TOK_(6) 't'\n[1423830279:4433] PARSER: WSI_TOK_(6) ':'\n[1423830279:4433] PARSER: WSI_TOK_(6) '3'\n[1423830279:4434] PARSER: WSI_TOK_(6) '0'\n[1423830279:4435] PARSER: WSI_TOK_(6) '0'\n[1423830279:4435] PARSER: WSI_TOK_(6) '0'\n[1423830279:4436] PARSER: WSI_TOK_(6) '\n'\n[1423830279:4437] PARSER: \n[1423830279:4437] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4438] PARSER: WSI_TOKEN_NAME_PART 'S'\n[1423830279:4439] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4439] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4440] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4441] PARSER: WSI_TOKEN_NAME_PART 'W'\n[1423830279:4442] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4443] PARSER: WSI_TOKEN_NAME_PART 'b'\n[1423830279:4443] PARSER: WSI_TOKEN_NAME_PART 'S'\n[1423830279:4444] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4445] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4445] PARSER: WSI_TOKEN_NAME_PART 'k'\n[1423830279:4446] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4447] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4447] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4448] PARSER: WSI_TOKEN_NAME_PART 'V'\n[1423830279:4449] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4449] PARSER: WSI_TOKEN_NAME_PART 'r'\n[1423830279:4450] PARSER: WSI_TOKEN_NAME_PART 's'\n[1423830279:4451] PARSER: WSI_TOKEN_NAME_PART 'i'\n[1423830279:4451] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4452] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4452] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4453] PARSER: known hdr 33\n[1423830279:4454] PARSER: WSI_TOK_(33) ' '\n[1423830279:4455] PARSER: WSI_TOK_(33) '1'\n[1423830279:4455] PARSER: WSI_TOK_(33) '3'\n[1423830279:4456] PARSER: WSI_TOK_(33) '\n'\n[1423830279:4457] PARSER: \n[1423830279:4457] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4458] PARSER: WSI_TOKEN_NAME_PART 'U'\n[1423830279:4459] PARSER: WSI_TOKEN_NAME_PART 's'\n[1423830279:4459] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4460] PARSER: WSI_TOKEN_NAME_PART 'r'\n[1423830279:4461] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4461] PARSER: WSI_TOKEN_NAME_PART 'A'\n[1423830279:4462] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4463] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4463] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4464] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4465] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4465] PARSER: known hdr 69\n[1423830279:4466] PARSER: WSI_TOK_(69) ' '\n[1423830279:4466] PARSER: WSI_TOK_(69) 'M'\n[1423830279:4467] PARSER: WSI_TOK_(69) 'o'\n[1423830279:4468] PARSER: WSI_TOK_(69) 'z'\n[1423830279:4468] PARSER: WSI_TOK_(69) 'i'\n[1423830279:4469] PARSER: WSI_TOK_(69) 'l'\n[1423830279:4470] PARSER: WSI_TOK_(69) 'l'\n[1423830279:4470] PARSER: WSI_TOK_(69) 'a'\n[1423830279:4471] PARSER: WSI_TOK_(69) '/'\n[1423830279:4472] PARSER: WSI_TOK_(69) '5'\n[1423830279:4473] PARSER: WSI_TOK_(69) '.'\n[1423830279:4474] PARSER: WSI_TOK_(69) '0'\n[1423830279:4475] PARSER: WSI_TOK_(69) ' '\n[1423830279:4475] PARSER: WSI_TOK_(69) '('\n[1423830279:4476] PARSER: WSI_TOK_(69) 'M'\n[1423830279:4477] PARSER: WSI_TOK_(69) 'a'\n[1423830279:4477] PARSER: WSI_TOK_(69) 'c'\n[1423830279:4478] PARSER: WSI_TOK_(69) 'i'\n[1423830279:4479] PARSER: WSI_TOK_(69) 'n'\n[1423830279:4479] PARSER: WSI_TOK_(69) 't'\n[1423830279:4480] PARSER: WSI_TOK_(69) 'o'\n[1423830279:4481] PARSER: WSI_TOK_(69) 's'\n[1423830279:4482] PARSER: WSI_TOK_(69) 'h'\n[1423830279:4483] PARSER: WSI_TOK_(69) ';'\n[1423830279:4484] PARSER: WSI_TOK_(69) ' '\n[1423830279:4485] PARSER: WSI_TOK_(69) 'I'\n[1423830279:4485] PARSER: WSI_TOK_(69) 'n'\n[1423830279:4486] PARSER: WSI_TOK_(69) 't'\n[1423830279:4487] PARSER: WSI_TOK_(69) 'e'\n[1423830279:4487] PARSER: WSI_TOK_(69) 'l'\n[1423830279:4488] PARSER: WSI_TOK_(69) ' '\n[1423830279:4488] PARSER: WSI_TOK_(69) 'M'\n[1423830279:4489] PARSER: WSI_TOK_(69) 'a'\n[1423830279:4490] PARSER: WSI_TOK_(69) 'c'\n[1423830279:4490] PARSER: WSI_TOK_(69) ' '\n[1423830279:4491] PARSER: WSI_TOK_(69) 'O'\n[1423830279:4492] PARSER: WSI_TOK_(69) 'S'\n[1423830279:4492] PARSER: WSI_TOK_(69) ' '\n[1423830279:4493] PARSER: WSI_TOK_(69) 'X'\n[1423830279:4494] PARSER: WSI_TOK_(69) ' '\n[1423830279:4495] PARSER: WSI_TOK_(69) '1'\n[1423830279:4495] PARSER: WSI_TOK_(69) '0'\n[1423830279:4496] PARSER: WSI_TOK_(69) ''\n[1423830279:4496] PARSER: WSI_TOK(69) '1'\n[1423830279:4497] PARSER: WSI_TOK_(69) '0'\n[1423830279:4498] PARSER: WSI_TOK_(69) ''\n[1423830279:4498] PARSER: WSI_TOK(69) '1'\n[1423830279:4499] PARSER: WSI_TOK_(69) ')'\n[1423830279:4500] PARSER: WSI_TOK_(69) ' '\n[1423830279:4500] PARSER: WSI_TOK_(69) 'A'\n[1423830279:4501] PARSER: WSI_TOK_(69) 'p'\n[1423830279:4502] PARSER: WSI_TOK_(69) 'p'\n[1423830279:4503] PARSER: WSI_TOK_(69) 'l'\n[1423830279:4503] PARSER: WSI_TOK_(69) 'e'\n[1423830279:4504] PARSER: WSI_TOK_(69) 'W'\n[1423830279:4505] PARSER: WSI_TOK_(69) 'e'\n[1423830279:4505] PARSER: WSI_TOK_(69) 'b'\n[1423830279:4506] PARSER: WSI_TOK_(69) 'K'\n[1423830279:4507] PARSER: WSI_TOK_(69) 'i'\n[1423830279:4507] PARSER: WSI_TOK_(69) 't'\n[1423830279:4508] PARSER: WSI_TOK_(69) '/'\n[1423830279:4509] PARSER: WSI_TOK_(69) '5'\n[1423830279:4509] PARSER: WSI_TOK_(69) '3'\n[1423830279:4510] PARSER: WSI_TOK_(69) '7'\n[1423830279:4511] PARSER: WSI_TOK_(69) '.'\n[1423830279:4512] PARSER: WSI_TOK_(69) '3'\n[1423830279:4512] PARSER: WSI_TOK_(69) '6'\n[1423830279:4513] PARSER: WSI_TOK_(69) ' '\n[1423830279:4514] PARSER: WSI_TOK_(69) '('\n[1423830279:4515] PARSER: WSI_TOK_(69) 'K'\n[1423830279:4515] PARSER: WSI_TOK_(69) 'H'\n[1423830279:4516] PARSER: WSI_TOK_(69) 'T'\n[1423830279:4517] PARSER: WSI_TOK_(69) 'M'\n[1423830279:4517] PARSER: WSI_TOK_(69) 'L'\n[1423830279:4518] PARSER: WSI_TOK_(69) ','\n[1423830279:4519] PARSER: WSI_TOK_(69) ' '\n[1423830279:4519] PARSER: WSI_TOK_(69) 'l'\n[1423830279:4520] PARSER: WSI_TOK_(69) 'i'\n[1423830279:4520] PARSER: WSI_TOK_(69) 'k'\n[1423830279:4522] PARSER: WSI_TOK_(69) 'e'\n[1423830279:4523] PARSER: WSI_TOK_(69) ' '\n[1423830279:4523] PARSER: WSI_TOK_(69) 'G'\n[1423830279:4524] PARSER: WSI_TOK_(69) 'e'\n[1423830279:4525] PARSER: WSI_TOK_(69) 'c'\n[1423830279:4525] PARSER: WSI_TOK_(69) 'k'\n[1423830279:4526] PARSER: WSI_TOK_(69) 'o'\n[1423830279:4526] PARSER: WSI_TOK_(69) ')'\n[1423830279:4527] PARSER: WSI_TOK_(69) ' '\n[1423830279:4528] PARSER: WSI_TOK_(69) 'C'\n[1423830279:4528] PARSER: WSI_TOK_(69) 'h'\n[1423830279:4529] PARSER: WSI_TOK_(69) 'r'\n[1423830279:4530] PARSER: WSI_TOK_(69) 'o'\n[1423830279:4530] PARSER: WSI_TOK_(69) 'm'\n[1423830279:4531] PARSER: WSI_TOK_(69) 'e'\n[1423830279:4532] PARSER: WSI_TOK_(69) '/'\n[1423830279:4532] PARSER: WSI_TOK_(69) '4'\n[1423830279:4533] PARSER: WSI_TOK_(69) '0'\n[1423830279:4534] PARSER: WSI_TOK_(69) '.'\n[1423830279:4535] PARSER: WSI_TOK_(69) '0'\n[1423830279:4535] PARSER: WSI_TOK_(69) '.'\n[1423830279:4536] PARSER: WSI_TOK_(69) '2'\n[1423830279:4536] PARSER: WSI_TOK_(69) '2'\n[1423830279:4537] PARSER: WSI_TOK_(69) '1'\n[1423830279:4538] PARSER: WSI_TOK_(69) '4'\n[1423830279:4538] PARSER: WSI_TOK_(69) '.'\n[1423830279:4540] PARSER: WSI_TOK_(69) '1'\n[1423830279:4541] PARSER: WSI_TOK_(69) '1'\n[1423830279:4542] PARSER: WSI_TOK_(69) '1'\n[1423830279:4542] PARSER: WSI_TOK_(69) ' '\n[1423830279:4543] PARSER: WSI_TOK_(69) 'S'\n[1423830279:4544] PARSER: WSI_TOK_(69) 'a'\n[1423830279:4544] PARSER: WSI_TOK_(69) 'f'\n[1423830279:4545] PARSER: WSI_TOK_(69) 'a'\n[1423830279:4546] PARSER: WSI_TOK_(69) 'r'\n[1423830279:4546] PARSER: WSI_TOK_(69) 'i'\n[1423830279:4547] PARSER: WSI_TOK_(69) '/'\n[1423830279:4548] PARSER: WSI_TOK_(69) '5'\n[1423830279:4548] PARSER: WSI_TOK_(69) '3'\n[1423830279:4549] PARSER: WSI_TOK_(69) '7'\n[1423830279:4550] PARSER: WSI_TOK_(69) '.'\n[1423830279:4550] PARSER: WSI_TOK_(69) '3'\n[1423830279:4551] PARSER: WSI_TOK_(69) '6'\n[1423830279:4552] PARSER: WSI_TOK_(69) '\n'\n[1423830279:4552] PARSER: \n[1423830279:4553] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4554] PARSER: WSI_TOKEN_NAME_PART 'A'\n[1423830279:4554] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4555] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4556] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4556] PARSER: WSI_TOKEN_NAME_PART 'p'\n[1423830279:4557] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4558] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4558] PARSER: WSI_TOKEN_NAME_PART 'E'\n[1423830279:4559] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4560] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4560] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4562] PARSER: WSI_TOKEN_NAME_PART 'd'\n[1423830279:4562] PARSER: WSI_TOKEN_NAME_PART 'i'\n[1423830279:4563] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4564] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4565] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4565] PARSER: known hdr 21\n[1423830279:4566] PARSER: WSI_TOK_(21) ' '\n[1423830279:4567] PARSER: WSI_TOK_(21) 'g'\n[1423830279:4567] PARSER: WSI_TOK_(21) 'z'\n[1423830279:4568] PARSER: WSI_TOK_(21) 'i'\n[1423830279:4569] PARSER: WSI_TOK_(21) 'p'\n[1423830279:4570] PARSER: WSI_TOK_(21) ','\n[1423830279:4570] PARSER: WSI_TOK_(21) ' '\n[1423830279:4571] PARSER: WSI_TOK_(21) 'd'\n[1423830279:4572] PARSER: WSI_TOK_(21) 'e'\n[1423830279:4572] PARSER: WSI_TOK_(21) 'f'\n[1423830279:4573] PARSER: WSI_TOK_(21) 'l'\n[1423830279:4574] PARSER: WSI_TOK_(21) 'a'\n[1423830279:4574] PARSER: WSI_TOK_(21) 't'\n[1423830279:4575] PARSER: WSI_TOK_(21) 'e'\n[1423830279:4576] PARSER: WSI_TOK_(21) ','\n[1423830279:4576] PARSER: WSI_TOK_(21) ' '\n[1423830279:4577] PARSER: WSI_TOK_(21) 's'\n[1423830279:4578] PARSER: WSI_TOK_(21) 'd'\n[1423830279:4578] PARSER: WSI_TOK_(21) 'c'\n[1423830279:4579] PARSER: WSI_TOK_(21) 'h'\n[1423830279:4580] PARSER: WSI_TOK_(21) '\n'\n[1423830279:4580] PARSER: \n[1423830279:4581] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4582] PARSER: WSI_TOKEN_NAME_PART 'A'\n[1423830279:4582] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4583] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4584] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4585] PARSER: WSI_TOKEN_NAME_PART 'p'\n[1423830279:4585] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4586] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4587] PARSER: WSI_TOKEN_NAME_PART 'L'\n[1423830279:4587] PARSER: WSI_TOKEN_NAME_PART 'a'\n[1423830279:4588] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4589] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4590] PARSER: WSI_TOKEN_NAME_PART 'u'\n[1423830279:4590] PARSER: WSI_TOKEN_NAME_PART 'a'\n[1423830279:4591] PARSER: WSI_TOKEN_NAME_PART 'g'\n[1423830279:4591] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4592] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4593] PARSER: known hdr 22\n[1423830279:4593] PARSER: WSI_TOK_(22) ' '\n[1423830279:4594] PARSER: WSI_TOK_(22) 'e'\n[1423830279:4595] PARSER: WSI_TOK_(22) 'n'\n[1423830279:4596] PARSER: WSI_TOK_(22) '-'\n[1423830279:4596] PARSER: WSI_TOK_(22) 'U'\n[1423830279:4597] PARSER: WSI_TOK_(22) 'S'\n[1423830279:4597] PARSER: WSI_TOK_(22) ','\n[1423830279:4598] PARSER: WSI_TOK_(22) 'e'\n[1423830279:4599] PARSER: WSI_TOK_(22) 'n'\n[1423830279:4599] PARSER: WSI_TOK_(22) ';'\n[1423830279:4600] PARSER: WSI_TOK_(22) 'q'\n[1423830279:4601] PARSER: WSI_TOK_(22) '='\n[1423830279:4602] PARSER: WSI_TOK_(22) '0'\n[1423830279:4603] PARSER: WSI_TOK_(22) '.'\n[1423830279:4605] PARSER: WSI_TOK_(22) '8'\n[1423830279:4605] PARSER: WSI_TOK_(22) '\n'\n[1423830279:4606] PARSER: \n[1423830279:4607] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4607] PARSER: WSI_TOKEN_NAME_PART 'S'\n[1423830279:4608] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4609] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4609] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4610] PARSER: WSI_TOKEN_NAME_PART 'W'\n[1423830279:4613] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4613] PARSER: WSI_TOKEN_NAME_PART 'b'\n[1423830279:4614] PARSER: WSI_TOKEN_NAME_PART 'S'\n[1423830279:4615] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4616] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4616] PARSER: WSI_TOKEN_NAME_PART 'k'\n[1423830279:4617] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4618] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4618] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4619] PARSER: WSI_TOKEN_NAME_PART 'K'\n[1423830279:4620] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4620] PARSER: WSI_TOKEN_NAME_PART 'y'\n[1423830279:4621] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4622] PARSER: known hdr 32\n[1423830279:4623] PARSER: WSI_TOK_(32) ' '\n[1423830279:4623] PARSER: WSI_TOK_(32) '3'\n[1423830279:4624] PARSER: WSI_TOK_(32) 'Y'\n[1423830279:4625] PARSER: WSI_TOK_(32) '0'\n[1423830279:4625] PARSER: WSI_TOK_(32) '7'\n[1423830279:4626] PARSER: WSI_TOK_(32) 'z'\n[1423830279:4627] PARSER: WSI_TOK_(32) 'S'\n[1423830279:4627] PARSER: WSI_TOK_(32) 'q'\n[1423830279:4628] PARSER: WSI_TOK_(32) 'A'\n[1423830279:4629] PARSER: WSI_TOK_(32) 'S'\n[1423830279:4629] PARSER: WSI_TOK_(32) 'N'\n[1423830279:4630] PARSER: WSI_TOK_(32) '7'\n[1423830279:4631] PARSER: WSI_TOK_(32) 'U'\n[1423830279:4632] PARSER: WSI_TOK_(32) 'k'\n[1423830279:4632] PARSER: WSI_TOK_(32) 'd'\n[1423830279:4633] PARSER: WSI_TOK_(32) 'u'\n[1423830279:4634] PARSER: WSI_TOK_(32) 'x'\n[1423830279:4634] PARSER: WSI_TOK_(32) 'p'\n[1423830279:4635] PARSER: WSI_TOK_(32) 'x'\n[1423830279:4636] PARSER: WSI_TOK_(32) 'k'\n[1423830279:4636] PARSER: WSI_TOK_(32) 'R'\n[1423830279:4637] PARSER: WSI_TOK_(32) '7'\n[1423830279:4638] PARSER: WSI_TOK_(32) 'w'\n[1423830279:4638] PARSER: WSI_TOK_(32) '='\n[1423830279:4639] PARSER: WSI_TOK_(32) '='\n[1423830279:4640] PARSER: WSI_TOK_(32) '\n'\n[1423830279:4641] PARSER: \n[1423830279:4642] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4643] PARSER: WSI_TOKEN_NAME_PART 'S'\n[1423830279:4644] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4644] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4645] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4646] PARSER: WSI_TOKEN_NAME_PART 'W'\n[1423830279:4646] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4647] PARSER: WSI_TOKEN_NAME_PART 'b'\n[1423830279:4648] PARSER: WSI_TOKEN_NAME_PART 'S'\n[1423830279:4648] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4649] PARSER: WSI_TOKEN_NAME_PART 'c'\n[1423830279:4650] PARSER: WSI_TOKEN_NAME_PART 'k'\n[1423830279:4650] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4651] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4652] PARSER: WSI_TOKEN_NAME_PART '-'\n[1423830279:4652] PARSER: WSI_TOKEN_NAME_PART 'E'\n[1423830279:4653] PARSER: WSI_TOKEN_NAME_PART 'x'\n[1423830279:4654] PARSER: WSI_TOKEN_NAME_PART 't'\n[1423830279:4654] PARSER: WSI_TOKEN_NAME_PART 'e'\n[1423830279:4655] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4656] PARSER: WSI_TOKEN_NAME_PART 's'\n[1423830279:4656] PARSER: WSI_TOKEN_NAME_PART 'i'\n[1423830279:4657] PARSER: WSI_TOKEN_NAME_PART 'o'\n[1423830279:4658] PARSER: WSI_TOKEN_NAME_PART 'n'\n[1423830279:4658] PARSER: WSI_TOKEN_NAME_PART 's'\n[1423830279:4659] PARSER: WSI_TOKEN_NAME_PART ':'\n[1423830279:4660] PARSER: known hdr 9\n[1423830279:4660] PARSER: WSI_TOK_(9) ' '\n[1423830279:4661] PARSER: WSI_TOK_(9) 'p'\n[1423830279:4661] PARSER: WSI_TOK_(9) 'e'\n[1423830279:4662] PARSER: WSI_TOK_(9) 'r'\n[1423830279:4663] PARSER: WSI_TOK_(9) 'm'\n[1423830279:4664] PARSER: WSI_TOK_(9) 'e'\n[1423830279:4664] PARSER: WSI_TOK_(9) 's'\n[1423830279:4665] PARSER: WSI_TOK_(9) 's'\n[1423830279:4666] PARSER: WSI_TOK_(9) 'a'\n[1423830279:4666] PARSER: WSI_TOK_(9) 'g'\n[1423830279:4667] PARSER: WSI_TOK_(9) 'e'\n[1423830279:4669] PARSER: WSI_TOK_(9) '-'\n[1423830279:4669] PARSER: WSI_TOK_(9) 'd'\n[1423830279:4670] PARSER: WSI_TOK_(9) 'e'\n[1423830279:4671] PARSER: WSI_TOK_(9) 'f'\n[1423830279:4671] PARSER: WSI_TOK_(9) 'l'\n[1423830279:4672] PARSER: WSI_TOK_(9) 'a'\n[1423830279:4673] PARSER: WSI_TOK_(9) 't'\n[1423830279:4673] PARSER: WSI_TOK_(9) 'e'\n[1423830279:4674] PARSER: WSI_TOK_(9) ';'\n[1423830279:4675] PARSER: WSI_TOK_(9) ' '\n[1423830279:4676] PARSER: WSI_TOK_(9) 'c'\n[1423830279:4676] PARSER: WSI_TOK_(9) 'l'\n[1423830279:4677] PARSER: WSI_TOK_(9) 'i'\n[1423830279:4678] PARSER: WSI_TOK_(9) 'e'\n[1423830279:4678] PARSER: WSI_TOK_(9) 'n'\n[1423830279:4679] PARSER: WSI_TOK_(9) 't'\n[1423830279:4680] PARSER: WSI_TOK_(9) ''\n[1423830279:4680] PARSER: WSI_TOK(9) 'm'\n[1423830279:4681] PARSER: WSI_TOK_(9) 'a'\n[1423830279:4682] PARSER: WSI_TOK_(9) 'x'\n[1423830279:4683] PARSER: WSI_TOK_(9) ''\n[1423830279:4684] PARSER: WSI_TOK(9) 'w'\n[1423830279:4685] PARSER: WSI_TOK_(9) 'i'\n[1423830279:4685] PARSER: WSI_TOK_(9) 'n'\n[1423830279:4686] PARSER: WSI_TOK_(9) 'd'\n[1423830279:4686] PARSER: WSI_TOK_(9) 'o'\n[1423830279:4687] PARSER: WSI_TOK_(9) 'w'\n[1423830279:4688] PARSER: WSI_TOK_(9) ''\n[1423830279:4689] PARSER: WSI_TOK(9) 'b'\n[1423830279:4689] PARSER: WSI_TOK_(9) 'i'\n[1423830279:4690] PARSER: WSI_TOK_(9) 't'\n[1423830279:4691] PARSER: WSI_TOK_(9) 's'\n[1423830279:4691] PARSER: WSI_TOK_(9) '\n'\n[1423830279:4692] PARSER: *\n[1423830279:4693] PARSER: WSI_TOKEN_SKIPPING_SAW_CR '\n'\n[1423830279:4693] PARSER: WSI_TOKEN_NAME_PART '\n'\n[1423830279:4694] PARSER: WSI_TOKEN_NAME_PART '\n'\n[1423830279:4695] PARSER: known hdr 8\n[1423830279:4696] PARSER: v13 hdrs completed\n[1423830279:4696] PARSER: libwebsocket_parse sees parsing complete\n[1423830279:4697] INFO: defaulting to prot 0 handler\n[1423830279:4698] INFO: libwebsocket_ensure_user_space: 0x8fe7848 protocol 0x8fe15f8\n[1423830279:4698] PARSER: lws_parse calling handshake_04\n[1423830279:4699] INFO: libwebsocket_ensure_user_space: 0x8fe7848 protocol 0x8fe15f8\n[1423830279:4700] INFO: libwebsocket_ensure_user_space: 0x8fe7848 protocol pss 4, user_space=150891696\n[1423830279:4701] PARSER: WSI_TOKEN_EXTENSIONS = 'permessage-deflate; client_max_window_bits'\n[1423830279:4701] PARSER: issuing resp pkt 129 len\n[1423830279:4703] INFO: Allocating RX buffer 4118\n[1423830279:4704] PARSER: accepted v13 connection\n[1423830279:4705] DEBUG: libwebsocket_read: read_ok\n[1423830279:5710] PARSER: spill on http-only\n[1423830279:5711] DEBUG: libwebsocket_read: read_ok\n1423830282: Received PINGREQ from mqttjs_af914e4c\n1423830282: Sending PINGRESP to mqttjs_af914e4c\n1423830291: mosquitto version 1.4 terminating\n[1423830291:7397] NOTICE: libwebsocket_context_destroy\n[1423830291:7397] DEBUG: close: just_kill_connection\n[1423830291:7398] INFO: remove_wsi_socket_from_fds: wsi=0x8fe6170, sock=8, fds pos=1\n[1423830291:7399] DEBUG: not calling back closed\n[1423830291:7400] DEBUG: close: just_kill_connection\n[1423830291:7400] INFO: remove_wsi_socket_from_fds: wsi=0x8fe7848, sock=11, fds pos=1\n[1423830291:7401] DEBUG: calling back CLOSED\n. I can arrange a temporary port forward to mine and some login details if you want.\n. @mcollina  @ralight  I'm afraid that doesn't fix it for me. I tried it by patching the generated browser code.\n. Interesting. I works from node (actually meteor server).\nmqttClient = MQTT.connect('ws://192.168.10.22:9001',\n     {\n         clientId: \"FromServer\"}\n    );\n. @mcollina - Why have you closed this? It still doesn't work from the browser.\n. @mcollina, @ralight : Confirmed fixed. Many thanks. Will now release as Meteor smart package with all the good things that follow :-).\n. Fixed :-)\nM\nOn 15/02/2015 10:01, Matteo Collina wrote:\n\n@mkarliner https://github.com/mkarliner Feel free to reopen if it is \nstill broken.\n@ralight https://github.com/ralight the instance running in \ntest.mosquitto.org:8080 seems not to be working.\nThe example on http://test.mosquitto.org/sys/ uses mqttv3.1 returns \nthis error:\n|WebSocket connection to 'ws://test.mosquitto.org:8080/mqtt' failed: Error during WebSocket handshake: Unexpected response code: 404\n|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/mqttjs/MQTT.js/issues/251#issuecomment-74411214.\n. Not quite sure how to do that.\nCould you point me at some instructions?\n\nMike\nOn 01/05/2015 17:45, Matteo Collina wrote:\n\nIt looks like you are hitting a bug. Would you mind sending a PR that \naddress this issue?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/mqttjs/MQTT.js/issues/275#issuecomment-98175294.\n. Have gone to all the trouble of fixing the bug, I found you already did it on Feb 12th. My browserifed version was out of date. Doh!.\n. I've already been hacking my copy of index.js and ws.js to start tracking down where this is occurring, and I can confirm that the path is being dropped.  \n\nI'm afraid that this is not my deploy so not under my control, but the argument for supporting arbitrary paths is as follows. The broker to which I'm connecting (which is a homebrew), is sitting behind an nginx instance, and that requires the path to ascertain where to route to, as there is also regular http traffic going over it.\nI didn't realise that the spec called for a standard path of /mqtt.\ncheers\nMike\n. Certainly, when I find what is doing it :-) Any clues much appreciated.\n. @sandro-k, I'm afraid I can't check with mqtt-elements against the target broker as it requires a specific clientID, and elements doesn't appear to support that.\n@mcollina , I haven't been able to find the part of the spec that recommends the /mqtt path. I'd like to be able to show that to the person who has deployed the broker. Could you point me to the relevant section? Thanks.\n. @sandro-k  Excellent! It doesn't work in exactly the same way as my own client doesn't work :-)\nThat is, in your client I see the connection status go briefly green and then red again.\nIn the network section of Chrome, I can see an initial GET to the broker with a status\nof '101 Switching protocols' followed by a response header of upgrade to websocket, after which\nthe 'offline' event is fired with no other information. I can also see that the response header on the upgrade has got Sec-WebSocket-Protocol:mqttv3.1. \nNow, I have tried \n{\n  protocolId: 'MQIsdp',\n  protocolVersion: 3\n}\nin the options in my client, to go down to mqtt 3.1, but it makes no difference.\nBTW, this is after creating a new browser.js for my client, as it was pretty stale.\n. @mcollina @sandro-k  @knolleary\nSorry all. I should have posted the final resolution of this.\nThe original problem about the path was fixed when I refreshed \nmy browserified version of the code. The bouncing connection was different.\nBasically, the writer of the broker had implemented code that disconnected the client if it subscribed to 'invalid' topics. Invalid in this case meant that it didn't follow his particular naming conventions.\nThe result was that I saw the bouncing client connection.\nSo the conclusion is that I now have a working connection with this broker, and the library does not have a bug.\nAs a final note, this is what the broker's author said.\nWelcome to MQTT, the protocol with out any error codes.\nDropping connection on error is the lesser of many evils, we think its worse to say OK! when a device is trying to subscribe but actually some topics aren't allowed.\nIs it true that there is no way in the standard for a broker to return an error code on subscription?\nMike\n. I  think I've just run into the same issue.\nThis is with secure websockets inside browser.\n. Apologies, Matteo, This issue went off my radar a while back. I'll try to get you a confirmed test case next week.\nMike\n. ",
    "hellish": "Had same problem with the 1.x and mosquitto 1.3.5\nSolved it by providing extra options\nprotocolId: 'MQIsdp',\nprotocolVersion: 3\n. ",
    "meilon": "Just tried that, still the same.\n. This is what I tried since opening this issue:\nIf I send a publish (no matter what QoS) directly after the connect, it goes through. The publish on message received still fails on the first try, every time. So while I keep the app running, every on message triggered publish seems to trigger a disconnect.\nAfter adding some console log I can't get any further than the sendPacket function. The buffer generated from mqttPacket.generate(packet); is the same before and after the reconnect. The console.log('func_sendPacket_cb'); gets called the second time.\nif (!client.stream.write(buf) && cb) {\n        console.log('func_sendPacket_no_client.stream.write_and_cb');\n      client.stream.once('drain', cb);\n    } else if (cb) {\n        console.log('func_sendPacket_cb');\n      cb();\nso it ends in the client.stream.write function for the pubcomp for me. I tried to connect via TLS, but it's just the same.\nHere's the full verbose output:\nfunc_sendPacket, cmd:connect\n<Buffer 10 1a 00 06 4d 51 49 73 64 70 03 00 00 0a 00 0c 64 65 6c 61 79 65 64 2d 64 65 6d 6f>\nfunc_sendPacket_eof\n23:56:51 GMT+0100 (CET) [MQTT] connected!\nprot__sendPacket, cmd:subscribe\nfunc_storeAndSend, cmd:subscribe\nfunc_sendPacket, cmd:subscribe\n<Buffer 82 0a 9b e6 00 05 2f 70 6f 6b 65 02>\nfunc_sendPacket_eof\nprot_publish\nprot__sendPacket, cmd:publish\nfunc_storeAndSend, cmd:publish\nfunc_sendPacket, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 9b e7 70 69 6e 67 20 6f 6e 20 63 6f 6e 6e 65 63 74>\nfunc_sendPacket_eof\n23:56:51 GMT+0100 (CET) [MQTT] Subscribed to topic /poke with QoS 2\n23:56:51 GMT+0100 (CET) [MQTT] Published to \"/ping\" on connect\nprot__sendPacket, cmd:pubrec\nfunc_sendPacket, cmd:pubrec\n<Buffer 50 02 00 01>\nfunc_sendPacket_cb\nfunc_sendPacket_eof\n23:56:53 GMT+0100 (CET) [MQTT] Topic: /poke, message: hi\nprot_publish\nprot__sendPacket, cmd:publish\nfunc_storeAndSend, cmd:publish\nfunc_sendPacket, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 9b e8 70 69 6e 67 20 6f 6e 20 6d 65 73 73 61 67 65>\nfunc_sendPacket_eof\nprot__sendPacket, cmd:pubcomp\nfunc_sendPacket, cmd:pubcomp\n<Buffer 74 02 00 01>\nfunc_sendPacket_eof\n----------------------------- This line is where nothing happens until the ping request comes on\nprot__sendPacket, cmd:pingreq\nfunc_sendPacket, cmd:pingreq\n<Buffer c0 00>\nfunc_sendPacket_eof\n23:57:11 GMT+0100 (CET) [MQTT] now offline!\nfunc_sendPacket, cmd:connect\n<Buffer 10 1a 00 06 4d 51 49 73 64 70 03 00 00 0a 00 0c 64 65 6c 61 79 65 64 2d 64 65 6d 6f>\nfunc_sendPacket_eof\nprot__sendPacket, cmd:publish\nprot__sendPacket, cmd:publish\nfunc_storeAndSend, cmd:publish\nfunc_sendPacket, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 9b e8 70 69 6e 67 20 6f 6e 20 6d 65 73 73 61 67 65>\nfunc_sendPacket_cb\nfunc_sendPacket_eof\n23:57:12 GMT+0100 (CET) [MQTT] connected!\nprot__sendPacket, cmd:subscribe\nfunc_storeAndSend, cmd:subscribe\nfunc_sendPacket, cmd:subscribe\n<Buffer 82 0a 9b e9 00 05 2f 70 6f 6b 65 02>\nfunc_sendPacket_eof\nprot_publish\nprot__sendPacket, cmd:publish\nfunc_storeAndSend, cmd:publish\nfunc_sendPacket, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 9b ea 70 69 6e 67 20 6f 6e 20 63 6f 6e 6e 65 63 74>\nfunc_sendPacket_eof\n23:57:12 GMT+0100 (CET) [MQTT] Published to \"/ping\"\n23:57:12 GMT+0100 (CET) [MQTT] Subscribed to topic /poke with QoS 2\n23:57:12 GMT+0100 (CET) [MQTT] Published to \"/ping\" on connect\nI'm definitely not that familiar with the MQTT Protocol and the way MQTT.js works, but shouldn't there be a PUBREL instead of a PUBCOMP? And why is there no PUBREL on the on-connect publish with QoS 2, but a PUBREC? PUBCOMP and PUBREC are packages that should come from the server, like described here: http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#qos-flows\nTomorrow I'll do some more debugging, having a closer look on the actual message flow.\nBTW: Could you document the possible options a little bit better? When trying to connect via TLS (only encryption, no authentication) you have to set protocol to mqtts, but I had to look into the code to find this option. Also, the client says Error: self signed certificate in certificate chain even though I used the certificate supplied from the website. Only a rejectUnauthorized to false would let me connect!\n. I'm at a miss, I don't know how to debug any further. I have created a wireshark capture you can find here: https://www.dropbox.com/s/07wml3sfnj5knh9/delayed-publish.pcapng?dl=0\nThe output for this is as follows:\nfunc_sendPacket, msgid:undefined, cmd:connect\n<Buffer 10 1a 00 06 4d 51 49 73 64 70 03 00 00 0a 00 0c 64 65 6c 61 79 65 64 2d 64 65 6d 6f>\nfunc_sendPacket_eof, msgid:undefined, cmd:connect\nprot_handlePacket, msgid:undefined, cmd:connack\n17:13:13 GMT+0100 (CET) [MQTT] connected!\nprot__sendPacket, msgid:28100, cmd:subscribe\nfunc_storeAndSend, msgid:28100, cmd:subscribe\nfunc_sendPacket, msgid:28100, cmd:subscribe\n<Buffer 82 0a 6d c4 00 05 2f 70 6f 6b 65 02>\nfunc_sendPacket_eof, msgid:28100, cmd:subscribe\nprot_handlePacket, msgid:1, cmd:publish\nprot__sendPacket, msgid:1, cmd:pubrec\nfunc_sendPacket, msgid:1, cmd:pubrec\n<Buffer 50 02 00 01>\nfunc_sendPacket_cb, msgid:1, cmd:pubrec\nfunc_sendPacket_eof, msgid:1, cmd:pubrec\nprot_handlePacket, msgid:28100, cmd:suback\n17:13:13 GMT+0100 (CET) [MQTT] Subscribed to topic /poke with QoS 2\nprot_handlePacket, msgid:56105, cmd:pubrec\nprot_handlePacket, msgid:64413, cmd:pubrec\nprot_handlePacket, msgid:1, cmd:pubrel\n17:13:13 GMT+0100 (CET) [MQTT] Topic: /poke, message: hi\nprot_publish\nprot__sendPacket, msgid:28101, cmd:publish\nfunc_storeAndSend, msgid:28101, cmd:publish\nfunc_sendPacket, msgid:28101, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 6d c5 70 69 6e 67 20 6f 6e 20 6d 65 73 73 61 67 65>\nfunc_sendPacket_eof, msgid:28101, cmd:publish\nprot__sendPacket, msgid:1, cmd:pubcomp\nfunc_sendPacket, msgid:1, cmd:pubcomp\n<Buffer 74 02 00 01>\nfunc_sendPacket_eof, msgid:1, cmd:pubcomp\nprot__sendPacket, msgid:undefined, cmd:pingreq\nfunc_sendPacket, msgid:undefined, cmd:pingreq\n<Buffer c0 00>\nfunc_sendPacket_eof, msgid:undefined, cmd:pingreq\n17:13:33 GMT+0100 (CET) [MQTT] now offline!\nfunc_sendPacket, msgid:undefined, cmd:connect\n<Buffer 10 1a 00 06 4d 51 49 73 64 70 03 00 00 0a 00 0c 64 65 6c 61 79 65 64 2d 64 65 6d 6f>\nfunc_sendPacket_eof, msgid:undefined, cmd:connect\nprot__sendPacket, msgid:28101, cmd:publish\nprot_handlePacket, msgid:undefined, cmd:connack\nprot__sendPacket, msgid:28101, cmd:publish\nfunc_storeAndSend, msgid:28101, cmd:publish\nfunc_sendPacket, msgid:28101, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 6d c5 70 69 6e 67 20 6f 6e 20 6d 65 73 73 61 67 65>\nfunc_sendPacket_cb, msgid:28101, cmd:publish\nfunc_sendPacket_eof, msgid:28101, cmd:publish\n17:13:34 GMT+0100 (CET) [MQTT] connected!\nprot__sendPacket, msgid:28102, cmd:subscribe\nfunc_storeAndSend, msgid:28102, cmd:subscribe\nfunc_sendPacket, msgid:28102, cmd:subscribe\n<Buffer 82 0a 6d c6 00 05 2f 70 6f 6b 65 02>\nfunc_sendPacket_eof, msgid:28102, cmd:subscribe\nprot_handlePacket, msgid:1, cmd:publish\nprot__sendPacket, msgid:1, cmd:pubrec\nfunc_sendPacket, msgid:1, cmd:pubrec\n<Buffer 50 02 00 01>\nfunc_sendPacket_cb, msgid:1, cmd:pubrec\nprot_handlePacket, msgid:56105, cmd:pubrec\nprot_handlePacket, msgid:64413, cmd:pubrec\nfunc_sendPacket_eof, msgid:1, cmd:pubrec\nprot_handlePacket, msgid:28101, cmd:puback\n17:13:34 GMT+0100 (CET) [MQTT] Published to \"/ping\"\nprot_handlePacket, msgid:28102, cmd:suback\n17:13:34 GMT+0100 (CET) [MQTT] Subscribed to topic /poke with QoS 2\nprot_handlePacket, msgid:1, cmd:pubrel\n17:13:34 GMT+0100 (CET) [MQTT] Topic: /poke, message: hi\nprot_publish\nprot__sendPacket, msgid:28103, cmd:publish\nfunc_storeAndSend, msgid:28103, cmd:publish\nfunc_sendPacket, msgid:28103, cmd:publish\n<Buffer 32 18 00 05 2f 70 69 6e 67 6d c7 70 69 6e 67 20 6f 6e 20 6d 65 73 73 61 67 65>\nfunc_sendPacket_eof, msgid:28103, cmd:publish\nprot__sendPacket, msgid:1, cmd:pubcomp\nfunc_sendPacket, msgid:1, cmd:pubcomp\n<Buffer 74 02 00 01>\nfunc_sendPacket_eof, msgid:1, cmd:pubcomp\nI have no idea what should happen and what not. If you could tell me what to do I'll try. QoS 0 clients get the message twice, once before and once after the disconnect. QoS 2 clients obviously only once because of the missing PUBREL. I also have this problem on another Windows machine, so it isn't just Mac related.\nEDIT: So I made a mistake, now ALL devices where I installed node and used mqtt.js, the delayed publish is now occuring. I don't have any \"clean\" systems now. what should I try?\n. I just tried it again in a blank directory, still the same. But what I tried additionally after seeing you did the poke with QoS 0, I did the same on my system: The message gets pubbed right away on a QoS 0 and 1 message!\nSo it seems it is related how the message got sent in the first place! \nA received QoS 2 message in a QoS 2 subscription causes a disconnect on a following QoS 2 publish.\nA received QoS 0 or 1 message in a QoS 2 subscription doesn't impact a following QoS 2 publish\n. I just tested it by manually changing the 3 lines in the client.js by hand, it worked in my project. This should definitely fix issue #252. Haven't tested the test, though.\n. ",
    "itavy": "i have made all the required changes and i have moved required on top before uninitialized variables on all the files. \n. Hi,\ntake a look at https://github.com/mqttjs/MQTT.js/issues/249 if you are using it over SSL.\nif you want to check it with older versions you have 2 options:\n1. use package.json file to specify what version you will use\n2. npm install mqtt@\"version\"\nif you need more help regarding your issue please post some sample code of what are you doing so we can help.\nBest regards,\nitavy\n. hi,\nconnect constructor use 2 parameters:\nconnect(brockerUrl, opts)\nlook in lib/connect/index.js from line 53 to 58 for how to use those 2 parameters\nyour last example is correct, but you call client.end() before you actualy receive the message. move the client.end() inside the function for receive message and it should work\nBest regards,\nitavy\n. hi,\ni can tell you what i have done when i switched first time:\n1. i put a lot of intermediate messages to see step by step where it hangs\n2. i put mosquitto in debug mode and watched all messages\nmaybe that will help because otherwise i don't see any flaw in your code\nRegards,\nOctavian Ionescu\n. hi,\nit is because of the 3rd parameter\non orig.js you have ().listen(process.argv[2] || 1883)\nchange to .listen(process.argv[3] || 1883) and it should work :)\nRegards,\nitavy\n. hi,\nit seems ok. as a side comment i've seen that in the test there is a mix between synchronous and asynchronous tests. is there a reason for this mix or shall we stick to only one type of tests ?\n. for this pull yes, but there are tests which are not async:\nin test/client.js\nline 107 \nline 115\nin test/mqtt.js\nall tests except last 3\n. hi,\ni think that all tests should use same pattern (either sync or async) ;\nsince it is an evented, some things can be tested only in async\n. you have \nvar options = {\nhost: mqtthost,\nport: 8883,\nprotocolId: 'MQIsdp',\nca: CAfile,\nkeyPath: KEY,\ncertPath: CERT,\nsecureProtocol: 'TLSv1_method',\nprotocolId: 'MQIsdp',\nprotocolVersion: 3\n};\ntry with\nvar KEY =  fs.readFileSync('/etc/keys/client.key');\nvar CERT =  fs.readFileSync('/etc/keys/client.crt');\nvar CAfile = [fs.readFileSync('/etc/keys/ca.crt')];\nvar options = {\nhost: mqtthost,\nport: 8883,\nprotocol: 'mqtts',\nprotocolId: 'MQIsdp',\nca: CAfile,\nkey: KEY,\ncert: CERT,\nsecureProtocol: 'TLSv1_method',\nprotocolId: 'MQIsdp',\nprotocolVersion: 3\n};\nand look at https://github.com/mqttjs/MQTT.js/issues/249\n. hi,\nif it is ok, can i close the issue ?\n. duplicate of https://github.com/mqttjs/MQTT.js/issues/249\n. hi,\ni had same issue when i was testing with mosquitto, and one aproach was to pass the ca file to constructer in options parameter\n{\n.....\njavascript\nca: [ fs.readFileSync('<full path to ca>') ]\n.....\n}\n. Hi,\nI think if we can refactor the transport and separate it fron the protocol\nwe will be able to support more in the future. My ideea is to make a\nfactory for transports and each type has its own module. Atm i am not able\nto look and make a PR but in about 2 weeks i will be able to look and see\nhow it can be separated\nOn Aug 22, 2015 6:59 PM, \"RangerMauve\" notifications@github.com wrote:\n\nIf the code to enable it isn't very long then I think it'd be a very good\nidea. Maybe make it so it supports the unprefixed version just in case it\nbecomes standardized. If it takes a lot of code, then I would suggest just\nhaving a stream wrapper and using that as a separate library so that there\nisn't needless bloat.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/314#issuecomment-133717615.\n. hi,\n\nafter i made all the above changes in eslint, all the remaining errors are valid complaints regarding the rules defined. indeed eslint library has made some breaking changes at 0.9 version but all of them can be replaces as is stated above.\nmost of the errors about comment spacing, can be solved by deleting the comments. i put them when i made the styling changes to show that there you receive a parameter but is your decision to not use it; \nas for the indent spacing error, those need to be solved by spacing according to rules.\ni did a new branch bumped-depdencies-eslint with all the changes so you can merge it into this one:\n. that can be solved very easy with babel. transpile it to use at least 0.12.\n. Try console.log(err) without json.stringify\nOn Aug 4, 2017 10:01, \"Yohei Onishi\" notifications@github.com wrote:\n\nI set the following callback but it did not throw any erros. It just\ncalled close callback.\nclient.on('error', function (err) {\n  console.log(JSON.stringify(err))\n})\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/663#issuecomment-320173589, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA8P2TAO6VdAk_LkG8BuUPBXXjFBJEX1ks5sUsHbgaJpZM4OtWJu\n.\n. Add that ip to server cert cname\n\nOn Aug 4, 2017 10:05, \"Yohei Onishi\" notifications@github.com wrote:\n\nSorry. The code with MQTTS throws the error.\nerror = {\"reason\":\"IP: 172.31.12.4 is not in the cert's list: \",\"host\":\"172.31.12.4\",\"cert\":{\"subject\":{\"C\":\"JP\",\"ST\":\"Tokyo\",\"L\":\"Minato\",\"O\":\"My Company\",\"OU\":\"ITdept.\",\"CN\":\"172.31.12.4\"},\"issuer\":{\"C\":\"JP\",\"ST\":\"Tokyo\",\"L\":\"Minato\",\"O\":\"My Company\",\"OU\":\"ITDept.\",\"CN\":\"MyCA\"},\"subjectaltname\":\"DNS:172.31.12.4\",\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/663#issuecomment-320174239, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AA8P2To38kGyiw94FIK_YnxeZrllz1qCks5sUsK5gaJpZM4OtWJu\n.\n. See https://stackoverflow.com/a/37063612\n\nCertificate issued for ip and not domain name works only for private ip.\ni wanted to write public ip, sorry;\n. https://stackoverflow.com/questions/33494750/self-signed-certificate-for-public-and-private-ip-tomcat-7\ntry to include v3_req in csr. ",
    "bwired-nl": "Hi All\nthanks for helping!\nthe new above sample works perfect on test.mosquitto\nbut i have mosquitto installed on a cubietruck (ubuntu)\ni have installed ubuntu version mosquitto form here http://mosquitto.org/download/\nMy problem is that the old version of Mqtt is working perfect with this setting \nbut if i upgrade to last mqtt version not anymore\ni have done the changes regarding connect\nthis is not working, could be that is see something wrong, not an expert :-)\nvar mqttbroker = { address: '10.0.0.47', port: '1883' };\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect(mqttbroker.port, mqttbroker.address);\nclient.on('connect', function() {\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  console.log(message.toString());\n  client.end();\n});\nbut also this not working\nvar client  = mqtt.connect('10.0.0.47');\n/home/pi/node_modules/mqtt/lib/connect/index.js:62\n    opts.protocol = opts.protocol.replace(/:$/, '');\n                                 ^\nand this not (this just ends the programs and gives back cursor)\nvar mqtt    = require('mqtt')\n  , host = '10.0.0.47' // or localhost\n  , client = mqtt.connect();\n  // or , client = mqtt.connect({ port: 1883, host: host, keepalive: 10000});\nclient.subscribe('presence');\nclient.publish('presence', 'bin hier');\nclient.on('message', function (topic, message) {\n  console.log(message);\n});\nclient.end();\n. Hi itavy\nsorry, i had tested that also, did so many testing\nthis is not working also, \ni get this i see nothing happening, justing starting....\npi@raspberrypi ~ $ node testmqtt.js\nstarting\nbut i have also this for monitoring, and nothing comes in there also?\nC:\\Program Files (x86)\\mosquitto>mosquitto_sub -h 10.0.0.47 -v -t #\nthis is the code i use now, like i told before with old mqtt its running instantly with same setting\n``` js\nvar mqtt    = require('mqtt')\n  , host = '10.0.0.47' // or localhost\n  , client = mqtt.connect();\nconsole.log('starting');\nclient.subscribe('presence');\nclient.publish('presence', 'bin hier');\nclient.on('message', function (topic, message) {\n  console.log(message);\n  client.end();\n});\n```\n. ",
    "bbx10": "Hi,\nI am usinge Ubuntu 14.04, mosquitto, and node mqtt on the same laptop. mosquitto_sub and mosquitto_pub on localhost work as expected but node mqtt does not.\nnode v.0.10.25\nnpm install mqtt\nHere is the test code with log messages for every event.\n``` javascript\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://127.0.0.1');\nconsole.log('mqtt.connect');\nclient.on('connect', function () {\n  console.log('on connect');\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\nclient.on('error', function(err) {\n  console.log('on error', err);\n});\nclient.on('close', function() {\n  console.log('on close');\n});\nclient.on('disconnect', function() {\n  console.log('on disconnect');\n});\nclient.on('reconnect', function() {\n  console.log('on reconnect');\n});\nclient.on('offline', function() {\n  console.log('on offline');\n});\nclient.on('message', function (topic, message) {\n  // message is Buffer \n  console.log(message.toString());\n  client.end();\n});\n```\nThe output looks like this:\nmqtt.connect\non offline\non close\non reconnect\non offline\non close\non reconnect\nIf the URL is changed to mqtt://test.mosquitto.org, the test works fine. The output looks like this:\nmqtt.connect\non connect\nHello mqtt\non close\nI suspect this is a race problem since connecting to localhost must be < 1ms while connecting to test.mosquitto.org is probably > 50 ms depending on location.\nI will try to work backwards from the offline event since it is emitted in a single place in the code.\nThanks,\nbbx10node\n. Hi,\nmosquitto 3.1 is the default version for Ubuntu 14.04.\nI found the problem and has nothing to do with timing or race conditions. node mqtt requests protocolVersion 4 by default but mosquitto supports up to 3. And mosquitto does not like MQTT\nfor the protocolId.\nThe following messages appear in syslog when mosquitto logging is turned on.\nmosquitto[6884]: Invalid protocol version 4 in CONNECT\nmosquitto[6884]: Invalid protocol \"MQTT\" in CONNECT\nThe following works but I am not sure what the protocol ID should be. I copied the value that mosquitto_sub sends.\njavascript\nvar client  = mqtt.connect('mqtt://127.0.0.1', {\n  protocolId: 'MQIsdp',\n  protocolVersion: 3 \n});\nI will take a look at mosquitto source code to see what the rules are for the protocol ID. Or just build from source code instead of using the version in the repo.\nbbx10node\n. Hi,\nInstalling mosquitto from the mosquitto dev PPA solves the problem as well. The version is 1.4-0mosquitto1. The example in the README works without changes except I changed the URL to 'mqtt://127.0.0.1'.\nbbx10node\n. ",
    "derekxm": "Thanks @bbx10. I ran into exactly the same problem. Your post helped immensely.\n. ",
    "matriawan": "@bbx10  and @mcollina i've same issue in localhost doesn't work, if install default MQTT package on ubuntu 14.04, solved problem by installing using this method, work like a charm\n$sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\n$sudo apt-get update\n$sudo apt-get install mosquitto libmosquitto-dev mosquitto-clients\n$sudo service mosquitto status\nafter installing the mosquitto packages, any configuration in \"/etc/mosquitto\"\n PS: if doesn't work, make sure the internet connection without any proxy configuration \n. ",
    "jimbojw": "This problem is still around here a year later. According to my reading of the MQTT spec, the broker should return a CONNACK with return code 0x01 if the protocol level isn't specified. Is there any way the module can detect this and emit an 'error' event?\n. Update: I spent a couple of hours looking into this, about at the limit I'm willing to sink. :)\nI've noticed a couple of problems (by module):\n- MQTT.js - The mocha tests in MQTT.js for the connect() method don't seem to actually fully test the connection (to me, they look like they just create connection objects of various sorts).\n- MQTT.js - The createConnection() test does actually create a TCP connection to whatever's running on port 1883, but it calls it a success after the underlying net connection connects. That is, the createConnection() method does not actually wait for a connack before emitting connected. Also it's deprecated.\n- mqtt-connection - I looked into the mqtt-connection module too. Tests there are failing right out the gate.\n- mqtt-connection - All the tests seem to use protocol version 3 (MQTT 3.1) not 4 (MQTT 3.1.1).\nSomewhere there should be a test that implements a minimal shim server that correctly connack's for version 3 but not 4, like old versions of Mosquitto do. It's not clear to me which package ought to contain this, my guess would be mqtt-connect.\nI stand by my assertion though if the server connack's with return code 0x01, this should be interpreted by the client as an error condition that will not be resolved by reconnecting and should emit an 'error' event. It's not clear to me however which module ought to be responsible for this and how to implement a test for it.\nNext steps:\n- Create a bug in the appropriate module's github repo with all of this information.\n- Implement a test that fails under the current behavior.\n- Update relevant code to pass the test and submit a PR.\n. TL;DR This is a problem with the MQTT protocol, not the mqtt Node module.\nThanks for the link to the code for _handleConnack. I dug into this a little further, and I think the problem is actually in the MQTT 3.1 protocol itself.\nFrom the spec on CONNECT: http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect (emphasis mine)\n\nIf the client sends an invalid CONNECT message, the server should close the connection. This includes CONNECT messages that provide invalid Protocol Name or Protocol Version Numbers. If the server can parse enough of the CONNECT message to determine that an invalid protocol has been requested, it may try to send a CONNACK containing the \"Connection Refused: unacceptable protocol version\" code before dropping the connection.\n\nI investigated the bytes passed on the TCP connection between mqtt and old Mosquitto. As far as I can tell, Mosquitto is simply closing the connection in response to the invalid protocol version number, which the specification allows it to do.\nFrom the client's perspective, the socket just closed unexpectedly. It has no way of knowing whether this was a network interruption or a wilful rejection of the CONNECT packet. Continuously attempting to reconnect may be the correct move here.\nHowever, from the perspective of the user of the mqtt npm module, there is no difference between attempting to connect to a TCP port that's not listening at all, and one that accepts the TCP connection but rejects the CONNECT packet. There is no 'connected' event that signals that the underlying TCP connection was at least successful.\nWhen connecting, there are two cases worth considering separately. One is the case where at some point in the past a successful CONNACK had been received. These cases will often be due to a connectivity issue that could be resolved in the future. For example if the broker restarts, or there's a hiccup in the client's network connectivity.\nThe other case is where at no point in the past has the client ever received a CONNACK. These cases are often (but not always) going to be due to incorrect configuration like wrong host/port, wrong protocol version, etc. This is the case with old Mosquitto.\nCurrently the mqtt module's strategy is optimized for the first case. In the case of a disconnect, we attempt reconnect ad infinitum.\nIt might be nice to have an optional \"maximum first connect threshold\" that stops trying to connect after some reasonable number of attempts if a CONNACK has never been received. This would help users triage configuration issues, but should NOT be the default since this would change the behavior of production systems which may already rely on the infinite reconnect strategy.\nIn any case, I do not have cycles to implement this functionality myself, and we may as well close this bug as working as intended.\n. ",
    "hongtoushizi": "This error does not happen often, is running after a period of time reported online on the problem? \nI does not use pm2 now ,but still zhe problem\u3002\n. in file node_modules/mqtt/examples/server , the redis.js : \n      client.p = redis.createClient(null, null, {\n            no_ready_check: true\n      });\n      client.s = redis.createClient(null, null, {\n            no_ready_check: true\n     });\nThese codes mean? What role started?\nIn particular, i can not understand  how redis to work?  what role redis start it? \n. Oh, thank you for such a detailed explanation.\u3002I  understand now.  very thanks....\n. ",
    "timjacobi": "I don't think it is a good idea to use done with test code that is not async. This takes away semantics i.e. when someone sees done in a test they tend to assume that the test contains async logic. \n. ",
    "Jxck": "not from command line.\nbut from javascript on browser.\n. thanks !\n. ",
    "jornbeyers": "I'm very sorry, I thought that I looked at all the issues. Probably jumped over #249 ...\nThis configuration setting works for me. \nFor further readers, next to the additions given by itavy, add the following:\nvar fs = require('fs');\n. Yes ofcourse, thank you for your help\n. ",
    "lucastan": "oh it is not in README. Thanks I will try\n. ",
    "hinzundcode": "Oh, seems like only 1 active connection per user is allowed and I used the same account for subscribing #.\n. ",
    "tomchambers2": "Can you describe what you changed to fix this? I seem to be having the same issue and can't work out where to set the user. I have tried:\nvar client = mqtt.connect(\"mqtt://192.168.1.74\", { clientId: 'moodbot', username: 'random_something' })\n. Ignore that - my problem was an outdated version of mosquitto running on my pi\n. ",
    "dapello": "What about in the case of my own Mosca server, using a signed cert and throwing the error\nError: unable to verify the first certificate\n    at Error (native)\n    at TLSSocket.<anonymous> (_tls_wrap.js:929:36)\n    at TLSSocket.emit (events.js:104:17)\n    at TLSSocket._finishInit (_tls_wrap.js:460:8)\n. I start Mosca like this:\n``` javascript\nvar mosca = require('mosca');\nvar SECURE_KEY = __dirname + '/mosca.key';\nvar SECURE_CERT = __dirname + '/mosca.crt';\nvar ascoltatore = {\n  //using ascoltatore\n  type: 'mongo',\n  url: 'mongodb://localhost:27017/mqtt',\n  pubsubCollection: 'ascoltatori',\n  mongo: {}\n};\nvar settings = {\n  port: 8883,\n  logger: {\n    name: \"secure\",\n    level: 40\n  },\n  secure : {\n    keyPath: SECURE_KEY,\n    certPath: SECURE_CERT\n  },\n  backend: ascoltatore,\n  https: {\n    port: 8443, \n    bundle: true,\n    static: './'\n  }\n};\n// fired when the mqtt server is ready\nfunction setup() {\n  console.log('Mosca server is up and running');\n}\nvar server = new mosca.Server(settings);\nserver.on('ready', setup);\nserver.on('clientConnected', function(client) {\n  console.log('client connected', client.id);\n});\n// fired when a message is received\nserver.on('published', function(packet, client) {\n  console.log('Published', packet.payload);\n});\n``\n. using openssl s_client givesVerify return code: 21 (unable to verify the first certificate);\nmeanwhile, passing{ rejectUnauthorized: false }` to the client allows connection with the current cert. The cert is from comodo.\nAdditionally, using mqtt.js v0.3.1 in a node app and mqttws31.js from a browser both connect without throwing errors.\n. ahh. ok. I'll just pass { rejectUnauthorized: false } until I get a better cert I guess?\nThanks for the help\n. Thank you, I'll give that a shot.\n. ",
    "lonaking": "how to solve this problem, I suffered it yet\n. ",
    "erwinkendo": ":fearful: You are right, I have modified it a little so Travis CLI doesn't produce any error (jshint doesn't work very well in windows with the current \" /* \" and \" /*.js \" syntaxes BTW).\nThe time results for some Mocha test are a little bit higher that with the previous implementation (~50ms max) in some, I guess this is due to the once.('readable') event that the rest of the storage is read only after a msg callback is issued.\n. :astonished: @mcollina sorry! I will fix this fix pull request, although I don't understand why my change affects the Websocket Client pinging, and only in node 0.10. When I use nvm and both version 0.10 and 0.12 no error is issued...\n. :open_mouth: Ok done, commit removed. :smile: \n. A unit test sounds good, I think the best way would be to test it against level-store package in different scenarios like issuing disconnect then reconnect, boot with stored messages and so on. What do you have in mind?\n. Sure, I haven't finished the unit test but the changes to the code are finished. I wrote you 10 days ago about the way I am closing the stream in case a disconnection takes place, once I know your opinion I will update the pull request :smile: \n. Sure @mcollina , I was wondering if the way I am closing the stream is ok.\nI am issuing outStore.close(); in the else condition inside storeDeliver.\nWould this be enough?\n. Good point, maybe bind to disconnect event?\n. Sorry, my bad. I will.\n. I am currently using (!that.disconnecting && !that.reconnectTimer && (0 < that.options.reconnectPeriod))to check if the client disconnected but sometimes (unexpectedly) this condition becomes true (presumably !that.reconnectTimer fault) even when the client is not connected. Checking the this.connectedbut this flag is not truewhen the _setupStream is created when the client is first created. \nI will continue to use this condition because it reduces the Store reading calls, but any other suggestions are welcomed.\n. Sure, currently I am issuing outStore.close(); in the else condition inside storeDeliver.\nWould this be enough?\n. ",
    "djensen47": "I can help implement this but I won't be able to look at it until later this month.\n. Sorry, probably won't happen. No longer working on Road Rules so no longer using MQTT. \ud83d\ude1e \n. ",
    "tuukka": "Thanks, this was actually a problem in the NodeJS websocket library and fixed by this pull request: https://github.com/websockets/ws/pull/494\n. ",
    "jsingler": "I have the same issue when using mqtt.connect with ws-url: \"ws://localhost:8000\"\nmy console output from node:\ndebug: Trying to connect to: ws://localhost:8000\n/Users/d039757/Documents/src/node/node_modules/mqtt/lib/mqtt.js:58\n  throw new Error('Unknown protocol - ' + brokerUrl.protocol);\n        ^\nError: Unknown protocol - ws:\n    at Object.module.exports.connect (/Users/d039757/Documents/src/node/node_modules/mqtt/lib/mqtt.js:58:9)\n    at Object. (/Users/d039757/Documents/src/node/ws-bridge/edge.js:35:27)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\nBest, Joerg\n. ",
    "raruston": "I've not revisited this as it was decided not to support the ws protocol in the new NodeRed mqtt node, and I no longer need to solve it at this point (I might somewhere down the road though). I can re-iterate that outside of NodeRed, in a simple test app, it all worked fine. \n@jsingler - are you able to recreate this in a simple test app? Or is this part of some other application, that might have other dependencies, similar to NodeRed?\n. ",
    "damienlaine": "Well i have more information, i couldn't sleep on this...\non the chrome dev tool i found the websocket filter...\nI actualy see a first pending websocket request, While it's up, i can receive and publish messages...\nThis first request finaly expires after a few message received..\nAnother one starts...\nOn mosca server side i see a client disconnect / connect with a new id.\nThis second request stays hanged up, i need to refresh page.\nThx for your help.\nbbye\n. Well, it looks like that problem is \"almost gone\" when is disable my Chrome developer tool tab. The issue lies here for some reason...\nStill i have some socket disconnects time to time only on Chrome. But i can't do much for debug as long as the  dev tool crashes the websocket.\nI talk to myself happily ;) bbye\n. ",
    "flyingmouse": "Unfortunately after googling I don't think TLS-PSK is implemented by Node.js, because it is recently introduced to Openssl and is not widely supported. There was a PR (https://github.com/joyent/node/pull/1162/files) serveral years ago but was not accepted. \n. ",
    "sheepcloner": "Thank you for the sample.\nOne thing confused me. In my original posting I mentioned that I have nodejs v0.10.5 you are telling me to upgrade to a downgraded version (0.10.38)? is 0.10.38 newer than 0.10.5 ?\nthank you \n. ",
    "ozzzzchen": "Thank you for your advice.\nI have passed the option directly as the following but it was not work.\njavascript\nvar client = mqtt.connect('wss://waoz.cloudapp.net:443/Mosca/', {rejectUnauthorized:false});\nI found the options didn't pass to websocket library in function buildBuilder which is in /lib/connect/ws.js\n``` javascript\nfunction buildBuilder (client, opts) {\n  var host = opts.hostname || 'localhost',\n    port = String(opts.port || 80),\n    path = opts.path || '/',\n    url = opts.protocol + '://' + host + ':' + port + path,\n    ws = websocket(url, {\n      protocol: 'mqttv3.1'\n    });\nreturn ws;\n}\n```\nIt works now after some modification:\n``` javascript\nfunction buildBuilder (client, opts) {\n    var wsOpt = {};\n    wsOpt['protocol'] = 'mqttv3.1';\n    if(opts.protocol == 'wss')\n        if(opts.hasOwnProperty('rejectUnauthorized'))\n            wsOpt['rejectUnauthorized'] = opts.rejectUnauthorized;\n    var host = opts.hostname || 'localhost',\n        port = String(opts.port || 80),\n        path = opts.path || '/',\n        url = opts.protocol + '://' + host + ':' + port + path,\n        ws = websocket(url, wsOpt);\nreturn ws;\n\n}\n```\n. The issue has already solved in PR #289\n. I have used browserify and test on IE, Firefox and Chrome.\njavascript\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>test mqtt wss with broker self-sign certificate</title>\n</head>\n<body>\n<script src=\"./browserMqtt.js\"></script>\n<script>\n    //var client = mqtt.connect('wss://waoz.cloudapp.net:443/Mosca/');\n    var client = mqtt.connect('wss://waoz.cloudapp.net:443/Mosca/', {\"rejectUnauthorized\": false});\n    client.on('connect', function ()\n    {\n        console.log('connect');\n        client.subscribe('mqtt/test');\n        client.publish('mqtt/test', 'hello browser!');\n    });\n    client.on(\"message\", function(topic, payload) {\n        alert([topic, payload].join(\": \"));\n        client.end();\n    });\n</script>\n</body>\n</html>\nThere is no difference with original rule on browser because I did not modify the function buildBuilderBrowser in lib/connect/ws.js.\nIt still need to be trusted with self-sign certificate manually on browser before connecting to the broker successfully.\n. ",
    "PritamUpadhyay": "@ozzzzchen ; Did you find any way to connect?\n. @mcollina :Any update for this issue?\n. @w3hacker : I want to catch message at server side and not client side. what you are suggesting is for client side.\n. @w3hacker : By this way I will get published messages . I want to log messages while subscribing. I need subscribed messages which will be sent back to client.\n. ",
    "cefn": "Here's some discussion about the issue from irc://irc.freenode.net/mqtt. Hoping that the same is true of Mosca.\n(19:14:40) The topic for #mqtt is: Anything mqtt | Read/update the wiki: https://github.com/mqtt/mqtt.github.io/wiki | Currently busiest during UK time | http://test.mosquitto.org/ | If you have a question, just ask it. | Patience is a virtue\n(19:14:40) Topic for #mqtt set by ral at 19:41:16 on 19/03/15\n(19:18:49) cefn: Is there any way to tell when the retained messages from a wildcard subscription have been delivered? E.g.  https://github.com/mqttjs/MQTT.js/issues/292 Without this we will need lots of client-side logic to define application-level validity for subtrees, or a horrible timeout hack, whereas if there was a way to know that everything had been delivered we don't need any logic at all.\n(19:27:00) cefn: A workaround I was wondering about was whether a unique (non-retained) message sent by the same client, and which falls under the subscription would always be delivered after the retained messages had been delivered. This would mean receiving the unique message could be implicitly used as a retained-messages-complete event.\n(19:38:26) cefn: I think this exploits common practices in MQTT servers, though, concerning in-flight windows per topic, and isn't a protocol guarantee? E.g. after subscribing you send a zero-byte non-retained message on a topic, and when you receive it you know you will have already received any retained message on the same topic if one exists because it would have been delivered beforehand.\n(20:54:55) ral: cefn: What you're describing is my understanding of how things should work.\n(20:55:04) ral: All retained messages before any fresh ones.\n(20:56:02) ral: It's what mosquitto_sub -R relies on.\n(20:57:10) ral: I can't say for sure that it is what everything would do though.\n(20:57:19) ral: Although it would be pretty bonkers to do anything else.\n(21:04:31) cefn: ral: thanks! Would you expect I could subscribe to root/something/#  then publish \"\" (empty string non-retained) to root/something and expect to receive all of the retained root/something# wildcarded topics before the empty string came back. Or alternatively is it only reliable on a per-topic basis, e.g. it guarantees a retained message at root/something is delivered first, but a retained message at root/something/hello could show up later?\n(21:08:44) ral: cefn: I would expect every retained message for that subscription to be delivered before any fresh messages are delivered.\n(21:08:57) ral: That's what mosquitto does at least.\n(21:39:53) cefn: ral: continuing the implicit ordering question, is there something which wouldn't be broadcast to everyone, but which would have the same ordering 'guarantees'. Ideally all the subscribers to the topic wouldn't have to be bothered with empty-string messages all the time.\n(21:40:19) cefn: Though I guess they could use the retained flag as a filter, it seems a bit wasteful\n(21:41:27) ral: cefn: In mosquitto_sub I just wait for the first non-retained message.\n(21:41:43) ral: That's a special case though, because it only subscribes once.\n(21:41:52) ral: At the beginning I mean.\n(21:42:09) ral: And would possibly break if you subscribed to multiple topics.\n(21:49:38) cefn: I think I need to arrive at something which a client can initiate (e.g. they introduce the event to the broker and use the round-trip and implicit ordering to derive that all retained message events for a given subscription have now happened when the event comes back). However, I'm wondering what is the range of alternative events I can initiate?  I'm currently working on the assumption that the event has to be a message sent to a subtopic within the relevant subscription. Is that fair, or is there a broader set of events (mqtt.js callbacks, strictly) which I could use for this job. This would be especially valuable to know if there's an event which meets the ordering 'guarantee' but doesn't pollute the subtopic itself with spurious messages, though I can discard them everywhere, that seems inelegant.\n(21:51:11) ral: cefn: That's about the sum of your choices.\n. Thanks for getting back to me. Much appreciated.\nDo you feel that any ordering choices are embodied in the current Mosca implementation which might be exploited (e.g. that message dispatch to a given client is in the order of message arrival at broker, that a later retained message from the same client is delivered after an earlier retained message, or anything else?).\nIf there's no ordering implicit at all then I'd definitely have to try and get under the skin of the server implementation and force the issue. I'm happy to commit to a single MQTT server implementation as we're deploying both clients and server to our own specification and we already have node in the mix, so Mosca is a tremendous candidate.\nFor orientation, the system I've built demonstrates a broker-held MQTT topic tree which corresponds to a client-side local JSON structure of nested objects (branches) or strings (leaves). The leaf property values correspond to retained messages where a native javascript assignment baker.stock.currantbuns = \"5\" triggers the publishing of an MQTT-retained message with topic baker/stock/currantbuns and a payload the string bytes for \"5\" notifying there's 5 of the stock item \"currantbuns\" in the bakers shop. The inverse is also true - received values from subscriptions enable you to remin in synchrony with remote clients despite distributed edits.\nFor this reason when a new client wants to participate and populate a local JSON copy of the baker/stock/# subtree to investigate stock levels, it can't be known in advance what the topics are. There may be currantbuns, but also baps, barms and lardycakes (local delicacies). The danger is that there's no moment after subscription to baker/stock/# at which you know that you've been notified of all branches below baker/stock, but for application-driven reasons there has to be some point at which you consider you have a complete snapshot of a tree, even if it's a few seconds old.\nOnly after all the retained messages have been delivered can the UI designer have faith in the consistency of the JSON structure which has been locally constructed from the retained messages sent. Certainly bad stuff can happen. But bad stuff is pretty much guaranteed from the strategies I might need to employ as workarounds. Unresponsive UI from arbitrary timeouts are definitely guaranteed, and assumptions that all data has arrived after some timeout (when it actually hasn't) could be worst of all. I'm not sure what my alternatives could be.\nI suppose forking Mosca to offer up an explicit property served from $SYS indicating client queue status could be an option. When queued messages arrives at zero then you have a snapshot.\n. In the absence of any other ideas, I'm considering this strategy...\nThe Mqtt server will monitor 'publish' events to maintain an in-memory sorted list of all the currently published retained messages in the broker (is this already there, somewhere?). \nWhen a 'subscription' event indicates a wildcard topic subscription from a client, the server will take a copy of all the retained messages which match the wildcard (should be a simple slice of the sorted array) and store it against the client and subscription.\nWhen a 'delivered' event indicates that a retained message for a given topic has been ACKed or a retained message is 'unpublished' then that individual topic is removed from the client+subscription array. When the list is empty, a topic like /subscription/${clientId}/full/path/to/wildcarded/topic is sent a non-retained message to indicate delivery is complete.\nDoes that make any sense at all? Any considerations to note about how this might play with Mosca?\n. That sounds like a very good place to start, and thanks for helping me to navigate to where the key events take place. I think you're suggesting I wire into the listener mechanisms already there for connect, subscribe etc. simply adding my own listener which makes huge sense.\nHowever, to address your correct performance concerns about managing arrays of the full tree of topics I'm also looking into an alternative implementation, which is perhaps more MQTT-ish, works with mechanisms already anticipated for server specialisation, and which could be implemented as a smart MQTT client without modifying the server.\nA $SYS/childkeys/ topic tree could be maintained as a tree of retained messages containing JSON key arrays mirroring child subtopics. For example, subscribing to $SYS/childkeys/baker/stock would trigger a notification of a retained message [\"currantbuns\",\"lardycakes\",\"hot cross buns\"] indicating that the populated topics below the main topic baker/stock are baker/stock/currantbuns  AND baker/stock/lardycakes AND baker/stock/hot cross buns . A client could then subscribe to $SYS/childkeys/baker/stock/currantbuns and expect the retained message '[]' indicating no further children - a leaf topic and hence a string-typed javascript property. Finally the client could subscribe to baker/stock/currantbuns to receive the message '5' indicating the value of the JSON property. \nOf course a could also subscribe to $SYS/childkeys/baker/stock/# in order to get a full snapshot of the subtree (a subtree subscription which can be confirmed for completeness, and hence Promis-compatible, by logic performed on its own payloads). \nMulti-level wildcard subscription is probably more responsive than recursively subscribing by expanding single-level wildcard topics step-by-step as all events will arrive in a big stream without round-trips (assuming you can handle the asynchrony and out-of-order delivery).\nIn principle such a subtree could be maintained by some MQTT client (subscribing to some wildcard, potentially the root wildcard, and responding to the notification of any retained-status message by updating the keys tree).\nOnce notified of the $SYS/childkeys topic matching any branch in the JSON tree, clients can identify their progress through the recursive tree traversal as notifications come in. Assuming all retained subtopics come in as expected, they are in a position to declare traversal complete (with an error condition and potential resubscribe as a backstop for topics whose anticipated keys are not delivered within a timeout).\nOf course all of this pushes design questions elsewhere, requiring some form of topic- and possibly wildcard- locking protocol (perhaps mounted at the $SYS/lock subtree) to be able to extend any ACID guarantees at all, but that's something for another day (and another thread). The scenarios we're anticipating this being used have an asymmetry between those writing (who will effectively own their subtree) and those reading, but the simplicity of evented javascript objects as a wrapper for coding both reading and writing clients is very appealing.\n. ",
    "ashutosh-akss": "Thanks.. @RangerMauve  i will look into server sent events and Browserify for implementing mqtt client at browser\n. ",
    "behrad": "thank you, testing...\n. great :+1: \n. > I have it working with MQTT.js 2.4.0 and websocket-stream ^3.3.3\n@RangerMauve Are you successfully set up MQTT.js in react native (both iOS & android) specially websocket in production?. Nice, let us test https://github.com/mqttjs/MQTT.js/issues/573#issuecomment-355039873 and see how it goes. I may post you results if any issues \ud83d\udc4d . please check #624  @johan13 @mcollina . I don't know an easy test to simulate mqtt.js process crash, Have you got an idea @mcollina ?\n. > what error was it crashing on?\nNothing. The crash is handmade to prove that mqtt.js will send stored qos>0 packets after restart. > I get what you are saying now. calling the function is wrong, but we are losing a reference to the callback by storing it. The queue is callback-aware, i.e we should call that callback when the subscribe is done, and by passing it to the store we loose a reference to it. I'm not sure what's the right fix atm :/.\nI checked this before proposing the PR, and hopefully callback is stored https://github.com/behrad/MQTT.js/blob/db3ce2f43b194d4cc662f3c64f959091ac37a632/lib/client.js#L386-L387 already :). > we should call that callback when the subscribe is done\nno need for publish packet guard, all other commands (subs, ...) are queued as before.. > Maybe have both in-memory (for callbacks) and in the store for persistence?\nI think, as a design change, mqttjs can drop in-memory queue, and store any inflight packet that should be queued.\nlet the Store to choose between memory/file system/.... > Callbakcs have to be stored in memory\nthey are already stored in client#outgoing. I tested this with https://github.com/behrad/mqtt-nedb-store and my same issue was resolved.\nOne can also test again mqtt-level-store  and confirm this.. > Not true. That works only for QoS > 1.\n\nHowever, we can limit the queue to publishes with QoS 0.\n\nI also ment QoS > 1 publishes, this PR already limits queue to publishes with QoS 0. Can somebody also verify this?\n\n@behrad would you like to join this org?\n\nMy honor \ud83d\udc4d . We can also add https://github.com/behrad/mqtt-nedb-store to the README if you like @mcollina . why not to add a publish only gaurd?. I think we shouldn't, I believe caller assumes cb as a (un)successful send operation, however storing a packet for later processing is an inflight state, caller should be suspended.\nin a non-crash scenario,  cb will be called later when connection is ready and packet is sent. (if we'd called it before, it will be called twice!). callback was not called when packet was queued, this is the same behaviour. \ud83d\udc4d . ",
    "chiarishow": "Ok, unit test added.\nBtw I noticed that the client must successfully connect and send a qos 1 message in order to cause the problem. But hopefully now is fixed. \nThank you. \n. ",
    "qm3ster": "Not sure if I did a potato, literally my first time on GitHub.\n. Done.\nThere was also\nif (!opts.hostname) {\n    opts.hostnme = opts.host;\n  }\n(misspelled hostnme)\nI changed that too, hope that's ok.\n. ",
    "jingzhaoou": "I tested the following options.\njs\n    client = mqtt.connect({\n        host: 'www.example.com',\n        port: 1883,\n        username: 'username',\n        password: 'password'\n    });\nThings work properly. \n. Already submitted a PR. \n. ",
    "farski": "@mcollina Why not? What's the alternative for getting data when using something AWS Lambda where it doesn't make sense to subscribe?\n. ",
    "tvanier": "Thanks for the amazing MQTT.js! I am prototyping a mqtt-based presence service, where clients publish online/offline retained messages, and will: { payload: \"offline\", retain: true }, subscribers are notified no problem. The prototype includes predictive user search, supporting one-off requests as @farski suggested would be great to presence-enable search results. I thought about a fetch API:\nclient.fetch(topic/topic array/topic object, [callback])\nwould retrieve  (possibly non-existent) retained messages under topic. callback would be in the form callback(err, messages), where messages would be a single message, an array or object, depending on the topic argument. If callback is not provided, fetched messages would be returned through the existing 'message' event.\nDoes MQTT include a \"fetch\" command? Or this would have to be a subscribe+unsubscribe?\n. ",
    "rednaks": "I agree with @RangerMauve .\n@mcollina I'm not a NodeJS guy I'm only working on the browser side. but yes, it does support SSL. it's raw sockets for the web.\nyou can find the description of the TCPSocket interface here : https://developer.mozilla.org/en-US/docs/Web/API/TCPSocket\n. ",
    "sahilsk": "same here. \neslint rules has gotten deprecated and removed/renamed some rules. after fixing them i'm now getting identiation errors.  I tried fixmyjs and js-beautifier but they triggered more errors.\nother than that  test are working fine on latest iojs(v3) and node(0.12).\n@mcollina  any quick way to fix this identation?\n\n. ",
    "mnbao1975": "Hi mcollina,\nI know where I can do that.\nvar options = {\n    clientId: 'mqttjs_' + 'persistence', //unique Id for persistence\n    clean: false\n}\nvar client  = mqtt.connect('mqtt://localhost:1883', options);\nThanks,\nBao\n. ",
    "kokeksibir": "I would like to take over mqtt-server. Is there a documented road map or design, or at least a clear vision in your mind, how may I help?\n. @mcollina thank you very much, my npm account is also kokeksibir. \n. Ok, I think it's done now.\n. ",
    "coodoo": "Great, thanks!\n. ",
    "vilic": "I see, thanks.\nIt's not clear when would an error event be emitted, and this could be confusing. It would be great if we can have a brief categories of possible error events.\n. ",
    "janjongboom": "@mcollina Yeah, they are added as well for subscribe.\nThe key, cert and ca options are already described in docs.\n. ",
    "platy": "I saw this when using the mqtt client under a higher load (with a lot of messages being sent in pulses) and noticed this EventEmitter warning:\n(node) warning: possible EventEmitter memory leak detected. 11 drain listeners added. Use emitter.setMaxListeners() to increase limit.\nTrace\n    at TLSSocket.addListener (events.js:179:15)\n    at TLSSocket.Readable.on (_stream_readable.js:671:33)\n    at TLSSocket.once (events.js:204:8)\n    at sendPacket (/usr/share/vertex/node_modules/mqtt/lib/client.js:33:21)\n    at MqttClient._sendPacket (/usr/share/vertex/node_modules/mqtt/lib/client.js:601:7)\n    at MqttClient.publish (/usr/share/vertex/node_modules/mqtt/lib/client.js:352:12)\nI understand that it means that the client is trying to send packets faster than the socket can write them, and so maybe I need to increase the limit because I have many packets to send and sometimes the socket will be slow. But I see that that is probably not necessary as I don't need a callback.\n. I'm pretty sure that I wasn't sending the publishes on the same tick as the publishes are each triggered by other events. The problem came up whilst sharing an LTE connection with a lot of other traffic. So I figured that the buffering is inevitable in slow periods and that the stream buffer is the best place for the packets to back up as I have no way to push back.\nThe Node version on that device was 0.12(.7?)\n. Sure, that sounds pretty straight forward.\nThanks for the quick replies!\n. ",
    "vallettea": "We are monitoring what we pay to the M2M provider.\nI'll look to wireshark. thanks\nI'll document my findings here\n. It was in fact related to the heartbeat which was too short.\n. I'm looking into this to try a PR with @mcollina proposal of https://github.com/mqttjs/MQTT.js/issues/166#issuecomment-70410891\nHowever, my sessionPresent is always false even if I specify a clientId and \nconnected to the server. ID : 0000 { cmd: 'connack',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 2,\n  topic: null,\n  payload: null,\n  sessionPresent: false,\n  returnCode: 0 }\noffline\nreconnect\noffline\nreconnect\nconnected to the server. ID : 0000 { cmd: 'connack',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 2,\n  topic: null,\n  payload: null,\n  sessionPresent: false,\n  returnCode: 0 }\nwith the folowing options:\n{\n        username: \"unique\",\n        password: \"xxxx\",\n        clientId: \"unique\",\n        keepalive: 1,\n        clean: false,\n        reconnectPeriod: 1000 * 3\n    }\n. mosca\n. I use it embeded in a nodejs program, version \"mosca\": \"^0.32.0\", \nwith the following settings\n```\nvar pubsubsettings = {\n  type: 'redis',\n  redis: require('redis'),\n  db: 12,\n  port: process.env.REDIS_PORT_6379_TCP_PORT,\n  return_buffers: true, // to handle binary payloads\n  host: process.env.REDIS_PORT_6379_TCP_ADDR\n};\nvar moscaSettings = {\n  port: 1883,\n  backend: pubsubsettings\n};\n```\n. You mean that for now I don't store all messages ? what is redis for then ?\nHow to configure the offline storage ? I could also clarify the docs here.\n. I've configured the offline storage like so for mosca:\n```\nvar pubsubsettings = {\n  type: 'redis',\n  redis: require('redis'),\n  db: 12,\n  host: process.env.REDIS_PORT_6379_TCP_ADDR,\n  port: process.env.REDIS_PORT_6379_TCP_PORT,\n  return_buffers: true\n};\nvar moscaSettings = {\n  port: 1883,\n  backend: pubsubsettings,\n  persistence: {\n    factory: mosca.persistence.Redis,\n    host: process.env.REDIS_PORT_6379_TCP_ADDR,\n    port: process.env.REDIS_PORT_6379_TCP_PORT,\n  }\n};\n```\nbut i still get a sessionPresent: false after reconnexion\n. ok, yes i see what you mean.\nBut concerning the earlier problem of having a sessionPresent: false even after reconnect you think it si a pb with mosca or mqtt ?\n. indeed the previous test works perfectly on mqtt://test.mosquitto.org:1883 so there is a problem with mosca. I opened https://github.com/mcollina/mosca/issues/376 on mosca\n. ",
    "ajsharp": "@sandro-k Are you using it over websockets? Also what versions are you using of each? Are you using mosca on the backend? \n. FWIW, I did a trace as to where the auth stuff ends up, and it's in this function: https://gist.github.com/ajsharp/4178e69d3b545ec0a437#file-mqtt-js-L1162. \n. On current master -- https://github.com/mqttjs/MQTT.js/blob/2c282409dcf6962aaac7cde3ce0abe1a119135a7/lib/connect/index.js#L66 -- the connect function calls parseAuthOptions, which only looks at the auth key, and sets the username and password by splitting auth on the the : character.\n. :( The problem is I was passing in values like this:\njs\nmqtt.connect(\"ws://HOST:PORT\", {\n  options: {\n    username: 'name',\n    passwore: 'pass'\n  }\n});\nBasically I misread the documentation on the homepage. Apologies for the confusion.\n. ",
    "jamesplease": "@RangerMauve , how is having dependencies a problem for UMD? In AMD/CJS/ES2015 environments, they'll automatically be bundled by end users. For browser globals environments, the consumer will need to load up each dependency manually.\n\nIt might be useful to have a bundled version in the releases, though.\n\nThat's definitely an option! I usually just leave the deps out of the build and it works great.\n. > If you take a look at the package.json, you'll notice that there are 11 dependencies. And I think it's safe to assume that most of them do not offer a UMD wrapper.\nAh, fair point.\n\nI totally see the point of having a bundle that's easily accessible to people since it wasn't entirely user friendly to build the bundle when I initially started playing with this client-side.\n\nI agree with you; I think a bundle makes sense.\n\nAlso, I guess this was kinda brought up before.\n\nWoops. Searched for UMD and didn't see anything. I'll have to search better next time :)\n\nI'm :-1: on exporting an UMD\n\nHow come?\n\nAnybody that wants to send a PR?\n\nI'm still evaluating if the library makes sense for my use cases; if it does, then I'll submit a PR!\n. I definitely would! The only problem is that I wasn't able to figure out why they're broken...\nI made an example using the configuration for my specific app, and I was able to get it working. So I'm not sure what the problem is. If I take another look and figure it out, I'll PR the fix.\n. Ah! Okay, cool. I'll take a look and PR it up today.\n. ",
    "ryankurte": "The secure-client example appears to be broken because the arguments keyPath: KEY,\n  certPath: CERT should in fact be ca: CA, key: KEY, cert: CERT to match the node TLS options.\nOnce changed this works against a mosquito setup with TLS and client authentication.\n. Fair enough, is there a reason the opts argument isn't just passed directly?\nWith regards to testing, test.mosquitto.org has endpoints for each connection type, so the examples / tests could locally run against that.\n. @mcollina what is required to get this merged in?\n. Awesome, thanks!\n. ",
    "dmeznaric": "You can specify which protocol should be used by passing brokerUrl parameter on connect. \nthis configuration works fine for me:\n``` js\nvar KEY = fs.readFileSync(__dirname + '\\mqttServer_key.pem');\nvar CERT = fs.readFileSync(__dirname + '\\mqttServer_b64.cer');\nvar TRUSTED_CA_LIST = fs.readFileSync(__dirname + '\\CA_b64.cer');\nvar PORT = 8883;\nvar HOST = 'mqttServer';\nvar options = {\n  port: PORT,\n  host: HOST,\n  keyPath: KEY,\n  certPath: CERT,\n  rejectUnauthorized : true,\n  //The CA list will be used to determine if server is authorized\n  ca: TRUSTED_CA_LIST,\n  will: {\n    topic: 'node/status',\n    payload: new Buffer('offline')\n  }\n};\nvar client  = mqtt.connect('mqtts://mqttServer', options);\n```\n. ",
    "jameswhite": "var client = mqtt.connect('mqtts://' + HOST, options);\n. @dashracer: https://github.com/mokjpn/hubot-mqtt/blob/master/doc/easy-rsa\nThe client and server must both agree on a CA. There's an included mosquitto.conf one can use for testing. the hubot-mqtt uses MQTT.js.\n. ",
    "dashracer": "How can I generate certificate for mqtt client?\n. ",
    "pfried": "I am currently trying to set up a connection to aws iot via mqtt over websockets.\nThere is an official  example, which uses the paho javascript client and some additional code to compute the signature (aws v4) you need to append to the url.\nRight now i did not manage to connect altough the url looks good and the signature should be fine. A closer look on the headers of the websocket request showed that the paho client sets a different header. Paho sends\nSec-WebSocket-Protocol:mqtt\nbut this library sends:\nSec-WebSocket-Protocol:mqttv3.1\nMy config is like this:\njs\n    this.client = MQTT.connect(this.endpoint, {\n      protocolId: 'MQTT',\n      protocolVersion: 4,\n      clean: true,\n      clientId: 'MyClient',\n    });\nI am getting a 403 response which indicates problems with the authentication. Unfortunately i dont know how long a signature is valid since it contains a timestamp, but i will try to copy and paste the one from the example.\nI found this issue related: https://github.com/beerfactory/hbmqtt/issues/38, which basically says by spec it should work even if the wrong header is set. I guess the paho client does it right (mqtt) and this lib kind of wrong (mqttv3.1).\nHas anyone managed to get this lib working with aws iot? Could the header be an issue?\nCheers!\n. Alright i will try that, no idea why i did not try that first, but the example provided uses the paho client, so maybe thats where that idea came from. Thank you\n. ",
    "gkwicker": "Hi @pfried, the easiest way to connect your JS application to AWS IoT is using the AWS IoT SDK for JavaScript.  It handles all of the authentication for you, and includes documentation as well as Node.js and browser application examples.  We monitor that repo as well as the AWS Forums, so if you have any questions or issues about AWS IoT, please let us know there.  Thanks for your interest in AWS IoT.\n. Hi Matteo \u2013 we haven't been able to use the mqtt.connect() method because a WebSocket connection to AWS IoT passes variable authentication information in the URL query string.  If the connection has to be restarted (due to error/network connectivity issue/etc...), the query string part of the URL will be different.  As a result, we pass a custom streamBuilder function to the MqttClient object when it is instantiated to take care of this.  This doesn't cause any issues when running in Node, but when browserified we see an issue which requires that MqttClient be exported from lib/connect/index.js.\n. ",
    "oroce": "@mcollina: That's okay, my problem happens when this.connection !== true: https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L586-L588\n. Oh no, that does everything as it is intended to do. My problem is that I want a queue which can survive the restart of the client (basically I'm restarting the device itself). For this I need a NON inmemory queue.\n. Yes mqtt-level-store is on disk if the client is online, but if client goes offline the mqtt-level-store wont even receive the message because the message goes into the (in memory) queue. \n. Sure I started working on it, somehow some messages (which were stored during the previous run) arent getting the pubacks, so I need to run a few more tests.\n. @mcollina sorry my last month was rather busy but it's still on my list since I want to change godot's tcp connection to mqtt based connection in my project: https://github.com/oroce/sensortag-with-godot\n. ",
    "parveen-oodles": "Hello jdiamond ,\nI am also getting the missing packet exception. I am using mosquitto and node module mqtt for chatting purpose but sometime i am getting the exception that is * missing packet* . I am not able to debug from where and when this error occurred , we have setup mosquitto broker on ubuntu machine and client side we are using android  so some times i got this error in server and server is getting very slow and after that it will take so much time to made connection and also it will connect and disconnect some time , so please let me know where i am wrong and how should i debug this thing. \n. ",
    "ralphtheninja": "@mcollina When v2 is released, mind writing something about what has changed api wise?\n. > we are validating that we are always sending a Buffer\nAah cool. That's good to know! So my projects using mqtt.js can ignore nsp on this particular issue.\n. > Released as 1.7.0.\nRock n roll. Thanks Matteo!\n. @RangerMauve Please post the error and the stack trace you get\n. Maybe the wrong protocolVersion?\n. The public key is public, so it doesn't need to be transferred securely. Just FYI :)\n. > @ralphtheninja Man in-the-middle attacks can fake self-signed public keys. Just FYI :3\nI stand corrected! :)\n. @mcollina I'm on this. But how should we handle this? If a string is passed in e.g. test.mosquitto.org instead of mqtt://test.mosquitto.org should we default the protocol to mqtt? I personally like this more than throwing a more descriptive error.\n. @mcollina On a side note. I found that some tests are shaky. See below:\n\n. @mcollina I'll see what I can do. Matter of time ;)\n. @tchinou1 If the comparison is false then the string doesn't equal \"test\" :) Do you have a newline or something in your message?\n. Cool. Please close issue! Or maybe @mcollina can do that :)\n. js\nclient.publish('lights/hue/device123/set/led', JSON.stringify({ a: 5 })). You need to do the opposite in .on('message', fn), e.g.\njs\nclient.on('message', function (topic, payload) {\n  const obj = JSON.parse(payload.toString()) // payload is a buffer\n}). @mcollina Do we have any integration tests implemented?. > The only thing funny is the mod I used to determine if the key was secure.\nAgreed :). opts.port = opts.protocol === 'wss' ? 443 : 80\n. Kk. Just a suggestion :)\n. Cool. I did not know this :) Updated and force pushed.. I'm not sure I understand the reason for this. Is this because you want to prevent some options to be set? (i.e. the mqttProperties list). What about doing something like:\njs\nvar propInKeys = mqttProperties.concat(urlKeys).some(function (key) {\n  return prop === key\n})\nif (!propInKeys) { // .. }. ] on the next line. This feels like a common use case to me. I'd do:\njs\nvar select = require('select-keys')\nopts.wsOptions = select(opts, wssProperties)\nSee https://github.com/mmalecki/select-keys/blob/master/lib/select-keys.js. Maybe this doesn't play nice with how opts.wsOptions is set in the rest of the code.. Oh okay, forget my previous comment. If this is really needed then select-keys might not be useful. Unless this step can be done first.. I don't like this dependency on order in the protocol array. If the order changes in the array or other protocols are added this might break. Maybe have two arrays, one for secure protocols and one for insecure protocols, which in turn protocolList is built from.. And the index % 2 === 0 could instead be a check against the insecure protocols array :). ",
    "wuhkuh": "These commits still utilize util.inherits which is deprecated and discouraged (see #458) - would a change be possible before this one gets pulled?\n. @roccomuso Aren't we dropping support for older node.js versions?\n\nDrop support for node v0.8 and v0.10.\n. \n",
    "roccomuso": "@wuhkuh @mcollina but shouldn't be kept somehow the backwards compatibility with older node.js versions? those not ES6-compliant..\n. @mcollina I'm referring to the usage of util.inherits() that is discouraged but required for older node.js version, that's why @itavy proposed the use of babel.\n. @mcollina uh great then. Now I realized what you meant with replaces them with the inherits module. ;)\n. if you pass a string, like:  , it doesn't work, and if you do a   it prints  . So it seems to be passed straight as a string.\n. Is 'no authorization' error handled somewhere else? Do we need to catch any 'particular' mqtt packet?\n. Subscription 'no authorization' alert handled: ab40be81c01cf0e85f09ad17efc48cce22fea67b\nAny tips for the publish?\n. Not yet. How do we handle this, authorized or not, a client will be either disconnected, am i right?\n. ",
    "4rzael": "I'm using node v0.10.40.\nIn this test case, the client is an odroid C1 (a raspberry pi clone) directly connected to my computer (I run wireshark on the computer) through an ethernet cable, so there shouldn't be any packet-loss or something like that..\n. Yes, my client does not reconnect even when I run it on my computer.\nOn my computer, I tried with a very simple client:\n``` js\n'use strict';\nvar mqtt = require('mqtt');\nvar PRIVATE = require('./PRIVATE.json');\n// mqtt client\nvar client;\nclient = mqtt.connect('mqtt://127.0.0.1:1883',\n    {\n        username: 'ninja',\n        password: PRIVATE.connectInfo.password,\n        clientId: 'ninja',\n        keepalive: 0,\n        clean: false,\n        reconnectPeriod: 30000\n    });\nclient.on('connect', function(){\n    console.log('connected to the server.');\n});\nclient.on('message', function(topic, message) {\n    console.log(\"data received : \" + message.toString());\n});\n```\nWith this code, that does nothing but trying to connect to mqtt, the client code exit after 30 seconds when it's not connected.\nSo it looks like there is no setInterval/setTimeout running (I suppose that MQTT.js uses one of those in order to reconnect after a delay ?).\n. ## Update:\nThe 29.9 seconds threeshold seems to be plateform dependant. For example, on a Raspberry Pi 2 under debian Jessie (node v0.10.40), even 29 seconds doesn't work.\nEDIT:\nAfter some investigations, the problem comes from connectTimeout beeing <= reconnectPeriod\nI'll take a look at how to fix it.\n. Okay, I fixed the error.\nAlso, I changed the version of jshint to 2.7.0 (at least until the node v0.8 compatibility is dropped), so it fixes #354. Is this okay ?\nYeah, I'd love to help contributing to mqtt.js. :)\n. Thanks !\nI also added another commit to fix #346, should I keep it here, or make another PR ?\n. Hum, yeah, that's true. I think I misunderstood the spec, sorry.\nHere is another useful part of the spec:\n\nIt is the responsibility of the Client to ensure that the interval between Control Packets being sent does not exceed the Keep Alive value. In the absence of sending any other Control Packets, the Client MUST send a PINGREQ Packet [MQTT-3.1.2-23]\n\nThe current implementation can fail, for example, if the client receives a QoS 0 message. (so it does not answer with a Control Packet)\nIMO, We should reschedule the ping timer only when sending Control Packets, instead of doing it when receiving Control Packets, as written in the MQTT spec.\n. @blbird I think #358 should fix it, but I can't test it right now, could you check if it fixes your bug ?\n. Possible duplicate of #357 \n. You didn't really change the way you subscribed.\nHere is what your first code does:\n- Connect to the server (client.connect)\n- Once connected : \n  - Listen to every messages and log them when they come (client.subscribe).\n  - Send a message once (client.publish).\nAnd you see only one message, which is normal because you only send one. (By the way, if another client sent some presence packet, you would receive them).\nIn the second one, you send packets every 3 seconds, so... Yeah, you receive many of them, which is the expected behaviour too.\nIn short, what you're doing in the second code is not checking for new messages, but sending many of them.\n\nAnyway, your first code should work correctly. In order to test it, run it, and while it's running, run a second one with this:\n``` js\nvar mqtt = require('mqtt');\nvar settings = {\n    clientId: appData.deviceType+appData.deviceID,\n    username: appData.mqttUser,\n    password: appData.mqttPassword,\n    keepalive: 1,\n    clean: false,\n    reconnectPeriod: 1000 * 1\n}\nvar client  = mqtt.connect('mqtt://'+appData.mqttLoc, settings);\nclient.on('connect', function () {\n    console.log('connected to the server. ID :', appData.deviceType+appData.deviceID);\n// send packets\nvar i = 0;\nsetInterval(\n    function(){\n        var message = i.toString();\n        console.log(\"sending \", message)\n        client.publish(\"test\", message, {qos: 1}, function(){\n            console.log(\"sent \", message)\n        });\n        i += 1;\n    },\n3000)\n\n});\n```\nYou should see new packets beeing printed on the first client.\n. Oh, yeah, my bad. I didn't see the re-subscribing loop.\nThat's strange, you shouldn't need to re-subscribe. Are you sure the packets you want to listen to were sent on the topic presence ?\nWhat version of mqtt.js are you using ?\n. Every mqtt client has a client_id.\nIf you want to have multiple clients connected at once, each one should have an unique client_id.\nYour socket should have an unique identifier, you can use it as your client id, or you can create a random string for your client_id.\nIn order to use your client_id, change your connection line with this:\njs\nsocket.mqttClient = mqtt.connect('mqtt://localhost', {keepalive: 0, clean: true, clientId: YOUR_UNIQUE_ID});\nLet me know if it fixes your problem.\n. I'm ok with this. 10 seconds is too short IMO.\n. Yes, IMHO, you're right ! Thanks !\n. Hum, looks like this issue can be closed, as it's been fixed in #399 ?\n@mcollina\n. IIRC, there is no stream API to a MqttClient\nI don't really see how there could be one, as MQTT is a protocol made for sending/receiving messages. Not really a continuous stream of data.\nAnyway, you can still implement a wrapper that cuts your stream down into multiple messages before calling the publish method, as described above. (even though you can't assume evrything will be sent in the correct order)\n. Using a getter makes explicit the fact that it's just a read-only value, and that it must not be changed by hand, because it's used internally.\nBut we can just expose it, sure. As you prefer !\n. I totally agree for the packetreceived event.\nHowever, I don't know about the camelCase in events. If there is such a naming convention (I haven't heard of it), following it would be a good idea.\n. I agree with the receive and send events. \nHowever, it might create some confusion between the message and the receive events, if not documented correctly. (it should be explicit that this event should NOT be used to receive messages, as it also fires on non-publish packets)\n. ## About QoSes\nHere is how QoS works:\n- QoS 0 : received at most once : The packet is sent, and that's it. There is no validation about whether it has been received.\n- QoS 1 : received at least once : The packet is sent and stored as long as the client has not received a confirmation from the server. MQTT ensures that it will be received, but there can be duplicates.\n- QoS 2 : received exactly once : Same as QoS 1 but there is no duplicates.\nAbout data consumption, obviously, QoS 2 > QoS 1 > QoS 0, if that's a concern to you.\nAbout message storing\nIn MQTT.js, there is two \"storing\" process : Message queuing and Stores.\nMessage Queue\nIIRC, this is not part of the MQTT spec, but, with MQTT.js, whenever you send a message, even with QoS 0 (when the option property queueQoSZero is not set to false in the Client constructor), it will be queued, waiting for the client to be connected to be sent.\nStores\nSome messages need to be stored in order to ensure QoS specifications. In order to do so, they use a 'Store'\nAs explained before, messages are only stored for QoS 1 and 2\nAbout Stores\nA default class Store (lib/store.js) is used if no Store is specified. It works in memory.\nHowever, you can set a different one when calling the Client constructor by adding a outgoingStore property to the option object. This way, you can implement one that uses disk storage.\n(If you do so, you should also change the incomingStore)\nYou should take a look at the Store documentation\nAbout logging\nAs you can see in the Client.publish documentation, you can give a callback to the publish method, that will be fired when the message is correctly sent (So it will wait for the server confirmation if using QoS 1 or 2).\nI don't see any other way to do so, but if you have specific use cases that don't fit this way, explains them.\n\nI hope it helped you. If you still have questions, feel free to ask. If you don't, let us know so we can close this issue.\nThanks,\n4rzael\n. This is strange.\nLooking at the MQTT specification, section 3.8.4-3 (line 967), I quote :\n\nIf a Server receives a SUBSCRIBE Packet containing a Topic Filter that is identical to an existing Subscription\u2019s Topic Filter then it MUST completely replace that existing Subscription with a new Subscription. The Topic Filter in the new Subscription will be identical to that in the previous Subscription, although its maximum QoS value could be different. Any existing retained messages matching the Topic Filter MUST be re-sent, but the flow of publications MUST NOT be interrupted [MQTT-3.8.4-3].\n\nIf I understand correctly theses lines, you should not receive multiple packets when subscribing more than once to a topic.\nI cannot try this right now, but it is strange.\nA good way to verify if it's Mosquitto that sends them multiple time or our client that emit too much events would be to log the event packetreceive (look if multiple message events are emitted for one packetreceive), or to directly look at the packets using a tool such as wireshark.\n. The protocol MQTT is supposed to be content agnostic, so you should be able to send any types of packets. Even binary ones.\nIf I record correctly, I used MQTT.js (v1.5 or something like that at the time) with protobuf encoded packets (so, binary), and zipped ones, and it worked, but I've never used Pako so I'm not really helpful.\nI don't have the time to take a look at it right now, sorry.\nWhat do you use to retreive the message ? Client.subscribe() ?\n. If I recall correctly, you can't.\nWhy do you want to do that ?. I, personnally, never encountered any problems with a client running on the server.\nI only did it with a small number (<100) of clients simultaneously connected to the broker, though, but I don't see why it should cause problems at scale.\n. I completely agree on this. I don't have time to help right now, but I'll be happy to do so when possible.\n. I changed what you asked me to (the names are way better this way), excepted this : \n\nAlso, can you verify that before that startConnection()  does not automatically connect to the server?\n\nbecause I didn't really understood what you wanted.. From this line, I suppose it won't work if you give the subscribe function an empty object, but it will if you don't pass it an object at all.\nCould you try replacing client.subscribe('presence', {}) with client.subscribe('presence') and tell us if it works properly, please ? (I don't have access to a testing environment right now)\nNB: If it is the case, it may be great to change the way the default qos attribution is done.. I tried to do some kind of tests, where I try the connection against multiple brokers:\nThis is my code:\n```js\nconst should = require('should')\nconst mqtt = require('../../')\ndescribe('protocol ws', () => {\n  let client\n  afterEach(() => {\n    if (client) {\n      client.on('close', () => {\n        console.log('closed')\n      })\n      client.end(true)\n      client = undefined\n    }\n  })\nit('should be able to connect to the broker', (done) => {\n// in my case, urls are ws://localhost:2002, ws://localhost:2012 and ws://localhost:2022/mqtt, respectively for mosca, mosquitto, and emq.\n    client = mqtt.connect(URL) \n    client.on('connect', () => {\n      client.connected.should.equal(true)\n      done()\n    })\n  })\n})\n```\nBroker configuration\nI tried running it with mosca, mosquitto and emq, using the following docker images to run the brokers:\n\nmosca: matteocollina/mosca\nmosquitto: toke/mosquitto\nemq: sneck/emqttd:latest\n\nresults\nWhen running mocha test.js against mosca and emq the process correctly quits, and when running it against mosquitto, the process hangs at the end.\nHowever, every broker prints the closed line, indicating the stream has closed\nI also tried using tcp instead of websockets, in which case none of them hangs.\nWireshark\nGiven this difference between multiple broker, I ran wireshark on each of these tests.\nEMQ\n\nMOSCA\n\nMOSQUITTO\n\nInterpretation\nAs we can see, emq and mosca have very similar traces, where mosquitto misses the two grey TCP packets at the end, that represent the end of the connection (closing the socket).\nTherefore, it seems like this problem is at least partially due to a TCP socket not closing properly on some cases, that may be broker-dependent (mosquitto was also considerably slower, so it could also be timed-dependent).\nResources\n\npcap files\n\nEdit\nWhen removing the force to client.end(), we don't observe hanging anymore. However, this means there is a problem of a non-closed tcp socket when forcing the disconnection.. Unfortunately, I didn't manage to find the problem in our code, and currently do not have the time to do further investigations.. @dlape Did you succesfully manage to solve your problem ?. You may want to use the protocol wx (weapp websocket) or wxs (secured weapp websocket) instead of wss\nNB: I never tried, but apparently, MQTT.js is compatible with this protocol. Google translates it to : \"How to use in WeChat applet?\"\nI never looked at wechat applets, but apparently, you can use any js library.\nSo, just install it, and, apparently, you will want to make the connection in the onLaunch function, and then use the publish and subscribe functions however you want. It does not seem to be very different from any javascript code.\nCan you explain your problem more specifically, please ?\nPS: this might be related to #729 . I haven't tried, but tslint can probably be used for that, with the semicolon rule. The basic following code works:\njs\nconst mqtt = require('mqtt')\nconst client = mqtt.connect('mqtt://localhost:8001') // change the host\nclient.subscribe('/hello')\nclient.on('message', console.log)\nsetTimeout(() => {\n  console.log('unsubscribing')\n  client.unsubscribe('/hello')\n}, 10000)\nPlease send us a full code, such as this one, that we can run directly (and if possible, which broker you are connected on), so we can understand your problem, and potentially find a bug.. This is not required. If you want this functionality, you could go with something like that:\njs\nfunction sendMessage(client, topic, message, options) {\n    client.publish(topic, message, options, (error) => {\n        console.log(`the message is ${message}`)\n        // do something to set the message as sent in your UI / DB / Anything\n    })\n}\nThis way, the function defined in the publish callback can have access to your message. (Note that you actually need to check the error parameter). okay !\n. I don't really understand this comment.\nThat's what I tested in the precedent test (I don't know if it's done correctly, though).\nShould I do it in this one too ?. ",
    "pedro93": "Hey @sandro-k, thank you very much for your response. Your code does work, I will try to find a more eloquent and efficient way to write it. About mqtt-elements, it is very interesting but I think it wont allow me to dynamically change the MQTT broker I am speaking with, atleast without refresh the corresponding html (I don't know im supposing).  You may close this issue, and thanks again :)\n. ",
    "blbird": "You're right. \nServer must disconnect to the Client as if the network had failed. So, my client is disconnected.\nHowever, the current client implementation doen't send the PINGREQ when the client receive data from server. So, the broker disconnect client connection because the broker doesn't get PINGREQ data from client.\nAs the below client code, ping request interval is reset when the client receive data from server because of calling _shiftPingInterval().\nMqttClient.prototype._handlePacket = function (packet, done) {\n  switch (packet.cmd) {\n    case 'publish':\n      this._handlePublish(packet, done);\n      break;\n    case 'puback':\n    case 'pubrec':\n    case 'pubcomp':\n    case 'suback':\n    case 'unsuback':\n      this._handleAck(packet);\n      done();\n      break;\n    case 'pubrel':\n      this._handlePubrel(packet, done);\n      break;\n    case 'connack':\n      this._handleConnack(packet);\n      done();\n      break;\n    case 'pingresp':\n      this._handlePingresp(packet);\n      done();\n      break;\n    default:\n      // do nothing\n      // maybe we should do an error handling\n      // or just log it\n      break;\n  }\n  // When a packet is received, reschedule the ping timer\n  this._shiftPingInterval();\n};\nI'm using IBM IoT Foundation(https://internetofthings.ibmcloud.com) as MQTT Broker. However, I don't know which broker is used in IBM IoT Foundation.\nThanks.\n. @4rzael It works well. Thanks. :-)\n. ",
    "AdamMiltonBarker": "Found my answer here: https://github.com/mqttjs/MQTT.js/issues/352\nThis is the correct way to continually check for latest messages? Wasn't sure if you needed to continually subscribe.\n```js\nvar mqtt = require('mqtt');\nvar settings = {\n    clientId: appData.deviceType+appData.deviceID,\n    username: appData.mqttUser,\n    password: appData.mqttPassword,\n    keepalive: 1,\n    clean: false,\n    reconnectPeriod: 1000 * 1\n}\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://'+appData.mqttLoc, settings);\nclient.on('connect', function () {\n    console.log('connected to the server. ID :', appData.deviceType+appData.deviceID);\n});\nclient.on('message', function (topic, message) {\n  console.log(message.toString());\n});\nclient.on(\"error\", function(error) {\n    console.log(\"ERROR: \", error);\n});\nclient.on('offline', function() {\n    console.log(\"offline\");\n});\nclient.on('reconnect', function() {\n    console.log(\"reconnect\");\n});\nsetTimeout(function(){\n   client.subscribe('test', { qos: 1 }); \n}, 3000)\n//start sending\nvar i = 0;\nsetInterval(\n    function(){\n        var message = i.toString();\n        console.log(\"sending \", message)\n        client.publish(\"test\", message, {qos: 1}, function(){\n            console.log(\"sent \", message)\n        });\n        i += 1;\n    },\n3000)\n```\n. Hi thanks for the reply. \nNo with the first script I connect to an existing server that has messages published to it constantly and the script did not receive those comments at all, at first it had client.end in it so the script shutdown after the message received. I removed that but it still did not receive the messages where all of my existing python clients were, hence why I thought we needed similar to python loop_start or loop_forever, I am not new to MQTT only with node js I currently have a full network of devices set up using python MQTT libraries (paho), I have a MOSQUITTO broker set up but am looking to replace all the python with this node js eg, swap my python clients for MQTT.js clients and replace the broker with the server example, I am doing this as I have worked a way of letting devices confirgure themselves and the server making my devices plug in and go for customers also Azure IoT hub doesn't have a python library. \nWith the second script I can now receive the messages but this requires subscribing in a loop, I wasn't aware you had to keep subscribing I thought once you had subscribed you were subscribed so I was asking for confirmation that this is the correct way.\nI understand that the second code is sending multiple messages this is for test, but I removed that and with the loop now subscribing multiple times I can receive all the messages sent from other clients but I am not sure this is the correct way.\nFrom your comments it seems like the first script should receive all the messages sent to that topic without the loop but this is not the case, with client.end() after the message is received the node script will end, without it it just hangs.\nThis is what allowed me to receive all the messages from the topic, without this it will receive 1 message from the publish in the script and then it will just hang.\nsetTimeout(function(){\n   client.subscribe('test', { qos: 1 }); \n}, 3000)\n. They were sent to the correct topics yes, just installed it yesterday so what ever NPM install has at the moment.\n. It also works for me as there is a loop keeping the script running, I had a higher keepalive at first 1000, initially I was using Mosquitto broker as I said all of my existing clients that are Python work fine, at the moment I am using the Node JS server example the code that is not working is the code in the first post as I explained it, \nI am using mqtt.js and have an issue that I haven't experienced before when using a python MQTT client. When subscribed to a client using the code below I receive one message back and then it will not receive any further messages, I have Googled all night to try and see how to do equivalent of loop_forever or loop_start but cannot find the documentation anywhere, please could you point me in the right direction.\n``` js\nvar mqtt = require('mqtt');\nvar settings = {\n  keepalive: 1000,\n  clientId: appData.deviceType+appData.deviceID,\n  username: appData.mqttUser,\n  password: appData.mqttPassword\n}\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://'+appData.mqttLoc, settings);\nclient.on('connect', function () {\n  client.subscribe('presence');\n  client.publish('presence', 'Hello mqtt');\n});\nclient.on('message', function (topic, message) {\n  console.log(message.toString());\n});\n```\nAdditional info is the other clients in Python work fine on both the Mosquitto broker and the server example, without the loop at the bottom the script just terminates after publishing, the messages being sent to the same topic from the python clients/broker are not received and the script does not continue to listen it just ends.\n. Sorry but you are wrong there is nothing wrong with the broker, the broker works fine with every other type of client I have running and has worked fine for a long time. The issue is the code above is not correct. My broker is Mosquitto.\n. As I mentioned I am not new to MQTT, the above code is not working it is not receiving messages.\n. Yes I stopped using this client.\n. Thanks. Mosquitto isn't a solid broker? It is vice versa for me the broker works with everything but mqtt.js, \nI have given all I can provide really, initially before I tried the server example  I was using Mosquitto broker which again is part of a functioning network that already exists and all of the Python & C# WIndows 10 Universal App clients, including the one on the same device as the one I am having the issue on now work completely fine and have done for many months. \nIn this instance the code above is on a Raspberry Pi B+ and same results on an Intel Galileo, fresh install of node mqtt and code copied and pasted straight from here. \nI had 4 clients open, one constantly sending messages to the topic (and receiving), a python client receiving all of the messages, and two MQTT.js clients with the above code. \nBoth of the MQTT clients sent their message, received their message and then shut down, I removed the client.end() to see if was that that was making the script terminate, in this situation the script just hung until I added the loop which continually subscribed. \nWhile the other clients were continually receiving the messages, the two MQTT js were not. The reason I tried server example is because I thought, although doubtful as the mqtt network has been working for considerable time now on different platforms, maybe it was an issue somewhere else but it gave exactly the same results. \n. Nothing special: sockets, username, password, default settings pretty much, is on local network and not web exposed so haven't implemented TLS yet.\n1451565161: mosquitto version 1.4.3 (build date 2015-11-08 02:17:25+0100) starting\n1451565161: Using default config.\n1451565161: Opening ipv4 listen socket on port 1883.\n. No problem here it is:\n```\nConfig file for mosquitto\n\nSee mosquitto.conf(5) for more information.\n\nDefault values are shown, uncomment to change.\n\nUse the # character to indicate a comment, but only if it is the\nvery first character on the line.\n=================================================================\nGeneral configuration\n=================================================================\nTime in seconds to wait before resending an outgoing QoS=1 or\nQoS=2 message.\nretry_interval 20\nTime in seconds between updates of the $SYS tree.\nSet to 0 to disable the publishing of the $SYS tree.\nsys_interval 10\nTime in seconds between cleaning the internal message store of\nunreferenced messages. Lower values will result in lower memory\nusage but more processor time, higher values will have the\nopposite effect.\nSetting a value of 0 means the unreferenced messages will be\ndisposed of as quickly as possible.\nstore_clean_interval 10\nWrite process id to a file. Default is a blank string which means\na pid file shouldn't be written.\nThis should be set to /var/run/mosquitto.pid if mosquitto is\nbeing run automatically on boot with an init script and\nstart-stop-daemon or similar.\npid_file pid_file /var/run/mosquitto.pid\nWhen run as root, drop privileges to this user and its primary\ngroup.\nLeave blank to stay as root, but this is not recommended.\nIf run as a non-root user, this setting has no effect.\nNote that on Windows this has no effect and so mosquitto should\nbe started by the user you wish it to run as.\nuser mosquitto\nThe maximum number of QoS 1 and 2 messages currently inflight per\nclient.\nThis includes messages that are partway through handshakes and\nthose that are being retried. Defaults to 20. Set to 0 for no\nmaximum. Setting to 1 will guarantee in-order delivery of QoS 1\nand 2 messages.\nmax_inflight_messages 20\nThe maximum number of QoS 1 and 2 messages to hold in a queue\nabove those that are currently in-flight.  Defaults to 100. Set\nto 0 for no maximum (not recommended).\nSee also queue_qos0_messages.\nmax_queued_messages 100\nSet to true to queue messages with QoS 0 when a persistent client is\ndisconnected. These messages are included in the limit imposed by\nmax_queued_messages.\nDefaults to false.\nThis is a non-standard option for the MQTT v3.1 spec but is allowed in\nv3.1.1.\nqueue_qos0_messages false\nThis option sets the maximum publish payload size that the broker will allow.\nReceived messages that exceed this size will not be accepted by the broker.\nThe default value is 0, which means that all valid MQTT messages are\naccepted. MQTT imposes a maximum payload size of 268435455 bytes.\nmessage_size_limit 0\nThis option controls whether a client is allowed to connect with a zero\nlength client id or not. This option only affects clients using MQTT v3.1.1\nand later. If set to false, clients connecting with a zero length client id\nare disconnected. If set to true, clients will be allocated a client id by\nthe broker. This means it is only useful for clients with clean session set\nto true.\nallow_zero_length_clientid true\nIf allow_zero_length_clientid is true, this option allows you to set a prefix\nto automatically generated client ids to aid visibility in logs.\nauto_id_prefix\nThis option allows persistent clients (those with clean session set to false)\nto be removed if they do not reconnect within a certain time frame.\n\nThis is a non-standard option in MQTT V3.1 but allowed in MQTT v3.1.1.\n\nBadly designed clients may set clean session to false whilst using a randomly\ngenerated client id. This leads to persistent clients that will never\nreconnect. This option allows these clients to be removed.\n\nThe expiration period should be an integer followed by one of h d w m y for\nhour, day, week, month and year respectively. For example\n\npersistent_client_expiration 2m\npersistent_client_expiration 14d\npersistent_client_expiration 1y\n\nThe default if not set is to never expire persistent clients.\npersistent_client_expiration\nIf a client is subscribed to multiple subscriptions that overlap, e.g. foo/\nand foo/+/baz , then MQTT expects that when the broker receives a message on\na topic that matches both subscriptions, such as foo/bar/baz, then the client\nshould only receive the message once.\nMosquitto keeps track of which clients a message has been sent to in order to\nmeet this requirement. The allow_duplicate_messages option allows this\nbehaviour to be disabled, which may be useful if you have a large number of\nclients subscribed to the same set of topics and are very concerned about\nminimising memory usage.\nIt can be safely set to true if you know in advance that your clients will\nnever have overlapping subscriptions, otherwise your clients must be able to\ncorrectly deal with duplicate messages even when then have QoS=2.\nallow_duplicate_messages false\nThe MQTT specification requires that the QoS of a message delivered to a\nsubscriber is never upgraded to match the QoS of the subscription. Enabling\nthis option changes this behaviour. If upgrade_outgoing_qos is set true,\nmessages sent to a subscriber will always match the QoS of its subscription.\nThis is a non-standard option explicitly disallowed by the spec.\nupgrade_outgoing_qos false\n=================================================================\nDefault listener\n=================================================================\nIP address/hostname to bind the default listener to. If not\ngiven, the default listener will not be bound to a specific\naddress and so will be accessible to all network interfaces.\nbind_address ip-address/host name\nbind_address\nPort to use for the default listener.\nlistener 1883\nThe maximum number of client connections to allow. This is\na per listener setting.\nDefault is -1, which means unlimited connections.\nNote that other process limits mean that unlimited connections\nare not really possible. Typically the default maximum number of\nconnections possible is around 1024.\nmax_connections -1\nChoose the protocol to use when listening.\nThis can be either mqtt or websockets.\nWebsockets support is currently disabled by default at compile time.\nCertificate based TLS may be used with websockets, except that\nonly the cafile, certfile, keyfile and ciphers options are supported.\nprotocol mqtt\nWhen a listener is using the websockets protocol, it is possible to serve\nhttp data as well. Set http_dir to a directory which contains the files you\nwish to serve. If this option is not specified, then no normal http\nconnections will be possible.\nhttp_dir\nSet use_username_as_clientid to true to replace the clientid that a client\nconnected with with its username. This allows authentication to be tied to\nthe clientid, which means that it is possible to prevent one client\ndisconnecting another by using the same clientid.\nIf a client connects with no username it will be disconnected as not\nauthorised when this option is set to true.\nDo not use in conjunction with clientid_prefixes.\nSee also use_identity_as_username.\nuse_username_as_clientid\n-----------------------------------------------------------------\nCertificate based SSL/TLS support\n-----------------------------------------------------------------\nThe following options can be used to enable SSL/TLS support for\nthis listener. Note that the recommended port for MQTT over TLS\nis 8883, but this must be set manually.\n\nSee also the mosquitto-tls man page.\nAt least one of cafile or capath must be defined. They both\ndefine methods of accessing the PEM encoded Certificate\nAuthority certificates that have signed your server certificate\nand that you wish to trust.\ncafile defines the path to a file containing the CA certificates.\ncapath defines a directory that will be searched for files\ncontaining the CA certificates. For capath to work correctly, the\ncertificate files must have \".crt\" as the file ending and you must run\n\"c_rehash \" each time you add/remove a certificate.\ncafile\ncapath\nPath to the PEM encoded server certificate.\ncertfile\nPath to the PEM encoded keyfile.\nkeyfile\nThis option defines the version of the TLS protocol to use for this listener.\nThe default value allows v1.2, v1.1 and v1.0, if they are all supported by\nthe version of openssl that the broker was compiled against. For openssl >=\n1.0.1 the valid values are tlsv1.2 tlsv1.1 and tlsv1. For openssl < 1.0.1 the\nvalid values are tlsv1.\ntls_version\nBy default a TLS enabled listener will operate in a similar fashion to a\nhttps enabled web server, in that the server has a certificate signed by a CA\nand the client will verify that it is a trusted certificate. The overall aim\nis encryption of the network traffic. By setting require_certificate to true,\nthe client must provide a valid certificate in order for the network\nconnection to proceed. This allows access to the broker to be controlled\noutside of the mechanisms provided by MQTT.\nrequire_certificate false\nIf require_certificate is true, you may set use_identity_as_username to true\nto use the CN value from the client certificate as a username. If this is\ntrue, the password_file option will not be used for this listener.\nuse_identity_as_username false\nIf you have require_certificate set to true, you can create a certificate\nrevocation list file to revoke access to particular client certificates. If\nyou have done this, use crlfile to point to the PEM encoded revocation file.\ncrlfile\nIf you wish to control which encryption ciphers are used, use the ciphers\noption. The list of available ciphers can be optained using the \"openssl\nciphers\" command and should be provided in the same format as the output of\nthat command.\nIf unset defaults to DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH\nciphers DEFAULT:!aNULL:!eNULL:!LOW:!EXPORT:!SSLv2:@STRENGTH\n-----------------------------------------------------------------\nPre-shared-key based SSL/TLS support\n-----------------------------------------------------------------\nThe following options can be used to enable PSK based SSL/TLS support for\nthis listener. Note that the recommended port for MQTT over TLS is 8883, but\nthis must be set manually.\n\nSee also the mosquitto-tls man page and the \"Certificate based SSL/TLS\nsupport\" section. Only one of certificate or PSK encryption support can be\nenabled for any listener.\nThe psk_hint option enables pre-shared-key support for this listener and also\nacts as an identifier for this listener. The hint is sent to clients and may\nbe used locally to aid authentication. The hint is a free form string that\ndoesn't have much meaning in itself, so feel free to be creative.\nIf this option is provided, see psk_file to define the pre-shared keys to be\nused or create a security plugin to handle them.\npsk_hint\nSet use_identity_as_username to have the psk identity sent by the client used\nas its username. Authentication will be carried out using the PSK rather than\nthe MQTT username/password and so password_file will not be used for this\nlistener.\nuse_identity_as_username false\nWhen using PSK, the encryption ciphers used will be chosen from the list of\navailable PSK ciphers. If you want to control which ciphers are available,\nuse the \"ciphers\" option.  The list of available ciphers can be optained\nusing the \"openssl ciphers\" command and should be provided in the same format\nas the output of that command.\nciphers\n=================================================================\nExtra listeners\n=================================================================\nListen on a port/ip address combination. By using this variable\nmultiple times, mosquitto can listen on more than one port. If\nthis variable is used and neither bind_address nor port given,\nthen the default listener will not be started.\nThe port number to listen on must be given. Optionally, an ip\naddress or host name may be supplied as a second argument. In\nthis case, mosquitto will attempt to bind the listener to that\naddress and so restrict access to the associated network and\ninterface. By default, mosquitto will listen on all interfaces.\nlistener port-number [ip address/host name]\nlistener 9001\nThe maximum number of client connections to allow. This is\na per listener setting.\nDefault is -1, which means unlimited connections.\nNote that other process limits mean that unlimited connections\nare not really possible. Typically the default maximum number of\nconnections possible is around 1024.\nmax_connections -1\nThe listener can be restricted to operating within a topic hierarchy using\nthe mount_point option. This is achieved be prefixing the mount_point string\nto all topics for any clients connected to this listener. This prefixing only\nhappens internally to the broker; the client will not see the prefix.\nmount_point\nChoose the protocol to use when listening.\nThis can be either mqtt or websockets.\nCertificate based TLS may be used with websockets, except that only the\ncafile, certfile, keyfile and ciphers options are supported.\nprotocol websockets\nWhen a listener is using the websockets protocol, it is possible to serve\nhttp data as well. Set http_dir to a directory which contains the files you\nwish to serve. If this option is not specified, then no normal http\nconnections will be possible.\nhttp_dir\nSet use_username_as_clientid to true to replace the clientid that a client\nconnected with with its username. This allows authentication to be tied to\nthe clientid, which means that it is possible to prevent one client\ndisconnecting another by using the same clientid.\nIf a client connects with no username it will be disconnected as not\nauthorised when this option is set to true.\nDo not use in conjunction with clientid_prefixes.\nSee also use_identity_as_username.\nuse_username_as_clientid\n-----------------------------------------------------------------\nCertificate based SSL/TLS support\n-----------------------------------------------------------------\nThe following options can be used to enable certificate based SSL/TLS support\nfor this listener. Note that the recommended port for MQTT over TLS is 8883,\nbut this must be set manually.\n\nSee also the mosquitto-tls man page and the \"Pre-shared-key based SSL/TLS\nsupport\" section. Only one of certificate or PSK encryption support can be\nenabled for any listener.\nAt least one of cafile or capath must be defined to enable certificate based\nTLS encryption. They both define methods of accessing the PEM encoded\nCertificate Authority certificates that have signed your server certificate\nand that you wish to trust.\ncafile defines the path to a file containing the CA certificates.\ncapath defines a directory that will be searched for files\ncontaining the CA certificates. For capath to work correctly, the\ncertificate files must have \".crt\" as the file ending and you must run\n\"c_rehash \" each time you add/remove a certificate.\ncafile\ncapath\nPath to the PEM encoded server certificate.\ncertfile\nPath to the PEM encoded keyfile.\nkeyfile\nBy default an TLS enabled listener will operate in a similar fashion to a\nhttps enabled web server, in that the server has a certificate signed by a CA\nand the client will verify that it is a trusted certificate. The overall aim\nis encryption of the network traffic. By setting require_certificate to true,\nthe client must provide a valid certificate in order for the network\nconnection to proceed. This allows access to the broker to be controlled\noutside of the mechanisms provided by MQTT.\nrequire_certificate false\nIf require_certificate is true, you may set use_identity_as_username to true\nto use the CN value from the client certificate as a username. If this is\ntrue, the password_file option will not be used for this listener.\nuse_identity_as_username false\nIf you have require_certificate set to true, you can create a certificate\nrevocation list file to revoke access to particular client certificates. If\nyou have done this, use crlfile to point to the PEM encoded revocation file.\ncrlfile\nIf you wish to control which encryption ciphers are used, use the ciphers\noption. The list of available ciphers can be optained using the \"openssl\nciphers\" command and should be provided in the same format as the output of\nthat command.\nciphers\n-----------------------------------------------------------------\nPre-shared-key based SSL/TLS support\n-----------------------------------------------------------------\nThe following options can be used to enable PSK based SSL/TLS support for\nthis listener. Note that the recommended port for MQTT over TLS is 8883, but\nthis must be set manually.\n\nSee also the mosquitto-tls man page and the \"Certificate based SSL/TLS\nsupport\" section. Only one of certificate or PSK encryption support can be\nenabled for any listener.\nThe psk_hint option enables pre-shared-key support for this listener and also\nacts as an identifier for this listener. The hint is sent to clients and may\nbe used locally to aid authentication. The hint is a free form string that\ndoesn't have much meaning in itself, so feel free to be creative.\nIf this option is provided, see psk_file to define the pre-shared keys to be\nused or create a security plugin to handle them.\npsk_hint\nSet use_identity_as_username to have the psk identity sent by the client used\nas its username. Authentication will be carried out using the PSK rather than\nthe MQTT username/password and so password_file will not be used for this\nlistener.\nuse_identity_as_username false\nWhen using PSK, the encryption ciphers used will be chosen from the list of\navailable PSK ciphers. If you want to control which ciphers are available,\nuse the \"ciphers\" option.  The list of available ciphers can be optained\nusing the \"openssl ciphers\" command and should be provided in the same format\nas the output of that command.\nciphers\n=================================================================\nPersistence\n=================================================================\nIf persistence is enabled, save the in-memory database to disk\nevery autosave_interval seconds. If set to 0, the persistence\ndatabase will only be written when mosquitto exits. See also\nautosave_on_changes.\nNote that writing of the persistence database can be forced by\nsending mosquitto a SIGUSR1 signal.\nautosave_interval 1800\nIf true, mosquitto will count the number of subscription changes, retained\nmessages received and queued messages and if the total exceeds\nautosave_interval then the in-memory database will be saved to disk.\nIf false, mosquitto will save the in-memory database to disk by treating\nautosave_interval as a time in seconds.\nautosave_on_changes false\nSave persistent message data to disk (true/false).\nThis saves information about all messages, including\nsubscriptions, currently in-flight messages and retained\nmessages.\nretained_persistence is a synonym for this option.\npersistence true\nThe filename to use for the persistent database, not including\nthe path.\npersistence_file mosquitto.db\nLocation for persistent database. Must include trailing /\nDefault is an empty string (current directory).\nSet to e.g. /var/lib/mosquitto/ if running as a proper service on Linux or\nsimilar.\npersistence_location /tmp/\n=================================================================\nLogging\n=================================================================\nPlaces to log to. Use multiple log_dest lines for multiple\nlogging destinations.\nPossible destinations are: stdout stderr syslog topic file\n\nstdout and stderr log to the console on the named output.\n\nsyslog uses the userspace syslog facility which usually ends up\nin /var/log/messages or similar.\n\ntopic logs to the broker topic '$SYS/broker/log/',\nwhere severity is one of D, E, W, N, I, M which are debug, error,\nwarning, notice, information and message. Message type severity is used by\nthe subscribe/unsubscribe log_types and publishes log messages to\n$SYS/broker/log/M/susbcribe or $SYS/broker/log/M/unsubscribe.\n\nThe file destination requires an additional parameter which is the file to be\nlogged to, e.g. \"log_dest file /var/log/mosquitto.log\". The file will be\nclosed and reopened when the broker receives a HUP signal. Only a single file\ndestination may be configured.\n\nNote that if the broker is running as a Windows service it will default to\n\"log_dest none\" and neither stdout nor stderr logging is available.\nUse \"log_dest none\" if you wish to disable logging.\nlog_dest stderr\nIf using syslog logging (not on Windows), messages will be logged to the\n\"daemon\" facility by default. Use the log_facility option to choose which of\nlocal0 to local7 to log to instead. The option value should be an integer\nvalue, e.g. \"log_facility 5\" to use local5.\nlog_facility\nTypes of messages to log. Use multiple log_type lines for logging\nmultiple types of messages.\nPossible types are: debug, error, warning, notice, information,\nnone, subscribe, unsubscribe, websockets, all.\nNote that debug type messages are for decoding the incoming/outgoing\nnetwork packets. They are not logged in \"topics\".\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\nChange the websockets logging level. This is a global option, it is not\npossible to set per listener. This is an integer that is interpreted by\nlibwebsockets as a bit mask for its lws_log_levels enum. See the\nlibwebsockets documentation for more details. \"log_type websockets\" must also\nbe enabled.\nwebsockets_log_level 0\nIf set to true, client connection and disconnection messages will be included\nin the log.\nconnection_messages true\nIf set to true, add a timestamp value to each log message.\nlog_timestamp true\n=================================================================\nSecurity\n=================================================================\nIf set, only clients that have a matching prefix on their\nclientid will be allowed to connect to the broker. By default,\nall clients may connect.\nFor example, setting \"secure-\" here would mean a client \"secure-\nclient\" could connect but another with clientid \"mqtt\" couldn't.\nclientid_prefixes\nBoolean value that determines whether clients that connect\nwithout providing a username are allowed to connect. If set to\nfalse then a password file should be created (see the\npassword_file option) to control authenticated client access.\nDefaults to true.\nallow_anonymous false\nIn addition to the clientid_prefixes, allow_anonymous and TLS\nauthentication options, username based authentication is also\npossible. The default support is described in \"Default\nauthentication and topic access control\" below. The auth_plugin\nallows another authentication method to be used.\nSpecify the path to the loadable plugin and see the\n\"Authentication and topic access plugin options\" section below.\nauth_plugin\n-----------------------------------------------------------------\nDefault authentication and topic access control\n-----------------------------------------------------------------\nControl access to the broker using a password file. This file can be\ngenerated using the mosquitto_passwd utility. If TLS support is not compiled\ninto mosquitto (it is recommended that TLS support should be included) then\nplain text passwords are used, in which case the file should be a text file\nwith lines in the format:\nusername:password\nThe password (and colon) may be omitted if desired, although this\noffers very little in the way of security.\n\nSee the TLS client require_certificate and use_identity_as_username options\nfor alternative authentication options.\npassword_file /etc/mosquitto/accesslist.txt\nAccess may also be controlled using a pre-shared-key file. This requires\nTLS-PSK support and a listener configured to use it. The file should be text\nlines in the format:\nidentity:key\nThe key should be in hexadecimal format without a leading \"0x\".\npsk_file\nControl access to topics on the broker using an access control list\nfile. If this parameter is defined then only the topics listed will\nhave access.\nIf the first character of a line of the ACL file is a # it is treated as a\ncomment.\nTopic access is added with lines of the format:\n\ntopic [read|write|readwrite] \n\nThe access type is controlled using \"read\", \"write\" or \"readwrite\". This\nparameter is optional (unless  contains a space character) - if not\ngiven then the access is read/write.   can contain the + or\nwildcards as in subscriptions.\n\nThe first set of topics are applied to anonymous clients, assuming\nallow_anonymous is true. User specific topic ACLs are added after a\nuser line as follows:\n\nuser \n\nThe username referred to here is the same as in password_file. It is\nnot the clientid.\n\n\nIf is also possible to define ACLs based on pattern substitution within the\ntopic. The patterns available for substition are:\n\n%c to match the client id of the client\n%u to match the username of the client\n\nThe substitution pattern must be the only text for that level of hierarchy.\n\nThe form is the same as for the topic keyword, but using pattern as the\nkeyword.\nPattern ACLs apply to all users even if the \"user\" keyword has previously\nbeen given.\n\nIf using bridges with usernames and ACLs, connection messages can be allowed\nwith the following pattern:\npattern write $SYS/broker/connection/%c/state\n\npattern [read|write|readwrite] \n\nExample:\n\npattern write sensor/%u/data\n\nacl_file\n-----------------------------------------------------------------\nAuthentication and topic access plugin options\n-----------------------------------------------------------------\nIf the auth_plugin option above is used, define options to pass to the\nplugin here as described by the plugin instructions. All options named\nusing the format auth_opt_* will be passed to the plugin, for example:\n\nauth_opt_db_host\nauth_opt_db_port\nauth_opt_db_username\nauth_opt_db_password\n=================================================================\nBridges\n=================================================================\nA bridge is a way of connecting multiple MQTT brokers together.\nCreate a new bridge using the \"connection\" option as described below. Set\noptions for the bridges using the remaining parameters. You must specify the\naddress and at least one topic to subscribe to.\nEach connection must have a unique name.\nThe address line may have multiple host address and ports specified. See\nbelow in the round_robin description for more details on bridge behaviour if\nmultiple addresses are used.\nThe direction that the topic will be shared can be chosen by\nspecifying out, in or both, where the default value is out.\nThe QoS level of the bridged communication can be specified with the next\ntopic option. The default QoS level is 0, to change the QoS the topic\ndirection must also be given.\nThe local and remote prefix options allow a topic to be remapped when it is\nbridged to/from the remote broker. This provides the ability to place a topic\ntree in an appropriate location.\nFor more details see the mosquitto.conf man page.\nMultiple topics can be specified per connection, but be careful\nnot to create any loops.\nIf you are using bridges with cleansession set to false (the default), then\nyou may get unexpected behaviour from incoming topics if you change what\ntopics you are subscribing to. This is because the remote broker keeps the\nsubscription for the old topic. If you have this problem, connect your bridge\nwith cleansession set to true, then reconnect with cleansession set to false\nas normal.\nconnection \naddress [:] [[:]]\ntopic  [[[out | in | both] qos-level] local-prefix remote-prefix]\nSet the version of the MQTT protocol to use with for this bridge. Can be one\nof mqttv31 or mqttv311. Defaults to mqttv31.\nbridge_protocol_version mqttv31\nIf a bridge has topics that have \"out\" direction, the default behaviour is to\nsend an unsubscribe request to the remote broker on that topic. This means\nthat changing a topic direction from \"in\" to \"out\" will not keep receiving\nincoming messages. Sending these unsubscribe requests is not always\ndesirable, setting bridge_attempt_unsubscribe to false will disable sending\nthe unsubscribe request.\nbridge_attempt_unsubscribe true\nIf the bridge has more than one address given in the address/addresses\nconfiguration, the round_robin option defines the behaviour of the bridge on\na failure of the bridge connection. If round_robin is false, the default\nvalue, then the first address is treated as the main bridge connection. If\nthe connection fails, the other secondary addresses will be attempted in\nturn. Whilst connected to a secondary bridge, the bridge will periodically\nattempt to reconnect to the main bridge until successful.\nIf round_robin is true, then all addresses are treated as equals. If a\nconnection fails, the next address will be tried and if successful will\nremain connected until it fails\nround_robin false\nSet the client id to use on the remote end of this bridge connection. If not\ndefined, this defaults to 'name.hostname' where name is the connection name\nand hostname is the hostname of this computer.\nThis replaces the old \"clientid\" option to avoid confusion. \"clientid\"\nremains valid for the time being.\nremote_clientid\nSet the clientid to use on the local broker. If not defined, this defaults to\n'local.'. If you are bridging a broker to itself, it is important\nthat local_clientid and clientid do not match.\nlocal_clientid\nSet the clean session variable for this bridge.\nWhen set to true, when the bridge disconnects for any reason, all\nmessages and subscriptions will be cleaned up on the remote\nbroker. Note that with cleansession set to true, there may be a\nsignificant amount of retained messages sent when the bridge\nreconnects after losing its connection.\nWhen set to false, the subscriptions and messages are kept on the\nremote broker, and delivered when the bridge reconnects.\ncleansession false\nIf set to true, publish notification messages to the local and remote brokers\ngiving information about the state of the bridge connection. Retained\nmessages are published to the topic $SYS/broker/connection//state\nunless the notification_topic option is used.\nIf the message is 1 then the connection is active, or 0 if the connection has\nfailed.\nnotifications true\nChoose the topic on which notification messages for this bridge are\npublished. If not set, messages are published on the topic\n$SYS/broker/connection//state\nnotification_topic\nSet the keepalive interval for this bridge connection, in\nseconds.\nkeepalive_interval 60\nSet the start type of the bridge. This controls how the bridge starts and\ncan be one of three types: automatic, lazy and once. Note that RSMB provides\na fourth start type \"manual\" which isn't currently supported by mosquitto.\n\n\"automatic\" is the default start type and means that the bridge connection\nwill be started automatically when the broker starts and also restarted\nafter a short delay (30 seconds) if the connection fails.\n\nBridges using the \"lazy\" start type will be started automatically when the\nnumber of queued messages exceeds the number set with the \"threshold\"\nparameter. It will be stopped automatically after the time set by the\n\"idle_timeout\" parameter. Use this start type if you wish the connection to\nonly be active when it is needed.\n\nA bridge using the \"once\" start type will be started automatically when the\nbroker starts but will not be restarted if the connection fails.\nstart_type automatic\nSet the amount of time a bridge using the automatic start type will wait\nuntil attempting to reconnect.  Defaults to 30 seconds.\nrestart_timeout 30\nSet the amount of time a bridge using the lazy start type must be idle before\nit will be stopped. Defaults to 60 seconds.\nidle_timeout 60\nSet the number of messages that need to be queued for a bridge with lazy\nstart type to be restarted. Defaults to 10 messages.\nMust be less than max_queued_messages.\nthreshold 10\nIf try_private is set to true, the bridge will attempt to indicate to the\nremote broker that it is a bridge not an ordinary client. If successful, this\nmeans that loop detection will be more effective and that retained messages\nwill be propagated correctly. Not all brokers support this feature so it may\nbe necessary to set try_private to false if your bridge does not connect\nproperly.\ntry_private true\nSet the username to use when connecting to a broker that requires\nauthentication.\nThis replaces the old \"username\" option to avoid confusion. \"username\"\nremains valid for the time being.\nremote_username\nSet the password to use when connecting to a broker that requires\nauthentication. This option is only used if remote_username is also set.\nThis replaces the old \"password\" option to avoid confusion. \"password\"\nremains valid for the time being.\nremote_password\n-----------------------------------------------------------------\nCertificate based SSL/TLS support\n-----------------------------------------------------------------\nEither bridge_cafile or bridge_capath must be defined to enable TLS support\nfor this bridge.\nbridge_cafile defines the path to a file containing the\nCertificate Authority certificates that have signed the remote broker\ncertificate.\nbridge_capath defines a directory that will be searched for files containing\nthe CA certificates. For bridge_capath to work correctly, the certificate\nfiles must have \".crt\" as the file ending and you must run \"c_rehash <path to\ncapath>\" each time you add/remove a certificate.\nbridge_cafile\nbridge_capath\nPath to the PEM encoded client certificate, if required by the remote broker.\nbridge_certfile\nPath to the PEM encoded client private key, if required by the remote broker.\nbridge_keyfile\nWhen using certificate based encryption, bridge_insecure disables\nverification of the server hostname in the server certificate. This can be\nuseful when testing initial server configurations, but makes it possible for\na malicious third party to impersonate your server through DNS spoofing, for\nexample. Use this option in testing only. If you need to resort to using this\noption in a production environment, your setup is at fault and there is no\npoint using encryption.\nbridge_insecure false\n-----------------------------------------------------------------\nPSK based SSL/TLS support\n-----------------------------------------------------------------\nPre-shared-key encryption provides an alternative to certificate based\nencryption. A bridge can be configured to use PSK with the bridge_identity\nand bridge_psk options. These are the client PSK identity, and pre-shared-key\nin hexadecimal format with no \"0x\". Only one of certificate and PSK based\nencryption can be used on one\nbridge at once.\nbridge_identity\nbridge_psk\n=================================================================\nExternal config files\n=================================================================\nExternal configuration files may be included by using the\ninclude_dir option. This defines a directory that will be searched\nfor config files. All files that end in '.conf' will be loaded as\na configuration file. It is best to have this as the last option\nin the main file. This option will only be processed from the main\nconfiguration file. The directory specified must not contain the\nmain configuration file.\ninclude_dir\n=================================================================\nrsmb options - unlikely to ever be supported\n=================================================================\nffdc_output\nmax_log_entries\ntrace_level\ntrace_output\n```\n(edited for better rendering)\n. I was scratching my head as well I honestly did spend ages and many many Google searches after I spent my own knowledge and can not get around it. The reason I need it in Node is I am in a competition and am implementing Azure IoT Hub, currently they don't have a Python API but do have Node, otherwise would just stick with Python, although I will look at stack as I have thought of a way of automating setup. Do you know of any other Node MQTT clients. \n. Mcollina disabling the password is not really a solution is it. The credentials were correct however I solved this by stopping using this project no problems with any other mqtt client soo suggests you have an issue somewhere . ",
    "Harsha-HV": "I have few issues in connecting to MQTT Broker (RabbitMQ) which is installed locally, and trying to create the scripts from the TruAPI, and below is my code and its Output\n```js\n'use strict';\nexports = module.exports = function (vuser) {\nexports=module.exports = function(MQTT)  {     \n//var vuserId;\nvar client;\n/ init action /\nvuser.init('Vuser init action', function (svc, done) {\n  svc.logger.info('Vuser %s init', vuserId);\nmqtt=require('mqtt');\n  client= mqtt.connect('http://localhost:15672');\n  done();\n});\n/ main action /\nvuser.action('Vuser main action', function (svc, done) { \n  svc.logger.info('Vuser %s running', vuserId);\n  svc.transaction.start('PUBLISH_MQTT');\nsvc.logger.info('publishing message'); \n  client.publish('HPE/MQTT_TEST','HELLO SRL MQTT PROTOCOL'); \n  svc.transaction.end('PUBLISH_MQTT',svc.transaction.pass);\nclient.on('message', function(topic, message) {\n    svc.logger.info('publisher-putting message');\n    console.log(message.tostring());\n  });\n});\n```\nOUTPUT:\nD:\\Projects\\Whitepapers\\MyTruAPI\\PublisherScript>truapi-cli\n2017-03-28T11:30:18.716Z - debug:   TruAPI CLI started\n2017-03-28T11:30:18.948Z - debug:   load json from D:\\Projects\\Whitepapers\\MyTru\nAPI\\PublisherScript\\truapi.json\n2017-03-28T11:30:18.948Z - debug:   load script {\"script\":\"D:\\\\Projects\\\\Whitepa\npers\\\\MyTruAPI\\\\PublisherScript\\\\dempsample.js\",\"testId\":\"localtest\",\"groupId\":\"\nlocalGroup\"}\n2017-03-28T11:30:18.948Z - debug:   script D:\\Projects\\Whitepapers\\MyTruAPI\\Publ\nisherScript\\dempsample.js loaded\n2017-03-28T11:30:18.958Z - debug:   vusers subscribe\n2017-03-28T11:30:18.958Z - debug:   vuser 0 subscribed\n2017-03-28T11:30:18.958Z - debug:   vusers init\n2017-03-28T11:30:18.958Z - debug:   vuser 0 (Init) end\n2017-03-28T11:30:18.958Z - debug:   vuser 0, begin Action\n2017-03-28T11:30:18.958Z - debug:   vuser 0 (Action) end\n2017-03-28T11:30:18.958Z - debug:   vuser 0, begin Action=(1)\n2017-03-28T11:30:18.958Z - debug:   vuser 0 (End) end\n2017-03-28T11:30:19.967Z - info:    Test finished ( 1.261 s )\nPLease help me in moving forward with the above script\n. ",
    "Franco-Poveda": "same problem. @AdamMiltonBarker witch js client library worked for you?. ",
    "Rod-O": "same problem. ",
    "chinds185a": "same problem here, using with cloudMQTT I always receive the message I published when i connected and thats it.. ",
    "coding-killer": "\nYes I stopped using this client.\nWhich javascript client you prefer...I am working with paho python client so far but this client has some major issue with keepalive...Please guide. \n",
    "JuanKraut": "+1\n. ",
    "nfantone": "Ok, nevermind. I think I got it. clientId should be the same on every connection in order to retrieve offline messages.\nThanks, anyway. \n. One thing that I should mention is that the messages that don't end up in the subscriber's 'message' event are still consumed and silently discarded. So, no messages are left in the queue after the above process.\n. > I have no idea of what prefetch is for RabbitMQ.\nhttps://www.rabbitmq.com/consumer-prefetch.html\nBasically, it defines the amount of unack messages to be fetched per connection/channel in a single round-trip to the broker.\n\nQoS 1 works fine with other brokers, so I fear this is a Rabbit issue. \n\nCould be. But I'm reluctant to think that, since RabbitMQ's MQTT support has been around longer than Mosca and almost the same time as Mosquitto.\n\nDoes the python library work with a similar configuration?\n\nSorry, which python library would that be?\n. > Anyway, It should be enabled and set to 10 by default at plugin level:\nWe change that setting on purpose to showcase the error more easily in the example I described. With the default value, anything lower than 10 messages was lost during pulling.\n\nMaybe it's conflicting somehow with the global setting.\n\nThere is no global setting for this. Prefetch is a QoS value per channel/connection. The plugin sets that value at 10 for every channel while on MQTT.\nI could try the python client and see if it behaves the same. I'll get back to you, guys.\n. > Again, there is no pulling on MQTT. An MQTT client does not ask for\n\nmessages continuosly or when it is ready. \n\nYes, I'm aware of that. I was just calling it pulling because it felt easier to understand and explain the situation. Issue appears when the subscriber receives pushed messages from the broker. Didn't think it was really relevant.\n\nDoes the code above work with other brokers, right?\n\nHaven't tried since I'm stuck with RabbitMQ, sadly. I'll give it a go to both, the python client and a new broker, next week.\nThanks for your replies, @mcollina.\n. @mcollina Tried both of my scripts using mqtt://test.mosquitto.org:1883 and they didn't work either. This time, I'm not receiving anything on the subscriber after publishing qos: 1 messages while offline. But that may be because the Mosquitto test instance doesn't accept persistent messages?\n. @mcollina Your examples also work with mqtt://test.mosquitto.org:1883. The thing wasn't about a \"missing a clientId\" (I believe both my scripts and yours have a properly defined clientId), but the 'message' and 'error' callbacks being defined inside the client.subscribe block.\nIf you do that, then you'll receive no messages at all. You can try it out. Is that actually expected?\n. @mcollina Ok, I can confirm that. I've tested this with RabbitMQ and it's working wonderfully.\nIf I move the 'message' event declaration outside the client.subcribe I see this output:\nmqtt/test : {\"id\":73.66805006749928,\"from\":\"Me\",\"message\":\"iy277bi\"}\nNow waiting for incoming messages...\nmqtt/test : {\"id\":95.23756187409163,\"from\":\"Me\",\"message\":\"8dm4nuy\"}\nmqtt/test : {\"id\":33.074697852134705,\"from\":\"Me\",\"message\":\"7al7ih7\"}\nmqtt/test : {\"id\":8.080576034262776,\"from\":\"Me\",\"message\":\"sm1u1rc\"}\n...\nYou can see that an incoming message is printed before the Now waiting for incoming messages... legend appears.\nEverything makes sense now. I'm closing this.\nThank you very much for your patience.\n. Also, for any other who encounters this issue using RabbitMQ, you may consider lowering the default prefetch count in MQTT plugin in order to limit the number of lost messages while struggling with this.\nGrazie mille per tutti, anche un'altra volta.\n. ",
    "qq8057656qq": "same issues, i can't receive message after first message, sad. ",
    "ktersius": "@mcollina  It is fixed. If you look at my code you can see it is fixed to \"browser123\". Also I don't refresh the browser inbetween.\nAs you can see this is all in one browser session with the same clientId\n```\nmqtt client connected\nPubSubService.ts:29 Test Message 4\nPubSubService.ts:30 Object {type: \"Buffer\", data: Array[15]}\nPubSubService.ts:31 Packet {cmd: \"publish\", retain: false, qos: 1, dup: false, length: 29\u2026}\nPubSubService.ts:24 reconnecting\nbrowser.js:36 WebSocket connection to 'ws://ubuntuvm:3000/' failed: Error in connection establishment: net::ERR_CONNECTION_TIMED_OUT\nPubSubService.ts:24 reconnecting\nPubSubService.ts:15 mqtt client connected\n```\n. Yes the clientId does seem to arrive correctly. \nserver.authorizeSubscribe = function (client, topic, callback) {\n    //console.log(client.user);\n    console.log('auth subscribe client %s, user %s , topic %s', client.id, client.user, topic);\n    callback(null, true);\n}\nOutput on console\n\"auth subscribe client browser123, user undefined , topic UserChange\"\n. The whole client mosca object on 'authorizeSubscribe': \nps. I've installed version mqtt@1.4.0 now to see if the same happens and it does.\nClient {\n  connection: \n   Connection {\n     stream: \n      DestroyableTransform {\n        _readableState: [Object],\n        readable: true,\n        domain: null,\n        _events: [Object],\n        _eventsCount: 7,\n        _maxListeners: undefined,\n        _writableState: [Object],\n        writable: true,\n        allowHalfOpen: true,\n        _transformState: [Object],\n        _destroyed: false,\n        _transform: [Function: socketWriteNode],\n        _flush: [Function: socketEnd],\n        socket: [Object] },\n     _options: { objectMode: true },\n     _readableState: \n      ReadableState {\n        highWaterMark: 16384,\n        buffer: [],\n        length: 0,\n        pipes: null,\n        pipesCount: 0,\n        flowing: false,\n        ended: false,\n        endEmitted: false,\n        reading: true,\n        calledRead: true,\n        sync: false,\n        needReadable: true,\n        emittedReadable: false,\n        readableListening: false,\n        objectMode: true,\n        defaultEncoding: 'utf8',\n        ranOut: false,\n        awaitDrain: 0,\n        readingMore: false,\n        decoder: null,\n        encoding: null },\n     readable: true,\n     domain: null,\n     _events: \n      { end: [Object],\n        finish: [Function],\n        data: [Function: emitPacket],\n        readable: [Function],\n        error: [Object],\n        puback: [Function],\n        pingreq: [Function],\n        subscribe: [Function],\n        publish: [Function],\n        unsubscribe: [Function],\n        disconnect: [Function],\n        close: [Function] },\n     _eventsCount: 12,\n     _maxListeners: undefined,\n     _writableState: \n      WritableState {\n        highWaterMark: 16384,\n        objectMode: true,\n        needDrain: false,\n        ending: false,\n        ended: false,\n        finished: false,\n        decodeStrings: true,\n        defaultEncoding: 'utf8',\n        length: 0,\n        writing: false,\n        sync: false,\n        bufferProcessing: false,\n        onwrite: [Function],\n        writecb: null,\n        writelen: 0,\n        buffer: [],\n        errorEmitted: false },\n     writable: true,\n     allowHalfOpen: true,\n     _writable: \n      DestroyableTransform {\n        _readableState: [Object],\n        readable: true,\n        domain: null,\n        _events: [Object],\n        _eventsCount: 5,\n        _maxListeners: undefined,\n        _writableState: [Object],\n        writable: true,\n        allowHalfOpen: true,\n        _transformState: [Object],\n        _destroyed: false,\n        _transform: [Function: process] },\n     _callWrite: [Function: callWrite3Args],\n     _readable: \n      DestroyableTransform {\n        _readableState: [Object],\n        readable: true,\n        domain: null,\n        _events: [Object],\n        _eventsCount: 7,\n        _maxListeners: undefined,\n        _writableState: [Object],\n        writable: true,\n        allowHalfOpen: true,\n        _transformState: [Object],\n        _destroyed: false,\n        _transform: [Function: process] },\n     _lastReadCallback: null,\n     pipe: [Function],\n     addListener: [Function: addListener],\n     on: [Function: addListener],\n     pause: [Function],\n     resume: [Function] },\n  server: \n   EventEmitter {\n     domain: null,\n     _events: \n      { clientConnected: [Object],\n        ready: [Object],\n        subscribed: [Function],\n        unsubscribed: [Function],\n        clientDisconnected: [Function],\n        published: [Function] },\n     _eventsCount: 6,\n     _maxListeners: undefined,\n     opts: \n      { port: 1883,\n        host: null,\n        backend: [Object],\n        stats: false,\n        publishNewClient: true,\n        publishClientDisconnect: true,\n        maxInflightMessages: 1024,\n        logger: [Object] },\n     modernOpts: \n      { host: null,\n        backend: [Object],\n        stats: false,\n        publishNewClient: true,\n        publishClientDisconnect: true,\n        maxInflightMessages: 1024,\n        logger: [Object],\n        interfaces: [Object] },\n     _dedupId: 0,\n     clients: \n      { lens_qWAaURAnyLTwpyeeXxbtkJBJTt9: [Object],\n        lens_3AFttkTOFy5a4KAFTeKD3VmvVs5: [Object],\n        browser123: [Circular] },\n     closed: false,\n     logger: \n      Logger {\n        domain: null,\n        _events: {},\n        _eventsCount: 0,\n        _maxListeners: undefined,\n        _level: 40,\n        streams: [Object],\n        serializers: [Object],\n        src: false,\n        fields: [Object] },\n     id: 'NkCLwk8vx',\n     ascoltatore: \n      EventEmitter {\n        domain: null,\n        _events: [Object],\n        _eventsCount: 4,\n        _maxListeners: 0,\n        _separator: '/',\n        _wildcardOne: '+',\n        _wildcardSome: '*',\n        _nativeSettings: {},\n        publish: [Function],\n        pub: [Function],\n        _ready: true,\n        _closed: false,\n        _opts: [Object],\n        url: 'mongodb://localhost:27017/mqtt',\n        _pubsubCollection: 'ascoltatori',\n        _maxRetry: 5,\n        mongoOpts: {},\n        _ascoltatore: [Object],\n        channels: {},\n        _handlingCursorFailure: false,\n        _lastSuccessfulHandling: 568cf889e79a063e8d1471cf,\n        wait: 100,\n        connectionParams: [Object],\n        db: [Object],\n        collection: [Object],\n        _cursor: [Object] },\n     servers: [ [Object] ],\n     authenticate: [Function],\n     authorizeSubscribe: [Function],\n     persistence: null },\n  logger: \n   Logger {\n     domain: null,\n     _events: {},\n     _eventsCount: 0,\n     _maxListeners: undefined,\n     _level: 40,\n     streams: [ [Object] ],\n     serializers: \n      { client: [Function: clientSerializer],\n        packet: [Function: packetSerializer],\n        req: [Function: req],\n        res: [Function: res] },\n     src: false,\n     fields: \n      { name: 'mosca',\n        hostname: 'ubuntu',\n        pid: 36158,\n        client: 'browser123' } },\n  subscriptions: {},\n  nextId: 1,\n  inflight: {},\n  inflightCounter: 0,\n  _lastDedupId: -1,\n  _closed: false,\n  _closing: false,\n  forward: [Function],\n  id: 'browser123',\n  keepalive: 10,\n  will: undefined,\n  clean: false,\n  timer: \n   Retimer {\n     _started: 1452079241313,\n     _rescheduled: 15000,\n     _scheduled: 15000,\n     _args: [],\n     _timer: \n      { _called: false,\n        _idleTimeout: 15000,\n        _idlePrev: [Object],\n        _idleNext: [Object],\n        _idleStart: 76679,\n        _onTimeout: [Function],\n        _repeat: null } } }\n. I installed version 1.0.0 now and this is still happening. Sure my code is not missing something?\n. @sandro-k @mcollina \nI've quickly created a simple node project to test this issue with https://github.com/ktersius/mqtt-test.\nEven in it's most basic form I'm still getting this issue. I'm sure it's something small.\n. @sandro-k What is your setup like? I have a host and a VM, my client runs on the host and connects to the VM on port 3000. I then disconnect the lan adapter of the VM to simulate being disconnected. \n1. Run sample app server inside VM.\n2. Go into host, open client in browser and open MQTTlens and subscribe.\n3. See that both are getting messages.\n4. Disconnect VM lan adapter.\n5. Wait for client in browser to log reconnecting and throw a WS error.\n6. Reconnect VM lan adapter.\n7. MQTTlens receives skipped and new messages.(If it has not shown \"Connection Lost\" see my post below)\n8. Browser client reconnects and ONLY receives new messages.\nDid you have a look at my sample code that I posted, if you could take checkout that and run it and see if it works or not?\n. @sandro-k\nOk I have some more info. Once the client throws a WS error and reconnects it will not receive the missed messages. The same goes for MQTTlens, after it has said \"Connection Lost\" and I reconnect the VM lan adapter it also does not get the skipped messages. It just seems MQTTlens timeouts takes longer and therefore it shows more resilience.\nIf I reconnect the lan adapter before my browser clients throws the WS error it actually does receive the missed messages...Same for MQTTlens if I reconnect the VM before it says connection lost it will also get the skipped messages.\nMQTT Message : 2016-01-06T14:46:21.111Z\nmqttsample.js:18 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://ubuntuvm:3000/' failed: Error in connection establishment: net::ERR_CONNECTION_TIMED_OUT\nmqttsample.js:18 reconnecting\nmqttsample.js:9 mqtt client connected\n. @sandro-k How is your mosca setup? This might then well be a mosca and mongodb bug. Check my result.\nMQTT Message : 40\nmqttsample.js:22 MQTT Message : 41\nmqttsample.js:22 MQTT Message : 43\nmqttsample.js:22 MQTT Message : 42\nmqttsample.js:22 MQTT Message : 44\nmqttsample.js:22 MQTT Message : 45\nmqttsample.js:22 MQTT Message : 46\nmqttsample.js:18 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://ubuntuvm:3000/' failed: Error in connection establishment: net::ERR_CONNECTION_TIMED_OUT\nmqttsample.js:18 reconnecting\nmqttsample.js:9 mqtt client connected\nmqttsample.js:22 MQTT Message : 91\nmqttsample.js:22 MQTT Message : 92\nmqttsample.js:22 MQTT Message : 93\nmqttsample.js:22 MQTT Message : 95\nmqttsample.js:22 MQTT Message : 94\nmqttsample.js:22 MQTT Message : 96\nmqttsample.js:22 MQTT Message : 97\nmqttsample.js:22 MQTT Message : 98\nmqttsample.js:22 MQTT Message : 100\nmqttsample.js:22 MQTT Message : 99\n. @sandro-k So you are not running mosca with any persisted backend then? I'm gonna quickly try and run mosca on its own.\n. @sandro-k @mcollina \nAlright I can confirm that running mosca in the console produces the correct result! So I might have to file a bug with mosca then.\nIf I run mosca in Embedded / Separate HTTP Server mode those missed messages do not get picked up in the client once it reconnects. @mcollina is my node mosca setup correct? I've tried node+mosca+express with and without persistence and missed messages are not picked up.  \nQTT Message : 7\nmqttsample.js:22 MQTT Message : 8\nmqttsample.js:22 MQTT Message : 9\nmqttsample.js:22 MQTT Message : 10\nmqttsample.js:18 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://ubuntuvm:3005/' failed: Error in connection establishment: net::ERR_CONNECTION_TIMED_OUT\nmqttsample.js:18 reconnecting\nmqttBrowser.js:11736 WebSocket connection to 'ws://ubuntuvm:3005/' failed: Error in connection establishment: net::ERR_CONNECTION_TIMED_OUT\nmqttsample.js:18 reconnecting\nmqttsample.js:9 mqtt client connected\nmqttsample.js:22 MQTT Message : 11\nmqttsample.js:22 MQTT Message : 12\nmqttsample.js:22 MQTT Message : 13\nmqttsample.js:22 MQTT Message : 14\nmqttsample.js:22 MQTT Message : 15\nmqttsample.js:22 MQTT Message : 16\n. @sandro-k Yea close it. It seems to be a mosca embedded issue. I think...\n. ",
    "yyberi": "Thanks for you help. That put me to a right way. client_id was not the actual problem and it works now even without passing id at connect. \nProblem was mine stupid bug. socket.mqttClient.publish was destroyed off course with the socket disconnect. MQTT works very well with own connection in each socket.io client. \n. ",
    "GavinDmello": "No. I'm not waiting for the callback .\n. I was thinking of the same but the issue reoccurs for normal client scripts too. So everyone using subscribe command on connect will have to ensure it happens exactly once. . Sure. @mcollina Will this break the API? I return an empty array if all subscriptions are duplicates . ",
    "alliv8": "Sorry for that. Went through Mosca in detail and loved the abstraction with ascaltatore. I think we'll go ahead with Mosca keeping Mosquitto as the backend for Ascaltatore, and Aerospike as the persistence layer. We'll be writing a persistence wrapper for Aerospike as well.\n. Oh, we're just about to start using Mosca in production. We're looking at\noverriding the client.js & server.js prototype functions to fit in our\ncustom logic. We have a requirement of modifying the payload at the proxy\nserver layer before sending it to mosquitto.\nPlease share your thoughts on this. Thanks\nOn Sun, Jan 24, 2016 at 8:06 PM, Matteo Collina notifications@github.com\nwrote:\n\nI'm splitting Mosca and Ascoltatori into multiple modules. Check out Aedes\nhttp://npm.im/aedes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/376#issuecomment-174303781.\n. But MQEmitter is backed by memory right? I'm looking to have Mosquitto as the backend\n. \n",
    "RickBullotta": "Actually, looking at the source, there appears to be a this.connected property, but overall I think it may be a documentation issue.  Also, it should be documented that the reconnect event does not imply a successful reconnect, only a reconnection attempt.\n. ",
    "MichMich": "I think I got a bit further: when I connect to the mosquitto test server, it has the same problems. \nSo:\n- running the node.js script on my mac = no problem, stable connection\n- running the node.js script on my centos web server = disconnections, unstable connection.\nI'll try to figure out what the issue is on the CentOs server. Any suggestion is welcome.\n. I figured out I can solve this by occasionally publishing a message. Only subscribing causes the issue. It does feel like a workaround, though. \n. I did not change the default config.\n. The default keepalive is 10 seconds. Would you suggest lowering it? To 5 seconds?\n. Ah, I see! I was under the assumption, the keepalive property was the number of seconds between every keep alive ping. I now understand it's the max number of seconds it can go without any contact.\nIncreasing the number did improve the connection a bit. But as you can guess, the error still occurs after 60+ seconds. - Is there a maximum number of seconds I can use?\n. Exactly. It's not based in the server I connect to, but based on the server I'm running my script on. It seems it doesn't keep the connection alive (pings). \n. Will do! I'll report back as soon as I find a cause or solution.\n. Ok, I'm feeling pretty stupid now ...\nI cloned the mqtt.js repo and added some logging to the suggested function. It turned the ping requests were send as required and on time. More importantly: the connection was now stable and did not disconnect. \nSo then it occurred to me: with the newly pulled library, everything works fine. Am I just running an old version of MQTT.js on my web server? To test it, I typed the following magic command:\nnpm update mqtt\nAnd indeed ... The problem is solved. DOH!\nSo kids, always update your modules before you start wasting days of debugging ... sigh\n. ",
    "hakanernam": "Actually, the maximum amount of time without a contact(Control packet) without a forced server disconnect is 1.5 times that. [MQTT3.1.1 - 3.1.2.10 Keep Alive]. Max keep-alive value is 65535 seconds as the value is a 16-bit word. But I understand from the docs  MQTT.js client already should handle ping requests:\nhttps://github.com/mqttjs/MQTT.js#mqttclientstreambuilder-options\n. He stated that he  connected to mosquito test server from separate machines, so I believe ping requests somehow do not go out when running the script on his web server as they should. \n. I suspect a race condition or maybe a permission issue could be causing _setupPingTimer function not being called or the interval not being set. \nI would advise copying the repository to same directory as your script,  putting some log statements in that function and _checkPing to see if they are indeed called. \n. Better than the current 10 seconds, I believe.\n. I would be happy to try. My node skills are non existent, though. So a proper PR may take some time.\n. ",
    "danki": "Have allmos same issue, how ever on Android side. Have been struggling with this past 2 months now and @MichMich solution above (#issuecomment-183909042) seems to solve that, at least regarding android. \nConnection has been up for 2 hours straight, so i see positive effect here :). ",
    "loris": "Confirm same issue. It looks related to websocket (thus browser only).\n. ",
    "mayooran99": "Hey I'm having the same issue! are there any solutions to this yet? I'm running a node JS application. Not browser specific. And I'm not using secure websockets. I'm connected to a mosquitto broker with \"clean\" value set to false in my client\n. thanks a lot mate! its working now! I'll write a detailed blog on this and share it here for new users! :)\n. sure mate! I'll do it within the next two weeks!\n. ",
    "lordkada": "+1\nI'm experiencing the same (but within node.js it works as expected).\n```\nclient = mqtt.connect(\"wss://...omissis...\")\nchannel = \"test_channel\"\nclient.on \"connect\", () ->\n    console.log \"Subscribing channel: #{channel}\"\n    client.subscribe channel\nclient.on \"message\", (topic, payload) ->\n    console.log \"received message\"\n    console.log payload\nclient.on \"offline\", () ->\n    console.log \"Offline...\"\n```\n. ",
    "PekkaPLeppanen": "To host the type definitions in this repo is an option, but it might be better to keep it in the DefinitelyTyped.\n1. Type definitions can have references to other type definitions. MQTT is referencing NodeJS. These references are maintained in the same repo.\n2. DefinitelyTyped repo is a go-to-repo when it comes to type definitions.\n3. There're Gulp, Grunt and IDE plugins to automatically fetch definition files for packages listed in package.json or bower.json. These plugins use DefinitelyTyped repo.\nConfiguring the TS from JSON file is only for building phase AFAIK.\n. The guide to support multiple API versions is at the DefinitelyTyped contribution guide.\n. Will do. It's in my interests to do so, because I work for IoT projects in a company where MQTT is a important part of the solution stack. \n. This example should explain the TypeScript part. \nclient.on('message', (topic: string, message: Buffer) => {\n    // message is Buffer\n    console.log(message.toString());\n    client.end();\n});\nThe message is a NodeJS Buffer which implements the Uint8Array. https://nodejs.org/api/buffer.html\nThe data type conversion is left for the callback function. In the example the conversion is made from Buffer to String.\n. I wrote the type definitions for the MQTT API v1. I was hoping that one day I'll write another definitions for v2 API also. Because a lot of time has passed and nothing happened from my part, I must say it would be great if someone else could do the new type definitions.\nI am no longer using MQTT, because I changed to another company to a completely different type of project.\nAnyway, to write the type definitions, you should take the API documentation and write the definitions from there. The missing parts can be found from the source. And make PR for the documentation, if there is something missing.\nAlso notice that the two versions of the type definitions can co-exist, if the API v1 is still maintained actively. If it's not maintained, one should rewrite the existing file. . > Should we correct the type definition file?\nI checked the docs and yes, you are correct: string => number.\nCan you please make the PR?. It's already removed. \nSee https://github.com/DefinitelyTyped/DefinitelyTyped/commit/5b092631c92ea29f86cbc907ddb536a015921ce6\nI suggest to close this issue. . ",
    "Pedrozena": "@sandro-k  I got it working properly in IE11..\n. ",
    "seriousme": "I have the same issue, it works fine in Chrome and IE11, but the \"connect\" event is not picked up  by Edge (version 10586.0.0) \nBroker (Mosca ;-)) shows the the client timing out:\n{\"name\":\"mosca\",\"hostname\":\"Mypc\",\"pid\":1460,\"client\":\"mqttjs_77d2c9cd\", \"level\":30,\"msg\":\"client connected\",\"time\":\"2016-03-29T16:46:57.729Z\",\"v\":0}\n{\"name\":\"mosca\",\"hostname\":\"Mypc\",\"pid\":1460,\"client\":\"mqttjs_77d2c9cd\",\"level\":30,\"msg\":\"keepalive timeout\",\"time\":\"2016-03-29T16:47:12.731Z\",\"v\":0}\n{\"name\":\"mosca\",\"hostname\":\"Mypc\",\"pid\":1460,\"client\":\"mqttjs_77d2c9cd\",\"level\":30,\"msg\":\"closed\",\"time\":\"2016-03-29T16:47:12.731Z\",\"v\":0}\n. Just looked at the webtests of Edge and they only seem to support: \nvar events = ['open', 'message', 'error', 'close'];\nLooking for the standard on the W3C site I end up here\nWhich also specifies exactly these 4 events.\nedit: please ignore me, I was looking for the onready event, but onready is attached to the open event..\n. FYI: I tested using the recommended client test of websocket stream and onReady is being called in Edge.\n. Looking at Mosca's log it keeps on going through the same cycle:\nconnect, timeout, close, connect etc..\nTracing in my app shows that onReady is also being called over and over.\nHowever in the this.connected = true; in mqttjs is never reached.\n. The websocket session itself is still up, because when I shut mosca down I get an error in Edge that I don't get during the connection cycle.  If people have ideas what to check I'm happy to test, but for now I'm a bit lost. It looks to me as if a handshake fails or a timer expires to soon. Btw: I'm using http and ws, no https nor wss.\n. I have enabled debug in MQTT.js by providing console.log as debug function.\nThe result: after ondata Chrome receives its mqttclient connect event, but Edge just continues trying to read.\npipe count=%d opts=%j\nresume\nresume read 0\nread\nneed readable\nlength less than watermark\ndo read\nflow\nread\nneed readable\nlength less than watermark\nreading or ended\n< onmessage received event >\nondata\n<now Chrome receives mqttclient connect event, Edge does receive that event>\nread\nneed readable\nlength less than watermark\ndo read\nemitReadable\nemit readable\nflow\nread\nonend\nonfinish\nunpipe\nonunpipe\ncleanup\npipe count=%d opts=%j\n<cycle starts again>\n. Ok, seems we can rule readable stream out as causing the problem as readable stream is now certified on Edge\n. By accident I stumbled across mows.\nI installed mows using NPM and used browserify to build mows.js per instructions in the readme.md\nDoing a comparison between mows and mqttjs using the script below shows that in Chrome both get a connection an in Edge only mows gets a connection.\n@mcollina do you have any clue ?\n```\nvar mowsClient = mows.createClient(\"ws://test.mosquitto.org:8080/mqtt\");\nvar mqttClient = mqtt.connect(\"ws://test.mosquitto.org:8080/mqtt\");\n// setup the MQTT listener for connect messages\nmowsClient.on(\"connect\", function(){\n    console.log(\"MOWS received connect\");\n});\nmqttClient.on(\"connect\", function(){\n    console.log(\"MQTT received connect\");\n});\n```\n. Can't say that is a surprise to me. \nI was hoping that the difference in approach between the old and the newer version of mqtt.js would have triggered any light bulbs, but apparently not.\nWhile debugging I get a bit lost in all the streams fluf, so a little guidance or help would be much appreciated.\n. I might be way off here, but I used Esprima to add tracing for all calls and then diffed the result.\nThe difference starts after the \"data\" event has been emitted and ondata has been called.\nFirst difference is Buffer.prototype.slice which behaves apparently different in Edge and Chrome.\n(typedbuffer support as far as I can see)\nThen Buffer._augment is being called.\nChrome calls _augment with a single byte (arr == \"0\":32) first and then adds more data later, Edge calls _augment with 4 bytes at once (arr == {\"0\":32,\"1\":2,\"2\":0,\"3\":0} )\nThen in _parseLength Chrome ends up with this.packet.length == 2 where Edge ends with this.packet.length  == 32 which might explain why Edge is waiting for more data.\nEdit: I have put the relevant parts of the traces in a gist\n. Ok, I think I got it:\nIn parseHeader the first byte should be sliced from the buffer.\nSo when the buffer is [32,2,0,0] then after the parseHeader the buffer should be [2,0,0] which it is in Chrome, however in edge its still [32,2,0,0] :-(.\nThe problem can be reduced to Buffer.prototype.slice.\nBefore and after the slice the buffer still holds the same data.\nMust be a bug in typed array handling using the subarray function.\n I'll try to isolate the issue later tonight.\n. Got the answer: https://github.com/feross/buffer/issues/86\nIts a weird combination of buffers, typed arrays, browserify and edge.\nThe quick fix for me is to define globally:\nvar TYPED_ARRAY_SUPPORT=false;\nWhich ensures Buffers won't use typed arrays.\n. Hm, too quick..\nWith var TYPED_ARRAY_SUPPORT=false; the connect works, but the subscribe fails (even in Chrome :-( )\nIt ain't over till the fat lady sings..\n. Just reinstalled browserify 13 and after that rebuild my node_modules of the app that uses mosca.\n. Works  !\nI rebuild node_modules/mosca/public/mqtt.js using :\nbrowserify mqtt.js --standalone mqtt > ../mosca/public/mqtt.js\nand the app subscribes to queues and is picking up published messages, even in Edge ;-)\nThanks for all the fine work !\n. ",
    "perzy": "@mcollina  it may be a bug.  when i  call \njs\nclient.suback({messageId: xxx, granted:[{topic:'test',qos:1},{topic:'test 2', qos: 2 }]})\nsocket close connection\nand i change it to \njs\nclient.suback({messageId: xxx, granted:[1,2]})\nprocess run success! and subscribe callback function call.\nI go through the mqtt-packet/generate.js src code. it like\njs\n    for (var i = 0; i < granted.length; i += 1) {\n      if ('number' !== typeof granted[i]) {\n        throw new Error('Invalid qos vector');\n      }\n      length += 1;\n    }\n. @mcollina  https://github.com/mqttjs/MQTT.js/blob/master/examples/server/redis.js#L13-L25\n. ",
    "yugandhar23": "I am using following format.\nmqtt.connect({servers : [{ host: host, port: port}],  username : username, password :pass})\nCould you please share your example ?\n. None of them is working :(\n. it supports all versions between 3.0.0 to 4.0.0\n. yeah.. its working for node client.\nCould you please explain how authentications works here ?\n. I am using mqtt.js as it is. After browserify\nI am trying to connect using this format:\nmqtt.connect({servers : [{ host: host, port: port}], username : username, password :pass})\n. for 8883 port, I am getting this error..\n. WebSocket connection to 'ws://host:8883/' failed: Connection closed before receiving a handshake response\n. ws\n. ",
    "mbrandau": "Seems like this problem was fixed in #518. Is there a reason why this issue is still open? @mcollina @ksiegel . Looks like this can be closed too @mcollina . Since this is not a problem with MQTT.js, this issue can probably be closed. @mcollina . Can you verify that this is not a problem with your broker?. ",
    "OrahKokos": "The goal is to have a SSL/TLS connection with the mosca broker. Specific devices will be shipped with client certificates. Running the device ( C ) can connect to mosca using the self-signed cert which was generated on my machine. \nHowever some system parts are also communicating via MQTT, these parts of the system use the mqtt npm lib to create a connection. When passing the certs the client throws an error.\nSo there is no communication with the broker. \nAlso I'm testing the system part on localhost, so there is no outgoing interference.\nAny ideas ?\n. Ok, I'm trying a different approach. Is there a way to make mosca listen on multiple ports ( for system stuff port 1883, for devices 8883 SSL ). I see mosquitto has this, however i can't find anything in mosca.\nAlso, allowNonSecure option, does it have something to do with it?\nThanks for your time so far :)\n. Nice, that is exactly what I'm looking for. Thanks for the support man!\n. ",
    "Densaugeo": "I can't speak to refactoring the whole system, but after looking at Client.js a bit, it shouldn't be hard to add an option for 'sendQueue' or something like that, and check it in MqttClient.prototype._sendPacket() before adding a packet to the queue. I can send a PR for this in a bit.\nI haven't contributed to this project before, is there anywhere I would need to update tests and documentation other than Readme.md and test/client.js?\n. Would it be reasonable to only queue outgoing packets if they have QoS > 0? I think this would be correct behavior according to the MQTT spec, but would also mean a change of behavior (since QoS 0 packets are currently being queued). Is that why you mention v2?\nFor the meantime, I propose an option to enable this behavior (while still queuing QoS 1 and 2 packets regardless).\n. I went back and forth on whether it should error - it is QoS zero, but I also favor error-handling by default. If you think we should skip it, I'll adjust it accordingly.\nFor the option logic, I originally had it as a default-true option, which I changed because it needed a ternary operator or something similar to set it (this.options.queueQoSZero || true will always return true...). Maybe not the best reason. I suppose keeping the API easy to understand is more important.\n. Having problems with Travis. Ran the tests twice, the first the 'should publish a message (offline)' test timed out once in the Node 4 environment. The second time the same test timed out, but in the 0.12 environment this time. Maybe the test timeouts need to be extended for Travis?\nLooks like the finished build went back to pending and is rerunning the 0.12 part? Not really sure what is going.\nEDIT: All of the tests are fine when run locally.\n. Just updated my dependencies. Thanks!\n. So, you are proposing packetSent be fired after all writes, including for non-publish packets? That sounds reasonable - the events can be easily filtered, and that would allow more thorough logging if it is desired.\n. It doesn't look like MQTT.js has any two-word event names yet, so I went with packetsent all lower case to match the naming convention in browsers.\nI added test cases for subscribe and unsubscribe packets. I'm not sure it's necessary to test for other situations like ping packets, but I can add that if anyone asks.\n. The closest there is to a convention for event names is the event names used in browsers, which are all lower case (keypress, doubleclick, etc.). I'd be a little concerned about confusing receive with message and send with publish.\nThe topic and message arguments aren't necessary, that was only to make it match the arguments for message events. For a debugging event, that isn't really important.\n. Both good points. I'll update it when I'm back from my convention and awake.\n. So I've changed packetsent to packetsend, which follows the browser convention of all lowercase letters, present-tense verbs, and nouns first. I propose that this is enough discussion of event names\nIs the description for the readme clear? I'd like it to be very obvious that this is for debugging, not listening to messages.\nIf all are in agreement on the packetsend event, I will add a packetreceive event to match. After skimming through code, it looks like it could be emitted in ._handlePacket() or maybe .process().\n. Nonetheless, you're right. The topic.should.equal line isn't actually testing anything. I'll adjust that.\nI thought I checked this thread earlier but didn't see any comments. Oh well.\n. ",
    "nmec": "``` js\n'use strict';\nconst debug = require('debug')('publisher');\nconst mqtt = require('mqtt');\nconst mqttLevelStore = require('mqtt-level-store');\nconst manager = mqttLevelStore('data/leveldb');\nconst host = process.env.MQTT_HOST || 'mqtt://localhost';\nconst client = mqtt.connect(host, {\n  username: process.env.MQTT_USER || 'admin',\n  password: process.env.MQTT_PASS || 'pass',\n  incomingStore: manager.incoming,\n  outgoingStore: manager.outgoing,\n  keepalive: 60\n});\nconst publish = (data) => {\n  const payload = JSON.stringify(data);\n  const topic = 'example';\n  client.publish(topic, payload, {\n    qos: 1\n  }, () => {\n    debug('published', topic, payload);\n  });\n};\nmodule.exports = publish;\n``\n. I'd love to have this functionality but I'm not sure how much of a priority I can make it at the moment. From a brief look atclient.js` this would probably be a substantial reworking.\n. ",
    "johan13": "The bug is still there as far as I can tell.\nIs there any point in offering the option to provide a persistent Store implementation for the outgoingStore if the stored messages are not sent when the process restarts?. Thanks @behrad! Looks great. I will give it a try next week.. It appears that in MqttClient.prototype._sendPacket we check if the client is connected and if not then we add the message to the queue. The message isn't added to the store until storeAndSend and that method isn't called.. I can give it a go. That will be mid May at the earliest though.. ",
    "wormcc": "thx!\n. ",
    "megastef": "+1 OK, I just wanted to check if I did miss something in the documentation. I could provide a PR, it might take a week to find the time to work on it. \n. ",
    "sprijk": "Ah super, thanks!\n. ",
    "vasco-santos": "I tried using other brokers as well, and it did not work. And considering that it works fine in other browsers, I think that chrome needs another type of configuration for the websockets. I also used this broker with other python client and it works properly.\nAs far I understood, google chrome forces the use of MQTT-3.1.0, and I think that it is the problem, at least for recent brokers.\n. I am using version 1.8.0 of mqtt, but with browserify conversion. Can I have your Mosquitto configuration file for testing?\n. I uploaded to my repository the python broker. It needs Python3, as well as hbmqtt pip package.\n. @RangerMauve thanks anyway =)\n@mcollina I have commited to my test project the broker. It only needs to be executed with python3 and has the hbmqtt pip dependency. \nThanks for your time\n. @mcollina I am not understanding how the bug may be on hbmqtt. \nI used tge hbmqtt broker with other clients and it worked with no problems in all of them. In addition, it works fine with mozila and safari in the MQTT.js implementation. Therefore, I can only consider a bug related to the browser, and consequently with MQTT.js, which interacts with the browser.\nI cannot use this implementation with mosquitto as well.\n. Yes, it works correctly using mosquitto test broker for mqtt over websockets (Port 8080).\nI monitored the network packets using chrome, as well as firefox but I am not noticing any difference in the packages before starting the websockets session.\nConsidering filter: ip.addr == 192.168.33.20\nChrome: line number 864\nFirefox: line number 596\nWireshark.zip\n. Hello\nFirst of all, thanks for the update. However, I tested this new version (1.12.0) using Google Chrome and the browser does not connect with the broker yet.\nHere is my test project, with a python3 broker and a web page:\nTest Project\nThanks for your help!\n(It works fine using firefox)\n. ",
    "njouanin": "Let me investigate...\n. Hi, according to discussion in hbmqtt#38 the problem seems to come from the client MQTT.js which sends mqttv3.1 as websocket suprotocol whereas it should send mqtt according to MQTT 3.1.1 specifications. Chromes detects a difference between the requested subprotocol and the subprotocol returned by hbmqtt (mqtt) and so closes the connection.\n. ",
    "uzarubin": "@mcollina I'll turn off auth and try again. Also, I am connecting through the browser. I noticed there was an issue with it switching from mqtt to ws, but does it still work?\n. @mcollina I figured out the problem. I installed mosquitto without websocket support. Once I fixed that, I am not connecting. \n. ",
    "ecksun": "Oh my, how could I have missed that.\nYes indeed, the error-message needs to be improved, I will try to get some time to create a PR\n. ",
    "shylesh107": "I will take a look when I get some time. Thank you.\n. #416 This seems to have solved my issue. Tested it with mosquitto receiving  QoS 2 messages.\n. @vingorius You are welcome and thanks for taking the time to add a unit test.\n@mcollina I got a little bit of time today to look in to adding a test case for this. But the current test suite may not work for this case. \nTest case\n\nNew client connection to broker with opts  {clientId:\"testClient\", clean:false}\ntestClient subscribes to topic \"test\" (QoS 2)\nAnother senderClient starts publishing messages to topic \"test\" with QoS 2\ntestClient starts receiving messages, after a while close the connection to the broker\nsenderClient continues sending messages to broker\nconnect the testClient again with same opts\ntestClient should be able to receive all messages from broker without error (https://github.com/mqttjs/MQTT.js/issues/415)\n\n@mcollina I am not able to create multiple clients in the test file. It's probable that I am doing something stupid here. Please let me know if the above mentioned test case is valid and doable using the current test suite. Appreciate any pointers from anyone.\nThank you.. Yea, I had that doubt as well.\n. ",
    "vingorius": "Tks @shylesh107 , Your code fix my problem.. Ok @mcollina , i zipped two files.\npr.zip\nfirst run node mqtt_client_pr.js, it will be ready to subscribe messages.\nthen run bash ./pub_pr.sh on command line. \nit will repeat sending message 100 times.\nwhen at any time, stop receiving with Ctr-C on node mqtt_client_pr.js terminal window.\nlet  bash ./pub_pr.sh  send messages.\nfinally rerun  node mqtt_client_pr.js .\nit throw error\n```\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: missing packet\n    at Store.get (/home/vingorius/projects/mqtttest/node_modules/mqtt/lib/store.js:93:8)\n    at MqttClient._handlePubrel (/home/vingorius/projects/mqtttest/node_modules/mqtt/lib/client.js:905:22)\n    at MqttClient._handlePacket (/home/vingorius/projects/mqtttest/node_modules/mqtt/lib/client.js:297:12)\n    at process (/home/vingorius/projects/mqtttest/node_modules/mqtt/lib/client.js:242:12)\n    at Writable.writable._write (/home/vingorius/projects/mqtttest/node_modules/mqtt/lib/client.js:252:5)\n    at doWrite (/home/vingorius/projects/mqtttest/node_modules/mqtt/node_modules/readable-stream/lib/_stream_writable.js:347:64)\n    at writeOrBuffer (/home/vingorius/projects/mqtttest/node_modules/mqtt/node_modules/readable-stream/lib/_stream_writable.js:336:5)\n    at Writable.write (/home/vingorius/projects/mqtttest/node_modules/mqtt/node_modules/readable-stream/lib/_stream_writable.js:274:11)\n    at Socket.ondata (_stream_readable.js:555:20)\n    at emitOne (events.js:96:13)\n```\nFYI : mqtt@2.3.1\n. PR means a pull request. \n@mcollina , i wish i could, but code was @shylesh107 , he(she) might do that. \nI just fixed my problem using @shylesh107 amendment, i even did not understand what @shylesh107 code mean. sorry @mcollina .. ",
    "peppesilletti": "Hi @mcollina, I am developing a library that relies on the mqtt package and I am facing this same problem. I really need to solve it, because it's critical for the functioning of our application and I would like to know if I can help in any way?. Ok @mcollina I will have a look, thank you!. Hi @mcollina, thank you for the fast answer. Maybe I am misunderstanding how the persistent sessions work. I was expecting the session to preserve the subscription to all the topic the client was subscribed before disconnecting and since I'm retaining the messages, to receive them back. (I've been reading this article: http://www.hivemq.com/blog/mqtt-essentials-part-7-persistent-session-queuing-messages).\nAm I misunderstanding?. @mcollina I am using mosquitto for my development and I have the same behavior with the emqtt broker.. I've tried with QoS 1 and the problem persists. Anyway, sure I'm going to write a pure javascript script for you!\n. Here it is the pure JS script:\n```javascript\nvar mqtt = require('mqtt')\nvar client1 = mqtt.connect('mqtt://localhost:7654', { clientId: 'testing', clean: false })\nclient1.on('connect', function (connack) {\n  console.log('connack.sessionPresent:', connack.sessionPresent)\nclient1.subscribe('test1', { qos: 2 }, function (error, granted) {\n    if (error) {\n      return console.error\n    }\n    console.log('subscribed test1!', granted)\nclient1.subscribe('test2', { qos: 2 }, function (error, granted) {\n  if (error) {\n    return console.error\n  }\n  console.log('subscribed test2!', granted)\n\n  client1.subscribe('test3', { qos: 2 }, function (error, granted) {\n    if (error) {\n      return console.error\n    }\n    console.log('subscribed test3!', granted)\n\n    client1.publish('test1', 'value1', { qos: 2, retain: true }, function() {\n      client1.publish('test2', 'value2', { qos: 2, retain: true }, function() {\n        client1.publish('test3', 'value3', { qos: 2, retain: true }, function() {\n\n          client1.end(function () {\n            var client2 = mqtt.connect('mqtt://localhost:7654', { clientId: 'testing', clean: false })\n\n            client2.once('connect', function (connack) {\n              console.log('connack.sessionPresent:', connack.sessionPresent)\n            })\n\n            client2.on('message', function (topic, message) {\n              console.log(topic.toString(), message.toString())\n            })\n          })\n        })\n      })\n    })\n  })\n})\n\n})\n})\n```. I see, I tried to send an offline to client2 while it's offline and it receives the messages when it's back online. So as you say it only regards retained messages. I am curios to understand why this behavior takes place, if the subscriptions are part of the session and the client is interested in those kind of messages, why not getting them?. That makes sense! Thank you for your time and helpful explanations! :) . Sure! : ). ",
    "WilliamHolmes": "Sorry for the delay.\n\nWhat sort of connection was this? \n\nWSS. \n\nWhat was the broker that you were connected to?\n\nApache Apollo\n\nDid this happen after ending the connection manually?\n\nYES\nPseudo Process:\n:Create\nthis.client = MQTT.connect( ...\n... (some other processing)\nthis.client.end(true);\n... (some other processing)\nthis.client = null;\n... (some other processing)\ngoTo :Create\n. Yes.\nwe would have called  .end(true) after .connect.\nie.\n.connect  > if we have to refresh certain UI or logout etc. .end(true)\n. ? No explanation or feedback before closing?\n. I did move to the most recent version and change our approach. On the most part it seems to behave but noticd when we called end(true, callback) during a reconnection the call back isn't called. I'll open a issue tomorrow.\n. FF48 - We're using Webpack 1.12.14\nWe'll update and verify.\nThanks.\n. @einargs Another option could be sending options as a function (that returns an object) rather than a object. It might be more flexible if other options also need changing. ie. expired username/password.. ",
    "Xiao-Yaran": "@ralphtheninja   Your approach is correct.!! \nsetting:\n  protocolId: 'MQIsdp',\n  protocolVersion: 3\nIt works! Thank you very much\n. ",
    "sanket-mindstix": "Please find below the code I'm using for the MQTT client. I have set mosquito broker running locally. I am able to subscribe and publish the topics to the same MQTT broker using command line MQTT client. So I thing broker is working fine and one more thing I am using self-signed certificates for broker and client.\nWhen I try connect broker using nodejs mqtt client following log gets written into my broker's log file,\n1466151342: New connection from 127.0.0.1 on port 1883.\n1466151342: OpenSSL Error: error:140760FC:SSL routines:SSL23_GET_CLIENT_HELLO:unknown protocol\n1466151342: Socket error on client , disconnecting.\n``` js\nvar mqtt = require('mqtt');\nvar fs = require('fs');\nvar KEY = fs.readFileSync(__dirname + '/client2.key');\nvar CERT = fs.readFileSync(__dirname + '/client2.crt');\nvar TRUSTED_CA_LIST = fs.readFileSync(__dirname + '/ca.crt');\nvar PORT = 1883;\nvar HOST = 'localhost';\nvar options = {\n    port: PORT,\n    host: HOST,\n    keyPath: KEY,\n    certPath: CERT,\n    rejectUnauthorized : false,\n    //The CA list will be used to determine if server is authorized\n    ca: TRUSTED_CA_LIST\n};\nvar client = mqtt.connect(options);\nclient.subscribe('messages');\nclient.publish('messages', 'Current time is: ' + new Date());\nclient.on('message', function(topic, message) {\n    console.log(message);\n});\nclient.on('connect', function(){\n    console.log('Connected');\n});\n```\nThanks\n. Yes, my broker is SSL enabled, I am successfully able to connect the broker using command line client,\nfollowing commands I am using for subscribing and pushing the topic using the same broker. \n$mosquitto_sub -t test -v --cafile ca.crt --cert client2.crt --key client2.key\n$mosquitto_pub -t test -m \"HELLO Sanket\" --cafile ca.crt --cert client2.crt --key client2.key\n. ",
    "kSuccess": "hi @sanket-mindstix can you show me your mosquitto.conf file ,because i have same trouble with integrating TLS into Mosquito's broker. ",
    "RamcharanTeja": "hi @sanket-mindstix  can you share the reference link to configure TLS into Mosquitto broker, I tried but getting \"Problem Setting TLS Options\" Error\nI follwed this link https://mosquitto.org/man/mosquitto-tls-7.html and created only server side keys\n. ",
    "BrandonSmith": "@mcollina Reading through code and issues, I believe lack of handleMessage in QoS 2 is the cause of a undesired behavior in my application. Namely, I need to execute logic for each message sent from the broker serially before the next message is acknowledged. For instance, one of my message types is to reset the application with new configuration information, and this includes disconnecting from MQTT. By the time that message is processed by application code, several other messages have also been \"delivered\" from an MQTT perspective, but not processed by the application. Thus, there are \"missed\" when the MQTT connection is re-established.\nI am evaluating whether I have enough context to contribute this handleMessag feature for QoS 2. However, I'm trying to read through the spec to understand which stage of QoS 2 processing is it appropriate to execute a handleMessage callback. It appears the callback should execute when the PUBLISH is received.\nAnother question, it seems from code that the incomingStore never deletes any entries? Is this intentional?. @oprince Override the handleMessage function with your own. The important thing is that you must always invoke the callback argument. QoS 2 support landed in v2.13.0 with improvements in v2.14.0.\nconst client = mqtt.connect()\nclient.handleMessage = (packet, callback) => {\n  somePromiseReturningFn(packet) // do something asynchronous with packet\n    .then(() => callback())\n    .finally(() => callback())\n}\nconst client = mqtt.connect()\nclient.handleMessage = (packet, callback) => {\n  someNodeStyleCallback(packet, (err, result) => {\n    if (err) {\n      callback()\n    } else {\n      callback()\n    }\n  })\n}. @kranthisai You mentioned that you were able to use SOCKS5 with MQTT. Was this with MQTT.js or another library? What details or examples can you share if it was with MQTT.js?. @mcollina I didn't see a precedent for handleMessage tests, so I took a stab at it.\nMy logic in the test is to publish from the server, with no latency, 10 messages. I keep an incrementing counter of both the message event and handleMessage and then compare the counters for equality just before the handleMessage callback is called. The theory being that the message event should not be emitted until the callback is called.\nPlease let me know if there should be deeper logic. Tests appear to pass for all QoS levels.. ",
    "oprince": "@BrandonSmith (or anybody else) do you have a client code sample of how to use handleMessage method with QoS 2 ?\nI have googled long time with no results...\nThanks. ",
    "ChristiaanWillemsen": "I still see some problems here. Imagine the following scenario: You have multiple subscribers on a topic using shared subscriptions (so load balancing). Now imagine that the handling of a single message takes multiple minutes, but because of the amount of subscribers, you are able to effectively handle the traffic.\nIn this case, the library will fail: after some timeout because you don't call the callback in time. It says you must call the callback, but it does not say when.\nWould be good to have some kind of control over this.\nOther scenario: What if you want to be able to handle multiple inflight messages at ones? Would you then start multiple clients for this?. I think we have the same problem, but broker is EMQ. For some reason, it looks like the client stops working after a reconnect in some cases. We also use the {clean: false} configuration. we're using 2.7.1 at the moment.. ",
    "ccravens": "Submitting new PR with updated bower.json file\n. Most JavaScript libraries are available via bower and a lot of projects use bower to separate front end dependencies from NPM for Node (server side) dependencies. There is nothing stopping someone from using NPM for mqtt.js, but it would be a nice to have for people that use bower. In my case I leverage Mqtt.js and Mosca extensively, and Mqtt.js is the only project I have to fetch from node_modules rather than bower.\n. ",
    "jonhardman": "Thanks @4rzael this is a great summary and the info I was looking for. I could imagine others appreciating this info so a FAQ would be handy :-)\n. ",
    "rudylacrete": "We understand the same thing. However I was not able to reproduce the bug on my machine. I only got that on our cloud so still don't know if it comes from a mystake on my side.\nThat's a great idea to inspect directly the network packets to find out if it comes from the broker itself.  I'll continue to check that and keep you informed.\nThanks again guys.\n. Sure I'll do it.\n. ",
    "SiyiLi": "Yes, the subscribe callback showed QoS2 was granted, then I made the publish. And I tried many times, \"Publish Release\" was never responsed by mqtt.js client. \n. ",
    "jonahzheng": "@anhldbk yes.\nI found that mqttjs has qos.\nmqtt.Client#subscribe(topic/topic array/topic object, [options], [callback])\nSubscribe to a topic or topics\n    options is the options to subscribe with, including:\n        qos qos subscription level, default 0\n. ",
    "pewh": "Hmm, it strange, because react native shouldn't support native nodejs module like 'net' and 'fs' https://github.com/mqttjs/MQTT.js/blob/master/mqtt.js#L12-L15.\nSo this code below throw error:\nvar mqtt    = require('mqtt');\nvar client  = mqtt.connect('mqtt://test.mosquitto.org');\n...\nI'm wondering how you can bypass this limitation. Or maybe I should edit some code to make it work?\n. Although react native support websocket, but it doesn't support native nodejs modules which are dependency from mqttjs (like 'net' dan 'fs'). So I think the issue is not on websocket itself.\nCMIIW :) \n. Hi @RangerMauve , I use MQTT on WebSockets. The good news is: I can rid the error message. I do webpack mqtt.js ./client.js --output-library mqtt\nand I'm trying to load this module by const mqtt = require('mqtt/client'). But I get undefined function when doing mqtt.client(...). I inspect it via debugger and mqtt object is just empty object. I cannot get mqtt.connect.\nI also have trying to use webpack mqtt.js ./client.js --output-library mqtt --output-librarytarget commonjs or webpack mqtt.js ./client.js --output-library mqtt --output-librarytarget commonjs2, but still get empty object.\n. Finally, I fix it by webpack mqtt.js ./client.js --output-library mqtt --output-library-target commonjs2 instead of webpack mqtt.js ./client.js --output-library mqtt --output-librarytarget commonjs2\nSorry for my stupid typo :smile: \n. Hi, @RangerMauve.\nI've trying with: webpack ./lib/connect/index.js ./client.js --output-library mqtt --output-library-target commonjs2, and it still show same error.\nAnd I'm still confused what method should I use between browserify & webpack. I have test with browserify, compile with command browserify mqtt.js -s mqtt > browserMqtt.js or browserify ./lib/connect/index.js -s mqtt > browserMqtt.js show same error that it needs 'stream' & 'buffer' nodejs native module.\nEdit:\nCompile with webpack show 'NotFoundError: Cannot find entry file MqttClient' in console, but in RN redbox show 'Could not determine host. Specify host manually'. But I'm sure that MQTT broker has been set-up properly with WebSocket (already tested with MQTTLens)\n. This is what I've done:\nnpm i mqtt -S\ncd node_modules/mqtt\nwebpack ./lib/connect/index.js ./client.js --output-library mqtt --output-library-target commonjs2\nI guess I'm doing wrong :/\nWhat is the file name for that small JS? index.js?\n. After client.js was created inside node_modules/mqtt, I call import mqtt from 'mqtt/client on React Native. There's no problem so far. But when I call const client = mqtt.connect('ws://localhost:8080), I get an error Could not determine host. Specify host manually.\nBut if I'm just calling require('mqtt'), it throws an error\n. Hello @RangerMauve , I get an error Requiring unknown module \"events\" on RN when import mqtt/lib/connect/index.js.\nHowever, I'm still confused about browserify because it's the first time I use that. So I have a question.\n1. I'm compiling with webpack webpack ./lib/connect/index.js ./client.js --output-library mqtt --output-library-target commonjs2, and file node_modules/mqtt/client.js has been created\n2. On RN code, I just import mqtt/lib/connect/index.js, but why I need to compile to client.js if I don't use client.js?\n. ",
    "willin": "how about nativescript? \na bit like react-native\n. ```\nUnhandled rejection AmqpError\n    at Connection. (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/amqp_client.js:182:23)\n    at emitOne (events.js:115:13)\n    at Connection.emit (events.js:210:7)\n    at Connection._terminate (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/connection.js:551:8)\n    at Connection._processError (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/connection.js:351:8)\n    at Object.errorHandler (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/connection.js:282:43)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:203:67)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\nUnhandled rejection AmqpError\n    at Connection. (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/amqp_client.js:182:23)\n    at emitOne (events.js:115:13)\n    at Connection.emit (events.js:210:7)\n    at Connection._terminate (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/connection.js:551:8)\n    at Connection._processError (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/connection.js:351:8)\n    at Object.errorHandler (/Users/willin/Documents/dwing/AirHub/node_modules/amqp10/lib/connection.js:282:43)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:203:67)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n    at Object.event (/Users/willin/Documents/dwing/AirHub/node_modules/stately.js/Stately.js:190:52)\n```\nwhen 4. #351  why qos 128 not throw an error?\n . Granted: [ { topic: 'test', qos: 128 } ] \nand still can get messages from 'test' topic.. ",
    "jinyuting": "@pewh so is that done? Does the client.js work for you? i met the same problem, the lib does not work with ReactNative....\n. ",
    "AlfredoPastor": "@pewh I join the questions of @jinyuting. \nI have managed to compile but when I initilize it, I have the following error: \"mqtt.connect is not a function\"\nRegards.\n. ",
    "orlandodemauro": "issue related to https://github.com/feross/buffer/issues/120, it is fixed in buffer 4.9.0.\nhere the dependencies trees\n``\n webpack@1.12.14\n- node-libs-browser@0.5.3-- buffer@3.6.0\nwebpack@1.13.1\n- node-libs-browser@0.5.3\n`-- buffer@3.6.0\nwebpack@2.1.0-beta.20\n- node-libs-browser@1.0.0\n`-- buffer@4.9.0\n```\nmqtt.js wont work with ff48 and webpack < 2.1.0\n. @mcollina the issue is reproducible when mqttjs is used whit webpack 1.x.. I created a PR in webpack but it hasn't been merged yet. \n. @mcollina @WilliamHolmes issue fixed, new node-libs-browser package published ( v0.6.0). it will be automatically picked by webpack 1.x. this issue can be closed. thanks\n. ",
    "JuanRamino": "Thanks Matteo,\nI tried your solution but the result is the same.\nHow can I debug it?\n. Now it works!\nI use this options:\nvar options = {\n  host: '1.1.1.1',\n  port: '8883',\n  username: 'user',\n  password: new Buffer('password'),\n  ca: CERT,\n  protocol: 'mqtts',\n  rejectUnauthorized : false,\n  debug: true\n};\nGrazie Matteo, great job\n. ",
    "japita-se": "I confirm this.\nI am using browserified version of MQTT.\n<script src=\"assets/js/browserMqtt.js\"></script>\nI am using the authenticate and authorize hooks, as in the WiKi.\nWith invalid credentials, the server behaves correctly, but no information are returned back  to the client.\nFor instance, in the web page:\nclient.on('connect',function(res){  \n//res is always null. \n})\nSame for other methods (subscribe).\nclient.subscribe(channel,function(err,granted){\n           //granted has qos 128 in case of unauthorized access, 0 otherwise\n        });\nIn other words, the client has no way to understand what happened upon connecting/subscribing.\n. SOLVED. \nWith the webpacked version it seems to work.\n. same happen if the routing table changes. It seems related to the keepalive and timeout values. But I have to investigate...\nThks. ",
    "DirkHeinke": "I had the same problem with mosquitto 1.4.14 but it is fixed with 1.4.15. ",
    "priyanka8929": "@RangerMauve \nI found the problem. I was trying to publish the error object, instead of error.message at line 203. \nThanks for looking into it!!\n. ",
    "iharyadi": "Hi I am using RabitMQ version 3.6.5.  I am seeing the same issue with 1.14.1.  \nAnything I can help to debug this issue?\n. Thanks for a quick response.  \nI am just learning node and mqtt.  This is literally my second hours playing with it.  I try to install node-inspector.  It crashes for 6.4.  There is a bug there.  I will get my debugging environment any time soon.\nFor now,  here is what I did.  I change my broker to mosquitto and use qos2.  It seems that I can get the  message in ordered with qos2.\nI need qos2 in the first place any way.  Just FYI for newbie like me,  RabbitMQ does not support qos2.\n. ",
    "Manu3756": "Hey,\nI had the same issue.\nit is not supported out of the box for wss (i only tested this way).\nI use https-proxy-agent to create a agent object. (https://www.npmjs.com/package/https-proxy-agent)\nYou need to modify \n\\node_modules\\mqtt\\lib\\connect\\ws.js\n```js\nvar wssProperties = [\n  'rejectUnauthorized',\n  'ca',\n  'cert',\n  'key',\n  'pfx',\n  'passphrase',\n  'agent'\n]\n```\nor\n```js\nfunction buildBuilder (client, opts) {\n  var wsOpt = {\n    protocol: 'mqtt'\n  }\n  var host = opts.hostname || 'localhost'\n  var path = opts.path || '/'\nif (!opts.port) {\n    if (opts.protocol === 'wss') {\n      opts.port = 443\n    } else {\n      opts.port = 80\n    }\n  }\nvar url = opts.protocol + '://' + host + ':' + opts.port + path\nif ((opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)) {\n    wsOpt.protocol = 'mqttv3.1'\n  }\nif (opts.protocol === 'wss') {\n    console.log('here i am');\n    wssProperties.forEach(function (prop) {\n      console.log(JSON.stringify(prop));\n      if (opts.hasOwnProperty(prop)) {\n        wsOpt[prop] = opts[prop]\n      }\n    })\n  }\n//##################Add this line ####################\n  wsOpt.agent = opts.agent;\n  return websocket(url, wsOpt)\n}\n``\nto fix it for other options it would be good to do sth likewsOpt = wsOpt.merge(opts);`\nin your app you can do sth like:\n```js\nvar mqtt    = require('mqtt');\nvar endpoint='wss://';\nvar HttpsProxyAgent = require('https-proxy-agent');\nvar url = require('url');\nvar proxy = process.env.http_proxy || 'http://proxy.bla.com:8080';\nvar parsed = url.parse(endpoint);\nvar opts = url.parse(proxy);\nopts.secureEndpoint = parsed.protocol ? parsed.protocol == 'wss:' : true; //false for ws\nvar agent = new HttpsProxyAgent(opts);\nvar options = {\n  keepalive: 60,\n  reschedulePings: true,\n  protocolId: 'MQTT',\n  protocolVersion: 4,\n  reconnectPeriod: 1000,\n  connectTimeout: 30 * 1000,\n  clean: true,\n  clientId:'testClient',\n  agent:agent\n};\nvar client  = mqtt.connect(parsed,options);\n```\n@mcollina \nmaybe sth you could fix? \n. done. . @mcollina \nWe have one issue. We can't handle websocket options. If we just add the agent to the list we support 1 option more then before. And only for wss and not for ws. \nIt's up to you anyway if you want to solv the \"agent in wss\" bug and wait for the \"agent in ws\", \"protocolVersion in wss\", \"protocolVersion in ws\" ... bug its okay.  . @mcollina \nNow I got your problem. \nFor a and b have a look at #512 \nbut in #512 is no guarantee that it is 100% backward compatibil. \nI'll check how to change #512 that it fits to c) if you like. . @mcollina @ralphtheninja \npls have a look at the last commit. @mcollina updated Readme pls have a look \nI'm not sure if its the right place. @mcollina Sorry was very busy... next try . No, I think this should be a new PR?\nI'm not sure if it's needed on browser side.. there are two ways i guess: \n-set a list of options we want to support \n-or support everything and remove the overhead . no this is the second\n. Maybe there is a 3. way. \ndefine a option key like\nwsOptions: {ws(s) Option Object}\n its less code but you need to know that its done this way.  \n. I'll try sorry.\nthe 3. way would be to add a Options key to the list of defined once:\n\noptions is the client connection options (see: the connect packet). Defaults:\nkeepalive: 10 seconds, set to 0 to disable\nreschedulePings: reschedule ping messages after sending packets (default true)\nclientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8)\nprotocolId: 'MQTT'\nprotocolVersion: 4\nclean: true, set to false to receive QoS 1 and 2 messages while offline\nreconnectPeriod: 1000 milliseconds, interval between two reconnections\nconnectTimeout: 30 * 1000 milliseconds, time to wait before a CONNACK is received\nusername: the username required by your broker, if any\npassword: the password required by your broker, if any\nincomingStore: a Store for the incoming packets\noutgoingStore: a Store for the outgoing packets\nqueueQoSZero: if connection is broken, queue outgoing QoS zero messages (default true)\nwill: a message that will sent by the broker automatically when the client disconnect badly. The format is:\ntopic: the topic to publish\npayload: the message to publish\nqos: the QoS\nretain: the retain flag\n\nbecause we only have one option object and need to handle options for mqtt and for websockets \nso we could add a key to the given list like \n\nwsOptions: options for the websocket connection \n\nthen we can simply handover this wsOptions object to the websocket constructor and don't need list options we want to support (way 1) or remove the overhead.(way 2)\nthe overhead is everything in the options object we need for mqtt but not for the websocket connection.\ntomorrow i can do a second PR with the 3. way then you can deside whats better . It's, possible but there are many more options for a websocket \n\n\n@param {String} address The URL to which to connect\n@param {String[]} protocols The list of subprotocols\n@param {Object} options Connection options\n@param {String} option.protocol Value of the Sec-WebSocket-Protocol header\n@param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n@param {String} options.localAddress Local interface to bind for network connections\n@param {Number} options.protocolVersion Value of the Sec-WebSocket-Version header\n@param {Object} options.headers An object containing request headers\n@param {String} options.origin Value of the Sec-WebSocket-Version header\n@param {http.Agent} options.agent Use the specified Agent\n@param {String} options.host Value of the Host header\n@param {Function} options.checkServerIdentity A function to validate the server hostname\n@param {Boolean} options.rejectUnauthorized Verify or not the server certificate\n@param {String} options.passphrase The passphrase for the private key or pfx\n@param {String} options.ciphers The ciphers to use or exclude\n@param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key\n@param {(String|String[]|Buffer|Buffer[])} options.key The private key\n@param {(String|Buffer)} options.pfx The private key, certificate, and CA certs\n@param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates\n(https://github.com/websockets/ws/blob/master/lib/WebSocket.js)\n\n\n. It's bad anyway because wsOpt is a reference to opts and no \"real\" object. I changed this in a later commit in this branche. I'll do this because there are some options with the same key in mqtt and wss constructur (e.g. protocolVersion) \nIf I don't delet them the websocket want to use this propertie too. . Yes, would be better. The Problem that I can't set the property e.g. protocolVersion for websockets is still not solved because we can't decide if the mqtt protocolVersion or the websocket protocolVersion is ment. \nHave a look at #512. There we can do stuff like that.  . ",
    "sclausen": "@anhldbk \nAn addition to the answer from @mcollina: Details about the will flag are in the mqtt spec in \"3.1.2.5 Will Flag\"\n. Okay, I'll dig into the code and prepare something.. Yes, that's what I've got so far. Any thoughts about the code?. @mcollina The thing is, the MQTT specification states, that if the clean flag is present, the server AND the client MUST delete the session and therefor the subscriptions. So this behavior is against the specification.. Okay, I get it :+1: . @mcollina any opinion about this? If you agree I would like to prepare a PR.. Everything I tried doesn't work and it's not only process that interferes, but also e.g. streams. You can't add the browserified bundle of mqtt.js to the angular-cli@6.x project.\nI think I may rewrite mqtt.js to only use browser API like ReadableStream and WriteableStream, so it will become something like mqtt.browser.js or mqtt.browser.ts.. @RangerMauve: I actually can import a javascript file and browserifying mqtt.js works like a charm, but the file doesn't get embedded in the bundle angular-cli (or ng-packagr) creates afterwards.\n\nThis sounds more like an angular-cli problem than an mqtt.js problem.\n\nYes, yes it totally is.\nangular-cli is an awesome project but such a major breaking change without any migration options is very... unpleasant. I totally understand why they decided to remove the node-shims, but without any other options to achieve such goals? Not nice.\nTL;DR\nI think we're done here. However we get to fix this issue with our library is nothing which has to be achieved in this project.. I think the best workaround is not switching to angular-cli as a build tool for my library and staying with manual webpack and browserify. After all it worked like a charm in the past.. > Hey am new to all this and I would like to use mqtt and I keep getting the Reference error\nThe first thing you should do is reading this thread. Then you should understand what has been written and then you should know how to deal with the mentioned error.. You can browserify mqtt.js as described in the docs here, then you put the file in a folder of your angular project like that src/vendor/mqtt.js.\nThen you can import the mqtt client like the following import * as mqttClient from '../vendor/mqtt';. No, this crap doesn't work at all. It seems I have to learn more about to shim things ;)\n. Unfortunately, it's a library and I have no clue, how to embed a js-file in this bleeding edge angular-cli lib project.. I don't know, how I could make the backoff strategy more modular. It relies on some member variables and I could'nt think of a generalization of clearInterval/clearTimeout along other algorithm specific variables :-/\nCould you explain your thoughts on this a little?. ",
    "miotabbott": "As a fun bonus, the unit test exhibits issue #450 \n. Patch for master up #468.\nBuild bot for #467 passed with build 779.\n. @mcollina requested changes made.\n. Thanks! Unfortunately a mistake slipped in with the last change. #469 is up to fix it.\n. Seems to be passing on the build machine. What sort of error do you get on your box?\n. That's no good. I will try to reproduce.\n. This patch will not fix #460. AWS IoT will kill the MQTT connection if many duplicate acked packets of any type get to the broker.\n. PR ready #472 \nThe test fails with current code.\n. @sandro-k Sorry about the ugly test, copy pasta from the test above has failed me.\n@mcollina PR #473 ready. Please let me know if there is anything I can do to make the unit test more clear.\n. Thanks!\n@mcollina How can a publish event emit for c when it is destroyed on line 357?\n. ",
    "pguerin-miovision": "@mcollina Any idea of the typical turn around time to accept and publish a pull request like this once it's ready?  Trying to sort out some short term options if we think it could be a while before this makes its way through. Thanks in advance for any feedback!\n. ",
    "hijklmno": "thanks @sandro-k. @mcollina let me know if you need some help. I can do a PR in the next few days, if needed.\n. @mcollina Okay I'll try to make time this week. Haven't looked into MQTT.js source code in depth yet. Will link back when ready.\n. ",
    "taoqf": "@willin Have you solved this Issue? @RangerMauve @mcollina , it seems this is nothing todo with the ws module, I think it is webpack thing. webpackt changes the code ws and i don't know why and how can i fix this.. https://mp.weixin.qq.com/cgi-bin/wx\nI have added something to the readme,but tests could not be added because it's only could run in container.. @mcollina What can I do with the failled checks?. @mcollina Weixin(wx) is an application runs on android, iPhone, you may think it as cordova, It allow h5 application(we call it weapp sometime) runs in it, and it allow users to use WebSocket using it's api.. Then could I add some unit test with failing judge? I think there are so many chinese programmer would need this.. I don't know how to add unit test yet, but I would try my best.. I have done some test, not unit test, it works good.. @mcollina so need I add unit test for this pr?. Hi, @mcollina , I have add some test into /test/wx.js and passed npm run weapp-test.\nis this the right way to add unit test?. Whatever I try, still could pass codecov check. any help?. @mcollina , Thanks, I move the code into else block, and I skiped the unit tests I added because it could not be running on node.js. . I tried not skip the tests and it will cause a failing test after that test.\n```bash\n189 passing (18s)\n  1 failing\n1) MqttSecureClient pinging should reconnect if pingresp is not sent:\n     Uncaught Error: connect ECONNREFUSED 127.0.0.1:8883\n      at Object.exports._errnoException (util.js:1024:11)\n      at exports._exceptionWithHostPort (util.js:1047:20)\n      at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1150:14)\n``\nI don't really know what was wrong with github, I had not changed the whole fileconnect/index.js`. \nI will try to create a new pr later and see if gh reports the same.. Could you please describe azure?. Sorry i didn't know this.. Actually, you could not, there is no environment in nodejs.. Forget about unit tests.. @SyMind I might use that, too. I am glad to see this pr. \n@mcollina , Actually I don't think anyone could give a unit test for ali or wx, it could only run in it's devetools and in weixin or alipay. . it was defined multi times. see line 4. @yingye 's right.. ",
    "kranthisai": "We were able to use socks5 with Mqtt. Thanks for your link. I already tried that before, but couldn't succeed before, but now working fine. Tested on both IBM and AWS MQTT brokers. I will try for PR, never done it before..\n. Yes MQTT.js\nExample: \n```javascript\n'use strict';\nvar mqtt = require('mqtt');\nvar socks = require('socksv5');\nvar fs = require('fs');\nvar client1 = socks.connect({\n    host: '',\n    port: 8883,\n    proxyHost: ''\n    proxyPort: '',\n    auths: [ socks.auth.None() ]\n},function(socket) {\nvar mqttClient = mqtt.connect({\nsocket: socket,\n    port: 8883,\n    host: '',\n    protocol: process.env.MQTT_PROTOCOL ||'mqtts',\n    clientId: ''\n    key: ''\n    cert:''\n    ca: ''\n\n});\nmqttClient.on('connect', function(){\n    console.log('mqtt connection successful');\n    mqttClient.subscribe('topic');\n\n});\n\n....\n   .....\n   .....\n});\n```. ",
    "lygstate": "How to do reconnect with stream?. ",
    "zzzbatmand": "Found the problem. I forgot the \"mqtt://\" in the connection.\nBtw, it also seems to have some problems connecting to an ip address instead of a url.\n. I am not that good at git, but all it needs is \"mqtt://\" in the var client  = mqtt.connect('muqtt://custom.url') function, before the url or else the /lib/connect/index.js file would complain about replacing in null (witch would be the \"mqtt://\" that it got parsed by opts = xtend(url.parse(brokerUrl, true), opts) at line 60)\nSo if you could see if the input started with \"mutt://\" to make sure it was set, else print an error to the user and then just returning to the main program.\nOtherwise, you could see if \"opts.protocol\" was empty then handle an error from there.\nAlso, it works with an ip address, it just seems to have glitched first time i tried, but it works now.\n. ",
    "dhruvin2910": "Consider the command mqtt publish topic 0.\nSince args._.shift() returns 0 here, and it is a falsy value, the message gets defaulted to \"\".\n. ",
    "arunbangari": "Solved. As mentioned in one of the comments in #339 specifying mqtts://host in connect solves the problem. Thanks!\n. ",
    "simetin": "I think I did, I added .trim() and now it's working !\nThanks :)\n. ",
    "pushkarsrawat": "i am new learner of node js and mqtt.\nmqtt.txt\ncondition : messages are being published on cocurrent open connections. If i close the node server in between , it goes offline and tries to reconnect, when i restart the server , it connects earlier connections resumes but new connections also start. \nfor eg i want to have 10 open connection publishng messages , now server goes offline and reconnects , it resumes 10 connection and start 10 new connection.\n. ",
    "kintel": "sure, I'll look into it.\n. I preferred to keep the same style as for the function below, assuming it was written that way for a reason.\n. ",
    "aedart": "I wish that I had a good solution, but at the moment, I'm not even able to run a single connect test, because of commonjs' failure to resolve nested dependencies. I have no idea why, and therefore \"fishing\" for help anywhere I can...\nSee https://github.com/rollup/rollup-plugin-commonjs/issues/134 for further info.\nAnyways, ty for your reply.\n. ",
    "sjmf": "I've just noticed something I suspect may be related to this issue in one of my own projects (reference from commit a2d68b9): fixing the MQTT.js version at 1.14.1 made my code work again :)\nMy symptoms were that the broker (ActiveMQ) would close the connection immediately with a java.io.IOException, but I'm not sure how to check the message type being sent to tell you for sure if it's related to this issue. Leaving a comment just so you don't puzzle about the above reference :)\n. ",
    "eharrow": "Sorry for no update but I did resolve the issue and it was not due to MQTT but the compression lib I was using.  Many thanks.. For the record I am experiencing the same issue.  We use AMQ as well (5.14.5) and had not noticed the issue in test and dev as we use docker compose and made our mqtt client services dependent on AMQ which when it was restarted they were as well (I think).\nIn our case we have perhaps 500+ topics and subscribe on the consuming side using wildcards so resub is not onerous.  I have added the work around described above and indeed it solves the problem but to be honest I am not convinced that the issue is that deterministic as reproducing the issue was not always guaranteed.. no idea how I opened this please close and delete. ",
    "heppoko-samurai": "No error message is shown in my console...\nWhen I set \"connect\", \"close\" and \"reconnect\" event handler, I got the \"close\" and \"reconnect\" event.\nThank you.\n. Thank you for update.\nI made the browerMqtt.js using the latest code (2.1.1) and tried to connect to VerneMQ broker, but I cannot connect, yet... \nAddition: \n1.  when I use this (2.1.1),  I cannot connect mosquitto, too - ws://test.mosquitto.org:8080)\n2.  I see the following error message on the browser console.\n\nWebSocket connection to 'ws://test.mosquitto.org:8080/' failed: Connection closed before receiving a handshake response\n\nThank you,\n. Sorry for late response.\nI have confirmed that it (2.1.3) working fine.\nThank you!. ",
    "andyfen": "trying this with browserify & \"mqtt\": \"^2.1.2\"\nstill getting the error\n\nbundle.js:12089 WebSocket connection to 'ws://test.mosquitto.org:8080/mqtt' failed: Connection closed before receiving a handshake response\n\n```\nconst mqtt = require('mqtt')\nconst client  = mqtt.connect('ws://test.mosquitto.org:8080/mqtt')\n// also tried const client  = mqtt.connect('ws://test.mosquitto.org:8080')\nclient.subscribe('mitsuruog')\nclient.on('message', function (topic, message) {\n  console.log(message.toString());\n})\n```\n. yup 2.1.3 is working. thanks!\n. Im getting this error\nfollowing this example http://mitsuruog.github.io/what-mqtt/\n\nWebSocket connection to 'ws://test.mosquitto.org:8080/mqtt' failed: Connection closed before receiving a handshake response\n\n```\n    \n<script>\nvar client = mqtt.connect('ws://test.mosquitto.org:8080/mqtt');\n\nclient.subscribe('mitsuruog')\n\nclient.on('connect', function () {\n  alert('connected')\n})\nclient.on(\"message\", function(topic, payload) {\n  alert([topic, payload].join(\": \"));\n  client.end();\n});\n</script>\n\n```\n. ok thanks.\n. ",
    "TangMonk": "that's my problem\n. ",
    "AlexanderKai": "@TangMonk \nHello. \nI catched that problem too.\nCan you send me solution for fix this issue?\nThanks.. ",
    "natcl": "Oops closing as this is a duplicate\n. ",
    "hardillb": "Actually, I've just re-read the doc and the bit about URL.parse makes this possible.\n. ",
    "TotallyInformation": "Phew, quick! Thanks.\n. Wow! Thanks, great service \ud83d\udc4d \nI'll give it a go ASAP though I'm sure it will be fine. For reference, you can just do https://unpkg.com/mqtt/dist/mqtt.min.js to always get the latest version, it automatically redirects.\n. ",
    "i8beef": "Nope, still getting the same thing.\n. 2.1.3 fixed this. Thanks!\n. ",
    "brianjang": "Hi.\ni modified topic from \"test/#\" to \"test\"\n- topic in mqtt_sub.js \n- and topic in mqtt_pub.js\n(and all part is the same)\njs\nvar topic = \"test\";\nclient.publish(topic, \"published by mqtt broker\", option, function (err) {\n  console.log(\"mqtt_pub callback ===============\".blue);\n  if (err) {\n    console.log(\"mqtt_pub callback error ===============\".red);\n    console.log(err);\n  }\n});\nbut the result show the same problem.\nthis is log message\n```\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 16,\n  topic: 'test',\n  payload:  }\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 16,\n  topic: 'test',\n  payload:  }\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 16,\n  topic: 'test',\n  payload:  }\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 16,\n  topic: 'test',\n  payload:  }\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 16,\n  topic: 'test',\n  payload:  }\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 0,\n  dup: false,\n  length: 16,\n  topic: 'test',\n  payload:  }\nmqtt_sub event packetsend ======================\npublish\nmqtt_sub event packetreceive =====================\npublish\nmqtt_sub event message ===========================\ntest\nhello mqtt\n```. I got it.\nThank you for your answer.\nI have been using MQTT.js v1.x, and today i try to migrate MQTT.js v2.1.2.\ni didn't use external mqtt broker, i only used MQTT.js/lib/server.js and mqtt-connect.\n- mqtt-connect emit event 'publish', 'subscribe' : i worked this event to develop private push server.\n  my stupid question is started :) cause i was confusing event driven(in mqtt-connect) and just function call (in mqtt.js v2.x)\nplease tell me if i can help :)\n. the needed function in my side is round-robin function :+1: \nhttps://www.rabbitmq.com/tutorials/tutorial-two-javascript.html\n- specially \"Round-robin dispatching\"\nis there any method to apply \"Round-robin dispatching\"? (in MQTT.js)\n- or do i need a kind of scheduling algorithm by myself?\nThank you.. ",
    "johnzeng": "According to MQTT 3.1.1 protocol ,  The payload of a SUBSCRIBE packet MUST contain at least one Topic Filter/QoS pair. A SUBSCRIBE packet with no payload is a protocol violation. I think MQTT.js just send the package without checking it, and so the broker treats it as an error, so the broker just closes the connection.. yes, let me check about it. Unit test is added\nshould return an error (via callbacks) for empty topic list. Wait, what do you mean by return an Error , do you mean the done(new Error()) function call? I don't get that, I just copy your unit test and modify it to my case.. ",
    "yohei1126": "Has this issue already closed?. you can close this issue. @mcollina add the description for the function. please check it.. please check it.. The following type definiton for TypeScript need to be updated. I wll send pq as well.\nhttps://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/mqtt/index.d.ts. sending pq now. https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14179. The pull request is approved. https://github.com/DefinitelyTyped/DefinitelyTyped/pull/14179#pullrequestreview-17859178\nWaiting for the npm module @types/mqtt get updated.. The new version of @types/mqtt 0.0.33 has already released.\nhttps://www.npmjs.com/package/@types/mqtt. @mcollina probably not?. @sublimator \nI got the error \"error TS2307: Cannot find module 'mqtt'.\" when compile.  How can I resolve the module?. The callback for end should be function.\nhttps://github.com/mqttjs/MQTT.js/blob/v2.5.1/types/lib/client.d.ts#L151\npublic end (force?: boolean, cb?: boolean): this. I think the callback for the end function should be explicitly defined as follows. It is much easier for library users to understand.\nexport declare type CloseCallback = () => void\npublic end (force?: boolean, cb?: CloseCallback): this. I sent pull request for this. #587. Sent pq.. @sublimator Would you check it?. @sublimator can you check it?. we should have tests for Typescript definitions.. This is still WIP and not merged. I think we should have tests for the\ndefinitions in the CI.\n2017\u5e747\u670813\u65e5(\u6728) 13:06 sublimator notifications@github.com:\n\nYohei, what do you mean ?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/593#issuecomment-314964894, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAY5A_GldTnzrBY7oDoRQjljShwVbfFAks5sNZfNgaJpZM4M1PeU\n.\n. thanks!\n2017\u5e747\u670813\u65e5(\u6728) 13:59 sublimator notifications@github.com:\n@yohei1126 https://github.com/yohei1126\nFeel free to improve/add/etc of course!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/593#issuecomment-314971074, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAY5A5wfYdH_akBxBzo4vKBtkiFLr6uHks5sNaQygaJpZM4M1PeU\n.\n. This can be reproduced with the Webpack example on the Readme.\nhttps://github.com/mqttjs/MQTT.js#browser. The same issue as this? https://github.com/mqttjs/MQTT.js/issues/596. I have the same issue.. As far as I know, qos is optional. \nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L413. will do if it is not urgent.. Please check @sublimator @mcollina . @sublimator Could you check it?. @sublimator any updates?. @sublimator I can help it if you want.. @sublimator see this issue. https://github.com/mqttjs/MQTT.js/issues/615\n\nIn original JS code, option object itself for publish/subscribe function is optional. In the case, qos is 0. But qos is not optional. If you specify option object for publish/subscribe function, you must specify qos.\nThis is not compatible to the TypeScript definition.. @sublimator \nAs I mentioned, I made the opts, the option for publish / subscribe optional. This is the same implementation as the JS code. If you skip opts, QoS 0 will be set.\nBefore the changes, opts was mandatory. This is deifferent interface from the JS code.. @mcollina \nI thinks it should be OK.\n\nsubscribe\nQoS 0 (and the other default option) will be set if the opts is skipped. https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L361\n\nCallbask is not set for other than QoS 1/2. https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L387\n\n\npublish\n\nQoS 0 (and the other default option) will be set if the opts is skipped. https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L360\nCallbask is not set for other than QoS 1/2.. @sublimator \n\nOK, I understand your point. the changes on publish/subscribe function is not necessary.. I have thought about this a couple of minutes. I still feel an empty object as a parameter is weird as TypeScript interface.\nclient.subscribe('topic'); // this is OK.\nclient.subscribe('topic', {}); // this is weird for TypeScript\nclient.subscribe('topic', { qos: 0 }); // this is OK.\nSo, as TypeScript interface, option object can be optional but QoS in the option object must be specified. This is the same as my original suggestion.\nBut JS libary cannnot refuse empty object using type system. So, the default value must be set if an empty object is specified.\nclient.subscribe('topic', {}); // this cannot be refused in JS . The original issue #615 is about TypeScript interface. @sublimator could you check if this PR is OK?\nI also added the issue on JS library itself here #638. I will fix it later.. @sublimator Could you check it? . @mcollina it seems @sublimator is super busy now... thank you!\n2017\u5e747\u670812\u65e5(\u6c34) 13:09 sublimator notifications@github.com:\n\n@yohei1126 https://github.com/yohei1126\nMany apologies for the long delay!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/pull/626#issuecomment-314639171, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAY5A4HvOcxKD2wk1P7qO3E3dlxAl1xeks5sNEcVgaJpZM4NrmKV\n.\n. Yes, please go ahead.\n. @mcollina Could you check why the builds on Node 4.x were failed? The tests did not start.\nhttps://travis-ci.org/mqttjs/MQTT.js/builds/250386104. Oops. Is extend not available on Node 4.0?\n\nError: Cannot find module 'extend' from '/home/travis/build/mqttjs/MQTT.js/lib'. @mcollina Thanks. Please check it again.. sure. I will try it.. Thanks!. ",
    "arvindpdmn": "I have the same problem. I made this change for Windows but it's more of a hack:\n\"browser-build\": \"rmdir dist /S /Q || mkdir dist && browserify mqtt.js -s mqtt > dist/mqtt.js && uglifyjs --screw-ie8 < dist/mqtt.js > dist/mqtt.min.js\",\n\nNot sure how to write it such that it works across platforms. rmdir can fail if the folder does not exist in the first place. Hence used || condition. A better way would be to check if folder exists. Also, uglify-js must be installed globally but not sure how to capture this dependency because npm install . installs stuff locally.. ",
    "helxsz": "Hi, primarily it is for a debug reason.. Got it, thanks @ralphtheninja . ",
    "gitawego": "thanks for your reply. that's what I'm doing using mutex now. \nit would be more convenient if mqtt.js could integrate a queue system though.. thanks, gonna check this out.. ",
    "kani-rifluxyss": "ok thanks, . ",
    "leontastic": "It seems that subscribing to +/# achieves the result I'm looking for.\nStill not sure why a subscription to # fails to receive messages completely.. Nope. I'm not interested in $SYS topics. My test consists of sending 'Hello World!' on these channels:\n\ntest\ntest/test1\ntest/test1/test2\n\nSubscribing to # doesn't seem to subscribe to anything at all. If I push retained messages to any topics in the broker, subscribing to +/# will get all of those retained messages on connection/reconnection, while a subscription to # remains silent.. I'm using EMQTT.\nI see a PR in this repository implementing topic validation: https://github.com/mqttjs/MQTT.js/pull/438.\nIs it possible that MQTT.js contains validation logic which would block a subscription to #? A cursory review of that PR seems to contain logic specific to the # wildcard.\nHere's the full diff: https://github.com/mqttjs/MQTT.js/pull/438/files. No, no errors.\nI just tried connecting to another broker (public HiveMQ test broker mqtt://broker.hivemq.com:1833) and it seems that a subscription to # works there. Probably means this is an issue with EMQTT, not MQTT.js, so I'll close this issue for now and investigate on the other end.\nThanks @jdiamond @RangerMauve for the responses!. ",
    "djflex68": "After logging all events (connect, reconnect, close, offline), I noticed that I have a loop : connected -> offline -> recconect. I cannot figure out what is not working correctly.\nBoth problems could be linked. My code is currently in Typescript,  I will convert it to javascript for you if you want.\n. This is the class I'm using (converted from Typescript to javascript) for managing my mqtt requests.\n```\ndefine([\"require\", \"exports\", 'bluebird', \"mqtt\"], function (require, exports, bluebird_1, mqtt) {\n    \"use strict\";\n    // Class\n    var Test = (function () {\n        function Test() {\n            var _this = this;\n            this.promiseMap = {};\n            var self = this; // needed to keep context (because mqtt client changes \"this\" context even in the lambda expression)\n            this.mqttClient = mqtt.connect(\"mqtt://xxxxxxx\", { clientId: \"foo\", username: \"foo\", password: \"foo\" });\n            this.mqttClient.on(\"error\", function (error) {\n                console.warn(\"MQTT client error : \" + error);\n            });\n            this.mqttClient.on(\"offline\", function (error) {\n                console.warn(\"MQTT client went offline !\");\n            });\n            this.mqttClient.on(\"close\", function (error) {\n                console.warn(\"MQTT closed unexpectedly !\");\n            });\n            this.mqttClient.on(\"reconnect\", function (error) {\n                console.warn(\"MQTT reconnected unexpectedly !\");\n            });\n     // A promise resolved when connect has been raised\n        this.isConnected = new bluebird_1.Promise(function (resolve, reject) {\n            self.mqttClient.on(\"connect\", function (connack) {\n                console.warn(\"MQTT client connected. \" + connack);\n                self.subscribeToReplyTopics();\n                resolve(true);\n            });\n        });\n\n        this.mqttClient.on('message', function (topic, message) {\n            self.onMessageReceived(topic, message);\n        });\n    }\n    Test.prototype.subscribeToReplyTopics = function () {\n        var _this = this;\n        var replyTopic = [\n            \"myapp/device/+/reply/+\" // subscribe to device management (add/remove/update)\n        ];\n        replyTopic.forEach(function (topic) {\n            _this.mqttClient.subscribe(replyTopic);\n        });\n    };\n    Test.prototype.onMessageReceived = function (topic, message) {\n        var topicParts = topic.split(\"/\");\n        var id = topicParts[topicParts.length - 1];\n        var result = JSON.parse(message.toString());\n        if (!this.promiseMap[id]) {\n            console.warn(\"There is no promise declared for the id \" + id);\n        }\n        else {\n            // the id must match the same request topic\n            if (this.promiseMap[id].expectedReplyTopic === topic) {\n                var result = JSON.parse(message.toString());\n                if (result.result && result.result.success) {\n                    this.promiseMap[id].promise.resolve(result);\n                    delete this.promiseMap[id];\n                }\n                else {\n                    this.promiseMap[id].promise.reject(\"problem\");\n                    delete this.promiseMap[id];\n                }\n            }\n            else {\n                delete this.promiseMap[id]; // delete it\n            }\n        }\n    };\n\n    Test.prototype.sendRequest = function (topic, message) {\n        var _this = this;\n        return this.isConnected.then(function () {\n            var id = _this.generateUUID();\n            // topic should always have the form something/.../id for the request\n            // and something/.../reply/id for the answer\n            var topic = topic.replace(\"{id}\", id);\n            try {\n                var replyTopicParts = topic.split(\"/\");\n                replyTopicParts.splice(replyTopicParts.length - 1, 0, \"reply\");\n                var expectedReplyTopic = replyTopicParts.join(\"/\");\n                _this.mqttClient.publish(topic, JSON.stringify(message), { qos: 0 }, function (err) {\n                    if (err) {\n                        console.log(\"MQTT publish error : \" + err);\n                    }\n                });\n                _this.promiseMap[id] = {\n                    promise: _this.getDeferred(),\n                    timestamp: new Date(),\n                    expectedReplyTopic: expectedReplyTopic // allow filtering the right messages later\n                };\n                return _this.promiseMap[id].promise.promise;\n            }\n            catch (e) {\n                return bluebird_1.Promise.reject(e.message);\n            }\n        });\n    };\n\n    Test.prototype.generateUUID = function () {\n        var d = new Date().getTime();\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = (d + Math.random() * 16) % 16 | 0;\n            d = Math.floor(d / 16);\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n        });\n        return uuid;\n    };\n\n    Test.prototype.getDeferred = function () {\n        var result = {\n            promise: null,\n            resolve: null,\n            reject: null\n        };\n        result.promise = new bluebird_1.Promise(function (resolve, reject) {\n            result.reject = reject;\n            result.resolve = resolve;\n        });\n        return result;\n    };\n    return Test;\n}());\nexports.Test= Test;\n\n});. Ok I figured out what was causing this problem.\nWe use the same clientId in our team from several IP address. I think the broker was not very happy with that and was rejecting me, causing the connect/disconnect loop. This might explain my initial error.\nFor now I'll be using default random clientId mechanism.\nThanks for your support !\n. ",
    "xiaoDC": "I am sorry. It is our mqtt-server error. We does not use the right SSL certificate! It does work! . ",
    "sszczep": "I'll try later. Credentials are 100% fine, broker is Mosquitto on RPi. I'm using node. Does mqtt.connect return any errors? It doesn't print anything. Like that?:\njs\nclient.subscribe('HAP/esp8266_1/#', function() {\n  //publish\n});. Still nothing.\nhttp://pastebin.com/7Yr69m7C. I don't know how, but It suddenly started working. Thanks for your help. ",
    "chimit": "Sorry, @mcollina, maybe I'm not clear enough. I want to bind the connection to some event like this:\n```js\nconst client = mqtt.createClient({\n    host: 'abc',\n    port: 8883,\n    protocol: 'mqtts',\n    username: 'abc',\n    password: 'abc',\n});\n$('#connect').click(function() {\n    client.connect();\n}\n```\nIs it still impossible?. ",
    "ajurasz": "I see that I didn't follow convention. Fixed.. ",
    "ajoslin103": "There is only one 'remote' script, with two wrappers -- one for MQTT and the other for CGI \nThe MQTT.fx is connecting via TCP - it doesn't have an option for websockets\nIf you can describe how I might help to debug this issue I would be very glad to do so !!. ok, it's instant when via mqtt://localhost\nwhere should I go next ?. the slowdown is only for receiving the payload, sending the payload is fast as it should be -- I increased the payload size which has no effect on the overall speed, and I can see the publisher receive the request right away.\nI tried with the HiveMQ javascript client, and it was slow to receive as well (sending was ok, based on timings)\nthe paho client has the same results -- fast transmit of the request, slow receipt of the results.. good idea!  I'll try on the target environments (FC20 & C7) and I'll look for other clients for the mac.\nwill advise (in 14hrs or so, I can't work on this tonight)\nthanks!\n-- can you confirm slowdown on receiving (vs sending) messages with the browser?  . I could not get the eval copy of the MQHive broker to connect to the MQTT.fx or to the websocket, but I can't use a paid product anyway\nThe EMQ broker connected (using a Docker image) to the MQTT.fx and the Paho client, but not to the mqtt-client that underlies your library.\nThe results were good!  the request and response are very fast!\nSo that points to the mosquitto broker as the slowdown, at least on the mac...\nI'll get some brokers running on the target platforms today & report back here. mosquitto & emq on centos -- fast for request & receive\nmosquitto on FC20(32bit)  -- fast for request & receive\nok! so it seems definite !  the mosquitto broker on mac! \nthanks for your excellent work on your library & helping me to find out the problem !!. furthermore, the slowdown is only when the browser & broker & publisher are on the same mac \nwhen the broker is on another mac, the slowdown disappears. OH ^$%#@&* !!!\nAfter testing all over the place on multiple different OS's and combinations...\nUpgrading my local broker to the latest version solved the problem...\nSigh.... ",
    "houluy": "We've found the problem. We use connack() in mqtt-packet to respond the MQTT connecting client. The source code is shown below:\n\nThe two statements \"stream.write\" has an interval to run, which causes the first byte '0x20' is seperated into different TCP packages from other bytes. This can be fixed by encapsulating a whole CONNACK package and 'stream.write' it once for all. \nDo I have a correct understand about this?\n. Thanks a lot for your help!\nby the way, I've studied your paper 'Introducing the QEST broker' and gained a lot of new ideas and insights about IoT, MQTT and redis, sir. :). ",
    "prateekthakurgithub": "Thanks for help mcollina. Here is the new configuration that worked\n```js\nvar options = {\n         host:HOST,\n         port:PORT,\n         protocol:'mqtts',\n       //  protocolId:'MQlsdp',\n         //clientId: 'bgtestnodejs',\n         ca: TRUSTED_CA_LIST,\n         key: KEY,\n         cert: CERT,\n         secureProtocol: 'TLSv1_method',\n         protocolVersion:3,\n         passphrase: 'xxxxxxx',\n         username: \"xxxxxx\",\n         password: \"xxxxxxx\",\n     //rejectUnauthorized : false,\n     //keepalive: 1000,\n      //  checkServerIdentity: function (HOST, CERT) {\n        // return undefined;\n      //},\n     qos: 1\n   };\n\n```\nAs far my understanding is concerned the protocolId field should not be mentioned for hivemq 3.2 version. Also mosquitto was already using port 8883 which was blocking other requests to pass through. Let me know if any other improvements can be done.. ",
    "ToSa27": "Nevermind - I can't reproduce in a simple example so it's likely caused by my code, not by the module.. ",
    "seymar": "Its the response from the broker because you use Quality of Service level 1 (which is default).\nJust read the documentation on MQTT:\nhttp://www.hivemq.com/blog/mqtt-essentials-part-6-mqtt-quality-of-service-levels. ",
    "yan-foto": "Not all methods can be easily promisified by just leaving the callback param out. Take connect for example, a promisified version would look something like:\n```js\nvar mqtt = require('mqtt')\nfunction connect(host) {\n  return new Promise((resolve, reject) => {\n    let client = mqtt.connect('mqtt://test.mosquitto.org')\n    client.on('connect', resolve)\n    client.on('error', reject)\n  }\n}\n```. > Though I don't think that a promise is necessarily the right return from \"connect\". \"connect\" and \"error\" can be emitted multiple times, and you might want to cancel the connection.\n@RangerMauve  That is true when you are talking about events. However, I would love to have the connect method, which causes the connect event to be a promise.. Fair enough! To sum up:\n\npromisified methods explicitly marked as such (prefix/suffice/etc)\nasync iterators for streams, events, etc.\n. I could get behind that! Let's hope there is enough manpower to have it implemented \ud83d\ude4f . @jdiamond I don't see how it's not compatible. I'm not suggesting to kill connect event! The client, as I understand, takes care of reconnection and I don't really need to take care of each connect event thereafter. However, the initial connect (initiated by me) emits the first connect event, which is all I know to get started (e.g. publishing). @RangerMauve described my problem pretty well, it was also well noted that once would be better in my example code.. Maybe it's a good time to reference this module also from mqtt package in the README \ud83e\udd14 . @RangerMauve my bad! I must have missed it. sorry! :sweat_smile:. \n",
    "snailterror": "same problem for me  . ",
    "medric": "We have been looking this error up and it appears that this is related to https://github.com/mqttjs/mqtt-packet/issues/14. The MQTT protocol level 4 handles a new QoS level : 128 (failed) which seems not to be handled by mqtt-packet \nhttps://github.com/mqttjs/mqtt-packet/blob/master/constants.js. . I think I spotted the problem. The parser works fine to me. The problem seems to come from mqtt client though. The thing here is that we receive an 'unsuback' packet. In that case the callback is called with a null parameter, making the exception occurred \ncase 'unsuback':\n      delete this.outgoing[mid]\n      cb(null)\n      break\nThe callback does the following \n```\nthis.outgoing[packet.messageId] = function (err, packet) {\n    if (!err) {\n      subs.forEach(function (sub) {\n        that._subscribedTopics[sub.topic] = sub.qos\n      })\n  var granted = packet.granted\n  for (var i = 0; i < granted.length; i += 1) {\n    subs[i].qos = granted[i]\n  }\n}\n\ncallback(err, subs)\n\n}\n```\nThere is no packet here, if I am not mistaken. So should we either modify the if statement above as we got no payload here or just pass the packet to the callback anyway ?. ",
    "aignacio": "@mcollina sure! Above is part of my code and how I connect to MQTT server...\n```\nvar unique = require('getmac');\nvar mqtt     = require('mqtt');\nvar md5     = require('md5');\nlet  mac;\nlet  mqtt_server = '127.0.0.1';\nunique.getMac(function(err,mac_addr){\n  if (err)\n    throw err\n  mac = mac_addr;\n  // The problem is this attribution that runs after mqtt.connect...\n});\nmqttClient = mqtt.connect('mqtt://'+mqtt_server,{\n clientId :  mac\n ,username : 'test_'+mac\n ,password : md5(mac).slice(25,31)\n ,port : 3881\n});\n...\n```. Oh ok, I tried this but when I start the script, the event emitters \n\u00b4\u00b4\u00b4\nmqttClient.on('connect', function()...\nmqttClient.on('message', function(topic, message)...\n\u00b4\u00b4\u00b4\njust don't work, when the client connects =/ . Sure, thanks. I understand to call the event emitters after the init of mqttClient (calling in the cb works since the first time) but I was searching for the correct way to do this because my MQTT logic is big and all will be inside the cb or calling external functions.... =/ Then for that reason I tried to use the async module to handle the asynchronous return of MAC and after the MQTT connection. Thanks. ",
    "jtsinoni": "Thanks!\n\nOn Jan 30, 2017, at 5:10 PM, Matteo Collina notifications@github.com wrote:\nClosed #532 https://github.com/mqttjs/MQTT.js/issues/532.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/mqttjs/MQTT.js/issues/532#event-942161393, or mute the thread https://github.com/notifications/unsubscribe-auth/AR0i2_WqYq_PMxg3sjsEna53zjmVDLNlks5rXl_FgaJpZM4Lx5bY.\n\n\n. ",
    "cordovapolymer": "@RangerMauve is it possible without modifying client.js?. @RangerMauve , unfortunately it is not working this way.. @Urmik, I tried heavy loading mqtt.js with mosca and it works fine. Can you publish your code or test it with this https://github.com/mcollina/aedes/files/793556/Archive.zip from https://github.com/mcollina/aedes/issues/88. Well, I have based on your comment here in my decision to keep a client running in QOS2. Thanks for pointing that there's no way for client to know about broker supported QOS level, I have digged into the protocol specs and found that the QOS downgrade only happens for subscribers not for publishers.\nRemoving a failed message will violate the MQTT protocol, it should just be clearly stated for Mosca and perhaps MQTT.js users as well, that they must avoid connecting with QOS2 to Mosca broker.. @mcollina I agree about QOS1.\nIt took me almost an hour to find why the message arrives twice in mentioned conditions, I think it would be good for other users to know about this from the manual.. @dlape, maybe you call your subscribing code more than once?. I see, will message can be only set in connect payload. ",
    "akashgoswami": "There is no concept of Path in TCP connectivity. You can only connect to an IP address and Port. \nCheck out this  gist how to use a NGINX as a load balancer for TCP mode. . ",
    "jed": "How would folks feel about a PR adding an async version of this function, so that URLs could be signed remotely? For AWS ioT in particular, this would allow you to ensure an approved clientId and eliminate the need for a local crypto implementation.. ",
    "vlamic": "Async version would definitely help as the link is normally generated on the server side rather than client.. ",
    "grahamwhiteuk": "I managed to code around the need for an async transformWsUrl\nUse the error event\njavascript\nclient.on('error', (err) => {\n  // error code 5, Connection refused: Not authorized\n  if (err.code === 5) {\n    // token may have expired so try to get a new one\n    // insert http get here to grab new token\n    // then set a token variable that is accessible in the scope of your transformWsUrl function\n  }\n}. ",
    "codecov-io": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@dda7d8b). Click here to learn what that means.\nThe diff coverage is 88.23%.\n\n```diff\n@@            Coverage Diff            @@\nmaster     #539   +/-\n=========================================\n  Coverage          ?   92.58%         \n=========================================\n  Files             ?        8         \n  Lines             ?      634         \n  Branches          ?      150         \n=========================================\n  Hits              ?      587         \n  Misses            ?       47         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/ws.js | 77.08% <88.23%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dda7d8b...5e5ce76. Read the comment docs.. # Codecov Report\nMerging #787 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #787      +/-\n==========================================\n+ Coverage   93.68%   93.75%   +0.06%   \n==========================================\n  Files           8        8            \n  Lines         729      737       +8   \n  Branches      180      183       +3   \n==========================================\n+ Hits          683      691       +8   \n  Misses         46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.35% <100%> (+0.04%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b688fa...c19a107. Read the comment docs.\n. \n",
    "StarpTech": "I tried it with https://github.com/mcollina/mosca\nmosca -v | pino\n and it works. I leave this open. Perhaps anyone knows the reason.. That was also my thought. You're right when I move the publish in the callback of the subscription it works and to avoid this beginner problem I would recommend to update the examples. Thank you.. ",
    "cagodoy": "+1. @gyurobenjamin see #442 and #443 . ",
    "gyurobenjamin": "I've tried to install all missing modules manually like event, path, url. But unfortunately the fs module is not working on react-native.. @mcollina That would be awesome! Thanks!. Go to the module library:\n- npm install\n- webpack mqtt.js ./browserMqtt.js --output-library mqtt\nAnd than you can import the browserMqtt.js from your React.. ",
    "xiongxiong": "+1. ",
    "zmGitHub": "anybody solved?. anybody?. ",
    "codecov[bot]": "Codecov Report\n\nMerging #542 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #542   +/-\n=======================================\n  Coverage   92.58%   92.58%         \n=======================================\n  Files           8        8         \n  Lines         634      634         \n  Branches      150      150         \n=======================================\n  Hits          587      587         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32f99d8...ceda65a. Read the comment docs.. # Codecov Report\nMerging #547 into master will increase coverage by 0.31%.\nThe diff coverage is 87.71%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #547      +/-\n==========================================\n+ Coverage   92.62%   92.93%   +0.31%   \n==========================================\n  Files           8        8            \n  Lines         637      665      +28   \n  Branches      151      156       +5   \n==========================================\n+ Hits          590      618      +28   \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/tcp.js | 100% <100%> (\u00f8) | :white_check_mark: |\n| lib/connect/tls.js | 95.45% <100%> (+1.01%) | :white_check_mark: |\n| lib/connect/ws.js | 80.43% <37.5%> (+3.35%) | :white_check_mark: |\n| lib/connect/index.js | 95.91% <95.12%> (-1.31%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d8091d...18f6a81. Read the comment docs.. # Codecov Report\nMerging #551 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #551      +/-\n==========================================\n+ Coverage   92.58%   92.62%   +0.03%   \n==========================================\n  Files           8        8            \n  Lines         634      637       +3   \n  Branches      150      151       +1   \n==========================================\n+ Hits          587      590       +3   \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/index.js | 97.22% <100%> (+0.12%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b645b80...ab2b57d. Read the comment docs.. # Codecov Report\nMerging #556 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #556   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.02% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a3799c0...e9c78db. Read the comment docs.. # Codecov Report\nMerging #558 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #558   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a3799c0...b69e960. Read the comment docs.. # Codecov Report\nMerging #562 into master will increase coverage by 0.31%.\nThe diff coverage is 87.71%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #562      +/-\n==========================================\n+ Coverage   92.62%   92.93%   +0.31%   \n==========================================\n  Files           8        8            \n  Lines         637      665      +28   \n  Branches      151      156       +5   \n==========================================\n+ Hits          590      618      +28   \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/tls.js | 95.45% <100%> (+1.01%) | :white_check_mark: |\n| lib/connect/tcp.js | 100% <100%> (\u00f8) | :white_check_mark: |\n| lib/connect/ws.js | 80.43% <37.5%> (+3.35%) | :white_check_mark: |\n| lib/connect/index.js | 95.91% <95.12%> (-1.31%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d8091d...3ce3ab0. Read the comment docs.. # Codecov Report\nMerging #563 into master will decrease coverage by 2.17%.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #563      +/-\n==========================================\n- Coverage   93.75%   91.57%   -2.18%   \n==========================================\n  Files           8        8            \n  Lines         737      760      +23   \n  Branches      183      187       +4   \n==========================================\n+ Hits          691      696       +5   \n- Misses         46       64      +18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 93.96% <33.33%> (-3.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e797698...ee3382f. Read the comment docs.\n. # Codecov Report\nMerging #564 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #564   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6d8091d...e595fb5. Read the comment docs.. # Codecov Report\nMerging #565 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #565   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dff544d...2a3bf8b. Read the comment docs.. # Codecov Report\nMerging #567 into master will not change coverage.\nThe diff coverage is n/a.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #567   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33a5ccb...1a993b4. Read the comment docs.. # Codecov Report\nMerging #581 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #581   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| examples/wss/client.js | 96.02% <\u00f8> (\u00f8) | |\n| lib/client.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5622151...35f5d7c. Read the comment docs.. # Codecov Report\nMerging #582 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #582   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 46dc947...878b697. Read the comment docs.. # Codecov Report\nMerging #585 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #585   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| examples/wss/client.js | | |\n| lib/client.js | 96.02% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d7e5b17...01c1cf8. Read the comment docs.. # Codecov Report\nMerging #587 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #587   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a831f8f...1effb2c. Read the comment docs.. # Codecov Report\nMerging #590 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #590   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a831f8f...c8ef5ed. Read the comment docs.. # Codecov Report\nMerging #591 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #591   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9bbe45b...38ad5d8. Read the comment docs.. # Codecov Report\nMerging #593 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #593   +/-\n=======================================\n  Coverage   92.72%   92.72%         \n=======================================\n  Files           8        8         \n  Lines         660      660         \n  Branches      161      161         \n=======================================\n  Hits          612      612         \n  Misses         48       48\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0307b5b...3c1fb4c. Read the comment docs.\n. # Codecov Report\nMerging #594 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #594   +/-\n=======================================\n  Coverage   92.62%   92.62%         \n=======================================\n  Files           8        8         \n  Lines         637      637         \n  Branches      151      151         \n=======================================\n  Hits          590      590         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4b3af5...4917cd9. Read the comment docs.. # Codecov Report\nMerging #599 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #599      +/-\n==========================================\n+ Coverage   92.62%   92.64%   +0.02%   \n==========================================\n  Files           8        8            \n  Lines         637      639       +2   \n  Branches      151      151            \n==========================================\n+ Hits          590      592       +2   \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.04% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b85dfd8...3338042. Read the comment docs.. # Codecov Report\nMerging #603 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #603   +/-\n=======================================\n  Coverage   92.64%   92.64%         \n=======================================\n  Files           8        8         \n  Lines         639      639         \n  Branches      151      151         \n=======================================\n  Hits          592      592         \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.04% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e6bd5bc...e065fec. Read the comment docs.\n. # Codecov Report\nMerging #606 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #606   +/-\n=======================================\n  Coverage   92.64%   92.64%         \n=======================================\n  Files           8        8         \n  Lines         639      639         \n  Branches      151      151         \n=======================================\n  Hits          592      592         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 66aa4e6...4e8fa7f. Read the comment docs.\n. # Codecov Report\nMerging #610 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #610   +/-\n=======================================\n  Coverage   92.64%   92.64%         \n=======================================\n  Files           8        8         \n  Lines         639      639         \n  Branches      151      151         \n=======================================\n  Hits          592      592         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 160cf7e...4eb49a8. Read the comment docs.\n. # Codecov Report\nMerging #613 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #613   +/-\n=======================================\n  Coverage   92.64%   92.64%         \n=======================================\n  Files           8        8         \n  Lines         639      639         \n  Branches      151      151         \n=======================================\n  Hits          592      592         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a3dcf7a...bd38bc2. Read the comment docs.\n. # Codecov Report\nMerging #617 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #617   +/-\n=======================================\n  Coverage   92.64%   92.64%         \n=======================================\n  Files           8        8         \n  Lines         639      639         \n  Branches      151      151         \n=======================================\n  Hits          592      592         \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/tls.js | 94.44% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d297fcb...f464c46. Read the comment docs.\n. # Codecov Report\nMerging #620 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #620   +/-\n=======================================\n  Coverage   92.64%   92.64%         \n=======================================\n  Files           8        8         \n  Lines         639      639         \n  Branches      151      151         \n=======================================\n  Hits          592      592         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d297fcb...ffcd1ea. Read the comment docs.\n. # Codecov Report\nMerging #621 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #621      +/-\n==========================================\n+ Coverage   92.64%   92.69%   +0.04%   \n==========================================\n  Files           8        8            \n  Lines         639      643       +4   \n  Branches      151      153       +2   \n==========================================\n+ Hits          592      596       +4   \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.08% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d297fcb...42110fe. Read the comment docs.\n. # Codecov Report\nMerging #624 into master will decrease coverage by 0.1%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #624      +/-\n==========================================\n- Coverage   92.69%   92.58%   -0.11%   \n==========================================\n  Files           8        8            \n  Lines         643      647       +4   \n  Branches      153      156       +3   \n==========================================\n+ Hits          596      599       +3   \n- Misses         47       48       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 95.88% <80%> (-0.21%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7e0e9c...8f0444e. Read the comment docs.\n. # Codecov Report\nMerging #626 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #626      +/-\n==========================================\n+ Coverage   92.69%   92.71%   +0.02%   \n==========================================\n  Files           8        8            \n  Lines         643      659      +16   \n  Branches      153      163      +10   \n==========================================\n+ Hits          596      611      +15   \n- Misses         47       48       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96% <0%> (-0.09%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7e0e9c...2d6590a. Read the comment docs.\n. # Codecov Report\nMerging #627 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #627   +/-\n=======================================\n  Coverage   92.69%   92.69%         \n=======================================\n  Files           8        8         \n  Lines         643      643         \n  Branches      153      153         \n=======================================\n  Hits          596      596         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7e0e9c...16c4447. Read the comment docs.\n. # Codecov Report\nMerging #629 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #629   +/-\n=======================================\n  Coverage   92.69%   92.69%         \n=======================================\n  Files           8        8         \n  Lines         643      643         \n  Branches      153      153         \n=======================================\n  Hits          596      596         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7e0e9c...1c8c4b1. Read the comment docs.\n. # Codecov Report\nMerging #631 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #631   +/-\n=======================================\n  Coverage   92.58%   92.58%         \n=======================================\n  Files           8        8         \n  Lines         647      647         \n  Branches      156      156         \n=======================================\n  Hits          599      599         \n  Misses         48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 95.88% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e4df2f6...ef19204. Read the comment docs.\n. # Codecov Report\nMerging #635 into master will increase coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #635      +/-\n==========================================\n+ Coverage   92.58%   92.71%   +0.13%   \n==========================================\n  Files           8        8            \n  Lines         647      659      +12   \n  Branches      156      163       +7   \n==========================================\n+ Hits          599      611      +12   \n  Misses         48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96% <100%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9116508...59b8dba. Read the comment docs.\n. # Codecov Report\nMerging #639 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #639      +/-\n==========================================\n+ Coverage   92.71%   92.72%   +0.01%   \n==========================================\n  Files           8        8            \n  Lines         659      660       +1   \n  Branches      163      161       -2   \n==========================================\n+ Hits          611      612       +1   \n  Misses         48       48\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d4d287a...5a6ee9f. Read the comment docs.\n. # Codecov Report\nMerging #645 into master will increase coverage by 0.59%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #645      +/-\n==========================================\n+ Coverage   92.72%   93.32%   +0.59%   \n==========================================\n  Files           8        8            \n  Lines         660      659       -1   \n  Branches      161      160       -1   \n==========================================\n+ Hits          612      615       +3   \n+ Misses         48       44       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.23% <100%> (+0.22%) | :arrow_up: |\n| lib/store.js | 93.87% <0%> (+6.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a39e84e...735ed2d. Read the comment docs.\n. # Codecov Report\nMerging #650 into master will decrease coverage by 0.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #650      +/-\n==========================================\n- Coverage   93.41%   93.16%   -0.26%   \n==========================================\n  Files           8        8            \n  Lines         668      658      -10   \n  Branches      163      160       -3   \n==========================================\n- Hits          624      613      -11   \n- Misses         44       45       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.22% <\u00f8> (-0.09%) | :arrow_down: |\n| lib/store.js | 91.83% <0%> (-2.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 51760ee...f56b46d. Read the comment docs.\n. # Codecov Report\nMerging #653 into master will decrease coverage by 3.48%.\nThe diff coverage is 79.04%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #653      +/-\n==========================================\n- Coverage   93.22%   89.73%   -3.49%   \n==========================================\n  Files           8        9       +1   \n  Lines         664      760      +96   \n  Branches      160      198      +38   \n==========================================\n+ Hits          619      682      +63   \n- Misses         45       78      +33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/wx.js | 55.38% <55.38%> (\u00f8) | |\n| lib/connect/index.js | 94.17% <94.11%> (-3.05%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5afa5ac...83e8037. Read the comment docs.\n. # Codecov Report\nMerging #657 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #657   +/-\n=======================================\n  Coverage   93.16%   93.16%         \n=======================================\n  Files           8        8         \n  Lines         658      658         \n  Branches      160      160         \n=======================================\n  Hits          613      613         \n  Misses         45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bdebe51...e30ef88. Read the comment docs.\n. # Codecov Report\nMerging #658 into master will increase coverage by 0.06%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #658      +/-\n==========================================\n+ Coverage   93.16%   93.22%   +0.06%   \n==========================================\n  Files           8        8            \n  Lines         658      664       +6   \n  Branches      160      160            \n==========================================\n+ Hits          613      619       +6   \n  Misses         45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.27% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bdebe51...4988a48. Read the comment docs.\n. # Codecov Report\nMerging #660 into master will decrease coverage by 0.69%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #660     +/-\n=========================================\n- Coverage   93.22%   92.52%   -0.7%   \n=========================================\n  Files           8        8           \n  Lines         664      669      +5   \n  Branches      160      161      +1   \n=========================================\n  Hits          619      619           \n- Misses         45       50      +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/index.js | 90.9% <16.66%> (-6.32%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5afa5ac...127ba09. Read the comment docs.\n. # Codecov Report\nMerging #665 into master will increase coverage by <.01%.\nThe diff coverage is 95%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #665      +/-\n==========================================\n+ Coverage   92.66%   92.66%   +<.01%   \n==========================================\n  Files           8        8            \n  Lines         668      682      +14   \n  Branches      161      167       +6   \n==========================================\n+ Hits          619      632      +13   \n- Misses         49       50       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.17% <95%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 862cb41...f6d12f0. Read the comment docs.\n. # Codecov Report\nMerging #678 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #678      +/-\n=========================================\n+ Coverage   92.66%   92.7%   +0.03%   \n=========================================\n  Files           8       8            \n  Lines         682     685       +3   \n  Branches      167     167            \n=========================================\n+ Hits          632     635       +3   \n  Misses         50      50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.19% <100%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1463af...b0a88d5. Read the comment docs.\n. # Codecov Report\nMerging #679 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #679      +/-\n==========================================\n+ Coverage   92.66%   92.74%   +0.07%   \n==========================================\n  Files           8        8            \n  Lines         682      689       +7   \n  Branches      167      169       +2   \n==========================================\n+ Hits          632      639       +7   \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.23% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1463af...ef8bcf7. Read the comment docs.\n. # Codecov Report\nMerging #679 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #679     +/-\n=========================================\n+ Coverage   92.66%   92.77%   +0.1%   \n=========================================\n  Files           8        8           \n  Lines         682      692     +10   \n  Branches      167      170      +3   \n=========================================\n+ Hits          632      642     +10   \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.25% <100%> (+0.08%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1463af...ef8bcf7. Read the comment docs.\n. # Codecov Report\nMerging #680 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #680   +/-\n=======================================\n  Coverage   92.66%   92.66%         \n=======================================\n  Files           8        8         \n  Lines         682      682         \n  Branches      167      167         \n=======================================\n  Hits          632      632         \n  Misses         50       50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b1463af...d74b9a5. Read the comment docs.\n. # Codecov Report\nMerging #683 into master will increase coverage by 0.28%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #683      +/-\n==========================================\n+ Coverage    92.7%   92.98%   +0.28%   \n==========================================\n  Files           8        8            \n  Lines         685      699      +14   \n  Branches      167      172       +5   \n==========================================\n+ Hits          635      650      +15   \n+ Misses         50       49       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.52% <100%> (+0.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b0293c...eb536fd. Read the comment docs.\n. # Codecov Report\nMerging #689 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #689   +/-\n======================================\n  Coverage    92.7%   92.7%         \n======================================\n  Files           8       8         \n  Lines         685     685         \n  Branches      167     167         \n======================================\n  Hits          635     635         \n  Misses         50      50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b0293c...0d2dc50. Read the comment docs.\n. # Codecov Report\nMerging #689 into master will increase coverage by 0.29%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #689      +/-\n==========================================\n+ Coverage    92.7%   92.99%   +0.29%   \n==========================================\n  Files           8        8            \n  Lines         685      685            \n  Branches      167      167            \n==========================================\n+ Hits          635      637       +2   \n+ Misses         50       48       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.64% <100%> (+0.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b0293c...0d2dc50. Read the comment docs.\n. # Codecov Report\nMerging #697 into master will increase coverage by 0.1%.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #697     +/-\n========================================\n+ Coverage    92.7%   92.8%   +0.1%   \n========================================\n  Files           8       8           \n  Lines         685     695     +10   \n  Branches      167     169      +2   \n========================================\n+ Hits          635     645     +10   \n  Misses         50      50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.27% <100%> (+0.07%) | :arrow_up: |\n| lib/connect/tls.js | 94.73% <0%> (+0.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8fe4d75...430e488. Read the comment docs.\n. # Codecov Report\nMerging #700 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #700      +/-\n==========================================\n+ Coverage    92.7%   92.71%   +0.01%   \n==========================================\n  Files           8        8            \n  Lines         685      686       +1   \n  Branches      167      167            \n==========================================\n+ Hits          635      636       +1   \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/tls.js | 94.73% <100%> (+0.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8fe4d75...6384341. Read the comment docs.\n. # Codecov Report\nMerging #707 into master will increase coverage by 0.1%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster    #707     +/-\n========================================\n+ Coverage    92.8%   92.9%   +0.1%   \n========================================\n  Files           8       8           \n  Lines         695     705     +10   \n  Branches      169     171      +2   \n========================================\n+ Hits          645     655     +10   \n  Misses         50      50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.31% <100%> (+0.04%) | :arrow_up: |\n| lib/store.js | 92.59% <87.5%> (+0.75%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ee05456...a84880b. Read the comment docs.\n. # Codecov Report\nMerging #708 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #708   +/-\n======================================\n  Coverage    92.8%   92.8%         \n======================================\n  Files           8       8         \n  Lines         695     695         \n  Branches      169     169         \n======================================\n  Hits          645     645         \n  Misses         50      50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ee05456...63cfd04. Read the comment docs.\n. # Codecov Report\nMerging #712 into master will decrease coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #712      +/-\n==========================================\n- Coverage    92.9%   92.88%   -0.03%   \n==========================================\n  Files           8        8            \n  Lines         705      703       -2   \n  Branches      171      173       +2   \n==========================================\n- Hits          655      653       -2   \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.29% <100%> (-0.02%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d4d295...8a27699. Read the comment docs.\n. # Codecov Report\nMerging #713 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #713   +/-\n======================================\n  Coverage    92.9%   92.9%         \n======================================\n  Files           8       8         \n  Lines         705     705         \n  Branches      171     171         \n======================================\n  Hits          655     655         \n  Misses         50      50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.31% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d4d295...34873ca. Read the comment docs.\n. # Codecov Report\nMerging #717 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #717   +/-\n=======================================\n  Coverage   92.88%   92.88%         \n=======================================\n  Files           8        8         \n  Lines         703      703         \n  Branches      173      173         \n=======================================\n  Hits          653      653         \n  Misses         50       50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...3f554cb. Read the comment docs.\n. # Codecov Report\nMerging #719 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #719   +/-\n=======================================\n  Coverage   92.88%   92.88%         \n=======================================\n  Files           8        8         \n  Lines         703      703         \n  Branches      173      173         \n=======================================\n  Hits          653      653         \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.29% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...1da2934. Read the comment docs.\n. # Codecov Report\nMerging #722 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #722   +/-\n=======================================\n  Coverage   92.88%   92.88%         \n=======================================\n  Files           8        8         \n  Lines         703      703         \n  Branches      173      173         \n=======================================\n  Hits          653      653         \n  Misses         50       50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...d0a73d0. Read the comment docs.\n. # Codecov Report\nMerging #724 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #724   +/-\n=======================================\n  Coverage   92.88%   92.88%         \n=======================================\n  Files           8        8         \n  Lines         703      703         \n  Branches      173      173         \n=======================================\n  Hits          653      653         \n  Misses         50       50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...5d214f6. Read the comment docs.\n. # Codecov Report\nMerging #725 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #725   +/-\n=======================================\n  Coverage   92.88%   92.88%         \n=======================================\n  Files           8        8         \n  Lines         703      703         \n  Branches      173      173         \n=======================================\n  Hits          653      653         \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.29% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...a0c1ed1. Read the comment docs.\n. # Codecov Report\nMerging #730 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #730   +/-\n=======================================\n  Coverage   92.88%   92.88%         \n=======================================\n  Files           8        8         \n  Lines         703      703         \n  Branches      173      173         \n=======================================\n  Hits          653      653         \n  Misses         50       50\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...2c29c25. Read the comment docs.\n. # Codecov Report\nMerging #732 into master will decrease coverage by 0.31%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #732      +/-\n==========================================\n- Coverage   93.35%   93.03%   -0.32%   \n==========================================\n  Files           8        8            \n  Lines         722      704      -18   \n  Branches      178      173       -5   \n==========================================\n- Hits          674      655      -19   \n- Misses         48       49       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/index.js | 92.1% <\u00f8> (-0.21%) | :arrow_down: |\n| lib/client.js | 96.52% <100%> (-0.33%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 941f3eb...0970e3a. Read the comment docs.\n. # Codecov Report\nMerging #734 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #734      +/-\n==========================================\n+ Coverage   92.88%   93.03%   +0.14%   \n==========================================\n  Files           8        8            \n  Lines         703      718      +15   \n  Branches      173      178       +5   \n==========================================\n+ Hits          653      668      +15   \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.41% <100%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 13f0219...f3f781b. Read the comment docs.\n. # Codecov Report\nMerging #736 into master will increase coverage by 0.16%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #736      +/-\n==========================================\n+ Coverage   92.88%   93.05%   +0.16%   \n==========================================\n  Files           8        8            \n  Lines         703      720      +17   \n  Branches      173      178       +5   \n==========================================\n+ Hits          653      670      +17   \n  Misses         50       50\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/index.js | 92.3% <100%> (+0.2%) | :arrow_up: |\n| lib/client.js | 96.41% <0%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 402d336...37e6a59. Read the comment docs.\n. # Codecov Report\nMerging #737 into master will increase coverage by 0.37%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #737      +/-\n==========================================\n+ Coverage   93.05%   93.43%   +0.37%   \n==========================================\n  Files           8        8            \n  Lines         720      746      +26   \n  Branches      178      196      +18   \n==========================================\n+ Hits          670      697      +27   \n+ Misses         50       49       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.83% <0%> (+0.42%) | :arrow_up: |\n| lib/connect/index.js | 93.26% <0%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d51ded...800a4dd. Read the comment docs.\n. # Codecov Report\nMerging #738 into master will increase coverage by 0.11%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #738      +/-\n==========================================\n+ Coverage   93.33%   93.44%   +0.11%   \n==========================================\n  Files           8        8            \n  Lines         720      748      +28   \n  Branches      178      196      +18   \n==========================================\n+ Hits          672      699      +27   \n- Misses         48       49       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.84% <100%> (+0.01%) | :arrow_up: |\n| lib/connect/index.js | 93.26% <0%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21084f5...58a520b. Read the comment docs.\n. # Codecov Report\nMerging #746 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #746      +/-\n==========================================\n+ Coverage   93.35%   93.49%   +0.14%   \n==========================================\n  Files           8        8            \n  Lines         722      723       +1   \n  Branches      178      178            \n==========================================\n+ Hits          674      676       +2   \n+ Misses         48       47       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.06% <100%> (+0.21%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 941f3eb...cd23ea8. Read the comment docs.\n. # Codecov Report\nMerging #748 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #748   +/-\n=======================================\n  Coverage   93.49%   93.49%         \n=======================================\n  Files           8        8         \n  Lines         723      723         \n  Branches      178      178         \n=======================================\n  Hits          676      676         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dde8153...4a3aadd. Read the comment docs.\n. # Codecov Report\nMerging #751 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #751   +/-\n=======================================\n  Coverage   93.49%   93.49%         \n=======================================\n  Files           8        8         \n  Lines         723      723         \n  Branches      178      178         \n=======================================\n  Hits          676      676         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 629dd94...6cdafa6. Read the comment docs.\n. # Codecov Report\nMerging #763 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #763      +/-\n==========================================\n+ Coverage   93.49%   93.52%   +0.02%   \n==========================================\n  Files           8        8            \n  Lines         723      726       +3   \n  Branches      178      179       +1   \n==========================================\n+ Hits          676      679       +3   \n  Misses         47       47\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.08% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 82c2764...915742e. Read the comment docs.\n. # Codecov Report\nMerging #764 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #764   +/-\n=======================================\n  Coverage   93.52%   93.52%         \n=======================================\n  Files           8        8         \n  Lines         726      726         \n  Branches      179      179         \n=======================================\n  Hits          679      679         \n  Misses         47       47\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3cde52f...f840976. Read the comment docs.\n. # Codecov Report\nMerging #770 into master will increase coverage by 0.13%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #770      +/-\n==========================================\n+ Coverage   93.52%   93.66%   +0.13%   \n==========================================\n  Files           8        8            \n  Lines         726      726            \n  Branches      179      179            \n==========================================\n+ Hits          679      680       +1   \n+ Misses         47       46       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.29% <100%> (+0.2%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1bd1c51...4270fd2. Read the comment docs.\n. # Codecov Report\nMerging #771 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #771      +/-\n==========================================\n+ Coverage   93.66%   93.68%   +0.02%   \n==========================================\n  Files           8        8            \n  Lines         726      729       +3   \n  Branches      179      180       +1   \n==========================================\n+ Hits          680      683       +3   \n  Misses         46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.3% <100%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d58c3fe...cbbc0d4. Read the comment docs.\n. # Codecov Report\nMerging #787 into master will increase coverage by 0.33%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #787      +/-\n==========================================\n+ Coverage   93.68%   94.02%   +0.33%   \n==========================================\n  Files           8        8            \n  Lines         729      736       +7   \n  Branches      180      182       +2   \n==========================================\n+ Hits          683      692       +9   \n+ Misses         46       44       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.75% <100%> (+0.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3b688fa...d84d1d7. Read the comment docs.\n. # Codecov Report\nMerging #805 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #805      +/-\n==========================================\n+ Coverage   93.75%   93.78%   +0.02%   \n==========================================\n  Files           8        8            \n  Lines         737      740       +3   \n  Branches      183      185       +2   \n==========================================\n+ Hits          691      694       +3   \n  Misses         46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/index.js | 92.59% <100%> (+0.28%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e797698...b9770be. Read the comment docs.\n. # Codecov Report\nMerging #808 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #808   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         737      737         \n  Branches      183      183         \n=======================================\n  Hits          691      691         \n  Misses         46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e797698...f8215b4. Read the comment docs.\n. # Codecov Report\nMerging #811 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #811   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         737      737         \n  Branches      183      183         \n=======================================\n  Hits          691      691         \n  Misses         46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e797698...05263bd. Read the comment docs.\n. # Codecov Report\nMerging #814 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #814   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         737      737         \n  Branches      183      183         \n=======================================\n  Hits          691      691         \n  Misses         46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4efb91c...d18975d. Read the comment docs.\n. # Codecov Report\nMerging #819 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #819   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         737      737         \n  Branches      183      183         \n=======================================\n  Hits          691      691         \n  Misses         46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a194fc3...4152e03. Read the comment docs.\n. # Codecov Report\nMerging #827 into master will increase coverage by 0.26%.\nThe diff coverage is 96.57%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #827      +/-\n==========================================\n+ Coverage   94.13%   94.39%   +0.26%   \n==========================================\n  Files           8        8            \n  Lines         767      874     +107   \n  Branches      190      231      +41   \n==========================================\n+ Hits          722      825     +103   \n- Misses         45       49       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.27% <96.57%> (-0.21%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6e88644...3fc4120. Read the comment docs.\n. # Codecov Report\nMerging #831 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #831   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         737      737         \n  Branches      183      183         \n=======================================\n  Hits          691      691         \n  Misses         46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 902b146...5805f3c. Read the comment docs.\n. # Codecov Report\nMerging #835 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #835   +/-\n=======================================\n  Coverage   93.78%   93.78%         \n=======================================\n  Files           8        8         \n  Lines         740      740         \n  Branches      185      185         \n=======================================\n  Hits          694      694         \n  Misses         46       46\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d556676...39ca5e3. Read the comment docs.\n. # Codecov Report\nMerging #852 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #852      +/-\n==========================================\n+ Coverage   93.78%   93.83%   +0.05%   \n==========================================\n  Files           8        8            \n  Lines         740      746       +6   \n  Branches      185      187       +2   \n==========================================\n+ Hits          694      700       +6   \n  Misses         46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.38% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e6409a6...b88c292. Read the comment docs.\n. # Codecov Report\nMerging #857 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #857      +/-\n==========================================\n+ Coverage   93.83%   93.85%   +0.01%   \n==========================================\n  Files           8        8            \n  Lines         746      748       +2   \n  Branches      187      187            \n==========================================\n+ Hits          700      702       +2   \n  Misses         46       46\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/store.js | 92.85% <100%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e776bfc...71a178d. Read the comment docs.\n. # Codecov Report\nMerging #858 into master will increase coverage by 0.2%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #858     +/-\n=========================================\n+ Coverage   93.85%   94.05%   +0.2%   \n=========================================\n  Files           8        8           \n  Lines         748      740      -8   \n  Branches      187      186      -1   \n=========================================\n- Hits          702      696      -6   \n+ Misses         46       44      -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.75% <100%> (+0.36%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 797f9ea...5b6c666. Read the comment docs.\n. # Codecov Report\nMerging #859 into master will increase coverage by 0.2%.\nThe diff coverage is 92.85%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #859     +/-\n=========================================\n+ Coverage   93.85%   94.05%   +0.2%   \n=========================================\n  Files           8        8           \n  Lines         748      757      +9   \n  Branches      187      188      +1   \n=========================================\n+ Hits          702      712     +10   \n+ Misses         46       45      -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.43% <92.85%> (+0.04%) | :arrow_up: |\n| lib/store.js | 94.64% <0%> (+1.78%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 797f9ea...59fd16e. Read the comment docs.\n. # Codecov Report\nMerging #860 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #860   +/-\n=======================================\n  Coverage   94.05%   94.05%         \n=======================================\n  Files           8        8         \n  Lines         757      757         \n  Branches      188      188         \n=======================================\n  Hits          712      712         \n  Misses         45       45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb3de0d...38c77a1. Read the comment docs.\n. # Codecov Report\nMerging #864 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #864      +/-\n=========================================\n+ Coverage   94.05%   94.1%   +0.04%   \n=========================================\n  Files           8       8            \n  Lines         757     763       +6   \n  Branches      188     190       +2   \n=========================================\n+ Hits          712     718       +6   \n  Misses         45      45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.46% <100%> (+0.03%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c9cd0d...d7391a9. Read the comment docs.\n. # Codecov Report\nMerging #866 into master will increase coverage by 0.03%.\nThe diff coverage is 93.61%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #866      +/-\n==========================================\n+ Coverage    94.1%   94.13%   +0.03%   \n==========================================\n  Files           8        8            \n  Lines         763      767       +4   \n  Branches      190      190            \n==========================================\n+ Hits          718      722       +4   \n  Misses         45       45\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.48% <93.61%> (+0.01%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d138144...69d6356. Read the comment docs.\n. # Codecov Report\nMerging #867 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #867   +/-\n======================================\n  Coverage    94.1%   94.1%         \n======================================\n  Files           8       8         \n  Lines         763     763         \n  Branches      190     190         \n======================================\n  Hits          718     718         \n  Misses         45      45\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d138144...e3cba75. Read the comment docs.\n. # Codecov Report\nMerging #872 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #872   +/-\n=======================================\n  Coverage   94.41%   94.41%         \n=======================================\n  Files           8        8         \n  Lines         877      877         \n  Branches      232      232         \n=======================================\n  Hits          828      828         \n  Misses         49       49\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f94cb75...b0d8c23. Read the comment docs.\n. # Codecov Report\nMerging #881 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #881      +/-\n==========================================\n+ Coverage   94.41%   94.42%   +0.01%   \n==========================================\n  Files           8        8            \n  Lines         877      879       +2   \n  Branches      232      233       +1   \n==========================================\n+ Hits          828      830       +2   \n  Misses         49       49\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.29% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f94cb75...d553a3b. Read the comment docs.\n. # Codecov Report\nMerging #893 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #893      +/-\n==========================================\n- Coverage   94.42%   94.41%   -0.02%   \n==========================================\n  Files           8        8            \n  Lines         879      877       -2   \n  Branches      233      232       -1   \n==========================================\n- Hits          830      828       -2   \n  Misses         49       49\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.28% <100%> (-0.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1684819...3c9d471. Read the comment docs.\n. # Codecov Report\nMerging #894 into master will decrease coverage by 0.04%.\nThe diff coverage is 96.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #894      +/-\n==========================================\n- Coverage   94.42%   94.38%   -0.05%   \n==========================================\n  Files           8        8            \n  Lines         879      890      +11   \n  Branches      233      237       +4   \n==========================================\n+ Hits          830      840      +10   \n- Misses         49       50       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/store.js | 94.64% <100%> (\u00f8) | :arrow_up: |\n| lib/client.js | 97.18% <95.65%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1684819...4ec3039. Read the comment docs.\n. # Codecov Report\nMerging #898 into master will decrease coverage by 0.53%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #898      +/-\n==========================================\n- Coverage   94.42%   93.89%   -0.54%   \n==========================================\n  Files           8        8            \n  Lines         879      884       +5   \n  Branches      233      234       +1   \n==========================================\n  Hits          830      830            \n- Misses         49       54       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/connect/index.js | 87.2% <16.66%> (-5.39%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1684819...06bbeae. Read the comment docs.\n. # Codecov Report\nMerging #902 into master will decrease coverage by 0.23%.\nThe diff coverage is 92.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #902      +/-\n==========================================\n- Coverage   93.87%   93.64%   -0.24%   \n==========================================\n  Files           8        8            \n  Lines         882      912      +30   \n  Branches      233      239       +6   \n==========================================\n+ Hits          828      854      +26   \n- Misses         54       58       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.79% <92.85%> (-0.49%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 821422e...cf7bcb1. Read the comment docs.\n. # Codecov Report\nMerging #902 into master will decrease coverage by 0.23%.\nThe diff coverage is 92.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #902      +/-\n==========================================\n- Coverage   93.87%   93.64%   -0.24%   \n==========================================\n  Files           8        8            \n  Lines         882      912      +30   \n  Branches      233      239       +6   \n==========================================\n+ Hits          828      854      +26   \n- Misses         54       58       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.79% <92.85%> (-0.49%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 821422e...cf7bcb1. Read the comment docs.\n. # Codecov Report\nMerging #902 into master will decrease coverage by 0.12%.\nThe diff coverage is 94.28%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #902      +/-\n==========================================\n- Coverage   93.87%   93.75%   -0.13%   \n==========================================\n  Files           8        8            \n  Lines         882      912      +30   \n  Branches      233      239       +6   \n==========================================\n+ Hits          828      855      +27   \n- Misses         54       57       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.95% <94.28%> (-0.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 821422e...357a4c1. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@9a39faa). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #903   +/-\n=========================================\n  Coverage          ?   93.87%         \n=========================================\n  Files             ?        8         \n  Lines             ?      882         \n  Branches          ?      233         \n=========================================\n  Hits              ?      828         \n  Misses            ?       54         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 97.28% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a39faa...ce407b6. Read the comment docs.\n. # Codecov Report\nMerging #913 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #913   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         912      912         \n  Branches      239      239         \n=======================================\n  Hits          855      855         \n  Misses         57       57\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0379bf5...29f3f63. Read the comment docs.\n. # Codecov Report\nMerging #914 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #914   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         912      912         \n  Branches      239      239         \n=======================================\n  Hits          855      855         \n  Misses         57       57\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c9dffe...3399c87. Read the comment docs.\n. # Codecov Report\nMerging #915 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #915   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         912      912         \n  Branches      239      239         \n=======================================\n  Hits          855      855         \n  Misses         57       57\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c9dffe...c7e8701. Read the comment docs.\n. # Codecov Report\nMerging #917 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #917   +/-\n=======================================\n  Coverage   93.75%   93.75%         \n=======================================\n  Files           8        8         \n  Lines         912      912         \n  Branches      239      239         \n=======================================\n  Hits          855      855         \n  Misses         57       57\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.95% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 034f855...ef8de6c. Read the comment docs.\n. # Codecov Report\nMerging #926 into master will decrease coverage by 0.17%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #926      +/-\n==========================================\n- Coverage   93.75%   93.57%   -0.18%   \n==========================================\n  Files           8        8            \n  Lines         912      919       +7   \n  Branches      239      240       +1   \n==========================================\n+ Hits          855      860       +5   \n- Misses         57       59       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/client.js | 96.68% <100%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 62641d6...1b58b73. Read the comment docs.\n. \n",
    "antoniobusrod": "Hi @mcollina if WS@2.x is not compatible, why tests are passing? \nhttps://travis-ci.org/mqttjs/MQTT.js/builds/201847951. ",
    "jeromevalentin": "@RangerMauve The qos doesn't change anything on that problem, I've got exactly the same behavior by changing it to 2!\n@mcollina Does that behavior is required in MQTT specifications? I agree considering the received information (in the packet) it is complicated to perform filtering, that's why I'm asking if it is not a mosquitto's issue. \nFrom my side I'm trying to track all topics on which I received a RETAIN message, and ignoring repetition... \n. ",
    "shanmohod": "@sublimator: still no success, I am not getting any events.. I guess their is some issue with how I'm connecting (mqtt.connect). Yes, different hostname I'm using here :) . I also tried connecting without providing mqtt version but then had a thought that it might be an issue.\nLet's wait.. someone may help. @mcollina Can you help?. @dmeznaric . ",
    "willshulstad": "I don't think that the error itself should cause a disconnect internally in the client.  The only time that handleMessage will return an error is if the specific implementation has error checking logic in the handleMessage method.  If we leave the disconnect logic up to the specific implementation, then the implementor can decide if a disconnect is necessary or not.  \nThe use case we have is that we are using the client to watch for messages on the broker and storing them to our DB using rest services.  If those rest services are down, we don't want to ack the message because our client is very lightweight and does not persist anything to disk internally.  We rely on the broker to own the message until we have successfully sent the message on to our rest services.  \nIn the case that the rest services are temporarily down, we would not disconnect the client from the broker, we would just wait for the broker to resend the message and hope that the rest services are up by then.  If however, we had a different issue (internal exception, multiple sequential failures, etc.) then we would decide to disconnect from the broker.. @mcollina \nThe problem with that interpretation is the client does not inherently handle persistence.  Since the application that is implementing handleMessage will be handling persistence, it should be allowed to decide on whether to accept ownership.  I don't think \"accepting ownership\" is simply about receiving, but about accepting responsibility for the message.\nThe way you describe \"accepting ownership\" actually sounds more like what is expected for QOS 0, rather than QOS 1:\n\nIn the QoS 0 delivery protocol, the Receiver Accepts ownership of the message when it receives the PUBLISH packet.\n\nAs it stands today, if the application has any issue persisting the message, the ACK will already have been sent and the broker will have removed the message.  At that point, the message will be lost forever.  That makes this client unusable for any application that requires message delivery integrity.. @RangerMauve I may be reading the code wrong, but it does not look like the message store is used for incoming messages with QOS 1.  The store seems to be used for outgoing messages (to handle the PUBACK from the broker) and QOS 2 (to handle the PUBREL from the broker).. ",
    "kerber": "I agree with Will that it would be great to be able to have the implementation control whether it takes responsibility for the received message. In the event of an error in my client, I'd rather trust a broker to keep the data safe than I would my own implementation of a data store. This would also mean that I would have to make sure my data store is performant and truly durable.. Correct me if I'm wrong, but it doesn't appear that the incomingStore handles recovery from any sort of failure, rather it is just responsible for keeping track for the QOS2 publish exchange. It doesn't actually help ensure that QOS1 or QOS2 messages are persisted once the client takes ownership and responsibility of the message. Further, there's no actual mechanism in this library to protect the messages it owns in the event of a server or application failure.\nIn any sort of serious application that I can think of, it would be preferable to have the implementation handle malformed packets, rather than just dumping data. Data integrity, I would think, is higher priority than handling bad messages, as the former is explicitly covered in the spec and the latter is an implementation detail.. ",
    "gerad": "@mcollina #556 . otherwise, the subscribe packet could be sent twice on the initial connect: once in the initial subscribe (prior to connack) and then subsequently during the connect event (since it was added to the _resubscribeTopics at initial subscribe time.. i tried really hard to get this into abstract_client.js but the websocket_client.js tests all failed for me locally\u2026 there may be a better way. That case is covered in the test I added already: https://github.com/mqttjs/MQTT.js/pull/556/files#diff-7e3bd8e7059a21bfd255649cbfc84b33R411\nDo you want it in a separate test as well?. Here's why they're failing locally.\n\n. Moved it to abstract_client.js in a7e9867. Let's see what Travis thinks.. Same error is happening on Travis. I guess that's a good thing.. Ok, I see the issue. Since the same server instance is shared across tests and not reinitialized with every test, state is leaking across tests.. I fixed the test state leakage issue in e9c78db. The fix is somewhat gross, but at least it's self contained.. Yeah. It doesn't work. \nFirst of all it has to be done twice since the client reconnects, and even if I code around that, the existing event listeners blow up when I sever the connection in the initial subscription. TBH, I'm a bit surprised the rest of the tests work as well as they do that way. . ",
    "woutrbe": "@jdiamond They're running in different processes, so they have their own MQTT instance, I can also see them in the rabbitmq interface, they both have their own queue.. That's fair enough and makes total sense. Just as feedback, I think the documentation on that could be improved a little bit, to me it was fairly confusing.\nSince I can't switch to AMQP (MQTT is fairly deep implemented, this is just a small part of it)\nI guess in my case I'll need to implemented duplicates myself somehow. Not sure how I can do that with different processes, but that shouldn't be part of this issue.. Actually every message has a unique id already, but if those subscribers receive it at the same time (or within a few seconds), there's no way of knowing if it's already been processed or not.\nSo one of my solutions was to use a persistent store to check if it's been processed recently.. Normally it shouldn't be a problem to switch this part to AMQP. I'll just have to have two clients open at the same time, but that's not an issue.\nLet me try that first actually, I don't really want to introduce another store.\nI'll close this issue for now, since it's not an issue with the library.. Just to update, I did switch that functionality to AMQP and it works great with no duplicates anymore.. ",
    "patrykwegrzyn": "Sorry for necro bumping but someone may find this useful.\nEMQ Broker has Shared Subscription Feature.\nCan be achchived as simple as subscribing to \"$queue/topic/#\nSample\n```javascript\nconst mqtt = require(\"mqtt\");\nconst dotenv = require(\"dotenv\");\nconst config = dotenv.config();\n//return\nif (config.error) {\n  throw config.error;\n}\nconst client1 = mqtt.connect(process.env.MQTT_BROKER);\nconst client2 = mqtt.connect(process.env.MQTT_BROKER);\nclient1.on(\"connect\", () => {\n  client1.subscribe([\"$queue/device/#\"], err => {\n    client1.on(\"message\", (topic, message) => {\n      message = JSON.stringify(JSON.parse(message.toString()), null, 2);\n      console.log(\"client1\", topic, message);\n    });\n  });\n});\nclient2.on(\"connect\", () => {\n  client2.subscribe([\"$queue/device/#\"], err => {\n    client2.on(\"message\", (topic, message) => {\n      message = JSON.stringify(JSON.parse(message.toString()), null, 2);\n      console.log(\"client2\", topic, message);\n    });\n  });\n});\n```\nResults\njson\nclient1 device/qdsa {\n  \"type\": \"temperature\",\n  \"value\": 2.03,\n  \"timestamp\": 1547992155,\n  \"battery\": \"88\",\n  \"messageId\": 16\n}\nclient1 device/P1sK {\n  \"type\": \"current\",\n  \"value\": 8.72,\n  \"timestamp\": 1547992155,\n  \"battery\": \"45\",\n  \"messageId\": 17\n}\nclient1 device/46C5 {\n  \"type\": \"open\",\n  \"value\": 0,\n  \"timestamp\": 1547992155,\n  \"battery\": \"66\",\n  \"messageId\": 18\n}\nclient2 device/qdsa {\n  \"type\": \"temperature\",\n  \"value\": 1.39,\n  \"timestamp\": 1547992156,\n  \"battery\": \"88\",\n  \"messageId\": 19\n}\nclient2 device/P1sK {\n  \"type\": \"current\",\n  \"value\": 14.42,\n  \"timestamp\": 1547992156,\n  \"battery\": \"45\",\n  \"messageId\": 20\n}\nclient2 device/46C5 {\n  \"type\": \"open\",\n  \"value\": 0,\n  \"timestamp\": 1547992156,\n  \"battery\": \"66\",\n  \"messageId\": 21\n}\n. ",
    "leesenlen": "Has been finished?  It's a good job @sclausen . I thought mcollina is right; You shoud define a strategy with object;\nWith this object, you can define retry_strategy with params such as  delay_time, max_attempts, delay_random_range etc...\nIt's would be a  strategy which support random delay or the other custom-supported-strategy;\nAnd also you can define actions of the object(like mcollina said); \nIt would be helpful to control the reconnection process;\nErr.. btw, it would be a lot of works\n. ",
    "uvshah": "Thanks for reply.\nI am just trying to do loadtesting from MQTT.js browserify client to Mosca server.\nI am setting \"browserBufferSize\" option in client side browserify MQTT.JS. (function Name - WebSocketStream);\n. ",
    "yetifortrees": "@mcollina So unfortunately the code is being used in a relatively large project and I can't get the error to trace back to anywhere in my code, so not currently. I can however try and write some smaller test scripts to replicate the issue, and let you know what I find.. ",
    "milanito": "I have a similar issue.\nIt was working about 4 days ago, and now it does not. Here is what happened on our side :\n\nIt goes offline\nIt loops on reconnect and close. @mcollina to be fully honest (not that I don't want to blame anyone else but us aha), I'm not 100% sure.\n\nI'm testing on different environment and having the version downgrade to see if it is the case :\n\nIn local, it does break\nOn circleci, it did break (yeah I know), it built a few minutes ago\n\nI'll let you know if I can find something more useful than this :/. @mcollina If I'm able to, of course. From what I have seen at the moment : \n\nwhen I use a RabbitMQ (version 3.6.6) with the MQTT plugin (targeting version 3.1.1) it does work, but there is an error saying :\n\nclose Error: premature close\n    at Socket.onclose (/Users/....../node_modules/end-of-stream/index.js:44:67)\n    at emitOne (events.js:101:20)\n    at Socket.emit (events.js:188:7)\n    at TCP._handle.close [as _onclose] (net.js:498:12)\n\nwhen I use mosca it does not work with the example in the README, but if I do :\n\nconst server = new mosca.Server({\n    host: 'localhost', // with this line\n    port: 1883,\n});\nit works.\nI did try to remove the host part and use either localhost or 127.0.0.1 for my client, it does not work.\nI also did try to modify the default host in mosca (defaultsModern in the lib/options.js) which is null, by default. It does work when I remove then the host part.\nSo I guess, basically on my end, it is more a question of mosca to make my life complete ( :p ), but I can maybe  head there to ask why the default host is null.. In my case, if I don't put the host in my options (in mosca) it does not work. I'll try to investigate this weekend what happening under the hood. ",
    "0x5e5e": "Having the same issue, it's driving me crazy - the same mqtt code works in one heroku instance I have but doesn't work in another instance that's exactly the same.    It connects to the MQTT server just fine, but then throws a 'offline' event, then instantly attempts to reconnect again.  \n```\nvar mqttClient = mqtt.connect('mqtt://SERVER_ENDPOINT');\n/* Emitted on successful connection /\nmqttClient.on('connect', function() {\n  console.log(\"[MQTT] Connected to MQTT server\");\n  mqttConnected = true;\n  mqttClient.subscribe('reply');\n});\n/* Emitted on connection error /\nmqttClient.on('error', function() {\n  console.log(\"[MQTT] MQTT Error\");\n  mqttConnected = false;\n});\n/* Emitted on connection offline status /\nmqttClient.on('offline', function() {\n  console.log(\"[MQTT] Connection offline\");\n  mqttConnected = false;\n});\n```\n. ",
    "marleau": "@RangerMauve Were you able to find a cause for this issue? I'm having a similar problem.. ",
    "franleplant": "Other easy solution is to add a postinstall hook that creates the build every time someone installs the package. Wow, apparently I'm blind, I need \ud83d\udc53 . I did found however this in the gitignore https://github.com/mqttjs/MQTT.js/blob/master/.gitignore#L10 which might have confused me.\nSo, two more things before closing\n- It'd be nice to have this stated in the docs instead of stating that the users need to manually build the browser package (I can help)\n- Im getting this error while using the dist/mqtt\nUnable to resolve module `./store` from `Users/flp/code/MyProject/node_modules/mqtt/dist/mqtt.js`\nThis is the way Im importing it\nconst mqtt = require('mqtt/dist/mqtt')\nThe mqtt dist are made with browserify and my project uses webpack and react native, there might be some incompatibilities with the module systems?\nThanks a lot for your help. So, after all, Im not using webpack, React Native uses it's own build system (analogue to Webpack and Browserify): Packager\nSome more relevant information about other's peoples problems: https://github.com/facebook/react-native/issues/1871\nPotential solution I've tested is ReactNativify but in the end it didn't work with mqtt lib.\nTLDR\nSince React-Native uses Packager, a lot of hybrid node.js packages that depend on node.js modules or their shims via browserify/webpack do not work on React Native.. hey @keyeh so after a lot of battling I ended up using https://github.com/rh389/react-native-paho-mqtt\nIt's rather immature and I've already had submit a patch but it's all that we got. Kudos to the author though, very responsive and nice to work with.\nI'd love to use mqtt.js but I didn't find a way to easily make it work with React Native Packager.\nAlso the lib needs to accept WebSocket and LocalStorage implementations as parameters, since the React Native environment is different from the Browser, so things such as localStorage don't exist. \nPaho let's you use whatever store that implements an interface as a replacement for LocalStorage.\nI hope this helps.\n. @RangerMauve let me know if there is something I can take a look, give you feedback, give you PRs, because Im right now working on an RN App that uses mqtt, so I can live test it. \n. Cool, Im going to investigate a bit next week, if I can make my self some time.\nThanks a lot for your participation!. Sorry for using this thread as a forum, feel free to kick me out but this info is interesting for mqtt and react native and the community and does not require any effort from the mqtt.js maintainers.\nSo, I tried to make mqtt.js work with React native and went through a bunch of hoops but I think I made some progress, Im stuck in a place right now which if I understand how to get out I will update this post with it, but perhaps someone can help me with this.\nThese are the steps that I took to get to the point where I am now.\n\n\n1 npm install mqtt\n\n\n2 Run this mqtt readme example somewhere in your app: https://github.com/mqttjs/MQTT.js#example\n\n\n3 Install native dependencies\n\n\nnpm install url events path buffer assert\n\n4 Shim native dependencies with browserify variants\n\nIn your package.json add these to your deps\n\"fs\": \"git://github.com/mafintosh/browserify-fs.git#06414a74bc0e1f3a92f1891ae27f5594692967b8\",\n\"os\": \"git://github.com/CoderPuppy/os-browserify.git#af8f17481c8097e679ea24700c6bf18d497ba3a1\",\nThese point to today's master's top of each repo, you can update the commit hash accordingly.\nThis step basically says to your dependency tree (i.e. mqtt.js dependencies) that when doing\nrequire('fs') use instead this require('browserify-fs'), it is pretty dirty but requires minimal effort\n\n5 Add Globals to your index.{ios,android}.js\n\nMake sure it looks something like this\n```javascript\nimport React from 'react';\nimport { AppRegistry } from 'react-native';\n// Define globally required stuff\nGLOBAL.Buffer = require('buffer').Buffer;\n// Some dependencies require process to be defined, so we comply with that\nGLOBAL.process = {\n  browser: true,\n  env: {\n    NODE_ENV: DEV ? 'development' : 'production',\n  }\n}\n// Make sure to use require instead of import syntax since the former\n// will respect the order of things\nconst App = require('./app');\nAppRegistry.registerComponent('MyApp', () => App);\n```\n\n6 Stuck\n\nGet stuck with this error:\nCannot read property 'prototype' of undefined\nWhich basically refers to this file\nnode_modules/websocket-stream/server.js\n```javascript\nvar inherits = require('inherits')\n// Server is undefined, and that is the problem\nvar WebSocketServer = require('ws').Server\nvar stream = require('./stream')\nmodule.exports = Server\nfunction Server(opts, cb) {\n  if (!(this instanceof Server)) {\n    return new Server(opts, cb)\n  }\nWebSocketServer.call(this, opts)\nvar proxied = false\n  this.on('newListener', function(event) {\n    if (!proxied && event === 'stream') {\n      proxied = true\n      this.on('connection', function(conn) {\n        this.emit('stream', stream(conn, opts))\n      })\n    }\n  })\nif (cb) {\n    this.on('stream', cb)\n  }\n}\n// In here, inherits tries to access WebSocketServer.prototype to\n// do the inheritance but WebSocketServer is undefined\ninherits(Server, WebSocketServer)\n```\nIm going to try to keep bashing at this, but if anyone has some insights they will be highly appreciated. \n@RangerMauve probably this could be a very simple approach for resolving the mqtt.js in React Native problem. OSX\nThe file looks pretty unconditional to the operative system or anything for that matter. 100% sure because Im not doing anything magical, Im just following the stack trace. The first item is the inherits function def, and then it's that pointed file.\n\nMake sure you follow my steps to see in you can replicate this problem. The problem with the stream might have been solved by steps 3 or 5.. ```\nmqtt@^2.5.0:\n  resolved \"https://registry.yarnpkg.com/mqtt/-/mqtt-2.5.0.tgz#399078217ea361ae923d8de407c981ab8290968e\"\nwebsocket-stream@^3.3.3:\n  resolved \"https://registry.yarnpkg.com/websocket-stream/-/websocket-stream-3.3.3.tgz#361da5404a337e60cfbc29b4a46368762679df0b\"\n```\nGreped from my yarn lock\nThat's weird, Im going to try to update my react native cli\nAlso, I think I saw that one of the problems with packager is that it doesnt recursively apply the \"browser\" field resolve, I need to find the issue where they disscuss about it though\n. My react native version is the latest:\nreact-native --version\nreact-native-cli: 2.0.1\nreact-native: 0.42.2\nI would recommend to follow my steps to see where you get to. good work @alexleonescalera, just to double check, by adding this \"./mqtt.js\": \"./lib/connect/index.js\" to the React Native app package.json you can use mqtt.js without further problems?. ",
    "keyeh": "@franleplant In the end what was your solution for MQTT on React Native?. ",
    "alexleonescalera": "I've been dealing with the \"property of undefined\" issue for the last week.\nMy findings on this is that it is a problem with React Native's packager not using correctly the browser field in package.json.\nThis only happens when you are trying to override the main file in your package.json. To give an example:\n\"main\": \"mqtt.js\",\n\"browser\": {\n  \"./mqtt.js\": \"./lib/connect/index.js\"\n}\nworks fine with webpack, but with React Native, mqtt.js is not overriden correctly by lib/connect/index.js.\nI made a test where you would create an extra hop to avoid using the main file in the browser field. That would be:\nindex.js\nmodule.exports = require('./mqtt');\npackage.json\n\"main\": \"index.js\",\n\"browser\": {\n  \"./mqtt.js\": \"./lib/connect/index.js\"\n}\nThis worked for me, but it is just a hack. The real problem seems to be the packager on React Native is not correctly replacing mqtt.js for client since it is also the package.json's main file.. I don't think so. The mapping from mqtt.js to lib/connect/index.js happens in the MQTT.js project's package.json, not in your React Native's package.json (unless I understood incorrectly your question).\nSome additional info:\nFrom playing around with MQTT.js and websocket-stream inside the node_modules folder in my React Native project, it seems that the react-native field inside package.json is automatically generated somehow. Still, the issue comes in.\nI'm currently trying to come up with shareable code, since my findings are based on proprietary code. I'll open an issue on React Native project once I have this.\nJust for insight, here is how my MQTT node_modules/mqtt/package.json file looks like inside my React Native project.\npackage.json.txt\nRefer to lines 57 (browser), 135 (main) and 167 (react-native).\n. FYI: opened an issue on React Native:\nhttps://github.com/facebook/react-native/issues/13474. ",
    "nofarius": "Managed to get this project running in React Native, though I needed to fork and do some minor changes.\nThe fork is available with instructions on getting it up and running via github and npmjs\nAs mentioned in the readme, this works for TCP connections but not WebSockets, that's still a work in progress.\nif anyone has an alternative (read: easier) way to get it working in React Native please let me know. Simply using the browserify build caused the react native packager to choke for me, and none of the above approaches completely worked.\nNote: I have tested this using RN 0.47.1. ",
    "cltsang": "Hello @nofarius \nI just tried using your fork. No luck connecting to a broker yet. However, when the app is run with debugger attached, it throws\nException has occurred: TypeError\nTypeError: process.send is not a function\n    at postMessage (/Users/cltsang/Documents/IotApp/.vscode/.react/debuggerWorker.js:40:13)\n    at sendReply (/Users/cltsang/Documents/IotApp/.vscode/.react/debuggerWorker.js:107:7)\n    at executeApplicationScript (/Users/cltsang/Documents/IotApp/.vscode/.react/debuggerWorker.js:92:7)\n    at /Users/cltsang/Documents/IotApp/.vscode/.react/debuggerWorker.js:113:7\n    at process.<anonymous> (/Users/cltsang/Documents/IotApp/.vscode/.react/debuggerWorker.js:35:9)\n    at emitTwo (events.js:125:13)\n    at process.emit (events.js:213:7)\n    at emit (internal/child_process.js:774:12)\n    at _combinedTickCallback (internal/process/next_tick.js:141:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\nIs it just my setup? Or is it that using rn-mqtt means losing the ability to debug? If it's related, I'm using the RN 0.49.3. ",
    "PCaponetti": "@nofarius @mcollina : did this ever get any further?  I'm stuck using paho on react native right now and would obviously love to transition to MQTT.js. ",
    "irfanka": "@mcollina Hi.\nHow exactly did you get it to work?\n. ",
    "jalalazimi": "@RangerMauve I'm currently attempting to take advantage of MQTT in a react native project, I follow your steps, but receiving the following error on core-util-is.\nBuffer is not defined on util.js\nDid you experience the same problem?. ",
    "rclai": "So I did everything that @RangerMauve did plus add the url module as well and I also installed version 1.14.1 as well, but I'm getting this error:\nbundling failed: UnableToResolveError: Unable to resolve module `events` from\n`/Users/richardlai/Profab/Spark/node_modules/mqtt/lib/client.js`:\nModule does not exist in the module map\nEDIT also had to install the following modules:\nurl\nevents\nutil\nAlso make sure you're doing:\nimport { Buffer } from 'buffer'\ninstead of\nimport Buffer from 'buffer'\nbefore you globalize it. I'm now getting this error when I try to use it like this:\nvar client  = mqtt.connect({\n  servers: [{ host: 'localhost', port: 1883 }],\n  username: 'blah',\n  password: 'pw',\n})\nError:\nCould not determine host. Specify host manually.. Good point, don't know why I didn't realize that. I switched over to passing the URL in the first argument.\nThere's a part of the mqtt code that's trying to parse the websocket URL that breaks:\nfunction buildBuilderBrowser (mqttClient, opts) {\n  var url, parsed;\n  if ('undefined' !== typeof (document)) { // for Web Workers! P.S: typeof(document) !== undefined may be becoming the faster one these days.\n    parsed = _URL.parse(document.URL);\n  } else {\n    throw new Error('Could not determine host. Specify host manually.');\n  }\n // ...\n}\nDid you have to polyfill the document object somehow?\nEDIT: Oddly enough I did this:\nglobal.document = {\n  URL: 'http://localhost:1884',\n}\nAnd it worked, but why does it need document.URL for? Isn't it supposed to use the URL that I passed to it?. Yeah, but I am passing it as a string now and it still needs that weird global.document polyfill I did.. ",
    "demian85": "Any news on this? I'd love to have detailed info on how to integrate with React Native. Maybe we can add instructions in the readme?\nThanks.. ",
    "tomzaku": "\n\nimport {Buffer} from \"buffer\"; global.Buffer = Buffer;\n@RangerMauve \nWhere should I put this line to make sure imported before anything else.\nI try to put index.js(root), but it's not work. \nThere only way i found is put to 'node_modules/core-util-is/lib/util' but it's not recommend way\n. \n\n",
    "angelos3lex": "@RangerMauve Can we use this solution (or other) to use mqtt://rabbitmqBroker to send messages to RabbitMQ broker, through react-native app? Or it only works with use of websockets(ws://rabbitmqBroker)? . ",
    "qdsang": "install\n```\nnpm install react-native-tcp --save\nreact-native link react-native-tcp\nnpm i stream-browserify stream -g\nnpm install buffer\nnpm install url events path buffer assert\nnpm install mqtt --save\n```\nedit node_modules/mqtt/package.json\n\"browser\": {\n    \"./mqtt.js\": \"./lib/connect/index.js\",\n    \"fs\": false,\n    \"tls\": false,\n    \"net\": \"react-native-tcp\"\n  },\napp.js\n```\nglobal.Buffer = global.Buffer || require('buffer').Buffer;\nglobal.process.version = '';\nvar mqtt = require('mqtt')\nvar client  = mqtt.connect('mqtt://test.mosquitto.org')\nclient.on('connect', function () {\n  client.subscribe('presence', function (err) {\n    if (!err) {\n      client.publish('presence', 'Hello mqtt')\n    }\n  })\n})\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  console.log(message.toString())\n  client.end()\n})\n```. ",
    "micbuh": "@mcollina , thanks for your quick response. I would be glad to see this issue tagged as feature request.\nSo far I am runningMosquitto. I had a quick look at aedes. Looks quite promising and I will definitely give it a try. Although, authorization is mandatory for my current project.. @mcollina , I saw that _writev was implemented, meanwhile. Thanks a lot for that! I browserified a fresh copy MQTT.js and gave it another try (against mosquitto). Unfortunately, I couldn't see any performance increase. Somewhere in the code I saw, that objectMode should be turned off. So, I tried that as well. \nBasically, I am currently not sure, what to expect and if all necessary chances are done. I would appreciate some explaining words. . ",
    "lpinca": "Sorry for jumping in the discussion but you can greatly improve performance by disabling permessage-deflate. It basically kills ws performance and uses a huge amount of memory.\nIf I'm not wrong you can forward configuration options to websocket-stream and then in turn to ws.. @micbuh using https://github.com/websockets/bufferutil also helps a lot.. @micbuh did you try disabling permessage-deflate?\njs\nconst options = {\n  wsOptions: { perMessageDeflate: false },\n  ...\n}. ",
    "ranma42": "@mcollina in my environment the _writev change reduced the fragments quite a lot (before I was seeing one fragment per packet field), but the packets are apparently still sent as 2 fragments, one for the first byte and the other one for the remaining data.\nI believe this might be caused by a bad interaction with duplexify, which does not know about _writev and upon uncorking does a _write.\nEDIT: right now, the most convenient way I found to send just one fragment per packet is\ndiff\n-var result = mqttPacket.writeToStream(packet, client.stream)\n+var result = client.stream.write(mqttPacket.generate(packet))\nin sendPacket.. I am sniffing the network traffic with Wireshark. I can provide you with a pcap dump of the session if that is useful.. ",
    "vanesp": "Thanks @RangerMauve... my mistake...\nIt's all working correctly now. Sorry for wasting your time.. ",
    "sowmyasoora": "@mcollina Thanks for reply.\nI am trying to connect mqtt broker using user credentials once i logged into my app. Once after user session expired i am using mqttClient.end() to disconnect mqtt client. But still mqtt client is trying to reconnect. As user credentials are invalid by that time it never connects to broker. I wanted to stop reconnect once i force closed my mqtt connection. Please help me out how can i achieve this?\nIs there any way i can set an option for retry count?. Hi @mcollina , .end() is working fine. No worries. Its my mistake.  Thanks for your quick response.\nI have another issue. When i am trying to connect to my MQTT broker if my server have more cookies (cookies size is around 950 bytes), not able to establish web socket connection with error \"failed: Connection closed before receiving a handshake response\". If cookies are less every thing was proper and working fine. Do you have any idea?. ",
    "boneskull": "\nafter you call .end(), it should not try to reconnect. I fear it's a bug, would you mind uploading an example so we can replicate?\n\nI'm experiencing something like this; I'll try to isolate a reproducible case.. so here:\njs\nthis.on('close', this._setupReconnect);\nCalling MqttClient#end() will eventually result in the end of the client's stream, so when that happens, this listener fires:\njs\neos(this.stream, this.emit.bind(this, 'close'))\n...which invokes _setupReconnect, which reconnects again.... Anyhow, I mentioned in #690 that a finite state machine might be in order to sort this out, because we have too many booleans flying around in here.. OK, after some digging, it's actually a problem in async-mqtt.  It seems that the promisifcation of end() can cause race conditions.  still working on an MCVE. @RangerMauve I don't believe it's something a wrapper can work around.. generally I'd be in agreement, but I think we should reconsider this.\nthe last build of master passed, yet between then and now--without touching the code at all--something has broken to cause tests to fail.  \none failure I found when running npm test in my working copy prompted PR #689.  this PR also exhibits the second test failure, which I'm still trying to sort out.\nthe failing tests are adding significant friction to contributors, because we can't move forward until they're all fixed.  package-lock could mitigate this, but it also could result in false positives if the test failures are due to production deps and not just dev deps.\nmaybe someone has written an npm bisect-type tool--I'd love to be able to go back in time and recreate the node_modules structure of the last passing build!. @mcollina sorry, I should have been more clear, I'm writing in reference to #662.. I am seeing failures in the \"queue offline messages\" check with or without this change in Node.js v8.5.0:\n1) MqttClient offline messages should queue message until connected:\n     Uncaught TypeError: Cannot convert undefined or null to object\n      at Function.keys (<anonymous>)\n      at Store.createStream (lib/store.js:9:1228)\n      at MqttClient.<anonymous> (lib/client.js:9:5378)\n      at MqttClient._handleConnack (lib/client.js:9:33562)\n      at MqttClient._handlePacket (lib/client.js:9:13729)\n      at process (lib/client.js:9:11215)\n      at Writable.writable._write (lib/client.js:9:11676)\n      at doWrite (node_modules/readable-stream/lib/_stream_writable.js:406:64)\n      at writeOrBuffer (node_modules/readable-stream/lib/_stream_writable.js:395:5)\n      at Writable.write (node_modules/readable-stream/lib/_stream_writable.js:322:11)\n      at Socket.ondata (_stream_readable.js:642:20)\n      at addChunk (_stream_readable.js:266:12)\n      at readableAddChunk (_stream_readable.js:253:11)\n      at Socket.Readable.push (_stream_readable.js:211:10)\n      at TCP.onread (net.js:585:20). I\u2019m not sure. they fail for me after a fresh clone & pull on 8.5.0. @mcollina \nplease see the updated description.\n. it\u2019s directly responsible for the failures. yet I\u2019m no expert on this, I can only read the docs and come to the conclusion that destroy is only necessary if we have an error. don\u2019t believe so; I\u2019m experiencing a lot of random flake running the tests. . I think a proper finite state machine might be a good idea.. I'm gonna withdraw this then. @RangerMauve I'm suspicious about whether or not connect() necessarily waits a tick before emitting connect.. > connect is emitted when we get the MQTT packet for connack, since it requires a network trip it'll be guaranteed to be async.\nthat's what I'd assume, but maybe my debugger is messed up.... yeah I think this is my misuse of pify. pify does not mutate . the root problem was auto-reconnection, but I think that's because of naive promisification on my part.  \n(also there's the case where disconnecting is never set to false once it's been true--likely another issue entirely with as-of-yet unknown consequences). I looked at this and can identify several problems:\n\nThe reconnect timer is either really sticky or just needs an unref(); the interval will keep the process open. (I'm still not convinced the reconnect timer is working as intended, but that's a separate issue)\nThe ping timer suffers from the same problem\nMany tests don't call client.end(), and if they do, they don't necessarily wait for it to finish\nThe test server(s) themselves stay open\n\nYou can test this by grabbing wtfnode and executing wtfnode node_modules/.bin/_mocha from a MQTT.js working copy.  When the process hangs, hit Ctrl-C to dump the async tasks.\nI poked at this for about an hour, but IMO you're better off sticking --exit in mocha.opts unless you love pain.. FWIW, calling close() on a net.Server instance doesn't disconnect any clients, which I didn't realize... . not to toot my :trumpet:, but if I'm finding it difficult & tedious to clean up, I don't suppose it'll be a breeze for anyone else :wink:. I would also recommend pulling in https://npm.im/stoppable and wrapping the net.Server instances with it. ",
    "jungkumseok": "Hi guys, first of all thanks for this awesome library :)\nI'm not sure if this is a \"bug\" or is expected behaviour, but I observed the same effect while using the lib in an object-oriented way. I believe the effect is indeed caused by a race condition between the mqtt.connect() and client.end() calls. See example below:\n```\nvar mqtt = require('mqtt');\nfunction Pubsub(){\n    this.client = mqtt.connect('mqtt://localhost');\n    this.client.on('connect', function(ack){\n        console.log('Connected!');\n    });\n}\nPubsub.prototype.end = function(){\n    this.client.end(function(){\n        console.log('Ended!');\n    });\n}\nvar pubsub = new Pubsub();\npubsub.end();\n```\nRunning this example, almost all the time (100/100 times in my quick test) the pubsub.end() call will be processed before mqtt.connect() is \"complete\" since mqtt.connect() is asynchronous.\nAlthough this may be the intended behaviour, would it be reasonable to assume that once the user has called client.end() on the mqtt.Client instance, she no longer wishes to reconnect? Implementation-wise handling this would be as trivial as setting a flag to indicate that the Client instance should permanently ignore .reconnect() calls.\nBut then again, the user could actually want to reconnect by explicitly calling .reconnect() after some other concurrent .end() call, and there would be no way for the Client instance to tell which call should be served first. Perhaps a function like client.destroy() that permanently \"disables\" the Client instance might be useful?\nIn certain unconventional use-cases, Client instances are created temporarily and thrown away afterwards. When trying to throw away these objects, a user would do something like .end() and then de-reference the Client object from an array or a dictionary to make it available for the GC. After the Client instance is de-referenced and is no longer required by the application, the .reconnect() may be called and keep a socket opened, leading to a memory leak.. ",
    "maecky": "Thank you for your answer.\nI uploaded a \"working\" example here: https://github.com/maecky/electron-react-redux-mqtt\nIf you run it with: npm run dev everything is working fine.\nBut if you build it: npm run package-win the described error shows up. I modified the electron app in such way, that you can see the debugger in a production build.\n. ",
    "datnordstrom": "This is still an issue when trying to install from https://github.com/aws/aws-iot-device-sdk-js. ",
    "andy-ms": "Hi, despite #582 having been merged, the types folder still doesn't show up in NPM package. This is blocking DefinitelyTyped/DefinitelyTyped#15560.. ",
    "asCii88": "It works. Should replace the broker from the example.\nAlso, I had to specify { protocolId: 'MQIsdp', protocolVersion: 3} to connect to mosquitto version 1.0.4-0ppa1. ",
    "CVarisco": "Browser: Google Chrome 57.0.2987.133\nI don't change anything on my code.\nWhat can I do to help you with ?. If you want, I can send you this.\nhttps://gist.github.com/CVarisco/60f10ef15cd1523fbf627f467d962b0d\n. I'm texting you on Gitter to explain the issue.\nI can't send the full application, because is too large.\nIf you can, answer me on Gitter.\nThanks a lot . @RangerMauve of course!\nhttps://gist.github.com/CVarisco/87cc9f91ea3cbd92ad276f3fb83eb4ef\nIt's a little confused, sorry . ",
    "rahulbhanushali": "I have attached a property to the error object and created a PR.. ",
    "clementAC": "It works like a charm! \nThe only problem I faced is when I precise my port 8083 ( wich is the default one) it's not working.\nvar client = mqtt.connect(\"mqtts://url:8083\"); //doesn't work\nvar client = mqtt.connect(\"mqtts://url\");   // work\nIt's not a real problem just an information for next people with same issue.\nThank you @RangerMauve . You are right. My configuration was correct I was just misthinking and mixing ports. This debug afternoun liquified my brain =S.. Same problem here and the shebang loader doesn't seem to work on my side.. ",
    "ozomer": "Well, I just thought it would be nice to have a state-machine diagram by the developers themselves.. ",
    "FrankAdesys": "Hi, sorry for that (first time I contribute to a project this way), included a test, hope this is the right way to go.. ",
    "Irfanbsse2060": "I think no .because client is not connected. \n\nas you can see in pic, connected is false. am i correctly giving the path in connect method ?. it works well in same host. bt why its not working on the other computer?   i have tried on nodemcu. it works well. do  i need to forward port? . window 8  and node version v6.9.4. Thanks mcollina. . ",
    "btsimonh": "Although true, shouldn't mqtt.js be more graceful about it?\nOr should we have a timeout mechanism around the close; at the moment, because \njs\nclient.once('close', function() {\n  done();\n});\nnever calls done(), it breaks NR.\nYour advice is appreciated :)\nIf someone does end up with QOS 2 set, are other 'bad things' going on under the hood which could be a long term issue (e.g. growing outgoing queue)?. I'll see what I can do; no promises :).. no return msg is received, so the client just has a bunch in it's queue.  I can't see any message timeout code in mqtt, am I just missing it?  I'm not familiar enough with the MQTT std to know if a timeout on messages on a connected connection is appropriate.... ",
    "davweiss": "I have resolved it with chaning the \"sendPacket\" method in \"mqtt/lib/client.js\" to\njs\nfunction sendPacket (client, packet, cb) {\n  client.emit('packetsend', packet)\n  var result = false\n  try {\n    var buf = mqttPacket.generate(packet)\n    result = client.stream.write(buf)\n  } catch (err){\n    client.emit('error', err)\n    result = false\n  }\n  if (!result && cb) {\n    client.stream.once('drain', cb)\n  } else if (cb) {\n    cb()\n  }\n}\n. ",
    "jonmanzo": "@davweiss - You're my hero - also killed 3 days on this.\nBasic info incase anyone with my specifics is searching.\nAWS IOT Message Broker  - MQTT over WebSocket/TLS with SigV4 authentication using port 443\nAWS IOT using updated -ast endpoints\nVersions:\nNode 10.2.1\nmqtt v2.18.8\nforced bumps to:\nwebsocket-stream 5.1.2\nduplexify 3.6.1\nreadable-stream 3.0.6\n. ",
    "eiabea": "No, because i checked the code in mqtt_ascoltatore and found out, that ascoltatori does pass all the options directly to mqtt. it is indeed very hard to debug in an automated test. I can not really think of a good solution to start a tls enabled broker with a valid chain and domain in an unit test :(\nMaybe we could do some kind of live debugging with our companies broker and a small script connecting to it and i kill the broker right after the script connects manually?\nI know it is a strange solution, but i couldn't find a better approach\n. i will try to write a unit test for it, or at least debug it and report back. I am currently trying to debug this issue and found out that it is not necessary to stop the mqtt broker, i even get the same stacktrace when i try to connect without a broker available on the domain. When i set the rejectUnauthorized flag to false the client waits for a connection.\nI guess this has something to do with the TLS handshake?. @mcollina sure, but this was just a \"proof of concept\"-PR, just to check if it is a good idea to check for \"ECONNREFUSED\" explicit. it would be the cleaner approach i think, but i never managed to get one, so i wrote it this way.\ni also tried to write a test for it, but failed due to the fact that i can not kill the mocked secure server during a test. ",
    "alorle": "@mcollina , any update on this issue??. ",
    "masterclock": "```js\nvar mqtt = require('mqtt')\nvar client  = mqtt.connect('mqtt://test.mosquitto.org')\nclient.on('connect', function () {\n  console.log('connect')\n  client.subscribe('presence', {}) // passing a empty options object\n  client.publish('presence', 'Hello mqtt')\n})\nclient.on('message', function (topic, message) {\n  // message is Buffer\n  console.log(message.toString())\n  client.end()\n})\nclient.on('offline', function () {\n  console.log('offline')\n})\n``\nbut running the above modified example code doesn't pass as expected, mqtt keeps connect and disconnect loop. callingclient.subscribe('presence')works as expected, I've noticed [this line](https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L439) too, and makes me thought thatqosis not optional.\nnote:opts` itself is optional. ",
    "Shinjifei": "I am positive this was introduced with the automatic resubscribe feature.  If the auto resubscribe is to be left in, yes the queue needs to remove dups or never have dups added.  \nWe honestly didnt need the functionality at all in the way we wire up our client.  We set our subscriptions onConnect.  When a client gets disconnected by default it tries to reconnect every 1000ms. When it connects a event is triggered and we subscribe there.  To alleviate this issue we are clearing out this variable onConnect after we client.AddSubscription: this.client._resubscribeTopics = {}; \nSo on initial connect and on every connected after a successfull reconnect _resubscribeTopics are cleared.  So the topics are never added to the queue when the client tries to reconnect every 1000ms . @mcollina above commit fixes the problem.\nWe would love to see a option to turn this feature off altogether though.\nThanks for the quick fix.. Looks promising, will try to test this weekend. Thanks.. Got to it quicker that I thought.  \nLooks good, no duplicate subscriptions.  Speaking with my team we would love to have an option to turn of the resubscribe feature altogether.  I'll add a feature request.\nThanks for the quick fix.. ",
    "acollazomayer": "Nevermind. I Find a way.. ",
    "vairabagni": "```javascript\n/ eslint-disable no-console /\nimport { connect } from 'mqtt';\nfunction invert(obj) {\n  const keys = Object.keys(obj);\n  const newObj = {};\nkeys.forEach((key) => {\n    newObj[obj[key]] = key;\n  });\nreturn newObj;\n}\nclass MQTTRedux {\n  constructor(config) {\n    this.config = config;\n    this.topicActionMap = {};\n    this.isConnected = false;\n  }\nsetServerUrl(url) {\n    this.config.url = url;\n  }\nsetCredential(username, password) {\n    this.config.opt.username = username;\n    this.config.opt.password = password;\n  }\nconnect(actions, store) {\n    // const actionNames = Object.keys(actions);\n    // this.topicActionMap = invert(actions);\n    // console.log('topicActionMap', this.topicActionMap);\n    this.isConnected = true;\n    this.mqtt = connect(this.config.url, this.config.opt);\n    this.mqtt.on('connect', () => {\n      store.dispatch({\n        type: 'MQTT_CONNECT',\n        message: 'Connected to MQTT broker',\n      });\n      console.log('[MQTT] connected');\n      if(actions) {\n        this.subscribe(actions);\n      }\n      // actionNames.forEach((action) => {\n      //   this.mqtt.subscribe(actions[action], { qos: 0 });\n      // });\n    });\nthis.mqtt.on('disconnect', () => {\n  this.isConnected = false;\n  store.dispatch({\n    type: 'MQTT_DISCONNECT',\n    message: 'Disconnected from MQTT broker',\n  });\n  console.log('[MQTT] disconnected');\n});\n\nthis.mqtt.on('message', (topic, payload) => {\n  if (this.topicActionMap[topic]) {\n    store.dispatch({\n      type: this.topicActionMap[topic],\n      payload,\n      topic,\n    });\n    //console.log('[MQTT] message received');\n  }\n});\n\nthis.mqtt.on('error', (err) => {\n  store.dispatch({\n    type: 'MQTT_ERROR',\n    error: err,\n  });\n  console.log('[MQTT] error');\n});\n\n}\ndisconnect(store) {\n    this.mqtt.end(true); // Force disconnect\n    this.isConnected = false;\n    store.dispatch({\n      type: 'MQTT_DISCONNECT',\n      message: 'Disconnected from MQTT broker',\n    });\n    console.log('[MQTT] disconnected');\n  }\nsubscribe(actionMap) {\n    const actionNames = Object.keys(actionMap);\n    actionNames.forEach((action) => {\n      this.mqtt.subscribe(actionMap[action], { qos: 0 }, function(err, granted) {\n        console.log(\"Subscribed: \", err, granted);\n      });\n      this.topicActionMap[actionMap[action]] = action;\n    });\n  }\nunsubscribe(actions) {\n    const actionMap = invert(this.topicActionMap);\nif (Array.isArray(actions)) {\n  let topic;\n  actions.forEach((action) => {\n    topic = actionMap[action];\n    this.mqtt.unsubscribe(topic);\n    delete this.topicActionMap[topic];\n  });\n} else {\n  this.mqtt.unsubscribe(actionMap[actions]);\n  delete this.topicActionMap[actionMap[actions]];\n}\n\n}\ncreateMiddleware() {\n    const mqttClient = this.mqtt;\n    return (store) => (next) => (action) => {\n      if (action.mqtt) {\n        const mqtt = action.mqtt;\n        let payload;\n    if (mqtt.topic && typeof mqtt.payload !== 'function') {\n      payload = typeof mqtt.payload === 'string'\n          ? mqtt.payload\n          : JSON.stringify(mqtt.payload);\n    } else if (mqtt.topic && typeof mqtt.payload === 'function') {\n      payload = mqtt.payload.call(null, store.getState());\n    }\n    mqttClient.publish(mqtt.topic, payload, { qos: 0 });\n    const modifiedAction = {\n      ...action,\n      mqtt: {\n        payload,\n        topic: mqtt.topic,\n      },\n    };\n    return next(modifiedAction);\n  }\n  return next(action);\n};\n\n}\n}\nexport function createClient(config) {\n  return new MQTTRedux(config);\n}\n```\nAnd from code I call subscribe as below:\nsubscribe({\n'LOG_RECEIVED': 'log/#'\n}). javascript\n// MQTT Client Config\nconst mqttConfig = {\n  url: 'mqtt://localhost:8008/',\n  opt: {\n    clientId: `webclient-${Date.now()}`,\n    username: '',\n    password: '',\n  },\n};\nconst mqttRedux = createClient(mqttConfig);\nmqttBroker.connect(null, this.context.store);. Thanks a lot. This really unblocked me. Thank you very much.. ",
    "mvayngrib": "i'm experiencing a similar issue with aws-iot-device-sdk (which uses this mqtt client underneath). When authentication fails, there's no feedback to my code other than the 'close' event.. @mcollina I see the library explicitly suppresses errors from the websocket stream: https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L262 Before any PRs, it would be good to know the reason for that decision, because this is one of those purposely suppressed errors. @mcollina you're right. And it seems it's aws-iot-device-sdk that's ignoring the error re-emitted on 'close', at least Node-side. Will check browser-side. @mcollina i've updated the PR with a unit test \nhowever, i noticed that other functionality relies on _handlePacket being called while disconnecting is true, e.g. this test: \"should delay ending up until all inflight messages are delivered\"\nthe original reason for this fix is that i was getting a puback when outgoingStore was already set to null. How would you prefer to handle this?. haha, i'm sure i'm more lost. Basically, in some edge cases, outgoingStore is null and outgoingStore.del errors. @mcollina not actually sure what causes it, but i'll look out for a repro. Just fyi, i'm using mqtt@1.11.2 by way of aws-iot-device-sdk. ",
    "pierreclr": "Thank you @RangerMauve for your answers. I will certainly choose a lighter implementation to achieve my goal ! Maybe starting with this library https://github.com/eclipse/paho.mqtt.javascript/blob/master/src/mqttws31.js. ",
    "VeeTeeDev": "@pierreclr \nDid you make any progress on this matter ?. ",
    "MartinMuzatko": "@mcollina this is not a satisfying answer. Why is mqtt turning it into a ws:// address, when it is mqtt? Why does it matter which protocol I use, when it is always transformed?. Thanks for the reply!\nSo if my broker runs over mqtt:// I can't access it from the browser?. I'm using mqttbox (chrome extension: https://chrome.google.com/webstore/detail/mqttbox/kaajoficamnjijhkeomgfljpicifbkaf) to test my connection. Here I have configured mqtt:// and I can successfully publish and and subscribe.\nI tried to debug the app to find out how they convert the mqtt protocol to ws with no success.\n. Looks like they are sending the publish to a service worker. Do they support mqtt://?. Ok, thank you a lot for clarifying this @jdiamond  :)\nMy broker supports that. Hence this solution works:\n```js\nimport * as io from 'socket.io-client';\nconst client = io('http://localhost:5000');\nclient.on('connect', ()=>{\n    client.emit('subscribe', {topic: 'OT'});\n})\nclient.on('mqtt', (event)=>{\n    // event.topic\n    // event.message\n})\n```\nIs there a way to workaround this problem without using socketio directly? I'd loved to use mqtt on client and serverside.\nUnfortunately, using the mqttjs package on the client does not work. Or is there a special setting to \"tunnel\" mqtt through ws?. You should add this to the documentation @mcollina.. Oh! it looks like it already exists. \nhttps://github.com/mqttjs/MQTT.js#mqttclientendforce-cb\nMy bad! I didn't find it in the first place.\nEverything should be alright.. ",
    "dyang08": "@jdiamond Can you provide a sample of how you're subscribing using only MQTT.js? I'm having the same issue as @MartinMuzatko where MQTT.js automatically resolves mqtt://test.mosquitto.org to ws://test.mosquitto.org on a node app running on a browser.. Thanks for the explanation. I was going about it incorrectly and subscribing via the clients rather than the server. MQTT.js works perfectly on the server.. ",
    "gogogous88": "following is the right code to show in my browser ( but if you choose to use mqtt nodeJS API in server, no need...)\n```js\n// Connect to the MQTT Broker over WebSockets\n// The port here is the \"http\" port we specified on the MQTT Broker\nvar client = mqtt.connect(\"wss://test.mosquitto.org:8081\");\n// Message recieved\nsetTimeout(() => {\n  client.publish(\"TopicToSubscribe\", \"Hello world!\");\n}, 1000);\nclient.on(\"message\", (topic, payload) => {\n  // Log message\n  console.log(topic);\n  console.log(payload);\n  // Close the connection\n  client.end();\n});\nclient.on(\"connect\",  () => {\n  client.subscribe(\"TopicToSubscribe\");\n  console.log(\"Connected to MQTT Broker.\");\n});\n```. ",
    "1215708470": "\n\u6839\u636ehttps://test.mosquitto.org/\uff0c\u7528\u4e8ewebsockets\u7684mosquitto\u6d4b\u8bd5\u670d\u52a1\u5668\u4f4d\u4e8e\u7aef\u53e38080\u4e0a\u3002\n\n\n\u540c\u6837\u7684\u95ee\u9898\uff0c\u8bf7\u95ee\uff0c\u4f60\u4eec\u662f\u600e\u4e48\u89e3\u51b3\u7684\nWebSocket connection to 'ws://test.ai.babateng.cn:1883/' failed: Connection closed before receiving a handshake response. \u6211\u4e5f\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898\uff0c\u6c42\u5e2e\u5fd9\u770b\u770b\u662f\u4ec0\u4e48\u95ee\u9898\uff0c\u95ee\u9898\u51fa\u73b0\u5728\u54ea\u91cc\uff0cfailed: Connection closed before receiving a handshake response\n\n\n\n. ",
    "quan7794": "@1215708470 please use Websockets Port (TLS only), not orginal port!. ",
    "ashishvaghasiya": "@mcollina\n\nconnecting mqtt_server and subscribe some topic.\nafter some issue mqtt_server down/ restart\nafter that client was not reconnecting or not getting subscribe topic message.\n\nhow to handle this case? can you give me the solution? \n. Node js Server is sender . thanks @mcollina \ngetting solutions how to reconnect server after server restart.\n. ",
    "tosone": "Yes. Good job.. ",
    "minhlong": "I got it,\nThanks so much for your information. ",
    "konstag": "Thank you. It works perfect. Now you mentioned, it makes sense to me\n. ",
    "i-gk": "I got my configs wrong. keepalive is seconds not mili-seconds. once that is corrected it was all good.. ",
    "sudotamm": "I used @types/mqtt which contains type definitions for MQTT.\nI know client subscribe key like 'connect', 'reconnect', 'message', 'offline', 'error'. Can I add listener for subscribe call back? \nSuch as: \nthis.client.addListener('subscribe', subscribeCallback);\n. PR [Add a flag to control re-subscribe functionality. #665]  seems can fix this issue, I will close this issue and update to version 2.12.0.. I aslo got this problem. I used version 2.9.3.\nWhen mqtt connection reconnected succeed. And then I resubscribe topics manully, sometimes it can subscribe succeed, sometimes it can't work, it's very weird.. ",
    "muka": "Hi\nis there someone working on that or would like to work on the implementation?\nThe following new features are added to MQTT v5.0 (source)\n\n[ ] Session expiry\n[ ] Message expiry\n[ ] Reason code on all ACKs\n[ ] Reason string on all ACKs\n[ ] Server disconnect\n[ ] Payload format and content type\n[ ] Request / Response\n[ ] Shared Subscriptions\n[ ] Subscription ID\n[ ] Topic Alias\n[ ] Flow control\n[ ] User properties\n[ ] Maximum Packet Size\n[ ] Optional Server feature availability\n[ ] Enhanced authentication\n[ ] Subscription options\n[ ] Will delay\n[ ] Server Keep Alive\n[ ] Assigned ClientID\n[ ] Server reference\n\nFull specification\nSee also this issue for reference https://github.com/mcollina/aedes/issues/194\nThanks. Thanks for the reference, will look into it\n. cmon @RangerMauve, have you noticed any difference between those two issues? \n(spoiler: I was looking for volunteers to team up and write the code). @RangerMauve fair, see you on #651 then :). ",
    "manifest": "Is there any progress on this one? There are currently a bunch of brokers that have already implemented v5 support.. I see. Thanks!. ",
    "scarry1992": "@manifest, already in master, on npm coming soon.. HI, thanks for approving my commit. (the main answer in mitt-packet). Hello, can you publish new version of mqtt-connect to npm? And we could update this package as well.. @mcollina yes, I can, but I needed in updated version of mqtt-connection. After updating mqtt-connection packet in npm, I will update MQTT.js and all test will be OK. I'm sorry for mqtt-connection merge.. @mcollina Do I need to write more tests?. @psorowka I\u2019ve got your point and it does make sense. However, I still think that this logic should be left at the discretion of the MQTT.js user. We can also ask @mcollina opinion and if he believes that this functionality should be implemented, I will do that.\n@mcollina , MQTT 5 enables communication between the broker and the client using reason codes, which, in my understanding, means that there should be the opportunity to send puback/pubrel packets manually by a user. Did I get it right? More details here: pubac specs in reason codes section (Implementation specific error).\nPlease also check my fixes based on the comments in the review.\n. http://docs.oasis-open.org/mqtt/mqtt/v5.0/cs02/mqtt-v5.0-cs02.html#_Toc514345323 - topicAliasMaximum, http://docs.oasis-open.org/mqtt/mqtt/v5.0/cs02/mqtt-v5.0-cs02.html#_Toc514345385 - topicAlias. I believe that it is necessary to leave the topicAlias property on the user side because, at the moment, this makes the use of this flag not transparent, and can lead to incorrect behavior with different brokers. Most brokers currently do not support or support partially 5 standard and there may not be implemented this feature, and there is no need to completely stop working with this broker. I myself like the idea of bringing this logic to the library, but so far, it seems to me, you can not do it.. Hi. I did custom handling reason codes feature.. @mcollina Do I need to implement something else?. I fixed all issues and give answers. Can You check it and release new version?. @mcollina, After update my branch, I get error in CI in nodes 4,6,9 \"The command \"sudo -E apt-add-repository -y \"ppa:ubuntu-toolchain-r/test\"\" failed and exited with 1 during .\". @mcollina, so when can we realese mqtt 5.0?. In 4.3.2, 7, 8 nodes tests passed.. @mcollina, I tested on flespi broker with mqtt 5.0 and that branch in production in my projects allredy.. @psorowka, can you testing that branch on VerneMQ youself please?. @mcollina yes sure. @mcollina done). I was have same troubles. But I removed all node modules, then update all packages and install them, and then all works as well. I found resolve in issues in next-tick package.. @miricy I\u2019m not using angular. That trouble was been in vanilla js. You need resolve version of process-nextick package. You can try remove package-lock and retry install packages. You need to use last version of nexttick package on all project. If that not help you, looking for same issues in nexttick topic on github.. The essence: in the package nexttick from version 1.. to version 2.. api changed. If you try to search in the package-lock file, you will probably find 2 versions of the same package used in different packages, you need to make sure that this package is used everywhere the same version. And there are many options. Those that I described above-the simplest. Maybe you need to clean the global cache or something. A simple way helped me. Good luck.. I have one more idea, but I will realese here after 3.0.0.. Added PR with fix. @mcollina, merge it before release 3.0.0. please.. @mcollina, hello. I have a question: why are you skipping error from writable stream for creating connect packet?\n279  // Suppress connection errors\n280  this.stream.on('error', nop). @mcollina, but we have no ability getting errors in process writing connect packet to stream. Maybe we need to think about it?. I dont think about PR for now, but I can attach my usecase:\nif we attach broken will-object to config, we have the error in mqtt-packet, but in MQTT.JS we have no catching thats errors.\nI think you can resolve that issue faster, then me.\nAnyway, if you have no time, I can resolve it later.. @chainhead,  Are you set up mqtt.js from npm? If yes, that form of subscribe method not relized npm yet. Old form isclient.subscribe({ 'topic/string': 2 }). If you need multiple subscriptions you can use object form as well:client.subscribe({\u201ctopic/item\u201d: 1, \u201ctopic/items\u201d: 2}). Or wrong I understand you?. First of all you must to install mqtt.js from github, not from npm. It\u2019s feature not released in npm yet.. @mcollina, something go wrong with 10 version of Node with test, but on my PC all test is passed on last 10 version. Maybe you can rerun tests for 10 Node?. That signature isnt in npm yet. If you want new features of mqtt 5, you need to install mqttjs from master.. Where from you install mqttjs? Or where you compare readme and client.js?. What do you mean dont comply with each other? And what I must see in https://github.com/mqttjs/MQTT.js/blob/62641d6ec22e4e51b1cacd3f692965d44a09d03e/lib/client.js#L609. Hm, what wrong? I added test.. Ill add returning 'this' after emitting error. ill add end for connection with reason code, but dont add reconnect, because I get loop, if do this.. resolve. Ill remove it. resolve. rebase to call callback. rebase to call callback. this changed because servers initialization logic was been changed. Server process packets by version in connect packet. From spec: If a Client receives a packet whose size exceeds this limit, this is a Protocol Error, the Client uses DISCONNECT with Reason Code 0x95 (Packet too large). If you think, that bad idea, I can remove emitting error, but I think thats right. Just tell me what do you think. I think user must proccess that error himself.. fixed. fixed. right. fixed, added info in readme. implemented. fixed. refactored, check pls. code validation added. No, don\u2019t supported from last PR. ",
    "wijamw": "I have same error but different description\nevents.js:182\n      throw er; // Unhandled 'error' event\n      ^\nError: read ECONNRESET\n    at exports._errnoException (util.js:1022:11)\n    at TLSWrap.onread (net.js:610:25)\nThis is my code from example that have been provided. Then I changed it to localhost.\n\nvar mqtt = require('mqtt')\nvar client  = mqtt.connect('mqtts://127.0.0.1:1883')\nclient.on('connect', function () {\n  client.subscribe('presence')\n  client.publish('presence', 'Hello mqtt')\n})\nclient.on('message', function (topic, message) {\n  // message is Buffer \n  console.log(message.toString())\n  client.end()\n}). \n",
    "vikingsailor": "@taoqf \u5728\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\u91cc\u600e\u4e48\u4f7f\u7528mqtt\u8fde\u63a5AZURE?\u6211\u5df2\u7ecf\u5728nodejs\u4e2d\u8054\u901a\u4e86iot\u4e91\uff0c\u4f46\u662f\u60f3\u5728\u5c0f\u7a0b\u5e8f\u4e2d\u770b\u5230\u5404\u8bbe\u5907\u7684\u6d88\u606f\uff1f\u5982\u4f55\u5b9e\u73b0\uff1f. ",
    "gleroi": "The broker is mosquitto 1.4.10 (with support for websocket)\nI've made gist with the ndoejs program to reproduce the problem: https://gist.github.com/gleroi/5a75b498a5318bae7a0b9ed353ad3e8e\nin the output.txt, it can be seen that the connection is lost and reopen when receiving a payload greater than 29ko.\nIn fact, i have to send this payload two times. The first is neitheir displayed. \nWhen i send the second, it is received and the client disconnect/reconnect.\nThis behavior is a bit different than on browser where nothing was received, and sometimes a disconnection/reconnection happened.\nWe also have this error sometimes: \nWebSocket connection to 'ws://192.168.51.247:1885/' failed: One or more reserved bits are on: reserved1 = 1, reserved2 = 1, reserved3 = 0\nHope it helps.. ",
    "amanthegreatone": "@RangerMauve can you please elaborate a little more on this tip. I am also trying to build an IoT application and facing issues with node event loop getting stuck when consuming data from the MQTT client at a very high frequency. I am trying to work with node js child processes but seem to have some disconnect in trying to do this load balancing.. ",
    "arihantdaga": "@amanthegreatone I think most brokers are now supporting $queue and $shared topics... \nIn my case Emq Broker is supporting $queue topics. So i can run multiple instances of the node application subscribing to the $queue topics.in theier docs it's mentioned here . Hope it helps. Although last time i checked, This library wasnt supporting $shared subscription, but in my case i tried with queue susbsciption and it was working fine.. Any news on this ?? . I think this is right, as far as i know, broker like emq also do not support duplicate subscription, so if a client is already subscribed to a topic and retry to subscribe to the same topic, broker rejects the subscription.. . ",
    "redboltz": "I noticed that I was wrong. I misunderstood that 2 in client.queue.length.should.equal(2) is for \nclient.publish('test', 'test', {qos: 1})\n      client.publish('test', 'test', {qos: 2})\nBut it's not for them.\nIt is for\nclient.subscribe('test')\n      client.unsubscribe('test')\nI close the pull request.\n. Thank you for the comment.\n\nCan you please update the docs as well?\n\nDo you mean README.md? I will do that soon.. I added README.md.\n. Thank you very much!. @mcollina , I just sent the PR. #665 . > Can you also add a fix for the other issue? There seem to be some new lines that are not covered by unit tests, would you mind adding those too?\nDoes the other issue mean treat well with suback error? It's OK. I'm not sure the coverage will be satisfied if I add the fix. Anyway I will do.\nIn order to add the fix, I need to know how do I know suback error code.\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718068\nsuback's payload has two information. One is QoS, the other is success/fail bit.\nAnd I found packet.granted[0] is the raw payload. Can I use this?\n(packet.payload is null)\n. @mcollina , thanks. I implemented the library code. Now I start writing tests. I think that the test server needs to return suback with failure bit 1. How can I do this? I'm studying other tests implementation. But if you give me some advice, it is very helpful.\n. @mcollina , thank you! I will write tests.\n. I implemented the fix for suback error case. I also implemented the test.\nIt seems that codecov is satisfied.\nI implemented the test in abstract_client.js. I'm not sure either abstract_client.js or client.js is an appropriate location to implement the test.\nI introduced port variable and I set server2 listening port to port + 49  just like the test you mentioned.\nIf there is a room to improve, please let me know.\n. I realized that I passed mqtts://hostname:1234/. If I remove the last /, the connection is successfully finished. However, I think that ignoring path might be convenient. Because existing working code don't need to be changed.\nSo I post the PR #700.. Hi @mcollina, \nSure. I just added unit tests for the PR.\n. I sent the PR #707 to fix it.\n. I add why this functionality is needed.\nI know if I set the option reconnectPeriod, then automatically reconnect after disconnection by server side.\nUsers also want to disconnect from client side and reconnect at any time users want. It works well with clean = false setting.\nFor example, the client want to get stored (by the broker) data each 30 minutes. The client connects wit h clean=false and receives data, then disconnects. 30 minutes later, the client do the same process.\n. I got the following error on https://travis-ci.org/mqttjs/MQTT.js/jobs/295160939\n353 passing (47s)\n  1 failing\n  1) MqttSecureClient publishing should not send a `pubrel` if the execution of `handleMessage` fails for messages with QoS `2`:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\nHowever, the same test on the line 2305 and 2595 passed:\n\u2713 should not send a `pubrel` if the execution of `handleMessage` fails for messages with QoS `2`\nIn addition, all other nodejs builds are successfully finished. https://travis-ci.org/mqttjs/MQTT.js/builds/295160934?utm_source=github_status&utm_medium=notification\nI think that it is temporary server load causes time out.\nBy the way, I think that the test case https://github.com/mqttjs/MQTT.js/blob/master/test/abstract_client.js#L806 is checking pubcomp not pubrel\nSee https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L997\nCan I rename the test case name?\nBefore\n'should not send a pubrel if the execution of handleMessage fails for messages with QoS 2'\nAfter\n'should not send a pubcomp if the execution of handleMessage fails for messages with QoS 2'\nIt also triggers travis-ci.\nShould I send the fix as separated pull request? If it is, could you rebuild travis-ci for #707?\n. > If you can send the fix as a separate PR it would be nice, thanks!\nI will do soon :)\n. I forgot TypeScript update. I will do it soon.\n. updated.. Thank you very much!!. I use webpack 3.10.0.. MQTT.js is up-to-date master (402d336296cd8e6b5b909209fb3b638580a45813).\n. I analyzed webpack behavior. \nIt seems that index.js's exporting code is reflected is webpacked mqtt.\nSo I added Store to index.js. Then webpacked mqtt has Store as expected.. index.js is referred by webpack because of\nhttps://github.com/mqttjs/MQTT.js/blob/5d4d29513d1b6d5c3dc6e058be4459ec24595b4b/package.json#L60\n. Could you tell me how do I add and run test for browser?\nAt travis-ci, I only found node tests.\nhttps://travis-ci.org/mqttjs/MQTT.js/builds/312748264\nI found something like tests for browser as follows:\nhttps://github.com/mqttjs/MQTT.js/tree/master/test/browser\nI thought that I should add a test store.js to the directory, but I don't know how to run it.\n. I found a way.\nThe test should check var mqtt = require('../lib/connect') has Store.. updated.. I think that showing the code is good way. So I send #857.\n. It seems that travis-ci reports the error on Node.js:7.\nI switched the node version to v7.10.1 and npm version 4.2.0 using nvm. It is the same version of the travis-ci.\nThen, I run test 10 times. But no errors are reported.\nCould you restart the https://travis-ci.org/mqttjs/MQTT.js/jobs/419479154 ?\n```\n419 passing (51s)\n=============================================================================\nWriting coverage object [/home/kondo/work/MQTT.js/coverage/coverage.json]\nWriting coverage reports at [/home/kondo/work/MQTT.js/coverage]\n=============================================================================\n=============================== Coverage summary ===============================\nStatements   : 93.87% ( 658/701 )\nBranches     : 87.69% ( 342/390 )\nFunctions    : 94.79% ( 91/96 )\nLines        : 93.87% ( 658/701 )\n================================================================================\n[kondo@archboltz] $ node --version\nv7.10.1\n[kondo@archboltz] $ npm --version\n4.2.0\n```\n. This modification is required for https://github.com/mcollina/mqtt-level-store/pull/10.\n. Really? Maybe I looked over something.\nI'm not 100% sure but as far as I tested, 'readable' handler is called even if the stream is paused. \nI will check again, and will write minimal and complete code that describes the situation.\n. > I will check again, and will write minimal and complete code that describes the situation.\nI wrote it.\non 'readable' and read() version\nhttps://wandbox.org/permlink/AvyOS2iLHUJZ0YRc\non 'data' version\nhttps://wandbox.org/permlink/SWjdkjNE4pCt5IjB\non 'data' version works as I expected. But on 'readable' and read() version doing read() before resume() is called.\n. I removed my update for mqtt-level-store. \nI still have a problem.\nHere is mqtt-level-store branch that demonstrates the problem.\nhttps://github.com/redboltz/mqtt-level-store/tree/readable_fail_data_ok_case\nHere is the diff.\nhttps://github.com/mcollina/mqtt-level-store/compare/master...redboltz:readable_fail_data_ok_case\nI only added 2 more publishes to the test case 'should resend messages', and added console log for packets. The library code is NOT modified.\nWhen I run the test, I got the following result.\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 1,\n  dup: false,\n  length: 16,\n  topic: 'hello1',\n  payload: <Buffer 77 6f 72 6c 64 31>,\n  messageId: 54273 }\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 1,\n  dup: false,\n  length: 16,\n  topic: 'hello2',\n  payload: <Buffer 77 6f 72 6c 64 32>,\n  messageId: 54274 }\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 1,\n  dup: false,\n  length: 16,\n  topic: 'hello2',\n  payload: <Buffer 77 6f 72 6c 64 32>,\n  messageId: 54274 }\nOrder is not my concern in this branch because the branch is based on master. \nThe problem is topic hello2 payload world2 published twice.\nIf I replaced to on('data', ...) version in client.js, this behavior is disappeared. Three packets are published as I expected.\nI tried to find a way to fix the problem using once(readable', ...)andread()` approach, but I couldn't find it.\nCould you tell me how to solve it using readable approach?\n. I attached the patch to replace 'readable' with 'data' on mqtt-level-store testing environment.\nreadable_to_data.txt\nI reported what I did on 'readable' approach.\n\nRemoved outStore.read(0).\nReplaced outStore.read(1) with outStore.read().\n\nBut result is not changed.\n. I tested the PR.  But I experienced the same problem on mqtt-level-store.\nIt seems that level-db's stream behavior is something different from Store on MQTT.js. But I couldn't find what is the difference. So I can't create the test case from just this repo.\nI can show you the sequence of my test.\nAs I mentioned, readable_fail_data_ok_case branch on my fork is just added the test for demonstrates the problem. \ngit clone -b readable_fail_data_ok_case https://github.com/redboltz/mqtt-level-store\ncd mqtt-level-store\nnpm install\ncp path_to_fix-use-of-readable/lib/client.js node_modules/mqtt/lib/client.js\nnpm run test\nThen you can get\n```\n\nmqtt-level-store@2.0.0 test /home/kondo/tmp/mqtt-level-store\nstandard && mocha test.js\n\nmqtt level store\n    \u2713 should put and stream in-flight packets\n    \u2713 should support destroying the stream\n    \u2713 should add and del in-flight packets\n    \u2713 should replace a packet when doing put with the same messageId\n    \u2713 should return the original packet on del\n    \u2713 should get a packet with the same messageId\nmqtt level store manager\n    incoming\n      \u2713 should put and stream in-flight packets\n      \u2713 should support destroying the stream\n      \u2713 should add and del in-flight packets\n      \u2713 should replace a packet when doing put with the same messageId\n      \u2713 should return the original packet on del\n      \u2713 should get a packet with the same messageId\n    outgoing\n      \u2713 should put and stream in-flight packets\n      \u2713 should support destroying the stream\n      \u2713 should add and del in-flight packets\n      \u2713 should replace a packet when doing put with the same messageId\n      \u2713 should return the original packet on del\n      \u2713 should get a packet with the same messageId\nmqtt.connect flow\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 1,\n  dup: false,\n  length: 16,\n  topic: 'hello1',\n  payload: ,\n  messageId: 41893 }\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 1,\n  dup: false,\n  length: 16,\n  topic: 'hello2',\n  payload: ,\n  messageId: 41894 }\nPacket {\n  cmd: 'publish',\n  retain: false,\n  qos: 1,\n  dup: false,\n  length: 16,\n  topic: 'hello2',\n  payload: ,\n  messageId: 41894 }\n    \u2713 should resend messages (1060ms)\n19 passing (1s)\n```\nSee the end of the result. The third publish is the same as second one.\n. I noticed something about the problem.\nIn \ncpp\n    outStore.once('readable', function () {\nfunction, \ncpp\n          that._sendPacket(packet)\nis called.  In _sendPacket() function, 'storeAndSend(), and client.outgoingStore.put() is called.\nThis call dispatches level-db's put(). This means level-db's put() is called during level-db's stream iteration. I'm not sure but it might be a reason of the behavior.\nI've tested 'data' approach. In this test case, publish is 6 times called not 3times. It's bad. So I introduced my under developing mqtt-level-store to packet.cmd check on put (replacing case). Replace is needed only 'publish' to 'pubrel' case. This check can avoid the same packet put during iteration.\nIt requires the following test update. But it is reasonable.\n```cpp\n  it('should replace a packet when doing put with the same messageId', function (done) {\n    var packet1 = {\n      cmd: 'publish', // added\n      topic: 'hello',\n      payload: 'world',\n      qos: 2,\n      messageId: 42\n    }\n    var packet2 = {\n      cmd: 'pubrel', // added\n      qos: 2,\n      messageId: 42\n    }\nstore.put(packet1, function () {\n  store.put(packet2, function () {\n    store\n      .createStream()\n      .on('data', function (data) {\n        data.should.eql(packet2)\n        done()\n      })\n  })\n})\n\n})\n```\nAfter the cmd type checking introduced, 'data' approach works as I expected (3 times publish not 6 times). But 'readable' approach (this PR) still have problem (2nd and 3rd packet is the same)\nI know this is not directly related this PR. But I guess this information might be helpful to analyze the problem.\n. @mcollina , thank you very much!! My problem is fixed.\nAfter the PR is merged, I will sent a PR for mqtt-level-store to preserve publish order.\n. When I run test on mqtt-level-store, replace test is failed. (mqtt is correctly updated by npm)\nI noticed that the PR added the following test case.\n```javascript\n  it('should replace a packet when doing put with the same messageId', function (done) {\n    var packet1 = {\n      cmd: 'publish', // added\n      topic: 'hello',\n      payload: 'world',\n      qos: 2,\n      messageId: 42\n    }\n    var packet2 = {\n      cmd: 'pubrel', // added\n      qos: 2,\n      messageId: 42\n    }\nstore.put(packet1, function () {\n  store.put(packet2, function () {\n    store\n      .createStream()\n      .on('data', function (data) {\n        data.should.eql(packet2)\n        done()\n      })\n  })\n})\n\n})\n```\nBut it is existing test case. I only added cmd (just commented // added).\nNow, there are two the same name tests.\nhttps://github.com/mqttjs/MQTT.js/blob/master/test/abstract_store.js#L72\nhttps://github.com/mqttjs/MQTT.js/blob/master/test/abstract_store.js#L134\nAnd the first one doesn't have cmd.\n. When I checked the updated PR, I only copied client.js. abstract_store.js is kept as local modification. So I didn't notice earlier.. Please see https://github.com/mqttjs/MQTT.js/pull/859#issuecomment-415970423\n. Thank you for merging. After the new version is released, I will send the PR for mqtt-level-store to support publish order. It requires the new MQTT.js release for npm install.. https://github.com/mqttjs/MQTT.js/releases/tag/v2.18.6\nreleased this 9 hours ago \u00b7 2 commits to master since this release\nIt seems that the release v2.18.6 (tag v2.18.6) does not contain #860.\nhttps://github.com/mqttjs/MQTT.js/commits/v2.18.6\nAnd mqtt-level-store's package.json gets the latest release but not master from npm when I execute npm install. https://www.npmjs.com/package/mqtt\nSo I need the release that contains #860.\n. mqtt-level-store's test includes mqtt.js's abstract_store test in node_modules.\nhttps://github.com/mcollina/mqtt-level-store/blob/master/test.js#L5\nBefore #860, it causes the error https://github.com/mqttjs/MQTT.js/pull/859#issuecomment-415970423. Thank you! I send https://github.com/mcollina/mqtt-level-store/pull/11. It seems that mosquitto protocol is websockets.\nprotocol websockets\nBut MQTT.js connection is TCP.\njs\nconst mqttClient = connect('mqtt://rdisplay1.local:9001');\nTry\njs\nconst mqttClient = connect('ws://rdisplay1.local:9001');\n. Store is a interface.\nhttps://github.com/redboltz/MQTT.js/blob/master/lib/store.js always completes writing when put() is returned. But other Store might not complete writing and notify complete using callback function.. > It\u2019s not clear what you mean. Can you pass in a custom object to add this test?\nOk I will add test that contains cutstom Store.\n. The original code doesn't use Store.put() callback.\nhttps://github.com/mqttjs/MQTT.js/pull/864/files#diff-50cfa59973c04321b5da0c6da0fdf4feL1085\nAsyncStore such as mqtt-level-store might take a time to complete put(). Even if so, callback give the trigger to complete.\nThis test check it.\nhttps://github.com/mqttjs/MQTT.js/pull/864/files#diff-16702ac352d8772fe21f4f9c1de7e900R1038\nhttps://github.com/mqttjs/MQTT.js/pull/864/files#diff-16702ac352d8772fe21f4f9c1de7e900R1054. One travis-ci failed. (nodejs6)\nhttps://travis-ci.org/mqttjs/MQTT.js/jobs/422322347#L1785\n1) MqttSecureClient\n       offline messages\n         should queue qos != 0 messages:\n     Uncaught Error: write EPIPE\n      at exports._errnoException (util.js:1020:11)\n      at WriteWrap.afterWrite (net.js:806:14)\nIt seems that it is not related the fix.. I've checked all tests has been passed on my travis-ci.\nhttps://travis-ci.org/redboltz/MQTT.js/builds/422322332. Thank you for merging.. Ok, I will consider how to store families work well with any   highWaterMark setting.\nHere is my analysis about the current situation:\nhighWaterMark setting affects _read() calling timing. If higghWaterMark is greater than 1, _read() is called multiple times. In the current (in the PR) store implementation, the iterator goes forward in _read() function. So it reaches the end of _inflights before the new packet is put. As the result of that, pushing null to the stream, then the client detects on('end') event after only 2 packet is processed.\n. I summarize expected behavior. Before this PR, publish C is sendPacket (publish) instead of storePacket (publish). I say it as interrupt.\nNOTE: I assume that all publish is QoS1 in the following table.\n|type|MQTT command|expected|\n|---|---|---|\n|user|publish A|sendPacket (publish)|\n|user|disconnect|sendPacket (disconnect)|\n|broker||close session|\n|user|publish B|storePacket (publish)|\n|user|connect|sendPacket (connect)|\n|broker|connack||\n|internal||createStream()|\n|internal|publish A|sendPacket (publish)|\n|user|publish C|storePacket (publish)|\n|internal|publish B|sendPacket (publish)|\n|internal|publish C|sendPacket (publish)|\n|internal||on('end')|\nIf I set store's highWaterMark to 1, it is achieved. \nLet me add _read behavior.\n|type|MQTT command|expected|\n|---|---|---|\n|user|publish A|sendPacket (publish)|\n|user|disconnect|sendPacket (disconnect)|\n|broker||close session|\n|user|publish B|storePacket (publish)|\n|user|connect|sendPacket (connect)|\n|broker|connack||\n|internal||createStream()|\n|internal||_read() push A|\n|internal|publish A|sendPacket (publish)|\n|internal||_read() push B|\n|user|publish C|storePacket (publish)|\n|internal||_read() push C|\n|internal|publish B|sendPacket (publish)|\n|internal||_read() push null|\n|internal|publish C|sendPacket (publish)|\n|internal||on('end')|\nIf I set store's highWaterMark to 3, the behavior is changed as follows:\n|type|MQTT command|expected|\n|---|---|---|\n|user|publish A|sendPacket (publish)|\n|user|disconnect|sendPacket (disconnect)|\n|broker||close session|\n|user|publish B|storePacket (publish)|\n|user|connect|sendPacket (connect)|\n|broker|connack||\n|internal||createStream()|\n|internal||_read() push A|\n|internal||_read() push B|\n|internal||_read() push null|\n|internal|publish A|sendPacket (publish)|\n|user|publish C|storePacket (publish)|\n|internal|publish B|sendPacket (publish)|\n|internal||on('end')|\nThe packet C is not published.\nI think that the analysis indicates that we need to update client.js's logic. Even if on('end') is called, the MqttClient might have under processing packet that is stored(or storing) but not published yet. And the packets should be published before user's new publishes.\n. I implemented the new approach. I sent it as #902. It doesn't require any additional requirement to store.\n. I analyzed 'should resend in-flight QoS 1 publish messages from the client' test case.\nIt seems that after serverClient.stream.destroy() called, the client on('close') event doesn't occur.\nhttps://github.com/mqttjs/MQTT.js/blob/master/test/abstract_client.js#L2304\njavascript\n            serverClient.stream.destroy()\nI wrote the small code that demonstrates the behavior:\n```javascript\n'use strict'\nvar mqtt = require('./')\nvar net = require('net')\nvar inherits = require('inherits')\nvar Connection = require('mqtt-connection')\nfunction setupConnection (duplex) {\n  var that = this\n  var connection = new Connection(duplex, function () {\n    that.emit('client', connection)\n  })\n}\nvar MqttServer = module.exports = function Server (listener) {\n  if (!(this instanceof Server)) {\n    return new Server(listener)\n  }\nnet.Server.call(this)\nthis.on('connection', setupConnection)\nif (listener) {\n    this.on('client', listener)\n  }\nreturn this\n}\ninherits(MqttServer, net.Server)\nvar server = new MqttServer(function (c) {\n  console.log('S:construct')\n  c.on('connect', function (packet) {\n    console.log('S:recv:connect')\n    console.log('S:destroy:stream')\n    c.stream.destroy()\n  })\n});\nserver.listen(1883, function () {\n  console.log('C:send:connect')\n  var client = mqtt.connect('mqtt://localhost')\n  client.on('close', function () {\n    console.log('C:on:close')\n  })\n  client.on('error', function () {\n    console.log('C:on:error')\n  })\n})\n```\nHere is node v11.4.0 output:\nC:send:connect\nS:construct\nS:recv:connect\nS:destroy:stream\nAnd here is node v10.14.2 output:\nC:send:connect\nS:construct\nS:recv:connect\nS:destroy:stream\nC:on:close\nThe output continues the same sequence continuously because of auto reconnect functionality. But it isn't essential point.\nIs stream.destroy() a right way to close the session from the server side on node v11?\nI'm investigating. I'm not expert of node network. I'm reading https://nodejs.org/api/net.html#net_class_net_server now.\nIf someone has a better option, please let me know.\n. I wrote another example that checks socket.destroy() behavior:\n```javascript\n'use strict'\nvar net = require('net')\nvar server = net.createServer(function (conn) {\n  console.log('S:accept')\n  console.log('S:destroy')\n  conn.destroy()\n})\nserver.listen(11883, function () {\n  console.log('S:listen')\n  var client = new net.Socket()\n  client.connect('11883', 'localhost', function() {\n    console.log('C:connect')\n  })\nclient.on('close', function(){\n    console.log('C:on close')\n  })\n  client.on('error', function(){\n    console.log('C:on error')\n  })\n})\n```\nThe outputs are the same between v11.4.0 and v10.14.2:\nS:listen\nS:accept\nS:destroy\nC:connect\nC:on close\non('close') is called. It seems that the problem doesn't caused by node 'net'.. I did additional tests. It seems that the client side of  MQTT.js has the problem.\nMQTT.js FastMqttServer <---- MQTT.js client\n```javascript\n'use strict'\nvar mqtt = require('./')\nvar net = require('net')\nvar inherits = require('inherits')\nvar Connection = require('mqtt-connection')\nvar FastMqttServer = module.exports.FastMqttServer = function Server (listener) {\n  if (!(this instanceof Server)) {\n    return new Server(listener)\n  }\nnet.Server.call(this)\nthis.on('connection', function (duplex) {\n    var connection = new Connection(duplex)\n    this.emit('client', connection)\n  })\nif (listener) {\n    this.on('client', listener)\n  }\nreturn this\n}\ninherits(FastMqttServer, net.Server)\nvar server = new FastMqttServer(function (c) {\n  console.log('S:construct')\n  c.stream.destroy()\n});\nserver.listen(11883, function () {\n  console.log('C:send:connect')\nvar client = mqtt.connect('mqtt://localhost:11883')\n  client.on('close', function () {\n    console.log('C:on:close')\n  })\n  client.on('error', function () {\n    console.log('C:on:error')\n  })\n  client.on('connect', function () {\n    console.log('C:on:connect')\n  })\n})\n```\njavascript\n  client.on('close', function () {\n    console.log('C:on:close')\n  })\nis not called on only node v11.\nMQTT.js FastMqttServer <---- net.Socket client\n```javascript\n'use strict'\nvar mqtt = require('./')\nvar net = require('net')\nvar inherits = require('inherits')\nvar Connection = require('mqtt-connection')\nvar FastMqttServer = module.exports.FastMqttServer = function Server (listener) {\n  if (!(this instanceof Server)) {\n    return new Server(listener)\n  }\nnet.Server.call(this)\nthis.on('connection', function (duplex) {\n    var connection = new Connection(duplex)\n    this.emit('client', connection)\n  })\nif (listener) {\n    this.on('client', listener)\n  }\nreturn this\n}\ninherits(FastMqttServer, net.Server)\nvar server = new FastMqttServer(function (c) {\n  console.log('S:construct')\n  c.stream.destroy()\n});\nserver.listen(11883, function () {\n  console.log('C:send:connect')\nvar client = new net.Socket()\n  client.connect('11883', 'localhost', function() {\n    console.log('C:connect')\n  })\nclient.on('close', function(){\n    console.log('C:on close')\n  })\n  client.on('error', function(){\n    console.log('C:on error')\n  })\n})\n```\njavascript\n  client.on('close', function () {\n    console.log('C:on:close')\n  })\nis called.. I found the following line is problematic:\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L283. I sent the fix as #903.\n. Waiting travis-ci...\n. Travis-ci's trouble is solved now. But it seems that test.mosquitto.org is down.\nhttps://travis-ci.org/redboltz/MQTT.js/jobs/468579112#L858\nhttps://github.com/mqttjs/MQTT.js/blob/master/test/typescript/broker-connect-subscribe-and-publish.ts#L3 uses it.\n. No problem. I will take a look #901 .. I rebased the PR and force pushed it.. codecov is satisfied now.. If I use del, and matches messageId, undefined cb seems to be called.\nhttps://github.com/redboltz/MQTT.js/blob/c35e0a615b44bb235fecffb6b2ae8bdee4556c5a/lib/store.js#L77\nCan I update del as follows?\nBefore\nJavaScript\n    cb(null, packet)\nAfter\nJavaScript\n    if (cb) {\n      cb(null, packet)\n    }. Thanks, I updated it.. nodejs 7 and 8 reports an error on travis-ci. I updated { messageId } to { messageId: mid}, and changed the parameter name to mid.. I agree. It is better to inform the client the result. I updated the code, test, and document.. I think that MQTT Clean Session flag is corresponding to options.clean.\nMQTT Clean Session is defined as follows:\nSee http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html#_Toc385349231\n\nIf CleanSession is set to 0, the Server MUST resume communications with the Client based on state from the current Session (as identified by the Client identifier). If there is no Session associated with the Client identifier the Server MUST create a new Session. The Client and Server MUST store the Session after the Client and Server are disconnected [MQTT-3.1.2-4]. After the disconnection of a Session that had CleanSession set to 0, the Server MUST store further QoS 1 and QoS 2 messages that match any subscriptions that the client had at the time of disconnection as part of the Session state [MQTT-3.1.2-5]. It MAY also store QoS 0 messages that meet the same criteria.\n\nThat means the client need to keep the stores after disconnect sending if CleanSssion flag is false.\nWhat do you think?\n. I understand the situation. I started thinking how to achieve both. \nAs you mentioned, add a flag seems good.\nIIUC, adding the clean flag to mqtt.Client#end(). So the interface is updated to end([force=false], [clean=false], [cb]).\nIf it is ok, I will add the commit.. I wrote [clean=false] but it should be [clean=true] for the default behavior.. If that.options.clean is true, stores should be cleaned even if end()'s clean is false.\nSo the code will be as follows:\n```cpp\nMqttClient.prototype.end = function (force, clean, cb) {\n  var that = this\nif (typeof force === 'function') {\n    cb = force\n    force = false\n    clean = true\n  } else if (typeof clean === 'function') {\n    cb = clean\n    clean = true\n  }\nfunction closeStores () {\n    if (clean || that.options.clean) {\n      that.disconnected = true\n      that.incomingStore.close(function () {\n        that.outgoingStore.close(cb)\n      })\n    } else {\n      if (cb) cb()\n    }\n  }\n  ...\n``\n. I'm not sure the default parameter policy. But it seems that if users omit the parameter, the parameter regard to false in most cases. So I think that it is better to replace[clean=true]with[keep=false]. What do you think?. I'm trying to understand what you mean. Now, I got some idea. \nHere is what I understand:\n*Store#close()must always be called inMqttClient#end()` because it is a kind of contract.\n* Users might prepare a custom Store, and they need to chance to cleanup resources in user custom Store.\nSo I consider some options.\nMy first idea is passing that.options.clean to Store#close().\n```cpp\nMqttClient.prototype.end = function (force, cb) {\n  var that = this\nif (typeof force === 'function') {\n    cb = force\n    force = false\n  }\nfunction closeStores () {\n    that.disconnected = true\n    that.incomingStore.close(that.options.clean, function () {\n      that.outgoingStore.close(that.options.clean, cb)\n    })\n  }\n```\nStore can change behavior using the flag that.options.clean. I think it is good. *1\nHowever, it breaks existing code because it changes Store#close() interface. I think it is acceptable. But if it is NOT acceptable, we can change the order of the parameter like \ncpp\nthat.outgoingStore.close(cb, that.options.clean)\nIt seems to be inconsistent. All other functions' callback is located on the last.\nAnother option is adding options to Store's constructor. We can pass the same value as options.clean of MqttClient. I think that it is a little more confusing than *1.\nWhat do you think?\n. 'Store' (on memory)  is modified as follows:\ncpp\n/**\n * Close the store\n */\nStore.prototype.close = function (clean, cb) {\n  if (clean) {\n    this._inflights = null\n  }\n  if (cb) {\n    cb()\n  }\n. Thank you! I added a commit. \nI guess you think that MQTT's clean session and Store() clean are different concept.\nSo I don't pass MQTT's clean session to Store()'s constructor at\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L88\nI can control Store's  behavior as https://github.com/mqttjs/MQTT.js/pull/707/files#diff-16702ac352d8772fe21f4f9c1de7e900R1961\n. > So I don't pass MQTT's clean session to Store()'s constructor at\n\nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L88\n\nIf you think MQTT's clean session should be passed to Store()'s constructor, I will update the code.. done :). OK, I will do it.. I agree with you. Store.close() is not an appropriate point to prepare reconnect().\nWhen I revert this._inflights = null, the tests I added don't pass.\nhttps://github.com/mqttjs/MQTT.js/pull/734/files#diff-16702ac352d8772fe21f4f9c1de7e900R2031\nThe connection is clean: true (default). In this case, I think that user should be able to call client.end() and then call client.reconnect() in the close handler.\nHowever, call client.reconnect() or not is unpredictable, so I set _inflights to {} to prepare next client.reconnect() calling.\nI think that store.close() should be called because client.end() is called because of https://github.com/mqttjs/MQTT.js/pull/707#discussion_r148088223\nFinally, I found the appropriate point to reset Store._inflights. It is reconnect() function. I renew the incomingStore and outgoingStore there. They could be user custom object so I call constructor explicitly.\nPlease check out my next commit.\n. This constructor calling might be wrong. It assumes that incomingStore and outgoingStore have options, and their constructor has one parameter options.\nI considered two more approaches.\n\nAdd a new interface like resetInglights to Store. And client calls it on reconnect().\nAdd reconnect() method restriction. It can be called only if client is created with the option clean: false. User knows clean setting. If user want to reconnect with clean: true, user can call new connect(). That means creating the new connection but it is ok for clean: true.\n\nWhat do you think?. Approach 1 breaks existing user custom Store implementation. So Approach 2 is good. I will remove explicit constuctor calling code and add reconnect tests for both clean: true and clean: false.. I updated the code using Approach 2. . It's a good idea!\nIf stores are passed, reconnect() uses them, otherwise renew stores the same as connect().\nIf users want to reuse existing stores, hold the stores on the user side. And then, pass them to reconnect(). It's intuitive.. updated.\n. How about this?\njavascript\ndescribe('store in lib/connect/index.js (webpack entry point)', function () {\n  it('should create store', function (done) {\n    done(null, new mqtt.Store())\n  })\n}). > It should be noted that a Map which is a map of an object, especially a dictionary of dictionaries, will only map to the object's insertion order. In ES2015 this is ordered for objects but for older versions of ES, this may be random and not ordered.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Description \nes6-map can preserve insertion order if ES version is older.. Sure, I just added it.. The updated code calls handleMessage before sending a PUBCOMP. The sequence is not changed before/after update.. I'm not sure but the existing code https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L974 cheking it. So I applied the same manner.\nI've checked call sequence.\nhandlePublish is called only from https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L336 in handlePacket. And handlePacket is called only from https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L292.\nAt that point, nextTickWork is passed as the 2nd parameter, callback.\nnextTickWork is defined  https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L283. It cannot be null.\nSo null checking is not required. I will remove it from my update and existing code.. Yes, let me clarify. You mean\njs\n  that.incomingStore.get(packet, function (err, pub) {\n    if (!err && pub.cmd !== 'pubrel') {\n      that.emit('message', pub.topic, pub.payload, pub)\n      that.incomingStore.put(packet, function (err) {\n        if (err) {\n          return callback(err)\n        }\n        that.handleMessage(pub, function (err) {\n          if (err) {\n            return callback(err)\n          }\n          that._sendPacket(comp, callback)\n        })\n      })\n    } else {\n      that._sendPacket(comp, callback)\n    }\n  })\nright?\n. I removed done && on my  environment.\nThen I got errors on the following test:\nhttps://github.com/mqttjs/MQTT.js/blob/master/test/abstract_client.js#L953\nCan I remove the test?\nOr revert as follows? \njs\nreturn done && done(err). Or\njs\nMqttClient.prototype._handlePublish = function (packet, done = function (){}) {\n?. I choose\njs\nMqttClient.prototype._handlePublish = function (packet, done = function (){}) {\nBecause\n\nSomeone might depend on existing test. So I shouldn't remove it.\nYou mentioned using empty function is better for empty callback at https://github.com/mqttjs/MQTT.js/pull/864#discussion_r213572395. Sorry I pasted wrong code.\n\nFinally I fixed the code as follows:\n```js\nMqttClient.prototype._handlePubrel = function (packet, callback) {\n  callback = typeof callback !== 'undefined' ? callback : function () {}\n  var mid = packet.messageId\n  var that = this\nvar comp = {cmd: 'pubcomp', messageId: mid}\nthat.incomingStore.get(packet, function (err, pub) {\n    if (!err && pub.cmd !== 'pubrel') {\n      that.emit('message', pub.topic, pub.payload, pub)\n      that.incomingStore.put(packet, function (err) {\n        if (err) {\n          return callback(err)\n        }\n        that.handleMessage(pub, function (err) {\n          if (err) {\n            return callback(err)\n          }\n          that._sendPacket(comp, callback)\n        })\n      })\n    } else {\n      that._sendPacket(comp, callback)\n    }\n  })\n}\n```. To support ES5 and older, I fixed as follows:\njs\nMqttClient.prototype._handlePublish = function (packet, done) {\n  done = typeof done !== 'undefined' ? done : function () {}. Done.\n. I didn't notice it. I replaced it.. The stored packet will be published at https://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L1334. this._storePacket() is called when the flag storeProcessing is true. That means publish stored packet process started but not finished yet. So the stored packet will processed before on('end'...)  will happen. . That is important point. \nHere is the test that expresses the requirement to store.\n```js\n  it('should iterate a packet that is pushed back durring iteratoion', function (done) {\n    var count = 0\n    var packet1 = {\n      topic: 'hello',\n      payload: 'message1',\n      qos: 1,\n      messageId: 1\n    }\n    var packet2 = {\n      topic: 'hello',\n      payload: 'message2',\n      qos: 1,\n      messageId: 2\n    }\n    var packet3 = {\n      topic: 'hello',\n      payload: 'message3',\n      qos: 1,\n      messageId: 3\n    }\n// put first two packets into the store\nstore.put(packet1, function () {\n  store.put(packet2, function () {\n    // start iteration\n    var str = store.createStream()\n    str.on('close', function () {\n      should.fail()\n    })\n    str.on('end', function () {\n      count.should.eql(3)\n      done()\n    })\n    str.on('error', function () {\n      should.fail()\n    })\n    function storeDeliver () {\n      var packet = str.read(1)\n      if (!packet) {\n        str.once('readable', storeDeliver)\n        return\n      }\n      switch (count++) {\n        case 0:\n          packet.should.eql(packet1)\n          // put another packet during iteration\n          setImmediate(function () {\n            store.put(packet3)\n          })\n          break\n        case 1:\n          packet.should.eql(packet2)\n          break\n        case 2:\n          packet.should.eql(packet3)\n          break\n        case 3:\n          should.not.exist(packet)\n          break\n      }\n      // emulate publish completion\n      setImmediate(function () {\n        storeDeliver()\n      })\n    }\n    storeDeliver()\n  })\n})\n\n})\n```\nIf highWaterMark is not 1, on('readable',...) doesn't called until the number of packets reaches the highWaterMark value. It is not good.\nSetting highWaterMark: 1 is one way to satisfy the requirement above. I don't know other ways to achieve it, so far.\nActually other store implementation should satisfy the requirement. I will add the test above to test/abstract_store.js and commit to the PR and check other store implementation such as mqtt-level-store. If other stores doesn't satisfy the requirement, I will modify them and will send PRs. Is that OK?\nIf it is OK, could you tell me which store implementation should I check? . Ah, yes it should be. I updated the commit now.. ",
    "ffamar": "Hi Matteo, \nI waiting for a 20 minute and my node version is 6.9.5.\nWhen I unplug the cable the message \"ethernet eth0: Link is Down\" appear immediately in console.\nThanks!\n. No no, it's a Kernel Message.\nThis is /var/log/messages\nJul 11 15:31:20 varsomam33 user.info kernel: [15096.821414] cpsw 4a100000.ethernet eth0: Link is Up - 100Mbps/Full - flow control rx/tx\nJul 11 15:31:28 varsomam33 user.info kernel: [15104.841225] cpsw 4a100000.ethernet eth0: Link is Down\nJul 11 15:32:14 varsomam33 user.info kernel: [15150.841348] cpsw 4a100000.ethernet eth0: Link is Up - 100Mbps/Full - flow control rx/tx\nJul 11 15:36:06 varsomam33 user.info kernel: [15382.841073] cpsw 4a100000.ethernet eth0: Link is Down\nJul 11 15:52:41 varsomam33 user.info kernel: [16377.841262] cpsw 4a100000.ethernet eth0: Link is Up - 100Mbps/Full - flow control rx/tx\nJul 11 15:53:41 varsomam33 user.info kernel: [16437.841134] cpsw 4a100000.ethernet eth0: Link is Down\nJul 11 15:56:14 varsomam33 user.info kernel: [16590.841262] cpsw 4a100000.ethernet eth0: Link is Up - 100Mbps/Full - flow control rx/tx\nJul 11 15:58:22 varsomam33 user.info kernel: [16718.841131] cpsw 4a100000.ethernet eth0: Link is Down\nJul 11 16:06:16 varsomam33 user.info kernel: [17192.841223] cpsw 4a100000.ethernet eth0: Link is Up - 100Mbps/Full - flow control rx/tx\nJul 11 16:06:24 varsomam33 user.info kernel: [17200.841094] cpsw 4a100000.ethernet eth0: Link is Down\n. Probably I found the cause of the problem, the tcp socket from my target to broker remain in ESTABLISHED status. I tried to change tcp_keepalive_time from 7200 to 10 without results.\nNow I must find a solution.\n. I set\ntcp_retries1=1 \ntcp_retries2=1 \ntcp_keepidle=3\ntcp_keepintvl=3\ntcp_keepcnt=3\nand the problem solved.\nNow event 'offline' is emitted and tcp socket is closed approximately after 30 seconds.\nI need to study the correlation between the tcp_xxxx parameters and the status of the socket tcp in depth.\n@RangerMauve  my broker is't custom, it is RabbitMQ, I think it support keepalive.\nThanks for support.\n. ",
    "lifengzhai": "I am confused, I use the command line test is normal\nMQTT.js version: 2.11.0\nnode v8.2.0\nnpm 5.3.0. I found the problem, in command line do not use double quotes\nmqtt pub -t \"$clt/100000000000000\" -h \"b3.XXX.pub\" -p 15983 -m '{\"id\": 1}'\nmqtt pub -t \"\\$clt/100000000000000\" -h \"b3.XXX.pub\" -p 15983 -m '{\"id\": 1}'\nmqtt pub -t '$clt/100000000000000' -h \"b3.XXX.pub\" -p 15983 -m '{\"id\": 2}'. ",
    "stherrienaspnet": "\"mqtt\": \"^2.11.0\",\n\"systemjs\": \"0.19.39\",\nHere is a screen capture of the issue.\n\nThe complete source code can be found here\nhttps://github.com/stherrienaspnet/pi-robot\nThanks for your help :). Hello RangerMauve,\ninto my gpio.service.ts i have ana import as the following\nimport * as mqtt from 'mqtt';\nand as soon i use mqtt into my code i got the issue when running the application\nlike here \n\nHere is my systemjs.config.js file content\n```javascript\n/*\n * System configuration for Angular samples\n * Adjust as necessary for your application needs.\n /\n(function (global) {\n  System.config({\n    paths: {\n      // paths serve as alias\n      'npm:': 'node_modules/'\n    },\n    // map tells the System loader where to look for things\n    map: {\n      // our app is within the app folder\n      'app': 'app',\n  // angular bundles\n  '@angular/animations': 'npm:@angular/animations/bundles/animations.umd.js',\n  '@angular/animations/browser': 'npm:@angular/animations/bundles/animations-browser.umd.js',\n  '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\n  '@angular/common': 'npm:@angular/common/bundles/common.umd.js',\n  '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\n  '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\n  '@angular/platform-browser/animations': 'npm:@angular/platform-browser/bundles/platform-browser-animations.umd.js',\n  '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\n  '@angular/http': 'npm:@angular/http/bundles/http.umd.js',\n  '@angular/router': 'npm:@angular/router/bundles/router.umd.js',\n  '@angular/router/upgrade': 'npm:@angular/router/bundles/router-upgrade.umd.js',\n  '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\n  '@angular/upgrade': 'npm:@angular/upgrade/bundles/upgrade.umd.js',\n  '@angular/upgrade/static': 'npm:@angular/upgrade/bundles/upgrade-static.umd.js',\n\n  // other libraries\n  'rxjs':                      'npm:rxjs',\n   'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'\n\n},\n// packages tells the System loader how to load when no filename and/or no extension\npackages: {\n  app: {\n    main: './main.js',\n    defaultExtension: 'js',\n    meta: {\n      './*.js': {\n        loader: 'systemjs-angular-loader.js'\n      }\n    }\n  },\n  rxjs: {\n    defaultExtension: 'js'\n  }\n}\n\n});\n})(this);\n```\n I don't know what is the proper way to include mqtt here?. i tried but nothing changed, i do not have a trace showing me the issue.  I even replace try with require.. Thanks you very much for your help!. Thanks you verry much!. ",
    "AlirezaMoseni": "sorry i doesn't see it :|. ",
    "arden": "@mcollina \ni'm use this code work fine:\nclient.publish('60/test', '\u624b\u673a\u7528\u6237', {qos:0, retain:false});\nsetTimeout(function(){\n    client.publish('54/test', '\u624b\u8868\u7528\u623754', {qos:0, retain:false});\n    console.log('1');\n}, 2000);\nsetTimeout(function(){\n    client.publish('66/test', '\u624b\u8868\u7528\u623766', {qos:0, retain:false});\n    console.log('2');\n}, 4000);\nsetTimeout(function(){\n    client.publish('60/test', '\u624b\u8868\u7528\u623760', {qos:0, retain:false});\n    console.log('2');\n}, 6000);\nbut i'm use this code can't work:\nclient.publish('54/test', '\u624b\u8868\u7528\u6237544', {qos:0, retain:false});\nclient.publish('66/test', '\u624b\u8868\u7528\u6237666', {qos:0, retain:false});\nclient.publish('60/test', '\u624b\u8868\u7528\u6237600', {qos:0, retain:false});. i'm set every 30 seconds for sends PINGREQ to Aedes broker.. @jdiamond \nthe client.publish method cannot call continuously\uff0cmust be called at intervals.. i'm found this problem, because i'm use Aedes as broker like this:\n```\n'use strict'\nvar mqemitterRedis = require('mqemitter-redis')\nvar mqRedis = mqemitterRedis({\n  port: 6379,\n  host: '127.0.0.1',\n  password: '',\n  db: 14,\n  concurrency: 1000\n})\nvar mqemitterMongodb = require('mqemitter-mongodb')\nvar mqMongodb = mqemitterMongodb({\n  url: 'mongodb://127.0.0.1/mqemitter',\n  concurrency: 1000\n})\nvar persistenceRedis = require('aedes-persistence-redis')\nvar persistence = persistenceRedis({\n  port: 6379,          // Redis port\n  host: '127.0.0.1',   // Redis host\n  family: 4,           // 4 (IPv4) or 6 (IPv6)\n  password: '',\n  db: 14\n})\n// \u8fd9\u91cc\u5982\u679c\u7528mq\u7684\u8bdd\u5c31\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\n// can't use mq\nvar aedes = require('aedes')({\n  //mq: mqRedis,\n  //mq: mqMongodb,\n  persistence: persistence,\n  concurrency: 1000,\n  heartbeatInterval: 1000,\n  connectTimeout: 30000\n})\n//var aedes = require('aedes')()\nvar server = require('net').createServer(aedes.handle)\nvar httpServer = require('http').createServer()\nvar ws = require('websocket-stream')\nvar port = 7000\nvar wsPort = 7001\nserver.listen(port, function () {\n  console.log('server listening on port', port)\n})\nws.createServer({\n  server: httpServer\n}, aedes.handle)\nhttpServer.listen(wsPort, function () {\n  console.log('websocket server listening on port', wsPort)\n})\naedes.on('clientError', function (client, err) {\n  console.log('client error', client.id, err.message, err.stack)\n})\naedes.on('publish', function (packet, client) {\n  if (client) {\n    console.log('message from client', client.id)\n  }\n})\naedes.on('subscribe', function (subscriptions, client) {\n  if (client) {\n    console.log('subscribe from client', subscriptions, client.id)\n  }\n})\naedes.on('client', function (client) {\n  console.log('new client', client.id)\n})\n```\nif i'm use mqemitter-redis or mqemitter-mongodb as Aedes's mq, the problem will appear. but use mqemitter that work fine.\n// \u8fd9\u91cc\u5982\u679c\u7528mq\u7684\u8bdd\u5c31\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\n// can't use mq\nvar aedes = require('aedes')({\n  //mq: mqRedis,\n  //mq: mqMongodb,\n  persistence: persistence,\n  concurrency: 1000,\n  heartbeatInterval: 1000,\n  connectTimeout: 30000\n})\nwhy? why?\n. ",
    "saintthor": "\n\n  var client = mqtt.connect('mqtt://test.mosquitto.org'); \n\nerror in chrome:  WebSocket connection to 'ws://test.mosquitto.org/' failed: Error during WebSocket handshake: Unexpected response code: 200\nalso failed in firefox.\n. thank you. it works.. some days ago, this code works well:\n mqtt.connect('mqtt://test.mosquitto.org:8081');\nnow :\nmqtt.min.js:1 WebSocket connection to 'ws://test.mosquitto.org:8081/' failed: Error during WebSocket handshake: net::ERR_CONNECTION_RESET. mqtt.min.js:1 WebSocket connection to 'ws://test.mosquitto.org:8080/' failed: Error during WebSocket handshake: net::ERR_CONNECTION_RESET\n8080 has never worked. while 8081 had worked 1 week ago.\nand, you may see the Connected client count at http://test.mosquitto.org/ , the count is down to nearly 0 these days. there may be something wrong.. hello,  jdiamond,\ni have a mqtt server. i can set a tcp connection with it and run mqtt protocol on the connection with python.\nparams are issued in the first post. do you know how to connect it with mqttjs?. thank you.\ni am afraid there is no websocket.. ",
    "leecoder": "I've sent a PR. pls check it. Thnx~. ok, I've changed to #679. WDYT?. ",
    "abcd-ca": "I did read the hivemq articles, they're awesome. I read those before checking out your library. I still have some outstanding questions because I find some ambiguity remains with regards to roles and responsibilities:\n\nThe sender will store the message until it gets an acknowledgement in form of a PUBACK command message from the receiver.\n\nMy question here, is whose responsibility is the storage? Will the mqtt library do it for me? Do I have to do it manually or is that where mqtt-level-store comes into play? \n\nThe association of PUBLISH and PUBACK is done by comparing the packet identifier in each packet. If the PUBACK isn\u2019t received in a reasonable amount of time the sender will resend the PUBLISH message. If a receiver gets a message with QoS 1, it can process it immediately, for example sending it to all subscribing clients in case of a broker and then replying with the PUBACK.\nThe duplicate (DUP) flag, which is set in the case a PUBLISH is redelivered, is only for internal purposes and won\u2019t be processed by broker or client in the case of QoS 1. The receiver will send a PUBACK regardless of the DUP flag.\n\nIf the DUP flag is \"only for internal purposes\" then why is it exposed in the mqtt publish options API? I know what it does, I'm just not clear if it's something I have to manage setting or if the client library will do this for me.\nThank you for providing clarification. I'm excited to clarify these things so I can head out into the mountains with a flaky connection to test out QoS 1 :). Thank you, I was able to get the persistent store working and I see what it's for. I'll have a think about dup in my case. I did some field tests and the results were as expected when I went in and out of cell range \u2013 messages queued up and flushed out once I re-entered an area with coverage. \nOne thing I am still curious about \u2013 what would you recommend for a flow where the initial connection can't be established because my device is powered up out of range (offline from the Internet)? Would I just have to do my own non-mqtt message queuing and check once we're online then try to make the initial connection once the (portable) device enters a zone with 3g coverage (I'm using a 3g module for data access)? Or, maybe I can somehow add messages to the store prior to making the initial connection. It's really nice how once you have a connection, the connectivity can come and go and session can stop and resume respectively. I need to figure out a way to do this with the initial connection. Might need to roll my own by polling some AT commands to check for network connectivity prior to making the initial connection.. Oh, you're right, nice! Thank you. \nFor messages that are set to QoS 1 and retain: true, do you know what event causes the broker to discard messages? Would it be after all subscribers have received the retained messages? If a subscriber never reconnects, I wonder what the maximum retention time is for a message by the broker? I'll have to read the spec again but maybe it depends on the broker implementation.. Hi @jdiamond I've spent some time meditating on this and I think I now get how it all works. If you have time to review a \"missed messages, catch-up\" problem and proposed solution I outlined here, I'd be interested in your feedback. To sum it up though, I figure I'll have QoS:1, retain:true for all stateful messages (i.e. voltage, temperature) and for historically/contextually  relevant messages (i.e. chat messages in a conversation over time) I'll use QoS: 1, retain: false. If a subscriber disconnects and misses some chat messages, they can publish a message that requests a catch-up, causing the other client to re-publish everything that was missed (filtered by an exclusion list of message ids in the catch-up message) . . further, qos is about confirmation that messages are received by broker from client or by subscriber from broker. retain is about whether or not broker keeps the message. Thanks @RangerMauve I'll look into that. I'd also be happy not sending certain messages if I know I'm not connected \u2013 I don't think I currently have a good way of establishing that though.\nThis is what I've tried but it doesn't seem to reliably update once connected. Maybe it's got a long timeout or something. See anything bad with this approach?\n``\nthis.client = connect(mqtt://${process.env.MQTT_HOST}`, {\n        username: process.env.MQTT_USER,\n        password: process.env.MQTT_PASS,\n        //   port: 1883,\n        clean: false,\n    // only need to set this when clean is set to false\n    clientId: this.clientID,\n\n    // Last Will send connected=false \n    will: {\n      topic: `${this.stateTopicBase}/connected`,\n      payload: BINARY_FALSE,\n      qos: 1,\n      retain: true\n    },\n\n    incomingStore: manager.incoming,\n    outgoingStore: manager.outgoing\n  })\n\n  this.client.on('offline', () => {\n    console.log('*** Messenger offline')\n    this._commState = CommState.OFFLINE\n  })\n  this.client.on('reconnect', () => {\n    console.log('*** Messenger reconnecting...')\n    this._commState = CommState.RECONNECTING\n  })\n  this.client.on('error', err => console.log('*** Messenger error ', err))\n  this.client.handleMessage = this.handleMessage.bind(this)\n\n  this.client.on('close', () => this._commState = CommState.OFFLINE)\n\n  this.client.on('connect', async () => {\n    this._commState = CommState.CONNECTED\n  })\n\n``. @RangerMauve I'm not really checking yet for CommState.OFFLINE or CommState.CONNECTED. I'm updating an LCD with the current state, whatever it is but I am interested in conditionally publishing non-essential messages when !CommState.CONNECTED. I didn't noticereconnectPeriod, I'll try it \u2013 I don't really understand from the limited docs there what it does \u2013 does it mean that's how long between retries? will it retry forever? My device could be offline for hours before a human moves it to a place that has a connection (we have a cellular connection) . Thanks!. I've been digging into the source code observingcreateStream`. Here's my hack test:\n```\nmanager.outgoing.createStream().on('data', data => {\n        // print first object to get sense of its structure\n        if (this.streamCount === 0) console.log('*** stream data: ', data)\n    this.streamCount++\n  })\n\n  setTimeout(() => {\n    console.log('*** streamCount: ', this.streamCount)\n  },5000)\n\n```\nI am finding that apparently my leveldb store emits the 'data' event 1762 times. That's a lot more than I expected unless it's keeping all data from all time. I had assumed that after a connection was established and all client-persisted messages had been published they'd be removed from the store. Do I need to be managing when to delete from the store? If so I'd love an example and that would also answer my original question. Thank you!. ",
    "RalphL79": "Is there any change for the MQTT protocol (server and client side) allow by default hexadecimal values. I say this because for interfacing and interacting with a microcontroller based application (SAMD21/WINC1500/MSP430/Arduino or other), it is much more interesting than the UTF8 encoding. It would be very fancy if the publish function could receive by argument an Array (or Buffer or other) of hexadecimal (8 bits - 1 byte) values. With this, the MQTT could act as an broker/bridge between several platforms, for instance between:\n- an server (service) based application, which is continuously working;\n- an webpage client based in websockets (or others), for interface and user friendly web page application, this client will only be open when the user needs.\n- an external client, with a microcontroller based application which is continuously working and connecting and reconnecting whenever is needed (eventually if there is an wifi/internet connection failure).\nI say this because, I'm digging and searching a lot and until now I didn't find a good way of doing this...\n. @shankerwangmiao, in fact the MQTT in the server receives the hex (8bit) data array from the client based microcontroller, but when I want to send again the same payload from the server to the client, the MQTT publish function parses the hex data for example 0x05 has 0x30, 0x35, so I sent in the server 0x05 (one byte) and I receive in the micro 0x30 and 0x35 (two bytes).. @shankerwangmiao  the payload is something like this:\nvar host = 'wss:/mqtt.server:8085'; // our internal server\nvar options = {\n    cmd: 'connect', \n    protocolId: 'MQTT',\n    protocolVersion: 4,\n    clientId: clientId,\n    encoding: 'hex',\n    username: 'user_name',\n    password: 'pss3rd',\n    will: \n    {\n        topic: 'test/',\n        payload: 'Connection Closed abnormally..!'\n    },\n}\nvar client = mqtt.connect(host, options);\nclient.on(\"message\", function (topic, message) \n{\n    const buffer = new Uint8Array([ 0x01, 0x05, 0x45, 0x8B, x9A]).buffer;\n    payload = buf2hex(buffer);\n    client.publish(topic, payload);\n}\nIf we send the payload as string, the message is sent, however if we send the payload as array, the server (or the broker) disconnects and the message is not sent. All MQTT connections are closed in the port and the connection is restarted by itself.. I have installed the Buffer class from npm, but for some reason the server closes the connection (makes the \"will\" option), any idea?. Yesterday I finally put it working, this is how I have done:\nserver (service) side: \n var payload = new Buffer.from([ 0x02, 04x1, 0x01, 0x74, 0x12]);\n client.publish(topicPub, payload);\non the web page client:\n  var buffer = new Uint8Array([0x02, 04x1, 0x01, 0x74, 0x12]);\n  client.publish(topicPub, buffer);\nRegarding the other problem the \"will\" option closing connection is an error that occurs from time to time, and I have to restart all software (like a watchdog) to connect again, sometimes the watchdog occurs 2 or 3 times before a clean an stable mqtt connection other times the watchdog doesn't occurs....\nThe error is something like:\nMQTT_CALLBACK_SOCK_CONNECTED: -104\nit seems the error is the following: ECONNRESET connection reset by peer.\nI just don't understand why this error occurs from time to time, is there any workaround? Cloud be a problem of Websockets/Handshake?\n. that's what I'm thinking, but it must something inside (at the beginning) of the mtt_connect function, this only occurs when I try to make the mqtt connection...but I can't go deeper (I have \".a\" library) .... ",
    "shankerwangmiao": "@RalphL79 As shown in section 3.3.3 of the MQTT standard, the payload of a published message is not necessarily a utf-8 string, and can be any type of binary data instead.\nFor me, I'm using mosca to act as a broker, with an interface where I can directly sub/pub binary messages. On embedded platforms, I recommend paho. For parsing and serializing structured data, you can try protobuf. \n. @RalphL79 How did you send that payload? Can you show some code? . How about \nconst buffer = new Buffer.from([ 0x01, 0x05, 0x45, 0x8B, 0x9A]);\nclient.publish(topic, buffer);. I'm not quite sure. How about disabling ssl encrypt and dumping network traffic?. Maybe there are issues with the underlying network.. ",
    "duncanfinney": "Fixes #682 . I actually read the same thing with a college from work today and we came to a similar conclusion. We also thought the wording was a little vague.\nThis is what it is saying right? \nWhenever any control packet (including pingresp) arrives from the server:\n   - reschedule _performServerPingCheck() at T=current_time + keepalive\nfunction _performServerPingCheck() {\n     sendAPing()\n     setTimeout(() => {\n        if (haven'tGottenAPingSinceISentIt()) { closeConnection() }\n    }, opts.pingRTTMaximumMillis); \n}\nWe didn't know how to word the configuration or what the default value should be. What would be \"a reasonable amount of time\"? I was thinking 5 seconds.. It doesn't cause problems if reschedulePings is turned off. \nBut if you have it set to true, anytime you publish a message it moves the check farther into the future (even when the broker has torn down the connection on the other end). \nhttps://github.com/mqttjs/MQTT.js/blob/master/lib/client.js#L728\nSince we publish messages faster than the keepalive period always, we never would hit _checkPing()\n. That was the thing. The MQTT client isn't aware that the connection has been severed by the server because it was disconnected. It waits for the TCP to timeout which seems to be a really long time. \nThere might be something wrong with the TCP settings... this is on a Linux Yocto build. . ",
    "robertsLando": "@mcollina can you explain me better what you mean with \"offline subscription\"? I know I need different clientID I just wuld like to know when this happens, I mean get an error on client connect or on error event that says \"Client ID already used\" or something like this. Than I have check aedes but it seems the same as mosca, why should I use it insteed? . ",
    "alnikitich": "its not work only with nedb database on client:\nserver code:\n```js\nconst aedes = require('aedes')();\nconst http = require('http');\nconst wss = require('websocket-stream');\nvar port = 1883;\nconst server = http.createServer();\nconst ws = wss.createServer({server: server}, aedes.handle)\nserver.listen(1884);\n```\nclient code:\n```html\n\n\n\n\n\n</p>\n<pre><code>    var client = mqtt.connect(\"ws://127.0.0.1:1884\",{\n        clean: false,\n        clientId: 'console_client',\n\n        incomingStore: Manager().incoming,\n        outgoingStore: Manager().outgoing\n    });\n\n\n    client.on('connect', function () {\n        console.log (\"connected\")\n\n        client.subscribe('testQueue',{qos: 2});\n\n        setInterval(function(){\n            client.publish(\"testQueue\",\"hello\",{qos: 2});\n        },4000);\n    });\n\n    client.on('message', function (topic, message) {\n        console.log(message);\n    });\n</code></pre>\n\n\n\n\n```\ni think it's my error. when i've removed first {qos:2} in subscribe all work fine.\nand when i change second {qos:2} to {qos:1} all work fine too\n. i think it`s not depens on nedb directly.\nWhat difference between mqtt.subscribe({qos:2}) and mqtt.publish({qos:2}) ?\nand why i have different results if i use it together ?. ",
    "levblanc": "Silly me, change host to \nconst host = 'wxs://my-mqtt-host';\nor\nconst host = 'wx://my-mqtt-host';\nand it works. . ",
    "prabathabey": "@mcollina Thanks for the feedback. I looked into the source code and figured out that, in the current implementation, puback is already sent by the time handleMessage is invoked when QoS 1 messages are processed, which does not quite allow me to achieve what's looked for. I would like to suggest a possible solution for this in the form of a fix, which goes below.\n```\nMqttClient.prototype._handlePublish = function (packet, done) {\n     ...\n     case 1:\n      // emit the message event\n      this.emit('message', topic, message, packet)\n      this.handleMessage(packet, done)\n      if (this.options.autoAcknowledgement === true) {\n        this.acknowledge(packet)\n      }\n      break\n     case 0:\n      // emit the message event\n       this.emit('message', topic, message, packet)\n       this.handleMessage(packet, done)\n       break\n       ...\n}\n/\n * Handle explicit acknowledgements in scenarios where the client\n * needs to have more control over signalling the broker of the\n * successful receipt of messages.\n \n * @param packet  Packet to be acknowledged\n /\nMqttClient.prototype.acknowledge = function (packet) {\n  var qos = packet.qos\n  switch (qos) {\n    case 1:\n      this._sendPacket({\n        cmd: 'puback',\n        messageId: packet.messageId\n      })\n      break\n    default:\n      // do nothing\n      break\n  }\n}\n```\nWDYT?. @mcollina Thanks for the feedback. I will surely submit a PR with the recommended change. The reason why I suggested to add a new API method is to make error handling more streamlined, so that the mqtt client wouldn't then have to solely rely on an error thrown by the application, or let the handleMessage handler extended by the application deal with protocol specifics such as sending puback messages, in order to decide on whether to acknowledge a message to the broker. However, I will proceed as advised.. @mcollina I've submitted a PR https://github.com/mqttjs/MQTT.js/pull/697 with the above change, as well as a fix for a test failure I've come across while running the test cases at [1]. I'd appreciate you can review the PR and share your feedback. . Closing the ticket as the fix for the issue indicated above is merged into the master branch in PR #697.. All test cases seem to successfully get executed locally. I'm in the process of further investigating the root cause of the above reported test failure.. @mcollina Sure. I will take a look at extending the same for QoS 2 messages as well.. Sure, I will check on this.. I've looked into to the above issue, but unfortunately couldn't reproduce it even when I attempted running the test suite on a few hosts with different configurations including a t2.micro on AWS). Do we have a checklist of items that we use as part of this project to mark a test flaky? I'd appreciate any hint on how you've reproduced the issue, so I can try the same locally and try to isolate if this issue was a result of a regression introduced by the fix I've added earlier or something else.. Thanks. Managed to reproduce the issue on Mac OS X. I will fix this and send a PR.. Apologies for the delay in responding. I've re-written the test case to eliminate the intermittent behaviours observed together with some minor improvements to the fix I'd already submitted in #712 . Appreciate if you could review the changes and provide your feedback if the fix needs any modifications.. @mcollina I'd like to take a look at this. Will provide an update as soon as I manage to come up with a sizeable contribution.. @mcollina Thanks for taking time to review the PR and the feedback. I've added the fixes proposed and submitted.. Sure. Will do.. IMHO, in an event where the handleMessage throws an error (could be due to the unavailability of the backend system that persists incoming messages, for example) we need to let the broker retry the messages at a later point. If we do send a PUBACK even amidst an error thrown by the application, does it not send a wrong indication to the broker that the message has successfully been processed by the application? WDYT?. @mcollina The only possible way I could think of for writing a test case (without using setTimeouts) against this particular functionality is by directly manipulating the '_handlePublish' private method, which is sub-optimal for obvious reasons. I'd appreciate if you could shed some light as to if there's any other better way to handle this. . Thanks for the feedback.. Noted. I will refactor all references that already uses \"assert\" to use \"should\".. This is done.. ",
    "iurly": "Unfortunately I can't reproduce the issue at will. I got a report mentioning this problem occurring a few thousand times during a timespan of about 8 hours, then everything normal for a couple days, then again, then everything normal,and it's now been a week. Out of 8 similar setups, only one exposed this behavior.\nI could write a patch but I'm not familiar at a with the code and I have no way to test it, so.... ",
    "amitmangalvedkar": "@mcollina : I am also getting this strange behaviour. This happens very intermittently. I am investigating if there is any particular trend when this happens, so that it can be reproduced at will.. ",
    "Tabrizian": "Job is done!. ",
    "FreedCapybara": "Here you go:\n```js\nimport { Injectable } from '@angular/core';\nimport * as mqtt from 'mqtt';\n@Injectable()\nexport class MqttService {\nprivate _client: any;\nconstructor() {\n    this.client = mqtt.connect('mqtt://iot.eclipse.org:80/ws');\n    this._client.on('connect', function () {\n      console.log('connected');\n    });\n  }\n}\n. There's a lot of stack:js\nERROR TypeError: this.once is not a function\n    at BufferList.Duplex (_stream_duplex.js:70)\n    at new BufferList (bl.js:32)\n    at BufferList (bl.js:7)\n    at Parser._resetState (parser.js:27)\n    at new Parser (parser.js:19)\n    at Object.Parser [as parser] (parser.js:10)\n    at MqttClient._setupStream (client.js:240)\n    at new MqttClient (client.js:227)\n    at Function.connect (index.js:137)\n    at new MqttService (mqtt.service.ts:10) // <--- interesting from here up\n    at _createClass (core.es5.js:9525)\n    at _createProviderInstance$1 (core.es5.js:9500)\n    at resolveNgModuleDep (core.es5.js:9485)\n    at NgModuleRef.get (core.es5.js:10577)\n    at resolveDep (core.es5.js:11080)\n    at createClass (core.es5.js:10933)\n    at createDirectiveInstance (core.es5.js:10764)\n    at createViewNodes (core.es5.js:12212)\n    at createRootView (core.es5.js:12107)\n    at callWithDebugContext (core.es5.js:13493)\n    at Object.debugCreateRootView [as createRootView] (core.es5.js:12810)\n    at ComponentFactory_.create (core.es5.js:9872)\n    at ComponentFactoryBoundToModule.create (core.es5.js:3333)\n    at ViewContainerRef_.createComponent (core.es5.js:10074)\n    at RouterOutlet.activateWith (router.es5.js:5617)\n    at RouterOutlet.ngOnInit (router.es5.js:5497)\n    at checkAndUpdateDirectiveInline (core.es5.js:10856)\n    at checkAndUpdateNodeInline (core.es5.js:12364)\n    at checkAndUpdateNode (core.es5.js:12303)\n    at debugCheckAndUpdateNode (core.es5.js:13167)\n    at debugCheckDirectivesFn (core.es5.js:13108)\n    at Object.eval [as updateDirectives] (DashboardComponent.html:49)\n    at Object.debugUpdateDirectives [as updateDirectives] (core.es5.js:13093)\n    at checkAndUpdateView (core.es5.js:12270)\n    at callViewAction (core.es5.js:12638)\n    at execComponentViewsAction (core.es5.js:12570)\n    at checkAndUpdateView (core.es5.js:12276)\n    at callViewAction (core.es5.js:12638)\n    at execEmbeddedViewsAction (core.es5.js:12596)\n    at checkAndUpdateView (core.es5.js:12271)\n    at callViewAction (core.es5.js:12638)\n    at execComponentViewsAction (core.es5.js:12570)\n    at checkAndUpdateView (core.es5.js:12276)\n    at callWithDebugContext (core.es5.js:13493)\n    at Object.debugCheckAndUpdateView [as checkAndUpdateView] (core.es5.js:13033)\n    at ViewRef_.detectChanges (core.es5.js:10189)\n    at core.es5.js:4812\n    at Array.forEach ()\n    at ApplicationRef_.tick (core.es5.js:4812)\n    at core.es5.js:4684\n    at ZoneDelegate.invoke (zone.js:391)\n    at Object.onInvoke (core.es5.js:3890)\n    at ZoneDelegate.invoke (zone.js:390)\n    at Zone.run (zone.js:141)\n    at NgZone.run (core.es5.js:3821)\n    at Object.next (core.es5.js:4684)\n    at SafeSubscriber.schedulerFn [as _next] (core.es5.js:3635)\n    at SafeSubscriber.__tryOrUnsub (Subscriber.js:238)\n    at SafeSubscriber.next (Subscriber.js:185)\n    at Subscriber._next (Subscriber.js:125)\n    at Subscriber.next (Subscriber.js:89)\n    at EventEmitter.Subject.next (Subject.js:55)\n    at EventEmitter.emit (core.es5.js:3621)\n    at checkStable (core.es5.js:3855)\n    at Object.onHasTask (core.es5.js:3903)\n    at ZoneDelegate.hasTask (zone.js:444)\n    at ZoneDelegate._updateTaskCount (zone.js:464)\n    at Zone._updateTaskCount (zone.js:288)\n    at Zone.runTask (zone.js:208)\n    at drainMicroTaskQueue (zone.js:595)\n    at \n. It blows up here inside of `_stream_duplex.js` of `readable-stream`:js\nfunction Duplex(options) {\n  if (!(this instanceof Duplex))\n    return new Duplex(options);\nReadable.call(this, options);\n  Writable.call(this, options);\nif (options && options.readable === false)\n    this.readable = false;\nif (options && options.writable === false)\n    this.writable = false;\nthis.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false)\n    this.allowHalfOpen = false;\nthis.once('end', onend); // <--- this guy\n}\nA little farther up the stack in `_setupStream` in `mqtt/lib/client.js`:js\nMqttClient.prototype._setupStream = function () {\n  var connectPacket\n  var that = this\n  var writable = new Writable()\n  var parser = mqttPacket.parser(this.options) // <--- blows up in here\n  var completeParse = null\n  var packets = []\n// ...\n```\nThanks for looking into this!. I know it's more of a readable-stream issue, but it's relevant to this library and I just need some help.\nBased on the output of npm list readable-stream, I think it's safe to say mqtt.js is using 2.3.3:\n+-- mqtt@2.13.0\n| +-- concat-stream@1.6.0\n| | `-- readable-stream@2.3.3\n| +-- help-me@1.1.0\n| | +-- callback-stream@1.1.0\n| | | `-- readable-stream@1.1.14            <--- except this one, but help-me probably isn't the most important dependency\n| | `-- glob-stream@6.1.0\n| |   +-- ordered-read-streams@1.0.1\n| |   | `-- readable-stream@2.3.3\n| |   `-- readable-stream@2.3.3\n| +-- mqtt-packet@5.4.0\n| | `-- bl@1.2.1\n| |   `-- readable-stream@2.3.3\n| +-- readable-stream@2.3.3\n| `-- websocket-stream@5.0.1\n|   +-- duplexify@3.5.1\n|   | `-- readable-stream@2.3.3\n|   `-- readable-stream@2.3.3\nHere's my webpack:\n```js\nconst helpers = require('./helpers');\nconst webpackMerge = require('webpack-merge'); // used to merge webpack configs\n// const webpackMergeDll = webpackMerge.strategy({plugins: 'replace'});\nconst commonConfig = require('./webpack.common.js'); // the settings that are common to prod and dev\nconst aws = require('aws-sdk');\nconst creds = new aws.SharedIniFileCredentials({profile: 'profile'});\naws.config.update({region: 'us-east-1', credentials: creds});\nconst cloudFormation = new aws.CloudFormation({apiVersion: '2010-05-15'});\nconst s3 = new aws.S3();\n/*\n * Webpack Plugins\n /\nconst AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin');\nconst DefinePlugin = require('webpack/lib/DefinePlugin');\nconst NamedModulesPlugin = require('webpack/lib/NamedModulesPlugin');\nconst LoaderOptionsPlugin = require('webpack/lib/LoaderOptionsPlugin');\nconst HotModuleReplacementPlugin = require('webpack/lib/HotModuleReplacementPlugin');\n/*\n * Webpack Constants\n /\nconst ENV_VARS = require('./environments/dev.js');\nconst ENV = process.env.ENV = process.env.NODE_ENV = 'development';\nconst HOST = process.env.HOST || 'localhost';\nconst PORT = process.env.PORT || 3000;\nconst PUBLIC = process.env.PUBLIC_DEV || HOST + ':' + PORT;\nconst AOT = process.env.BUILD_AOT || helpers.hasNpmFlag('aot');\nconst HMR = helpers.hasProcessFlag('hot');\nconst METADATA = {\n  host: HOST,\n  port: PORT,\n  public: PUBLIC,\n  ENV: ENV,\n  HMR: HMR,\n  AOT: AOT\n};\n/\n * Webpack configuration\n \n * See: http://webpack.github.io/docs/configuration.html#cli\n /\nmodule.exports = function (options) {\n  const ENV_VARIABLES = {\n    'ENV': JSON.stringify(METADATA.ENV),\n    'HMR': METADATA.HMR,\n    'process': {\n      env: {\n        'ENV': JSON.stringify(METADATA.ENV),\n        'NODE_ENV': JSON.stringify(METADATA.ENV),\n        'HMR': JSON.stringify(METADATA.HMR)\n      },\n      'version': '\"v1231123\"'\n    }\n  };\nvar keys = Object.keys(ENV_VARS);\n  keys.map(k => {\n    ENV_VARIABLES[k] = JSON.stringify(ENV_VARS[k]);\n  });\n  return cloudFormation.describeStacks({StackName: 'stackname'}).promise()\n    .then((data) => {\n      const allOutputs = data.Stacks[0].Outputs;\n      const apiOutput = allOutputs.filter((output) => { return output.OutputKey === 'ServiceEndpoint'; })[0];\n      ENV_VARIABLES.PORTAL_API_ENDPOINT = '\\\"' + apiOutput.OutputValue + '\\\"';\n      return ENV_VARIABLES\n    })\n    .then((variables) => {\n      variables.randomFolderName = Math.random().toString(36).substring(5);\n      return variables;\n    })\n    .then((variables) => {\n    return webpackMerge(commonConfig({env: ENV}), {\n        /\n         * Developer tool to enhance debugging\n         \n         * See: http://webpack.github.io/docs/configuration.html#devtool\n         * See: https://github.com/webpack/docs/wiki/build-performance#sourcemaps\n         /\n        devtool: 'cheap-module-source-map',\n    /**\n     * Options affecting the output of the compilation.\n     *\n     * See: http://webpack.github.io/docs/configuration.html#output\n     */\n    output: {\n\n      /**\n       * The output directory as absolute path (required).\n       *\n       * See: http://webpack.github.io/docs/configuration.html#output-path\n       */\n      path: helpers.root('dist' + '\\\\' + variables.randomFolderName),\n\n      /**\n       * Use absolute paths when injecting files\n       *\n       * See: https://github.com/jantimon/html-webpack-plugin/issues/156\n       */\n      publicPath: '/',\n\n      /**\n       * Specifies the name of each output file on disk.\n       * IMPORTANT: You must not specify an absolute path here!\n       *\n       * See: http://webpack.github.io/docs/configuration.html#output-filename\n       */\n      filename: '[name].bundle.js',\n\n      /**\n       * The filename of the SourceMaps for the JavaScript files.\n       * They are inside the output.path directory.\n       *\n       * See: http://webpack.github.io/docs/configuration.html#output-sourcemapfilename\n       */\n      sourceMapFilename: '[file].map',\n\n      /** The filename of non-entry chunks as relative path\n       * inside the output.path directory.\n       *\n       * See: http://webpack.github.io/docs/configuration.html#output-chunkfilename\n       */\n      chunkFilename: '[id].chunk.js',\n\n      library: 'ac_[name]',\n      libraryTarget: 'var',\n    },\n\n    module: {\n\n      rules: [\n\n        /**\n         * Css loader support for *.css files (styles directory only)\n         * Loads external css styles into the DOM, supports HMR\n         *\n         */\n        {\n          test: /\\.css$/,\n          use: ['style-loader', 'css-loader'],\n          include: [helpers.root('src', 'styles')]\n        },\n\n        /**\n         * Sass loader support for *.scss files (styles directory only)\n         * Loads external sass styles into the DOM, supports HMR\n         *\n         */\n        {\n          test: /\\.scss$/,\n          use: ['style-loader', 'css-loader', 'sass-loader'],\n          include: [helpers.root('src', 'styles')]\n        },\n\n      ]\n\n    },\n\n    plugins: [\n\n      /**\n       * Plugin: DefinePlugin\n       * Description: Define free variables.\n       * Useful for having development builds with debug logging or adding global constants.\n       *\n       * Environment helpers\n       *\n       * See: https://webpack.github.io/docs/list-of-plugins.html#defineplugin\n       *\n       * NOTE: when adding more properties, make sure you include them in custom-typings.d.ts\n       */\n      new DefinePlugin(variables),\n\n      /**\n       * Plugin LoaderOptionsPlugin (experimental)\n       *\n       * See: https://gist.github.com/sokra/27b24881210b56bbaff7\n       */\n      new LoaderOptionsPlugin({\n        debug: true,\n        options: {\n\n        }\n      }),\n\n      new HotModuleReplacementPlugin()\n    ],\n\n    /**\n     * Webpack Development Server configuration\n     * Description: The webpack-dev-server is a little node.js Express server.\n     * The server emits information about the compilation state to the client,\n     * which reacts to those events.\n     *\n     * See: https://webpack.github.io/docs/webpack-dev-server.html\n     */\n    devServer: {\n      port: METADATA.port,\n      host: METADATA.host,\n      hot: METADATA.HMR,\n      public: METADATA.public,\n      historyApiFallback: true,\n      watchOptions: {\n        // if you're using Docker you may need this\n        // aggregateTimeout: 300,\n        // poll: 1000,\n        ignored: /node_modules/\n      },\n    },\n\n    /**\n     * Include polyfills or mocks for various node stuff\n     * Description: Node configuration\n     *\n     * See: https://webpack.github.io/docs/configuration.html#node\n     */\n    node: {\n      global: true,\n      crypto: 'empty',\n      process: true,\n      module: false,\n      clearImmediate: false,\n      setImmediate: false\n    }\n\n  });\n})\n\n}\n``\nThanks!. That is relevant, but I get the error no matter what URL I use because I think it's just initialization code. My guess is there's some JavaScript magic that isn't happening somewhere because of Webpack (likeonce` not getting set on a prototype, or not being globally available, or something like that - I have no idea).\nIf you're at a loss, I can always try taking it up with readable-stream. I just need somebody who's more plugged into the details of these projects who can help me out.. That's okay, thank you for your help! And for your quick response time - I'm glad I didn't have to wait a day to hear from somebody \ud83d\udc4d \nWhere do I put the browser field in my webpack? I found an issue where somebody asked for it, and some stuff on this documentation page (specifically resolve.packageAlias), but I'm not really sure what to do with it. I know how to configure loaders and stuff, but otherwise I'm not amazing at Webpack. =. Between module and plugins I added:\njs\nresolve: {\n  aliasFields: ['browser']\n},\nBut I get the same error =. Thanks for your help!\nClosing this in favor of the readable-stream issue https://github.com/nodejs/readable-stream/issues/315. ",
    "bengl": "Perhaps MQTT should be in https://github.com/nodejs/citgm ?. ",
    "Surecom": "@mqtt-owner-team fix the issue please. ",
    "alex-borkun": "Guys, it won't help.\nThe update of url will require reconnection anyway.\nPlease close it as won't fix.\nThank you!. ",
    "noerw": "@rudacs I guess you are talking about the reconnect event, there is no disconnect event afaik. You can use the offline event to get notified about a broken connection. It is only emitted after the keepalive has timed out (which was after 120 seconds for me).\nSubscribing to connect, reconnect, close, offline events leads to the following flow for me (with autoreconnect enabled):\n20:01:45.640Z mqtt connect\n20:01:50.226Z      wifi disabled\n20:03:45.647Z mqtt offline\n20:03:45.647Z mqtt close\n20:03:46.648Z mqtt reconnect\n20:03:46.648Z mqtt close\n20:03:47.648Z mqtt reconnect\n20:03:47.648Z mqtt close\n20:03:47.926Z       wifi enabled\n20:03:48.648Z mqtt reconnect\n20:03:48.648Z mqtt close\n20:03:49.648Z mqtt reconnect\n20:03:49.648Z mqtt close\n20:03:50.648Z mqtt reconnect\n20:03:50.982Z mqtt connect\n. ",
    "the1laz": "It's silent on the MQTTjs end. Mosquitto is getting the occasional \"socket error on client\", but it's not at the same time as a message being published.\nI tried in both Chrome and Firefox on two different computers and got the same thing. I used the Firefox websocket monitor plugin to confirm that MQTTjs is sending something down the websocket every time, however Mosqitto does not receive any packets after the first publish. MQTTjs keeps receiving packets fro Mosquitto though. It seems that an empty string message is crashing all communications for MQTTjs->Mosquitto, but Mosquitto->MQTTjs keeps working fine.\nclient.publish('topic','') is an example. It only seems to happen with messages that are an empty string, regardless of topic. Because it seems to be outputting something to the websocket every time, but Mosquitto isn't receiving anything, I'd guess that something about the packet that MQTTjs is sending causes some issue with Mosquitto receiving, but I don't know much about the nuts and bolts of websockets or MQTT to speculate or investigate any further. I posted this here rather than to Mosquitto because I've sent messages with empty strings from other clients through Mosquitto before (Node-RED, MyMQTT) without issue.. There's not much to reproduce. It's in a react app, I initialise with:\nclient = mqtt.connect(this.state.host+\":\"+this.state.port);\nThen I have a couple of text fields for topic/message and a button to send when you click on it:\n<Form.Field control={Button} onClick={this.mqttPublish}>{this.state.sendlabel}</Form.Field>\n...\nmqttPublish() {\n  client.publish(this.state.topic,this.state.message,{qos:1},(err) =>{\n    if(err) console.log(err)\n  });\n}\nWhen this.state.message === '', the first click of the button will result in the broker getting the message, nothing happens on subsequent clicks. \nWhen thist.state.message !== '', the broker gets a message on every click.\nEDIT: MQTTjs version 2.13.1. Already gave you an example. Here's a test case:\nnpm install mqtt\nindex.html:\n```\n\n\n\n\n\n\nvar client = mqtt.connect('ws://192.168.1.21:9001')</p>\n<p>setInterval(function(){\n  client.publish('test','')\n  console.log('published')\n},2000)\n\n\n\n```\nhttp-server .\nResults in a single 'test' message arriving on another client subscribed to '#'. A couple of minutes later, another 'test' message. If you add a message:\nsetInterval(function(){\n  client.publish('test','why???')\n  console.log('published')\n},2000)\nThe other client receives a message every 2 seconds.. 1.4.10 \nI'll try a newer version.. Seems to work for me on mosquitto 1.4.14, maybe a prior issue with their websocket implementation. Thanks for the help.. ",
    "pierreca": "@mcollina Sorry, slammed by work - I hope I can get back to that and add the test later, although I'm not sure I understand yet what exactly you think it'll test (I have to spend more time looking at it)\nfeel free to close if you don't like idling issues. . @anthonyvercolano is going to take a look at this, thanks!. The proposed fix for this is in #787 . This is a proposed fix for #765 by the way. it looks like the Store object has a clean option too. Maybe we could apply the clean option passed to connect to the stores too when we initialize the client, and that way closing the store wouldn't wipe the inflight packet dictionnary. then modify reconnect to reuse existing stores if clean === false?. @mcollina @periclesroalves it looks like the fix for the stores/reconnect logic is a little larger than the initial issue. I believe @anthonyvercolano brought in the changes that @periclesroalves suggested - is it acceptable to merge this as a first step and then tackle the store clean/reconnect issue separately?. ",
    "abser": "Yes. I also see the same issue. Any insights from the MQTT.js team?. ",
    "Leen15": "I have the same issue. somebody have any workaround?. ",
    "chainhead": "I think, no subscription errors are reported at all - source.\nFor mosquitto broker ONLY\nAs per this link, ACL with mosquitto may not prevent subscription; but, message delivery is certainly restricted.. Try something like this:\njs\nlet options = {\n                \"clientId\": \"random\",\n                \"keepalive\": 60,\n                \"connectTimeout\": 30000,\n                \"clean\": true,\n                \"protocolId\": \"MQIsdp\",\n                \"protocolVersion\": 3\n            }\nmqtt.connect(url,options)\nwhere, url is tcp://iot.eclipse.org:1883, etc.. @scarry1992 But, the document seems to mention it? BTW, can I extend your example into an array of objects for multiple subscriptions - [{ 'topic/string': 2 }]?. Ok, understood. What about the options object? Does it apply to all the topics to be subscribed?. ",
    "Tsumiqt": "Having the same issue. I want to connect to 'ws://test.mosquitto.org:8080/' or 'wss://test.mosquitto.org:8081/' but i immediately getting the offline event. Connecting to localhost via ws (even with reverse proxy nginx) is working fine.. Yep. Same here. Server seems to be down. Own Broker works as expected. . Figured out the solution: \nEven though the broker isn't configured this way and other clients are able to connect without username and password -> After the broker requires username and password aswell for auth the connection is established..\nI would consider this as a bug.. Closing this issue because it was my fault. ws://test.mosquitto.org:8080 seems to be down.. ",
    "viniciusbo": "@sublimator  Don't you know this lib? One of the most used for client-side storage. https://github.com/localForage/localForage. ",
    "ophentis": "@mcollina thanks, I added the test.. I'll add to every cases? I think except one.. ",
    "Llorx": "HM, shit, just created a PR with this haha. Srry for the doublepost.. Added single quotes instead of double quotes.\nEDIT: Just noticed another PR that also approaches this problem, but cannot close this :-/. ",
    "simonnilsson": "The error is because the main file defined in package.json mqtt.js contains a shebang line #!/usr/bin/env node. This is not supported by webpack as it is not valid javascript. The CLI-parts should be separated in to its own file so that it is not included when you import it as a library.\nReference: https://github.com/webpack/webpack/issues/4603\nThe way around it atm is to use a loader in webpack that ignores the shebang line like https://github.com/javascriptismagic/shebang-loader. ",
    "grnch": "If the shebang-loader doesn't work for whatever reason or is too complex to set up, you can try using the built-in NormalModuleReplacementPlugin  from Webpack.\nJust add the following to your webpack.config.js file:\n```js\nvar webpack = require(\"webpack\");\nmodule.exports = {\n    // ... other webpack config ...\n    plugins: [\n        new webpack.NormalModuleReplacementPlugin(/^mqtt$/, \"mqtt/dist/mqtt.js\"),\n    ],\n};\n```\nThis essentially tells Webpack whenever it sees require(\"mtqq\") to replace it with require(\"mqtt/dist/mqtt.js\") which is the minified version of the MQTT library that doesn't happen to have the #! line at the beginning.. @mcollina Would it be possible to put the CLI and the MQTT library in separate files somehow? Putting them in a single file like this is obviously causing problems because the #! line at the top is not a valid JS syntax, and it interferes with all kinds of JS parsers (Webpack, Babel, Uglify, etc).\n. @mcollina I am not sure why the \"browser\" field in your package.json is not respected. If I had to guess, the problem is most likely with older bundlers/loaders from before the browser field spec was created.\nI just checked that Webpack 4 loads and packages your library just fine, but earlier versions of Webpack throw an error, which would seem to confirm the theory above.\nI guess with time this problem will go away, as more and more people upgrade to latest Webpack/Babel/etc. But for the time being many projects are stuck with older versions of Webpack that have this issue.. ",
    "andrei-zhaleznichenka": "Works for me:\n{\n  test: /\\.js$/,\n  include: /node_modules\\/rc\\/index.js/,\n  loader: 'shebang-loader',\n}. ",
    "yueyuzhao": "\nIf the shebang-loader doesn't work for whatever reason or is too complex to set up, you can try using the built-in NormalModuleReplacementPlugin  from Webpack.\nJust add the following to your webpack.config.js file:\n```js\nvar webpack = require(\"webpack\");\nmodule.exports = {\n    // ... other webpack config ...\n    plugins: [\n        new webpack.NormalModuleReplacementPlugin(/^mqtt$/, \"mqtt/dist/mqtt.js\"),\n    ],\n};\n```\nThis essentially tells Webpack whenever it sees require(\"mtqq\") to replace it with require(\"mqtt/dist/mqtt.js\") which is the minified version of the MQTT library that doesn't happen to have the #! line at the beginning.\n\nI'm integrating mqtt to my electron app, and this works for me. . ",
    "murbanowicz": "I am trying the solution sypplied by @grnch . It compiles but then it runes into the issue caused by the fact that ws is not being included there.. @amerllica have you found the solution?. ",
    "jwl09": "@RangerMauve Thanks for your reply, it has worked well.. ",
    "edog1973": "I'm connecting to a mosquitto install.  No, I have not been able to track down the root cause.. Yes, the broker works with web sockets.  I'm successfully using mqtt.js in an browser app that receives data from the broker.  It took me quite a while to find the issue as all the code looked good.  I ended up pulling almost everything from the app to come up with the example posted.  And the exact same code works fine when run though node.  It's only when compiled with browserify and running in the browser that I see the issue.. I finally got around to debugging this further today and was able to come up with a resolution.  The issue crops up whenever publishing a message with an undefined or zero length string messages (also only when running in a browser).  I followed the code down through the mqtt module and into the writeToStream.js file of the mqtt-packet module.  At the end of the publish method the payload is written to the stream unconditionally.  Adding a check that only writes the payload to the stream if it's a non zero length resolves the issue.\n```\ndiff --git a/writeToStream.js b/writeToStream.js\nindex 72167ef..ba5db10 100644\n--- a/writeToStream.js\n+++ b/writeToStream.js\n@@ -285,7 +285,10 @@ function publish (opts, stream) {\n   if (qos > 0) writeNumber(stream, id)\n// Payload\n-  return stream.write(payload)\n+  if (byteLength(payload) > 0)\n+    return stream.write(payload)\n+  else\n+    return true\n }\n/ Puback, pubrec, pubrel and pubcomp /\n``` \nFYI: I opened the issue here so am posting my findings here.  Please let me know if it would be better to post the comments on the mqtt-packet issues.. OK, I guess I was in a little over my head trying to figure this one out.  I'll leave it to those who know the systems better than I.. ",
    "spierala": "Hi @EzPluto, did you solve the issue? Why do you use password: new Buffer(password) ?\nI have a very similar issue (https://github.com/mqttjs/MQTT.js/issues/769).. solved :) Also see: https://github.com/mqttjs/MQTT.js/issues/769. Updated to ActiveMQ 5.15.0 and now it works :)\nAlso see the ActiveMQ issue here:\nhttps://issues.apache.org/jira/browse/AMQ-6680\nThe final connection code looked like this:\nvar client  = mqtt.connect('wss:/domain.com:443/mqtt', {\n     username: 'username',\n     password: 'password'\n });. ",
    "developerX": "so what I get back from the message is { \"serial\": SERIALNUMBER, \"status\": STATUS  }. I did a work around by passing in the information as a string separated by commas, then used str.split() and that worked just fine.\nI validated the message coming back using a MQTT GUI and it picked up the JSON just fine.\n. @TechnicalSoup I didn't end up solving it but going a different direction that I personally don't like. I was able to get the json to render on the JSON.parse(message.toString()) but for some reason when I tried to use the object it ended up being blank when saving. . ",
    "TechnicalSoup": "@developerX did you end up solving this?\nWhen I pass JSON around using MQTT I usually parse the message in a try catch block, something like this:\njavascript\nclient.on('message', (topic, message) => {\n  try {\n    let incoming_object = JSON.parse(message.toString());\n  } catch (e) {\n    console.log('Error parsing JSON message: ' + e);\n  }\n}. Yep - I've used tslint in the past and it has a semicolon rule that can applied as always where semicolons must be used and never where they must only be used when necessary.\nI'm happy to propose changes to the declaration files, and even create a tslint.json file with some rules in it if you are looking to enforce a coding style for Typescript aspects of the project. There is a github repo that attempts to mirror the javascript coding standard in a tslint here\nMy personal preference for Typescript code is to include the semicolons as it seems to be more common when browsing through example code and other repos, however as the rest of this project omits them in the javascript code that may seems a little odd. \nIf @mcollina has a preference I'm happy to head in that direction.. Thanks for the input @sublimator. \nAs the rest of the code base omits semicolons it probably makes more sense to have them omitted from these declaration files too.\nI'll get a PR going to address this.. Appears there is already TSLint rules setup to catch these, however from a bit of digging the linter's approach to interfaces seems to be inconsistent.\nI've created a PR to remove the semicolons that I spotted earlier, and testing the change at my end to make sure the TS declarations behaved as expected (VSCode 1.19.1 and TS 2.6.2). All looked good.\n. @mcollina Yes there is, and it already included in the project. The tslint and tslint-config-standard modules are dev dependencies. The tslint-config-standard has a rule which checks for semicolons, and I expected that it would have picked these up. However there seems to be some inconsistency in the way this rule is applied for interfaces.\nThe linter will pick up the unnecessary semicolon for the cmd parameter in the example code below:\njavascript\nexport interface IConnectPacket extends IPacket {\n  cmd: 'connect';\n  clientId: string\n  protocolVersion?: 4 | 3\n}\nbut will not pick up the semicolons for the will object in the code below:\njavascript\nexport interface IConnectPacket extends IPacket {\n  cmd: 'connect'\n  clientId: string\n  protocolVersion?: 4 | 3\n  will?: {\n    topic: string;\n    payload: Buffer;\n    qos?: QoS;\n    retain?: boolean;\n  }\n}\nFrom what I can gather this seems to be because the interfaces and type definitions in these files don't actually transpile directly to javascript code, and are a tool to define the API for anyone who wants to use the module in a Typescript project.\n. I'd suggest that you create a callback function for the client.subscribe call so that the message published from your code isn't sent until you're subscribed to the topic... \nAs the client.subscribe is asynchronous you may be publishing you message before the subscription is done.\n. ",
    "ZeroSoulEater": "I don't know why this does work but I did the folling:\nclient.on('message', function (topic, message) {\n    let m = JSON.parse(JSON.parse(message));}. ",
    "sunwu51": "I find it.\n\njs\nclient.subscribe(topic,function(err,res){\n    if(err || res[0].qos===128){\n        console.log(\"sub fail\")\n    }\n}). ",
    "v-divya110": "I don't think I would be able to simulate a unit test because the error only arises when an external store is used. For instance, mqtt-level-store. In your case there is a Store which never returns an error in Store.put() so I'm not sure how to go about the unit test. . So I can use mqtt-level-store in the test case here? . okay! Thanks :+1: . I have added the test case and submitted a new pull request for this issue. yes I think I'll probably close this branch and create a new branch followed by a new pull request. There seem to be too many changes in this and I don't see a way of restoring it. It'll be easier to create a new branch instead. sorry about the mess up. Have added the test case including publish and store.put returning an error when it fails in the new commit. . I did not add any of those it only got indented. The test did not run otherwise. umm okay.. so you want me to revert the commit ?. I don't get what I should be doing given that the current master test/abstract-client has many more changes in it. Should I simply revert the merge and commit it again with my addition in the test script?. okay so I reverted the merge and checked in my code again.. ",
    "Maxattax97": "For reference the PR is #732. I have also ran into this issue so I'm hoping this is pulled soon to clean it up.. ",
    "xiaobo1215": "Thank you for your answer  My question is how to use emqtt in WeChat. is WeChat mini apps. So just to ask, how do we call this in a WeChat mini apps?. ",
    "MY201314MY": "And have you solved the problem?I also want to use the library?. It\u2019s the main page of the repository,Are you sure?. Thank you, I will see it clearly.. ",
    "michaeljota": "I will try to debug, and see if I can fix it. :).. Hi! I tried to debug, but I don't why this is happening. I'm sorry.. I have a interceptor in the server and it does not get through. . ",
    "kasvith": "happens to me also. I will try to do it, but not sure as im new to mqtt :D. ",
    "Qtianv587": "@mcollina So grateful for your answer! But there is still some questions about this.\n1. As you answered, I needn't set key, cert and ca in options. But how can I use the certificates in the browser js if I use the trusted certificates?  It seems no \"entry\" to import these certificates into the connection environment. Till now, I set these certificates into localStorage in chrome and then import them into environment.\n2. And more confused, the key file seems not a certificate and cannot be trusted by browser. Is it necessary to be imported into the environment?. @RangerMauve @mcollina \nWell, I use Mac OS to test my certificate and I have found some tricks to import certificate into environment. And I don't know whether it's harmful or not.\nFirst we need generate the .pfx certificate with the ca, cert and key mentioned above.\nI used the following command:\nopenssl pkcs12 -export -out certificate.pfx -inkey client1.key -in client1.crt -certfile cacert.pem\nAnd then add the certificate certificate.pfx into the trusted key tools of Mac. \nExtra step is needed for the key which is added during the certificate being added. I changed the permission of the key in the trusted key tools, which made every appliction able to access the certificate. (Windows OS may need another way.)\nOK, next is my trick. I add the following codes before the mqtt.connect(url, opts):\nbrowWS.wsConnect(\"wss://url/mqtt\", [\"mqtt\"]);\nThe function wsConnect(url, protocols) comes from the file Websocket.js in module ws of Node.js. Excuting the function will actually execute the function new Websocket(url, protocols) which in fact is the constructor function in Websocket.js. I used webpack to achieve it.\nMy purpose at first is trying to generate a websocket between mqtt and browser. But by executing the wsConnect(), the browser will notice you to import the certificate. \nThe function wsConnect() will fail and generate nothing, but the certificate will be imported. \nAnd the following step mqtt.connect(\"wss://url:8084/mqtt\", opts) will successfully be executed and also the browser client will connect to mqtt successfully.\nQuestions come. Could you please tell me whether it's harmful and safe in this way?. @RangerMauve \nOK, my first purpose is trying to generate a websocket by creating a new JS file  called testWebsocket.js and using the following code:\n```js\nvar WS = require('ws');//ws is a module original from Node\nmodule.exports = {\n    wsConnect: function (url, protocols) {\n        return new WS(url, protocols);\n    }\n};\n```\nAnd then I use webpack to transfer this file to another JS file which could be executed in H5.\nwebpack testWebsocket.js ./browWS.js --output-library browWS\nI have detected ever that the url was wss://host:8084/mqtt and the protocols was [\"mqtt\"].\nI 'required' the browWS.js file into environment using ",
    "goliatone": "I think this is because the event listener for error attached to the parser is added after we pipe into the stream. \nIn the MqttClient method _setupStream, if we move the on('error') upwards, and register the handler before this.stream.pipe(writable), we are good.. @RangerMauve  Sure. I did not see any tests to cover this case in the client.js test suit. \nFor me, the complicated part will be to figure out how to test this behavior.. ",
    "RickCarlino": "@RangerMauve Thanks! I was able to verify that the issue is indeed on my end.. ",
    "felipebraz": "Weird, but there is no pg on my project... I'll review my code, sorry for the mistake . ",
    "nsriram": "Thanks Matteo. We are using mqttjs with rhel-amq (wrapped on apache amq).\nWhen the amq is restarted, we see the subscriber hanging.\nAny inputs on this will be appreciated.\nSteps.\n1. Start Rhel AMQ \n2. Start producer\n3. Start Consumer\n4. Watch for messages being printed\n5. Stop AMQ\n6. Start AMQ\n7. Subscriber prints ('i have subscribed'), but the messages are not being received.\nNote : At this point if the subscriber is killed and restarted, it gets all the messages.\nSubscriber\n\n```js\nconst mqtt = require('mqtt');\nlet brokerUrl = 'mqtt://localhost:1883';\nconst client = mqtt.connect(brokerUrl, {\n  clean: false,\n  clientId: 'solo-consumer',\n});\nclient.on('connect', function () {\n  console.log('i am going to subscribing');\n  client.subscribe('HelloTopic', { qos: 1 }, () => {\n    console.log('i have subscribed')\n  });\n});\nclient.on('message', (topic, message) => {\n  console.log(message.toString() + '\\n');\n});\n```\nProducer\n\n```js\nconst mqtt = require('mqtt');\nlet brokerUrl = 'mqtt://localhost:1883';\nconst client = mqtt.connect(brokerUrl, {\n  clean: false,\n  clientId: 'solo-producer',\n});\nlet msgCount = 0;\nclient.on('connect', function () {\n  setInterval(function () {\n    const payload = 'Message : ' + (msgCount++);\n    client.publish('HelloTopic', payload, () => {\n      console.log(payload);\n    });\n  }, 3000);\n});\n```\nThanks,. Hi Matteo, \nThanks for the response.\nThe same problem occurs on Mosquitto as well. Have tested it.\n\n\nIs the client emitting an 'offline', 'connect' or 'reconnect' events?\n- We are using a node client with mqttjs. No special events are emitted. Can you point to any reference ?\n\n\nSteps to recreate\n\nStart Mosquitto (or) Rhel AMQ 7 broker (mqtt protocol).\nCreate a producer mqttjs client with {clean : false} in options & post messages with {qos : 1}.\nCreate a consumer mqttjs client with {clean : false} in options & subscribe messages with {qos : 1}.\nOnce subscriber starts receiving messages, shutdown the broker and start again (restart)\nThe client connection hangs - \n\nNOTE : The connect & subscribe block do execute, but the 'on message' does not receive any. The client is expected to be restarted.\n(More Finding) : A forced 'unsubscribe' inside the 'connect' callback and 'subscribe' after it, works as expected on broker restarts.\n- But in large applications, we cannot do this as there will many topics to unsubscribe and subscribe again.\nThanks. Yes. Persistence is enabled on both.\n(I even tested the mosquitto broker with 'max_queued_messages 0' config, by shutting down and restarting the consumer (having the broker all the time running), to ensure all the messages published during the down time are delivered).. ",
    "igor-d-deus": "Can't reproduce it anywhere except production server. But after updating to latest release and switching QoS of subscription to 0 it began work. May be it's not a bug or it was fixed somehow. But I tested 250 000 topics with retain at local server and none of msg was lost.. I'll close this issue because it impossible to reproduce.. ",
    "VanKurt": "Hi,\n192.168.178.32 is the address of the Raspberry running the MQTT Server (Mosquitto). My Android App can connect to the Raspberry Pi at this address just fine and publish/subscribe topics. So on that end everything seems fine.\nAlso the MQTT Server requires no username/password (since it is only running in my home network). \nI also have a bunch of arduinos that publish/subsribe MQTT topics using the exact same server IP, port and protocol.. ",
    "teemupiiroinenwirepas": "Yes, you are correct. This seems to be an issue with RabbitMQ and MQTT plugin.\nhttps://github.com/rabbitmq/rabbitmq-mqtt/issues/154\nThanks. ",
    "caflulu": "I agree with you somehow, probably,  I had somthing wrong with my question. My actually question is that when I want to use the same topic in other pages, the callback of this page in the handler,Which I want to detroy it. So I can do other things in the other pages. So in some way how to unbind the old event handler.. ",
    "addedjacky": "How can i unbind event handlers, like off('message') .. @austin-rausch Got it, many thanks. ",
    "johnnytolengo": "interesting issue.. seems \"unbind\" to not exists.\nwill be fine if when you call the event it returns the pointer to it like:\nvar myevent = client.on('message', callback..);\nand later unbind the listener with some:\nmyevent.off()\nWith this funcionality we will be able to recall the 'message' event without returning multiple times the same callback.\nAny idea how to do it?\n. ",
    "RelaxLiu": "@mcollina Thank you for your reply\nI want to know what is the reconnection mechanism of mqtt. At the beginning, I have already created a subscription and broken network. Do I need to cancel the previous subscription when I want to connect to the Internet, or do I have other ways to deal with it?. ",
    "ayushsharma82": "UPDATE: On further Studying the Issue, I Got to know that it is Duplicating the message rather than Appending. Example: if i use the function 5 times, then the recent Message gets duplicated 5 times.. @erichonkanen  The Library was never intended to be wrapped inside a function. The Solution was to create a array of pending tasks and then listen for 'on' event outside function and execute queue as the messages come. \n. ",
    "erichonkanen": "I may be encountering the same problem, @ayushsharma82 did you have any more insight into this?. ",
    "einargs": "If you're referring to altering the username/password you connect with, I'm having some success with manually changing the fields in the client's options field (e.g. client.options.password = newPassword;). However, this is undeniably a hack, and I'm hopping that there's another, better way to accomplish the same thing. For example, Client#reconnect accepts an options argument where you can pass new stores in. It would be nice if we could optionally pass an object containing options that we want to update.\nPart of the reason that this method concerns me is that the initial options object is stored in the streamBuilder wrapper that the client calls to build a new connection. As such, if the options object is mutated, there's no guarantee that the options the connection implementation is using will match--which, as far as I can tell, doesn't matter for things like the username and password fields. However, \"as far as I can tell\" makes me nervous.\nFortunately, looking through the code, the streamBuilder (the wrapper the client calls to get a new connection) has the client passed to it when it's called--which means that the wrapper could just look at the client's options object instead of using the initial one.\nOf course, I'm unfamiliar with the codebase, so there could easily be stuff I'm missing.\nP.S. apologies if I screwed the terminology up--\"connection\"/\"connection implementation\" is probably the wrong word, but I couldn't think of anything better. I'm basically referring to the result of streamBuilder, which should hopefully be clear from context/the linked code.\n\nOn a side note, I should probably explain why I need to be able to update the password field. Google Cloud IoT Core requires that you send a signed JSON web token in the password field to authenticate the device. This token has a maximum lifetime of twenty-four hours (plus skew). This limits the usefulness of a stolen token, which seems (to my inexperienced self) rather reasonable.\nHowever, this need to update the password field means that I either need to basically rebuild the client every time the token expires--which is, uh, non-optimal--or hack around with the options object, which seems to work, but makes me nervous that I'm going to run into an error later on down the road where I need to use a different protocol or modify a different field and everything's going to break in some really subtle and hard to diagnose way.. Sure. I'm not sure how quickly I'll be able to get it done--I'm trying to catch up on a backlog of school work--and I've never actually made a pull request before, but I'll try to have something by Friday? Probably sooner, if I'm honest.. @mcollina where/how should I ask questions about what I should implement? For example, where should I ask if I should try to extract functionality related to loading-in options into a separate private method?. Does that mean that I should open the PR before I have any changes made?\n(Apologies for the silly/basic questions.). ",
    "ivands": "I also want to use this lib with AWS IoT.\nThe problem am facing is as followed.\nMy streamBuilder function returns a promise that will later resolve.\nThis is required to lazily refresh AWS IAM credentials and sign the URL.\njavascript\nconst client = mqtt.MqttClient(function(){\n  const credentials = await IAM.credentials();\n  const signedUrl = ...\n  return websocket(signedUrl, [ 'mqttv3.1' ]);\n});\nCan we get promise support for the streamBuilder parameter?. Thanks @RangerMauve that solution works perfectly well.. I need this feature aswell.\nPlease add. ",
    "collindutter": "@ivands would you mind sharing some relevant code snippets? I haven't worked with streams much so I'm still a bit lost.. ",
    "reejinbouk": "I'm trying to connect using node.js as in https://github.com/mqttjs/MQTT.js/tree/master/examples/tls%20client\nI've used certificates for my site, but get this error:\nError: Unknown protocol for secure connection: \"ssl\"!. ",
    "gautaz": "@mcollina Thanks !\nIt can wait a few days, the project using it is a work in progress :-).. I am close to send the PR but since I have added additional test cases, I was able to reproduce a bug on my last PR (#763).\nDo you want me to fix this in the same PR or do you want me to put this on a separate issue?. Sorry for the delay, the bug is fixed by #770 and the end event is added by #771.. Wow, that's strange, my modification has nothing to do with QOS.\n@mcollina Any idea on what happened ?. OK, I'll close and reopen the pull request just to restart the build.. OK, I will try to reproduce in a Docker environment with node v4.3.2.\nI'll keep you posted.. @mcollina I have tried to reproduce multiple times with nodesource/wily:4.3.2 but I did not succeed.\nIn the meantime all tests pass now on Travis. I guess I'll have to find a slower platform to reproduce.\nDo you still want to hold on this issue or is it OK for now ?. OK, here tests seem to fail due to the bug fixed by #770.\nThey did not fail at first on my development platform, it must be related to the way asynchronous operations interleave.\n@mcollina Once #770 is OK, I will merge it in my branch before asking for the pull request again.. @mcollina The same pattern seems to occur each time the CI build fails:\n\nsome jobs are put on hold by Travis (I guess due to unavailable resources)\nthe tests run by these jobs have started and have already initiated a MQTT connection\nwhen Travis resumes these jobs too late, these connections fail with ECONNRESET\n\nIs there a way to tell Travis not to start the six jobs at once but limit the number of concurrent jobs to, let say, 3?\nThis will not resolve the issue but might perhaps mitigate it.. Another way to mitigate the issue would be to increase the connection timeout when the tests are run by Travis.. @mcollina Since the build was failing due to CI issues and not to the PR itself, do you want me to change anything in the PR or is it OK for now ?\nI tried to find a way to fix or mitigate the CI issues in the Travis docs but I did not found anything yet.. I had to rewrite a bit my branch history to fix the merge issue.\nStill hitting the CI fail wall, I'll try again by closing/reopening.. @mcollina The merge issue is fixed and all CI checks are finally OK :-).. Woohoo !\n@mcollina Thanks for your feedback and your support!. You are right, I have blindly only considered initially the default store implementation but I have also to consider any external implementation.\nI will pass any argument as is (to the end event as well).. Done with no error on end event :-).\nI have also added a test to check that the error is passed up to the end() callback.. ",
    "anthonyvercolano": "Looking at this problem a bit.  My thinking is that code such as the following should probably be inserted after line 725 in client.js (at the beginning of  _cleanup).\nif (this.outgoing) {\n    this.outgoing.forEach((cb) => {\n      cb(new Error('Connection closed'))\n    })\n  }\nI'm not trying to make this a pull request.  Just hoping to hear an opinion as to whether I need to be doing a lot more work to maintain the other various structures holding information related to packets such as the various stores.  My thinking is no, but, I'm new here.. As it stands, even with my changes, with a reconnect value > 0 it will indeed attempt to resubmit those packets in the output store.\nWould it be acceptable to only flush the packets in outgoing if reconnect = 0?  Should it also delete the \"matching\" packets in the output store?\nWith respect to the MQTT protocol, is it EVER reasonable to return with an error some packet with qos > 0?\nIf packets are allowed to complete with an error, wouldn't cleanup(true) be the best place?. >> As it stands, even with my changes, with a reconnect value > 0 it will indeed attempt to resubmit those packets in the output store.\n\nwhat do you mean by reconnect > 0?\n\nI should have said reconnectPeriod  as in:\n  var client = mqtt.connect({\n    port: port + 72,\n    host: 'localhost',\n    keepalive: 1,\n    connectTimeout: 350,\n    reconnectPeriod: 0\n  })\n\n\n\nWould it be acceptable to only flush the packets in outgoing if reconnect = 0? Should it also delete the \"matching\" packets in the output store?\n\nPackets in the store should never be deleted if clean: false, and with clean: true the logic is already there.\n\nDeleted yes, but the callbacks never called.\n\n\nWith respect to the MQTT protocol, is it EVER reasonable to return with an error some packet with qos > 0?\n\nonly if we are dumping them from the queue, we should call the callback with an error. And only if clean: true.\nThis gets complicated.  Who is doing the reconnect?  Is it the reconnect logic built into mqttjs?\n\nIf packets are allowed to complete with an error, wouldn't cleanup(true) be the best place?\n\nwhat do you mean?\n\nClearly in your response to the issue #765 you seemed to agree that completing packets was a \"miss\".  What did you think the scope of the miss was?\n\nIn reply to: 371889654 . Left as a comment in the @periclesroalves pr:\nClean is the only thing that should matter here.\nIt is not at all clear why the outgoing store being supplied by the application should affect the whether the callbacks are called.\nIf the reconnectPeriod is zero, then the calling application should still be able to call reconnect. The session should still be restored.\nA further concern. Pierre and I were looking at the reconnect code and we believe there is a problem in Mqtt.prototype.reconnect. If Mqtt.prototype.reconnect is invoked with no application supplied stores in the option parameter, then the internally created stores will absolutely be wiped out by the creation of new stores. This would seem to violate the clean == false semantics which should cause a publish to be resent on successful reconnect. Is there some documentation that states otherwise?\n. Made a top level function and squashed.. ",
    "enVolt": "Broken is emqttd. \nFor now, I've put a check on the size of the message which is being published. I might have missed the point, that it could be a broker specific thing. \nAs far as I'm able to understand the code, reconnect loop is being handled at client.js#L208, and publish method will not get to know that. I guess the expected behaviour here is that in case the client gets a disconnect (or broken), it will eventually connect and the message will be published. . It's part of emqtt default config (source). ",
    "mitsos1os": "We are currently using MQTT.js in an edge router and face the exact same problem. The thing is that after trying to send the larger payload, the ping interval gets shifted, but the payload is not sent successfully, so the MQTT broker does not receive the keep alive heartbeat of the client and disconnects it...\nHave you found the cause of the failed publish when payload ~ 64K?. @enVolt Unfortunately this is not the case for us.\nWe are using mosca broker for  our MQTT service and the thing is that the payloads are sent when normal connectivity exists, but whenever a lower quality connection is available, not even partial data arrive of the bigger payload (I am checking this by attaching a data listener on the raw underlying TCP socket of the MQTT client server side). ",
    "andagent": "I was checking docs and other git issues and I just found out the solution. It is to change server.publish('presence', 'Hellomqtt'); to \nserver.publish({\n      topic: 'hello',\n      payload: new Buffer('world'),\n      qos: 1 // this is important for offline messaging\n    }, null, function done() {})\nThank you! . ",
    "Eric24": "@mcollina : Maybe, but I'm not exactly sure where to start. It's my understanding that the broker will keep sending messages until its internal prefetch/inflight count is reached. How can the client \"control\" this? There does not appear to be any standardized way to override the server's setting on this during connect or subscribe. If the server can't be overridden, how can the client throttle messages?. @mcollina - Just so I'm sure I understand, does that mean that all messages are immediately puback'ed, independent of my event listener? If so, is there an example somewhere of using handleMessage in this way? None of my searching turned up anything helpful.. OK. Based on that, I don't think I need to do anything here. There are no async operations in my on-message listener, so the existing puback sequence seems like it will do the job.. ",
    "RameshRM": "i am using plain simple npm i\n. there is a package-lock.json, should i remove the lock and do npm install ?. no luck, same error . I am running my code under setImmeidiate(tryEstablishClient());. It is the release of mqtt-packet^5.5.0 causing this issue. I have downgraded to 5.4.0 and that works,\n@mcollina Can you check ?. @mcollina Pls let me know , what would be causing this i can check and see if i can send a pr. ",
    "coloz": "it,s same error,TypeError: nextTick is not a function\ni use npm update to update mqtt,then get the error. i have same error. ",
    "shaocongcong": "All the problems have been solved\nThe idea is to send 'mqtt' as default subprotocol and 'mqttv3.1'if in the mqtt.connect options for MQTT 3.1 are passed:\n{\n  protocolId: 'MQIsdp',\n  protocolVersion: 3\n}. ",
    "dushyantbangal": "The messages are stored only if you have the the retain:true flag.\nYour publisher does not directly send the messages to the subscribers.\nPublisher communicates with the broker. So the publisher doesn't really know how many subscribers exist.. If you mean https://github.com/mqttjs/MQTT.js#mqttstoreoptions then yes, but that was kinda my last option. After I posted this question, I looked into it a bi deeper and I think mqtt-nedbb-store should help me do what I need to.. @matiasdecarli do you mean the callback will be fired after 10 secs if I set keepalive:10 and I haven't received PUBACK in that time?\nBecause my main issue is callback not being called.. Yes, the reconnection is not an issue for me, it's being handled automatically by the library. Callback with error is what is needed, which I think might be a bit complicated to implement.\nAnyways, this issue is mostly solved by using store.\nPackage maintainers can take a call whether to close this issue or not.. @malishahi Sometimes the network will go down and the client will still say its connected, because it hasn't performed its keepAlive yet.. Sorry, this was the aws-iot-device-sdk issue. It was has its own in-memory queuing and doesn't forward the call to mqtt.js. ",
    "freebyron": "Should I add some unit tests ?. ",
    "aalibasic": "@RangerMauve - yes when i reconnect to the internet the mqtt client keeps hitting the transformWsUrl -> then closing -> then reconnecting.\nI have tried reconnectPeriod of about 10000\nAWS show these logs:\n2018-02-28 20:00:43.111 TRACEID:1PRINCIPALID:A [ERROR] EVENT:MQTTClient Subscribe TOPICNAME:/this/testing/bro MESSAGE:Subscribe Status: CLIENT_ERROR. @RangerMauve I filed a ticket with aws as this seems to only happen when using aws iot as a broker. Using an aws ec2 instance with mosquito works fine.\nHave you guys tested the scenario where:\n1. Using aws iot\n2. Subscribe to several topics\n3. Ensure resubscribe is enabled\n4. You disconnect from the internet until the transformWsUrl function gets called\n5. From transformWsUrl function return a new signed url for aws iot\n6. Reconnect the internet connection\n7. Loop begins\nIt seems like the client should show some information about why it is closing the connection and then reconnecting.. @RangerMauve - it does not hit the error call back it just seems to cycle : close, reconnect, close ..... That would be awesome!\nEdit:\n@RangerMauve I made this change locally, but the stream.on(\"error\") does not get called in my scenario.\nI used this code: this.stream.on('error', this.emit.bind(this, 'error'));\nIt just cycles between close, reconnect - is there another place where I can get error messages on why the connection was closed.. Turns out my issue was with aws iot. They only allow 8 subscriptions in a batch.. Works for me, thanks for the help!. ",
    "emin93": "MQTT.js version: 2.15.3\nReact Native version: 0.53.3\nJS console: No logs at all\niOS console:\n2018-03-01 15:15:08.553 [info][tid:com.facebook.react.WebSocketModuleQueue][RCTSRWebSocket.m:520] SocketRocket: In debug mode.  Allowing connection to any root cert\n2018-03-01 15:15:08.553896+0100 KitchenSink[37021:313335] SocketRocket: In debug mode.  Allowing connection to any root cert\n2018-03-01 15:15:10.962 [info][tid:com.facebook.react.WebSocketModuleQueue][RCTSRWebSocket.m:520] SocketRocket: In debug mode.  Allowing connection to any root cert\n2018-03-01 15:15:10.962015+0100 KitchenSink[37021:313335] SocketRocket: In debug mode.  Allowing connection to any root cert\n2018-03-01 15:15:12.938 [info][tid:com.facebook.react.WebSocketModuleQueue][RCTSRWebSocket.m:520] SocketRocket: In debug mode.  Allowing connection to any root cert\n2018-03-01 15:15:12.937764+0100 KitchenSink[37021:313333] SocketRocket: In debug mode.  Allowing connection to any root cert\nI am running it from within the app.\nI also saw the thread #573 and tried a lot of it, but always when i thought i got one step closer, another error happened.\nSteps to reproduce:\n1. Create a new empty React Native app (react-native init MyTestApp)\n2. Install mqtt as a dependency (npm i mqtt --save-exact)\n3. Run this inside your terminal: (cd node_modules/mqtt && npm i && webpack mqtt.js --output-library mqtt --output-library-target commonjs2 --output-filename mqtt-browser.js)\n4. Make sure your App.js looks something like this:\n```javascript\nimport React, { Component } from 'react';\nimport { Text } from 'react-native';\nimport mqtt from 'mqtt/dist/mqtt-browser';\nexport default class App extends Component {\n    componentDidMount = () => {\n        const client = mqtt.connect('wss://iot.eclipse.org');\n    client.on('connect', () => console.log('connected')); // No console.log\n    client.on('error', error => console.log(error)); // No console.log\n};\n\nrender = () => (\n    <Text>\n        My MQTT Demo app!\n    </Text>\n);\n\n}\n``. Thanks for your comment, it seems like i missed the 1.14.1 part. Now I'm getting a new errorCould not determine host. Specify host manually.. I looked up in the MQTT.js code why this error gets thrown and it seems like that's the case whendocument` is not part of the globals. Just like in the other thread.\nI then tried to connect like this, but i still got the same error:\n```javascript\nimport mqtt from 'mqtt/dist/mqtt-browser';\nconst client = mqtt.connect({\n    servers: [{ host: 'iot.eclipse.org', port: 443 }] // I also tried wss://iot.eclipse.org as host\n});\n```\nAs @rclai did, I then also added the polyfill and this seemed to fix the issue.\nBut now I'm stuck at the same issue as before. No console logs. I will try to investigate the issue a little bit further and post updates.. ",
    "alduxvm": "of course... I'm using EMQ as broker, the code I use to connect is:\n```\nvar mqtt = require('mqtt')\nvar client  = mqtt.connect({\n  host: 'localhost',\n  port: 8083,\n  username: 'sim',\n  password: 'sim',\n  clientid: 'test12345'\n});\nclient.on('connect', function () {\n  client.subscribe('device/#')\n});\nclient.on('message', function (topic, message) {\n  console.log(message.toString())\n});\n``\n. If I try the connection on the console only (no browser), I can connect changing the port from8083to1883`. yes, I make sure that my broker works with ws, I tried my broker using this client: http://www.hivemq.com/demos/websocket-client/ and the connection works (I can subscribe and publish)\nI added the protocol option but still no luck.... Sorry for the delay in replying, my EMQ is 2.3.4 and the MQTT.js is 2.16... I stopped using it due to the error.. ",
    "spydmobile": "What ever happend to this, I have the exact same issue I have EMQ Broker that works with everything except this lib via websockets, gives the same error as OP.. :( ok, what client js mqtt did you switch to?. ok, I just rewrote using Paho, and it worked, but I would rather work to get mqttjs working.... @RangerMauve yes quite likely. this lib has no problems connecting to EMQ from the node side, only the browser side.\n. ",
    "tartavull": "I'm having a similar problem where nodejs code works correctly but the browser  version of the same code doesn't.\nmqtt.js:8236 WebSocket connection to 'wss://mqtt.googleapis.com:8883/' failed: Connection closed      before receiving a handshake response. It seems that Google Cloud IoT doesn't support MQTT over websockets [1].\nThank you @RangerMauve \n[1] https://stackoverflow.com/questions/49418312/is-it-possible-to-connect-to-the-google-iotcore-mqtt-bridge-via-javascript#comment86909751_49932371. ",
    "periclesroalves": "@mcollina, I exposed the same concern about reconnection in the original issue. However, it's always safe to call the callbacks with an error in the following scenario:\nConnection was lost AND reconnectPeriod > 0 AND (options.clean == true OR the client did not provide a custom store through options.outgoingStore, i.e., he's using the library internal store implementation).\nIn this scenario, the only way a reconnection can happen is if the user explicitly calls client.reconnect(). In this case, the store will either be clean (because of the clean flag) or the store is gonna be reinstantiated (because the user did not provide a custom store).\nI think @anthonyvercolano's PR is good to go if these simple conditions are added to his code. Also, I think this would be the expected behavior for users that are explicitly telling the library not to reconnect automatically.. Well, these minor changes should do it. Maybe @anthonyvercolano want to add it to his PR, so we don't need a new one.. You're right, @anthonyvercolano. What I had in mind was the behavior already implemented in the library, but from the MQTT spec point of view, the only thing that should matter is the clean flag.\nIf we look at the spec, then we have more problems in the code:\n\nIf CleanSession is set to 0, [...] The Client and Server MUST store the Session after the Client and Server are disconnected [MQTT-3.1.2-4].\n\nAs you pointed, if the user is using the internal store, the reconnect method will wipe the stores. According to this spec it shouldn't be doing that, regardless if the store is user-provided or internal.\n\nIf CleanSession is set to 1, the Client and Server MUST discard any previous Session and start a new one. This Session lasts as long as the Network Connection.\n\nThe library does not clear the stores across automatic reconnections. The only case where it does it (except from the one mentioned above) is when the end method is called explicitly. According to this spec, the library should clear the stores even if it tries to reconnect automatically.\nIf these two things are fixed, then your statement is right: you can clear the callbacks upon disconnection simply based on the value of clean. Until then, we need to check reconnectPeriod\n, or else you'll have a mismatch between the content of the stores an the callbacks.. ",
    "jkinghed": "Not sure I have the required skills, but I'll try to find time to look into it. Thanks.. ",
    "senthil5053": "I have exact same issue in my application as well. \n@stephendeyoung  Did you find any solution or work around for this ?. @mcollina Could you please help here. ",
    "stephendeyoung": "@senthil5053 no i didn't unfortunately. Sorry I can't help.. ",
    "aaamitsingh": "Any update on this issue?. Thanks for your quick reply @mcollina. Let me explain the case.\n1. I have subscribed to a particular topic i.e 'test/1234/status' then published message from MqttBox and I have successfully received the message.\n\nThen After sometime I have unsubscribed the topic 'test/1234/status' by below code but still I'm getting messages to that topic.\njs\nclient.unsubscribe('test/1234/status', function (err) {\nif(err){\nconsole.log(err);\n}else{\nconsole.log(\"unsubscribed\");\n}\n});\nCan you please tell me what I'm doing wrong or there any other issue?. Thanks, @4rzael @mcollina. I have found the issue the issue was in my code. \n",
    "svogl": "I ran into the same issue and had a look around. I see memory use increasing in a minimal example that just receives (frequent) messages in an empty message handler. looking further, I suspect calling the work function with process.nextTick in lib/client.js \nhttps://github.com/mqttjs/MQTT.js/blob/0379bf53a8ec803b0ac3ccbe94e22467abe57213/lib/client.js#L259\ndirectly calling work() instead results in a much flatter memory consumption line. I don't know which side-effects this would cause when you're reconnecting with many messages in the queues though.\nAny ideas on this @stephendeyoung ?\nSimon\n. I have a nodejs 10.15.0 running on my mac, on one of our ARM boards (where memory hurts), there's a node 9.8 running at the moment; same hack applied, memory consumption seems meander in a stable range\n. I created a small test set and a few inspector screenshots saved in this gist: \nhttps://gist.github.com/svogl/4425b31e45b64a5fbb65a83e6c7d7946\nI call gc() some times before collecting dumps to compare them, there is no other traffic except 1k packets sent from the sender code.\nSome of the packets seem to be coming from inspector itself, but I see many occasions of leftover  objects coming from a) copied buffer lists from bl/bl.js. and b) many process/nextTick generated small code blocks.\nStill, I might be looking at a totally wrong corner, ideas welcome :). If you look at the gist link, I forced the gc to run with \nnode --inspect --gc-interval=100 --trace_gc --expose-gc reader.js\nand explicitly calling gc() ; with the --trace_gc you get a line of information whenever it ran, so yes, it did run.. Set aside the root cause of the leak, I rewrote nextTickWork to call work only when there are packets left to process - \nfunction nextTickWork () {\n    if (packets.length) {\n      process.nextTick(work)\n    }\n  }\nseems that solves it for me so far and creates less objects on the fly (good for embedded systems :) )\nDoes this cause any adverse side effects I am not aware of?. ",
    "EnricoGiordano1992": "Yes, mqttClient is the same as self.client.\nI've added a check to my subscribe function, so my code now is:\n```javascript\n           self.client.on('error', function (err) {\n             console.log(\"Mqtt error\", err)\n             self.is_connected = false;\n           })\n           self.client.on('close', function () {\n             console.log(\"Mqtt close. Try to reconnect\")\n             self.is_connected = false;\n             self.client.reconnect()\n           })\n           self.client.on('connect', function (connack) {\n             self.is_connected = true;\n             console.log(\"Mqtt connected\",self.client.connected)\n           })\n...\nsubscribeTo(mac: string, topic: string)\n{\n  var self = this;\n\n  //NOT CONNECTED?\n  if(!self.is_connected){\n    console.error(\"warning! mqtt not connected!!! retry...\");\n    self.client.reconnect()\n    setTimeout(()=>{\n      self.subscribeTo(mac, topics);\n    }, 1000);\n    return;\n  } else {\n    console.log(\"is connected, so np!\");\n  }\n\nconsole.log(\"Try Sub to topic \", mac+topic);\n            mqttClient.subscribe(mac+topic, {qos: 1}, (err, granted)=>{\n              if(err){\n                console.error(\"error: \",err);\n              }else {\n                console.log(\"granted: \", granted);\n              }\n            });\n```\nnow I see that sometimes I lost connection to my mqtt broker, in fact, I have this error:\nWebSocket connection to 'ws://157.27.254.149:8085/mqtt' failed: Connection closed before receiving a handshake response\nas you see, I try to reconnect with self.client.reconnect() function.\nI'm using EMQTT broker.. Ok, I removed all \"reconnect\" in my code.\nI have noticed that mqtt client stop to receive data when in server log appeared this string:\n09:08:34.699 [error] WsClient(157.27.147.80:45719): Unexpected Info: {'EXIT',<0.16664.508>,{shutdown,conflict}}\nAnd reconnect after a bit.\nWhat does it mean?. solved: I accidentally used the same client id for my devices, so did not work for that. Thanks for the support!. ",
    "semireg": "This is somewhat unrelated to the root cause (above), but I came here looking for answers to a similar issue I was having. Turns out, if you're using windows cmd.exe as a command-line, avoid using single quotes for arguments. Always use double-quotes... weird things happen with mosquitto_pub/sub when using single quoted arguments.. ",
    "Diamundo": "Update: I've now switched to a different public broker (broker.hivemq.com) and done the same trick, albeit slightly different topics (but the same channels \"one\" and \"two\"), and at first glance the issue now seems to be fixed. Perhaps the issue was with the broker - though trough a Windows Application MQtt.fx v1.6.0 I'm also subbed to the old broker and that doesn't repeat the messages either as it did with my Node.js server.. I've given it some more thought, and I've come up with the following thought pattern:\n- A client has a sort of timeout time set, with a default of 30 minutes. \n- After these 30 minutes, the client times out.\n- Since I don't give any sort of identification, I'm anonymous\n- Since I do reconnect, I'm another anonymous client and receive the retained messages\n- The additional ~40 seconds come from the connecting, receiving published messages and other things. After that, 30 minutes of timeout start.\nSolving this would be to:\n- add some sort of identification.\nIn my case, I successfully solved the issue by altering settings.js:\nthis.mqtt.options   = { \"qos\" : 2, \"clientId\" : \"myClientId\" },\n@mcollina does this sound reasonable?\nEdit: I have now received both messages again, this time after 2h10m... Let's see what happens around 4.30pm\nEdit 2: 30 minutes and 49 seconds later, we receive the two retained messages again. Hmmm.... Hi @karlp, I don't explicitly set a keepalive (as stated in the OP, those are the only options I use). I just think that's the case. I'm not sure if the connection is still alive, however whenever I randomly send extra messages it does come through so that leads me to believe that yes, the connection is still alive. Only thing sent to console.log is the received messages.. ",
    "karlp": "do you actually have a 30 minute keepalive?  are you sure you're connection is actually still alive?  that's going to have been killed by most tcp cleanup I would have thought.. ",
    "suculent": "It doesn\u2019t due to the stream-completion  dependency. Even with disabled streaming env-var. \nOdesl\u00e1no z iPhonu\n\n\n\n2018 v 16:03, Matteo Collina notifications@github.com:\n\n\n\n\nI think the latest one should still run fine. Let us know!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It's not MQTT itself, it's the readable-stream which is missing a file.\n\nhttps://github.com/nodejs/readable-stream/issues/326\nI was able to fix it with:\nroot@Omega-3C75:~/thinx-firmware-js-master/node_modules/mqtt# npm install readable-stream\nreadable-stream@2.3.5 node_modules/readable-stream\n\u251c\u2500\u2500 process-nextick-args@2.0.0\n\u251c\u2500\u2500 safe-buffer@5.1.1\n\u251c\u2500\u2500 string_decoder@1.0.3\n\u251c\u2500\u2500 util-deprecate@1.0.2\n\u251c\u2500\u2500 core-util-is@1.0.2\n\u2514\u2500\u2500 isarray@1.0.0\n. ",
    "mkamrani": "I had to call client.end after publishing the message.. ",
    "matteoPhre": "@mcollina No, I'm actually able to send messages. I can see the messages published in the cloud platform.\n@RangerMauve Is possible to enable full log on mqtt?\n. I can not check logs because I do not have control. I can only see published data that reach the broker in the cloud, and actually, they arrive.\nI have wrapped mqtt.js into two support classes (one for each broker) that call simply:\n1)   this.client.publish(topic, JSON.stringify(message));\n2) this.clientThing.publish(topic, JSON.stringify(message));. @RangerMauve I can see that second client disconnect from listeners on 'offline','disconnected','reconnecting' that logs simple messages. I cannot check what goes wrong.\nI'm asking at Cloud Platform Owner to give me access to check logs.. FYI I've fixed the issue with these configs:\njs\n\"options\": {\n        \"port\": 18883,\n        \"host\": \"tcp://***.***.*.*\",\n        \"username\": \"admin\",\n        \"password\": \"*****\",\n        \"clientId\" : \"mqttjs_gw\",\n        \"protocolId\": \"MQIsdp\",\n        \"protocolVersion\": 3\n    },\n    \"thingOptions\": {\n        \"port\": 8883,\n        \"host\": \"mqtts://\",\n        \"username\": \"dev-******\",\n        \"password\": \"********\",\n        \"clientId\" : \"mqttjs_thing\",\n        \"protocolId\": \"MQTT\",\n        \"protocolVersion\": 4,\n        \"keepalive\": 120,\n        \"clean\": true,\n        \"reschedulePings\": true,\n        \"connectTimeout\":30000,\n        \"reconnectPeriod\":1000\n    }\nNow the client is always connected, even after publication.\nThanks anyway for the support.\nM.\n. ",
    "simonbuchan": "MQTT requires brokers to disconnect on protocol violations, including invalid connect packets: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718110\nSpecifically, conack 3.2.2.3 has:\n\nIf none of the return codes listed in Table 3.1 \u2013 Connect Return code values are deemed applicable, then the Server MUST close the Network Connection without sending a CONNACK [MQTT-3.2.2-6].\n\nFor some reason, AWS IoT treats unauthorized packets by dropping the connection rather than a non-zero return code conack, probably for symmetry due to [puback 3.5.5]:\n\nIf a Server implementation does not authorize a PUBLISH to be performed by a Client; it has no way of informing that Client. It MUST either make a positive acknowledgement, according to the normal QoS rules, or close the Network Connection [MQTT-3.3.5-2].\n\nSo it's likely to be something similar with OP's broker.\nSo MQTT.js should probably treat dropped connections after connect but before receiving a conack as a connection rejection, and definitely shouldn't retry indefinitely, and possibly should be careful about reconnecting before getting a puback.. ",
    "yellgreniff": "nvm, i didn't specify the port, now it works. ",
    "ASwingler": "Thanks for the response RangerMauve. I was indeed talking about client-side messaging. I understand the messages are coming from the broker - I was hoping that the broker would be able to pass the clientId of the publisher when a subscriber receives a message.\nYou're right that I could include the information in the payload and indeed I already do. I was hoping to be able to validate the payload against the clientId. No matter - I'll figure out another way. Thanks again.. Some good ideas there. I do already have authentication (and TLS) and a unique portion of the Client ID is already included in the topic. \nI'll check out mqtt-emitter. Looks like an interesting project.. ",
    "yeiniel": "I'm sorry if i create this issue and forgive me if i'm not expressing my self correctly. English is not my mother tongue. But you distribute a package on NPM and NPM is intended to distribute code, not examples and certainly not howto to test your package. Additionally you have close this issue without discussion at all. You do not ask why this is a problem for me (a user). It's a shame you close this issue without discussion at all. Your are not acknowledging that shipping test code and examples is against common practice on the NPM ecosystem either. \nHave a good day. Again. Sorry for the communication issues. \nWhen i say \"May be i'm in the wrong in this one?\" i was just opening the possibility to discuss any opinions on the subject. So if you have a different opinion i appreciate you expose it as you did above. But may be you should wait for the opinions of other interested parties because i'm not the only user of this package.\nAdditionally i must say that this\n\nYour are not acknowledging that shipping test code and examples is against common practice on the NPM ecosystem either\n\nis my mistake. I must have said \n\nYour are not acknowledging that shipping test code and examples is against best practice on the NPM ecosystem either\n\nI'm very grateful of your job contributing to this project. Don;t get that wrong. I have a great appreciation for this work of yours and i use this package a lot. I know the stated problem is common to many other NPM packages. I'm just trying to contribute to this project i really appreciate by raising the issue. If some day i found a problem on this package no doubt i will report it and try to fix it myself to contribute to your work. I just not create a MR because i think the issue need to be discussed first with the community as a hole. This is one of the packages that is a strong candidate to install on embedded systems and distributing additional stuff do not help on that scope.\nMy brain is saying \"just end the conversation\" but i really think that the community need to have this debate.\nHave a good day and keep the good work . ",
    "chrste90": "@mcollina Oh, you are right, there are some more problematic dependencies. If i start an angular app, i get this error:\nUncaught ReferenceError: process is not defined\n    at Object../node_modules/process-nextick-args/index.js (index.js:3)\n    at __webpack_require__ (bootstrap:74)\n    at Object../node_modules/readable-stream/lib/_stream_readable.js (_stream_readable.js:26)\n    at __webpack_require__ (bootstrap:74)\n    at Object../node_modules/readable-stream/readable-browser.js (readable-browser.js:1)\n    at __webpack_require__ (bootstrap:74)\n    at Object../node_modules/mqtt/lib/store.js (store.js:8)\n    at __webpack_require__ (bootstrap:74)\n    at Object../node_modules/mqtt/lib/client.js (client.js:7)\n    at __webpack_require__ (bootstrap:74)\nSo i think the main problematic dependency is readable-stream (Or their dependency process-nextick-args). Do you know if it is possible to replace readable-stream with another dependency or should i try to bring up the error on their site? But if i look at their repo: https://github.com/nodejs/readable-stream, it looks like it is a library especially for node.js, so i don't think it would be approriate to change the use of node built-ins there.\nAlso for this repo, i just searched for process in the code and found out that there are some uses of process.nextTick(). I'm not very familiar with this but i think it should be possible to replace process.nextTick() with setTimeout()? If so, i could create a PR changing the behaviour (or create a switch to either use nextTick on node oder setTimeout on browser).\nThe uses of process.env in the tests should do no harm if one would try to use this lib in angular.\nBut for bin/sub.js and bin/pub.js there are uses of process.exit(). Is this code used by consumers or only for examples in this repo (sorry, i'm not very familiar with mqtt.js yet :)). > I don't think we can easily change the behavior in readable-stream, but we can specify a browser field in process-nexttick-args package.json, to avoid using process in the browser.\nOkay i don't exactly understand what you mean by this. Is it something that can be done in this repo or should it be changed in process-nexttick-args?\nAny other ideas what can be done with process.nextTick()?. Is it something you can do? I'm not very familiar with either one or the other, so it would be very hard for me do make the right changes and don't break anything in this lib.. Okay, then i will need to find some time and make it working somehow.\nFor the Readable-Streams: Do you think it can be possible to change to https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/ReadableStream or does the stream api behave differently than the readable-stream package which is used now?. I also did some quick research and found out that the best alternative in browser for nextTick() should be Promise.resolve().then().\nWhat about making a switch: In browser use Promise.resolve().then() and in an node environment process.nextTick()? Maybe somthing simple like:\nif (process) {\n    process.nextTick()\n} else {\n    Promise.resolve().then()\n}. ",
    "Mbonea-Mjema": "Hey am new to all this and I would like to use mqtt and I keep getting the Reference error \n. @sclausen Thanks for the quick response..but am totally new to nodejs and angular..can you give me some steps to follow or something. Thanks for the help... I used the \"browserify'd\" version of mqtt.js and It worked like a charm here is a link \nhttps://gist.github.com/ajsharp/4178e69d3b545ec0a437. any fix for this error??. https://www.npmjs.com/package/mqtt#browserify  this fixed my problem. ",
    "wcatron": "By doesn't work I mean it doesn't use the default protocol.\nAre you fine with requiring protocol in the IClientOptions servers array objects? \nChange this:\nservers?: Array<{\n    host: string\n    port: number\n    protocol?: 'wss' | 'ws' | 'mqtt' | 'mqtts' | 'tcp' | 'ssl' | 'wx' | 'wxs'\n  }>\nto this:\nservers?: Array<{\n    host: string\n    port: number\n    protocol: 'wss' | 'ws' | 'mqtt' | 'mqtts' | 'tcp' | 'ssl' | 'wx' | 'wxs'\n  }>\nThen I can throw an error if the protocol is not present.\n. I don't want to either. So if it's not specified it will use whatever opts.protocol was set to previously. So in this\nprotocol: 'ws',\n                servers:[{\n                    host: getMQTTBrokerHostname(),\n                    port: 8883,\n                    protocol: 'wss'\n                },{\n                    host: getMQTTBrokerHostname(),\n                    port: 1884\n                }]\n other example I believe it was using wss. If you never set it and you leave it optional. It will use the whatever you set { protocol: THIS, servers: [{...},{...}] } to. So I guess it's backwards compatible because you didn't have ANY definition for protocol in the servers array object. So no one would currently be using the \"not working\" example above.\nIf I do \nif (opts.protocol) {\n    opts.defaultProtocol = opts.protocol;\n}\nwhen it's parsing the initial protocol and then use opts.defaultProtocol when opts.servers[client._reconnectCount].protocol doesn't exist that should solve the problem.. Sorry for the delay, finally got around to the unit tests. I modified the test responsible for testing port-host configurations for the servers option to include protocol and a default protocol. Everything should be backwards compatible and working now.\nDo you want me to squash my commits or anything before the PR is merged? Sorry I'm not very up to date on best practices. . I think this is ready to be merged! \ud83d\udc4d . One of my goals was to not disrupt the existing code - might have taken it too far, usually %ing is a red flag for that :) . @mcollina requested in #392 that we not use too many ifs which is why I went with my solution. So yes we could do this:\njs\n// Define secureProtocolList and protocolList above...\n  if (!protocols[opts.protocol]) {\n    const isSecure = secureProtocolList.indexOf(opts.protocol) !== -1\n    if (isSecure) {\n      opts.protocol = secureProtocolList.filter(function (key, index) {\n        return (typeof protocols[key] === 'function')\n      })[0]\n    } else {\n      opts.protocol = protocolList.filter(function (key, index) {\n        return (typeof protocols[key] === 'function')\n      })[0]\n    }\n  }\nIssues: we have a protocols object a protocolList array and a secureProtocolList array. Two of which are only used in this one block of code.\nor I just pushed a solution that instead makes the dependency much more obvious and removes the protocolList. This block was the only part that used the protocolList so it makes sense to just include it directly and no one will go making changes without looking inside the filter function.\nThere was always a requirement on the order of the array so I don't think it's an issue that it has to go insecure, secure, since before it had to be in that order too (otherwise I would have just changed the order). The problem is with the list being defined so far away it could have been altered too easily. My last commit fixes that :) \nSorry for the length :). ",
    "VsterLong": "I also encountered this problem, CLI is not supported.. but can use in Powershell.. ",
    "AhmadRaza786": "@RangerMauve , I dont think so. because its working fine. just forget the password, Can u please tell me that how can i can connect my callback function with the authenticate ?. ",
    "Degola": "@RangerMauve please see following PR which tackle the mentioned issues:\nhttps://github.com/mqttjs/MQTT.js/pull/841\n\n\nSet minimum of this.nextId initialisation to 1:\nthis.nextId = Math.max(1, Math.floor(Math.random() * 65535))\n\n\nMissing slot 65536 is not the case, the previous function was the following:\nvar id = this.nextId++\n  // Ensure 16 bit unsigned int:\n  if (id === 65535) {\n    this.nextId = 1\n  }\n  return id\n\n\nWhich results into the following behaviour:\n1. nextId is 65535\n2. id becomes 65535\n3. nextId becomes 65536\n4. if(id === 65535) sets nextId to 1 while nextId is already 65536\nIt would be different with var id = ++this.nextId.\nNevertheless, it's  hard to read and not very explicit, id is a copy of nextId while nextId is changed which is not really clear (devil is here definitively in the detail) therefore I added a merge request to change the implementation to with the purpose of easier readability:\nvar id = this.nextId++\nif(this.nextId === 65536) {\n  this.nextId = 1\n}\nreturn id. ",
    "krittanon-w": "Pay attention to this issue.. Pay attention to this issue.. ",
    "zlatinejc": "Still nothing ?. look in the store.js section to implement your persistance layer. ",
    "matiasdecarli": "Hey @dushyantbangal . I believe you're looking for the same thing I was looking for some days ago. Take a look: https://github.com/aws/aws-iot-device-sdk-js/issues/226\ntl;dr, you can set the timeout on the keepalive option in seconds. I'm not 100% sure if the callback is going to get called, but the library is going to try to reconnect after 10 seconds. For further reference, and now that i've solved my issue, I'm going to comment what was happening to me\nI was running the client in a node app inside Docker, using the Docker netowork. This caused the app to have a different IP from the host IP. I started to look at using static IP's for the host but none of those things worked. I even tried using this and manually setting the IP of the iot endopoint \nAt the end, I've tried using the same network as the host, and this did the trick. Now is working like a charm. ",
    "malishahi": "I think the solution is to check if a client is connected, before calling publish. If client is not connected you don't have to publish, if you wanna rely on its callback, since callback does not get fired at all when client is not connected due to network problems, or broker being down.. @senthil5053 I think the problem is that the connection to mqtt is outside app.get.\nvar client = mqtt.connect(\"mqtt://\" + moscaHost + \":\" + moscaPort);. ",
    "saboya": "@mcollina That ought to do it.. ",
    "amerllica": "@RangerMauve , Thanks for you answer, but your words are a little complicated, what do you mean my build system has problem? My example platform is HERE Take a look and tell me what I'm wrong. Thanks. Thanks @RangerMauve  for your answer but I'm intermediate in React, Webpack and Babel, Actually my projects works well with MQTT and I settled up everything but I wanna know why mqtt.js using shebang and why after using shebang-loader the console still show yellow warning.\nIf you are interested to see my project you can see THIS ADDRESS, after installing with yarn install just type yarn dev to run and see what I'm writing about universal react app.\nIf you wanna see my mqtt project, wait until sunday and then I'll post a link here to you.. @RangerMauve , Thanks a lot for your clear explanation. I got it. thanks.. How do you do?\nI have found the right answer with a bounty offering in the Stack Overflow, this link can help you @murbanowicz to solve this problem but if you don't want to read a lot of texts pay attention to below:\n// the right importing of mqtt\nimport {connect} from 'mqtt/dist/mqtt';\n\nBut by using import {connect} from 'mqtt'; you imported source code of mqqt, we should import the final built.\nI know, it is not a common way to importing in npm because they should put the final built in the root and put the source in bin or other folder. by the way it works with import {connect} from 'mqtt/dist/mqtt';. ",
    "aleixo": "I have fixed. It was my fault, i was mutating the clientId.. ",
    "rodrigomvf": "I'm going through the same problem.\nWhen the message volume is very large it is apparently experiencing memory leak. Same issue!. Same issue!. ",
    "PTS93": "It seems it was broker related, I couldn't pinpoint the exact cause but messages were coming through after a while, though quite a bit slower than for non ws clients.. Mosquitto. ",
    "benswinburne": "It's not related to AWS, I could just put a console long in my transformWsUrl and it never gets called. \nThe actual signing of the URL and connecting to the server works fine. This library never runs my transformWsUrl function if an object is passed as the first parameter to connect(), but if it's the 2nd one, it's fine.. I appreciate that. I'm simply asking if it is indeed a bug with this library or it is a misunderstanding with the use thereof. I've just looked into it a bit further and it (intentionally?) only runs for WS/WSS URLs and the library discerns the protocol from the URL or the parameter protocol and therefore the following works.\nconst client = mqtt.connect({\n  protocol: 'ws',\n  transformWsUrl: (url, options, client) => {\n    return getSignedUrl({...})\n  }\n})\nI guess the reason this occurs is because without a URL or the parameter, the library is unable to work out the protocol and defaults to mqtt which doesn't call it.\nIf that's intended behaviour then I might just submit a PR to the readme to indicate the function only runs when using WS/WSS.\nThe other option would be to run the function all protocols involving a URL after establishing/defaulting the protocol, or run the transformWsUrl prior to determining the protocol?\nThoughts?\nEdit: In retrospect it might be fairly obvious given it's called transformWsUrl, but it wasn't immediately obvious i needed to specify the protocol as in my mind, my URL was a wss:// protocol URL. ",
    "adamlc": "This would be useful. Or a callback :). ",
    "alexandrmiee": "But why is the \"#\" symbol escaped?. ",
    "yingye": "Can you help us to review this pr? @taoqf . \ud83d\udc4c. In the Weixin environment, there is no document, just like in the node environment, there is no window. So that is useless.. ",
    "anthrogan": "You need to supply a port with the connection url. \"mqtt://test.mosquitto.org:1883\". ",
    "sueblue": "@anthrogan adding port 1883 is not useful .\ngot a error:\n stream.js?b72e:64 WebSocket connection to 'ws://test.mosquitto.org:1883/' failed: Error during WebSocket handshake: net::ERR_CONNECTION_RESET,\nanyway,tks a lot.. ",
    "austin-rausch": "The MQTT client extends events.EventEmitter.  https://nodejs.org/docs/latest-v5.x/api/events.html#events_emitter_removealllisteners_eventname\nYou can use either that function, or the one below it.. ",
    "miricy": "thanks you very much\uff0c\nI will try it use the last lib..  I removed all node modules, then update all packages and install them\uff0c\nand the problem still exists.\n@scarry1992  Which angular lib version do you use. The problem still exists\uff0cthank you all the same. ok, thanks,  ngx-mqtt can work on my project.. ",
    "maykon-oliveira": "I have the same problem. ",
    "mjibansingh": "use https://sclausen.github.io/ngx-mqtt/ for angular 6.. ",
    "carloscolombo": "For the people who do not want to change packages, this solution worked for me:\nhttps://github.com/angular/angular-cli/issues/10410#issuecomment-419696528\n\nThis is how i got around this \"ReferenceError: process is not defined\" issue.\nAdded process module via npm\n\"process\": \"^0.11.10\"\nAdded this to polyfill.ts file\n(window as any).process = require('process/browser');\nThis fixes the issue for me, not an ideal solution though. Would love to see a better fix. \n",
    "aa2kb": "Happy to help :)\n. ",
    "lucaele": "yes i'm running on browser.\nSo I think the same problem is on cordova mobile app, right?\n. ",
    "BrunnerLivio": "I also do not receive any messages after a while. Do not know if it is a MQTT.js problem though. Running the client on an Azure VM inside of a Docker container. It is quite hard to debug, so unfortunately I can not give a better feedback. It just stops emitting 'message' events or any other event after a while (no error, no disconnect).\n. ",
    "akdj": "Ok, thanks! . ",
    "okofish": "I'm seeing this same issue, and I reached the same conclusion as @michaello1.. ",
    "rafaelubal": "I took a quick look at the code, and it looks like a limitation of the underlying 'websocket-stream' library used to create the WebSocket connection. In fact, it appears to be a restriction of the native WebSocket class specification on the browser (https://developer.mozilla.org/en-US/docs/Web/API/WebSocket). However, the Amazon IoT Device SDK finds a way to do this, I'm not sure how at the moment.. ",
    "phillipj": "I spent a day digging deep into getting an AWS IoT custom authorizer working, which requires custom Websockets HTTP headers. In short I stumbled upon this issue where AWS employee @AWSSteveHa confirms several times that it can't be done from browsers because of limitations in the underlying Websocket implementation: https://github.com/aws/aws-iot-device-sdk-js/issues/169\n\nHowever, the Amazon IoT Device SDK finds a way to do this, I'm not sure how at the moment.\n\nOhh! Any hints how to make that work? Would be really interesting digging into the \"how\" there... ",
    "rrrhys": "To send the headers in the connect request, please try installing a modified websocket-stream library.\nnpm install --save git+https://github.com/rrrhys/websocket-stream.git\nI've modified websocket-stream to pass through headers when supplied in the options (for a React Native project).. ",
    "ogis-fujiwara": "\nAs we need this to be set up as soon as possible after connection, as sending all the messages in the store might take some time.\nI will update the code as follows:\n\nBefore stored message processing, this._setupPingTimer() is called.\nIn addition, resubscribe is called. Because a client might have subscribed the same topic in the stored message.\n. I've updated all mentioned above.\nTravis test was passed when I pushed changes to my topic branch. See below.\nhttps://travis-ci.org/ogis-fujiwara/MQTT.js/builds/424621763\nWould you restart failed tests?. I've commited it.\nAll Travis test against my branch was passed as below.\nhttps://travis-ci.org/ogis-fujiwara/MQTT.js/builds/425060666. Thank you very much for merging.. Motivation: \nWe have a requirement as below.\nClient application using MQTT.js needs to shutdown after it receives puback, if the app is requested to shutdown from user while it is waiting puback after publish.\nBut if the app can't receives puback soon because broker is busy (or network is slow), the app can shutdown if it is sure that the message is put into outgoingStore. This is because the app can restore message from outgoingStore on persistence store e.g., mqtt-level-store when reconnect.\nIntroduced callback cbStorePut realizes above request.. Thank you very much for merging.. Along with #869, need to update type scripts. Can I create new PR?. @mcollina, please merge this PR before release 3.0.0.. Yes, I will do that.. connack packet is mandatory parameter when emitting connect.\nSo I introduced that.connectEmitter() to capture connack packet.\nInstead of do that, I can store connack packet and pass it to emit connect.\nWhich one is better?\n. Thanks, I will commit it.. I committed this. Could you please review?. I changed that the callback is one of publish method's options.. ",
    "fArchitect": "Check your Thing policy it should contain appropriate rules for connection: \njson\n{\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iot:Connect\"\n      ],\n      \"Resource\": [\n        \"arn:aws:iot:...:client/sdk-java\",\n        \"arn:aws:iot:...:client/basicPubSub\",\n        \"arn:aws:iot:...:client/sdk-nodejs-*\"\n      ]\n    },\n{\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iot:Publish\",\n        \"iot:Receive\"\n      ],\n      \"Resource\": [\n        \"arn:aws:iot:...:topic/sdk/test/java\",\n        \"arn:aws:iot:...:topic/sdk/test/Python\",\n        \"arn:aws:iot:...:topic/topic_1\",\n        \"arn:aws:iot:...:topic/topic_2\"\n      ]\n    }\nIn my case, client id must be in format \"sdk-nodejs-*\" and topics: \"topic_1\", \"topic_2\"...\nExample:\nshell\n$ mqtt publish --key priv.pem --cert cert.pem --ca AmazonRootCA1.pem -h <iot-rest>.iot.<region>.amazonaws.com -i sdk-nodejs-1 topic_1 '{\"Hello\":\"World!\"}'\n. ",
    "ucorina": "I found a similar issue here. The solution suggested there worked for me, to listen to the error events on the stream property: \n```js\nconst mqtt = require('mqtt')\nconst client  = mqtt.connect('mqtt://an-invalid-url');\nclient.on('connect', function () {\n});\nclient.on('error', function (error) {\n    // This does not trigger when the URL is invalid\n});\nclient.stream.on('error', function (error) {\n    // This does trigger when the URL is invalid\n    console.error('Connection error:', error);\n});\n``\nThe main downside of this is that thestream` is a new instance after every reconnect, so the event is only triggered once. However this was enough for me to catch the ERR_NAME_NOT_RESOLVED error.\nRegarding the fact that try...catch doesn't work, that makes sense as connecting to WebSockets is asynchronous (see this SO answer).. ",
    "pkuczynski": "This didn't work for me and I received uncaught exceptions from stream.js due to 403 response from the server (after auth token timed out). Without being able to catch the error, I could not re-auth. Any suggestion on how to fix it?. ",
    "housemeow": "If you use mosquitto as mqtt broker, you have to set below:\nlistener 9001\nprotocol websocket\nin /etc/mosquitto/mosquitto.conf\n. ",
    "sudhamoorthi": "i tried with below code snippet and its working fine in open network but it is not working in corporate network. kindly support on this.\n```js\nvar options = {\n    'username':'admin',\n    'password':'admin',\n    'retain': false,\n    'protocol': 'wss',\n    'rejectUnauthorized': false\n  };\n  var broker = \"wss://51.24.207.209:443/activemqws/mqtt\";\nvar client = mqtt.connect(broker, options);\n```\nBut the same above code is giving error message in corporate network as below\n\"ECONNRESET\"\nerrno\n:\n\"ECONNRESET\"\nsyscall\n:\n\"read\"\ntarget\n:\nWebSocket\ntype\n:\n\"error\"\nmessage\n:\n\"read ECONNRESET\"\nstack\n:\n\"Error: read ECONNRESET\u21b5    at exports._errnoException (util.js:1024:11)\u21b5    at TLSWrap.onread (net.js:610:25)\"\nproto\n:\nObject. ",
    "andares": "I have same trouble. I use broker ws://myweb.com:8083/mqtt it's work, and use wss://myweb.com:8084/mqtt is not work, can not connect server.\nbut I test it in servlet is ok.\n\n. ",
    "sergey-lukin": "Same issue here. I get several duplicates of the same message.\nAs a workaround I store last message of each topic in a variable and before processing message I check if same message with same topic was already processed. In my case messages are always different because they contain datatime field.\njs\nvar lastMsgPerTopic = {};\nmqttClient.on('message', function insertEvent(topic, encodedMessage, packet) {\n    var message = encodedMessage.toString();\n    if (!lastMsgPerTopic[topic] || lastMsgPerTopic[topic] != message) {\n        lastMsgPerTopic[topic] = message;\n        // processing a message\n    }\n});. ",
    "kailashyogeshwar85": "As workaround\nDuplicate message will always be decoded so just check if it is already decoded or not and then process accordingly.\nJavascript\nclient.on('message', (topic, message, packet) => {\n if (!Buffer.isBuffer(packet.payload)){\n  // probably the message is arrived once \n }\n}). ",
    "isabo": "@Gadi-Manor: The MQTT protocol appears not to have explicit support for abandoning messages. However, using QoS 1 or 2, I suppose we could just not send an acknowledgement if we abandon the message. This should cause the broker to send a duplicate later.\nIn order to do this, it seems we have to override the MqttClient.handleMessage method to call the callback with an error if we decide to abandon, or just not call it at all in that case. handleMessage looks like it was written with this purpose in mind.\n . ",
    "raevillena": "generate unique id for different instance of the connection. same id disconnects all the time. ",
    "SyMind": "I read code in https://github.com/mqttjs/MQTT.js/blob/master/test/browser/wx.js, but i have not find ../helpers/wx.. emmm, you add '../helpers/wx'. How to write unit test for Weixin.. think you. (\u309c-\u309c)\u3064\u30ed. @mcollina I don't think i can do it. Because weixin and ali min program is a platform that Tencent and Alibaba does not open source, and they donot have tools for unit testing. \nI read code in https://github.com/mqttjs/MQTT.js/blob/master/test/browser/wx.js, but i have not find ../helpers/wx. I wonder guy who add weixin min program support how to do it.. @taoqf i need your help.. @mcollina I decided to write a demo to verify it work correctly. I will do it next week.. websocket \u8fde\u63a5\u5931\u8d25\uff0c\u670d\u52a1\u5668\u7aef\u95ee\u9898\uff0c\u4f60\u9700\u8981\u63d0\u4f9b\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u3002\u4e5f\u8bb8\u8fd9\u4e2a\u5bf9\u4f60\u6709\u5e2e\u52a9https://stackoverflow.com/questions/35844514/websocket-connection-to-ws-localhost3434-failed-connection-closed-before. @guakeliao \njavascript\nvar mqtt = require('../../MQTT/mqtt.js')\nconst client = mqtt.connect('wss://****:8884')\nuse wxs or wx in weapp\n. @RangerMauve \nLast code for weapp is also pulled request by me, is fixed some bug for it.. @Likunone Maybe it's because of wx.closeSocket api used in old version code, you can see here: https://github.com/mqttjs/MQTT.js/issues/892. @Likunone This is the limitation of the webscoket interface provided by Wechat Mini Program. You can ask for help in the Wechat Mini Program Community.\nhttps://developers.weixin.qq.com/. @xuhongv \u53ef\u80fd\u662f\u7aef\u53e3\u95ee\u9898\uff0c\u771f\u673a\u53ef\u80fd\u4e0d\u53ef\u4f7f\u7528\u9664\u4e86443 \u6216 80 \u4ee5\u5916\u7684\u7aef\u53e3\u3002. case 'ali':\n            opts.protocol = 'alis'\n            break. yes. ",
    "joeblynch": "Closing because I realized this implementation will result in the message being handled by the client more than once if the PUBCOMP fails to send and multiple PUBREL are received. Will reopen once I have this resolved and tested.. My thought here is that if del were to fail, and prevented sending pubcomp, the server would respond with another pubrel, which wold trigger the QOS 2 message to be handled twice.\nThe prior implementation prevented this by saving the pubrel to the incoming store, and checking for that message in the store when a second pubrel is received. However, it also had the effect of leaving the messages in the incoming store, and would result in the message not being reprocessed if the first call to handleMessage failed.\nI could definitely be misunderstanding the spec here though, so I'd appreciate any input on how to better handle this, if this is incorrect.. If I understand correctly, I think that'd look something like this:\nJavaScript\n  that.incomingStore.get(packet, function (err, pub) {\n    if (!err && pub.cmd !== 'pubrel') {\n      that.emit('message', pub.topic, pub.payload, pub)\n      that.incomingStore.put(packet, function (err) {\n        if (err) {\n          return callback(err)\n        }\n        that.handleMessage(pub, function (err) {\n          if (err) {\n            return callback(err)\n          }\n          that._sendPacket(comp, function (err) {\n            if (err) {\n              return callback(err)\n            }\n            that.incomingStore.del(packet, callback)\n          })\n        })\n      })\n    } else {\n      that._sendPacket(comp, callback)\n    }\nThe thing I'm unclear on here, should the message be considered processed if the call to handleMessage returns an error? With this logic, if handleMessage fails and prevents pubcomp from being sent, when the server resends pubrel the check for the previous pubrel message will prevent handleMessage from being called again.\nAnother concern is that if _sendPacket were to fail, the message wouldn't be removed from the incoming store when the server resent pubrel, although that could probably be resolved by splitting out the check for the pubrel and duplicating the send/del logic:\n```JavaScript\nthat.incomingStore.get(packet, function (err, pub) {\n    if (!err) {\n      if (pub.cmd !== 'pubrel') {\n        // ...\n      } else {\n        that._sendPacket(comp, function (err) {\n          if (err) {\n            return callback(err)\n          }\n          that.incomingStore.del(packet, callback)\n        })\n      }\n    } else {\n      that._sendPacket(comp, callback)\n    }. ",
    "nuhamind2": "I experience similar case, in my case, I am publishing empty topic. The \"close\" event is called, but the socket is not actually closed (not sending FIN packet). If I call Client.end() inside the \"close\" event handler, it does not send DISCONNECT packet too, it will only prevent reconnection .  Calling Client.end() before the phenomenom happen will send DISCONENCT packet.\nEDIT : I mean if topic is undefined. My code\n```javascript\nvar mqtt = require('mqtt')\nfunction clientStart(clientId) {\n    var mqttcon = mqtt.connect('mqtt://localhost:9000', {\n        username: \"nuha\", password: \"password\", queueQoSZero: false, clean: true, clientId: clientId\n    });\n    const seedtopic = \"The quick brown fox jumps over the lazy dog\".split(\" \")\n    const seedmsg = \"Jived fox nymph grabs quick waltz\".split(\" \")\n    var iv\nmqttcon.on(\"connect\", function () {\n    console.log(`${clientId} connected`)\n    iv = setInterval(function () {\n        const topic = seedtopic[Math.floor((Math.random() * (seedtopic.length + 1)))];//due to bug here, may use empty topic\n        const message = seedmsg[Math.floor((Math.random() * (seedmsg.length)))];\n        mqttcon.publish(topic, message)\n    }, 300)\n})\n\nmqttcon.on(\"reconnect\", function () {\n    console.log(`${clientId} REconnected`)\n})\n\nmqttcon.on(\"close\", function () {\n    console.log(`${clientId} DISconnected`)\n    clearInterval(iv)\n    //mqttcon.end()\n})\n\nmqttcon.on(\"error\", function () {\n    console.log(`${clientId} ERROR`)\n})\n\nmqttcon.on(\"end\", function () {\n    console.log(`${clientId} ENDED`)\n})\n\n}\nclientStart(\"0001\"). empty topic is actually invalid per mqtt standard, maybe a simple validation check is enough.. here. There if field to set username and password on the Client constructor. This example also show how to set username and password\nhttps://github.com/mqttjs/MQTT.js/blob/master/examples/wss/client.js. ",
    "juansmolano": "Hi,\ndid you find any kind of work-around for this?  we are also experiencing the same issue, the client does not receive messages when multiple messages are sent by broker simultaneously.  we are already on production and we had to scale the backend in order to minimize de probability of occurrence.. ",
    "vish30": "Hi,\nI avoided it by changing the restart policy of docker container to\n'always'. So, the container restarts instantly after a failure and it works\nfor me.\nBest,\nVishesh G. Sanghvi\nOn Tue, Mar 12, 2019 at 10:22 PM Sebastian Molano notifications@github.com\nwrote:\n\nHi,\ndid you find any kind of work-around for this? we are also experiencing\nthe same issue, the client does not receive messages when multiple messages\nare sent by broker simultaneously. we are already on production and we had\nto scale the backend in order to minimize de probability of occurrence.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mqttjs/MQTT.js/issues/904#issuecomment-472086288, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AQU84sYhY7N5GkwJoNfwRAAaSqhJIp5sks5vV9thgaJpZM4ZYKSQ\n.\n. \n",
    "millsy": "I have a similar scenario - failed auth kills the process. ",
    "ensleep": "I want to catch  \"Not authorized\" too!. ",
    "ffxsam": "Never mind, we figured it out. Didn't realize we have to use wss on the client side.. so we switched to Amazon MQ port 61619 (WSS).. ",
    "lucacalcaterra": "Same issue for me even the mqtt server is offline... . ",
    "AuspeXeu": "The call of fs.readFileSync returns the contents of that file. This means it will be stored in the options object of the client. Simply print console.log(client.options) by updating the options accordingly before a reconnect you should be able to fix this issue.. So which one is lacking behind? the README.md or the client.js?. Well, the files on the current master branch on GitHub do not comply with each other.. Ah, it seems like the file changed since I opened this issue and all is okay now.. ",
    "sk4ry": "Ok, i see that and i try to change directly inside the client.options object (client.options.cert and client.options.wsOptions.cert), and it take into account the new certificate.\nHowever when i call client.reconnect() this will loop like that (i log all the event) :\nreconnect event | connected event | close event | reconnect event | connected event | close event etc...\nI don't understand why this happen or if it's an expected behaviour, but i need to do :\njavascript\nclient.end()\nclient.reconnect()\nto avoid the reconnect loop.\nIs there an other way to achieve this ?. ",
    "Likunone": "@SyMind Thank you to solve. ",
    "xuhongv": "@Likunone \u8bf7\u95ee\u60a8\u89e3\u51b3\u4e86\u5417\uff1f. ",
    "imZack": ":+1:  Just updated.\n. Why package-lock.json is in .gitignore?\n\nThis file is intended to be committed into source repositories, and serves various purposes:\nDescribe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.\nProvide a facility for users to \"time-travel\" to previous states of node_modules without having to commit the directory itself.\nTo facilitate greater visibility of tree changes through readable source control diffs.\nAnd optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages.\n\nref: https://github.com/npm/npm/blob/v5.0.0/doc/files/package-lock.json.md\n. Got it, I didn't notice about it too much before. Maybe we could also add a .npmrc file with package-lock = false\njust like what eslint did https://github.com/eslint/eslint/issues/8742. "
}